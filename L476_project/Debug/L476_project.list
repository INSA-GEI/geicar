
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000065c  0800fd90  0800fd90  0001fd90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103ec  080103ec  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080103ec  080103ec  000203ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103f4  080103f4  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103f4  080103f4  000203f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103f8  080103f8  000203f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080103fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022a8  200001e8  080105e0  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002490  080105e0  00032490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ae56  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c4  00000000  00000000  0006b06a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000033f8  00000000  00000000  00070430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031c0  00000000  00000000  00073828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eff4  00000000  00000000  000769e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c7cb  00000000  00000000  000a59dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00122792  00000000  00000000  000d21a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f4939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f510  00000000  00000000  001f498c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fd78 	.word	0x0800fd78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800fd78 	.word	0x0800fd78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <GLOBVAR_Init+0xac>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <GLOBVAR_Init+0xb0>)
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <GLOBVAR_Init+0xb4>)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 8000ffa:	491c      	ldr	r1, [pc, #112]	; (800106c <GLOBVAR_Init+0xc4>)
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 8001008:	4918      	ldr	r1, [pc, #96]	; (800106c <GLOBVAR_Init+0xc4>)
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 8001016:	4915      	ldr	r1, [pc, #84]	; (800106c <GLOBVAR_Init+0xc4>)
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c1 2302 	strd	r2, r3, [r1, #8]

	messages[0]=0;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	messages[1]=0;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <GLOBVAR_Init+0xc8>)
 800102c:	2200      	movs	r2, #0
 800102e:	705a      	strb	r2, [r3, #1]
	messages[2]=0;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	709a      	strb	r2, [r3, #2]
	messages[3]=0;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001038:	2200      	movs	r2, #0
 800103a:	70da      	strb	r2, [r3, #3]
	messages[4]=0;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <GLOBVAR_Init+0xc8>)
 800103e:	2200      	movs	r2, #0
 8001040:	711a      	strb	r2, [r3, #4]
	messages[5]=0;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001044:	2200      	movs	r2, #0
 8001046:	715a      	strb	r2, [r3, #5]

}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000228 	.word	0x20000228
 8001058:	2000022c 	.word	0x2000022c
 800105c:	20000230 	.word	0x20000230
 8001060:	20000204 	.word	0x20000204
 8001064:	20000210 	.word	0x20000210
 8001068:	2000021c 	.word	0x2000021c
 800106c:	20000370 	.word	0x20000370
 8001070:	20000234 	.word	0x20000234

08001074 <IMU_init>:




void IMU_init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 8001078:	4b57      	ldr	r3, [pc, #348]	; (80011d8 <IMU_init+0x164>)
 800107a:	22bf      	movs	r2, #191	; 0xbf
 800107c:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <IMU_init+0x164>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001084:	4b54      	ldr	r3, [pc, #336]	; (80011d8 <IMU_init+0x164>)
 8001086:	4a55      	ldr	r2, [pc, #340]	; (80011dc <IMU_init+0x168>)
 8001088:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <IMU_init+0x164>)
 800108c:	4a54      	ldr	r2, [pc, #336]	; (80011e0 <IMU_init+0x16c>)
 800108e:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001090:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <IMU_init+0x164>)
 8001092:	4a54      	ldr	r2, [pc, #336]	; (80011e4 <IMU_init+0x170>)
 8001094:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001096:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <IMU_init+0x164>)
 8001098:	4a53      	ldr	r2, [pc, #332]	; (80011e8 <IMU_init+0x174>)
 800109a:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800109c:	4b4e      	ldr	r3, [pc, #312]	; (80011d8 <IMU_init+0x164>)
 800109e:	4a53      	ldr	r2, [pc, #332]	; (80011ec <IMU_init+0x178>)
 80010a0:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 80010a2:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <IMU_init+0x164>)
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <IMU_init+0x17c>)
 80010a6:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 80010a8:	494b      	ldr	r1, [pc, #300]	; (80011d8 <IMU_init+0x164>)
 80010aa:	4852      	ldr	r0, [pc, #328]	; (80011f4 <IMU_init+0x180>)
 80010ac:	f001 fde2 	bl	8002c74 <HTS221_RegisterBusIO>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <IMU_init+0x44>
		while(1);
 80010b6:	e7fe      	b.n	80010b6 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 80010b8:	484e      	ldr	r0, [pc, #312]	; (80011f4 <IMU_init+0x180>)
 80010ba:	f001 fe25 	bl	8002d08 <HTS221_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d000      	beq.n	80010c6 <IMU_init+0x52>
		while (1);
 80010c4:	e7fe      	b.n	80010c4 <IMU_init+0x50>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <IMU_init+0x184>)
 80010c8:	2233      	movs	r2, #51	; 0x33
 80010ca:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 80010cc:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <IMU_init+0x184>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <IMU_init+0x184>)
 80010d4:	4a41      	ldr	r2, [pc, #260]	; (80011dc <IMU_init+0x168>)
 80010d6:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80010d8:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <IMU_init+0x184>)
 80010da:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <IMU_init+0x16c>)
 80010dc:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <IMU_init+0x184>)
 80010e0:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <IMU_init+0x170>)
 80010e2:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80010e4:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <IMU_init+0x184>)
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <IMU_init+0x174>)
 80010e8:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <IMU_init+0x184>)
 80010ec:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <IMU_init+0x178>)
 80010ee:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <IMU_init+0x184>)
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <IMU_init+0x17c>)
 80010f4:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 80010f6:	4940      	ldr	r1, [pc, #256]	; (80011f8 <IMU_init+0x184>)
 80010f8:	4840      	ldr	r0, [pc, #256]	; (80011fc <IMU_init+0x188>)
 80010fa:	f002 fd65 	bl	8003bc8 <LSM303AGR_ACC_RegisterBusIO>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d000      	beq.n	8001106 <IMU_init+0x92>
		while(1);
 8001104:	e7fe      	b.n	8001104 <IMU_init+0x90>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <IMU_init+0x184>)
 8001108:	223d      	movs	r2, #61	; 0x3d
 800110a:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 800110c:	493a      	ldr	r1, [pc, #232]	; (80011f8 <IMU_init+0x184>)
 800110e:	483c      	ldr	r0, [pc, #240]	; (8001200 <IMU_init+0x18c>)
 8001110:	f002 ff4a 	bl	8003fa8 <LSM303AGR_MAG_RegisterBusIO>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d000      	beq.n	800111c <IMU_init+0xa8>
		while(1);
 800111a:	e7fe      	b.n	800111a <IMU_init+0xa6>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 800111c:	4837      	ldr	r0, [pc, #220]	; (80011fc <IMU_init+0x188>)
 800111e:	f002 fdbd 	bl	8003c9c <LSM303AGR_ACC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d000      	beq.n	800112a <IMU_init+0xb6>
		while (1);
 8001128:	e7fe      	b.n	8001128 <IMU_init+0xb4>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 800112a:	4835      	ldr	r0, [pc, #212]	; (8001200 <IMU_init+0x18c>)
 800112c:	f002 ffa0 	bl	8004070 <LSM303AGR_MAG_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d000      	beq.n	8001138 <IMU_init+0xc4>
		while (1);
 8001136:	e7fe      	b.n	8001136 <IMU_init+0xc2>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <IMU_init+0x190>)
 800113a:	22d7      	movs	r2, #215	; 0xd7
 800113c:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <IMU_init+0x190>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <IMU_init+0x190>)
 8001146:	4a25      	ldr	r2, [pc, #148]	; (80011dc <IMU_init+0x168>)
 8001148:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <IMU_init+0x190>)
 800114c:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <IMU_init+0x16c>)
 800114e:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <IMU_init+0x190>)
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <IMU_init+0x170>)
 8001154:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <IMU_init+0x190>)
 8001158:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <IMU_init+0x174>)
 800115a:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <IMU_init+0x190>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <IMU_init+0x178>)
 8001160:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <IMU_init+0x190>)
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <IMU_init+0x17c>)
 8001166:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 8001168:	4926      	ldr	r1, [pc, #152]	; (8001204 <IMU_init+0x190>)
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <IMU_init+0x194>)
 800116c:	f003 fc5a 	bl	8004a24 <LSM6DSL_RegisterBusIO>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d000      	beq.n	8001178 <IMU_init+0x104>
		while(1);
 8001176:	e7fe      	b.n	8001176 <IMU_init+0x102>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 8001178:	4823      	ldr	r0, [pc, #140]	; (8001208 <IMU_init+0x194>)
 800117a:	f003 fcbd 	bl	8004af8 <LSM6DSL_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d000      	beq.n	8001186 <IMU_init+0x112>
		while (1);
 8001184:	e7fe      	b.n	8001184 <IMU_init+0x110>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <IMU_init+0x198>)
 8001188:	22bb      	movs	r2, #187	; 0xbb
 800118a:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <IMU_init+0x198>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <IMU_init+0x198>)
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <IMU_init+0x168>)
 8001196:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <IMU_init+0x198>)
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <IMU_init+0x16c>)
 800119c:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <IMU_init+0x198>)
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <IMU_init+0x170>)
 80011a2:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <IMU_init+0x198>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <IMU_init+0x174>)
 80011a8:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <IMU_init+0x198>)
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <IMU_init+0x178>)
 80011ae:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <IMU_init+0x198>)
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <IMU_init+0x17c>)
 80011b4:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 80011b6:	4915      	ldr	r1, [pc, #84]	; (800120c <IMU_init+0x198>)
 80011b8:	4815      	ldr	r0, [pc, #84]	; (8001210 <IMU_init+0x19c>)
 80011ba:	f002 fa09 	bl	80035d0 <LPS22HB_RegisterBusIO>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d000      	beq.n	80011c6 <IMU_init+0x152>
		while(1);
 80011c4:	e7fe      	b.n	80011c4 <IMU_init+0x150>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <IMU_init+0x19c>)
 80011c8:	f002 fa6c 	bl	80036a4 <LPS22HB_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d000      	beq.n	80011d4 <IMU_init+0x160>
		while (1);
 80011d2:	e7fe      	b.n	80011d2 <IMU_init+0x15e>
	}



}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000388 	.word	0x20000388
 80011dc:	0800275d 	.word	0x0800275d
 80011e0:	080027d9 	.word	0x080027d9
 80011e4:	0800288d 	.word	0x0800288d
 80011e8:	08002829 	.word	0x08002829
 80011ec:	080052bd 	.word	0x080052bd
 80011f0:	080052d5 	.word	0x080052d5
 80011f4:	200003a8 	.word	0x200003a8
 80011f8:	200003dc 	.word	0x200003dc
 80011fc:	200003fc 	.word	0x200003fc
 8001200:	20000430 	.word	0x20000430
 8001204:	20000464 	.word	0x20000464
 8001208:	20000484 	.word	0x20000484
 800120c:	200004bc 	.word	0x200004bc
 8001210:	200004dc 	.word	0x200004dc

08001214 <IMU_enable>:

void IMU_enable(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <IMU_enable+0x6c>)
 800121a:	f001 fd90 	bl	8002d3e <HTS221_HUM_Enable>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d000      	beq.n	8001226 <IMU_enable+0x12>
		while (1);
 8001224:	e7fe      	b.n	8001224 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <IMU_enable+0x6c>)
 8001228:	f001 fe36 	bl	8002e98 <HTS221_TEMP_Enable>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d000      	beq.n	8001234 <IMU_enable+0x20>
		while (1);
 8001232:	e7fe      	b.n	8001232 <IMU_enable+0x1e>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <IMU_enable+0x70>)
 8001236:	f002 fd72 	bl	8003d1e <LSM303AGR_ACC_Enable>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d000      	beq.n	8001242 <IMU_enable+0x2e>
		while (1);
 8001240:	e7fe      	b.n	8001240 <IMU_enable+0x2c>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <IMU_enable+0x74>)
 8001244:	f002 ff51 	bl	80040ea <LSM303AGR_MAG_Enable>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d000      	beq.n	8001250 <IMU_enable+0x3c>
		while (1);
 800124e:	e7fe      	b.n	800124e <IMU_enable+0x3a>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <IMU_enable+0x78>)
 8001252:	f003 fcba 	bl	8004bca <LSM6DSL_ACC_Enable>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d000      	beq.n	800125e <IMU_enable+0x4a>
		while (1);
 800125c:	e7fe      	b.n	800125c <IMU_enable+0x48>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <IMU_enable+0x78>)
 8001260:	f003 fcd7 	bl	8004c12 <LSM6DSL_GYRO_Enable>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d000      	beq.n	800126c <IMU_enable+0x58>
		while (1);
 800126a:	e7fe      	b.n	800126a <IMU_enable+0x56>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <IMU_enable+0x7c>)
 800126e:	f002 fa34 	bl	80036da <LPS22HB_PRESS_Enable>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d000      	beq.n	800127a <IMU_enable+0x66>
		while (1);
 8001278:	e7fe      	b.n	8001278 <IMU_enable+0x64>
	}
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003a8 	.word	0x200003a8
 8001284:	200003fc 	.word	0x200003fc
 8001288:	20000430 	.word	0x20000430
 800128c:	20000484 	.word	0x20000484
 8001290:	200004dc 	.word	0x200004dc

08001294 <IMU_GetData>:

void IMU_GetData(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af02      	add	r7, sp, #8

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 800129a:	4937      	ldr	r1, [pc, #220]	; (8001378 <IMU_GetData+0xe4>)
 800129c:	4837      	ldr	r0, [pc, #220]	; (800137c <IMU_GetData+0xe8>)
 800129e:	f001 fd73 	bl	8002d88 <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 80012a2:	4937      	ldr	r1, [pc, #220]	; (8001380 <IMU_GetData+0xec>)
 80012a4:	4835      	ldr	r0, [pc, #212]	; (800137c <IMU_GetData+0xe8>)
 80012a6:	f001 fe1c 	bl	8002ee2 <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 80012aa:	4936      	ldr	r1, [pc, #216]	; (8001384 <IMU_GetData+0xf0>)
 80012ac:	4836      	ldr	r0, [pc, #216]	; (8001388 <IMU_GetData+0xf4>)
 80012ae:	f002 fe0b 	bl	8003ec8 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 80012b2:	4936      	ldr	r1, [pc, #216]	; (800138c <IMU_GetData+0xf8>)
 80012b4:	4836      	ldr	r0, [pc, #216]	; (8001390 <IMU_GetData+0xfc>)
 80012b6:	f002 ff48 	bl	800414a <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 80012ba:	4936      	ldr	r1, [pc, #216]	; (8001394 <IMU_GetData+0x100>)
 80012bc:	4836      	ldr	r0, [pc, #216]	; (8001398 <IMU_GetData+0x104>)
 80012be:	f002 fa30 	bl	8003722 <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 80012c2:	4936      	ldr	r1, [pc, #216]	; (800139c <IMU_GetData+0x108>)
 80012c4:	4836      	ldr	r0, [pc, #216]	; (80013a0 <IMU_GetData+0x10c>)
 80012c6:	f003 fd1b 	bl	8004d00 <LSM6DSL_GYRO_GetAxes>

	 snprintf((char*)message_temp,35,"temperature = %d\r\n",(int)current_temperature_degC);
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <IMU_GetData+0xec>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d4:	ee17 3a90 	vmov	r3, s15
 80012d8:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <IMU_GetData+0x110>)
 80012da:	2123      	movs	r1, #35	; 0x23
 80012dc:	4832      	ldr	r0, [pc, #200]	; (80013a8 <IMU_GetData+0x114>)
 80012de:	f00b fc23 	bl	800cb28 <sniprintf>
	 snprintf((char*)message_hum,35,"humidite = %d\r\n",(int)current_humidity_perc);
 80012e2:	4b25      	ldr	r3, [pc, #148]	; (8001378 <IMU_GetData+0xe4>)
 80012e4:	edd3 7a00 	vldr	s15, [r3]
 80012e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ec:	ee17 3a90 	vmov	r3, s15
 80012f0:	4a2e      	ldr	r2, [pc, #184]	; (80013ac <IMU_GetData+0x118>)
 80012f2:	2123      	movs	r1, #35	; 0x23
 80012f4:	482e      	ldr	r0, [pc, #184]	; (80013b0 <IMU_GetData+0x11c>)
 80012f6:	f00b fc17 	bl	800cb28 <sniprintf>
	 snprintf((char*)message_press,35,"pression = %d\r\n",(int)current_pressure_hPa);
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <IMU_GetData+0x100>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001304:	ee17 3a90 	vmov	r3, s15
 8001308:	4a2a      	ldr	r2, [pc, #168]	; (80013b4 <IMU_GetData+0x120>)
 800130a:	2123      	movs	r1, #35	; 0x23
 800130c:	482a      	ldr	r0, [pc, #168]	; (80013b8 <IMU_GetData+0x124>)
 800130e:	f00b fc0b 	bl	800cb28 <sniprintf>
	 snprintf((char*)message_acc1,50,"accelerometre : x =%d y=%d z=%d\r\n", (int)current_acceleration_mg.x, (int)current_acceleration_mg.y, (int)current_acceleration_mg.z);
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <IMU_GetData+0xf0>)
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <IMU_GetData+0xf0>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <IMU_GetData+0xf0>)
 800131c:	6892      	ldr	r2, [r2, #8]
 800131e:	9201      	str	r2, [sp, #4]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	460b      	mov	r3, r1
 8001324:	4a25      	ldr	r2, [pc, #148]	; (80013bc <IMU_GetData+0x128>)
 8001326:	2132      	movs	r1, #50	; 0x32
 8001328:	4825      	ldr	r0, [pc, #148]	; (80013c0 <IMU_GetData+0x12c>)
 800132a:	f00b fbfd 	bl	800cb28 <sniprintf>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <IMU_GetData+0x108>)
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <IMU_GetData+0x108>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <IMU_GetData+0x108>)
 8001338:	6892      	ldr	r2, [r2, #8]
 800133a:	9201      	str	r2, [sp, #4]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	460b      	mov	r3, r1
 8001340:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <IMU_GetData+0x130>)
 8001342:	2132      	movs	r1, #50	; 0x32
 8001344:	4820      	ldr	r0, [pc, #128]	; (80013c8 <IMU_GetData+0x134>)
 8001346:	f00b fbef 	bl	800cb28 <sniprintf>
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <IMU_GetData+0xf8>)
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <IMU_GetData+0xf8>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a0e      	ldr	r2, [pc, #56]	; (800138c <IMU_GetData+0xf8>)
 8001354:	6892      	ldr	r2, [r2, #8]
 8001356:	9201      	str	r2, [sp, #4]
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	460b      	mov	r3, r1
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <IMU_GetData+0x138>)
 800135e:	2132      	movs	r1, #50	; 0x32
 8001360:	481b      	ldr	r0, [pc, #108]	; (80013d0 <IMU_GetData+0x13c>)
 8001362:	f00b fbe1 	bl	800cb28 <sniprintf>
	 messages[3]= message_acc1;
	 messages[4]= message_gyro;
	 messages[5]= message_mag;*/


	 HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));
 8001366:	2223      	movs	r2, #35	; 0x23
 8001368:	490f      	ldr	r1, [pc, #60]	; (80013a8 <IMU_GetData+0x114>)
 800136a:	481a      	ldr	r0, [pc, #104]	; (80013d4 <IMU_GetData+0x140>)
 800136c:	f008 fde8 	bl	8009f40 <HAL_UART_Transmit_IT>

}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000230 	.word	0x20000230
 800137c:	200003a8 	.word	0x200003a8
 8001380:	2000022c 	.word	0x2000022c
 8001384:	20000204 	.word	0x20000204
 8001388:	200003fc 	.word	0x200003fc
 800138c:	2000021c 	.word	0x2000021c
 8001390:	20000430 	.word	0x20000430
 8001394:	20000228 	.word	0x20000228
 8001398:	200004dc 	.word	0x200004dc
 800139c:	20000210 	.word	0x20000210
 80013a0:	20000484 	.word	0x20000484
 80013a4:	0800fd90 	.word	0x0800fd90
 80013a8:	200002b0 	.word	0x200002b0
 80013ac:	0800fda4 	.word	0x0800fda4
 80013b0:	2000028c 	.word	0x2000028c
 80013b4:	0800fdb4 	.word	0x0800fdb4
 80013b8:	20000268 	.word	0x20000268
 80013bc:	0800fdc4 	.word	0x0800fdc4
 80013c0:	200002d4 	.word	0x200002d4
 80013c4:	0800fde8 	.word	0x0800fde8
 80013c8:	20000308 	.word	0x20000308
 80013cc:	0800fe08 	.word	0x0800fe08
 80013d0:	2000033c 	.word	0x2000033c
 80013d4:	20000928 	.word	0x20000928

080013d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <vApplicationGetIdleTaskMemory+0x2c>)
 80013e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <vApplicationGetIdleTaskMemory+0x30>)
 80013ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2280      	movs	r2, #128	; 0x80
 80013f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000510 	.word	0x20000510
 8001408:	20000564 	.word	0x20000564

0800140c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b0c0      	sub	sp, #256	; 0x100
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001412:	f003 fee3 	bl	80051dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001416:	f000 f8ed 	bl	80015f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800141a:	f000 fc99 	bl	8001d50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800141e:	f000 fc37 	bl	8001c90 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8001422:	f000 f939 	bl	8001698 <MX_ADC3_Init>
  MX_CAN1_Init();
 8001426:	f000 f99b 	bl	8001760 <MX_CAN1_Init>
  MX_TIM1_Init();
 800142a:	f000 fa0f 	bl	800184c <MX_TIM1_Init>
  MX_TIM3_Init();
 800142e:	f000 fa67 	bl	8001900 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001432:	f000 fafd 	bl	8001a30 <MX_TIM8_Init>
  MX_UART4_Init();
 8001436:	f000 fbcb 	bl	8001bd0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800143a:	f000 fc59 	bl	8001cf0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 800143e:	f000 f9c5 	bl	80017cc <MX_I2C2_Init>
  MX_UART5_Init();
 8001442:	f000 fbf5 	bl	8001c30 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 8001446:	f7ff fdaf 	bl	8000fa8 <GLOBVAR_Init>

  IMU_init();
 800144a:	f7ff fe13 	bl	8001074 <IMU_init>
  IMU_enable();
 800144e:	f7ff fee1 	bl	8001214 <IMU_enable>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001452:	4b56      	ldr	r3, [pc, #344]	; (80015ac <main+0x1a0>)
 8001454:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8001458:	461d      	mov	r5, r3
 800145a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001462:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001466:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800146a:	2100      	movs	r1, #0
 800146c:	4618      	mov	r0, r3
 800146e:	f009 febc 	bl	800b1ea <osThreadCreate>
 8001472:	4603      	mov	r3, r0
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <main+0x1a4>)
 8001476:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(IMU, StartIMU, osPriorityAboveNormal, 0, 64);
 8001478:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <main+0x1a8>)
 800147a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800147e:	461d      	mov	r5, r3
 8001480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001484:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMUHandle = osThreadCreate(osThread(IMU), NULL);
 800148c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f009 fea9 	bl	800b1ea <osThreadCreate>
 8001498:	4603      	mov	r3, r0
 800149a:	4a47      	ldr	r2, [pc, #284]	; (80015b8 <main+0x1ac>)
 800149c:	6013      	str	r3, [r2, #0]

  osThreadDef(GPS, StartGPS, osPriorityNormal, 0, 64);
 800149e:	4b47      	ldr	r3, [pc, #284]	; (80015bc <main+0x1b0>)
 80014a0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80014a4:	461d      	mov	r5, r3
 80014a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80014b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f009 fe96 	bl	800b1ea <osThreadCreate>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a3f      	ldr	r2, [pc, #252]	; (80015c0 <main+0x1b4>)
 80014c2:	6013      	str	r3, [r2, #0]

  osThreadDef(LIDAR, StartLidar, osPriorityNormal, 0, 64);
 80014c4:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <main+0x1b8>)
 80014c6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80014ca:	461d      	mov	r5, r3
 80014cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LIDARHandle = osThreadCreate(osThread(LIDAR), NULL);
 80014d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f009 fe83 	bl	800b1ea <osThreadCreate>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <main+0x1bc>)
 80014e8:	6013      	str	r3, [r2, #0]

  osThreadDef(Batterie, StartBatterie, osPriorityNormal, 0, 64);
 80014ea:	4b38      	ldr	r3, [pc, #224]	; (80015cc <main+0x1c0>)
 80014ec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80014f0:	461d      	mov	r5, r3
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BatterieHandle = osThreadCreate(osThread(Batterie), NULL);
 80014fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f009 fe70 	bl	800b1ea <osThreadCreate>
 800150a:	4603      	mov	r3, r0
 800150c:	4a30      	ldr	r2, [pc, #192]	; (80015d0 <main+0x1c4>)
 800150e:	6013      	str	r3, [r2, #0]

  osThreadDef(UART, StartUart, osPriorityNormal, 0, 64);
 8001510:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <main+0x1c8>)
 8001512:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001516:	461d      	mov	r5, r3
 8001518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTHandle = osThreadCreate(osThread(UART), NULL);
 8001524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f009 fe5d 	bl	800b1ea <osThreadCreate>
 8001530:	4603      	mov	r3, r0
 8001532:	4a29      	ldr	r2, [pc, #164]	; (80015d8 <main+0x1cc>)
 8001534:	6013      	str	r3, [r2, #0]

  osThreadDef(CAN, StartCAN, osPriorityNormal, 0, 64);
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <main+0x1d0>)
 8001538:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800153c:	461d      	mov	r5, r3
 800153e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CANHandle = osThreadCreate(osThread(CAN), NULL);
 800154a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f009 fe4a 	bl	800b1ea <osThreadCreate>
 8001556:	4603      	mov	r3, r0
 8001558:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <main+0x1d4>)
 800155a:	6013      	str	r3, [r2, #0]

  osThreadDef(I2C, StartI2C, osPriorityNormal, 0, 64);
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <main+0x1d8>)
 800155e:	f107 0420 	add.w	r4, r7, #32
 8001562:	461d      	mov	r5, r3
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800156c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  I2CHandle = osThreadCreate(osThread(I2C), NULL);
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f009 fe37 	bl	800b1ea <osThreadCreate>
 800157c:	4603      	mov	r3, r0
 800157e:	4a1a      	ldr	r2, [pc, #104]	; (80015e8 <main+0x1dc>)
 8001580:	6013      	str	r3, [r2, #0]

  osThreadDef(SPI, StartSPI, osPriorityNormal, 0, 64);
 8001582:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <main+0x1e0>)
 8001584:	1d3c      	adds	r4, r7, #4
 8001586:	461d      	mov	r5, r3
 8001588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SPIHandle = osThreadCreate(osThread(SPI), NULL);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f009 fe26 	bl	800b1ea <osThreadCreate>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <main+0x1e4>)
 80015a2:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015a4:	f009 fe1a 	bl	800b1dc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <main+0x19c>
 80015aa:	bf00      	nop
 80015ac:	0800fe68 	.word	0x0800fe68
 80015b0:	20000b38 	.word	0x20000b38
 80015b4:	0800fe84 	.word	0x0800fe84
 80015b8:	20000b3c 	.word	0x20000b3c
 80015bc:	0800fea0 	.word	0x0800fea0
 80015c0:	20000b40 	.word	0x20000b40
 80015c4:	0800febc 	.word	0x0800febc
 80015c8:	20000b44 	.word	0x20000b44
 80015cc:	0800fed8 	.word	0x0800fed8
 80015d0:	20000b4c 	.word	0x20000b4c
 80015d4:	0800fef4 	.word	0x0800fef4
 80015d8:	20000b48 	.word	0x20000b48
 80015dc:	0800ff10 	.word	0x0800ff10
 80015e0:	20000b50 	.word	0x20000b50
 80015e4:	0800ff2c 	.word	0x0800ff2c
 80015e8:	20000b54 	.word	0x20000b54
 80015ec:	0800ff48 	.word	0x0800ff48
 80015f0:	20000b58 	.word	0x20000b58

080015f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b096      	sub	sp, #88	; 0x58
 80015f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	2244      	movs	r2, #68	; 0x44
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f00b f872 	bl	800c6ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800161a:	f006 f8e5 	bl	80077e8 <HAL_PWREx_ControlVoltageScaling>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001624:	f000 fcb5 	bl	8001f92 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001628:	2302      	movs	r3, #2
 800162a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800162c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001630:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001632:	2310      	movs	r3, #16
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001636:	2302      	movs	r3, #2
 8001638:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800163a:	2302      	movs	r3, #2
 800163c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001642:	230a      	movs	r3, #10
 8001644:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001646:	2307      	movs	r3, #7
 8001648:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164a:	2302      	movs	r3, #2
 800164c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800164e:	2302      	movs	r3, #2
 8001650:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4618      	mov	r0, r3
 8001658:	f006 f91c 	bl	8007894 <HAL_RCC_OscConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001662:	f000 fc96 	bl	8001f92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001666:	230f      	movs	r3, #15
 8001668:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166a:	2303      	movs	r3, #3
 800166c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800167a:	463b      	mov	r3, r7
 800167c:	2104      	movs	r1, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f006 fce4 	bl	800804c <HAL_RCC_ClockConfig>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800168a:	f000 fc82 	bl	8001f92 <Error_Handler>
  }
}
 800168e:	bf00      	nop
 8001690:	3758      	adds	r7, #88	; 0x58
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800169e:	463b      	mov	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016b0:	4a29      	ldr	r2, [pc, #164]	; (8001758 <MX_ADC3_Init+0xc0>)
 80016b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c0:	4b24      	ldr	r3, [pc, #144]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80016d2:	4b20      	ldr	r3, [pc, #128]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016da:	2200      	movs	r2, #0
 80016dc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_ADC3_Init+0xbc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_ADC3_Init+0xbc>)
 8001702:	2200      	movs	r2, #0
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_ADC3_Init+0xbc>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800170e:	4811      	ldr	r0, [pc, #68]	; (8001754 <MX_ADC3_Init+0xbc>)
 8001710:	f003 ff90 	bl	8005634 <HAL_ADC_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800171a:	f000 fc3a 	bl	8001f92 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_ADC3_Init+0xc4>)
 8001720:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001722:	2306      	movs	r3, #6
 8001724:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800172a:	237f      	movs	r3, #127	; 0x7f
 800172c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800172e:	2304      	movs	r3, #4
 8001730:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001736:	463b      	mov	r3, r7
 8001738:	4619      	mov	r1, r3
 800173a:	4806      	ldr	r0, [pc, #24]	; (8001754 <MX_ADC3_Init+0xbc>)
 800173c:	f004 f8d0 	bl	80058e0 <HAL_ADC_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001746:	f000 fc24 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000764 	.word	0x20000764
 8001758:	50040200 	.word	0x50040200
 800175c:	04300002 	.word	0x04300002

08001760 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <MX_CAN1_Init+0x64>)
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <MX_CAN1_Init+0x68>)
 8001768:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <MX_CAN1_Init+0x64>)
 800176c:	2210      	movs	r2, #16
 800176e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001770:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <MX_CAN1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <MX_CAN1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_CAN1_Init+0x64>)
 800177e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001782:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <MX_CAN1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_CAN1_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_CAN1_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_CAN1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_CAN1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_CAN1_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_CAN1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_CAN1_Init+0x64>)
 80017b0:	f004 fc86 	bl	80060c0 <HAL_CAN_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80017ba:	f000 fbea 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200007c8 	.word	0x200007c8
 80017c8:	40006400 	.word	0x40006400

080017cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <MX_I2C2_Init+0x74>)
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <MX_I2C2_Init+0x78>)
 80017d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <MX_I2C2_Init+0x74>)
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <MX_I2C2_Init+0x7c>)
 80017da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <MX_I2C2_Init+0x74>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <MX_I2C2_Init+0x74>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <MX_I2C2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <MX_I2C2_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_I2C2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001806:	480e      	ldr	r0, [pc, #56]	; (8001840 <MX_I2C2_Init+0x74>)
 8001808:	f005 f99c 	bl	8006b44 <HAL_I2C_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001812:	f000 fbbe 	bl	8001f92 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <MX_I2C2_Init+0x74>)
 800181a:	f005 ff3f 	bl	800769c <HAL_I2CEx_ConfigAnalogFilter>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001824:	f000 fbb5 	bl	8001f92 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_I2C2_Init+0x74>)
 800182c:	f005 ff81 	bl	8007732 <HAL_I2CEx_ConfigDigitalFilter>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001836:	f000 fbac 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200007f0 	.word	0x200007f0
 8001844:	40005800 	.word	0x40005800
 8001848:	10909cec 	.word	0x10909cec

0800184c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08c      	sub	sp, #48	; 0x30
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2224      	movs	r2, #36	; 0x24
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f00a ff46 	bl	800c6ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001860:	463b      	mov	r3, r7
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <MX_TIM1_Init+0xac>)
 800186c:	4a23      	ldr	r2, [pc, #140]	; (80018fc <MX_TIM1_Init+0xb0>)
 800186e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <MX_TIM1_Init+0xac>)
 8001872:	2200      	movs	r2, #0
 8001874:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <MX_TIM1_Init+0xac>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800187c:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <MX_TIM1_Init+0xac>)
 800187e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001882:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <MX_TIM1_Init+0xac>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800188a:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_TIM1_Init+0xac>)
 800188c:	2200      	movs	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <MX_TIM1_Init+0xac>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001896:	2301      	movs	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800189e:	2301      	movs	r3, #1
 80018a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_TIM1_Init+0xac>)
 80018c2:	f007 fb5b 	bl	8008f7c <HAL_TIM_Encoder_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80018cc:	f000 fb61 	bl	8001f92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM1_Init+0xac>)
 80018e2:	f008 f9d9 	bl	8009c98 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80018ec:	f000 fb51 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	; 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000844 	.word	0x20000844
 80018fc:	40012c00 	.word	0x40012c00

08001900 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08e      	sub	sp, #56	; 0x38
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001914:	f107 031c 	add.w	r3, r7, #28
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001920:	463b      	mov	r3, r7
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]
 800192c:	611a      	str	r2, [r3, #16]
 800192e:	615a      	str	r2, [r3, #20]
 8001930:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001934:	4a3d      	ldr	r2, [pc, #244]	; (8001a2c <MX_TIM3_Init+0x12c>)
 8001936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001938:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <MX_TIM3_Init+0x128>)
 800193a:	2200      	movs	r2, #0
 800193c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001944:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800194a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <MX_TIM3_Init+0x128>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001958:	4833      	ldr	r0, [pc, #204]	; (8001a28 <MX_TIM3_Init+0x128>)
 800195a:	f007 fa57 	bl	8008e0c <HAL_TIM_Base_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001964:	f000 fb15 	bl	8001f92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800196e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001972:	4619      	mov	r1, r3
 8001974:	482c      	ldr	r0, [pc, #176]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001976:	f007 fcbb 	bl	80092f0 <HAL_TIM_ConfigClockSource>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001980:	f000 fb07 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001984:	4828      	ldr	r0, [pc, #160]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001986:	f007 fa98 	bl	8008eba <HAL_TIM_PWM_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001990:	f000 faff 	bl	8001f92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4821      	ldr	r0, [pc, #132]	; (8001a28 <MX_TIM3_Init+0x128>)
 80019a4:	f008 f978 	bl	8009c98 <HAL_TIMEx_MasterConfigSynchronization>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019ae:	f000 faf0 	bl	8001f92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b2:	2360      	movs	r3, #96	; 0x60
 80019b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c2:	463b      	mov	r3, r7
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	4817      	ldr	r0, [pc, #92]	; (8001a28 <MX_TIM3_Init+0x128>)
 80019ca:	f007 fb7d 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019d4:	f000 fadd 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	2204      	movs	r2, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4812      	ldr	r0, [pc, #72]	; (8001a28 <MX_TIM3_Init+0x128>)
 80019e0:	f007 fb72 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80019ea:	f000 fad2 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	2208      	movs	r2, #8
 80019f2:	4619      	mov	r1, r3
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <MX_TIM3_Init+0x128>)
 80019f6:	f007 fb67 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001a00:	f000 fac7 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	220c      	movs	r2, #12
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001a0c:	f007 fb5c 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001a16:	f000 fabc 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <MX_TIM3_Init+0x128>)
 8001a1c:	f000 fc8e 	bl	800233c <HAL_TIM_MspPostInit>

}
 8001a20:	bf00      	nop
 8001a22:	3738      	adds	r7, #56	; 0x38
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000890 	.word	0x20000890
 8001a2c:	40000400 	.word	0x40000400

08001a30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b09a      	sub	sp, #104	; 0x68
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a36:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	222c      	movs	r2, #44	; 0x2c
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00a fe3e 	bl	800c6ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a70:	4b55      	ldr	r3, [pc, #340]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a72:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <MX_TIM8_Init+0x19c>)
 8001a74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a76:	4b54      	ldr	r3, [pc, #336]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a90:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a9c:	484a      	ldr	r0, [pc, #296]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001a9e:	f007 f9b5 	bl	8008e0c <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001aa8:	f000 fa73 	bl	8001f92 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4843      	ldr	r0, [pc, #268]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001aba:	f007 fc19 	bl	80092f0 <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001ac4:	f000 fa65 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ac8:	483f      	ldr	r0, [pc, #252]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001aca:	f007 f9f6 	bl	8008eba <HAL_TIM_PWM_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001ad4:	f000 fa5d 	bl	8001f92 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ae4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4837      	ldr	r0, [pc, #220]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001aec:	f008 f8d4 	bl	8009c98 <HAL_TIMEx_MasterConfigSynchronization>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001af6:	f000 fa4c 	bl	8001f92 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afa:	2360      	movs	r3, #96	; 0x60
 8001afc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b02:	2300      	movs	r3, #0
 8001b04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482a      	ldr	r0, [pc, #168]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001b20:	f007 fad2 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001b2a:	f000 fa32 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b32:	2204      	movs	r2, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4824      	ldr	r0, [pc, #144]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001b38:	f007 fac6 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001b42:	f000 fa26 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	481e      	ldr	r0, [pc, #120]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001b50:	f007 faba 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001b5a:	f000 fa1a 	bl	8001f92 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b62:	220c      	movs	r2, #12
 8001b64:	4619      	mov	r1, r3
 8001b66:	4818      	ldr	r0, [pc, #96]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001b68:	f007 faae 	bl	80090c8 <HAL_TIM_PWM_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001b72:	f000 fa0e 	bl	8001f92 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001b98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001bac:	f008 f8fc 	bl	8009da8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8001bb6:	f000 f9ec 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001bba:	4803      	ldr	r0, [pc, #12]	; (8001bc8 <MX_TIM8_Init+0x198>)
 8001bbc:	f000 fbbe 	bl	800233c <HAL_TIM_MspPostInit>

}
 8001bc0:	bf00      	nop
 8001bc2:	3768      	adds	r7, #104	; 0x68
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	200008dc 	.word	0x200008dc
 8001bcc:	40013400 	.word	0x40013400

08001bd0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <MX_UART4_Init+0x58>)
 8001bd6:	4a15      	ldr	r2, [pc, #84]	; (8001c2c <MX_UART4_Init+0x5c>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bda:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <MX_UART4_Init+0x58>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <MX_UART4_Init+0x58>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MX_UART4_Init+0x58>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <MX_UART4_Init+0x58>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <MX_UART4_Init+0x58>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <MX_UART4_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <MX_UART4_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MX_UART4_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <MX_UART4_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c12:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_UART4_Init+0x58>)
 8001c14:	f008 f946 	bl	8009ea4 <HAL_UART_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001c1e:	f000 f9b8 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000928 	.word	0x20000928
 8001c2c:	40004c00 	.word	0x40004c00

08001c30 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c36:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <MX_UART5_Init+0x5c>)
 8001c38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c56:	220c      	movs	r2, #12
 8001c58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_UART5_Init+0x58>)
 8001c74:	f008 f916 	bl	8009ea4 <HAL_UART_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001c7e:	f000 f988 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200009ac 	.word	0x200009ac
 8001c8c:	40005000 	.word	0x40005000

08001c90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <MX_USART2_UART_Init+0x5c>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd2:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <MX_USART2_UART_Init+0x58>)
 8001cd4:	f008 f8e6 	bl	8009ea4 <HAL_UART_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cde:	f000 f958 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000a30 	.word	0x20000a30
 8001cec:	40004400 	.word	0x40004400

08001cf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001cf6:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <MX_USART3_UART_Init+0x5c>)
 8001cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d14:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d16:	220c      	movs	r2, #12
 8001d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d26:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_USART3_UART_Init+0x58>)
 8001d34:	f008 f8b6 	bl	8009ea4 <HAL_UART_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d3e:	f000 f928 	bl	8001f92 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000ab4 	.word	0x20000ab4
 8001d4c:	40004800 	.word	0x40004800

08001d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	4b31      	ldr	r3, [pc, #196]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d7e:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a2a      	ldr	r2, [pc, #168]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	4a24      	ldr	r2, [pc, #144]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dae:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001db4:	f043 0302 	orr.w	r3, r3, #2
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc6:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dca:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd2:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <MX_GPIO_Init+0xdc>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2120      	movs	r1, #32
 8001de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de6:	f004 fe95 	bl	8006b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001dea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001df0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480b      	ldr	r0, [pc, #44]	; (8001e30 <MX_GPIO_Init+0xe0>)
 8001e02:	f004 fbe9 	bl	80065d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e06:	2320      	movs	r3, #32
 8001e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e20:	f004 fbda 	bl	80065d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	; 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000800 	.word	0x48000800

08001e34 <IMU_Receive_Transmit_Data>:

/* USER CODE BEGIN 4 */

void IMU_Receive_Transmit_Data()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
	IMU_GetData();
 8001e38:	f7ff fa2c 	bl	8001294 <IMU_GetData>


}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_UART_TxCpltCallback>:

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == UART4)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_UART_TxCpltCallback+0x98>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d13e      	bne.n	8001ed0 <HAL_UART_TxCpltCallback+0x90>
    {
    	if(message_index < sizeof(messages))
 8001e52:	4b22      	ldr	r3, [pc, #136]	; (8001edc <HAL_UART_TxCpltCallback+0x9c>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b31      	cmp	r3, #49	; 0x31
 8001e58:	d837      	bhi.n	8001eca <HAL_UART_TxCpltCallback+0x8a>
    	{
    		switch(message_index)
 8001e5a:	4b20      	ldr	r3, [pc, #128]	; (8001edc <HAL_UART_TxCpltCallback+0x9c>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d82b      	bhi.n	8001ebc <HAL_UART_TxCpltCallback+0x7c>
 8001e64:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <HAL_UART_TxCpltCallback+0x2c>)
 8001e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6a:	bf00      	nop
 8001e6c:	08001e81 	.word	0x08001e81
 8001e70:	08001e8d 	.word	0x08001e8d
 8001e74:	08001e99 	.word	0x08001e99
 8001e78:	08001ea5 	.word	0x08001ea5
 8001e7c:	08001eb1 	.word	0x08001eb1
    		{
    			case 1 :
    				HAL_UART_Transmit_IT(&huart4, message_hum, sizeof(message_hum));
 8001e80:	2223      	movs	r2, #35	; 0x23
 8001e82:	4917      	ldr	r1, [pc, #92]	; (8001ee0 <HAL_UART_TxCpltCallback+0xa0>)
 8001e84:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <HAL_UART_TxCpltCallback+0xa4>)
 8001e86:	f008 f85b 	bl	8009f40 <HAL_UART_Transmit_IT>
    				break;
 8001e8a:	e017      	b.n	8001ebc <HAL_UART_TxCpltCallback+0x7c>
    			case 2 :
    				HAL_UART_Transmit_IT(&huart4, message_press, sizeof(message_press));
 8001e8c:	2223      	movs	r2, #35	; 0x23
 8001e8e:	4916      	ldr	r1, [pc, #88]	; (8001ee8 <HAL_UART_TxCpltCallback+0xa8>)
 8001e90:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <HAL_UART_TxCpltCallback+0xa4>)
 8001e92:	f008 f855 	bl	8009f40 <HAL_UART_Transmit_IT>
    				break;
 8001e96:	e011      	b.n	8001ebc <HAL_UART_TxCpltCallback+0x7c>
    			case 3 :
    				HAL_UART_Transmit_IT(&huart4, message_acc1, sizeof(message_acc1));
 8001e98:	2232      	movs	r2, #50	; 0x32
 8001e9a:	4914      	ldr	r1, [pc, #80]	; (8001eec <HAL_UART_TxCpltCallback+0xac>)
 8001e9c:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <HAL_UART_TxCpltCallback+0xa4>)
 8001e9e:	f008 f84f 	bl	8009f40 <HAL_UART_Transmit_IT>
    				break;
 8001ea2:	e00b      	b.n	8001ebc <HAL_UART_TxCpltCallback+0x7c>
    			case 4 :
    				HAL_UART_Transmit_IT(&huart4, message_gyro, sizeof(message_gyro));
 8001ea4:	2232      	movs	r2, #50	; 0x32
 8001ea6:	4912      	ldr	r1, [pc, #72]	; (8001ef0 <HAL_UART_TxCpltCallback+0xb0>)
 8001ea8:	480e      	ldr	r0, [pc, #56]	; (8001ee4 <HAL_UART_TxCpltCallback+0xa4>)
 8001eaa:	f008 f849 	bl	8009f40 <HAL_UART_Transmit_IT>
    				break;
 8001eae:	e005      	b.n	8001ebc <HAL_UART_TxCpltCallback+0x7c>
    			case 5 :
    				HAL_UART_Transmit_IT(&huart4, message_mag, sizeof(message_mag));
 8001eb0:	2232      	movs	r2, #50	; 0x32
 8001eb2:	4910      	ldr	r1, [pc, #64]	; (8001ef4 <HAL_UART_TxCpltCallback+0xb4>)
 8001eb4:	480b      	ldr	r0, [pc, #44]	; (8001ee4 <HAL_UART_TxCpltCallback+0xa4>)
 8001eb6:	f008 f843 	bl	8009f40 <HAL_UART_Transmit_IT>
    				break;
 8001eba:	bf00      	nop
    			default :;
    		}
    		message_index = message_index + 1;
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_UART_TxCpltCallback+0x9c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_UART_TxCpltCallback+0x9c>)
 8001ec6:	701a      	strb	r2, [r3, #0]
    	{
    		message_index=0;
    	}

    }
}
 8001ec8:	e002      	b.n	8001ed0 <HAL_UART_TxCpltCallback+0x90>
    		message_index=0;
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <HAL_UART_TxCpltCallback+0x9c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40004c00 	.word	0x40004c00
 8001edc:	20000266 	.word	0x20000266
 8001ee0:	2000028c 	.word	0x2000028c
 8001ee4:	20000928 	.word	0x20000928
 8001ee8:	20000268 	.word	0x20000268
 8001eec:	200002d4 	.word	0x200002d4
 8001ef0:	20000308 	.word	0x20000308
 8001ef4:	2000033c 	.word	0x2000033c

08001ef8 <StartUart>:
    	HAL_UART_Receive_IT(&huart2, &rxBufferGps, 1);
    }
}

void StartUart(void const * argument)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 8001f00:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001f04:	f009 f9bd 	bl	800b282 <osDelay>
 8001f08:	e7fa      	b.n	8001f00 <StartUart+0x8>

08001f0a <StartSPI>:
  }
  /* USER CODE END 5 */
}

void StartSPI(void const * argument)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(300);
 8001f12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f16:	f009 f9b4 	bl	800b282 <osDelay>
 8001f1a:	e7fa      	b.n	8001f12 <StartSPI+0x8>

08001f1c <StartBatterie>:
  }
  /* USER CODE END 5 */
}

void StartBatterie(void const * argument)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 8001f24:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001f28:	f009 f9ab 	bl	800b282 <osDelay>
 8001f2c:	e7fa      	b.n	8001f24 <StartBatterie+0x8>

08001f2e <StartCAN>:
  }
  /* USER CODE END 5 */
}

void StartCAN(void const * argument)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(700);
 8001f36:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001f3a:	f009 f9a2 	bl	800b282 <osDelay>
 8001f3e:	e7fa      	b.n	8001f36 <StartCAN+0x8>

08001f40 <StartLidar>:
  }
  /* USER CODE END 5 */
}

void StartLidar(void const * argument)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(600);
 8001f48:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001f4c:	f009 f999 	bl	800b282 <osDelay>
 8001f50:	e7fa      	b.n	8001f48 <StartLidar+0x8>

08001f52 <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //GetData_GPS();
	  osDelay(900);
 8001f5a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001f5e:	f009 f990 	bl	800b282 <osDelay>
 8001f62:	e7fa      	b.n	8001f5a <StartGPS+0x8>

08001f64 <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	IMU_Receive_Transmit_Data();
 8001f6c:	f7ff ff62 	bl	8001e34 <IMU_Receive_Transmit_Data>
 8001f70:	e7fc      	b.n	8001f6c <StartIMU+0x8>

08001f72 <StartI2C>:
  }
  /* USER CODE END 5 */
}

void StartI2C(void const * argument)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f009 f981 	bl	800b282 <osDelay>
 8001f80:	e7fb      	b.n	8001f7a <StartI2C+0x8>

08001f82 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f009 f979 	bl	800b282 <osDelay>
 8001f90:	e7fb      	b.n	8001f8a <StartDefaultTask+0x8>

08001f92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f96:	b672      	cpsid	i
}
 8001f98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <Error_Handler+0x8>

08001f9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6613      	str	r3, [r2, #96]	; 0x60
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_MspInit+0x4c>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	210f      	movs	r1, #15
 8001fd6:	f06f 0001 	mvn.w	r0, #1
 8001fda:	f004 fa48 	bl	800646e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000

08001fec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b0ac      	sub	sp, #176	; 0xb0
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2288      	movs	r2, #136	; 0x88
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f00a fb6d 	bl	800c6ec <memset>
  if(hadc->Instance==ADC3)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <HAL_ADC_MspInit+0xc8>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d146      	bne.n	80020aa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800201c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002020:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002022:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002032:	2308      	movs	r3, #8
 8002034:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002036:	2307      	movs	r3, #7
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800203e:	2302      	movs	r3, #2
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002042:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002046:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4618      	mov	r0, r3
 800204e:	f006 fa21 	bl	8008494 <HAL_RCCEx_PeriphCLKConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002058:	f7ff ff9b 	bl	8001f92 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800205c:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_ADC_MspInit+0xcc>)
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002060:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <HAL_ADC_MspInit+0xcc>)
 8002062:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002066:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_ADC_MspInit+0xcc>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_ADC_MspInit+0xcc>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <HAL_ADC_MspInit+0xcc>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_ADC_MspInit+0xcc>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800208c:	2307      	movs	r3, #7
 800208e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002092:	230b      	movs	r3, #11
 8002094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <HAL_ADC_MspInit+0xd0>)
 80020a6:	f004 fa97 	bl	80065d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020aa:	bf00      	nop
 80020ac:	37b0      	adds	r7, #176	; 0xb0
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	50040200 	.word	0x50040200
 80020b8:	40021000 	.word	0x40021000
 80020bc:	48000800 	.word	0x48000800

080020c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_CAN_MspInit+0x80>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d129      	bne.n	8002136 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <HAL_CAN_MspInit+0x84>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <HAL_CAN_MspInit+0x84>)
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_CAN_MspInit+0x84>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_CAN_MspInit+0x84>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a11      	ldr	r2, [pc, #68]	; (8002144 <HAL_CAN_MspInit+0x84>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_CAN_MspInit+0x84>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002112:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002124:	2309      	movs	r3, #9
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	4619      	mov	r1, r3
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002132:	f004 fa51 	bl	80065d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40006400 	.word	0x40006400
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0ac      	sub	sp, #176	; 0xb0
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	2288      	movs	r2, #136	; 0x88
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f00a fabf 	bl	800c6ec <memset>
  if(hi2c->Instance==I2C2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <HAL_I2C_MspInit+0xb0>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d13b      	bne.n	80021f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800217c:	2300      	movs	r3, #0
 800217e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4618      	mov	r0, r3
 8002186:	f006 f985 	bl	8008494 <HAL_RCCEx_PeriphCLKConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002190:	f7ff feff 	bl	8001f92 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_I2C_MspInit+0xb4>)
 8002196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002198:	4a18      	ldr	r2, [pc, #96]	; (80021fc <HAL_I2C_MspInit+0xb4>)
 800219a:	f043 0302 	orr.w	r3, r3, #2
 800219e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_I2C_MspInit+0xb4>)
 80021a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80021ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80021b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b4:	2312      	movs	r3, #18
 80021b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021c6:	2304      	movs	r3, #4
 80021c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021d0:	4619      	mov	r1, r3
 80021d2:	480b      	ldr	r0, [pc, #44]	; (8002200 <HAL_I2C_MspInit+0xb8>)
 80021d4:	f004 fa00 	bl	80065d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_I2C_MspInit+0xb4>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_I2C_MspInit+0xb4>)
 80021de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021e2:	6593      	str	r3, [r2, #88]	; 0x58
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_I2C_MspInit+0xb4>)
 80021e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021f0:	bf00      	nop
 80021f2:	37b0      	adds	r7, #176	; 0xb0
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40005800 	.word	0x40005800
 80021fc:	40021000 	.word	0x40021000
 8002200:	48000400 	.word	0x48000400

08002204 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_I2C_MspDeInit+0x3c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10f      	bne.n	8002236 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_I2C_MspDeInit+0x40>)
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_I2C_MspDeInit+0x40>)
 800221c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002220:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 8002222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002226:	4808      	ldr	r0, [pc, #32]	; (8002248 <HAL_I2C_MspDeInit+0x44>)
 8002228:	f004 fb80 	bl	800692c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_14);
 800222c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002230:	4805      	ldr	r0, [pc, #20]	; (8002248 <HAL_I2C_MspDeInit+0x44>)
 8002232:	f004 fb7b 	bl	800692c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40005800 	.word	0x40005800
 8002244:	40021000 	.word	0x40021000
 8002248:	48000400 	.word	0x48000400

0800224c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002254:	f107 0314 	add.w	r3, r7, #20
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_TIM_Encoder_MspInit+0x80>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d129      	bne.n	80022c2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002274:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002278:	6613      	str	r3, [r2, #96]	; 0x60
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800229e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022be:	f004 f98b 	bl	80065d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_TIM_Base_MspInit+0x5c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10c      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022e6:	4b13      	ldr	r3, [pc, #76]	; (8002334 <HAL_TIM_Base_MspInit+0x60>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_TIM_Base_MspInit+0x60>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6593      	str	r3, [r2, #88]	; 0x58
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <HAL_TIM_Base_MspInit+0x60>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80022fe:	e010      	b.n	8002322 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <HAL_TIM_Base_MspInit+0x64>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10b      	bne.n	8002322 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_TIM_Base_MspInit+0x60>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_TIM_Base_MspInit+0x60>)
 8002310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002314:	6613      	str	r3, [r2, #96]	; 0x60
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <HAL_TIM_Base_MspInit+0x60>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40000400 	.word	0x40000400
 8002334:	40021000 	.word	0x40021000
 8002338:	40013400 	.word	0x40013400

0800233c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a31      	ldr	r2, [pc, #196]	; (8002420 <HAL_TIM_MspPostInit+0xe4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d139      	bne.n	80023d2 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002362:	4a30      	ldr	r2, [pc, #192]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236a:	4b2e      	ldr	r3, [pc, #184]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b2b      	ldr	r3, [pc, #172]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	4a2a      	ldr	r2, [pc, #168]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800239e:	2302      	movs	r3, #2
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023ac:	f004 f914 	bl	80065d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023b0:	2303      	movs	r3, #3
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023c0:	2302      	movs	r3, #2
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4817      	ldr	r0, [pc, #92]	; (8002428 <HAL_TIM_MspPostInit+0xec>)
 80023cc:	f004 f904 	bl	80065d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80023d0:	e021      	b.n	8002416 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a15      	ldr	r2, [pc, #84]	; (800242c <HAL_TIM_MspPostInit+0xf0>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d11c      	bne.n	8002416 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_TIM_MspPostInit+0xe8>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80023f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fa:	2302      	movs	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002406:	2303      	movs	r3, #3
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240a:	f107 0314 	add.w	r3, r7, #20
 800240e:	4619      	mov	r1, r3
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <HAL_TIM_MspPostInit+0xf4>)
 8002412:	f004 f8e1 	bl	80065d8 <HAL_GPIO_Init>
}
 8002416:	bf00      	nop
 8002418:	3728      	adds	r7, #40	; 0x28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40000400 	.word	0x40000400
 8002424:	40021000 	.word	0x40021000
 8002428:	48000400 	.word	0x48000400
 800242c:	40013400 	.word	0x40013400
 8002430:	48000800 	.word	0x48000800

08002434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0b2      	sub	sp, #200	; 0xc8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800244c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002450:	2288      	movs	r2, #136	; 0x88
 8002452:	2100      	movs	r1, #0
 8002454:	4618      	mov	r0, r3
 8002456:	f00a f949 	bl	800c6ec <memset>
  if(huart->Instance==UART4)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a9c      	ldr	r2, [pc, #624]	; (80026d0 <HAL_UART_MspInit+0x29c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d144      	bne.n	80024ee <HAL_UART_MspInit+0xba>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002464:	2308      	movs	r3, #8
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002468:	2300      	movs	r3, #0
 800246a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800246c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002470:	4618      	mov	r0, r3
 8002472:	f006 f80f 	bl	8008494 <HAL_RCCEx_PeriphCLKConfig>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800247c:	f7ff fd89 	bl	8001f92 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002480:	4b94      	ldr	r3, [pc, #592]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	4a93      	ldr	r2, [pc, #588]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800248a:	6593      	str	r3, [r2, #88]	; 0x58
 800248c:	4b91      	ldr	r3, [pc, #580]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002498:	4b8e      	ldr	r3, [pc, #568]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800249a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249c:	4a8d      	ldr	r2, [pc, #564]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a4:	4b8b      	ldr	r3, [pc, #556]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80024c8:	2308      	movs	r3, #8
 80024ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ce:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024d2:	4619      	mov	r1, r3
 80024d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d8:	f004 f87e 	bl	80065d8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80024dc:	2200      	movs	r2, #0
 80024de:	2105      	movs	r1, #5
 80024e0:	2034      	movs	r0, #52	; 0x34
 80024e2:	f003 ffc4 	bl	800646e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80024e6:	2034      	movs	r0, #52	; 0x34
 80024e8:	f003 ffdd 	bl	80064a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024ec:	e0ec      	b.n	80026c8 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==UART5)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a79      	ldr	r2, [pc, #484]	; (80026d8 <HAL_UART_MspInit+0x2a4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d15d      	bne.n	80025b4 <HAL_UART_MspInit+0x180>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80024f8:	2310      	movs	r3, #16
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002504:	4618      	mov	r0, r3
 8002506:	f005 ffc5 	bl	8008494 <HAL_RCCEx_PeriphCLKConfig>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002510:	f7ff fd3f 	bl	8001f92 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002514:	4b6f      	ldr	r3, [pc, #444]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a6e      	ldr	r2, [pc, #440]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800251a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b6c      	ldr	r3, [pc, #432]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	623b      	str	r3, [r7, #32]
 800252a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252c:	4b69      	ldr	r3, [pc, #420]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002530:	4a68      	ldr	r2, [pc, #416]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800253a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002544:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002548:	4a62      	ldr	r2, [pc, #392]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800254a:	f043 0308 	orr.w	r3, r3, #8
 800254e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002550:	4b60      	ldr	r3, [pc, #384]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002570:	2303      	movs	r3, #3
 8002572:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002576:	2308      	movs	r3, #8
 8002578:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800257c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002580:	4619      	mov	r1, r3
 8002582:	4856      	ldr	r0, [pc, #344]	; (80026dc <HAL_UART_MspInit+0x2a8>)
 8002584:	f004 f828 	bl	80065d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002588:	2304      	movs	r3, #4
 800258a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259a:	2303      	movs	r3, #3
 800259c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80025a0:	2308      	movs	r3, #8
 80025a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80025aa:	4619      	mov	r1, r3
 80025ac:	484c      	ldr	r0, [pc, #304]	; (80026e0 <HAL_UART_MspInit+0x2ac>)
 80025ae:	f004 f813 	bl	80065d8 <HAL_GPIO_Init>
}
 80025b2:	e089      	b.n	80026c8 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4a      	ldr	r2, [pc, #296]	; (80026e4 <HAL_UART_MspInit+0x2b0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d144      	bne.n	8002648 <HAL_UART_MspInit+0x214>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025be:	2302      	movs	r3, #2
 80025c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025c2:	2300      	movs	r3, #0
 80025c4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ca:	4618      	mov	r0, r3
 80025cc:	f005 ff62 	bl	8008494 <HAL_RCCEx_PeriphCLKConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80025d6:	f7ff fcdc 	bl	8001f92 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80025da:	4b3e      	ldr	r3, [pc, #248]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	4a3d      	ldr	r2, [pc, #244]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	6593      	str	r3, [r2, #88]	; 0x58
 80025e6:	4b3b      	ldr	r3, [pc, #236]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80025e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a37      	ldr	r2, [pc, #220]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800260a:	230c      	movs	r3, #12
 800260c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002622:	2307      	movs	r3, #7
 8002624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002632:	f003 ffd1 	bl	80065d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2105      	movs	r1, #5
 800263a:	2026      	movs	r0, #38	; 0x26
 800263c:	f003 ff17 	bl	800646e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002640:	2026      	movs	r0, #38	; 0x26
 8002642:	f003 ff30 	bl	80064a6 <HAL_NVIC_EnableIRQ>
}
 8002646:	e03f      	b.n	80026c8 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART3)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <HAL_UART_MspInit+0x2b4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d13a      	bne.n	80026c8 <HAL_UART_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002652:	2304      	movs	r3, #4
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002656:	2300      	movs	r3, #0
 8002658:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800265a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800265e:	4618      	mov	r0, r3
 8002660:	f005 ff18 	bl	8008494 <HAL_RCCEx_PeriphCLKConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_UART_MspInit+0x23a>
      Error_Handler();
 800266a:	f7ff fc92 	bl	8001f92 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800266e:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	4a18      	ldr	r2, [pc, #96]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6593      	str	r3, [r2, #88]	; 0x58
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_UART_MspInit+0x2a0>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	f003 0304 	and.w	r3, r3, #4
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800269e:	2330      	movs	r3, #48	; 0x30
 80026a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b0:	2303      	movs	r3, #3
 80026b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026b6:	2307      	movs	r3, #7
 80026b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4806      	ldr	r0, [pc, #24]	; (80026dc <HAL_UART_MspInit+0x2a8>)
 80026c4:	f003 ff88 	bl	80065d8 <HAL_GPIO_Init>
}
 80026c8:	bf00      	nop
 80026ca:	37c8      	adds	r7, #200	; 0xc8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40004c00 	.word	0x40004c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40005000 	.word	0x40005000
 80026dc:	48000800 	.word	0x48000800
 80026e0:	48000c00 	.word	0x48000c00
 80026e4:	40004400 	.word	0x40004400
 80026e8:	40004800 	.word	0x40004800

080026ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026f0:	e7fe      	b.n	80026f0 <NMI_Handler+0x4>

080026f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f6:	e7fe      	b.n	80026f6 <HardFault_Handler+0x4>

080026f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <MemManage_Handler+0x4>

080026fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fe:	b480      	push	{r7}
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002702:	e7fe      	b.n	8002702 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <UsageFault_Handler+0x4>

0800270a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271c:	f002 fdba 	bl	8005294 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002720:	f009 fb32 	bl	800bd88 <xTaskGetSchedulerState>
 8002724:	4603      	mov	r3, r0
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800272a:	f009 fd6d 	bl	800c208 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <USART2_IRQHandler+0x10>)
 800273a:	f007 fc6f 	bl	800a01c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000a30 	.word	0x20000a30

08002748 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <UART4_IRQHandler+0x10>)
 800274e:	f007 fc65 	bl	800a01c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000928 	.word	0x20000928

0800275c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <BSP_I2C1_Init+0x70>)
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <BSP_I2C1_Init+0x74>)
 800276a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <BSP_I2C1_Init+0x78>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	4918      	ldr	r1, [pc, #96]	; (80027d4 <BSP_I2C1_Init+0x78>)
 8002774:	600a      	str	r2, [r1, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d122      	bne.n	80027c0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800277a:	4814      	ldr	r0, [pc, #80]	; (80027cc <BSP_I2C1_Init+0x70>)
 800277c:	f004 fcce 	bl	800711c <HAL_I2C_GetState>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11c      	bne.n	80027c0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002786:	4811      	ldr	r0, [pc, #68]	; (80027cc <BSP_I2C1_Init+0x70>)
 8002788:	f000 f8f6 	bl	8002978 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d116      	bne.n	80027c0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002792:	480e      	ldr	r0, [pc, #56]	; (80027cc <BSP_I2C1_Init+0x70>)
 8002794:	f000 f8ac 	bl	80028f0 <MX_I2C1_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800279e:	f06f 0307 	mvn.w	r3, #7
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	e00c      	b.n	80027c0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027a6:	2100      	movs	r1, #0
 80027a8:	4808      	ldr	r0, [pc, #32]	; (80027cc <BSP_I2C1_Init+0x70>)
 80027aa:	f004 ff77 	bl	800769c <HAL_I2CEx_ConfigAnalogFilter>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80027b4:	f06f 0307 	mvn.w	r3, #7
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	e001      	b.n	80027c0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80027c0:	687b      	ldr	r3, [r7, #4]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000b5c 	.word	0x20000b5c
 80027d0:	40005400 	.word	0x40005400
 80027d4:	20000bb0 	.word	0x20000bb0

080027d8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <BSP_I2C1_DeInit+0x48>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d014      	beq.n	8002814 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80027ea:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <BSP_I2C1_DeInit+0x48>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <BSP_I2C1_DeInit+0x48>)
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <BSP_I2C1_DeInit+0x48>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10b      	bne.n	8002814 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <BSP_I2C1_DeInit+0x4c>)
 80027fe:	f000 f91b 	bl	8002a38 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002802:	4808      	ldr	r0, [pc, #32]	; (8002824 <BSP_I2C1_DeInit+0x4c>)
 8002804:	f004 fa2d 	bl	8006c62 <HAL_I2C_DeInit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800280e:	f06f 0307 	mvn.w	r3, #7
 8002812:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002814:	687b      	ldr	r3, [r7, #4]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000bb0 	.word	0x20000bb0
 8002824:	20000b5c 	.word	0x20000b5c

08002828 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af04      	add	r7, sp, #16
 800282e:	60ba      	str	r2, [r7, #8]
 8002830:	461a      	mov	r2, r3
 8002832:	4603      	mov	r3, r0
 8002834:	81fb      	strh	r3, [r7, #14]
 8002836:	460b      	mov	r3, r1
 8002838:	81bb      	strh	r3, [r7, #12]
 800283a:	4613      	mov	r3, r2
 800283c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002842:	89ba      	ldrh	r2, [r7, #12]
 8002844:	89f9      	ldrh	r1, [r7, #14]
 8002846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800284a:	9302      	str	r3, [sp, #8]
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	2301      	movs	r3, #1
 8002856:	480c      	ldr	r0, [pc, #48]	; (8002888 <BSP_I2C1_WriteReg+0x60>)
 8002858:	f004 fa32 	bl	8006cc0 <HAL_I2C_Mem_Write>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002862:	4809      	ldr	r0, [pc, #36]	; (8002888 <BSP_I2C1_WriteReg+0x60>)
 8002864:	f004 fc68 	bl	8007138 <HAL_I2C_GetError>
 8002868:	4603      	mov	r3, r0
 800286a:	2b04      	cmp	r3, #4
 800286c:	d103      	bne.n	8002876 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800286e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e002      	b.n	800287c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002876:	f06f 0303 	mvn.w	r3, #3
 800287a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800287c:	697b      	ldr	r3, [r7, #20]
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000b5c 	.word	0x20000b5c

0800288c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	; 0x28
 8002890:	af04      	add	r7, sp, #16
 8002892:	60ba      	str	r2, [r7, #8]
 8002894:	461a      	mov	r2, r3
 8002896:	4603      	mov	r3, r0
 8002898:	81fb      	strh	r3, [r7, #14]
 800289a:	460b      	mov	r3, r1
 800289c:	81bb      	strh	r3, [r7, #12]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80028a6:	89ba      	ldrh	r2, [r7, #12]
 80028a8:	89f9      	ldrh	r1, [r7, #14]
 80028aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ae:	9302      	str	r3, [sp, #8]
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2301      	movs	r3, #1
 80028ba:	480c      	ldr	r0, [pc, #48]	; (80028ec <BSP_I2C1_ReadReg+0x60>)
 80028bc:	f004 fb14 	bl	8006ee8 <HAL_I2C_Mem_Read>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00c      	beq.n	80028e0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80028c6:	4809      	ldr	r0, [pc, #36]	; (80028ec <BSP_I2C1_ReadReg+0x60>)
 80028c8:	f004 fc36 	bl	8007138 <HAL_I2C_GetError>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d103      	bne.n	80028da <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80028d2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	e002      	b.n	80028e0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80028da:	f06f 0303 	mvn.w	r3, #3
 80028de:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80028e0:	697b      	ldr	r3, [r7, #20]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000b5c 	.word	0x20000b5c

080028f0 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80028f8:	2300      	movs	r3, #0
 80028fa:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1c      	ldr	r2, [pc, #112]	; (8002970 <MX_I2C1_Init+0x80>)
 8002900:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1b      	ldr	r2, [pc, #108]	; (8002974 <MX_I2C1_Init+0x84>)
 8002906:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f004 f906 	bl	8006b44 <HAL_I2C_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002942:	2100      	movs	r1, #0
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f004 fea9 	bl	800769c <HAL_I2CEx_ConfigAnalogFilter>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002954:	2100      	movs	r1, #0
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f004 feeb 	bl	8007732 <HAL_I2CEx_ConfigDigitalFilter>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40005400 	.word	0x40005400
 8002974:	10909cec 	.word	0x10909cec

08002978 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b0ac      	sub	sp, #176	; 0xb0
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2288      	movs	r2, #136	; 0x88
 8002986:	2100      	movs	r1, #0
 8002988:	4618      	mov	r0, r3
 800298a:	f009 feaf 	bl	800c6ec <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800298e:	2340      	movs	r3, #64	; 0x40
 8002990:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002992:	2300      	movs	r3, #0
 8002994:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4618      	mov	r0, r3
 800299c:	f005 fd7a 	bl	8008494 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <I2C1_MspInit+0xb8>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <I2C1_MspInit+0xb8>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <I2C1_MspInit+0xb8>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80029b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c0:	2312      	movs	r3, #18
 80029c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80029d2:	2304      	movs	r3, #4
 80029d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80029d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80029dc:	4619      	mov	r1, r3
 80029de:	4815      	ldr	r0, [pc, #84]	; (8002a34 <I2C1_MspInit+0xbc>)
 80029e0:	f003 fdfa 	bl	80065d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80029e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ec:	2312      	movs	r3, #18
 80029ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80029fe:	2304      	movs	r3, #4
 8002a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002a04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480a      	ldr	r0, [pc, #40]	; (8002a34 <I2C1_MspInit+0xbc>)
 8002a0c:	f003 fde4 	bl	80065d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <I2C1_MspInit+0xb8>)
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4a06      	ldr	r2, [pc, #24]	; (8002a30 <I2C1_MspInit+0xb8>)
 8002a16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <I2C1_MspInit+0xb8>)
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	37b0      	adds	r7, #176	; 0xb0
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000
 8002a34:	48000400 	.word	0x48000400

08002a38 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <I2C1_MspDeInit+0x30>)
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <I2C1_MspDeInit+0x30>)
 8002a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a4a:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8002a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a50:	4806      	ldr	r0, [pc, #24]	; (8002a6c <I2C1_MspDeInit+0x34>)
 8002a52:	f003 ff6b 	bl	800692c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8002a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a5a:	4804      	ldr	r0, [pc, #16]	; (8002a6c <I2C1_MspDeInit+0x34>)
 8002a5c:	f003 ff66 	bl	800692c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	48000400 	.word	0x48000400

08002a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return 1;
 8002a74:	2301      	movs	r3, #1
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <_kill>:

int _kill(int pid, int sig)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a8a:	f009 fdf7 	bl	800c67c <__errno>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2216      	movs	r2, #22
 8002a92:	601a      	str	r2, [r3, #0]
  return -1;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_exit>:

void _exit (int status)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff ffe7 	bl	8002a80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ab2:	e7fe      	b.n	8002ab2 <_exit+0x12>

08002ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00a      	b.n	8002adc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ac6:	f3af 8000 	nop.w
 8002aca:	4601      	mov	r1, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	60ba      	str	r2, [r7, #8]
 8002ad2:	b2ca      	uxtb	r2, r1
 8002ad4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbf0      	blt.n	8002ac6 <_read+0x12>
  }

  return len;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e009      	b.n	8002b14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	60ba      	str	r2, [r7, #8]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	3301      	adds	r3, #1
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dbf1      	blt.n	8002b00 <_write+0x12>
  }
  return len;
 8002b1c:	687b      	ldr	r3, [r7, #4]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <_close>:

int _close(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b4e:	605a      	str	r2, [r3, #4]
  return 0;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_isatty>:

int _isatty(int file)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b66:	2301      	movs	r3, #1
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b98:	4a14      	ldr	r2, [pc, #80]	; (8002bec <_sbrk+0x5c>)
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <_sbrk+0x60>)
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <_sbrk+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <_sbrk+0x64>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <_sbrk+0x68>)
 8002bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <_sbrk+0x64>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4413      	add	r3, r2
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d207      	bcs.n	8002bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bc0:	f009 fd5c 	bl	800c67c <__errno>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	e009      	b.n	8002be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bd0:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <_sbrk+0x64>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	4a05      	ldr	r2, [pc, #20]	; (8002bf4 <_sbrk+0x64>)
 8002be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20018000 	.word	0x20018000
 8002bf0:	00000400 	.word	0x00000400
 8002bf4:	20000bb4 	.word	0x20000bb4
 8002bf8:	20002490 	.word	0x20002490

08002bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <SystemInit+0x20>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	4a05      	ldr	r2, [pc, #20]	; (8002c1c <SystemInit+0x20>)
 8002c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
	    bl  SystemInit
 8002c24:	f7ff ffea 	bl	8002bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c28:	480c      	ldr	r0, [pc, #48]	; (8002c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002c2a:	490d      	ldr	r1, [pc, #52]	; (8002c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	; (8002c64 <LoopForever+0xe>)
  movs r3, #0
 8002c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c30:	e002      	b.n	8002c38 <LoopCopyDataInit>

08002c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c36:	3304      	adds	r3, #4

08002c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c3c:	d3f9      	bcc.n	8002c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c40:	4c0a      	ldr	r4, [pc, #40]	; (8002c6c <LoopForever+0x16>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c44:	e001      	b.n	8002c4a <LoopFillZerobss>

08002c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c48:	3204      	adds	r2, #4

08002c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c4c:	d3fb      	bcc.n	8002c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c4e:	f009 fd1b 	bl	800c688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c52:	f7fe fbdb 	bl	800140c <main>

08002c56 <LoopForever>:

LoopForever:
    b LoopForever
 8002c56:	e7fe      	b.n	8002c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c60:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c64:	080103fc 	.word	0x080103fc
  ldr r2, =_sbss
 8002c68:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c6c:	20002490 	.word	0x20002490

08002c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c70:	e7fe      	b.n	8002c70 <ADC1_2_IRQHandler>
	...

08002c74 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e034      	b.n	8002cf6 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	7b1a      	ldrb	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	699a      	ldr	r2, [r3, #24]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <HTS221_RegisterBusIO+0x8c>)
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <HTS221_RegisterBusIO+0x90>)
 8002cce:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4798      	blx	r3
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	e002      	b.n	8002cf6 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	080030e1 	.word	0x080030e1
 8002d04:	08003143 	.word	0x08003143

08002d08 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d108      	bne.n	8002d2c <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f97b 	bl	8003016 <HTS221_Initialize>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2a:	e004      	b.n	8002d36 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e015      	b.n	8002d80 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3320      	adds	r3, #32
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fadf 	bl	8003328 <hts221_power_on_set>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	e004      	b.n	8002d80 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3320      	adds	r3, #32
 8002d96:	f107 020c 	add.w	r2, r7, #12
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fb87 	bl	80034b0 <hts221_hum_adc_point_0_get>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dac:	e06b      	b.n	8002e86 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f103 0220 	add.w	r2, r3, #32
 8002db4:	f107 030c 	add.w	r3, r7, #12
 8002db8:	3304      	adds	r3, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f000 fad9 	bl	8003374 <hts221_hum_rh_point_0_get>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8002dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dcc:	e05b      	b.n	8002e86 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f103 0220 	add.w	r2, r3, #32
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	3308      	adds	r3, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4610      	mov	r0, r2
 8002dde:	f000 fb8b 	bl	80034f8 <hts221_hum_adc_point_1_get>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	e04b      	b.n	8002e86 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f103 0220 	add.w	r2, r3, #32
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	330c      	adds	r3, #12
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f000 fad7 	bl	80033b0 <hts221_hum_rh_point_1_get>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8002e08:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0c:	e03b      	b.n	8002e86 <HTS221_HUM_GetHumidity+0xfe>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3320      	adds	r3, #32
 8002e16:	f107 021c 	add.w	r2, r7, #28
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 fa3d 	bl	800329c <hts221_humidity_raw_get>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8002e28:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2c:	e02b      	b.n	8002e86 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002e2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f913 	bl	800306e <Linear_Interpolation>
 8002e48:	eef0 7a40 	vmov.f32	s15, s0
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e60:	d503      	bpl.n	8002e6a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002e90 <HTS221_HUM_GetHumidity+0x108>
 8002e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	dd02      	ble.n	8002e84 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HTS221_HUM_GetHumidity+0x10c>)
 8002e82:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	42c80000 	.word	0x42c80000
 8002e94:	42c80000 	.word	0x42c80000

08002e98 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e015      	b.n	8002eda <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3320      	adds	r3, #32
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fa32 	bl	8003328 <hts221_power_on_set>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8002eca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ece:	e004      	b.n	8002eda <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b088      	sub	sp, #32
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3320      	adds	r3, #32
 8002ef0:	f107 020c 	add.w	r2, r7, #12
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fb22 	bl	8003540 <hts221_temp_adc_point_0_get>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e052      	b.n	8002fae <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f103 0220 	add.w	r2, r3, #32
 8002f0e:	f107 030c 	add.w	r3, r7, #12
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 fa68 	bl	80033ec <hts221_temp_deg_point_0_get>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	e042      	b.n	8002fae <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f103 0220 	add.w	r2, r3, #32
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	3308      	adds	r3, #8
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f000 fb26 	bl	8003588 <hts221_temp_adc_point_1_get>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295
 8002f46:	e032      	b.n	8002fae <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0220 	add.w	r2, r3, #32
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	330c      	adds	r3, #12
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f000 fa79 	bl	800344e <hts221_temp_deg_point_1_get>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295
 8002f66:	e022      	b.n	8002fae <HTS221_TEMP_GetTemperature+0xcc>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3320      	adds	r3, #32
 8002f70:	f107 021c 	add.w	r2, r7, #28
 8002f74:	4611      	mov	r1, r2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f9b3 	bl	80032e2 <hts221_temperature_raw_get>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	e012      	b.n	8002fae <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8002f88:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002f8c:	ee07 3a90 	vmov	s15, r3
 8002f90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	eeb0 0a67 	vmov.f32	s0, s15
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 f866 	bl	800306e <Linear_Interpolation>
 8002fa2:	eef0 7a40 	vmov.f32	s15, s0
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8002fc2:	edd7 7a00 	vldr	s15, [r7]
 8002fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d801      	bhi.n	8002fd8 <HTS221_SetOutputDataRate+0x22>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e00b      	b.n	8002ff0 <HTS221_SetOutputDataRate+0x3a>
 8002fd8:	edd7 7a00 	vldr	s15, [r7]
 8002fdc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002fe0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	d801      	bhi.n	8002fee <HTS221_SetOutputDataRate+0x38>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e000      	b.n	8002ff0 <HTS221_SetOutputDataRate+0x3a>
 8002fee:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8002ff0:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	3320      	adds	r3, #32
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 f902 	bl	8003204 <hts221_data_rate_set>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e000      	b.n	800300e <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3320      	adds	r3, #32
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f000 f97f 	bl	8003328 <hts221_power_on_set>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d002      	beq.n	8003036 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	e017      	b.n	8003066 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3320      	adds	r3, #32
 800303a:	2101      	movs	r1, #1
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f907 	bl	8003250 <hts221_block_data_update_set>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	e00b      	b.n	8003066 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800304e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ffaf 	bl	8002fb6 <HTS221_SetOutputDataRate>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e000      	b.n	8003066 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	edd3 7a01 	vldr	s15, [r3, #4]
 8003086:	ee37 7a67 	vsub.f32	s14, s14, s15
 800308a:	edd7 7a00 	vldr	s15, [r7]
 800308e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	edd3 6a02 	vldr	s13, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	edd3 7a01 	vldr	s15, [r3, #4]
 800309e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	ed93 6a00 	vldr	s12, [r3]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80030ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80030b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	edd3 7a00 	vldr	s15, [r3]
 80030c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80030d2:	eeb0 0a67 	vmov.f32	s0, s15
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	460b      	mov	r3, r1
 80030ee:	72fb      	strb	r3, [r7, #11]
 80030f0:	4613      	mov	r3, r2
 80030f2:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10e      	bne.n	800311e <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	695c      	ldr	r4, [r3, #20]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	7b1b      	ldrb	r3, [r3, #12]
 8003108:	b298      	uxth	r0, r3
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003110:	b2db      	uxtb	r3, r3
 8003112:	b299      	uxth	r1, r3
 8003114:	893b      	ldrh	r3, [r7, #8]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	47a0      	blx	r4
 800311a:	4603      	mov	r3, r0
 800311c:	e00d      	b.n	800313a <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	695c      	ldr	r4, [r3, #20]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	7b1b      	ldrb	r3, [r3, #12]
 8003126:	b298      	uxth	r0, r3
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800312e:	b2db      	uxtb	r3, r3
 8003130:	b299      	uxth	r1, r3
 8003132:	893b      	ldrh	r3, [r7, #8]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	47a0      	blx	r4
 8003138:	4603      	mov	r3, r0
  }
}
 800313a:	4618      	mov	r0, r3
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bd90      	pop	{r4, r7, pc}

08003142 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003142:	b590      	push	{r4, r7, lr}
 8003144:	b087      	sub	sp, #28
 8003146:	af00      	add	r7, sp, #0
 8003148:	60f8      	str	r0, [r7, #12]
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	461a      	mov	r2, r3
 800314e:	460b      	mov	r3, r1
 8003150:	72fb      	strb	r3, [r7, #11]
 8003152:	4613      	mov	r3, r2
 8003154:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10e      	bne.n	8003180 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	691c      	ldr	r4, [r3, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	7b1b      	ldrb	r3, [r3, #12]
 800316a:	b298      	uxth	r0, r3
 800316c:	7afb      	ldrb	r3, [r7, #11]
 800316e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003172:	b2db      	uxtb	r3, r3
 8003174:	b299      	uxth	r1, r3
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	47a0      	blx	r4
 800317c:	4603      	mov	r3, r0
 800317e:	e00d      	b.n	800319c <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	691c      	ldr	r4, [r3, #16]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	7b1b      	ldrb	r3, [r3, #12]
 8003188:	b298      	uxth	r0, r3
 800318a:	7afb      	ldrb	r3, [r7, #11]
 800318c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003190:	b2db      	uxtb	r3, r3
 8003192:	b299      	uxth	r1, r3
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	47a0      	blx	r4
 800319a:	4603      	mov	r3, r0
  }
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}

080031a4 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	461a      	mov	r2, r3
 80031b0:	460b      	mov	r3, r1
 80031b2:	72fb      	strb	r3, [r7, #11]
 80031b4:	4613      	mov	r3, r2
 80031b6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685c      	ldr	r4, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68d8      	ldr	r0, [r3, #12]
 80031c0:	893b      	ldrh	r3, [r7, #8]
 80031c2:	7af9      	ldrb	r1, [r7, #11]
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	47a0      	blx	r4
 80031c8:	6178      	str	r0, [r7, #20]

  return ret;
 80031ca:	697b      	ldr	r3, [r7, #20]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd90      	pop	{r4, r7, pc}

080031d4 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80031d4:	b590      	push	{r4, r7, lr}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	461a      	mov	r2, r3
 80031e0:	460b      	mov	r3, r1
 80031e2:	72fb      	strb	r3, [r7, #11]
 80031e4:	4613      	mov	r3, r2
 80031e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681c      	ldr	r4, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68d8      	ldr	r0, [r3, #12]
 80031f0:	893b      	ldrh	r3, [r7, #8]
 80031f2:	7af9      	ldrb	r1, [r7, #11]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	47a0      	blx	r4
 80031f8:	6178      	str	r0, [r7, #20]

  return ret;
 80031fa:	697b      	ldr	r3, [r7, #20]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	bd90      	pop	{r4, r7, pc}

08003204 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	460b      	mov	r3, r1
 800320e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003210:	f107 0208 	add.w	r2, r7, #8
 8003214:	2301      	movs	r3, #1
 8003216:	2120      	movs	r1, #32
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ffc3 	bl	80031a4 <hts221_read_reg>
 800321e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	b2da      	uxtb	r2, r3
 800322e:	7a3b      	ldrb	r3, [r7, #8]
 8003230:	f362 0301 	bfi	r3, r2, #0, #2
 8003234:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003236:	f107 0208 	add.w	r2, r7, #8
 800323a:	2301      	movs	r3, #1
 800323c:	2120      	movs	r1, #32
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffc8 	bl	80031d4 <hts221_write_reg>
 8003244:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003246:	68fb      	ldr	r3, [r7, #12]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800325c:	f107 0208 	add.w	r2, r7, #8
 8003260:	2301      	movs	r3, #1
 8003262:	2120      	movs	r1, #32
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff9d 	bl	80031a4 <hts221_read_reg>
 800326a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10f      	bne.n	8003292 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	7a3b      	ldrb	r3, [r7, #8]
 800327c:	f362 0382 	bfi	r3, r2, #2, #1
 8003280:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003282:	f107 0208 	add.w	r2, r7, #8
 8003286:	2301      	movs	r3, #1
 8003288:	2120      	movs	r1, #32
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff ffa2 	bl	80031d4 <hts221_write_reg>
 8003290:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80032a6:	f107 0208 	add.w	r2, r7, #8
 80032aa:	2302      	movs	r3, #2
 80032ac:	2128      	movs	r1, #40	; 0x28
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ff78 	bl	80031a4 <hts221_read_reg>
 80032b4:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80032b6:	7a7b      	ldrb	r3, [r7, #9]
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	7a3b      	ldrb	r3, [r7, #8]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	801a      	strh	r2, [r3, #0]

  return ret;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80032ec:	f107 0208 	add.w	r2, r7, #8
 80032f0:	2302      	movs	r3, #2
 80032f2:	212a      	movs	r1, #42	; 0x2a
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff55 	bl	80031a4 <hts221_read_reg>
 80032fa:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80032fc:	7a7b      	ldrb	r3, [r7, #9]
 80032fe:	b21a      	sxth	r2, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800330a:	b29b      	uxth	r3, r3
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	b29a      	uxth	r2, r3
 8003310:	7a3b      	ldrb	r3, [r7, #8]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4413      	add	r3, r2
 8003316:	b29b      	uxth	r3, r3
 8003318:	b21a      	sxth	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	801a      	strh	r2, [r3, #0]

  return ret;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	460b      	mov	r3, r1
 8003332:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003334:	f107 0208 	add.w	r2, r7, #8
 8003338:	2301      	movs	r3, #1
 800333a:	2120      	movs	r1, #32
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff31 	bl	80031a4 <hts221_read_reg>
 8003342:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	7a3b      	ldrb	r3, [r7, #8]
 8003354:	f362 13c7 	bfi	r3, r2, #7, #1
 8003358:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800335a:	f107 0208 	add.w	r2, r7, #8
 800335e:	2301      	movs	r3, #1
 8003360:	2120      	movs	r1, #32
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff ff36 	bl	80031d4 <hts221_write_reg>
 8003368:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 800337e:	f107 020b 	add.w	r2, r7, #11
 8003382:	2301      	movs	r3, #1
 8003384:	2130      	movs	r1, #48	; 0x30
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ff0c 	bl	80031a4 <hts221_read_reg>
 800338c:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800338e:	7afb      	ldrb	r3, [r7, #11]
 8003390:	ee07 3a90 	vmov	s15, r3
 8003394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003398:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800339c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 80033ba:	f107 020b 	add.w	r2, r7, #11
 80033be:	2301      	movs	r3, #1
 80033c0:	2131      	movs	r1, #49	; 0x31
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff feee 	bl	80031a4 <hts221_read_reg>
 80033c8:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80033d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80033f6:	f107 020f 	add.w	r2, r7, #15
 80033fa:	2301      	movs	r3, #1
 80033fc:	2132      	movs	r1, #50	; 0x32
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff fed0 	bl	80031a4 <hts221_read_reg>
 8003404:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11b      	bne.n	8003444 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800340c:	f107 0210 	add.w	r2, r7, #16
 8003410:	2301      	movs	r3, #1
 8003412:	2135      	movs	r1, #53	; 0x35
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fec5 	bl	80031a4 <hts221_read_reg>
 800341a:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800341c:	7c3b      	ldrb	r3, [r7, #16]
 800341e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003422:	b2db      	uxtb	r3, r3
 8003424:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003426:	7cfb      	ldrb	r3, [r7, #19]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	4413      	add	r3, r2
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003436:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800343a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003444:	697b      	ldr	r3, [r7, #20]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003458:	f107 020f 	add.w	r2, r7, #15
 800345c:	2301      	movs	r3, #1
 800345e:	2133      	movs	r1, #51	; 0x33
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fe9f 	bl	80031a4 <hts221_read_reg>
 8003466:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11b      	bne.n	80034a6 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800346e:	f107 0210 	add.w	r2, r7, #16
 8003472:	2301      	movs	r3, #1
 8003474:	2135      	movs	r1, #53	; 0x35
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff fe94 	bl	80031a4 <hts221_read_reg>
 800347c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800347e:	7c3b      	ldrb	r3, [r7, #16]
 8003480:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003484:	b2db      	uxtb	r3, r3
 8003486:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003488:	7cfb      	ldrb	r3, [r7, #19]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	4413      	add	r3, r2
 8003490:	ee07 3a90 	vmov	s15, r3
 8003494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003498:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800349c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 80034a6:	697b      	ldr	r3, [r7, #20]
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3718      	adds	r7, #24
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 80034ba:	f107 0208 	add.w	r2, r7, #8
 80034be:	2302      	movs	r3, #2
 80034c0:	2136      	movs	r1, #54	; 0x36
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fe6e 	bl	80031a4 <hts221_read_reg>
 80034c8:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80034ca:	7a7b      	ldrb	r3, [r7, #9]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	021b      	lsls	r3, r3, #8
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	7a3b      	ldrb	r3, [r7, #8]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	b29b      	uxth	r3, r3
 80034da:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80034dc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003502:	f107 0208 	add.w	r2, r7, #8
 8003506:	2302      	movs	r3, #2
 8003508:	213a      	movs	r1, #58	; 0x3a
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff fe4a 	bl	80031a4 <hts221_read_reg>
 8003510:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003512:	7a7b      	ldrb	r3, [r7, #9]
 8003514:	b29b      	uxth	r3, r3
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	b29a      	uxth	r2, r3
 800351a:	7a3b      	ldrb	r3, [r7, #8]
 800351c:	b29b      	uxth	r3, r3
 800351e:	4413      	add	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003524:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003528:	ee07 3a90 	vmov	s15, r3
 800352c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003536:	68fb      	ldr	r3, [r7, #12]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800354a:	f107 0208 	add.w	r2, r7, #8
 800354e:	2302      	movs	r3, #2
 8003550:	213c      	movs	r1, #60	; 0x3c
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7ff fe26 	bl	80031a4 <hts221_read_reg>
 8003558:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800355a:	7a7b      	ldrb	r3, [r7, #9]
 800355c:	b29b      	uxth	r3, r3
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	b29a      	uxth	r2, r3
 8003562:	7a3b      	ldrb	r3, [r7, #8]
 8003564:	b29b      	uxth	r3, r3
 8003566:	4413      	add	r3, r2
 8003568:	b29b      	uxth	r3, r3
 800356a:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800356c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003592:	f107 0208 	add.w	r2, r7, #8
 8003596:	2302      	movs	r3, #2
 8003598:	213e      	movs	r1, #62	; 0x3e
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fe02 	bl	80031a4 <hts221_read_reg>
 80035a0:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80035a2:	7a7b      	ldrb	r3, [r7, #9]
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	7a3b      	ldrb	r3, [r7, #8]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80035b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d103      	bne.n	80035ec <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e051      	b.n	8003690 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	7b1a      	ldrb	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	699a      	ldr	r2, [r3, #24]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <LPS22HB_RegisterBusIO+0xcc>)
 8003628:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <LPS22HB_RegisterBusIO+0xd0>)
 800362e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	69da      	ldr	r2, [r3, #28]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	e020      	b.n	8003690 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4798      	blx	r3
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	e016      	b.n	8003690 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b02      	cmp	r3, #2
 8003668:	d112      	bne.n	8003690 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003674:	2301      	movs	r3, #1
 8003676:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003678:	7afb      	ldrb	r3, [r7, #11]
 800367a:	461a      	mov	r2, r3
 800367c:	2110      	movs	r1, #16
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f877 	bl	8003772 <LPS22HB_Write_Reg>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003690:	68fb      	ldr	r3, [r7, #12]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	0800385b 	.word	0x0800385b
 80036a0:	080038e1 	.word	0x080038e1

080036a4 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d108      	bne.n	80036c8 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f876 	bl	80037a8 <LPS22HB_Initialize>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	e004      	b.n	80036d2 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e014      	b.n	800371a <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f103 0220 	add.w	r2, r3, #32
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f000 f9c6 	bl	8003a90 <lps22hb_data_rate_set>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	e004      	b.n	800371a <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 800372c:	f107 030c 	add.w	r3, r7, #12
 8003730:	2204      	movs	r2, #4
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f008 ffd9 	bl	800c6ec <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3320      	adds	r3, #32
 800373e:	f107 020c 	add.w	r2, r7, #12
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f000 f9c9 	bl	8003adc <lps22hb_pressure_raw_get>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8003750:	f04f 33ff 	mov.w	r3, #4294967295
 8003754:	e009      	b.n	800376a <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 f935 	bl	80039c8 <lps22hb_from_lsb_to_hpa>
 800375e:	eef0 7a40 	vmov.f32	s15, s0
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	70fb      	strb	r3, [r7, #3]
 800377e:	4613      	mov	r3, r2
 8003780:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f103 0020 	add.w	r0, r3, #32
 8003788:	1cba      	adds	r2, r7, #2
 800378a:	78f9      	ldrb	r1, [r7, #3]
 800378c:	2301      	movs	r3, #1
 800378e:	f000 f902 	bl	8003996 <lps22hb_write_reg>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8003798:	f04f 33ff 	mov.w	r3, #4294967295
 800379c:	e000      	b.n	80037a0 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f9b9 	bl	8003b2e <lps22hb_low_power_set>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e044      	b.n	8003852 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3320      	adds	r3, #32
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 f95e 	bl	8003a90 <lps22hb_data_rate_set>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 80037da:	f04f 33ff 	mov.w	r3, #4294967295
 80037de:	e038      	b.n	8003852 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3320      	adds	r3, #32
 80037e4:	2102      	movs	r1, #2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f92c 	bl	8003a44 <lps22hb_low_pass_filter_mode_set>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80037f2:	f04f 33ff 	mov.w	r3, #4294967295
 80037f6:	e02c      	b.n	8003852 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3320      	adds	r3, #32
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f8fa 	bl	80039f8 <lps22hb_block_data_update_set>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	e020      	b.n	8003852 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3320      	adds	r3, #32
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f9ab 	bl	8003b7a <lps22hb_auto_add_inc_set>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00e      	beq.n	8003848 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
 800382e:	e010      	b.n	8003852 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3320      	adds	r3, #32
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f000 f99f 	bl	8003b7a <lps22hb_auto_add_inc_set>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d002      	beq.n	8003848 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e004      	b.n	8003852 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800385a:	b590      	push	{r4, r7, lr}
 800385c:	b089      	sub	sp, #36	; 0x24
 800385e:	af00      	add	r7, sp, #0
 8003860:	60f8      	str	r0, [r7, #12]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	461a      	mov	r2, r3
 8003866:	460b      	mov	r3, r1
 8003868:	72fb      	strb	r3, [r7, #11]
 800386a:	4613      	mov	r3, r2
 800386c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d121      	bne.n	80038c2 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	83fb      	strh	r3, [r7, #30]
 8003882:	e018      	b.n	80038b6 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	695c      	ldr	r4, [r3, #20]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	7b1b      	ldrb	r3, [r3, #12]
 800388c:	b298      	uxth	r0, r3
 800388e:	7afb      	ldrb	r3, [r7, #11]
 8003890:	b29a      	uxth	r2, r3
 8003892:	8bfb      	ldrh	r3, [r7, #30]
 8003894:	4413      	add	r3, r2
 8003896:	b299      	uxth	r1, r3
 8003898:	8bfb      	ldrh	r3, [r7, #30]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	441a      	add	r2, r3
 800389e:	2301      	movs	r3, #1
 80038a0:	47a0      	blx	r4
 80038a2:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	e013      	b.n	80038d8 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80038b0:	8bfb      	ldrh	r3, [r7, #30]
 80038b2:	3301      	adds	r3, #1
 80038b4:	83fb      	strh	r3, [r7, #30]
 80038b6:	8bfa      	ldrh	r2, [r7, #30]
 80038b8:	893b      	ldrh	r3, [r7, #8]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d3e2      	bcc.n	8003884 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	e00a      	b.n	80038d8 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	695c      	ldr	r4, [r3, #20]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	7b1b      	ldrb	r3, [r3, #12]
 80038ca:	b298      	uxth	r0, r3
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	b299      	uxth	r1, r3
 80038d0:	893b      	ldrh	r3, [r7, #8]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	47a0      	blx	r4
 80038d6:	4603      	mov	r3, r0
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3724      	adds	r7, #36	; 0x24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}

080038e0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80038e0:	b590      	push	{r4, r7, lr}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	461a      	mov	r2, r3
 80038ec:	460b      	mov	r3, r1
 80038ee:	72fb      	strb	r3, [r7, #11]
 80038f0:	4613      	mov	r3, r2
 80038f2:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d121      	bne.n	8003948 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8003904:	2300      	movs	r3, #0
 8003906:	83fb      	strh	r3, [r7, #30]
 8003908:	e018      	b.n	800393c <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	691c      	ldr	r4, [r3, #16]
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	7b1b      	ldrb	r3, [r3, #12]
 8003912:	b298      	uxth	r0, r3
 8003914:	7afb      	ldrb	r3, [r7, #11]
 8003916:	b29a      	uxth	r2, r3
 8003918:	8bfb      	ldrh	r3, [r7, #30]
 800391a:	4413      	add	r3, r2
 800391c:	b299      	uxth	r1, r3
 800391e:	8bfb      	ldrh	r3, [r7, #30]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	441a      	add	r2, r3
 8003924:	2301      	movs	r3, #1
 8003926:	47a0      	blx	r4
 8003928:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8003930:	f04f 33ff 	mov.w	r3, #4294967295
 8003934:	e013      	b.n	800395e <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8003936:	8bfb      	ldrh	r3, [r7, #30]
 8003938:	3301      	adds	r3, #1
 800393a:	83fb      	strh	r3, [r7, #30]
 800393c:	8bfa      	ldrh	r2, [r7, #30]
 800393e:	893b      	ldrh	r3, [r7, #8]
 8003940:	429a      	cmp	r2, r3
 8003942:	d3e2      	bcc.n	800390a <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	e00a      	b.n	800395e <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	691c      	ldr	r4, [r3, #16]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	7b1b      	ldrb	r3, [r3, #12]
 8003950:	b298      	uxth	r0, r3
 8003952:	7afb      	ldrb	r3, [r7, #11]
 8003954:	b299      	uxth	r1, r3
 8003956:	893b      	ldrh	r3, [r7, #8]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	47a0      	blx	r4
 800395c:	4603      	mov	r3, r0
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3724      	adds	r7, #36	; 0x24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}

08003966 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003966:	b590      	push	{r4, r7, lr}
 8003968:	b087      	sub	sp, #28
 800396a:	af00      	add	r7, sp, #0
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	461a      	mov	r2, r3
 8003972:	460b      	mov	r3, r1
 8003974:	72fb      	strb	r3, [r7, #11]
 8003976:	4613      	mov	r3, r2
 8003978:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685c      	ldr	r4, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	68d8      	ldr	r0, [r3, #12]
 8003982:	893b      	ldrh	r3, [r7, #8]
 8003984:	7af9      	ldrb	r1, [r7, #11]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	47a0      	blx	r4
 800398a:	6178      	str	r0, [r7, #20]

  return ret;
 800398c:	697b      	ldr	r3, [r7, #20]
}
 800398e:	4618      	mov	r0, r3
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bd90      	pop	{r4, r7, pc}

08003996 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003996:	b590      	push	{r4, r7, lr}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	461a      	mov	r2, r3
 80039a2:	460b      	mov	r3, r1
 80039a4:	72fb      	strb	r3, [r7, #11]
 80039a6:	4613      	mov	r3, r2
 80039a8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681c      	ldr	r4, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	68d8      	ldr	r0, [r3, #12]
 80039b2:	893b      	ldrh	r3, [r7, #8]
 80039b4:	7af9      	ldrb	r1, [r7, #11]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	47a0      	blx	r4
 80039ba:	6178      	str	r0, [r7, #20]

  return ret;
 80039bc:	697b      	ldr	r3, [r7, #20]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd90      	pop	{r4, r7, pc}
	...

080039c8 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80039f4 <lps22hb_from_lsb_to_hpa+0x2c>
 80039de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80039e6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	49800000 	.word	0x49800000

080039f8 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003a04:	f107 0208 	add.w	r2, r7, #8
 8003a08:	2301      	movs	r3, #1
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ffaa 	bl	8003966 <lps22hb_read_reg>
 8003a12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	7a3b      	ldrb	r3, [r7, #8]
 8003a24:	f362 0341 	bfi	r3, r2, #1, #1
 8003a28:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003a2a:	f107 0208 	add.w	r2, r7, #8
 8003a2e:	2301      	movs	r3, #1
 8003a30:	2110      	movs	r1, #16
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ffaf 	bl	8003996 <lps22hb_write_reg>
 8003a38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003a50:	f107 0208 	add.w	r2, r7, #8
 8003a54:	2301      	movs	r3, #1
 8003a56:	2110      	movs	r1, #16
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff84 	bl	8003966 <lps22hb_read_reg>
 8003a5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	7a3b      	ldrb	r3, [r7, #8]
 8003a70:	f362 0383 	bfi	r3, r2, #2, #2
 8003a74:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003a76:	f107 0208 	add.w	r2, r7, #8
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff ff89 	bl	8003996 <lps22hb_write_reg>
 8003a84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a86:	68fb      	ldr	r3, [r7, #12]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003a9c:	f107 0208 	add.w	r2, r7, #8
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff5e 	bl	8003966 <lps22hb_read_reg>
 8003aaa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10f      	bne.n	8003ad2 <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	7a3b      	ldrb	r3, [r7, #8]
 8003abc:	f362 1306 	bfi	r3, r2, #4, #3
 8003ac0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8003ac2:	f107 0208 	add.w	r2, r7, #8
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	2110      	movs	r1, #16
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ff63 	bl	8003996 <lps22hb_write_reg>
 8003ad0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8003ae6:	f107 0208 	add.w	r2, r7, #8
 8003aea:	2303      	movs	r3, #3
 8003aec:	2128      	movs	r1, #40	; 0x28
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff ff39 	bl	8003966 <lps22hb_read_reg>
 8003af4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8003af6:	7abb      	ldrb	r3, [r7, #10]
 8003af8:	461a      	mov	r2, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	7a7a      	ldrb	r2, [r7, #9]
 8003b06:	441a      	add	r2, r3
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	7a3a      	ldrb	r2, [r7, #8]
 8003b14:	441a      	add	r2, r3
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	021a      	lsls	r2, r3, #8
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	601a      	str	r2, [r3, #0]

  return ret;
 8003b24:	68fb      	ldr	r3, [r7, #12]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8003b3a:	f107 0208 	add.w	r2, r7, #8
 8003b3e:	2301      	movs	r3, #1
 8003b40:	211a      	movs	r1, #26
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ff0f 	bl	8003966 <lps22hb_read_reg>
 8003b48:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10f      	bne.n	8003b70 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	7a3b      	ldrb	r3, [r7, #8]
 8003b5a:	f362 0300 	bfi	r3, r2, #0, #1
 8003b5e:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8003b60:	f107 0208 	add.w	r2, r7, #8
 8003b64:	2301      	movs	r3, #1
 8003b66:	211a      	movs	r1, #26
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ff14 	bl	8003996 <lps22hb_write_reg>
 8003b6e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003b70:	68fb      	ldr	r3, [r7, #12]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003b86:	f107 0208 	add.w	r2, r7, #8
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	2111      	movs	r1, #17
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fee9 	bl	8003966 <lps22hb_read_reg>
 8003b94:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10f      	bne.n	8003bbc <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	7a3b      	ldrb	r3, [r7, #8]
 8003ba6:	f362 1304 	bfi	r3, r2, #4, #1
 8003baa:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8003bac:	f107 0208 	add.w	r2, r7, #8
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	2111      	movs	r1, #17
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff feee 	bl	8003996 <lps22hb_write_reg>
 8003bba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d103      	bne.n	8003be4 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	e051      	b.n	8003c88 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	7b1a      	ldrb	r2, [r3, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8003c26:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d103      	bne.n	8003c46 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e020      	b.n	8003c88 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4798      	blx	r3
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e016      	b.n	8003c88 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d112      	bne.n	8003c88 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8003c70:	7afb      	ldrb	r3, [r7, #11]
 8003c72:	461a      	mov	r2, r3
 8003c74:	2123      	movs	r1, #35	; 0x23
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f97b 	bl	8003f72 <LSM303AGR_ACC_Write_Reg>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	e000      	b.n	8003c8a <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8003c88:	68fb      	ldr	r3, [r7, #12]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	0800438d 	.word	0x0800438d
 8003c98:	080043ef 	.word	0x080043ef

08003c9c <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	3320      	adds	r3, #32
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 fd1a 	bl	80046e4 <lsm303agr_xl_block_data_update_set>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8003cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cba:	e02c      	b.n	8003d16 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3320      	adds	r3, #32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fe62 	bl	800498c <lsm303agr_xl_fifo_mode_set>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd2:	e020      	b.n	8003d16 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2205      	movs	r2, #5
 8003cd8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3320      	adds	r3, #32
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fc7a 	bl	80045dc <lsm303agr_xl_data_rate_set>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e010      	b.n	8003d16 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3320      	adds	r3, #32
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fc94 	bl	8004628 <lsm303agr_xl_full_scale_set>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8003d06:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0a:	e004      	b.n	8003d16 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	e014      	b.n	8003d5e <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f103 0220 	add.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 fc4a 	bl	80045dc <lsm303agr_xl_data_rate_set>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8003d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d52:	e004      	b.n	8003d5e <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3320      	adds	r3, #32
 8003d78:	f107 020b 	add.w	r2, r7, #11
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fbf8 	bl	8004574 <lsm303agr_xl_operating_mode_get>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8e:	e031      	b.n	8003df4 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8003d90:	7afb      	ldrb	r3, [r7, #11]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d01a      	beq.n	8003dcc <LSM303AGR_ACC_GetSensitivity+0x66>
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	dc22      	bgt.n	8003de0 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <LSM303AGR_ACC_GetSensitivity+0x3e>
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d00a      	beq.n	8003db8 <LSM303AGR_ACC_GetSensitivity+0x52>
 8003da2:	e01d      	b.n	8003de0 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8003da4:	6839      	ldr	r1, [r7, #0]
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa1e 	bl	80041e8 <LSM303AGR_ACC_GetSensitivityHR>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01a      	beq.n	8003de8 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
 8003db6:	e01d      	b.n	8003df4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8003db8:	6839      	ldr	r1, [r7, #0]
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fa5a 	bl	8004274 <LSM303AGR_ACC_GetSensitivityNM>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	e013      	b.n	8003df4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa96 	bl	8004300 <LSM303AGR_ACC_GetSensitivityLP>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	e009      	b.n	8003df4 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	60fb      	str	r3, [r7, #12]
      break;
 8003de6:	e004      	b.n	8003df2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003de8:	bf00      	nop
 8003dea:	e002      	b.n	8003df2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003dec:	bf00      	nop
 8003dee:	e000      	b.n	8003df2 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8003df0:	bf00      	nop
  }

  return ret;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8003e06:	2301      	movs	r3, #1
 8003e08:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3320      	adds	r3, #32
 8003e12:	f107 020f 	add.w	r2, r7, #15
 8003e16:	4611      	mov	r1, r2
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fbab 	bl	8004574 <lsm303agr_xl_operating_mode_get>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d002      	beq.n	8003e2a <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	e04a      	b.n	8003ec0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d00c      	beq.n	8003e4a <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	dc0e      	bgt.n	8003e52 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d003      	beq.n	8003e44 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8003e3c:	e009      	b.n	8003e52 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8003e3e:	2310      	movs	r3, #16
 8003e40:	83fb      	strh	r3, [r7, #30]
      break;
 8003e42:	e00a      	b.n	8003e5a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8003e44:	2340      	movs	r3, #64	; 0x40
 8003e46:	83fb      	strh	r3, [r7, #30]
      break;
 8003e48:	e007      	b.n	8003e5a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8003e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e4e:	83fb      	strh	r3, [r7, #30]
      break;
 8003e50:	e003      	b.n	8003e5a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	61bb      	str	r3, [r7, #24]
      break;
 8003e58:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d101      	bne.n	8003e66 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	e02c      	b.n	8003ec0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3320      	adds	r3, #32
 8003e6a:	f107 0210 	add.w	r2, r7, #16
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fc5d 	bl	8004730 <lsm303agr_acceleration_raw_get>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e01e      	b.n	8003ec0 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8003e82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003e90:	b21a      	sxth	r2, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8003e96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003ea0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ea4:	b21a      	sxth	r2, r3
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8003eaa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003eb4:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eb8:	b21a      	sxth	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	809a      	strh	r2, [r3, #4]

  return ret;
 8003ebe:	69bb      	ldr	r3, [r7, #24]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003ed8:	f107 0310 	add.w	r3, r7, #16
 8003edc:	4619      	mov	r1, r3
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff8c 	bl	8003dfc <LSM303AGR_ACC_GetAxesRaw>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
 8003eee:	e03c      	b.n	8003f6a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ff35 	bl	8003d66 <LSM303AGR_ACC_GetSensitivity>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295
 8003f06:	e030      	b.n	8003f6a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003f08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003f0c:	ee07 3a90 	vmov	s15, r3
 8003f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f20:	ee17 2a90 	vmov	r2, s15
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8003f28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f34:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f40:	ee17 2a90 	vmov	r2, s15
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8003f48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f60:	ee17 2a90 	vmov	r2, s15
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	70fb      	strb	r3, [r7, #3]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f103 0020 	add.w	r0, r3, #32
 8003f88:	1cba      	adds	r2, r7, #2
 8003f8a:	78f9      	ldrb	r1, [r7, #3]
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f000 fad9 	bl	8004544 <lsm303agr_write_reg>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295
 8003f9c:	e000      	b.n	8003fa0 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d103      	bne.n	8003fc4 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8003fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e04b      	b.n	800405c <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	7b1a      	ldrb	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	699a      	ldr	r2, [r3, #24]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a1a      	ldr	r2, [pc, #104]	; (8004068 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8004000:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8004006:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8004016:	f04f 33ff 	mov.w	r3, #4294967295
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e01e      	b.n	800405c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4798      	blx	r3
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800402a:	f04f 33ff 	mov.w	r3, #4294967295
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e014      	b.n	800405c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d010      	beq.n	800405c <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10b      	bne.n	800405c <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3320      	adds	r3, #32
 8004048:	2101      	movs	r1, #1
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fcc4 	bl	80049d8 <lsm303agr_mag_i2c_interface_set>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8004056:	f04f 33ff 	mov.w	r3, #4294967295
 800405a:	e000      	b.n	800405e <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 800405c:	68fb      	ldr	r3, [r7, #12]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	08004451 	.word	0x08004451
 800406c:	080044b3 	.word	0x080044b3

08004070 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3320      	adds	r3, #32
 800407c:	2101      	movs	r1, #1
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fbed 	bl	800485e <lsm303agr_mag_block_data_update_set>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800408a:	f04f 33ff 	mov.w	r3, #4294967295
 800408e:	e028      	b.n	80040e2 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3320      	adds	r3, #32
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fb95 	bl	80047c6 <lsm303agr_mag_operating_mode_set>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	e01c      	b.n	80040e2 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3320      	adds	r3, #32
 80040ac:	2103      	movs	r1, #3
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fbaf 	bl	8004812 <lsm303agr_mag_data_rate_set>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80040ba:	f04f 33ff 	mov.w	r3, #4294967295
 80040be:	e010      	b.n	80040e2 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3320      	adds	r3, #32
 80040c4:	2100      	movs	r1, #0
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fc3a 	bl	8004940 <lsm303agr_mag_self_test_set>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295
 80040d6:	e004      	b.n	80040e2 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e010      	b.n	8004122 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3320      	adds	r3, #32
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f000 fb5d 	bl	80047c6 <lsm303agr_mag_operating_mode_set>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e004      	b.n	8004122 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800413a:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3320      	adds	r3, #32
 8004158:	f107 0210 	add.w	r2, r7, #16
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fba3 	bl	80048aa <lsm303agr_magnetic_raw_get>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	e036      	b.n	80041de <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	4619      	mov	r1, r3
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ffd7 	bl	800412a <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800417c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004188:	edd7 7a03 	vldr	s15, [r7, #12]
 800418c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004194:	ee17 2a90 	vmov	r2, s15
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800419c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041b4:	ee17 2a90 	vmov	r2, s15
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80041bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80041c0:	ee07 3a90 	vmov	s15, r3
 80041c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d4:	ee17 2a90 	vmov	r2, s15
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
	...

080041e8 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3320      	adds	r3, #32
 80041fa:	f107 020b 	add.w	r2, r7, #11
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fa37 	bl	8004674 <lsm303agr_xl_full_scale_get>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 800420c:	f04f 33ff 	mov.w	r3, #4294967295
 8004210:	e023      	b.n	800425a <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8004212:	7afb      	ldrb	r3, [r7, #11]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d81b      	bhi.n	8004250 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8004218:	a201      	add	r2, pc, #4	; (adr r2, 8004220 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 800421a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421e:	bf00      	nop
 8004220:	08004231 	.word	0x08004231
 8004224:	08004239 	.word	0x08004239
 8004228:	08004241 	.word	0x08004241
 800422c:	08004249 	.word	0x08004249
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8004234:	601a      	str	r2, [r3, #0]
      break;
 8004236:	e00f      	b.n	8004258 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 800423c:	601a      	str	r2, [r3, #0]
      break;
 800423e:	e00b      	b.n	8004258 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8004244:	601a      	str	r2, [r3, #0]
      break;
 8004246:	e007      	b.n	8004258 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4a09      	ldr	r2, [pc, #36]	; (8004270 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 800424c:	601a      	str	r2, [r3, #0]
      break;
 800424e:	e003      	b.n	8004258 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004250:	f04f 33ff 	mov.w	r3, #4294967295
 8004254:	60fb      	str	r3, [r7, #12]
      break;
 8004256:	bf00      	nop
  }

  return ret;
 8004258:	68fb      	ldr	r3, [r7, #12]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	3f7ae148 	.word	0x3f7ae148
 8004268:	3ff9999a 	.word	0x3ff9999a
 800426c:	4079999a 	.word	0x4079999a
 8004270:	413b851f 	.word	0x413b851f

08004274 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3320      	adds	r3, #32
 8004286:	f107 020b 	add.w	r2, r7, #11
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f9f1 	bl	8004674 <lsm303agr_xl_full_scale_get>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8004298:	f04f 33ff 	mov.w	r3, #4294967295
 800429c:	e023      	b.n	80042e6 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800429e:	7afb      	ldrb	r3, [r7, #11]
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d81b      	bhi.n	80042dc <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042bd 	.word	0x080042bd
 80042b0:	080042c5 	.word	0x080042c5
 80042b4:	080042cd 	.word	0x080042cd
 80042b8:	080042d5 	.word	0x080042d5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80042c0:	601a      	str	r2, [r3, #0]
      break;
 80042c2:	e00f      	b.n	80042e4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4a0b      	ldr	r2, [pc, #44]	; (80042f4 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80042c8:	601a      	str	r2, [r3, #0]
      break;
 80042ca:	e00b      	b.n	80042e4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80042d0:	601a      	str	r2, [r3, #0]
      break;
 80042d2:	e007      	b.n	80042e4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4a09      	ldr	r2, [pc, #36]	; (80042fc <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80042d8:	601a      	str	r2, [r3, #0]
      break;
 80042da:	e003      	b.n	80042e4 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80042dc:	f04f 33ff 	mov.w	r3, #4294967295
 80042e0:	60fb      	str	r3, [r7, #12]
      break;
 80042e2:	bf00      	nop
  }

  return ret;
 80042e4:	68fb      	ldr	r3, [r7, #12]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	4079999a 	.word	0x4079999a
 80042f4:	40fa3d71 	.word	0x40fa3d71
 80042f8:	417a147b 	.word	0x417a147b
 80042fc:	423b999a 	.word	0x423b999a

08004300 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3320      	adds	r3, #32
 8004312:	f107 020b 	add.w	r2, r7, #11
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f9ab 	bl	8004674 <lsm303agr_xl_full_scale_get>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8004324:	f04f 33ff 	mov.w	r3, #4294967295
 8004328:	e023      	b.n	8004372 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800432a:	7afb      	ldrb	r3, [r7, #11]
 800432c:	2b03      	cmp	r3, #3
 800432e:	d81b      	bhi.n	8004368 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	08004349 	.word	0x08004349
 800433c:	08004351 	.word	0x08004351
 8004340:	08004359 	.word	0x08004359
 8004344:	08004361 	.word	0x08004361
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4a0c      	ldr	r2, [pc, #48]	; (800437c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 800434c:	601a      	str	r2, [r3, #0]
      break;
 800434e:	e00f      	b.n	8004370 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8004354:	601a      	str	r2, [r3, #0]
      break;
 8004356:	e00b      	b.n	8004370 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 800435c:	601a      	str	r2, [r3, #0]
      break;
 800435e:	e007      	b.n	8004370 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8004364:	601a      	str	r2, [r3, #0]
      break;
 8004366:	e003      	b.n	8004370 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004368:	f04f 33ff 	mov.w	r3, #4294967295
 800436c:	60fb      	str	r3, [r7, #12]
      break;
 800436e:	bf00      	nop
  }

  return ret;
 8004370:	68fb      	ldr	r3, [r7, #12]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	417a147b 	.word	0x417a147b
 8004380:	41fa147b 	.word	0x41fa147b
 8004384:	427a147b 	.word	0x427a147b
 8004388:	433b947b 	.word	0x433b947b

0800438c <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800438c:	b590      	push	{r4, r7, lr}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	461a      	mov	r2, r3
 8004398:	460b      	mov	r3, r1
 800439a:	72fb      	strb	r3, [r7, #11]
 800439c:	4613      	mov	r3, r2
 800439e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10e      	bne.n	80043ca <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	695c      	ldr	r4, [r3, #20]
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	7b1b      	ldrb	r3, [r3, #12]
 80043b4:	b298      	uxth	r0, r3
 80043b6:	7afb      	ldrb	r3, [r7, #11]
 80043b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	b299      	uxth	r1, r3
 80043c0:	893b      	ldrh	r3, [r7, #8]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	47a0      	blx	r4
 80043c6:	4603      	mov	r3, r0
 80043c8:	e00d      	b.n	80043e6 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	695c      	ldr	r4, [r3, #20]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	7b1b      	ldrb	r3, [r3, #12]
 80043d2:	b298      	uxth	r0, r3
 80043d4:	7afb      	ldrb	r3, [r7, #11]
 80043d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	b299      	uxth	r1, r3
 80043de:	893b      	ldrh	r3, [r7, #8]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	47a0      	blx	r4
 80043e4:	4603      	mov	r3, r0
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	371c      	adds	r7, #28
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd90      	pop	{r4, r7, pc}

080043ee <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80043ee:	b590      	push	{r4, r7, lr}
 80043f0:	b087      	sub	sp, #28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	461a      	mov	r2, r3
 80043fa:	460b      	mov	r3, r1
 80043fc:	72fb      	strb	r3, [r7, #11]
 80043fe:	4613      	mov	r3, r2
 8004400:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10e      	bne.n	800442c <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	691c      	ldr	r4, [r3, #16]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	7b1b      	ldrb	r3, [r3, #12]
 8004416:	b298      	uxth	r0, r3
 8004418:	7afb      	ldrb	r3, [r7, #11]
 800441a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800441e:	b2db      	uxtb	r3, r3
 8004420:	b299      	uxth	r1, r3
 8004422:	893b      	ldrh	r3, [r7, #8]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	47a0      	blx	r4
 8004428:	4603      	mov	r3, r0
 800442a:	e00d      	b.n	8004448 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	691c      	ldr	r4, [r3, #16]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	7b1b      	ldrb	r3, [r3, #12]
 8004434:	b298      	uxth	r0, r3
 8004436:	7afb      	ldrb	r3, [r7, #11]
 8004438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800443c:	b2db      	uxtb	r3, r3
 800443e:	b299      	uxth	r1, r3
 8004440:	893b      	ldrh	r3, [r7, #8]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	47a0      	blx	r4
 8004446:	4603      	mov	r3, r0
  }
}
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	bd90      	pop	{r4, r7, pc}

08004450 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004450:	b590      	push	{r4, r7, lr}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	461a      	mov	r2, r3
 800445c:	460b      	mov	r3, r1
 800445e:	72fb      	strb	r3, [r7, #11]
 8004460:	4613      	mov	r3, r2
 8004462:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10e      	bne.n	800448e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	695c      	ldr	r4, [r3, #20]
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	7b1b      	ldrb	r3, [r3, #12]
 8004478:	b298      	uxth	r0, r3
 800447a:	7afb      	ldrb	r3, [r7, #11]
 800447c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004480:	b2db      	uxtb	r3, r3
 8004482:	b299      	uxth	r1, r3
 8004484:	893b      	ldrh	r3, [r7, #8]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	47a0      	blx	r4
 800448a:	4603      	mov	r3, r0
 800448c:	e00d      	b.n	80044aa <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	695c      	ldr	r4, [r3, #20]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	7b1b      	ldrb	r3, [r3, #12]
 8004496:	b298      	uxth	r0, r3
 8004498:	7afb      	ldrb	r3, [r7, #11]
 800449a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	b299      	uxth	r1, r3
 80044a2:	893b      	ldrh	r3, [r7, #8]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	47a0      	blx	r4
 80044a8:	4603      	mov	r3, r0
  }
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd90      	pop	{r4, r7, pc}

080044b2 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044b2:	b590      	push	{r4, r7, lr}
 80044b4:	b087      	sub	sp, #28
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	461a      	mov	r2, r3
 80044be:	460b      	mov	r3, r1
 80044c0:	72fb      	strb	r3, [r7, #11]
 80044c2:	4613      	mov	r3, r2
 80044c4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10e      	bne.n	80044f0 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	691c      	ldr	r4, [r3, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	7b1b      	ldrb	r3, [r3, #12]
 80044da:	b298      	uxth	r0, r3
 80044dc:	7afb      	ldrb	r3, [r7, #11]
 80044de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	b299      	uxth	r1, r3
 80044e6:	893b      	ldrh	r3, [r7, #8]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	47a0      	blx	r4
 80044ec:	4603      	mov	r3, r0
 80044ee:	e00d      	b.n	800450c <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	691c      	ldr	r4, [r3, #16]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	7b1b      	ldrb	r3, [r3, #12]
 80044f8:	b298      	uxth	r0, r3
 80044fa:	7afb      	ldrb	r3, [r7, #11]
 80044fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004500:	b2db      	uxtb	r3, r3
 8004502:	b299      	uxth	r1, r3
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	47a0      	blx	r4
 800450a:	4603      	mov	r3, r0
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	bd90      	pop	{r4, r7, pc}

08004514 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004514:	b590      	push	{r4, r7, lr}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	461a      	mov	r2, r3
 8004520:	460b      	mov	r3, r1
 8004522:	72fb      	strb	r3, [r7, #11]
 8004524:	4613      	mov	r3, r2
 8004526:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685c      	ldr	r4, [r3, #4]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	68d8      	ldr	r0, [r3, #12]
 8004530:	893b      	ldrh	r3, [r7, #8]
 8004532:	7af9      	ldrb	r1, [r7, #11]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	47a0      	blx	r4
 8004538:	6178      	str	r0, [r7, #20]

  return ret;
 800453a:	697b      	ldr	r3, [r7, #20]
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}

08004544 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	460b      	mov	r3, r1
 8004552:	72fb      	strb	r3, [r7, #11]
 8004554:	4613      	mov	r3, r2
 8004556:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681c      	ldr	r4, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68d8      	ldr	r0, [r3, #12]
 8004560:	893b      	ldrh	r3, [r7, #8]
 8004562:	7af9      	ldrb	r1, [r7, #11]
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	47a0      	blx	r4
 8004568:	6178      	str	r0, [r7, #20]

  return ret;
 800456a:	697b      	ldr	r3, [r7, #20]
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	bd90      	pop	{r4, r7, pc}

08004574 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800457e:	f107 020c 	add.w	r2, r7, #12
 8004582:	2301      	movs	r3, #1
 8004584:	2120      	movs	r1, #32
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ffc4 	bl	8004514 <lsm303agr_read_reg>
 800458c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d107      	bne.n	80045a4 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004594:	f107 0210 	add.w	r2, r7, #16
 8004598:	2301      	movs	r3, #1
 800459a:	2123      	movs	r1, #35	; 0x23
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff ffb9 	bl	8004514 <lsm303agr_read_reg>
 80045a2:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 80045a4:	7b3b      	ldrb	r3, [r7, #12]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2202      	movs	r2, #2
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e00c      	b.n	80045d2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 80045b8:	7c3b      	ldrb	r3, [r7, #16]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e002      	b.n	80045d2 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80045d2:	697b      	ldr	r3, [r7, #20]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	460b      	mov	r3, r1
 80045e6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80045e8:	f107 0208 	add.w	r2, r7, #8
 80045ec:	2301      	movs	r3, #1
 80045ee:	2120      	movs	r1, #32
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff8f 	bl	8004514 <lsm303agr_read_reg>
 80045f6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10f      	bne.n	800461e <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 80045fe:	78fb      	ldrb	r3, [r7, #3]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	b2da      	uxtb	r2, r3
 8004606:	7a3b      	ldrb	r3, [r7, #8]
 8004608:	f362 1307 	bfi	r3, r2, #4, #4
 800460c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800460e:	f107 0208 	add.w	r2, r7, #8
 8004612:	2301      	movs	r3, #1
 8004614:	2120      	movs	r1, #32
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7ff ff94 	bl	8004544 <lsm303agr_write_reg>
 800461c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004634:	f107 0208 	add.w	r2, r7, #8
 8004638:	2301      	movs	r3, #1
 800463a:	2123      	movs	r1, #35	; 0x23
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff ff69 	bl	8004514 <lsm303agr_read_reg>
 8004642:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	b2da      	uxtb	r2, r3
 8004652:	7a3b      	ldrb	r3, [r7, #8]
 8004654:	f362 1305 	bfi	r3, r2, #4, #2
 8004658:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800465a:	f107 0208 	add.w	r2, r7, #8
 800465e:	2301      	movs	r3, #1
 8004660:	2123      	movs	r1, #35	; 0x23
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff ff6e 	bl	8004544 <lsm303agr_write_reg>
 8004668:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 800466a:	68fb      	ldr	r3, [r7, #12]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800467e:	f107 0208 	add.w	r2, r7, #8
 8004682:	2301      	movs	r3, #1
 8004684:	2123      	movs	r1, #35	; 0x23
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ff44 	bl	8004514 <lsm303agr_read_reg>
 800468c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 800468e:	7a3b      	ldrb	r3, [r7, #8]
 8004690:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d81a      	bhi.n	80046d0 <lsm303agr_xl_full_scale_get+0x5c>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <lsm303agr_xl_full_scale_get+0x2c>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046b9 	.word	0x080046b9
 80046a8:	080046c1 	.word	0x080046c1
 80046ac:	080046c9 	.word	0x080046c9
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	701a      	strb	r2, [r3, #0]
      break;
 80046b6:	e00f      	b.n	80046d8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2201      	movs	r2, #1
 80046bc:	701a      	strb	r2, [r3, #0]
      break;
 80046be:	e00b      	b.n	80046d8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2202      	movs	r2, #2
 80046c4:	701a      	strb	r2, [r3, #0]
      break;
 80046c6:	e007      	b.n	80046d8 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2203      	movs	r2, #3
 80046cc:	701a      	strb	r2, [r3, #0]
      break;
 80046ce:	e003      	b.n	80046d8 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
      break;
 80046d6:	bf00      	nop
  }

  return ret;
 80046d8:	68fb      	ldr	r3, [r7, #12]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop

080046e4 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80046f0:	f107 0208 	add.w	r2, r7, #8
 80046f4:	2301      	movs	r3, #1
 80046f6:	2123      	movs	r1, #35	; 0x23
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff0b 	bl	8004514 <lsm303agr_read_reg>
 80046fe:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8004706:	78fb      	ldrb	r3, [r7, #3]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	7a3b      	ldrb	r3, [r7, #8]
 8004710:	f362 13c7 	bfi	r3, r2, #7, #1
 8004714:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004716:	f107 0208 	add.w	r2, r7, #8
 800471a:	2301      	movs	r3, #1
 800471c:	2123      	movs	r1, #35	; 0x23
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ff10 	bl	8004544 <lsm303agr_write_reg>
 8004724:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004726:	68fb      	ldr	r3, [r7, #12]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 800473a:	f107 020c 	add.w	r2, r7, #12
 800473e:	2306      	movs	r3, #6
 8004740:	2128      	movs	r1, #40	; 0x28
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fee6 	bl	8004514 <lsm303agr_read_reg>
 8004748:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800474a:	7b7b      	ldrb	r3, [r7, #13]
 800474c:	b21a      	sxth	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004758:	b29b      	uxth	r3, r3
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	b29a      	uxth	r2, r3
 800475e:	7b3b      	ldrb	r3, [r7, #12]
 8004760:	b29b      	uxth	r3, r3
 8004762:	4413      	add	r3, r2
 8004764:	b29b      	uxth	r3, r3
 8004766:	b21a      	sxth	r2, r3
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	3302      	adds	r3, #2
 8004772:	b212      	sxth	r2, r2
 8004774:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	3302      	adds	r3, #2
 800477a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800477e:	b29b      	uxth	r3, r3
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	b29a      	uxth	r2, r3
 8004784:	7bbb      	ldrb	r3, [r7, #14]
 8004786:	b29b      	uxth	r3, r3
 8004788:	4413      	add	r3, r2
 800478a:	b29a      	uxth	r2, r3
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	3302      	adds	r3, #2
 8004790:	b212      	sxth	r2, r2
 8004792:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004794:	7c7a      	ldrb	r2, [r7, #17]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	3304      	adds	r3, #4
 800479a:	b212      	sxth	r2, r2
 800479c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	7c3b      	ldrb	r3, [r7, #16]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	4413      	add	r3, r2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	3304      	adds	r3, #4
 80047b8:	b212      	sxth	r2, r2
 80047ba:	801a      	strh	r2, [r3, #0]

  return ret;
 80047bc:	697b      	ldr	r3, [r7, #20]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b084      	sub	sp, #16
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	460b      	mov	r3, r1
 80047d0:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80047d2:	f107 0208 	add.w	r2, r7, #8
 80047d6:	2301      	movs	r3, #1
 80047d8:	2160      	movs	r1, #96	; 0x60
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fe9a 	bl	8004514 <lsm303agr_read_reg>
 80047e0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10f      	bne.n	8004808 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	7a3b      	ldrb	r3, [r7, #8]
 80047f2:	f362 0301 	bfi	r3, r2, #0, #2
 80047f6:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80047f8:	f107 0208 	add.w	r2, r7, #8
 80047fc:	2301      	movs	r3, #1
 80047fe:	2160      	movs	r1, #96	; 0x60
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff fe9f 	bl	8004544 <lsm303agr_write_reg>
 8004806:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004808:	68fb      	ldr	r3, [r7, #12]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	460b      	mov	r3, r1
 800481c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800481e:	f107 0208 	add.w	r2, r7, #8
 8004822:	2301      	movs	r3, #1
 8004824:	2160      	movs	r1, #96	; 0x60
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fe74 	bl	8004514 <lsm303agr_read_reg>
 800482c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10f      	bne.n	8004854 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8004834:	78fb      	ldrb	r3, [r7, #3]
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	b2da      	uxtb	r2, r3
 800483c:	7a3b      	ldrb	r3, [r7, #8]
 800483e:	f362 0383 	bfi	r3, r2, #2, #2
 8004842:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004844:	f107 0208 	add.w	r2, r7, #8
 8004848:	2301      	movs	r3, #1
 800484a:	2160      	movs	r1, #96	; 0x60
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff fe79 	bl	8004544 <lsm303agr_write_reg>
 8004852:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004854:	68fb      	ldr	r3, [r7, #12]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800486a:	f107 0208 	add.w	r2, r7, #8
 800486e:	2301      	movs	r3, #1
 8004870:	2162      	movs	r1, #98	; 0x62
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff fe4e 	bl	8004514 <lsm303agr_read_reg>
 8004878:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10f      	bne.n	80048a0 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004880:	78fb      	ldrb	r3, [r7, #3]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	b2da      	uxtb	r2, r3
 8004888:	7a3b      	ldrb	r3, [r7, #8]
 800488a:	f362 1304 	bfi	r3, r2, #4, #1
 800488e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004890:	f107 0208 	add.w	r2, r7, #8
 8004894:	2301      	movs	r3, #1
 8004896:	2162      	movs	r1, #98	; 0x62
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fe53 	bl	8004544 <lsm303agr_write_reg>
 800489e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b086      	sub	sp, #24
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 80048b4:	f107 020c 	add.w	r2, r7, #12
 80048b8:	2306      	movs	r3, #6
 80048ba:	2168      	movs	r1, #104	; 0x68
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7ff fe29 	bl	8004514 <lsm303agr_read_reg>
 80048c2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80048c4:	7b7b      	ldrb	r3, [r7, #13]
 80048c6:	b21a      	sxth	r2, r3
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	7b3b      	ldrb	r3, [r7, #12]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	4413      	add	r3, r2
 80048de:	b29b      	uxth	r3, r3
 80048e0:	b21a      	sxth	r2, r3
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80048e6:	7bfa      	ldrb	r2, [r7, #15]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	3302      	adds	r3, #2
 80048ec:	b212      	sxth	r2, r2
 80048ee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	3302      	adds	r3, #2
 80048f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	7bbb      	ldrb	r3, [r7, #14]
 8004900:	b29b      	uxth	r3, r3
 8004902:	4413      	add	r3, r2
 8004904:	b29a      	uxth	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3302      	adds	r3, #2
 800490a:	b212      	sxth	r2, r2
 800490c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800490e:	7c7a      	ldrb	r2, [r7, #17]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	3304      	adds	r3, #4
 8004914:	b212      	sxth	r2, r2
 8004916:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	3304      	adds	r3, #4
 800491c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004920:	b29b      	uxth	r3, r3
 8004922:	021b      	lsls	r3, r3, #8
 8004924:	b29a      	uxth	r2, r3
 8004926:	7c3b      	ldrb	r3, [r7, #16]
 8004928:	b29b      	uxth	r3, r3
 800492a:	4413      	add	r3, r2
 800492c:	b29a      	uxth	r2, r3
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	3304      	adds	r3, #4
 8004932:	b212      	sxth	r2, r2
 8004934:	801a      	strh	r2, [r3, #0]

  return ret;
 8004936:	697b      	ldr	r3, [r7, #20]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800494c:	f107 0208 	add.w	r2, r7, #8
 8004950:	2301      	movs	r3, #1
 8004952:	2162      	movs	r1, #98	; 0x62
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7ff fddd 	bl	8004514 <lsm303agr_read_reg>
 800495a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10f      	bne.n	8004982 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	b2da      	uxtb	r2, r3
 800496a:	7a3b      	ldrb	r3, [r7, #8]
 800496c:	f362 0341 	bfi	r3, r2, #1, #1
 8004970:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004972:	f107 0208 	add.w	r2, r7, #8
 8004976:	2301      	movs	r3, #1
 8004978:	2162      	movs	r1, #98	; 0x62
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fde2 	bl	8004544 <lsm303agr_write_reg>
 8004980:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8004998:	f107 0208 	add.w	r2, r7, #8
 800499c:	2301      	movs	r3, #1
 800499e:	212e      	movs	r1, #46	; 0x2e
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fdb7 	bl	8004514 <lsm303agr_read_reg>
 80049a6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10f      	bne.n	80049ce <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80049ae:	78fb      	ldrb	r3, [r7, #3]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	7a3b      	ldrb	r3, [r7, #8]
 80049b8:	f362 1387 	bfi	r3, r2, #6, #2
 80049bc:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80049be:	f107 0208 	add.w	r2, r7, #8
 80049c2:	2301      	movs	r3, #1
 80049c4:	212e      	movs	r1, #46	; 0x2e
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fdbc 	bl	8004544 <lsm303agr_write_reg>
 80049cc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80049e4:	f107 0208 	add.w	r2, r7, #8
 80049e8:	2301      	movs	r3, #1
 80049ea:	2162      	movs	r1, #98	; 0x62
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7ff fd91 	bl	8004514 <lsm303agr_read_reg>
 80049f2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10f      	bne.n	8004a1a <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	7a3b      	ldrb	r3, [r7, #8]
 8004a04:	f362 1345 	bfi	r3, r2, #5, #1
 8004a08:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004a0a:	f107 0208 	add.w	r2, r7, #8
 8004a0e:	2301      	movs	r3, #1
 8004a10:	2162      	movs	r1, #98	; 0x62
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fd96 	bl	8004544 <lsm303agr_write_reg>
 8004a18:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d103      	bne.n	8004a40 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e051      	b.n	8004ae4 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	7b1a      	ldrb	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	695a      	ldr	r2, [r3, #20]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	699a      	ldr	r2, [r3, #24]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <LSM6DSL_RegisterBusIO+0xcc>)
 8004a7c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a1c      	ldr	r2, [pc, #112]	; (8004af4 <LSM6DSL_RegisterBusIO+0xd0>)
 8004a82:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d103      	bne.n	8004aa2 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	e020      	b.n	8004ae4 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4798      	blx	r3
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e016      	b.n	8004ae4 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d112      	bne.n	8004ae4 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10d      	bne.n	8004ae4 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8004ac8:	230c      	movs	r3, #12
 8004aca:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8004acc:	7afb      	ldrb	r3, [r7, #11]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2112      	movs	r1, #18
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f968 	bl	8004da8 <LSM6DSL_Write_Reg>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8004ade:	f04f 33ff 	mov.w	r3, #4294967295
 8004ae2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	08004ddf 	.word	0x08004ddf
 8004af4:	08004e15 	.word	0x08004e15

08004af8 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3320      	adds	r3, #32
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fb1b 	bl	8005142 <lsm6dsl_auto_increment_set>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	e054      	b.n	8004bc2 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3320      	adds	r3, #32
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa9e 	bl	8005060 <lsm6dsl_block_data_update_set>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	e048      	b.n	8004bc2 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3320      	adds	r3, #32
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fb29 	bl	800518e <lsm6dsl_fifo_mode_set>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8004b42:	f04f 33ff 	mov.w	r3, #4294967295
 8004b46:	e03c      	b.n	8004bc2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3320      	adds	r3, #32
 8004b54:	2100      	movs	r1, #0
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f9cd 	bl	8004ef6 <lsm6dsl_xl_data_rate_set>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8004b62:	f04f 33ff 	mov.w	r3, #4294967295
 8004b66:	e02c      	b.n	8004bc2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3320      	adds	r3, #32
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f99b 	bl	8004eaa <lsm6dsl_xl_full_scale_set>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7e:	e020      	b.n	8004bc2 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2204      	movs	r2, #4
 8004b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3320      	adds	r3, #32
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa40 	bl	8005014 <lsm6dsl_gy_data_rate_set>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	e010      	b.n	8004bc2 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3320      	adds	r3, #32
 8004ba4:	2106      	movs	r1, #6
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f9cb 	bl	8004f42 <lsm6dsl_gy_full_scale_set>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8004bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bb6:	e004      	b.n	8004bc2 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e014      	b.n	8004c0a <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f103 0220 	add.w	r2, r3, #32
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004bec:	4619      	mov	r1, r3
 8004bee:	4610      	mov	r0, r2
 8004bf0:	f000 f981 	bl	8004ef6 <lsm6dsl_xl_data_rate_set>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfe:	e004      	b.n	8004c0a <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e014      	b.n	8004c52 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f103 0220 	add.w	r2, r3, #32
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 f9ec 	bl	8005014 <lsm6dsl_gy_data_rate_set>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295
 8004c46:	e004      	b.n	8004c52 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3320      	adds	r3, #32
 8004c6e:	f107 020b 	add.w	r2, r7, #11
 8004c72:	4611      	mov	r1, r2
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f98b 	bl	8004f90 <lsm6dsl_gy_full_scale_get>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
 8004c84:	e02d      	b.n	8004ce2 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d825      	bhi.n	8004cd8 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004cb9 	.word	0x08004cb9
 8004c98:	08004cb1 	.word	0x08004cb1
 8004c9c:	08004cc1 	.word	0x08004cc1
 8004ca0:	08004cd9 	.word	0x08004cd9
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08004cd9 	.word	0x08004cd9
 8004cac:	08004cd1 	.word	0x08004cd1
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004cb4:	601a      	str	r2, [r3, #0]
      break;
 8004cb6:	e013      	b.n	8004ce0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004cbc:	601a      	str	r2, [r3, #0]
      break;
 8004cbe:	e00f      	b.n	8004ce0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004cc4:	601a      	str	r2, [r3, #0]
      break;
 8004cc6:	e00b      	b.n	8004ce0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	4a0b      	ldr	r2, [pc, #44]	; (8004cf8 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004ccc:	601a      	str	r2, [r3, #0]
      break;
 8004cce:	e007      	b.n	8004ce0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004cd4:	601a      	str	r2, [r3, #0]
      break;
 8004cd6:	e003      	b.n	8004ce0 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cdc:	60fb      	str	r3, [r7, #12]
      break;
 8004cde:	bf00      	nop
  }

  return ret;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	408c0000 	.word	0x408c0000
 8004cf0:	410c0000 	.word	0x410c0000
 8004cf4:	418c0000 	.word	0x418c0000
 8004cf8:	420c0000 	.word	0x420c0000
 8004cfc:	428c0000 	.word	0x428c0000

08004d00 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3320      	adds	r3, #32
 8004d0e:	f107 0210 	add.w	r2, r7, #16
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 f9c9 	bl	80050ac <lsm6dsl_angular_rate_raw_get>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004d20:	f04f 33ff 	mov.w	r3, #4294967295
 8004d24:	e03c      	b.n	8004da0 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7ff ff95 	bl	8004c5c <LSM6DSL_GYRO_GetSensitivity>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004d38:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3c:	e030      	b.n	8004da0 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d56:	ee17 2a90 	vmov	r2, s15
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004d5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d62:	ee07 3a90 	vmov	s15, r3
 8004d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d76:	ee17 2a90 	vmov	r2, s15
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004d7e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d96:	ee17 2a90 	vmov	r2, s15
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3718      	adds	r7, #24
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
 8004db4:	4613      	mov	r3, r2
 8004db6:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f103 0020 	add.w	r0, r3, #32
 8004dbe:	1cba      	adds	r2, r7, #2
 8004dc0:	78f9      	ldrb	r1, [r7, #3]
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f000 f859 	bl	8004e7a <lsm6dsl_write_reg>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004dce:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd2:	e000      	b.n	8004dd6 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004dde:	b590      	push	{r4, r7, lr}
 8004de0:	b087      	sub	sp, #28
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	60f8      	str	r0, [r7, #12]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	461a      	mov	r2, r3
 8004dea:	460b      	mov	r3, r1
 8004dec:	72fb      	strb	r3, [r7, #11]
 8004dee:	4613      	mov	r3, r2
 8004df0:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	695c      	ldr	r4, [r3, #20]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	7b1b      	ldrb	r3, [r3, #12]
 8004dfe:	b298      	uxth	r0, r3
 8004e00:	7afb      	ldrb	r3, [r7, #11]
 8004e02:	b299      	uxth	r1, r3
 8004e04:	893b      	ldrh	r3, [r7, #8]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	47a0      	blx	r4
 8004e0a:	4603      	mov	r3, r0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd90      	pop	{r4, r7, pc}

08004e14 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e14:	b590      	push	{r4, r7, lr}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	460b      	mov	r3, r1
 8004e22:	72fb      	strb	r3, [r7, #11]
 8004e24:	4613      	mov	r3, r2
 8004e26:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	691c      	ldr	r4, [r3, #16]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	7b1b      	ldrb	r3, [r3, #12]
 8004e34:	b298      	uxth	r0, r3
 8004e36:	7afb      	ldrb	r3, [r7, #11]
 8004e38:	b299      	uxth	r1, r3
 8004e3a:	893b      	ldrh	r3, [r7, #8]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	47a0      	blx	r4
 8004e40:	4603      	mov	r3, r0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}

08004e4a <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004e4a:	b590      	push	{r4, r7, lr}
 8004e4c:	b087      	sub	sp, #28
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	60f8      	str	r0, [r7, #12]
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	461a      	mov	r2, r3
 8004e56:	460b      	mov	r3, r1
 8004e58:	72fb      	strb	r3, [r7, #11]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685c      	ldr	r4, [r3, #4]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68d8      	ldr	r0, [r3, #12]
 8004e66:	893b      	ldrh	r3, [r7, #8]
 8004e68:	7af9      	ldrb	r1, [r7, #11]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	47a0      	blx	r4
 8004e6e:	6178      	str	r0, [r7, #20]

  return ret;
 8004e70:	697b      	ldr	r3, [r7, #20]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd90      	pop	{r4, r7, pc}

08004e7a <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004e7a:	b590      	push	{r4, r7, lr}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	607a      	str	r2, [r7, #4]
 8004e84:	461a      	mov	r2, r3
 8004e86:	460b      	mov	r3, r1
 8004e88:	72fb      	strb	r3, [r7, #11]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681c      	ldr	r4, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68d8      	ldr	r0, [r3, #12]
 8004e96:	893b      	ldrh	r3, [r7, #8]
 8004e98:	7af9      	ldrb	r1, [r7, #11]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	47a0      	blx	r4
 8004e9e:	6178      	str	r0, [r7, #20]

  return ret;
 8004ea0:	697b      	ldr	r3, [r7, #20]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd90      	pop	{r4, r7, pc}

08004eaa <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004eb6:	f107 0208 	add.w	r2, r7, #8
 8004eba:	2301      	movs	r3, #1
 8004ebc:	2110      	movs	r1, #16
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff ffc3 	bl	8004e4a <lsm6dsl_read_reg>
 8004ec4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10f      	bne.n	8004eec <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	7a3b      	ldrb	r3, [r7, #8]
 8004ed6:	f362 0383 	bfi	r3, r2, #2, #2
 8004eda:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004edc:	f107 0208 	add.w	r2, r7, #8
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	2110      	movs	r1, #16
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7ff ffc8 	bl	8004e7a <lsm6dsl_write_reg>
 8004eea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004f02:	f107 0208 	add.w	r2, r7, #8
 8004f06:	2301      	movs	r3, #1
 8004f08:	2110      	movs	r1, #16
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff ff9d 	bl	8004e4a <lsm6dsl_read_reg>
 8004f10:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10f      	bne.n	8004f38 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	7a3b      	ldrb	r3, [r7, #8]
 8004f22:	f362 1307 	bfi	r3, r2, #4, #4
 8004f26:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8004f28:	f107 0208 	add.w	r2, r7, #8
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	2110      	movs	r1, #16
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ffa2 	bl	8004e7a <lsm6dsl_write_reg>
 8004f36:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f38:	68fb      	ldr	r3, [r7, #12]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b084      	sub	sp, #16
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f4e:	f107 0208 	add.w	r2, r7, #8
 8004f52:	2301      	movs	r3, #1
 8004f54:	2111      	movs	r1, #17
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff77 	bl	8004e4a <lsm6dsl_read_reg>
 8004f5c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10f      	bne.n	8004f84 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	7a3b      	ldrb	r3, [r7, #8]
 8004f6e:	f362 0343 	bfi	r3, r2, #1, #3
 8004f72:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f74:	f107 0208 	add.w	r2, r7, #8
 8004f78:	2301      	movs	r3, #1
 8004f7a:	2111      	movs	r1, #17
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff ff7c 	bl	8004e7a <lsm6dsl_write_reg>
 8004f82:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f9a:	f107 0208 	add.w	r2, r7, #8
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	2111      	movs	r1, #17
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ff51 	bl	8004e4a <lsm6dsl_read_reg>
 8004fa8:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 8004faa:	7a3b      	ldrb	r3, [r7, #8]
 8004fac:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b06      	cmp	r3, #6
 8004fb4:	d824      	bhi.n	8005000 <lsm6dsl_gy_full_scale_get+0x70>
 8004fb6:	a201      	add	r2, pc, #4	; (adr r2, 8004fbc <lsm6dsl_gy_full_scale_get+0x2c>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004fe1 	.word	0x08004fe1
 8004fc4:	08004fe9 	.word	0x08004fe9
 8004fc8:	08005001 	.word	0x08005001
 8004fcc:	08004ff1 	.word	0x08004ff1
 8004fd0:	08005001 	.word	0x08005001
 8004fd4:	08004ff9 	.word	0x08004ff9
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
      break;
 8004fde:	e013      	b.n	8005008 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
      break;
 8004fe6:	e00f      	b.n	8005008 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]
      break;
 8004fee:	e00b      	b.n	8005008 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	701a      	strb	r2, [r3, #0]
      break;
 8004ff6:	e007      	b.n	8005008 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2206      	movs	r2, #6
 8004ffc:	701a      	strb	r2, [r3, #0]
      break;
 8004ffe:	e003      	b.n	8005008 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2207      	movs	r2, #7
 8005004:	701a      	strb	r2, [r3, #0]
      break;
 8005006:	bf00      	nop
  }

  return ret;
 8005008:	68fb      	ldr	r3, [r7, #12]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop

08005014 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005020:	f107 0208 	add.w	r2, r7, #8
 8005024:	2301      	movs	r3, #1
 8005026:	2111      	movs	r1, #17
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7ff ff0e 	bl	8004e4a <lsm6dsl_read_reg>
 800502e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10f      	bne.n	8005056 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	b2da      	uxtb	r2, r3
 800503e:	7a3b      	ldrb	r3, [r7, #8]
 8005040:	f362 1307 	bfi	r3, r2, #4, #4
 8005044:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005046:	f107 0208 	add.w	r2, r7, #8
 800504a:	2301      	movs	r3, #1
 800504c:	2111      	movs	r1, #17
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff ff13 	bl	8004e7a <lsm6dsl_write_reg>
 8005054:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005056:	68fb      	ldr	r3, [r7, #12]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800506c:	f107 0208 	add.w	r2, r7, #8
 8005070:	2301      	movs	r3, #1
 8005072:	2112      	movs	r1, #18
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff fee8 	bl	8004e4a <lsm6dsl_read_reg>
 800507a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10f      	bne.n	80050a2 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8005082:	78fb      	ldrb	r3, [r7, #3]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	b2da      	uxtb	r2, r3
 800508a:	7a3b      	ldrb	r3, [r7, #8]
 800508c:	f362 1386 	bfi	r3, r2, #6, #1
 8005090:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005092:	f107 0208 	add.w	r2, r7, #8
 8005096:	2301      	movs	r3, #1
 8005098:	2112      	movs	r1, #18
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7ff feed 	bl	8004e7a <lsm6dsl_write_reg>
 80050a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80050a2:	68fb      	ldr	r3, [r7, #12]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80050b6:	f107 020c 	add.w	r2, r7, #12
 80050ba:	2306      	movs	r3, #6
 80050bc:	2122      	movs	r1, #34	; 0x22
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fec3 	bl	8004e4a <lsm6dsl_read_reg>
 80050c4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80050c6:	7b7b      	ldrb	r3, [r7, #13]
 80050c8:	b21a      	sxth	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	021b      	lsls	r3, r3, #8
 80050d8:	b29a      	uxth	r2, r3
 80050da:	7b3b      	ldrb	r3, [r7, #12]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	4413      	add	r3, r2
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	b21a      	sxth	r2, r3
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	3302      	adds	r3, #2
 80050ee:	b212      	sxth	r2, r2
 80050f0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	3302      	adds	r3, #2
 80050f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	021b      	lsls	r3, r3, #8
 80050fe:	b29a      	uxth	r2, r3
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	b29b      	uxth	r3, r3
 8005104:	4413      	add	r3, r2
 8005106:	b29a      	uxth	r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	3302      	adds	r3, #2
 800510c:	b212      	sxth	r2, r2
 800510e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005110:	7c7a      	ldrb	r2, [r7, #17]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	3304      	adds	r3, #4
 8005116:	b212      	sxth	r2, r2
 8005118:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	3304      	adds	r3, #4
 800511e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005122:	b29b      	uxth	r3, r3
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	b29a      	uxth	r2, r3
 8005128:	7c3b      	ldrb	r3, [r7, #16]
 800512a:	b29b      	uxth	r3, r3
 800512c:	4413      	add	r3, r2
 800512e:	b29a      	uxth	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	3304      	adds	r3, #4
 8005134:	b212      	sxth	r2, r2
 8005136:	801a      	strh	r2, [r3, #0]

  return ret;
 8005138:	697b      	ldr	r3, [r7, #20]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800514e:	f107 0208 	add.w	r2, r7, #8
 8005152:	2301      	movs	r3, #1
 8005154:	2112      	movs	r1, #18
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff fe77 	bl	8004e4a <lsm6dsl_read_reg>
 800515c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10f      	bne.n	8005184 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	b2da      	uxtb	r2, r3
 800516c:	7a3b      	ldrb	r3, [r7, #8]
 800516e:	f362 0382 	bfi	r3, r2, #2, #1
 8005172:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005174:	f107 0208 	add.w	r2, r7, #8
 8005178:	2301      	movs	r3, #1
 800517a:	2112      	movs	r1, #18
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff fe7c 	bl	8004e7a <lsm6dsl_write_reg>
 8005182:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	460b      	mov	r3, r1
 8005198:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800519a:	f107 0208 	add.w	r2, r7, #8
 800519e:	2301      	movs	r3, #1
 80051a0:	210a      	movs	r1, #10
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7ff fe51 	bl	8004e4a <lsm6dsl_read_reg>
 80051a8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	7a3b      	ldrb	r3, [r7, #8]
 80051ba:	f362 0302 	bfi	r3, r2, #0, #3
 80051be:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80051c0:	f107 0208 	add.w	r2, r7, #8
 80051c4:	2301      	movs	r3, #1
 80051c6:	210a      	movs	r1, #10
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fe56 	bl	8004e7a <lsm6dsl_write_reg>
 80051ce:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
	...

080051dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <HAL_Init+0x3c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <HAL_Init+0x3c>)
 80051ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051f2:	2003      	movs	r0, #3
 80051f4:	f001 f930 	bl	8006458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051f8:	200f      	movs	r0, #15
 80051fa:	f000 f80f 	bl	800521c <HAL_InitTick>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	71fb      	strb	r3, [r7, #7]
 8005208:	e001      	b.n	800520e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800520a:	f7fc fec7 	bl	8001f9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800520e:	79fb      	ldrb	r3, [r7, #7]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40022000 	.word	0x40022000

0800521c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005228:	4b17      	ldr	r3, [pc, #92]	; (8005288 <HAL_InitTick+0x6c>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d023      	beq.n	8005278 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005230:	4b16      	ldr	r3, [pc, #88]	; (800528c <HAL_InitTick+0x70>)
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b14      	ldr	r3, [pc, #80]	; (8005288 <HAL_InitTick+0x6c>)
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800523e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	4618      	mov	r0, r3
 8005248:	f001 f93b 	bl	80064c2 <HAL_SYSTICK_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10f      	bne.n	8005272 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b0f      	cmp	r3, #15
 8005256:	d809      	bhi.n	800526c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005258:	2200      	movs	r2, #0
 800525a:	6879      	ldr	r1, [r7, #4]
 800525c:	f04f 30ff 	mov.w	r0, #4294967295
 8005260:	f001 f905 	bl	800646e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <HAL_InitTick+0x74>)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e007      	b.n	800527c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e004      	b.n	800527c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e001      	b.n	800527c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	20000008 	.word	0x20000008
 800528c:	20000000 	.word	0x20000000
 8005290:	20000004 	.word	0x20000004

08005294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_IncTick+0x20>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	461a      	mov	r2, r3
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_IncTick+0x24>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4413      	add	r3, r2
 80052a4:	4a04      	ldr	r2, [pc, #16]	; (80052b8 <HAL_IncTick+0x24>)
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	20000008 	.word	0x20000008
 80052b8:	20000bb8 	.word	0x20000bb8

080052bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  return uwTick;
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <HAL_GetTick+0x14>)
 80052c2:	681b      	ldr	r3, [r3, #0]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000bb8 	.word	0x20000bb8

080052d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052dc:	f7ff ffee 	bl	80052bc <HAL_GetTick>
 80052e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d005      	beq.n	80052fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80052ee:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <HAL_Delay+0x44>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	4413      	add	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052fa:	bf00      	nop
 80052fc:	f7ff ffde 	bl	80052bc <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	429a      	cmp	r2, r3
 800530a:	d8f7      	bhi.n	80052fc <HAL_Delay+0x28>
  {
  }
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000008 	.word	0x20000008

0800531c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	431a      	orrs	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	609a      	str	r2, [r3, #8]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	609a      	str	r2, [r3, #8]
}
 800535c:	bf00      	nop
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3360      	adds	r3, #96	; 0x60
 8005396:	461a      	mov	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <LL_ADC_SetOffset+0x44>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	4313      	orrs	r3, r2
 80053b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	03fff000 	.word	0x03fff000

080053cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3360      	adds	r3, #96	; 0x60
 80053da:	461a      	mov	r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3714      	adds	r7, #20
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3360      	adds	r3, #96	; 0x60
 8005408:	461a      	mov	r2, r3
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	431a      	orrs	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800542e:	b480      	push	{r7}
 8005430:	b087      	sub	sp, #28
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3330      	adds	r3, #48	; 0x30
 800543e:	461a      	mov	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	0a1b      	lsrs	r3, r3, #8
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	f003 030c 	and.w	r3, r3, #12
 800544a:	4413      	add	r3, r2
 800544c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	211f      	movs	r1, #31
 800545a:	fa01 f303 	lsl.w	r3, r1, r3
 800545e:	43db      	mvns	r3, r3
 8005460:	401a      	ands	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	0e9b      	lsrs	r3, r3, #26
 8005466:	f003 011f 	and.w	r1, r3, #31
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f003 031f 	and.w	r3, r3, #31
 8005470:	fa01 f303 	lsl.w	r3, r1, r3
 8005474:	431a      	orrs	r2, r3
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005486:	b480      	push	{r7}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3314      	adds	r3, #20
 8005496:	461a      	mov	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	0e5b      	lsrs	r3, r3, #25
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	f003 0304 	and.w	r3, r3, #4
 80054a2:	4413      	add	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	0d1b      	lsrs	r3, r3, #20
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2107      	movs	r1, #7
 80054b4:	fa01 f303 	lsl.w	r3, r1, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	401a      	ands	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	0d1b      	lsrs	r3, r3, #20
 80054c0:	f003 031f 	and.w	r3, r3, #31
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ca:	431a      	orrs	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f4:	43db      	mvns	r3, r3
 80054f6:	401a      	ands	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f003 0318 	and.w	r3, r3, #24
 80054fe:	4908      	ldr	r1, [pc, #32]	; (8005520 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005500:	40d9      	lsrs	r1, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	400b      	ands	r3, r1
 8005506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800550a:	431a      	orrs	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	0007ffff 	.word	0x0007ffff

08005524 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6093      	str	r3, [r2, #8]
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555c:	d101      	bne.n	8005562 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ac:	d101      	bne.n	80055b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <LL_ADC_IsEnabled+0x18>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <LL_ADC_IsEnabled+0x1a>
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d101      	bne.n	80055fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e000      	b.n	8005600 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b08      	cmp	r3, #8
 800561e:	d101      	bne.n	8005624 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005620:	2301      	movs	r3, #1
 8005622:	e000      	b.n	8005626 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b089      	sub	sp, #36	; 0x24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005640:	2300      	movs	r3, #0
 8005642:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e136      	b.n	80058bc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fc fcc5 	bl	8001fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff67 	bl	8005548 <LL_ADC_IsDeepPowerDownEnabled>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ff4d 	bl	8005524 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff82 	bl	8005598 <LL_ADC_IsInternalRegulatorEnabled>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d115      	bne.n	80056c6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff ff66 	bl	8005570 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056a4:	4b87      	ldr	r3, [pc, #540]	; (80058c4 <HAL_ADC_Init+0x290>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	099b      	lsrs	r3, r3, #6
 80056aa:	4a87      	ldr	r2, [pc, #540]	; (80058c8 <HAL_ADC_Init+0x294>)
 80056ac:	fba2 2303 	umull	r2, r3, r2, r3
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	3301      	adds	r3, #1
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80056b8:	e002      	b.n	80056c0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3b01      	subs	r3, #1
 80056be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1f9      	bne.n	80056ba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff ff64 	bl	8005598 <LL_ADC_IsInternalRegulatorEnabled>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10d      	bne.n	80056f2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056da:	f043 0210 	orr.w	r2, r3, #16
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	f043 0201 	orr.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ff75 	bl	80055e6 <LL_ADC_REG_IsConversionOngoing>
 80056fc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b00      	cmp	r3, #0
 8005708:	f040 80cf 	bne.w	80058aa <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f040 80cb 	bne.w	80058aa <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800571c:	f043 0202 	orr.w	r2, r3, #2
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ff49 	bl	80055c0 <LL_ADC_IsEnabled>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d115      	bne.n	8005760 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005734:	4865      	ldr	r0, [pc, #404]	; (80058cc <HAL_ADC_Init+0x298>)
 8005736:	f7ff ff43 	bl	80055c0 <LL_ADC_IsEnabled>
 800573a:	4604      	mov	r4, r0
 800573c:	4864      	ldr	r0, [pc, #400]	; (80058d0 <HAL_ADC_Init+0x29c>)
 800573e:	f7ff ff3f 	bl	80055c0 <LL_ADC_IsEnabled>
 8005742:	4603      	mov	r3, r0
 8005744:	431c      	orrs	r4, r3
 8005746:	4863      	ldr	r0, [pc, #396]	; (80058d4 <HAL_ADC_Init+0x2a0>)
 8005748:	f7ff ff3a 	bl	80055c0 <LL_ADC_IsEnabled>
 800574c:	4603      	mov	r3, r0
 800574e:	4323      	orrs	r3, r4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	4619      	mov	r1, r3
 800575a:	485f      	ldr	r0, [pc, #380]	; (80058d8 <HAL_ADC_Init+0x2a4>)
 800575c:	f7ff fdde 	bl	800531c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	7e5b      	ldrb	r3, [r3, #25]
 8005764:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800576a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005770:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005776:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800577e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005780:	4313      	orrs	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d106      	bne.n	800579c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	3b01      	subs	r3, #1
 8005794:	045b      	lsls	r3, r3, #17
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4313      	orrs	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	4b47      	ldr	r3, [pc, #284]	; (80058dc <HAL_ADC_Init+0x2a8>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	69b9      	ldr	r1, [r7, #24]
 80057c8:	430b      	orrs	r3, r1
 80057ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ff08 	bl	80055e6 <LL_ADC_REG_IsConversionOngoing>
 80057d6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4618      	mov	r0, r3
 80057de:	f7ff ff15 	bl	800560c <LL_ADC_INJ_IsConversionOngoing>
 80057e2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d13d      	bne.n	8005866 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d13a      	bne.n	8005866 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057f4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057fc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80057fe:	4313      	orrs	r3, r2
 8005800:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580c:	f023 0302 	bic.w	r3, r3, #2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6812      	ldr	r2, [r2, #0]
 8005814:	69b9      	ldr	r1, [r7, #24]
 8005816:	430b      	orrs	r3, r1
 8005818:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005820:	2b01      	cmp	r3, #1
 8005822:	d118      	bne.n	8005856 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800582e:	f023 0304 	bic.w	r3, r3, #4
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800583a:	4311      	orrs	r1, r2
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005840:	4311      	orrs	r1, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005846:	430a      	orrs	r2, r1
 8005848:	431a      	orrs	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	611a      	str	r2, [r3, #16]
 8005854:	e007      	b.n	8005866 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 0201 	bic.w	r2, r2, #1
 8005864:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d10c      	bne.n	8005888 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	f023 010f 	bic.w	r1, r3, #15
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	69db      	ldr	r3, [r3, #28]
 800587c:	1e5a      	subs	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
 8005886:	e007      	b.n	8005898 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 020f 	bic.w	r2, r2, #15
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	f043 0201 	orr.w	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	655a      	str	r2, [r3, #84]	; 0x54
 80058a8:	e007      	b.n	80058ba <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	f043 0210 	orr.w	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80058ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3724      	adds	r7, #36	; 0x24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd90      	pop	{r4, r7, pc}
 80058c4:	20000000 	.word	0x20000000
 80058c8:	053e2d63 	.word	0x053e2d63
 80058cc:	50040000 	.word	0x50040000
 80058d0:	50040100 	.word	0x50040100
 80058d4:	50040200 	.word	0x50040200
 80058d8:	50040300 	.word	0x50040300
 80058dc:	fff0c007 	.word	0xfff0c007

080058e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b0b6      	sub	sp, #216	; 0xd8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_ADC_ConfigChannel+0x22>
 80058fe:	2302      	movs	r3, #2
 8005900:	e3c7      	b.n	8006092 <HAL_ADC_ConfigChannel+0x7b2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff fe69 	bl	80055e6 <LL_ADC_REG_IsConversionOngoing>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 83a8 	bne.w	800606c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b05      	cmp	r3, #5
 8005922:	d824      	bhi.n	800596e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	3b02      	subs	r3, #2
 800592a:	2b03      	cmp	r3, #3
 800592c:	d81b      	bhi.n	8005966 <HAL_ADC_ConfigChannel+0x86>
 800592e:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <HAL_ADC_ConfigChannel+0x54>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	08005945 	.word	0x08005945
 8005938:	0800594d 	.word	0x0800594d
 800593c:	08005955 	.word	0x08005955
 8005940:	0800595d 	.word	0x0800595d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	220c      	movs	r2, #12
 8005948:	605a      	str	r2, [r3, #4]
          break;
 800594a:	e011      	b.n	8005970 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2212      	movs	r2, #18
 8005950:	605a      	str	r2, [r3, #4]
          break;
 8005952:	e00d      	b.n	8005970 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2218      	movs	r2, #24
 8005958:	605a      	str	r2, [r3, #4]
          break;
 800595a:	e009      	b.n	8005970 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005962:	605a      	str	r2, [r3, #4]
          break;
 8005964:	e004      	b.n	8005970 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2206      	movs	r2, #6
 800596a:	605a      	str	r2, [r3, #4]
          break;
 800596c:	e000      	b.n	8005970 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800596e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6859      	ldr	r1, [r3, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	f7ff fd56 	bl	800542e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fe2d 	bl	80055e6 <LL_ADC_REG_IsConversionOngoing>
 800598c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fe39 	bl	800560c <LL_ADC_INJ_IsConversionOngoing>
 800599a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800599e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 81a6 	bne.w	8005cf4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80059a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 81a1 	bne.w	8005cf4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6818      	ldr	r0, [r3, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	6819      	ldr	r1, [r3, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	461a      	mov	r2, r3
 80059c0:	f7ff fd61 	bl	8005486 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695a      	ldr	r2, [r3, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	08db      	lsrs	r3, r3, #3
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d00a      	beq.n	80059fc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6919      	ldr	r1, [r3, #16]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059f6:	f7ff fcc5 	bl	8005384 <LL_ADC_SetOffset>
 80059fa:	e17b      	b.n	8005cf4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fce2 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x148>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2100      	movs	r1, #0
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fcd7 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	0e9b      	lsrs	r3, r3, #26
 8005a22:	f003 021f 	and.w	r2, r3, #31
 8005a26:	e01e      	b.n	8005a66 <HAL_ADC_ConfigChannel+0x186>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff fccc 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a3e:	fa93 f3a3 	rbit	r3, r3
 8005a42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005a56:	2320      	movs	r3, #32
 8005a58:	e004      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005a5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a5e:	fab3 f383 	clz	r3, r3
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d105      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0x19e>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	0e9b      	lsrs	r3, r3, #26
 8005a78:	f003 031f 	and.w	r3, r3, #31
 8005a7c:	e018      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x1d0>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005a8a:	fa93 f3a3 	rbit	r3, r3
 8005a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005a92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005a9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005aa2:	2320      	movs	r3, #32
 8005aa4:	e004      	b.n	8005ab0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005aa6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005aaa:	fab3 f383 	clz	r3, r3
 8005aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d106      	bne.n	8005ac2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2100      	movs	r1, #0
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff fc9b 	bl	80053f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff fc7f 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <HAL_ADC_ConfigChannel+0x20e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2101      	movs	r1, #1
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fc74 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	0e9b      	lsrs	r3, r3, #26
 8005ae8:	f003 021f 	and.w	r2, r3, #31
 8005aec:	e01e      	b.n	8005b2c <HAL_ADC_ConfigChannel+0x24c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2101      	movs	r1, #1
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff fc69 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005b14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	e004      	b.n	8005b2a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005b20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b24:	fab3 f383 	clz	r3, r3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d105      	bne.n	8005b44 <HAL_ADC_ConfigChannel+0x264>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	0e9b      	lsrs	r3, r3, #26
 8005b3e:	f003 031f 	and.w	r3, r3, #31
 8005b42:	e018      	b.n	8005b76 <HAL_ADC_ConfigChannel+0x296>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b50:	fa93 f3a3 	rbit	r3, r3
 8005b54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005b68:	2320      	movs	r3, #32
 8005b6a:	e004      	b.n	8005b76 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b70:	fab3 f383 	clz	r3, r3
 8005b74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d106      	bne.n	8005b88 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	2101      	movs	r1, #1
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7ff fc38 	bl	80053f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2102      	movs	r1, #2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f7ff fc1c 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10a      	bne.n	8005bb4 <HAL_ADC_ConfigChannel+0x2d4>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fc11 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005baa:	4603      	mov	r3, r0
 8005bac:	0e9b      	lsrs	r3, r3, #26
 8005bae:	f003 021f 	and.w	r2, r3, #31
 8005bb2:	e01e      	b.n	8005bf2 <HAL_ADC_ConfigChannel+0x312>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2102      	movs	r1, #2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fc06 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bca:	fa93 f3a3 	rbit	r3, r3
 8005bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8005be2:	2320      	movs	r3, #32
 8005be4:	e004      	b.n	8005bf0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bea:	fab3 f383 	clz	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_ADC_ConfigChannel+0x32a>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	0e9b      	lsrs	r3, r3, #26
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	e016      	b.n	8005c38 <HAL_ADC_ConfigChannel+0x358>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c16:	fa93 f3a3 	rbit	r3, r3
 8005c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005c1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005c2a:	2320      	movs	r3, #32
 8005c2c:	e004      	b.n	8005c38 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c32:	fab3 f383 	clz	r3, r3
 8005c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d106      	bne.n	8005c4a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2200      	movs	r2, #0
 8005c42:	2102      	movs	r1, #2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fbd7 	bl	80053f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2103      	movs	r1, #3
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fbbb 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005c56:	4603      	mov	r3, r0
 8005c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10a      	bne.n	8005c76 <HAL_ADC_ConfigChannel+0x396>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2103      	movs	r1, #3
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff fbb0 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	0e9b      	lsrs	r3, r3, #26
 8005c70:	f003 021f 	and.w	r2, r3, #31
 8005c74:	e017      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0x3c6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2103      	movs	r1, #3
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff fba5 	bl	80053cc <LL_ADC_GetOffsetChannel>
 8005c82:	4603      	mov	r3, r0
 8005c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c88:	fa93 f3a3 	rbit	r3, r3
 8005c8c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c90:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005c98:	2320      	movs	r3, #32
 8005c9a:	e003      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c9e:	fab3 f383 	clz	r3, r3
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <HAL_ADC_ConfigChannel+0x3de>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	0e9b      	lsrs	r3, r3, #26
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	e011      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x402>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cc6:	fa93 f3a3 	rbit	r3, r3
 8005cca:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8005cd6:	2320      	movs	r3, #32
 8005cd8:	e003      	b.n	8005ce2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cdc:	fab3 f383 	clz	r3, r3
 8005ce0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d106      	bne.n	8005cf4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	2103      	movs	r1, #3
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fb82 	bl	80053f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fc61 	bl	80055c0 <LL_ADC_IsEnabled>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f040 813f 	bne.w	8005f84 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6819      	ldr	r1, [r3, #0]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f7ff fbe2 	bl	80054dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4a8e      	ldr	r2, [pc, #568]	; (8005f58 <HAL_ADC_ConfigChannel+0x678>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	f040 8130 	bne.w	8005f84 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10b      	bne.n	8005d4c <HAL_ADC_ConfigChannel+0x46c>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	0e9b      	lsrs	r3, r3, #26
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f003 031f 	and.w	r3, r3, #31
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	bf94      	ite	ls
 8005d44:	2301      	movls	r3, #1
 8005d46:	2300      	movhi	r3, #0
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	e019      	b.n	8005d80 <HAL_ADC_ConfigChannel+0x4a0>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d54:	fa93 f3a3 	rbit	r3, r3
 8005d58:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d5c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005d64:	2320      	movs	r3, #32
 8005d66:	e003      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d6a:	fab3 f383 	clz	r3, r3
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	3301      	adds	r3, #1
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	bf94      	ite	ls
 8005d7a:	2301      	movls	r3, #1
 8005d7c:	2300      	movhi	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d079      	beq.n	8005e78 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d107      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0x4c0>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	0e9b      	lsrs	r3, r3, #26
 8005d96:	3301      	adds	r3, #1
 8005d98:	069b      	lsls	r3, r3, #26
 8005d9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d9e:	e015      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x4ec>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da8:	fa93 f3a3 	rbit	r3, r3
 8005dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005db0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005db8:	2320      	movs	r3, #32
 8005dba:	e003      	b.n	8005dc4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dbe:	fab3 f383 	clz	r3, r3
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	069b      	lsls	r3, r3, #26
 8005dc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d109      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x50c>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	0e9b      	lsrs	r3, r3, #26
 8005dde:	3301      	adds	r3, #1
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	2101      	movs	r1, #1
 8005de6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dea:	e017      	b.n	8005e1c <HAL_ADC_ConfigChannel+0x53c>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df4:	fa93 f3a3 	rbit	r3, r3
 8005df8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dfc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8005dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005e04:	2320      	movs	r3, #32
 8005e06:	e003      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	fab3 f383 	clz	r3, r3
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	3301      	adds	r3, #1
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2101      	movs	r1, #1
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	ea42 0103 	orr.w	r1, r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10a      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x562>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	0e9b      	lsrs	r3, r3, #26
 8005e32:	3301      	adds	r3, #1
 8005e34:	f003 021f 	and.w	r2, r3, #31
 8005e38:	4613      	mov	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	051b      	lsls	r3, r3, #20
 8005e40:	e018      	b.n	8005e74 <HAL_ADC_ConfigChannel+0x594>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e4a:	fa93 f3a3 	rbit	r3, r3
 8005e4e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005e5a:	2320      	movs	r3, #32
 8005e5c:	e003      	b.n	8005e66 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e60:	fab3 f383 	clz	r3, r3
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	3301      	adds	r3, #1
 8005e68:	f003 021f 	and.w	r2, r3, #31
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e74:	430b      	orrs	r3, r1
 8005e76:	e080      	b.n	8005f7a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d107      	bne.n	8005e94 <HAL_ADC_ConfigChannel+0x5b4>
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0e9b      	lsrs	r3, r3, #26
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	069b      	lsls	r3, r3, #26
 8005e8e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e92:	e015      	b.n	8005ec0 <HAL_ADC_ConfigChannel+0x5e0>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9c:	fa93 f3a3 	rbit	r3, r3
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005eac:	2320      	movs	r3, #32
 8005eae:	e003      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	fab3 f383 	clz	r3, r3
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	3301      	adds	r3, #1
 8005eba:	069b      	lsls	r3, r3, #26
 8005ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d109      	bne.n	8005ee0 <HAL_ADC_ConfigChannel+0x600>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	0e9b      	lsrs	r3, r3, #26
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f003 031f 	and.w	r3, r3, #31
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	e017      	b.n	8005f10 <HAL_ADC_ConfigChannel+0x630>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	fa93 f3a3 	rbit	r3, r3
 8005eec:	61fb      	str	r3, [r7, #28]
  return result;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005ef8:	2320      	movs	r3, #32
 8005efa:	e003      	b.n	8005f04 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	3301      	adds	r3, #1
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	ea42 0103 	orr.w	r1, r2, r3
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10d      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0x65c>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	0e9b      	lsrs	r3, r3, #26
 8005f26:	3301      	adds	r3, #1
 8005f28:	f003 021f 	and.w	r2, r3, #31
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	4413      	add	r3, r2
 8005f32:	3b1e      	subs	r3, #30
 8005f34:	051b      	lsls	r3, r3, #20
 8005f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f3a:	e01d      	b.n	8005f78 <HAL_ADC_ConfigChannel+0x698>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	fa93 f3a3 	rbit	r3, r3
 8005f48:	613b      	str	r3, [r7, #16]
  return result;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005f54:	2320      	movs	r3, #32
 8005f56:	e005      	b.n	8005f64 <HAL_ADC_ConfigChannel+0x684>
 8005f58:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	fab3 f383 	clz	r3, r3
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	3301      	adds	r3, #1
 8005f66:	f003 021f 	and.w	r2, r3, #31
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	4413      	add	r3, r2
 8005f70:	3b1e      	subs	r3, #30
 8005f72:	051b      	lsls	r3, r3, #20
 8005f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f78:	430b      	orrs	r3, r1
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	6892      	ldr	r2, [r2, #8]
 8005f7e:	4619      	mov	r1, r3
 8005f80:	f7ff fa81 	bl	8005486 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	4b44      	ldr	r3, [pc, #272]	; (800609c <HAL_ADC_ConfigChannel+0x7bc>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d07a      	beq.n	8006086 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f90:	4843      	ldr	r0, [pc, #268]	; (80060a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005f92:	f7ff f9e9 	bl	8005368 <LL_ADC_GetCommonPathInternalCh>
 8005f96:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a41      	ldr	r2, [pc, #260]	; (80060a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d12c      	bne.n	8005ffe <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005fa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d126      	bne.n	8005ffe <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d004      	beq.n	8005fc4 <HAL_ADC_ConfigChannel+0x6e4>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a3b      	ldr	r2, [pc, #236]	; (80060ac <HAL_ADC_ConfigChannel+0x7cc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d15d      	bne.n	8006080 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4834      	ldr	r0, [pc, #208]	; (80060a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8005fd0:	f7ff f9b7 	bl	8005342 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	099b      	lsrs	r3, r3, #6
 8005fda:	4a36      	ldr	r2, [pc, #216]	; (80060b4 <HAL_ADC_ConfigChannel+0x7d4>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	099b      	lsrs	r3, r3, #6
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005fee:	e002      	b.n	8005ff6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f9      	bne.n	8005ff0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ffc:	e040      	b.n	8006080 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a2d      	ldr	r2, [pc, #180]	; (80060b8 <HAL_ADC_ConfigChannel+0x7d8>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d118      	bne.n	800603a <HAL_ADC_ConfigChannel+0x75a>
 8006008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800600c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d112      	bne.n	800603a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <HAL_ADC_ConfigChannel+0x7c8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d004      	beq.n	8006028 <HAL_ADC_ConfigChannel+0x748>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a22      	ldr	r2, [pc, #136]	; (80060ac <HAL_ADC_ConfigChannel+0x7cc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d12d      	bne.n	8006084 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800602c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006030:	4619      	mov	r1, r3
 8006032:	481b      	ldr	r0, [pc, #108]	; (80060a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8006034:	f7ff f985 	bl	8005342 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006038:	e024      	b.n	8006084 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <HAL_ADC_ConfigChannel+0x7dc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d120      	bne.n	8006086 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d11a      	bne.n	8006086 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <HAL_ADC_ConfigChannel+0x7c8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d115      	bne.n	8006086 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800605a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800605e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006062:	4619      	mov	r1, r3
 8006064:	480e      	ldr	r0, [pc, #56]	; (80060a0 <HAL_ADC_ConfigChannel+0x7c0>)
 8006066:	f7ff f96c 	bl	8005342 <LL_ADC_SetCommonPathInternalCh>
 800606a:	e00c      	b.n	8006086 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800607e:	e002      	b.n	8006086 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006080:	bf00      	nop
 8006082:	e000      	b.n	8006086 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006084:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800608e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006092:	4618      	mov	r0, r3
 8006094:	37d8      	adds	r7, #216	; 0xd8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	80080000 	.word	0x80080000
 80060a0:	50040300 	.word	0x50040300
 80060a4:	c7520000 	.word	0xc7520000
 80060a8:	50040000 	.word	0x50040000
 80060ac:	50040200 	.word	0x50040200
 80060b0:	20000000 	.word	0x20000000
 80060b4:	053e2d63 	.word	0x053e2d63
 80060b8:	cb840000 	.word	0xcb840000
 80060bc:	80000001 	.word	0x80000001

080060c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e0ed      	b.n	80062ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fb ffee 	bl	80020c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80060f4:	f7ff f8e2 	bl	80052bc <HAL_GetTick>
 80060f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80060fa:	e012      	b.n	8006122 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80060fc:	f7ff f8de 	bl	80052bc <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b0a      	cmp	r3, #10
 8006108:	d90b      	bls.n	8006122 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2205      	movs	r2, #5
 800611a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e0c5      	b.n	80062ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0e5      	beq.n	80060fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0202 	bic.w	r2, r2, #2
 800613e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006140:	f7ff f8bc 	bl	80052bc <HAL_GetTick>
 8006144:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006146:	e012      	b.n	800616e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006148:	f7ff f8b8 	bl	80052bc <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b0a      	cmp	r3, #10
 8006154:	d90b      	bls.n	800616e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2205      	movs	r2, #5
 8006166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e09f      	b.n	80062ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e5      	bne.n	8006148 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	7e1b      	ldrb	r3, [r3, #24]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d108      	bne.n	8006196 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e007      	b.n	80061a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	7e5b      	ldrb	r3, [r3, #25]
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d108      	bne.n	80061c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e007      	b.n	80061d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	7e9b      	ldrb	r3, [r3, #26]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d108      	bne.n	80061ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0220 	orr.w	r2, r2, #32
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	e007      	b.n	80061fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0220 	bic.w	r2, r2, #32
 80061f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7edb      	ldrb	r3, [r3, #27]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d108      	bne.n	8006214 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0210 	bic.w	r2, r2, #16
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e007      	b.n	8006224 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0210 	orr.w	r2, r2, #16
 8006222:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	7f1b      	ldrb	r3, [r3, #28]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d108      	bne.n	800623e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0208 	orr.w	r2, r2, #8
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	e007      	b.n	800624e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0208 	bic.w	r2, r2, #8
 800624c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	7f5b      	ldrb	r3, [r3, #29]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d108      	bne.n	8006268 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0204 	orr.w	r2, r2, #4
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e007      	b.n	8006278 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0204 	bic.w	r2, r2, #4
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	431a      	orrs	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	ea42 0103 	orr.w	r1, r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	1e5a      	subs	r2, r3, #1
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
	...

080062b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062c8:	4b0c      	ldr	r3, [pc, #48]	; (80062fc <__NVIC_SetPriorityGrouping+0x44>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062d4:	4013      	ands	r3, r2
 80062d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062ea:	4a04      	ldr	r2, [pc, #16]	; (80062fc <__NVIC_SetPriorityGrouping+0x44>)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	60d3      	str	r3, [r2, #12]
}
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	e000ed00 	.word	0xe000ed00

08006300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006304:	4b04      	ldr	r3, [pc, #16]	; (8006318 <__NVIC_GetPriorityGrouping+0x18>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	f003 0307 	and.w	r3, r3, #7
}
 800630e:	4618      	mov	r0, r3
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	e000ed00 	.word	0xe000ed00

0800631c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800632a:	2b00      	cmp	r3, #0
 800632c:	db0b      	blt.n	8006346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	f003 021f 	and.w	r2, r3, #31
 8006334:	4907      	ldr	r1, [pc, #28]	; (8006354 <__NVIC_EnableIRQ+0x38>)
 8006336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	2001      	movs	r0, #1
 800633e:	fa00 f202 	lsl.w	r2, r0, r2
 8006342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	e000e100 	.word	0xe000e100

08006358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	4603      	mov	r3, r0
 8006360:	6039      	str	r1, [r7, #0]
 8006362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006368:	2b00      	cmp	r3, #0
 800636a:	db0a      	blt.n	8006382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	490c      	ldr	r1, [pc, #48]	; (80063a4 <__NVIC_SetPriority+0x4c>)
 8006372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006376:	0112      	lsls	r2, r2, #4
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	440b      	add	r3, r1
 800637c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006380:	e00a      	b.n	8006398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	4908      	ldr	r1, [pc, #32]	; (80063a8 <__NVIC_SetPriority+0x50>)
 8006388:	79fb      	ldrb	r3, [r7, #7]
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	3b04      	subs	r3, #4
 8006390:	0112      	lsls	r2, r2, #4
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	440b      	add	r3, r1
 8006396:	761a      	strb	r2, [r3, #24]
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	e000e100 	.word	0xe000e100
 80063a8:	e000ed00 	.word	0xe000ed00

080063ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b089      	sub	sp, #36	; 0x24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	f1c3 0307 	rsb	r3, r3, #7
 80063c6:	2b04      	cmp	r3, #4
 80063c8:	bf28      	it	cs
 80063ca:	2304      	movcs	r3, #4
 80063cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	3304      	adds	r3, #4
 80063d2:	2b06      	cmp	r3, #6
 80063d4:	d902      	bls.n	80063dc <NVIC_EncodePriority+0x30>
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	3b03      	subs	r3, #3
 80063da:	e000      	b.n	80063de <NVIC_EncodePriority+0x32>
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063e0:	f04f 32ff 	mov.w	r2, #4294967295
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	43da      	mvns	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	401a      	ands	r2, r3
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063f4:	f04f 31ff 	mov.w	r1, #4294967295
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	fa01 f303 	lsl.w	r3, r1, r3
 80063fe:	43d9      	mvns	r1, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006404:	4313      	orrs	r3, r2
         );
}
 8006406:	4618      	mov	r0, r3
 8006408:	3724      	adds	r7, #36	; 0x24
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3b01      	subs	r3, #1
 8006420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006424:	d301      	bcc.n	800642a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006426:	2301      	movs	r3, #1
 8006428:	e00f      	b.n	800644a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800642a:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <SysTick_Config+0x40>)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	3b01      	subs	r3, #1
 8006430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006432:	210f      	movs	r1, #15
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	f7ff ff8e 	bl	8006358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800643c:	4b05      	ldr	r3, [pc, #20]	; (8006454 <SysTick_Config+0x40>)
 800643e:	2200      	movs	r2, #0
 8006440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <SysTick_Config+0x40>)
 8006444:	2207      	movs	r2, #7
 8006446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	e000e010 	.word	0xe000e010

08006458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff ff29 	bl	80062b8 <__NVIC_SetPriorityGrouping>
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b086      	sub	sp, #24
 8006472:	af00      	add	r7, sp, #0
 8006474:	4603      	mov	r3, r0
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800647c:	2300      	movs	r3, #0
 800647e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006480:	f7ff ff3e 	bl	8006300 <__NVIC_GetPriorityGrouping>
 8006484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	6978      	ldr	r0, [r7, #20]
 800648c:	f7ff ff8e 	bl	80063ac <NVIC_EncodePriority>
 8006490:	4602      	mov	r2, r0
 8006492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006496:	4611      	mov	r1, r2
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff ff5d 	bl	8006358 <__NVIC_SetPriority>
}
 800649e:	bf00      	nop
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	4603      	mov	r3, r0
 80064ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ff31 	bl	800631c <__NVIC_EnableIRQ>
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7ff ffa2 	bl	8006414 <SysTick_Config>
 80064d0:	4603      	mov	r3, r0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d008      	beq.n	8006504 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2204      	movs	r2, #4
 80064f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e022      	b.n	800654a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 020e 	bic.w	r2, r2, #14
 8006512:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0201 	bic.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006528:	f003 021c 	and.w	r2, r3, #28
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	2101      	movs	r1, #1
 8006532:	fa01 f202 	lsl.w	r2, r1, r2
 8006536:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d005      	beq.n	800657a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	e029      	b.n	80065ce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f022 020e 	bic.w	r2, r2, #14
 8006588:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659e:	f003 021c 	and.w	r2, r3, #28
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2101      	movs	r1, #1
 80065a8:	fa01 f202 	lsl.w	r2, r1, r2
 80065ac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2201      	movs	r2, #1
 80065b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
    }
  }
  return status;
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065e6:	e17f      	b.n	80068e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	2101      	movs	r1, #1
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	fa01 f303 	lsl.w	r3, r1, r3
 80065f4:	4013      	ands	r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8171 	beq.w	80068e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	2b01      	cmp	r3, #1
 800660a:	d005      	beq.n	8006618 <HAL_GPIO_Init+0x40>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f003 0303 	and.w	r3, r3, #3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d130      	bne.n	800667a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	2203      	movs	r2, #3
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4013      	ands	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800664e:	2201      	movs	r2, #1
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43db      	mvns	r3, r3
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	4013      	ands	r3, r2
 800665c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	091b      	lsrs	r3, r3, #4
 8006664:	f003 0201 	and.w	r2, r3, #1
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 0303 	and.w	r3, r3, #3
 8006682:	2b03      	cmp	r3, #3
 8006684:	d118      	bne.n	80066b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800668c:	2201      	movs	r2, #1
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	43db      	mvns	r3, r3
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4013      	ands	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	08db      	lsrs	r3, r3, #3
 80066a2:	f003 0201 	and.w	r2, r3, #1
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d017      	beq.n	80066f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	2203      	movs	r2, #3
 80066d0:	fa02 f303 	lsl.w	r3, r2, r3
 80066d4:	43db      	mvns	r3, r3
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	4013      	ands	r3, r2
 80066da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f003 0303 	and.w	r3, r3, #3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d123      	bne.n	8006748 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	08da      	lsrs	r2, r3, #3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3208      	adds	r2, #8
 8006708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800670c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	220f      	movs	r2, #15
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	43db      	mvns	r3, r3
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4013      	ands	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	08da      	lsrs	r2, r3, #3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3208      	adds	r2, #8
 8006742:	6939      	ldr	r1, [r7, #16]
 8006744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	2203      	movs	r2, #3
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	43db      	mvns	r3, r3
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	4013      	ands	r3, r2
 800675e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f003 0203 	and.w	r2, r3, #3
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	fa02 f303 	lsl.w	r3, r2, r3
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80ac 	beq.w	80068e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800678a:	4b5f      	ldr	r3, [pc, #380]	; (8006908 <HAL_GPIO_Init+0x330>)
 800678c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678e:	4a5e      	ldr	r2, [pc, #376]	; (8006908 <HAL_GPIO_Init+0x330>)
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	6613      	str	r3, [r2, #96]	; 0x60
 8006796:	4b5c      	ldr	r3, [pc, #368]	; (8006908 <HAL_GPIO_Init+0x330>)
 8006798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	60bb      	str	r3, [r7, #8]
 80067a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80067a2:	4a5a      	ldr	r2, [pc, #360]	; (800690c <HAL_GPIO_Init+0x334>)
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	089b      	lsrs	r3, r3, #2
 80067a8:	3302      	adds	r3, #2
 80067aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	220f      	movs	r2, #15
 80067ba:	fa02 f303 	lsl.w	r3, r2, r3
 80067be:	43db      	mvns	r3, r3
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4013      	ands	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80067cc:	d025      	beq.n	800681a <HAL_GPIO_Init+0x242>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a4f      	ldr	r2, [pc, #316]	; (8006910 <HAL_GPIO_Init+0x338>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01f      	beq.n	8006816 <HAL_GPIO_Init+0x23e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a4e      	ldr	r2, [pc, #312]	; (8006914 <HAL_GPIO_Init+0x33c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d019      	beq.n	8006812 <HAL_GPIO_Init+0x23a>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a4d      	ldr	r2, [pc, #308]	; (8006918 <HAL_GPIO_Init+0x340>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <HAL_GPIO_Init+0x236>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a4c      	ldr	r2, [pc, #304]	; (800691c <HAL_GPIO_Init+0x344>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00d      	beq.n	800680a <HAL_GPIO_Init+0x232>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a4b      	ldr	r2, [pc, #300]	; (8006920 <HAL_GPIO_Init+0x348>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d007      	beq.n	8006806 <HAL_GPIO_Init+0x22e>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a4a      	ldr	r2, [pc, #296]	; (8006924 <HAL_GPIO_Init+0x34c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d101      	bne.n	8006802 <HAL_GPIO_Init+0x22a>
 80067fe:	2306      	movs	r3, #6
 8006800:	e00c      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006802:	2307      	movs	r3, #7
 8006804:	e00a      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006806:	2305      	movs	r3, #5
 8006808:	e008      	b.n	800681c <HAL_GPIO_Init+0x244>
 800680a:	2304      	movs	r3, #4
 800680c:	e006      	b.n	800681c <HAL_GPIO_Init+0x244>
 800680e:	2303      	movs	r3, #3
 8006810:	e004      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006812:	2302      	movs	r3, #2
 8006814:	e002      	b.n	800681c <HAL_GPIO_Init+0x244>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <HAL_GPIO_Init+0x244>
 800681a:	2300      	movs	r3, #0
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	f002 0203 	and.w	r2, r2, #3
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	4093      	lsls	r3, r2
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800682c:	4937      	ldr	r1, [pc, #220]	; (800690c <HAL_GPIO_Init+0x334>)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	3302      	adds	r3, #2
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800683a:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <HAL_GPIO_Init+0x350>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	43db      	mvns	r3, r3
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4013      	ands	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800685e:	4a32      	ldr	r2, [pc, #200]	; (8006928 <HAL_GPIO_Init+0x350>)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006864:	4b30      	ldr	r3, [pc, #192]	; (8006928 <HAL_GPIO_Init+0x350>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	43db      	mvns	r3, r3
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4013      	ands	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006888:	4a27      	ldr	r2, [pc, #156]	; (8006928 <HAL_GPIO_Init+0x350>)
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800688e:	4b26      	ldr	r3, [pc, #152]	; (8006928 <HAL_GPIO_Init+0x350>)
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	43db      	mvns	r3, r3
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4013      	ands	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068b2:	4a1d      	ldr	r2, [pc, #116]	; (8006928 <HAL_GPIO_Init+0x350>)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80068b8:	4b1b      	ldr	r3, [pc, #108]	; (8006928 <HAL_GPIO_Init+0x350>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	4013      	ands	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80068dc:	4a12      	ldr	r2, [pc, #72]	; (8006928 <HAL_GPIO_Init+0x350>)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	3301      	adds	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	fa22 f303 	lsr.w	r3, r2, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f47f ae78 	bne.w	80065e8 <HAL_GPIO_Init+0x10>
  }
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40021000 	.word	0x40021000
 800690c:	40010000 	.word	0x40010000
 8006910:	48000400 	.word	0x48000400
 8006914:	48000800 	.word	0x48000800
 8006918:	48000c00 	.word	0x48000c00
 800691c:	48001000 	.word	0x48001000
 8006920:	48001400 	.word	0x48001400
 8006924:	48001800 	.word	0x48001800
 8006928:	40010400 	.word	0x40010400

0800692c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006936:	2300      	movs	r3, #0
 8006938:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800693a:	e0cd      	b.n	8006ad8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800693c:	2201      	movs	r2, #1
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	fa02 f303 	lsl.w	r3, r2, r3
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	4013      	ands	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80c0 	beq.w	8006ad2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006952:	4a68      	ldr	r2, [pc, #416]	; (8006af4 <HAL_GPIO_DeInit+0x1c8>)
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	3302      	adds	r3, #2
 800695a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	220f      	movs	r2, #15
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4013      	ands	r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800697a:	d025      	beq.n	80069c8 <HAL_GPIO_DeInit+0x9c>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a5e      	ldr	r2, [pc, #376]	; (8006af8 <HAL_GPIO_DeInit+0x1cc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d01f      	beq.n	80069c4 <HAL_GPIO_DeInit+0x98>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a5d      	ldr	r2, [pc, #372]	; (8006afc <HAL_GPIO_DeInit+0x1d0>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d019      	beq.n	80069c0 <HAL_GPIO_DeInit+0x94>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a5c      	ldr	r2, [pc, #368]	; (8006b00 <HAL_GPIO_DeInit+0x1d4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <HAL_GPIO_DeInit+0x90>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a5b      	ldr	r2, [pc, #364]	; (8006b04 <HAL_GPIO_DeInit+0x1d8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00d      	beq.n	80069b8 <HAL_GPIO_DeInit+0x8c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a5a      	ldr	r2, [pc, #360]	; (8006b08 <HAL_GPIO_DeInit+0x1dc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d007      	beq.n	80069b4 <HAL_GPIO_DeInit+0x88>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a59      	ldr	r2, [pc, #356]	; (8006b0c <HAL_GPIO_DeInit+0x1e0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d101      	bne.n	80069b0 <HAL_GPIO_DeInit+0x84>
 80069ac:	2306      	movs	r3, #6
 80069ae:	e00c      	b.n	80069ca <HAL_GPIO_DeInit+0x9e>
 80069b0:	2307      	movs	r3, #7
 80069b2:	e00a      	b.n	80069ca <HAL_GPIO_DeInit+0x9e>
 80069b4:	2305      	movs	r3, #5
 80069b6:	e008      	b.n	80069ca <HAL_GPIO_DeInit+0x9e>
 80069b8:	2304      	movs	r3, #4
 80069ba:	e006      	b.n	80069ca <HAL_GPIO_DeInit+0x9e>
 80069bc:	2303      	movs	r3, #3
 80069be:	e004      	b.n	80069ca <HAL_GPIO_DeInit+0x9e>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e002      	b.n	80069ca <HAL_GPIO_DeInit+0x9e>
 80069c4:	2301      	movs	r3, #1
 80069c6:	e000      	b.n	80069ca <HAL_GPIO_DeInit+0x9e>
 80069c8:	2300      	movs	r3, #0
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	f002 0203 	and.w	r2, r2, #3
 80069d0:	0092      	lsls	r2, r2, #2
 80069d2:	4093      	lsls	r3, r2
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d132      	bne.n	8006a40 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80069da:	4b4d      	ldr	r3, [pc, #308]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	494b      	ldr	r1, [pc, #300]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80069e8:	4b49      	ldr	r3, [pc, #292]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	43db      	mvns	r3, r3
 80069f0:	4947      	ldr	r1, [pc, #284]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80069f6:	4b46      	ldr	r3, [pc, #280]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 80069f8:	68da      	ldr	r2, [r3, #12]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	43db      	mvns	r3, r3
 80069fe:	4944      	ldr	r1, [pc, #272]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006a04:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	43db      	mvns	r3, r3
 8006a0c:	4940      	ldr	r1, [pc, #256]	; (8006b10 <HAL_GPIO_DeInit+0x1e4>)
 8006a0e:	4013      	ands	r3, r2
 8006a10:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	220f      	movs	r2, #15
 8006a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a20:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006a22:	4a34      	ldr	r2, [pc, #208]	; (8006af4 <HAL_GPIO_DeInit+0x1c8>)
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	089b      	lsrs	r3, r3, #2
 8006a28:	3302      	adds	r3, #2
 8006a2a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	43da      	mvns	r2, r3
 8006a32:	4830      	ldr	r0, [pc, #192]	; (8006af4 <HAL_GPIO_DeInit+0x1c8>)
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	089b      	lsrs	r3, r3, #2
 8006a38:	400a      	ands	r2, r1
 8006a3a:	3302      	adds	r3, #2
 8006a3c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	2103      	movs	r1, #3
 8006a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	08da      	lsrs	r2, r3, #3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3208      	adds	r2, #8
 8006a5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	220f      	movs	r2, #15
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	08d2      	lsrs	r2, r2, #3
 8006a74:	4019      	ands	r1, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3208      	adds	r2, #8
 8006a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689a      	ldr	r2, [r3, #8]
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	2103      	movs	r1, #3
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	401a      	ands	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	2101      	movs	r1, #1
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	43db      	mvns	r3, r3
 8006aa2:	401a      	ands	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	2103      	movs	r1, #3
 8006ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	401a      	ands	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8006aca:	43db      	mvns	r3, r3
 8006acc:	401a      	ands	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f af2b 	bne.w	800693c <HAL_GPIO_DeInit+0x10>
  }
}
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	40010000 	.word	0x40010000
 8006af8:	48000400 	.word	0x48000400
 8006afc:	48000800 	.word	0x48000800
 8006b00:	48000c00 	.word	0x48000c00
 8006b04:	48001000 	.word	0x48001000
 8006b08:	48001400 	.word	0x48001400
 8006b0c:	48001800 	.word	0x48001800
 8006b10:	40010400 	.word	0x40010400

08006b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
 8006b20:	4613      	mov	r3, r2
 8006b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b24:	787b      	ldrb	r3, [r7, #1]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b2a:	887a      	ldrh	r2, [r7, #2]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b30:	e002      	b.n	8006b38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e081      	b.n	8006c5a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fb faec 	bl	8002148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	; 0x24
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ba4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d107      	bne.n	8006bbe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	e006      	b.n	8006bcc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d104      	bne.n	8006bde <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bdc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	6812      	ldr	r2, [r2, #0]
 8006be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69d9      	ldr	r1, [r3, #28]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1a      	ldr	r2, [r3, #32]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b082      	sub	sp, #8
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e021      	b.n	8006cb8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2224      	movs	r2, #36	; 0x24
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fb fab9 	bl	8002204 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b088      	sub	sp, #32
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	4608      	mov	r0, r1
 8006cca:	4611      	mov	r1, r2
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	817b      	strh	r3, [r7, #10]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	813b      	strh	r3, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	2b20      	cmp	r3, #32
 8006ce4:	f040 80f9 	bne.w	8006eda <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ce8:	6a3b      	ldr	r3, [r7, #32]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_I2C_Mem_Write+0x34>
 8006cee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d105      	bne.n	8006d00 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cfa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e0ed      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_I2C_Mem_Write+0x4e>
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e0e6      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d16:	f7fe fad1 	bl	80052bc <HAL_GetTick>
 8006d1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	2319      	movs	r3, #25
 8006d22:	2201      	movs	r2, #1
 8006d24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f000 fadd 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0d1      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2221      	movs	r2, #33	; 0x21
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2240      	movs	r2, #64	; 0x40
 8006d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6a3a      	ldr	r2, [r7, #32]
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d60:	88f8      	ldrh	r0, [r7, #6]
 8006d62:	893a      	ldrh	r2, [r7, #8]
 8006d64:	8979      	ldrh	r1, [r7, #10]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	4603      	mov	r3, r0
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f9ed 	bl	8007150 <I2C_RequestMemoryWrite>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0a9      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	2bff      	cmp	r3, #255	; 0xff
 8006d90:	d90e      	bls.n	8006db0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	22ff      	movs	r2, #255	; 0xff
 8006d96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	8979      	ldrh	r1, [r7, #10]
 8006da0:	2300      	movs	r3, #0
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fc45 	bl	8007638 <I2C_TransferConfig>
 8006dae:	e00f      	b.n	8006dd0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	8979      	ldrh	r1, [r7, #10]
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fc34 	bl	8007638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fac7 	bl	8007368 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d001      	beq.n	8006de4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e07b      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	781a      	ldrb	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d034      	beq.n	8006e88 <HAL_I2C_Mem_Write+0x1c8>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d130      	bne.n	8006e88 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2180      	movs	r1, #128	; 0x80
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fa59 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e04d      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2bff      	cmp	r3, #255	; 0xff
 8006e48:	d90e      	bls.n	8006e68 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	22ff      	movs	r2, #255	; 0xff
 8006e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	8979      	ldrh	r1, [r7, #10]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fbe9 	bl	8007638 <I2C_TransferConfig>
 8006e66:	e00f      	b.n	8006e88 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e76:	b2da      	uxtb	r2, r3
 8006e78:	8979      	ldrh	r1, [r7, #10]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 fbd8 	bl	8007638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d19e      	bne.n	8006dd0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 faa6 	bl	80073e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e01a      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6859      	ldr	r1, [r3, #4]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <HAL_I2C_Mem_Write+0x224>)
 8006eba:	400b      	ands	r3, r1
 8006ebc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e000      	b.n	8006edc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
  }
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3718      	adds	r7, #24
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	fe00e800 	.word	0xfe00e800

08006ee8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af02      	add	r7, sp, #8
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	817b      	strh	r3, [r7, #10]
 8006efa:	460b      	mov	r3, r1
 8006efc:	813b      	strh	r3, [r7, #8]
 8006efe:	4613      	mov	r3, r2
 8006f00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	f040 80fd 	bne.w	800710a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <HAL_I2C_Mem_Read+0x34>
 8006f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0f1      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_I2C_Mem_Read+0x4e>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e0ea      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f3e:	f7fe f9bd 	bl	80052bc <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	2319      	movs	r3, #25
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f9c9 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0d5      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2222      	movs	r2, #34	; 0x22
 8006f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2240      	movs	r2, #64	; 0x40
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6a3a      	ldr	r2, [r7, #32]
 8006f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f88:	88f8      	ldrh	r0, [r7, #6]
 8006f8a:	893a      	ldrh	r2, [r7, #8]
 8006f8c:	8979      	ldrh	r1, [r7, #10]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	4603      	mov	r3, r0
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 f92d 	bl	80071f8 <I2C_RequestMemoryRead>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0ad      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2bff      	cmp	r3, #255	; 0xff
 8006fb8:	d90e      	bls.n	8006fd8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	22ff      	movs	r2, #255	; 0xff
 8006fbe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	8979      	ldrh	r1, [r7, #10]
 8006fc8:	4b52      	ldr	r3, [pc, #328]	; (8007114 <HAL_I2C_Mem_Read+0x22c>)
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 fb31 	bl	8007638 <I2C_TransferConfig>
 8006fd6:	e00f      	b.n	8006ff8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	8979      	ldrh	r1, [r7, #10]
 8006fea:	4b4a      	ldr	r3, [pc, #296]	; (8007114 <HAL_I2C_Mem_Read+0x22c>)
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fb20 	bl	8007638 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	2200      	movs	r2, #0
 8007000:	2104      	movs	r1, #4
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f970 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e07c      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701c:	b2d2      	uxtb	r2, r2
 800701e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	b29a      	uxth	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d034      	beq.n	80070b8 <HAL_I2C_Mem_Read+0x1d0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007052:	2b00      	cmp	r3, #0
 8007054:	d130      	bne.n	80070b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705c:	2200      	movs	r2, #0
 800705e:	2180      	movs	r1, #128	; 0x80
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 f941 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e04d      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	2bff      	cmp	r3, #255	; 0xff
 8007078:	d90e      	bls.n	8007098 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	22ff      	movs	r2, #255	; 0xff
 800707e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007084:	b2da      	uxtb	r2, r3
 8007086:	8979      	ldrh	r1, [r7, #10]
 8007088:	2300      	movs	r3, #0
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fad1 	bl	8007638 <I2C_TransferConfig>
 8007096:	e00f      	b.n	80070b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	8979      	ldrh	r1, [r7, #10]
 80070aa:	2300      	movs	r3, #0
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fac0 	bl	8007638 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070bc:	b29b      	uxth	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d19a      	bne.n	8006ff8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f98e 	bl	80073e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e01a      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2220      	movs	r2, #32
 80070dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6859      	ldr	r1, [r3, #4]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <HAL_I2C_Mem_Read+0x230>)
 80070ea:	400b      	ands	r3, r1
 80070ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2220      	movs	r2, #32
 80070f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e000      	b.n	800710c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800710a:	2302      	movs	r3, #2
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	80002400 	.word	0x80002400
 8007118:	fe00e800 	.word	0xfe00e800

0800711c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800712a:	b2db      	uxtb	r3, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	4608      	mov	r0, r1
 800715a:	4611      	mov	r1, r2
 800715c:	461a      	mov	r2, r3
 800715e:	4603      	mov	r3, r0
 8007160:	817b      	strh	r3, [r7, #10]
 8007162:	460b      	mov	r3, r1
 8007164:	813b      	strh	r3, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	b2da      	uxtb	r2, r3
 800716e:	8979      	ldrh	r1, [r7, #10]
 8007170:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <I2C_RequestMemoryWrite+0xa4>)
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fa5d 	bl	8007638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	69b9      	ldr	r1, [r7, #24]
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f8f0 	bl	8007368 <I2C_WaitOnTXISFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e02c      	b.n	80071ec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007192:	88fb      	ldrh	r3, [r7, #6]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d105      	bne.n	80071a4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007198:	893b      	ldrh	r3, [r7, #8]
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	629a      	str	r2, [r3, #40]	; 0x28
 80071a2:	e015      	b.n	80071d0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	69b9      	ldr	r1, [r7, #24]
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f8d6 	bl	8007368 <I2C_WaitOnTXISFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e012      	b.n	80071ec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071c6:	893b      	ldrh	r3, [r7, #8]
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2200      	movs	r2, #0
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f884 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e000      	b.n	80071ec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	80002000 	.word	0x80002000

080071f8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	4608      	mov	r0, r1
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	4603      	mov	r3, r0
 8007208:	817b      	strh	r3, [r7, #10]
 800720a:	460b      	mov	r3, r1
 800720c:	813b      	strh	r3, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	b2da      	uxtb	r2, r3
 8007216:	8979      	ldrh	r1, [r7, #10]
 8007218:	4b20      	ldr	r3, [pc, #128]	; (800729c <I2C_RequestMemoryRead+0xa4>)
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	2300      	movs	r3, #0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 fa0a 	bl	8007638 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	69b9      	ldr	r1, [r7, #24]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f89d 	bl	8007368 <I2C_WaitOnTXISFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e02c      	b.n	8007292 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d105      	bne.n	800724a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800723e:	893b      	ldrh	r3, [r7, #8]
 8007240:	b2da      	uxtb	r2, r3
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	629a      	str	r2, [r3, #40]	; 0x28
 8007248:	e015      	b.n	8007276 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800724a:	893b      	ldrh	r3, [r7, #8]
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	b29b      	uxth	r3, r3
 8007250:	b2da      	uxtb	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	69b9      	ldr	r1, [r7, #24]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f000 f883 	bl	8007368 <I2C_WaitOnTXISFlagUntilTimeout>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e012      	b.n	8007292 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800726c:	893b      	ldrh	r3, [r7, #8]
 800726e:	b2da      	uxtb	r2, r3
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2200      	movs	r2, #0
 800727e:	2140      	movs	r1, #64	; 0x40
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 f831 	bl	80072e8 <I2C_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e000      	b.n	8007292 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	80002000 	.word	0x80002000

080072a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d103      	bne.n	80072be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	699b      	ldr	r3, [r3, #24]
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d007      	beq.n	80072dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	619a      	str	r2, [r3, #24]
  }
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072f8:	e022      	b.n	8007340 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d01e      	beq.n	8007340 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007302:	f7fd ffdb 	bl	80052bc <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d113      	bne.n	8007340 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731c:	f043 0220 	orr.w	r2, r3, #32
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e00f      	b.n	8007360 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4013      	ands	r3, r2
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	429a      	cmp	r2, r3
 800734e:	bf0c      	ite	eq
 8007350:	2301      	moveq	r3, #1
 8007352:	2300      	movne	r3, #0
 8007354:	b2db      	uxtb	r3, r3
 8007356:	461a      	mov	r2, r3
 8007358:	79fb      	ldrb	r3, [r7, #7]
 800735a:	429a      	cmp	r2, r3
 800735c:	d0cd      	beq.n	80072fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007374:	e02c      	b.n	80073d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f000 f870 	bl	8007460 <I2C_IsErrorOccurred>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e02a      	b.n	80073e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007390:	d01e      	beq.n	80073d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007392:	f7fd ff93 	bl	80052bc <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d302      	bcc.n	80073a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d113      	bne.n	80073d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ac:	f043 0220 	orr.w	r2, r3, #32
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e007      	b.n	80073e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	f003 0302 	and.w	r3, r3, #2
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d1cb      	bne.n	8007376 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073f4:	e028      	b.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	68b9      	ldr	r1, [r7, #8]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f000 f830 	bl	8007460 <I2C_IsErrorOccurred>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e026      	b.n	8007458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740a:	f7fd ff57 	bl	80052bc <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	429a      	cmp	r2, r3
 8007418:	d302      	bcc.n	8007420 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d113      	bne.n	8007448 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	f043 0220 	orr.w	r2, r3, #32
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e007      	b.n	8007458 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b20      	cmp	r3, #32
 8007454:	d1cf      	bne.n	80073f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d075      	beq.n	8007578 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2210      	movs	r2, #16
 8007492:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007494:	e056      	b.n	8007544 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749c:	d052      	beq.n	8007544 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800749e:	f7fd ff0d 	bl	80052bc <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d302      	bcc.n	80074b4 <I2C_IsErrorOccurred+0x54>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d147      	bne.n	8007544 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d6:	d12e      	bne.n	8007536 <I2C_IsErrorOccurred+0xd6>
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074de:	d02a      	beq.n	8007536 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d027      	beq.n	8007536 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80074f6:	f7fd fee1 	bl	80052bc <HAL_GetTick>
 80074fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074fc:	e01b      	b.n	8007536 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80074fe:	f7fd fedd 	bl	80052bc <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b19      	cmp	r3, #25
 800750a:	d914      	bls.n	8007536 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007510:	f043 0220 	orr.w	r2, r3, #32
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f003 0320 	and.w	r3, r3, #32
 8007540:	2b20      	cmp	r3, #32
 8007542:	d1dc      	bne.n	80074fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b20      	cmp	r3, #32
 8007550:	d003      	beq.n	800755a <I2C_IsErrorOccurred+0xfa>
 8007552:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007556:	2b00      	cmp	r3, #0
 8007558:	d09d      	beq.n	8007496 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800755a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800755e:	2b00      	cmp	r3, #0
 8007560:	d103      	bne.n	800756a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2220      	movs	r2, #32
 8007568:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	f043 0304 	orr.w	r3, r3, #4
 8007570:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	f043 0301 	orr.w	r3, r3, #1
 8007590:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f44f 7280 	mov.w	r2, #256	; 0x100
 800759a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	f043 0308 	orr.w	r3, r3, #8
 80075b2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	f043 0302 	orr.w	r3, r3, #2
 80075d4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80075e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01c      	beq.n	8007628 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f7ff fe56 	bl	80072a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6859      	ldr	r1, [r3, #4]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <I2C_IsErrorOccurred+0x1d4>)
 8007600:	400b      	ands	r3, r1
 8007602:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	431a      	orrs	r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800762c:	4618      	mov	r0, r3
 800762e:	3728      	adds	r7, #40	; 0x28
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	fe00e800 	.word	0xfe00e800

08007638 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	460b      	mov	r3, r1
 8007644:	817b      	strh	r3, [r7, #10]
 8007646:	4613      	mov	r3, r2
 8007648:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800764a:	897b      	ldrh	r3, [r7, #10]
 800764c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007650:	7a7b      	ldrb	r3, [r7, #9]
 8007652:	041b      	lsls	r3, r3, #16
 8007654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007658:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	4313      	orrs	r3, r2
 8007662:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007666:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	0d5b      	lsrs	r3, r3, #21
 8007672:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007676:	4b08      	ldr	r3, [pc, #32]	; (8007698 <I2C_TransferConfig+0x60>)
 8007678:	430b      	orrs	r3, r1
 800767a:	43db      	mvns	r3, r3
 800767c:	ea02 0103 	and.w	r1, r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	430a      	orrs	r2, r1
 8007688:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	03ff63ff 	.word	0x03ff63ff

0800769c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d138      	bne.n	8007724 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80076bc:	2302      	movs	r3, #2
 80076be:	e032      	b.n	8007726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2224      	movs	r2, #36	; 0x24
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0201 	bic.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f042 0201 	orr.w	r2, r2, #1
 800770e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007720:	2300      	movs	r3, #0
 8007722:	e000      	b.n	8007726 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007724:	2302      	movs	r3, #2
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b20      	cmp	r3, #32
 8007746:	d139      	bne.n	80077bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007752:	2302      	movs	r3, #2
 8007754:	e033      	b.n	80077be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2224      	movs	r2, #36	; 0x24
 8007762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f022 0201 	bic.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007784:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	e000      	b.n	80077be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80077d0:	4b04      	ldr	r3, [pc, #16]	; (80077e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80077d8:	4618      	mov	r0, r3
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	40007000 	.word	0x40007000

080077e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f6:	d130      	bne.n	800785a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80077f8:	4b23      	ldr	r3, [pc, #140]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007804:	d038      	beq.n	8007878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007806:	4b20      	ldr	r3, [pc, #128]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800780e:	4a1e      	ldr	r2, [pc, #120]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007810:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007814:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007816:	4b1d      	ldr	r3, [pc, #116]	; (800788c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2232      	movs	r2, #50	; 0x32
 800781c:	fb02 f303 	mul.w	r3, r2, r3
 8007820:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	0c9b      	lsrs	r3, r3, #18
 8007828:	3301      	adds	r3, #1
 800782a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800782c:	e002      	b.n	8007834 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3b01      	subs	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007834:	4b14      	ldr	r3, [pc, #80]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800783c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007840:	d102      	bne.n	8007848 <HAL_PWREx_ControlVoltageScaling+0x60>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f2      	bne.n	800782e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007848:	4b0f      	ldr	r3, [pc, #60]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007850:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007854:	d110      	bne.n	8007878 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e00f      	b.n	800787a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007866:	d007      	beq.n	8007878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007868:	4b07      	ldr	r3, [pc, #28]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007870:	4a05      	ldr	r2, [pc, #20]	; (8007888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007872:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007876:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	40007000 	.word	0x40007000
 800788c:	20000000 	.word	0x20000000
 8007890:	431bde83 	.word	0x431bde83

08007894 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d101      	bne.n	80078a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e3ca      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078a6:	4b97      	ldr	r3, [pc, #604]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f003 030c 	and.w	r3, r3, #12
 80078ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078b0:	4b94      	ldr	r3, [pc, #592]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f003 0303 	and.w	r3, r3, #3
 80078b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f000 80e4 	beq.w	8007a90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d007      	beq.n	80078de <HAL_RCC_OscConfig+0x4a>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	2b0c      	cmp	r3, #12
 80078d2:	f040 808b 	bne.w	80079ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	f040 8087 	bne.w	80079ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80078de:	4b89      	ldr	r3, [pc, #548]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_RCC_OscConfig+0x62>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e3a2      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	4b82      	ldr	r3, [pc, #520]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0308 	and.w	r3, r3, #8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d004      	beq.n	8007910 <HAL_RCC_OscConfig+0x7c>
 8007906:	4b7f      	ldr	r3, [pc, #508]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800790e:	e005      	b.n	800791c <HAL_RCC_OscConfig+0x88>
 8007910:	4b7c      	ldr	r3, [pc, #496]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007916:	091b      	lsrs	r3, r3, #4
 8007918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800791c:	4293      	cmp	r3, r2
 800791e:	d223      	bcs.n	8007968 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fd55 	bl	80083d4 <RCC_SetFlashLatencyFromMSIRange>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e383      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007934:	4b73      	ldr	r3, [pc, #460]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a72      	ldr	r2, [pc, #456]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 800793a:	f043 0308 	orr.w	r3, r3, #8
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	4b70      	ldr	r3, [pc, #448]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	496d      	ldr	r1, [pc, #436]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 800794e:	4313      	orrs	r3, r2
 8007950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007952:	4b6c      	ldr	r3, [pc, #432]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	4968      	ldr	r1, [pc, #416]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007962:	4313      	orrs	r3, r2
 8007964:	604b      	str	r3, [r1, #4]
 8007966:	e025      	b.n	80079b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007968:	4b66      	ldr	r3, [pc, #408]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a65      	ldr	r2, [pc, #404]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 800796e:	f043 0308 	orr.w	r3, r3, #8
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	4b63      	ldr	r3, [pc, #396]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	4960      	ldr	r1, [pc, #384]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007982:	4313      	orrs	r3, r2
 8007984:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007986:	4b5f      	ldr	r3, [pc, #380]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	495b      	ldr	r1, [pc, #364]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007996:	4313      	orrs	r3, r2
 8007998:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d109      	bne.n	80079b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f000 fd15 	bl	80083d4 <RCC_SetFlashLatencyFromMSIRange>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e343      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079b4:	f000 fc4a 	bl	800824c <HAL_RCC_GetSysClockFreq>
 80079b8:	4602      	mov	r2, r0
 80079ba:	4b52      	ldr	r3, [pc, #328]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	091b      	lsrs	r3, r3, #4
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	4950      	ldr	r1, [pc, #320]	; (8007b08 <HAL_RCC_OscConfig+0x274>)
 80079c6:	5ccb      	ldrb	r3, [r1, r3]
 80079c8:	f003 031f 	and.w	r3, r3, #31
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
 80079d0:	4a4e      	ldr	r2, [pc, #312]	; (8007b0c <HAL_RCC_OscConfig+0x278>)
 80079d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80079d4:	4b4e      	ldr	r3, [pc, #312]	; (8007b10 <HAL_RCC_OscConfig+0x27c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fd fc1f 	bl	800521c <HAL_InitTick>
 80079de:	4603      	mov	r3, r0
 80079e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d052      	beq.n	8007a8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	e327      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	699b      	ldr	r3, [r3, #24]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d032      	beq.n	8007a5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80079f4:	4b43      	ldr	r3, [pc, #268]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a42      	ldr	r2, [pc, #264]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 80079fa:	f043 0301 	orr.w	r3, r3, #1
 80079fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a00:	f7fd fc5c 	bl	80052bc <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a08:	f7fd fc58 	bl	80052bc <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e310      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a1a:	4b3a      	ldr	r3, [pc, #232]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0302 	and.w	r3, r3, #2
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0f0      	beq.n	8007a08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a26:	4b37      	ldr	r3, [pc, #220]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a36      	ldr	r2, [pc, #216]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a2c:	f043 0308 	orr.w	r3, r3, #8
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4b34      	ldr	r3, [pc, #208]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	4931      	ldr	r1, [pc, #196]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a44:	4b2f      	ldr	r3, [pc, #188]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	492c      	ldr	r1, [pc, #176]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a54:	4313      	orrs	r3, r2
 8007a56:	604b      	str	r3, [r1, #4]
 8007a58:	e01a      	b.n	8007a90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a5a:	4b2a      	ldr	r3, [pc, #168]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a29      	ldr	r2, [pc, #164]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a66:	f7fd fc29 	bl	80052bc <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a6e:	f7fd fc25 	bl	80052bc <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e2dd      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a80:	4b20      	ldr	r3, [pc, #128]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f0      	bne.n	8007a6e <HAL_RCC_OscConfig+0x1da>
 8007a8c:	e000      	b.n	8007a90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007a8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d074      	beq.n	8007b86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	d005      	beq.n	8007aae <HAL_RCC_OscConfig+0x21a>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	2b0c      	cmp	r3, #12
 8007aa6:	d10e      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d10b      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aae:	4b15      	ldr	r3, [pc, #84]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d064      	beq.n	8007b84 <HAL_RCC_OscConfig+0x2f0>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d160      	bne.n	8007b84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e2ba      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ace:	d106      	bne.n	8007ade <HAL_RCC_OscConfig+0x24a>
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a0b      	ldr	r2, [pc, #44]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	e026      	b.n	8007b2c <HAL_RCC_OscConfig+0x298>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ae6:	d115      	bne.n	8007b14 <HAL_RCC_OscConfig+0x280>
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007aee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007af2:	6013      	str	r3, [r2, #0]
 8007af4:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a02      	ldr	r2, [pc, #8]	; (8007b04 <HAL_RCC_OscConfig+0x270>)
 8007afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	e014      	b.n	8007b2c <HAL_RCC_OscConfig+0x298>
 8007b02:	bf00      	nop
 8007b04:	40021000 	.word	0x40021000
 8007b08:	0800ff6c 	.word	0x0800ff6c
 8007b0c:	20000000 	.word	0x20000000
 8007b10:	20000004 	.word	0x20000004
 8007b14:	4ba0      	ldr	r3, [pc, #640]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a9f      	ldr	r2, [pc, #636]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	4b9d      	ldr	r3, [pc, #628]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a9c      	ldr	r2, [pc, #624]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d013      	beq.n	8007b5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b34:	f7fd fbc2 	bl	80052bc <HAL_GetTick>
 8007b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b3c:	f7fd fbbe 	bl	80052bc <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b64      	cmp	r3, #100	; 0x64
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e276      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b4e:	4b92      	ldr	r3, [pc, #584]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f0      	beq.n	8007b3c <HAL_RCC_OscConfig+0x2a8>
 8007b5a:	e014      	b.n	8007b86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5c:	f7fd fbae 	bl	80052bc <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b64:	f7fd fbaa 	bl	80052bc <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b64      	cmp	r3, #100	; 0x64
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e262      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b76:	4b88      	ldr	r3, [pc, #544]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1f0      	bne.n	8007b64 <HAL_RCC_OscConfig+0x2d0>
 8007b82:	e000      	b.n	8007b86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d060      	beq.n	8007c54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x310>
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	2b0c      	cmp	r3, #12
 8007b9c:	d119      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d116      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ba4:	4b7c      	ldr	r3, [pc, #496]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_OscConfig+0x328>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e23f      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bbc:	4b76      	ldr	r3, [pc, #472]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	061b      	lsls	r3, r3, #24
 8007bca:	4973      	ldr	r1, [pc, #460]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bd0:	e040      	b.n	8007c54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d023      	beq.n	8007c22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bda:	4b6f      	ldr	r3, [pc, #444]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a6e      	ldr	r2, [pc, #440]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be6:	f7fd fb69 	bl	80052bc <HAL_GetTick>
 8007bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007bec:	e008      	b.n	8007c00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bee:	f7fd fb65 	bl	80052bc <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e21d      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c00:	4b65      	ldr	r3, [pc, #404]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0f0      	beq.n	8007bee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0c:	4b62      	ldr	r3, [pc, #392]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	061b      	lsls	r3, r3, #24
 8007c1a:	495f      	ldr	r1, [pc, #380]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	604b      	str	r3, [r1, #4]
 8007c20:	e018      	b.n	8007c54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c22:	4b5d      	ldr	r3, [pc, #372]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a5c      	ldr	r2, [pc, #368]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c2e:	f7fd fb45 	bl	80052bc <HAL_GetTick>
 8007c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c34:	e008      	b.n	8007c48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c36:	f7fd fb41 	bl	80052bc <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e1f9      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c48:	4b53      	ldr	r3, [pc, #332]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1f0      	bne.n	8007c36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d03c      	beq.n	8007cda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01c      	beq.n	8007ca2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c68:	4b4b      	ldr	r3, [pc, #300]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c6e:	4a4a      	ldr	r2, [pc, #296]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c78:	f7fd fb20 	bl	80052bc <HAL_GetTick>
 8007c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c7e:	e008      	b.n	8007c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c80:	f7fd fb1c 	bl	80052bc <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d901      	bls.n	8007c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e1d4      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c92:	4b41      	ldr	r3, [pc, #260]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0ef      	beq.n	8007c80 <HAL_RCC_OscConfig+0x3ec>
 8007ca0:	e01b      	b.n	8007cda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ca2:	4b3d      	ldr	r3, [pc, #244]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ca8:	4a3b      	ldr	r2, [pc, #236]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb2:	f7fd fb03 	bl	80052bc <HAL_GetTick>
 8007cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cba:	f7fd faff 	bl	80052bc <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e1b7      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ccc:	4b32      	ldr	r3, [pc, #200]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1ef      	bne.n	8007cba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80a6 	beq.w	8007e34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007cec:	4b2a      	ldr	r3, [pc, #168]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cf8:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfc:	4a26      	ldr	r2, [pc, #152]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d02:	6593      	str	r3, [r2, #88]	; 0x58
 8007d04:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	60bb      	str	r3, [r7, #8]
 8007d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d10:	2301      	movs	r3, #1
 8007d12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d14:	4b21      	ldr	r3, [pc, #132]	; (8007d9c <HAL_RCC_OscConfig+0x508>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d118      	bne.n	8007d52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d20:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <HAL_RCC_OscConfig+0x508>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <HAL_RCC_OscConfig+0x508>)
 8007d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d2c:	f7fd fac6 	bl	80052bc <HAL_GetTick>
 8007d30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d34:	f7fd fac2 	bl	80052bc <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e17a      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d46:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <HAL_RCC_OscConfig+0x508>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0f0      	beq.n	8007d34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d108      	bne.n	8007d6c <HAL_RCC_OscConfig+0x4d8>
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d60:	4a0d      	ldr	r2, [pc, #52]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d6a:	e029      	b.n	8007dc0 <HAL_RCC_OscConfig+0x52c>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b05      	cmp	r3, #5
 8007d72:	d115      	bne.n	8007da0 <HAL_RCC_OscConfig+0x50c>
 8007d74:	4b08      	ldr	r3, [pc, #32]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d7a:	4a07      	ldr	r2, [pc, #28]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007d7c:	f043 0304 	orr.w	r3, r3, #4
 8007d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8a:	4a03      	ldr	r2, [pc, #12]	; (8007d98 <HAL_RCC_OscConfig+0x504>)
 8007d8c:	f043 0301 	orr.w	r3, r3, #1
 8007d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d94:	e014      	b.n	8007dc0 <HAL_RCC_OscConfig+0x52c>
 8007d96:	bf00      	nop
 8007d98:	40021000 	.word	0x40021000
 8007d9c:	40007000 	.word	0x40007000
 8007da0:	4b9c      	ldr	r3, [pc, #624]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da6:	4a9b      	ldr	r2, [pc, #620]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007db0:	4b98      	ldr	r3, [pc, #608]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db6:	4a97      	ldr	r2, [pc, #604]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007db8:	f023 0304 	bic.w	r3, r3, #4
 8007dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d016      	beq.n	8007df6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc8:	f7fd fa78 	bl	80052bc <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dce:	e00a      	b.n	8007de6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd0:	f7fd fa74 	bl	80052bc <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e12a      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de6:	4b8b      	ldr	r3, [pc, #556]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dec:	f003 0302 	and.w	r3, r3, #2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0ed      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x53c>
 8007df4:	e015      	b.n	8007e22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df6:	f7fd fa61 	bl	80052bc <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dfc:	e00a      	b.n	8007e14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfe:	f7fd fa5d 	bl	80052bc <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d901      	bls.n	8007e14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e113      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e14:	4b7f      	ldr	r3, [pc, #508]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1ed      	bne.n	8007dfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e22:	7ffb      	ldrb	r3, [r7, #31]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d105      	bne.n	8007e34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e28:	4b7a      	ldr	r3, [pc, #488]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e2c:	4a79      	ldr	r2, [pc, #484]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80fe 	beq.w	800803a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	f040 80d0 	bne.w	8007fe8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007e48:	4b72      	ldr	r3, [pc, #456]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0203 	and.w	r2, r3, #3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d130      	bne.n	8007ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	3b01      	subs	r3, #1
 8007e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d127      	bne.n	8007ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d11f      	bne.n	8007ebe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e88:	2a07      	cmp	r2, #7
 8007e8a:	bf14      	ite	ne
 8007e8c:	2201      	movne	r2, #1
 8007e8e:	2200      	moveq	r2, #0
 8007e90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d113      	bne.n	8007ebe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea0:	085b      	lsrs	r3, r3, #1
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d109      	bne.n	8007ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb4:	085b      	lsrs	r3, r3, #1
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d06e      	beq.n	8007f9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	2b0c      	cmp	r3, #12
 8007ec2:	d069      	beq.n	8007f98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007ec4:	4b53      	ldr	r3, [pc, #332]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007ed0:	4b50      	ldr	r3, [pc, #320]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0ad      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007ee0:	4b4c      	ldr	r3, [pc, #304]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a4b      	ldr	r2, [pc, #300]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007eec:	f7fd f9e6 	bl	80052bc <HAL_GetTick>
 8007ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ef4:	f7fd f9e2 	bl	80052bc <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e09a      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f06:	4b43      	ldr	r3, [pc, #268]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f12:	4b40      	ldr	r3, [pc, #256]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	4b40      	ldr	r3, [pc, #256]	; (8008018 <HAL_RCC_OscConfig+0x784>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007f22:	3a01      	subs	r2, #1
 8007f24:	0112      	lsls	r2, r2, #4
 8007f26:	4311      	orrs	r1, r2
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f2c:	0212      	lsls	r2, r2, #8
 8007f2e:	4311      	orrs	r1, r2
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007f34:	0852      	lsrs	r2, r2, #1
 8007f36:	3a01      	subs	r2, #1
 8007f38:	0552      	lsls	r2, r2, #21
 8007f3a:	4311      	orrs	r1, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007f40:	0852      	lsrs	r2, r2, #1
 8007f42:	3a01      	subs	r2, #1
 8007f44:	0652      	lsls	r2, r2, #25
 8007f46:	4311      	orrs	r1, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f4c:	0912      	lsrs	r2, r2, #4
 8007f4e:	0452      	lsls	r2, r2, #17
 8007f50:	430a      	orrs	r2, r1
 8007f52:	4930      	ldr	r1, [pc, #192]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007f58:	4b2e      	ldr	r3, [pc, #184]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a2d      	ldr	r2, [pc, #180]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f64:	4b2b      	ldr	r3, [pc, #172]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	4a2a      	ldr	r2, [pc, #168]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f70:	f7fd f9a4 	bl	80052bc <HAL_GetTick>
 8007f74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f76:	e008      	b.n	8007f8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f78:	f7fd f9a0 	bl	80052bc <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d901      	bls.n	8007f8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8007f86:	2303      	movs	r3, #3
 8007f88:	e058      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f8a:	4b22      	ldr	r3, [pc, #136]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d0f0      	beq.n	8007f78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f96:	e050      	b.n	800803a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e04f      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f9c:	4b1d      	ldr	r3, [pc, #116]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d148      	bne.n	800803a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007fa8:	4b1a      	ldr	r3, [pc, #104]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a19      	ldr	r2, [pc, #100]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fb4:	4b17      	ldr	r3, [pc, #92]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	4a16      	ldr	r2, [pc, #88]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fc0:	f7fd f97c 	bl	80052bc <HAL_GetTick>
 8007fc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fc8:	f7fd f978 	bl	80052bc <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e030      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fda:	4b0e      	ldr	r3, [pc, #56]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d0f0      	beq.n	8007fc8 <HAL_RCC_OscConfig+0x734>
 8007fe6:	e028      	b.n	800803a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	2b0c      	cmp	r3, #12
 8007fec:	d023      	beq.n	8008036 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fee:	4b09      	ldr	r3, [pc, #36]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a08      	ldr	r2, [pc, #32]	; (8008014 <HAL_RCC_OscConfig+0x780>)
 8007ff4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffa:	f7fd f95f 	bl	80052bc <HAL_GetTick>
 8007ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008000:	e00c      	b.n	800801c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008002:	f7fd f95b 	bl	80052bc <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d905      	bls.n	800801c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e013      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
 8008014:	40021000 	.word	0x40021000
 8008018:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800801c:	4b09      	ldr	r3, [pc, #36]	; (8008044 <HAL_RCC_OscConfig+0x7b0>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1ec      	bne.n	8008002 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008028:	4b06      	ldr	r3, [pc, #24]	; (8008044 <HAL_RCC_OscConfig+0x7b0>)
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	4905      	ldr	r1, [pc, #20]	; (8008044 <HAL_RCC_OscConfig+0x7b0>)
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <HAL_RCC_OscConfig+0x7b4>)
 8008030:	4013      	ands	r3, r2
 8008032:	60cb      	str	r3, [r1, #12]
 8008034:	e001      	b.n	800803a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e000      	b.n	800803c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3720      	adds	r7, #32
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	40021000 	.word	0x40021000
 8008048:	feeefffc 	.word	0xfeeefffc

0800804c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0e7      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008060:	4b75      	ldr	r3, [pc, #468]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0307 	and.w	r3, r3, #7
 8008068:	683a      	ldr	r2, [r7, #0]
 800806a:	429a      	cmp	r2, r3
 800806c:	d910      	bls.n	8008090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800806e:	4b72      	ldr	r3, [pc, #456]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f023 0207 	bic.w	r2, r3, #7
 8008076:	4970      	ldr	r1, [pc, #448]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800807e:	4b6e      	ldr	r3, [pc, #440]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	429a      	cmp	r2, r3
 800808a:	d001      	beq.n	8008090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e0cf      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d010      	beq.n	80080be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689a      	ldr	r2, [r3, #8]
 80080a0:	4b66      	ldr	r3, [pc, #408]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d908      	bls.n	80080be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ac:	4b63      	ldr	r3, [pc, #396]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	4960      	ldr	r1, [pc, #384]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d04c      	beq.n	8008164 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d107      	bne.n	80080e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080d2:	4b5a      	ldr	r3, [pc, #360]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d121      	bne.n	8008122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0a6      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d107      	bne.n	80080fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80080ea:	4b54      	ldr	r3, [pc, #336]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d115      	bne.n	8008122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e09a      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008102:	4b4e      	ldr	r3, [pc, #312]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 0302 	and.w	r3, r3, #2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d109      	bne.n	8008122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	e08e      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008112:	4b4a      	ldr	r3, [pc, #296]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e086      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008122:	4b46      	ldr	r3, [pc, #280]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f023 0203 	bic.w	r2, r3, #3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	4943      	ldr	r1, [pc, #268]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008130:	4313      	orrs	r3, r2
 8008132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008134:	f7fd f8c2 	bl	80052bc <HAL_GetTick>
 8008138:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800813a:	e00a      	b.n	8008152 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800813c:	f7fd f8be 	bl	80052bc <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	f241 3288 	movw	r2, #5000	; 0x1388
 800814a:	4293      	cmp	r3, r2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e06e      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008152:	4b3a      	ldr	r3, [pc, #232]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 020c 	and.w	r2, r3, #12
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	429a      	cmp	r2, r3
 8008162:	d1eb      	bne.n	800813c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d010      	beq.n	8008192 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689a      	ldr	r2, [r3, #8]
 8008174:	4b31      	ldr	r3, [pc, #196]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800817c:	429a      	cmp	r2, r3
 800817e:	d208      	bcs.n	8008192 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008180:	4b2e      	ldr	r3, [pc, #184]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	492b      	ldr	r1, [pc, #172]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 800818e:	4313      	orrs	r3, r2
 8008190:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008192:	4b29      	ldr	r3, [pc, #164]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0307 	and.w	r3, r3, #7
 800819a:	683a      	ldr	r2, [r7, #0]
 800819c:	429a      	cmp	r2, r3
 800819e:	d210      	bcs.n	80081c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a0:	4b25      	ldr	r3, [pc, #148]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f023 0207 	bic.w	r2, r3, #7
 80081a8:	4923      	ldr	r1, [pc, #140]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b0:	4b21      	ldr	r3, [pc, #132]	; (8008238 <HAL_RCC_ClockConfig+0x1ec>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d001      	beq.n	80081c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e036      	b.n	8008230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d008      	beq.n	80081e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081ce:	4b1b      	ldr	r3, [pc, #108]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	4918      	ldr	r1, [pc, #96]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d009      	beq.n	8008200 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80081ec:	4b13      	ldr	r3, [pc, #76]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	4910      	ldr	r1, [pc, #64]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008200:	f000 f824 	bl	800824c <HAL_RCC_GetSysClockFreq>
 8008204:	4602      	mov	r2, r0
 8008206:	4b0d      	ldr	r3, [pc, #52]	; (800823c <HAL_RCC_ClockConfig+0x1f0>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	091b      	lsrs	r3, r3, #4
 800820c:	f003 030f 	and.w	r3, r3, #15
 8008210:	490b      	ldr	r1, [pc, #44]	; (8008240 <HAL_RCC_ClockConfig+0x1f4>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	f003 031f 	and.w	r3, r3, #31
 8008218:	fa22 f303 	lsr.w	r3, r2, r3
 800821c:	4a09      	ldr	r2, [pc, #36]	; (8008244 <HAL_RCC_ClockConfig+0x1f8>)
 800821e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008220:	4b09      	ldr	r3, [pc, #36]	; (8008248 <HAL_RCC_ClockConfig+0x1fc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4618      	mov	r0, r3
 8008226:	f7fc fff9 	bl	800521c <HAL_InitTick>
 800822a:	4603      	mov	r3, r0
 800822c:	72fb      	strb	r3, [r7, #11]

  return status;
 800822e:	7afb      	ldrb	r3, [r7, #11]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40022000 	.word	0x40022000
 800823c:	40021000 	.word	0x40021000
 8008240:	0800ff6c 	.word	0x0800ff6c
 8008244:	20000000 	.word	0x20000000
 8008248:	20000004 	.word	0x20000004

0800824c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800824c:	b480      	push	{r7}
 800824e:	b089      	sub	sp, #36	; 0x24
 8008250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
 8008256:	2300      	movs	r3, #0
 8008258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800825a:	4b3e      	ldr	r3, [pc, #248]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 030c 	and.w	r3, r3, #12
 8008262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008264:	4b3b      	ldr	r3, [pc, #236]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d005      	beq.n	8008280 <HAL_RCC_GetSysClockFreq+0x34>
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b0c      	cmp	r3, #12
 8008278:	d121      	bne.n	80082be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d11e      	bne.n	80082be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008280:	4b34      	ldr	r3, [pc, #208]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d107      	bne.n	800829c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800828c:	4b31      	ldr	r3, [pc, #196]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 800828e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008292:	0a1b      	lsrs	r3, r3, #8
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	61fb      	str	r3, [r7, #28]
 800829a:	e005      	b.n	80082a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800829c:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	091b      	lsrs	r3, r3, #4
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80082a8:	4a2b      	ldr	r2, [pc, #172]	; (8008358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10d      	bne.n	80082d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80082b8:	69fb      	ldr	r3, [r7, #28]
 80082ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80082bc:	e00a      	b.n	80082d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b04      	cmp	r3, #4
 80082c2:	d102      	bne.n	80082ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082c4:	4b25      	ldr	r3, [pc, #148]	; (800835c <HAL_RCC_GetSysClockFreq+0x110>)
 80082c6:	61bb      	str	r3, [r7, #24]
 80082c8:	e004      	b.n	80082d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d101      	bne.n	80082d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80082d0:	4b23      	ldr	r3, [pc, #140]	; (8008360 <HAL_RCC_GetSysClockFreq+0x114>)
 80082d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b0c      	cmp	r3, #12
 80082d8:	d134      	bne.n	8008344 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80082da:	4b1e      	ldr	r3, [pc, #120]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d003      	beq.n	80082f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d003      	beq.n	80082f8 <HAL_RCC_GetSysClockFreq+0xac>
 80082f0:	e005      	b.n	80082fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <HAL_RCC_GetSysClockFreq+0x110>)
 80082f4:	617b      	str	r3, [r7, #20]
      break;
 80082f6:	e005      	b.n	8008304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80082f8:	4b19      	ldr	r3, [pc, #100]	; (8008360 <HAL_RCC_GetSysClockFreq+0x114>)
 80082fa:	617b      	str	r3, [r7, #20]
      break;
 80082fc:	e002      	b.n	8008304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	617b      	str	r3, [r7, #20]
      break;
 8008302:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008304:	4b13      	ldr	r3, [pc, #76]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	091b      	lsrs	r3, r3, #4
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	3301      	adds	r3, #1
 8008310:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008312:	4b10      	ldr	r3, [pc, #64]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	fb03 f202 	mul.w	r2, r3, r2
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	fbb2 f3f3 	udiv	r3, r2, r3
 8008328:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800832a:	4b0a      	ldr	r3, [pc, #40]	; (8008354 <HAL_RCC_GetSysClockFreq+0x108>)
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	0e5b      	lsrs	r3, r3, #25
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	3301      	adds	r3, #1
 8008336:	005b      	lsls	r3, r3, #1
 8008338:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008342:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008344:	69bb      	ldr	r3, [r7, #24]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3724      	adds	r7, #36	; 0x24
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40021000 	.word	0x40021000
 8008358:	0800ff84 	.word	0x0800ff84
 800835c:	00f42400 	.word	0x00f42400
 8008360:	007a1200 	.word	0x007a1200

08008364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008364:	b480      	push	{r7}
 8008366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008368:	4b03      	ldr	r3, [pc, #12]	; (8008378 <HAL_RCC_GetHCLKFreq+0x14>)
 800836a:	681b      	ldr	r3, [r3, #0]
}
 800836c:	4618      	mov	r0, r3
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000000 	.word	0x20000000

0800837c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008380:	f7ff fff0 	bl	8008364 <HAL_RCC_GetHCLKFreq>
 8008384:	4602      	mov	r2, r0
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	0a1b      	lsrs	r3, r3, #8
 800838c:	f003 0307 	and.w	r3, r3, #7
 8008390:	4904      	ldr	r1, [pc, #16]	; (80083a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008392:	5ccb      	ldrb	r3, [r1, r3]
 8008394:	f003 031f 	and.w	r3, r3, #31
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800839c:	4618      	mov	r0, r3
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	40021000 	.word	0x40021000
 80083a4:	0800ff7c 	.word	0x0800ff7c

080083a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80083ac:	f7ff ffda 	bl	8008364 <HAL_RCC_GetHCLKFreq>
 80083b0:	4602      	mov	r2, r0
 80083b2:	4b06      	ldr	r3, [pc, #24]	; (80083cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	0adb      	lsrs	r3, r3, #11
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	4904      	ldr	r1, [pc, #16]	; (80083d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80083be:	5ccb      	ldrb	r3, [r1, r3]
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	40021000 	.word	0x40021000
 80083d0:	0800ff7c 	.word	0x0800ff7c

080083d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80083dc:	2300      	movs	r3, #0
 80083de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80083e0:	4b2a      	ldr	r3, [pc, #168]	; (800848c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80083ec:	f7ff f9ee 	bl	80077cc <HAL_PWREx_GetVoltageRange>
 80083f0:	6178      	str	r0, [r7, #20]
 80083f2:	e014      	b.n	800841e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f8:	4a24      	ldr	r2, [pc, #144]	; (800848c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80083fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083fe:	6593      	str	r3, [r2, #88]	; 0x58
 8008400:	4b22      	ldr	r3, [pc, #136]	; (800848c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800840c:	f7ff f9de 	bl	80077cc <HAL_PWREx_GetVoltageRange>
 8008410:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008412:	4b1e      	ldr	r3, [pc, #120]	; (800848c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008416:	4a1d      	ldr	r2, [pc, #116]	; (800848c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800841c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008424:	d10b      	bne.n	800843e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b80      	cmp	r3, #128	; 0x80
 800842a:	d919      	bls.n	8008460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2ba0      	cmp	r3, #160	; 0xa0
 8008430:	d902      	bls.n	8008438 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008432:	2302      	movs	r3, #2
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	e013      	b.n	8008460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008438:	2301      	movs	r3, #1
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	e010      	b.n	8008460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b80      	cmp	r3, #128	; 0x80
 8008442:	d902      	bls.n	800844a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008444:	2303      	movs	r3, #3
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	e00a      	b.n	8008460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b80      	cmp	r3, #128	; 0x80
 800844e:	d102      	bne.n	8008456 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008450:	2302      	movs	r3, #2
 8008452:	613b      	str	r3, [r7, #16]
 8008454:	e004      	b.n	8008460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b70      	cmp	r3, #112	; 0x70
 800845a:	d101      	bne.n	8008460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800845c:	2301      	movs	r3, #1
 800845e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f023 0207 	bic.w	r2, r3, #7
 8008468:	4909      	ldr	r1, [pc, #36]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	4313      	orrs	r3, r2
 800846e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 0307 	and.w	r3, r3, #7
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d001      	beq.n	8008482 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e000      	b.n	8008484 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008482:	2300      	movs	r3, #0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40021000 	.word	0x40021000
 8008490:	40022000 	.word	0x40022000

08008494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800849c:	2300      	movs	r3, #0
 800849e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80084a0:	2300      	movs	r3, #0
 80084a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d041      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084b8:	d02a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80084ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80084be:	d824      	bhi.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80084c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084c4:	d008      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80084c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084ca:	d81e      	bhi.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80084d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084d4:	d010      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80084d6:	e018      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80084d8:	4b86      	ldr	r3, [pc, #536]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	4a85      	ldr	r2, [pc, #532]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80084e4:	e015      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	3304      	adds	r3, #4
 80084ea:	2100      	movs	r1, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fabb 	bl	8008a68 <RCCEx_PLLSAI1_Config>
 80084f2:	4603      	mov	r3, r0
 80084f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80084f6:	e00c      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3320      	adds	r3, #32
 80084fc:	2100      	movs	r1, #0
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 fba6 	bl	8008c50 <RCCEx_PLLSAI2_Config>
 8008504:	4603      	mov	r3, r0
 8008506:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008508:	e003      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	74fb      	strb	r3, [r7, #19]
      break;
 800850e:	e000      	b.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008512:	7cfb      	ldrb	r3, [r7, #19]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10b      	bne.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008518:	4b76      	ldr	r3, [pc, #472]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800851a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800851e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008526:	4973      	ldr	r1, [pc, #460]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008528:	4313      	orrs	r3, r2
 800852a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800852e:	e001      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008530:	7cfb      	ldrb	r3, [r7, #19]
 8008532:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d041      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008544:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008548:	d02a      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800854a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800854e:	d824      	bhi.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008554:	d008      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800855a:	d81e      	bhi.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008564:	d010      	beq.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008566:	e018      	b.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008568:	4b62      	ldr	r3, [pc, #392]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	4a61      	ldr	r2, [pc, #388]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800856e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008572:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008574:	e015      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	3304      	adds	r3, #4
 800857a:	2100      	movs	r1, #0
 800857c:	4618      	mov	r0, r3
 800857e:	f000 fa73 	bl	8008a68 <RCCEx_PLLSAI1_Config>
 8008582:	4603      	mov	r3, r0
 8008584:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008586:	e00c      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3320      	adds	r3, #32
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fb5e 	bl	8008c50 <RCCEx_PLLSAI2_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008598:	e003      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	74fb      	strb	r3, [r7, #19]
      break;
 800859e:	e000      	b.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80085a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a2:	7cfb      	ldrb	r3, [r7, #19]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085a8:	4b52      	ldr	r3, [pc, #328]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b6:	494f      	ldr	r1, [pc, #316]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80085be:	e001      	b.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c0:	7cfb      	ldrb	r3, [r7, #19]
 80085c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 80a0 	beq.w	8008712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085d2:	2300      	movs	r3, #0
 80085d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80085d6:	4b47      	ldr	r3, [pc, #284]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00d      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80085ec:	4b41      	ldr	r3, [pc, #260]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f0:	4a40      	ldr	r2, [pc, #256]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085f6:	6593      	str	r3, [r2, #88]	; 0x58
 80085f8:	4b3e      	ldr	r3, [pc, #248]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008600:	60bb      	str	r3, [r7, #8]
 8008602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008604:	2301      	movs	r3, #1
 8008606:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008608:	4b3b      	ldr	r3, [pc, #236]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a3a      	ldr	r2, [pc, #232]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800860e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008614:	f7fc fe52 	bl	80052bc <HAL_GetTick>
 8008618:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800861a:	e009      	b.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800861c:	f7fc fe4e 	bl	80052bc <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d902      	bls.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	74fb      	strb	r3, [r7, #19]
        break;
 800862e:	e005      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008630:	4b31      	ldr	r3, [pc, #196]	; (80086f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0ef      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800863c:	7cfb      	ldrb	r3, [r7, #19]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d15c      	bne.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008642:	4b2c      	ldr	r3, [pc, #176]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008648:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d01f      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	429a      	cmp	r2, r3
 800865e:	d019      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008660:	4b24      	ldr	r3, [pc, #144]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800866a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800866c:	4b21      	ldr	r3, [pc, #132]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800866e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008672:	4a20      	ldr	r2, [pc, #128]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800867c:	4b1d      	ldr	r3, [pc, #116]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800867e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008682:	4a1c      	ldr	r2, [pc, #112]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800868c:	4a19      	ldr	r2, [pc, #100]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f003 0301 	and.w	r3, r3, #1
 800869a:	2b00      	cmp	r3, #0
 800869c:	d016      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869e:	f7fc fe0d 	bl	80052bc <HAL_GetTick>
 80086a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086a4:	e00b      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086a6:	f7fc fe09 	bl	80052bc <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d902      	bls.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	74fb      	strb	r3, [r7, #19]
            break;
 80086bc:	e006      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086be:	4b0d      	ldr	r3, [pc, #52]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d0ec      	beq.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80086cc:	7cfb      	ldrb	r3, [r7, #19]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10c      	bne.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086e2:	4904      	ldr	r1, [pc, #16]	; (80086f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80086ea:	e009      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086ec:	7cfb      	ldrb	r3, [r7, #19]
 80086ee:	74bb      	strb	r3, [r7, #18]
 80086f0:	e006      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80086f2:	bf00      	nop
 80086f4:	40021000 	.word	0x40021000
 80086f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fc:	7cfb      	ldrb	r3, [r7, #19]
 80086fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008700:	7c7b      	ldrb	r3, [r7, #17]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d105      	bne.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008706:	4b9e      	ldr	r3, [pc, #632]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870a:	4a9d      	ldr	r2, [pc, #628]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800870c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008710:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800871e:	4b98      	ldr	r3, [pc, #608]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008724:	f023 0203 	bic.w	r2, r3, #3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	4994      	ldr	r1, [pc, #592]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0302 	and.w	r3, r3, #2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008740:	4b8f      	ldr	r3, [pc, #572]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008746:	f023 020c 	bic.w	r2, r3, #12
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874e:	498c      	ldr	r1, [pc, #560]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008750:	4313      	orrs	r3, r2
 8008752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008762:	4b87      	ldr	r3, [pc, #540]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008768:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	4983      	ldr	r1, [pc, #524]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008772:	4313      	orrs	r3, r2
 8008774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008784:	4b7e      	ldr	r3, [pc, #504]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008792:	497b      	ldr	r1, [pc, #492]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008794:	4313      	orrs	r3, r2
 8008796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 0310 	and.w	r3, r3, #16
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80087a6:	4b76      	ldr	r3, [pc, #472]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087b4:	4972      	ldr	r1, [pc, #456]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80087c8:	4b6d      	ldr	r3, [pc, #436]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d6:	496a      	ldr	r1, [pc, #424]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ea:	4b65      	ldr	r3, [pc, #404]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f8:	4961      	ldr	r1, [pc, #388]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800880c:	4b5c      	ldr	r3, [pc, #368]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008812:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800881a:	4959      	ldr	r1, [pc, #356]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800881c:	4313      	orrs	r3, r2
 800881e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882a:	2b00      	cmp	r3, #0
 800882c:	d00a      	beq.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800882e:	4b54      	ldr	r3, [pc, #336]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008834:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883c:	4950      	ldr	r1, [pc, #320]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00a      	beq.n	8008866 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008850:	4b4b      	ldr	r3, [pc, #300]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008856:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885e:	4948      	ldr	r1, [pc, #288]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008860:	4313      	orrs	r3, r2
 8008862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00a      	beq.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008872:	4b43      	ldr	r3, [pc, #268]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	493f      	ldr	r1, [pc, #252]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008882:	4313      	orrs	r3, r2
 8008884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d028      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008894:	4b3a      	ldr	r3, [pc, #232]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088a2:	4937      	ldr	r1, [pc, #220]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088a4:	4313      	orrs	r3, r2
 80088a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088b2:	d106      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088b4:	4b32      	ldr	r3, [pc, #200]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	4a31      	ldr	r2, [pc, #196]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088be:	60d3      	str	r3, [r2, #12]
 80088c0:	e011      	b.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088ca:	d10c      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	3304      	adds	r3, #4
 80088d0:	2101      	movs	r1, #1
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 f8c8 	bl	8008a68 <RCCEx_PLLSAI1_Config>
 80088d8:	4603      	mov	r3, r0
 80088da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80088dc:	7cfb      	ldrb	r3, [r7, #19]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80088e2:	7cfb      	ldrb	r3, [r7, #19]
 80088e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d028      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80088f2:	4b23      	ldr	r3, [pc, #140]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008900:	491f      	ldr	r1, [pc, #124]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008902:	4313      	orrs	r3, r2
 8008904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008910:	d106      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008912:	4b1b      	ldr	r3, [pc, #108]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	4a1a      	ldr	r2, [pc, #104]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008918:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800891c:	60d3      	str	r3, [r2, #12]
 800891e:	e011      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008928:	d10c      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3304      	adds	r3, #4
 800892e:	2101      	movs	r1, #1
 8008930:	4618      	mov	r0, r3
 8008932:	f000 f899 	bl	8008a68 <RCCEx_PLLSAI1_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800893a:	7cfb      	ldrb	r3, [r7, #19]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008940:	7cfb      	ldrb	r3, [r7, #19]
 8008942:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d02b      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008956:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800895e:	4908      	ldr	r1, [pc, #32]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008960:	4313      	orrs	r3, r2
 8008962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800896a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800896e:	d109      	bne.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008970:	4b03      	ldr	r3, [pc, #12]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	4a02      	ldr	r2, [pc, #8]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008976:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800897a:	60d3      	str	r3, [r2, #12]
 800897c:	e014      	b.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800897e:	bf00      	nop
 8008980:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800898c:	d10c      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3304      	adds	r3, #4
 8008992:	2101      	movs	r1, #1
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f867 	bl	8008a68 <RCCEx_PLLSAI1_Config>
 800899a:	4603      	mov	r3, r0
 800899c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800899e:	7cfb      	ldrb	r3, [r7, #19]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80089a4:	7cfb      	ldrb	r3, [r7, #19]
 80089a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d02f      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80089b4:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089c2:	4928      	ldr	r1, [pc, #160]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089d2:	d10d      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3304      	adds	r3, #4
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 f844 	bl	8008a68 <RCCEx_PLLSAI1_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80089e4:	7cfb      	ldrb	r3, [r7, #19]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d014      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80089ea:	7cfb      	ldrb	r3, [r7, #19]
 80089ec:	74bb      	strb	r3, [r7, #18]
 80089ee:	e011      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089f8:	d10c      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3320      	adds	r3, #32
 80089fe:	2102      	movs	r1, #2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f925 	bl	8008c50 <RCCEx_PLLSAI2_Config>
 8008a06:	4603      	mov	r3, r0
 8008a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a0a:	7cfb      	ldrb	r3, [r7, #19]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008a10:	7cfb      	ldrb	r3, [r7, #19]
 8008a12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008a20:	4b10      	ldr	r3, [pc, #64]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a2e:	490d      	ldr	r1, [pc, #52]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a52:	4904      	ldr	r1, [pc, #16]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008a5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	40021000 	.word	0x40021000

08008a68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008a76:	4b75      	ldr	r3, [pc, #468]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d018      	beq.n	8008ab4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008a82:	4b72      	ldr	r3, [pc, #456]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	f003 0203 	and.w	r2, r3, #3
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d10d      	bne.n	8008aae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
       ||
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d009      	beq.n	8008aae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008a9a:	4b6c      	ldr	r3, [pc, #432]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	091b      	lsrs	r3, r3, #4
 8008aa0:	f003 0307 	and.w	r3, r3, #7
 8008aa4:	1c5a      	adds	r2, r3, #1
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	685b      	ldr	r3, [r3, #4]
       ||
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d047      	beq.n	8008b3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	73fb      	strb	r3, [r7, #15]
 8008ab2:	e044      	b.n	8008b3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d018      	beq.n	8008aee <RCCEx_PLLSAI1_Config+0x86>
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d825      	bhi.n	8008b0c <RCCEx_PLLSAI1_Config+0xa4>
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d002      	beq.n	8008aca <RCCEx_PLLSAI1_Config+0x62>
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d009      	beq.n	8008adc <RCCEx_PLLSAI1_Config+0x74>
 8008ac8:	e020      	b.n	8008b0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008aca:	4b60      	ldr	r3, [pc, #384]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d11d      	bne.n	8008b12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ada:	e01a      	b.n	8008b12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008adc:	4b5b      	ldr	r3, [pc, #364]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d116      	bne.n	8008b16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008aec:	e013      	b.n	8008b16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008aee:	4b57      	ldr	r3, [pc, #348]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10f      	bne.n	8008b1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008afa:	4b54      	ldr	r3, [pc, #336]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d109      	bne.n	8008b1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008b0a:	e006      	b.n	8008b1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b10:	e004      	b.n	8008b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008b12:	bf00      	nop
 8008b14:	e002      	b.n	8008b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008b16:	bf00      	nop
 8008b18:	e000      	b.n	8008b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10d      	bne.n	8008b3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008b22:	4b4a      	ldr	r3, [pc, #296]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6819      	ldr	r1, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	3b01      	subs	r3, #1
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	430b      	orrs	r3, r1
 8008b38:	4944      	ldr	r1, [pc, #272]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d17d      	bne.n	8008c40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008b44:	4b41      	ldr	r3, [pc, #260]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a40      	ldr	r2, [pc, #256]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b50:	f7fc fbb4 	bl	80052bc <HAL_GetTick>
 8008b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b56:	e009      	b.n	8008b6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b58:	f7fc fbb0 	bl	80052bc <HAL_GetTick>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d902      	bls.n	8008b6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	73fb      	strb	r3, [r7, #15]
        break;
 8008b6a:	e005      	b.n	8008b78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008b6c:	4b37      	ldr	r3, [pc, #220]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1ef      	bne.n	8008b58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d160      	bne.n	8008c40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d111      	bne.n	8008ba8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b84:	4b31      	ldr	r3, [pc, #196]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	6892      	ldr	r2, [r2, #8]
 8008b94:	0211      	lsls	r1, r2, #8
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	68d2      	ldr	r2, [r2, #12]
 8008b9a:	0912      	lsrs	r2, r2, #4
 8008b9c:	0452      	lsls	r2, r2, #17
 8008b9e:	430a      	orrs	r2, r1
 8008ba0:	492a      	ldr	r1, [pc, #168]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	610b      	str	r3, [r1, #16]
 8008ba6:	e027      	b.n	8008bf8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d112      	bne.n	8008bd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008bae:	4b27      	ldr	r3, [pc, #156]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008bb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6892      	ldr	r2, [r2, #8]
 8008bbe:	0211      	lsls	r1, r2, #8
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6912      	ldr	r2, [r2, #16]
 8008bc4:	0852      	lsrs	r2, r2, #1
 8008bc6:	3a01      	subs	r2, #1
 8008bc8:	0552      	lsls	r2, r2, #21
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	491f      	ldr	r1, [pc, #124]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	610b      	str	r3, [r1, #16]
 8008bd2:	e011      	b.n	8008bf8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008bd4:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	6892      	ldr	r2, [r2, #8]
 8008be4:	0211      	lsls	r1, r2, #8
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6952      	ldr	r2, [r2, #20]
 8008bea:	0852      	lsrs	r2, r2, #1
 8008bec:	3a01      	subs	r2, #1
 8008bee:	0652      	lsls	r2, r2, #25
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	4916      	ldr	r1, [pc, #88]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008bf8:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a13      	ldr	r2, [pc, #76]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c04:	f7fc fb5a 	bl	80052bc <HAL_GetTick>
 8008c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c0a:	e009      	b.n	8008c20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c0c:	f7fc fb56 	bl	80052bc <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d902      	bls.n	8008c20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8008c1e:	e005      	b.n	8008c2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008c20:	4b0a      	ldr	r3, [pc, #40]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d0ef      	beq.n	8008c0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d106      	bne.n	8008c40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008c32:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c34:	691a      	ldr	r2, [r3, #16]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	4904      	ldr	r1, [pc, #16]	; (8008c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	40021000 	.word	0x40021000

08008c50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008c5e:	4b6a      	ldr	r3, [pc, #424]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d018      	beq.n	8008c9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008c6a:	4b67      	ldr	r3, [pc, #412]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f003 0203 	and.w	r2, r3, #3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d10d      	bne.n	8008c96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d009      	beq.n	8008c96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008c82:	4b61      	ldr	r3, [pc, #388]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	091b      	lsrs	r3, r3, #4
 8008c88:	f003 0307 	and.w	r3, r3, #7
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	685b      	ldr	r3, [r3, #4]
       ||
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d047      	beq.n	8008d26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	73fb      	strb	r3, [r7, #15]
 8008c9a:	e044      	b.n	8008d26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d018      	beq.n	8008cd6 <RCCEx_PLLSAI2_Config+0x86>
 8008ca4:	2b03      	cmp	r3, #3
 8008ca6:	d825      	bhi.n	8008cf4 <RCCEx_PLLSAI2_Config+0xa4>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d002      	beq.n	8008cb2 <RCCEx_PLLSAI2_Config+0x62>
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d009      	beq.n	8008cc4 <RCCEx_PLLSAI2_Config+0x74>
 8008cb0:	e020      	b.n	8008cf4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008cb2:	4b55      	ldr	r3, [pc, #340]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d11d      	bne.n	8008cfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cc2:	e01a      	b.n	8008cfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008cc4:	4b50      	ldr	r3, [pc, #320]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d116      	bne.n	8008cfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008cd4:	e013      	b.n	8008cfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008cd6:	4b4c      	ldr	r3, [pc, #304]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d10f      	bne.n	8008d02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008ce2:	4b49      	ldr	r3, [pc, #292]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008cf2:	e006      	b.n	8008d02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf8:	e004      	b.n	8008d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008cfa:	bf00      	nop
 8008cfc:	e002      	b.n	8008d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008cfe:	bf00      	nop
 8008d00:	e000      	b.n	8008d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10d      	bne.n	8008d26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008d0a:	4b3f      	ldr	r3, [pc, #252]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6819      	ldr	r1, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	011b      	lsls	r3, r3, #4
 8008d1e:	430b      	orrs	r3, r1
 8008d20:	4939      	ldr	r1, [pc, #228]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d167      	bne.n	8008dfc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008d2c:	4b36      	ldr	r3, [pc, #216]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a35      	ldr	r2, [pc, #212]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d38:	f7fc fac0 	bl	80052bc <HAL_GetTick>
 8008d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d3e:	e009      	b.n	8008d54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d40:	f7fc fabc 	bl	80052bc <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d902      	bls.n	8008d54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	73fb      	strb	r3, [r7, #15]
        break;
 8008d52:	e005      	b.n	8008d60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008d54:	4b2c      	ldr	r3, [pc, #176]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d1ef      	bne.n	8008d40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d14a      	bne.n	8008dfc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d111      	bne.n	8008d90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d6c:	4b26      	ldr	r3, [pc, #152]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d6e:	695b      	ldr	r3, [r3, #20]
 8008d70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6892      	ldr	r2, [r2, #8]
 8008d7c:	0211      	lsls	r1, r2, #8
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	68d2      	ldr	r2, [r2, #12]
 8008d82:	0912      	lsrs	r2, r2, #4
 8008d84:	0452      	lsls	r2, r2, #17
 8008d86:	430a      	orrs	r2, r1
 8008d88:	491f      	ldr	r1, [pc, #124]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	614b      	str	r3, [r1, #20]
 8008d8e:	e011      	b.n	8008db4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008d90:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d98:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6892      	ldr	r2, [r2, #8]
 8008da0:	0211      	lsls	r1, r2, #8
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	6912      	ldr	r2, [r2, #16]
 8008da6:	0852      	lsrs	r2, r2, #1
 8008da8:	3a01      	subs	r2, #1
 8008daa:	0652      	lsls	r2, r2, #25
 8008dac:	430a      	orrs	r2, r1
 8008dae:	4916      	ldr	r1, [pc, #88]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008db4:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc0:	f7fc fa7c 	bl	80052bc <HAL_GetTick>
 8008dc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008dc6:	e009      	b.n	8008ddc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008dc8:	f7fc fa78 	bl	80052bc <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d902      	bls.n	8008ddc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	73fb      	strb	r3, [r7, #15]
          break;
 8008dda:	e005      	b.n	8008de8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d0ef      	beq.n	8008dc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d106      	bne.n	8008dfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008dee:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008df0:	695a      	ldr	r2, [r3, #20]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	4904      	ldr	r1, [pc, #16]	; (8008e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	40021000 	.word	0x40021000

08008e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e049      	b.n	8008eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7f9 fa4e 	bl	80022d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2202      	movs	r2, #2
 8008e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3304      	adds	r3, #4
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	f000 fb1a 	bl	8009484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2201      	movs	r2, #1
 8008e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e049      	b.n	8008f60 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d106      	bne.n	8008ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f841 	bl	8008f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4610      	mov	r0, r2
 8008efa:	f000 fac3 	bl	8009484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e097      	b.n	80090c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7f9 f951 	bl	800224c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2202      	movs	r2, #2
 8008fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	6812      	ldr	r2, [r2, #0]
 8008fbc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008fc0:	f023 0307 	bic.w	r3, r3, #7
 8008fc4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f000 fa57 	bl	8009484 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ffe:	f023 0303 	bic.w	r3, r3, #3
 8009002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	689a      	ldr	r2, [r3, #8]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	4313      	orrs	r3, r2
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	4313      	orrs	r3, r2
 8009014:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800901c:	f023 030c 	bic.w	r3, r3, #12
 8009020:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009028:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800902c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	68da      	ldr	r2, [r3, #12]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	4313      	orrs	r3, r2
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4313      	orrs	r3, r2
 800903e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	011a      	lsls	r2, r3, #4
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	031b      	lsls	r3, r3, #12
 800904c:	4313      	orrs	r3, r2
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4313      	orrs	r3, r2
 8009052:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800905a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009062:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	695b      	ldr	r3, [r3, #20]
 800906c:	011b      	lsls	r3, r3, #4
 800906e:	4313      	orrs	r3, r2
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	4313      	orrs	r3, r2
 8009074:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2201      	movs	r2, #1
 80090a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090e2:	2302      	movs	r3, #2
 80090e4:	e0ff      	b.n	80092e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2b14      	cmp	r3, #20
 80090f2:	f200 80f0 	bhi.w	80092d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80090f6:	a201      	add	r2, pc, #4	; (adr r2, 80090fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090fc:	08009151 	.word	0x08009151
 8009100:	080092d7 	.word	0x080092d7
 8009104:	080092d7 	.word	0x080092d7
 8009108:	080092d7 	.word	0x080092d7
 800910c:	08009191 	.word	0x08009191
 8009110:	080092d7 	.word	0x080092d7
 8009114:	080092d7 	.word	0x080092d7
 8009118:	080092d7 	.word	0x080092d7
 800911c:	080091d3 	.word	0x080091d3
 8009120:	080092d7 	.word	0x080092d7
 8009124:	080092d7 	.word	0x080092d7
 8009128:	080092d7 	.word	0x080092d7
 800912c:	08009213 	.word	0x08009213
 8009130:	080092d7 	.word	0x080092d7
 8009134:	080092d7 	.word	0x080092d7
 8009138:	080092d7 	.word	0x080092d7
 800913c:	08009255 	.word	0x08009255
 8009140:	080092d7 	.word	0x080092d7
 8009144:	080092d7 	.word	0x080092d7
 8009148:	080092d7 	.word	0x080092d7
 800914c:	08009295 	.word	0x08009295
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fa2e 	bl	80095b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	699a      	ldr	r2, [r3, #24]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0208 	orr.w	r2, r2, #8
 800916a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0204 	bic.w	r2, r2, #4
 800917a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6999      	ldr	r1, [r3, #24]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	691a      	ldr	r2, [r3, #16]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	619a      	str	r2, [r3, #24]
      break;
 800918e:	e0a5      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fa9e 	bl	80096d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	699a      	ldr	r2, [r3, #24]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6999      	ldr	r1, [r3, #24]
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	021a      	lsls	r2, r3, #8
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	619a      	str	r2, [r3, #24]
      break;
 80091d0:	e084      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fb07 	bl	80097ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	69da      	ldr	r2, [r3, #28]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f042 0208 	orr.w	r2, r2, #8
 80091ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69da      	ldr	r2, [r3, #28]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0204 	bic.w	r2, r2, #4
 80091fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69d9      	ldr	r1, [r3, #28]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	61da      	str	r2, [r3, #28]
      break;
 8009210:	e064      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	4618      	mov	r0, r3
 800921a:	f000 fb6f 	bl	80098fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	69da      	ldr	r2, [r3, #28]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800922c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	69da      	ldr	r2, [r3, #28]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800923c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	69d9      	ldr	r1, [r3, #28]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	021a      	lsls	r2, r3, #8
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	61da      	str	r2, [r3, #28]
      break;
 8009252:	e043      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68b9      	ldr	r1, [r7, #8]
 800925a:	4618      	mov	r0, r3
 800925c:	f000 fbb8 	bl	80099d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0208 	orr.w	r2, r2, #8
 800926e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f022 0204 	bic.w	r2, r2, #4
 800927e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009286:	68bb      	ldr	r3, [r7, #8]
 8009288:	691a      	ldr	r2, [r3, #16]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	430a      	orrs	r2, r1
 8009290:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009292:	e023      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fbfc 	bl	8009a98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	021a      	lsls	r2, r3, #8
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092d4:	e002      	b.n	80092dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	75fb      	strb	r3, [r7, #23]
      break;
 80092da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop

080092f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b084      	sub	sp, #16
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_TIM_ConfigClockSource+0x1c>
 8009308:	2302      	movs	r3, #2
 800930a:	e0b6      	b.n	800947a <HAL_TIM_ConfigClockSource+0x18a>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800932a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800932e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009348:	d03e      	beq.n	80093c8 <HAL_TIM_ConfigClockSource+0xd8>
 800934a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800934e:	f200 8087 	bhi.w	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009356:	f000 8086 	beq.w	8009466 <HAL_TIM_ConfigClockSource+0x176>
 800935a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935e:	d87f      	bhi.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009360:	2b70      	cmp	r3, #112	; 0x70
 8009362:	d01a      	beq.n	800939a <HAL_TIM_ConfigClockSource+0xaa>
 8009364:	2b70      	cmp	r3, #112	; 0x70
 8009366:	d87b      	bhi.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009368:	2b60      	cmp	r3, #96	; 0x60
 800936a:	d050      	beq.n	800940e <HAL_TIM_ConfigClockSource+0x11e>
 800936c:	2b60      	cmp	r3, #96	; 0x60
 800936e:	d877      	bhi.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009370:	2b50      	cmp	r3, #80	; 0x50
 8009372:	d03c      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0xfe>
 8009374:	2b50      	cmp	r3, #80	; 0x50
 8009376:	d873      	bhi.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009378:	2b40      	cmp	r3, #64	; 0x40
 800937a:	d058      	beq.n	800942e <HAL_TIM_ConfigClockSource+0x13e>
 800937c:	2b40      	cmp	r3, #64	; 0x40
 800937e:	d86f      	bhi.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009380:	2b30      	cmp	r3, #48	; 0x30
 8009382:	d064      	beq.n	800944e <HAL_TIM_ConfigClockSource+0x15e>
 8009384:	2b30      	cmp	r3, #48	; 0x30
 8009386:	d86b      	bhi.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009388:	2b20      	cmp	r3, #32
 800938a:	d060      	beq.n	800944e <HAL_TIM_ConfigClockSource+0x15e>
 800938c:	2b20      	cmp	r3, #32
 800938e:	d867      	bhi.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
 8009390:	2b00      	cmp	r3, #0
 8009392:	d05c      	beq.n	800944e <HAL_TIM_ConfigClockSource+0x15e>
 8009394:	2b10      	cmp	r3, #16
 8009396:	d05a      	beq.n	800944e <HAL_TIM_ConfigClockSource+0x15e>
 8009398:	e062      	b.n	8009460 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	6899      	ldr	r1, [r3, #8]
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f000 fc55 	bl	8009c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	609a      	str	r2, [r3, #8]
      break;
 80093c6:	e04f      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6818      	ldr	r0, [r3, #0]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	6899      	ldr	r1, [r3, #8]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f000 fc3e 	bl	8009c58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ea:	609a      	str	r2, [r3, #8]
      break;
 80093ec:	e03c      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	6859      	ldr	r1, [r3, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	f000 fbb2 	bl	8009b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2150      	movs	r1, #80	; 0x50
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fc0b 	bl	8009c22 <TIM_ITRx_SetConfig>
      break;
 800940c:	e02c      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6818      	ldr	r0, [r3, #0]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6859      	ldr	r1, [r3, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	461a      	mov	r2, r3
 800941c:	f000 fbd1 	bl	8009bc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2160      	movs	r1, #96	; 0x60
 8009426:	4618      	mov	r0, r3
 8009428:	f000 fbfb 	bl	8009c22 <TIM_ITRx_SetConfig>
      break;
 800942c:	e01c      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	6859      	ldr	r1, [r3, #4]
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	461a      	mov	r2, r3
 800943c:	f000 fb92 	bl	8009b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2140      	movs	r1, #64	; 0x40
 8009446:	4618      	mov	r0, r3
 8009448:	f000 fbeb 	bl	8009c22 <TIM_ITRx_SetConfig>
      break;
 800944c:	e00c      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f000 fbe2 	bl	8009c22 <TIM_ITRx_SetConfig>
      break;
 800945e:	e003      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	73fb      	strb	r3, [r7, #15]
      break;
 8009464:	e000      	b.n	8009468 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009478:	7bfb      	ldrb	r3, [r7, #15]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a40      	ldr	r2, [pc, #256]	; (8009598 <TIM_Base_SetConfig+0x114>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d013      	beq.n	80094c4 <TIM_Base_SetConfig+0x40>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a2:	d00f      	beq.n	80094c4 <TIM_Base_SetConfig+0x40>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a3d      	ldr	r2, [pc, #244]	; (800959c <TIM_Base_SetConfig+0x118>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00b      	beq.n	80094c4 <TIM_Base_SetConfig+0x40>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a3c      	ldr	r2, [pc, #240]	; (80095a0 <TIM_Base_SetConfig+0x11c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d007      	beq.n	80094c4 <TIM_Base_SetConfig+0x40>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a3b      	ldr	r2, [pc, #236]	; (80095a4 <TIM_Base_SetConfig+0x120>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d003      	beq.n	80094c4 <TIM_Base_SetConfig+0x40>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a3a      	ldr	r2, [pc, #232]	; (80095a8 <TIM_Base_SetConfig+0x124>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d108      	bne.n	80094d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	68fa      	ldr	r2, [r7, #12]
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a2f      	ldr	r2, [pc, #188]	; (8009598 <TIM_Base_SetConfig+0x114>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d01f      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094e4:	d01b      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a2c      	ldr	r2, [pc, #176]	; (800959c <TIM_Base_SetConfig+0x118>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d017      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a2b      	ldr	r2, [pc, #172]	; (80095a0 <TIM_Base_SetConfig+0x11c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d013      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a2a      	ldr	r2, [pc, #168]	; (80095a4 <TIM_Base_SetConfig+0x120>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00f      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a29      	ldr	r2, [pc, #164]	; (80095a8 <TIM_Base_SetConfig+0x124>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d00b      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a28      	ldr	r2, [pc, #160]	; (80095ac <TIM_Base_SetConfig+0x128>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d007      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a27      	ldr	r2, [pc, #156]	; (80095b0 <TIM_Base_SetConfig+0x12c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d003      	beq.n	800951e <TIM_Base_SetConfig+0x9a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a26      	ldr	r2, [pc, #152]	; (80095b4 <TIM_Base_SetConfig+0x130>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d108      	bne.n	8009530 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a10      	ldr	r2, [pc, #64]	; (8009598 <TIM_Base_SetConfig+0x114>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d00f      	beq.n	800957c <TIM_Base_SetConfig+0xf8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a12      	ldr	r2, [pc, #72]	; (80095a8 <TIM_Base_SetConfig+0x124>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00b      	beq.n	800957c <TIM_Base_SetConfig+0xf8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a11      	ldr	r2, [pc, #68]	; (80095ac <TIM_Base_SetConfig+0x128>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d007      	beq.n	800957c <TIM_Base_SetConfig+0xf8>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a10      	ldr	r2, [pc, #64]	; (80095b0 <TIM_Base_SetConfig+0x12c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d003      	beq.n	800957c <TIM_Base_SetConfig+0xf8>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a0f      	ldr	r2, [pc, #60]	; (80095b4 <TIM_Base_SetConfig+0x130>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d103      	bne.n	8009584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	691a      	ldr	r2, [r3, #16]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	615a      	str	r2, [r3, #20]
}
 800958a:	bf00      	nop
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	40012c00 	.word	0x40012c00
 800959c:	40000400 	.word	0x40000400
 80095a0:	40000800 	.word	0x40000800
 80095a4:	40000c00 	.word	0x40000c00
 80095a8:	40013400 	.word	0x40013400
 80095ac:	40014000 	.word	0x40014000
 80095b0:	40014400 	.word	0x40014400
 80095b4:	40014800 	.word	0x40014800

080095b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f023 0201 	bic.w	r2, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f023 0302 	bic.w	r3, r3, #2
 8009604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a2c      	ldr	r2, [pc, #176]	; (80096c4 <TIM_OC1_SetConfig+0x10c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d00f      	beq.n	8009638 <TIM_OC1_SetConfig+0x80>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a2b      	ldr	r2, [pc, #172]	; (80096c8 <TIM_OC1_SetConfig+0x110>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00b      	beq.n	8009638 <TIM_OC1_SetConfig+0x80>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a2a      	ldr	r2, [pc, #168]	; (80096cc <TIM_OC1_SetConfig+0x114>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d007      	beq.n	8009638 <TIM_OC1_SetConfig+0x80>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a29      	ldr	r2, [pc, #164]	; (80096d0 <TIM_OC1_SetConfig+0x118>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d003      	beq.n	8009638 <TIM_OC1_SetConfig+0x80>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a28      	ldr	r2, [pc, #160]	; (80096d4 <TIM_OC1_SetConfig+0x11c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d10c      	bne.n	8009652 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	f023 0308 	bic.w	r3, r3, #8
 800963e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f023 0304 	bic.w	r3, r3, #4
 8009650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a1b      	ldr	r2, [pc, #108]	; (80096c4 <TIM_OC1_SetConfig+0x10c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d00f      	beq.n	800967a <TIM_OC1_SetConfig+0xc2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1a      	ldr	r2, [pc, #104]	; (80096c8 <TIM_OC1_SetConfig+0x110>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00b      	beq.n	800967a <TIM_OC1_SetConfig+0xc2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a19      	ldr	r2, [pc, #100]	; (80096cc <TIM_OC1_SetConfig+0x114>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d007      	beq.n	800967a <TIM_OC1_SetConfig+0xc2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a18      	ldr	r2, [pc, #96]	; (80096d0 <TIM_OC1_SetConfig+0x118>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d003      	beq.n	800967a <TIM_OC1_SetConfig+0xc2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a17      	ldr	r2, [pc, #92]	; (80096d4 <TIM_OC1_SetConfig+0x11c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d111      	bne.n	800969e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	4313      	orrs	r3, r2
 8009692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	4313      	orrs	r3, r2
 800969c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	621a      	str	r2, [r3, #32]
}
 80096b8:	bf00      	nop
 80096ba:	371c      	adds	r7, #28
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	40012c00 	.word	0x40012c00
 80096c8:	40013400 	.word	0x40013400
 80096cc:	40014000 	.word	0x40014000
 80096d0:	40014400 	.word	0x40014400
 80096d4:	40014800 	.word	0x40014800

080096d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096d8:	b480      	push	{r7}
 80096da:	b087      	sub	sp, #28
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f023 0210 	bic.w	r2, r3, #16
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800970a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	021b      	lsls	r3, r3, #8
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f023 0320 	bic.w	r3, r3, #32
 8009726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	011b      	lsls	r3, r3, #4
 800972e:	697a      	ldr	r2, [r7, #20]
 8009730:	4313      	orrs	r3, r2
 8009732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a28      	ldr	r2, [pc, #160]	; (80097d8 <TIM_OC2_SetConfig+0x100>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d003      	beq.n	8009744 <TIM_OC2_SetConfig+0x6c>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a27      	ldr	r2, [pc, #156]	; (80097dc <TIM_OC2_SetConfig+0x104>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d10d      	bne.n	8009760 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800974a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	011b      	lsls	r3, r3, #4
 8009752:	697a      	ldr	r2, [r7, #20]
 8009754:	4313      	orrs	r3, r2
 8009756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800975e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a1d      	ldr	r2, [pc, #116]	; (80097d8 <TIM_OC2_SetConfig+0x100>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d00f      	beq.n	8009788 <TIM_OC2_SetConfig+0xb0>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a1c      	ldr	r2, [pc, #112]	; (80097dc <TIM_OC2_SetConfig+0x104>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00b      	beq.n	8009788 <TIM_OC2_SetConfig+0xb0>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a1b      	ldr	r2, [pc, #108]	; (80097e0 <TIM_OC2_SetConfig+0x108>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d007      	beq.n	8009788 <TIM_OC2_SetConfig+0xb0>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a1a      	ldr	r2, [pc, #104]	; (80097e4 <TIM_OC2_SetConfig+0x10c>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d003      	beq.n	8009788 <TIM_OC2_SetConfig+0xb0>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a19      	ldr	r2, [pc, #100]	; (80097e8 <TIM_OC2_SetConfig+0x110>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d113      	bne.n	80097b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800978e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	695b      	ldr	r3, [r3, #20]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	621a      	str	r2, [r3, #32]
}
 80097ca:	bf00      	nop
 80097cc:	371c      	adds	r7, #28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	40012c00 	.word	0x40012c00
 80097dc:	40013400 	.word	0x40013400
 80097e0:	40014000 	.word	0x40014000
 80097e4:	40014400 	.word	0x40014400
 80097e8:	40014800 	.word	0x40014800

080097ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a1b      	ldr	r3, [r3, #32]
 80097fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800981a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 0303 	bic.w	r3, r3, #3
 8009826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	021b      	lsls	r3, r3, #8
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a27      	ldr	r2, [pc, #156]	; (80098e8 <TIM_OC3_SetConfig+0xfc>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d003      	beq.n	8009856 <TIM_OC3_SetConfig+0x6a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a26      	ldr	r2, [pc, #152]	; (80098ec <TIM_OC3_SetConfig+0x100>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d10d      	bne.n	8009872 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800985c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	021b      	lsls	r3, r3, #8
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	4313      	orrs	r3, r2
 8009868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a1c      	ldr	r2, [pc, #112]	; (80098e8 <TIM_OC3_SetConfig+0xfc>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00f      	beq.n	800989a <TIM_OC3_SetConfig+0xae>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a1b      	ldr	r2, [pc, #108]	; (80098ec <TIM_OC3_SetConfig+0x100>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d00b      	beq.n	800989a <TIM_OC3_SetConfig+0xae>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a1a      	ldr	r2, [pc, #104]	; (80098f0 <TIM_OC3_SetConfig+0x104>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d007      	beq.n	800989a <TIM_OC3_SetConfig+0xae>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a19      	ldr	r2, [pc, #100]	; (80098f4 <TIM_OC3_SetConfig+0x108>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d003      	beq.n	800989a <TIM_OC3_SetConfig+0xae>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a18      	ldr	r2, [pc, #96]	; (80098f8 <TIM_OC3_SetConfig+0x10c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d113      	bne.n	80098c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	011b      	lsls	r3, r3, #4
 80098bc:	693a      	ldr	r2, [r7, #16]
 80098be:	4313      	orrs	r3, r2
 80098c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	621a      	str	r2, [r3, #32]
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	40012c00 	.word	0x40012c00
 80098ec:	40013400 	.word	0x40013400
 80098f0:	40014000 	.word	0x40014000
 80098f4:	40014400 	.word	0x40014400
 80098f8:	40014800 	.word	0x40014800

080098fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	69db      	ldr	r3, [r3, #28]
 8009922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800992a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800992e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4313      	orrs	r3, r2
 8009942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800994a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	031b      	lsls	r3, r3, #12
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	4313      	orrs	r3, r2
 8009956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a18      	ldr	r2, [pc, #96]	; (80099bc <TIM_OC4_SetConfig+0xc0>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00f      	beq.n	8009980 <TIM_OC4_SetConfig+0x84>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a17      	ldr	r2, [pc, #92]	; (80099c0 <TIM_OC4_SetConfig+0xc4>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d00b      	beq.n	8009980 <TIM_OC4_SetConfig+0x84>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a16      	ldr	r2, [pc, #88]	; (80099c4 <TIM_OC4_SetConfig+0xc8>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d007      	beq.n	8009980 <TIM_OC4_SetConfig+0x84>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a15      	ldr	r2, [pc, #84]	; (80099c8 <TIM_OC4_SetConfig+0xcc>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d003      	beq.n	8009980 <TIM_OC4_SetConfig+0x84>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a14      	ldr	r2, [pc, #80]	; (80099cc <TIM_OC4_SetConfig+0xd0>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d109      	bne.n	8009994 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	695b      	ldr	r3, [r3, #20]
 800998c:	019b      	lsls	r3, r3, #6
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	4313      	orrs	r3, r2
 8009992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	621a      	str	r2, [r3, #32]
}
 80099ae:	bf00      	nop
 80099b0:	371c      	adds	r7, #28
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	40012c00 	.word	0x40012c00
 80099c0:	40013400 	.word	0x40013400
 80099c4:	40014000 	.word	0x40014000
 80099c8:	40014400 	.word	0x40014400
 80099cc:	40014800 	.word	0x40014800

080099d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b087      	sub	sp, #28
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	041b      	lsls	r3, r3, #16
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a17      	ldr	r2, [pc, #92]	; (8009a84 <TIM_OC5_SetConfig+0xb4>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00f      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a16      	ldr	r2, [pc, #88]	; (8009a88 <TIM_OC5_SetConfig+0xb8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00b      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a15      	ldr	r2, [pc, #84]	; (8009a8c <TIM_OC5_SetConfig+0xbc>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d007      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a14      	ldr	r2, [pc, #80]	; (8009a90 <TIM_OC5_SetConfig+0xc0>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d003      	beq.n	8009a4a <TIM_OC5_SetConfig+0x7a>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a13      	ldr	r2, [pc, #76]	; (8009a94 <TIM_OC5_SetConfig+0xc4>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d109      	bne.n	8009a5e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	021b      	lsls	r3, r3, #8
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	685a      	ldr	r2, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	621a      	str	r2, [r3, #32]
}
 8009a78:	bf00      	nop
 8009a7a:	371c      	adds	r7, #28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr
 8009a84:	40012c00 	.word	0x40012c00
 8009a88:	40013400 	.word	0x40013400
 8009a8c:	40014000 	.word	0x40014000
 8009a90:	40014400 	.word	0x40014400
 8009a94:	40014800 	.word	0x40014800

08009a98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	051b      	lsls	r3, r3, #20
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a18      	ldr	r2, [pc, #96]	; (8009b50 <TIM_OC6_SetConfig+0xb8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d00f      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a17      	ldr	r2, [pc, #92]	; (8009b54 <TIM_OC6_SetConfig+0xbc>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00b      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a16      	ldr	r2, [pc, #88]	; (8009b58 <TIM_OC6_SetConfig+0xc0>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d007      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a15      	ldr	r2, [pc, #84]	; (8009b5c <TIM_OC6_SetConfig+0xc4>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d003      	beq.n	8009b14 <TIM_OC6_SetConfig+0x7c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a14      	ldr	r2, [pc, #80]	; (8009b60 <TIM_OC6_SetConfig+0xc8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d109      	bne.n	8009b28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	029b      	lsls	r3, r3, #10
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	621a      	str	r2, [r3, #32]
}
 8009b42:	bf00      	nop
 8009b44:	371c      	adds	r7, #28
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	40012c00 	.word	0x40012c00
 8009b54:	40013400 	.word	0x40013400
 8009b58:	40014000 	.word	0x40014000
 8009b5c:	40014400 	.word	0x40014400
 8009b60:	40014800 	.word	0x40014800

08009b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	f023 0201 	bic.w	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f023 030a 	bic.w	r3, r3, #10
 8009ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	621a      	str	r2, [r3, #32]
}
 8009bb6:	bf00      	nop
 8009bb8:	371c      	adds	r7, #28
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b087      	sub	sp, #28
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	60f8      	str	r0, [r7, #12]
 8009bca:	60b9      	str	r1, [r7, #8]
 8009bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f023 0210 	bic.w	r2, r3, #16
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009bec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	031b      	lsls	r3, r3, #12
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009bfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	621a      	str	r2, [r3, #32]
}
 8009c16:	bf00      	nop
 8009c18:	371c      	adds	r7, #28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr

08009c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c22:	b480      	push	{r7}
 8009c24:	b085      	sub	sp, #20
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	f043 0307 	orr.w	r3, r3, #7
 8009c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	609a      	str	r2, [r3, #8]
}
 8009c4c:	bf00      	nop
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
 8009c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	021a      	lsls	r2, r3, #8
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	609a      	str	r2, [r3, #8]
}
 8009c8c:	bf00      	nop
 8009c8e:	371c      	adds	r7, #28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e068      	b.n	8009d82 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a2e      	ldr	r2, [pc, #184]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d004      	beq.n	8009ce4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a2d      	ldr	r2, [pc, #180]	; (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d108      	bne.n	8009cf6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cfc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	4313      	orrs	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a1e      	ldr	r2, [pc, #120]	; (8009d90 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d01d      	beq.n	8009d56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d22:	d018      	beq.n	8009d56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a1b      	ldr	r2, [pc, #108]	; (8009d98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d013      	beq.n	8009d56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4a1a      	ldr	r2, [pc, #104]	; (8009d9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d00e      	beq.n	8009d56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a18      	ldr	r2, [pc, #96]	; (8009da0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d009      	beq.n	8009d56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a13      	ldr	r2, [pc, #76]	; (8009d94 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d004      	beq.n	8009d56 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a14      	ldr	r2, [pc, #80]	; (8009da4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d10c      	bne.n	8009d70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	40012c00 	.word	0x40012c00
 8009d94:	40013400 	.word	0x40013400
 8009d98:	40000400 	.word	0x40000400
 8009d9c:	40000800 	.word	0x40000800
 8009da0:	40000c00 	.word	0x40000c00
 8009da4:	40014000 	.word	0x40014000

08009da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009db2:	2300      	movs	r3, #0
 8009db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d101      	bne.n	8009dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	e065      	b.n	8009e90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	4313      	orrs	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	4313      	orrs	r3, r2
 8009df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	041b      	lsls	r3, r3, #16
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a16      	ldr	r2, [pc, #88]	; (8009e9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d004      	beq.n	8009e52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a14      	ldr	r2, [pc, #80]	; (8009ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d115      	bne.n	8009e7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	051b      	lsls	r3, r3, #20
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	69db      	ldr	r3, [r3, #28]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	6a1b      	ldr	r3, [r3, #32]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3714      	adds	r7, #20
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	40012c00 	.word	0x40012c00
 8009ea0:	40013400 	.word	0x40013400

08009ea4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e040      	b.n	8009f38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7f8 fab4 	bl	8002434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2224      	movs	r2, #36	; 0x24
 8009ed0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f022 0201 	bic.w	r2, r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fb92 	bl	800a60c <UART_SetConfig>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d101      	bne.n	8009ef2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e022      	b.n	8009f38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d002      	beq.n	8009f00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fe3e 	bl	800ab7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f042 0201 	orr.w	r2, r2, #1
 8009f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fec5 	bl	800acc0 <UART_CheckIdleState>
 8009f36:	4603      	mov	r3, r0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b08b      	sub	sp, #44	; 0x2c
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009f52:	2b20      	cmp	r3, #32
 8009f54:	d156      	bne.n	800a004 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <HAL_UART_Transmit_IT+0x22>
 8009f5c:	88fb      	ldrh	r3, [r7, #6]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d101      	bne.n	8009f66 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	e04f      	b.n	800a006 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d101      	bne.n	8009f74 <HAL_UART_Transmit_IT+0x34>
 8009f70:	2302      	movs	r3, #2
 8009f72:	e048      	b.n	800a006 <HAL_UART_Transmit_IT+0xc6>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	88fa      	ldrh	r2, [r7, #6]
 8009f86:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	88fa      	ldrh	r2, [r7, #6]
 8009f8e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2221      	movs	r2, #33	; 0x21
 8009fa4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fae:	d107      	bne.n	8009fc0 <HAL_UART_Transmit_IT+0x80>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d103      	bne.n	8009fc0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	4a16      	ldr	r2, [pc, #88]	; (800a014 <HAL_UART_Transmit_IT+0xd4>)
 8009fbc:	669a      	str	r2, [r3, #104]	; 0x68
 8009fbe:	e002      	b.n	8009fc6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4a15      	ldr	r2, [pc, #84]	; (800a018 <HAL_UART_Transmit_IT+0xd8>)
 8009fc4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	e853 3f00 	ldrex	r3, [r3]
 8009fda:	613b      	str	r3, [r7, #16]
   return(result);
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	623b      	str	r3, [r7, #32]
 8009fee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff0:	69f9      	ldr	r1, [r7, #28]
 8009ff2:	6a3a      	ldr	r2, [r7, #32]
 8009ff4:	e841 2300 	strex	r3, r2, [r1]
 8009ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e6      	bne.n	8009fce <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800a000:	2300      	movs	r3, #0
 800a002:	e000      	b.n	800a006 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800a004:	2302      	movs	r3, #2
  }
}
 800a006:	4618      	mov	r0, r3
 800a008:	372c      	adds	r7, #44	; 0x2c
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	0800b085 	.word	0x0800b085
 800a018:	0800afcd 	.word	0x0800afcd

0800a01c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b0ba      	sub	sp, #232	; 0xe8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	69db      	ldr	r3, [r3, #28]
 800a02a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a042:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a046:	f640 030f 	movw	r3, #2063	; 0x80f
 800a04a:	4013      	ands	r3, r2
 800a04c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a054:	2b00      	cmp	r3, #0
 800a056:	d115      	bne.n	800a084 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a05c:	f003 0320 	and.w	r3, r3, #32
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00f      	beq.n	800a084 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a068:	f003 0320 	and.w	r3, r3, #32
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d009      	beq.n	800a084 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 82a6 	beq.w	800a5c6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	4798      	blx	r3
      }
      return;
 800a082:	e2a0      	b.n	800a5c6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800a084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f000 8117 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a08e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a092:	f003 0301 	and.w	r3, r3, #1
 800a096:	2b00      	cmp	r3, #0
 800a098:	d106      	bne.n	800a0a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a09a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a09e:	4b85      	ldr	r3, [pc, #532]	; (800a2b4 <HAL_UART_IRQHandler+0x298>)
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f000 810a 	beq.w	800a2bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a0a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d011      	beq.n	800a0d8 <HAL_UART_IRQHandler+0xbc>
 800a0b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00b      	beq.n	800a0d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0ce:	f043 0201 	orr.w	r2, r3, #1
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d011      	beq.n	800a108 <HAL_UART_IRQHandler+0xec>
 800a0e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00b      	beq.n	800a108 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0fe:	f043 0204 	orr.w	r2, r3, #4
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d011      	beq.n	800a138 <HAL_UART_IRQHandler+0x11c>
 800a114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2204      	movs	r2, #4
 800a126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a12e:	f043 0202 	orr.w	r2, r3, #2
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a13c:	f003 0308 	and.w	r3, r3, #8
 800a140:	2b00      	cmp	r3, #0
 800a142:	d017      	beq.n	800a174 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a148:	f003 0320 	and.w	r3, r3, #32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a154:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2208      	movs	r2, #8
 800a162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a16a:	f043 0208 	orr.w	r2, r3, #8
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a178:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d012      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x18a>
 800a180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a184:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00c      	beq.n	800a1a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a19c:	f043 0220 	orr.w	r2, r3, #32
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 820c 	beq.w	800a5ca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a1b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b6:	f003 0320 	and.w	r3, r3, #32
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00d      	beq.n	800a1da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a1be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1c2:	f003 0320 	and.w	r3, r3, #32
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d007      	beq.n	800a1da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d003      	beq.n	800a1da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d005      	beq.n	800a1fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a1f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d04f      	beq.n	800a29e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fe6b 	bl	800aeda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20e:	2b40      	cmp	r3, #64	; 0x40
 800a210:	d141      	bne.n	800a296 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	3308      	adds	r3, #8
 800a218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a220:	e853 3f00 	ldrex	r3, [r3]
 800a224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3308      	adds	r3, #8
 800a23a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a23e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a24a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1d9      	bne.n	800a212 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a262:	2b00      	cmp	r3, #0
 800a264:	d013      	beq.n	800a28e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26a:	4a13      	ldr	r2, [pc, #76]	; (800a2b8 <HAL_UART_IRQHandler+0x29c>)
 800a26c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a272:	4618      	mov	r0, r3
 800a274:	f7fc f96f 	bl	8006556 <HAL_DMA_Abort_IT>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d017      	beq.n	800a2ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a288:	4610      	mov	r0, r2
 800a28a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28c:	e00f      	b.n	800a2ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f000 f9a6 	bl	800a5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a294:	e00b      	b.n	800a2ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f9a2 	bl	800a5e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29c:	e007      	b.n	800a2ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f99e 	bl	800a5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a2ac:	e18d      	b.n	800a5ca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ae:	bf00      	nop
    return;
 800a2b0:	e18b      	b.n	800a5ca <HAL_UART_IRQHandler+0x5ae>
 800a2b2:	bf00      	nop
 800a2b4:	04000120 	.word	0x04000120
 800a2b8:	0800afa1 	.word	0x0800afa1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	f040 8146 	bne.w	800a552 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2ca:	f003 0310 	and.w	r3, r3, #16
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 813f 	beq.w	800a552 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d8:	f003 0310 	and.w	r3, r3, #16
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 8138 	beq.w	800a552 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2210      	movs	r2, #16
 800a2e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f4:	2b40      	cmp	r3, #64	; 0x40
 800a2f6:	f040 80b4 	bne.w	800a462 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a306:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f000 815f 	beq.w	800a5ce <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a31a:	429a      	cmp	r2, r3
 800a31c:	f080 8157 	bcs.w	800a5ce <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a326:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0320 	and.w	r3, r3, #32
 800a336:	2b00      	cmp	r3, #0
 800a338:	f040 8085 	bne.w	800a446 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	461a      	mov	r2, r3
 800a362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a366:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a36a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a372:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a37e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1da      	bne.n	800a33c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3308      	adds	r3, #8
 800a38c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a390:	e853 3f00 	ldrex	r3, [r3]
 800a394:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a398:	f023 0301 	bic.w	r3, r3, #1
 800a39c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	3308      	adds	r3, #8
 800a3a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a3aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a3ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e1      	bne.n	800a386 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a3e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a3e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a3ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a3ee:	e841 2300 	strex	r3, r2, [r1]
 800a3f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a3f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1e3      	bne.n	800a3c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40e:	e853 3f00 	ldrex	r3, [r3]
 800a412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a416:	f023 0310 	bic.w	r3, r3, #16
 800a41a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	461a      	mov	r2, r3
 800a424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a428:	65bb      	str	r3, [r7, #88]	; 0x58
 800a42a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a42e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a430:	e841 2300 	strex	r3, r2, [r1]
 800a434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e4      	bne.n	800a406 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a440:	4618      	mov	r0, r3
 800a442:	f7fc f84a 	bl	80064da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a452:	b29b      	uxth	r3, r3
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	b29b      	uxth	r3, r3
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f8ca 	bl	800a5f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a460:	e0b5      	b.n	800a5ce <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a46e:	b29b      	uxth	r3, r3
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 80a7 	beq.w	800a5d2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800a484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 80a2 	beq.w	800a5d2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a4a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4b0:	647b      	str	r3, [r7, #68]	; 0x44
 800a4b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4b8:	e841 2300 	strex	r3, r2, [r1]
 800a4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e4      	bne.n	800a48e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	623b      	str	r3, [r7, #32]
   return(result);
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	f023 0301 	bic.w	r3, r3, #1
 800a4da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3308      	adds	r3, #8
 800a4e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a4e8:	633a      	str	r2, [r7, #48]	; 0x30
 800a4ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f0:	e841 2300 	strex	r3, r2, [r1]
 800a4f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1e3      	bne.n	800a4c4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2220      	movs	r2, #32
 800a500:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f023 0310 	bic.w	r3, r3, #16
 800a522:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a530:	61fb      	str	r3, [r7, #28]
 800a532:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a534:	69b9      	ldr	r1, [r7, #24]
 800a536:	69fa      	ldr	r2, [r7, #28]
 800a538:	e841 2300 	strex	r3, r2, [r1]
 800a53c:	617b      	str	r3, [r7, #20]
   return(result);
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d1e4      	bne.n	800a50e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a548:	4619      	mov	r1, r3
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f852 	bl	800a5f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a550:	e03f      	b.n	800a5d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00e      	beq.n	800a57c <HAL_UART_IRQHandler+0x560>
 800a55e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a566:	2b00      	cmp	r3, #0
 800a568:	d008      	beq.n	800a57c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a572:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fe0f 	bl	800b198 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a57a:	e02d      	b.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00e      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a590:	2b00      	cmp	r3, #0
 800a592:	d008      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01c      	beq.n	800a5d6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
    }
    return;
 800a5a4:	e017      	b.n	800a5d6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d012      	beq.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
 800a5b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00c      	beq.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fdc0 	bl	800b144 <UART_EndTransmit_IT>
    return;
 800a5c4:	e008      	b.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800a5c6:	bf00      	nop
 800a5c8:	e006      	b.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800a5ca:	bf00      	nop
 800a5cc:	e004      	b.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800a5ce:	bf00      	nop
 800a5d0:	e002      	b.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800a5d2:	bf00      	nop
 800a5d4:	e000      	b.n	800a5d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800a5d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a5d8:	37e8      	adds	r7, #232	; 0xe8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop

0800a5e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a600:	bf00      	nop
 800a602:	370c      	adds	r7, #12
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a60c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a610:	b08a      	sub	sp, #40	; 0x28
 800a612:	af00      	add	r7, sp, #0
 800a614:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	689a      	ldr	r2, [r3, #8]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	431a      	orrs	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	431a      	orrs	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	69db      	ldr	r3, [r3, #28]
 800a630:	4313      	orrs	r3, r2
 800a632:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4ba4      	ldr	r3, [pc, #656]	; (800a8cc <UART_SetConfig+0x2c0>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	68fa      	ldr	r2, [r7, #12]
 800a640:	6812      	ldr	r2, [r2, #0]
 800a642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a644:	430b      	orrs	r3, r1
 800a646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a99      	ldr	r2, [pc, #612]	; (800a8d0 <UART_SetConfig+0x2c4>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d004      	beq.n	800a678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a674:	4313      	orrs	r3, r2
 800a676:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a688:	430a      	orrs	r2, r1
 800a68a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a90      	ldr	r2, [pc, #576]	; (800a8d4 <UART_SetConfig+0x2c8>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d126      	bne.n	800a6e4 <UART_SetConfig+0xd8>
 800a696:	4b90      	ldr	r3, [pc, #576]	; (800a8d8 <UART_SetConfig+0x2cc>)
 800a698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	2b03      	cmp	r3, #3
 800a6a2:	d81b      	bhi.n	800a6dc <UART_SetConfig+0xd0>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <UART_SetConfig+0xa0>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6bd 	.word	0x0800a6bd
 800a6b0:	0800a6cd 	.word	0x0800a6cd
 800a6b4:	0800a6c5 	.word	0x0800a6c5
 800a6b8:	0800a6d5 	.word	0x0800a6d5
 800a6bc:	2301      	movs	r3, #1
 800a6be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6c2:	e116      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6ca:	e112      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6d2:	e10e      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6da:	e10a      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6e2:	e106      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a7c      	ldr	r2, [pc, #496]	; (800a8dc <UART_SetConfig+0x2d0>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d138      	bne.n	800a760 <UART_SetConfig+0x154>
 800a6ee:	4b7a      	ldr	r3, [pc, #488]	; (800a8d8 <UART_SetConfig+0x2cc>)
 800a6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f4:	f003 030c 	and.w	r3, r3, #12
 800a6f8:	2b0c      	cmp	r3, #12
 800a6fa:	d82d      	bhi.n	800a758 <UART_SetConfig+0x14c>
 800a6fc:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <UART_SetConfig+0xf8>)
 800a6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a702:	bf00      	nop
 800a704:	0800a739 	.word	0x0800a739
 800a708:	0800a759 	.word	0x0800a759
 800a70c:	0800a759 	.word	0x0800a759
 800a710:	0800a759 	.word	0x0800a759
 800a714:	0800a749 	.word	0x0800a749
 800a718:	0800a759 	.word	0x0800a759
 800a71c:	0800a759 	.word	0x0800a759
 800a720:	0800a759 	.word	0x0800a759
 800a724:	0800a741 	.word	0x0800a741
 800a728:	0800a759 	.word	0x0800a759
 800a72c:	0800a759 	.word	0x0800a759
 800a730:	0800a759 	.word	0x0800a759
 800a734:	0800a751 	.word	0x0800a751
 800a738:	2300      	movs	r3, #0
 800a73a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a73e:	e0d8      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a740:	2302      	movs	r3, #2
 800a742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a746:	e0d4      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a748:	2304      	movs	r3, #4
 800a74a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a74e:	e0d0      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a750:	2308      	movs	r3, #8
 800a752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a756:	e0cc      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a758:	2310      	movs	r3, #16
 800a75a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a75e:	e0c8      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a5e      	ldr	r2, [pc, #376]	; (800a8e0 <UART_SetConfig+0x2d4>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d125      	bne.n	800a7b6 <UART_SetConfig+0x1aa>
 800a76a:	4b5b      	ldr	r3, [pc, #364]	; (800a8d8 <UART_SetConfig+0x2cc>)
 800a76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a774:	2b30      	cmp	r3, #48	; 0x30
 800a776:	d016      	beq.n	800a7a6 <UART_SetConfig+0x19a>
 800a778:	2b30      	cmp	r3, #48	; 0x30
 800a77a:	d818      	bhi.n	800a7ae <UART_SetConfig+0x1a2>
 800a77c:	2b20      	cmp	r3, #32
 800a77e:	d00a      	beq.n	800a796 <UART_SetConfig+0x18a>
 800a780:	2b20      	cmp	r3, #32
 800a782:	d814      	bhi.n	800a7ae <UART_SetConfig+0x1a2>
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <UART_SetConfig+0x182>
 800a788:	2b10      	cmp	r3, #16
 800a78a:	d008      	beq.n	800a79e <UART_SetConfig+0x192>
 800a78c:	e00f      	b.n	800a7ae <UART_SetConfig+0x1a2>
 800a78e:	2300      	movs	r3, #0
 800a790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a794:	e0ad      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a796:	2302      	movs	r3, #2
 800a798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a79c:	e0a9      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a79e:	2304      	movs	r3, #4
 800a7a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7a4:	e0a5      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a7a6:	2308      	movs	r3, #8
 800a7a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7ac:	e0a1      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a7ae:	2310      	movs	r3, #16
 800a7b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7b4:	e09d      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a4a      	ldr	r2, [pc, #296]	; (800a8e4 <UART_SetConfig+0x2d8>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d125      	bne.n	800a80c <UART_SetConfig+0x200>
 800a7c0:	4b45      	ldr	r3, [pc, #276]	; (800a8d8 <UART_SetConfig+0x2cc>)
 800a7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a7ca:	2bc0      	cmp	r3, #192	; 0xc0
 800a7cc:	d016      	beq.n	800a7fc <UART_SetConfig+0x1f0>
 800a7ce:	2bc0      	cmp	r3, #192	; 0xc0
 800a7d0:	d818      	bhi.n	800a804 <UART_SetConfig+0x1f8>
 800a7d2:	2b80      	cmp	r3, #128	; 0x80
 800a7d4:	d00a      	beq.n	800a7ec <UART_SetConfig+0x1e0>
 800a7d6:	2b80      	cmp	r3, #128	; 0x80
 800a7d8:	d814      	bhi.n	800a804 <UART_SetConfig+0x1f8>
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <UART_SetConfig+0x1d8>
 800a7de:	2b40      	cmp	r3, #64	; 0x40
 800a7e0:	d008      	beq.n	800a7f4 <UART_SetConfig+0x1e8>
 800a7e2:	e00f      	b.n	800a804 <UART_SetConfig+0x1f8>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7ea:	e082      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7f2:	e07e      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a7fa:	e07a      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a802:	e076      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a804:	2310      	movs	r3, #16
 800a806:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a80a:	e072      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a35      	ldr	r2, [pc, #212]	; (800a8e8 <UART_SetConfig+0x2dc>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d12a      	bne.n	800a86c <UART_SetConfig+0x260>
 800a816:	4b30      	ldr	r3, [pc, #192]	; (800a8d8 <UART_SetConfig+0x2cc>)
 800a818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a81c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a824:	d01a      	beq.n	800a85c <UART_SetConfig+0x250>
 800a826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a82a:	d81b      	bhi.n	800a864 <UART_SetConfig+0x258>
 800a82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a830:	d00c      	beq.n	800a84c <UART_SetConfig+0x240>
 800a832:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a836:	d815      	bhi.n	800a864 <UART_SetConfig+0x258>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <UART_SetConfig+0x238>
 800a83c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a840:	d008      	beq.n	800a854 <UART_SetConfig+0x248>
 800a842:	e00f      	b.n	800a864 <UART_SetConfig+0x258>
 800a844:	2300      	movs	r3, #0
 800a846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a84a:	e052      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a84c:	2302      	movs	r3, #2
 800a84e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a852:	e04e      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a854:	2304      	movs	r3, #4
 800a856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a85a:	e04a      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a85c:	2308      	movs	r3, #8
 800a85e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a862:	e046      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a864:	2310      	movs	r3, #16
 800a866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a86a:	e042      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a17      	ldr	r2, [pc, #92]	; (800a8d0 <UART_SetConfig+0x2c4>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d13a      	bne.n	800a8ec <UART_SetConfig+0x2e0>
 800a876:	4b18      	ldr	r3, [pc, #96]	; (800a8d8 <UART_SetConfig+0x2cc>)
 800a878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a87c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a884:	d01a      	beq.n	800a8bc <UART_SetConfig+0x2b0>
 800a886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a88a:	d81b      	bhi.n	800a8c4 <UART_SetConfig+0x2b8>
 800a88c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a890:	d00c      	beq.n	800a8ac <UART_SetConfig+0x2a0>
 800a892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a896:	d815      	bhi.n	800a8c4 <UART_SetConfig+0x2b8>
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <UART_SetConfig+0x298>
 800a89c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8a0:	d008      	beq.n	800a8b4 <UART_SetConfig+0x2a8>
 800a8a2:	e00f      	b.n	800a8c4 <UART_SetConfig+0x2b8>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8aa:	e022      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8b2:	e01e      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a8b4:	2304      	movs	r3, #4
 800a8b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8ba:	e01a      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a8bc:	2308      	movs	r3, #8
 800a8be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8c2:	e016      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a8c4:	2310      	movs	r3, #16
 800a8c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8ca:	e012      	b.n	800a8f2 <UART_SetConfig+0x2e6>
 800a8cc:	efff69f3 	.word	0xefff69f3
 800a8d0:	40008000 	.word	0x40008000
 800a8d4:	40013800 	.word	0x40013800
 800a8d8:	40021000 	.word	0x40021000
 800a8dc:	40004400 	.word	0x40004400
 800a8e0:	40004800 	.word	0x40004800
 800a8e4:	40004c00 	.word	0x40004c00
 800a8e8:	40005000 	.word	0x40005000
 800a8ec:	2310      	movs	r3, #16
 800a8ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a9f      	ldr	r2, [pc, #636]	; (800ab74 <UART_SetConfig+0x568>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d17a      	bne.n	800a9f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a900:	2b08      	cmp	r3, #8
 800a902:	d824      	bhi.n	800a94e <UART_SetConfig+0x342>
 800a904:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <UART_SetConfig+0x300>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a94f 	.word	0x0800a94f
 800a914:	0800a939 	.word	0x0800a939
 800a918:	0800a94f 	.word	0x0800a94f
 800a91c:	0800a93f 	.word	0x0800a93f
 800a920:	0800a94f 	.word	0x0800a94f
 800a924:	0800a94f 	.word	0x0800a94f
 800a928:	0800a94f 	.word	0x0800a94f
 800a92c:	0800a947 	.word	0x0800a947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a930:	f7fd fd24 	bl	800837c <HAL_RCC_GetPCLK1Freq>
 800a934:	61f8      	str	r0, [r7, #28]
        break;
 800a936:	e010      	b.n	800a95a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a938:	4b8f      	ldr	r3, [pc, #572]	; (800ab78 <UART_SetConfig+0x56c>)
 800a93a:	61fb      	str	r3, [r7, #28]
        break;
 800a93c:	e00d      	b.n	800a95a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a93e:	f7fd fc85 	bl	800824c <HAL_RCC_GetSysClockFreq>
 800a942:	61f8      	str	r0, [r7, #28]
        break;
 800a944:	e009      	b.n	800a95a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a94a:	61fb      	str	r3, [r7, #28]
        break;
 800a94c:	e005      	b.n	800a95a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 80fb 	beq.w	800ab58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	4613      	mov	r3, r2
 800a968:	005b      	lsls	r3, r3, #1
 800a96a:	4413      	add	r3, r2
 800a96c:	69fa      	ldr	r2, [r7, #28]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d305      	bcc.n	800a97e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a978:	69fa      	ldr	r2, [r7, #28]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d903      	bls.n	800a986 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a984:	e0e8      	b.n	800ab58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	2200      	movs	r2, #0
 800a98a:	461c      	mov	r4, r3
 800a98c:	4615      	mov	r5, r2
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	f04f 0300 	mov.w	r3, #0
 800a996:	022b      	lsls	r3, r5, #8
 800a998:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a99c:	0222      	lsls	r2, r4, #8
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	6849      	ldr	r1, [r1, #4]
 800a9a2:	0849      	lsrs	r1, r1, #1
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	4688      	mov	r8, r1
 800a9a8:	4681      	mov	r9, r0
 800a9aa:	eb12 0a08 	adds.w	sl, r2, r8
 800a9ae:	eb43 0b09 	adc.w	fp, r3, r9
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	603b      	str	r3, [r7, #0]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	4659      	mov	r1, fp
 800a9c4:	f7f6 f938 	bl	8000c38 <__aeabi_uldivmod>
 800a9c8:	4602      	mov	r2, r0
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9d6:	d308      	bcc.n	800a9ea <UART_SetConfig+0x3de>
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9de:	d204      	bcs.n	800a9ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69ba      	ldr	r2, [r7, #24]
 800a9e6:	60da      	str	r2, [r3, #12]
 800a9e8:	e0b6      	b.n	800ab58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a9f0:	e0b2      	b.n	800ab58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9fa:	d15e      	bne.n	800aaba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a9fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d828      	bhi.n	800aa56 <UART_SetConfig+0x44a>
 800aa04:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <UART_SetConfig+0x400>)
 800aa06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0a:	bf00      	nop
 800aa0c:	0800aa31 	.word	0x0800aa31
 800aa10:	0800aa39 	.word	0x0800aa39
 800aa14:	0800aa41 	.word	0x0800aa41
 800aa18:	0800aa57 	.word	0x0800aa57
 800aa1c:	0800aa47 	.word	0x0800aa47
 800aa20:	0800aa57 	.word	0x0800aa57
 800aa24:	0800aa57 	.word	0x0800aa57
 800aa28:	0800aa57 	.word	0x0800aa57
 800aa2c:	0800aa4f 	.word	0x0800aa4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa30:	f7fd fca4 	bl	800837c <HAL_RCC_GetPCLK1Freq>
 800aa34:	61f8      	str	r0, [r7, #28]
        break;
 800aa36:	e014      	b.n	800aa62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa38:	f7fd fcb6 	bl	80083a8 <HAL_RCC_GetPCLK2Freq>
 800aa3c:	61f8      	str	r0, [r7, #28]
        break;
 800aa3e:	e010      	b.n	800aa62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa40:	4b4d      	ldr	r3, [pc, #308]	; (800ab78 <UART_SetConfig+0x56c>)
 800aa42:	61fb      	str	r3, [r7, #28]
        break;
 800aa44:	e00d      	b.n	800aa62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa46:	f7fd fc01 	bl	800824c <HAL_RCC_GetSysClockFreq>
 800aa4a:	61f8      	str	r0, [r7, #28]
        break;
 800aa4c:	e009      	b.n	800aa62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa52:	61fb      	str	r3, [r7, #28]
        break;
 800aa54:	e005      	b.n	800aa62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800aa60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d077      	beq.n	800ab58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	005a      	lsls	r2, r3, #1
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	085b      	lsrs	r3, r3, #1
 800aa72:	441a      	add	r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b0f      	cmp	r3, #15
 800aa82:	d916      	bls.n	800aab2 <UART_SetConfig+0x4a6>
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa8a:	d212      	bcs.n	800aab2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa8c:	69bb      	ldr	r3, [r7, #24]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	f023 030f 	bic.w	r3, r3, #15
 800aa94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	085b      	lsrs	r3, r3, #1
 800aa9a:	b29b      	uxth	r3, r3
 800aa9c:	f003 0307 	and.w	r3, r3, #7
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	8afb      	ldrh	r3, [r7, #22]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	8afa      	ldrh	r2, [r7, #22]
 800aaae:	60da      	str	r2, [r3, #12]
 800aab0:	e052      	b.n	800ab58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800aab8:	e04e      	b.n	800ab58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aaba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aabe:	2b08      	cmp	r3, #8
 800aac0:	d827      	bhi.n	800ab12 <UART_SetConfig+0x506>
 800aac2:	a201      	add	r2, pc, #4	; (adr r2, 800aac8 <UART_SetConfig+0x4bc>)
 800aac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac8:	0800aaed 	.word	0x0800aaed
 800aacc:	0800aaf5 	.word	0x0800aaf5
 800aad0:	0800aafd 	.word	0x0800aafd
 800aad4:	0800ab13 	.word	0x0800ab13
 800aad8:	0800ab03 	.word	0x0800ab03
 800aadc:	0800ab13 	.word	0x0800ab13
 800aae0:	0800ab13 	.word	0x0800ab13
 800aae4:	0800ab13 	.word	0x0800ab13
 800aae8:	0800ab0b 	.word	0x0800ab0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaec:	f7fd fc46 	bl	800837c <HAL_RCC_GetPCLK1Freq>
 800aaf0:	61f8      	str	r0, [r7, #28]
        break;
 800aaf2:	e014      	b.n	800ab1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaf4:	f7fd fc58 	bl	80083a8 <HAL_RCC_GetPCLK2Freq>
 800aaf8:	61f8      	str	r0, [r7, #28]
        break;
 800aafa:	e010      	b.n	800ab1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aafc:	4b1e      	ldr	r3, [pc, #120]	; (800ab78 <UART_SetConfig+0x56c>)
 800aafe:	61fb      	str	r3, [r7, #28]
        break;
 800ab00:	e00d      	b.n	800ab1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab02:	f7fd fba3 	bl	800824c <HAL_RCC_GetSysClockFreq>
 800ab06:	61f8      	str	r0, [r7, #28]
        break;
 800ab08:	e009      	b.n	800ab1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab0e:	61fb      	str	r3, [r7, #28]
        break;
 800ab10:	e005      	b.n	800ab1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ab1c:	bf00      	nop
    }

    if (pclk != 0U)
 800ab1e:	69fb      	ldr	r3, [r7, #28]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d019      	beq.n	800ab58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	085a      	lsrs	r2, r3, #1
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	441a      	add	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	2b0f      	cmp	r3, #15
 800ab3c:	d909      	bls.n	800ab52 <UART_SetConfig+0x546>
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab44:	d205      	bcs.n	800ab52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	b29a      	uxth	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	60da      	str	r2, [r3, #12]
 800ab50:	e002      	b.n	800ab58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ab64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3728      	adds	r7, #40	; 0x28
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab72:	bf00      	nop
 800ab74:	40008000 	.word	0x40008000
 800ab78:	00f42400 	.word	0x00f42400

0800ab7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00a      	beq.n	800aba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	f003 0302 	and.w	r3, r3, #2
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	430a      	orrs	r2, r1
 800abc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abcc:	f003 0304 	and.w	r3, r3, #4
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00a      	beq.n	800abea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	f003 0308 	and.w	r3, r3, #8
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d00a      	beq.n	800ac0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	430a      	orrs	r2, r1
 800ac0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	f003 0310 	and.w	r3, r3, #16
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	430a      	orrs	r2, r1
 800ac2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	f003 0320 	and.w	r3, r3, #32
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00a      	beq.n	800ac50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01a      	beq.n	800ac92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac7a:	d10a      	bne.n	800ac92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	605a      	str	r2, [r3, #4]
  }
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800acd0:	f7fa faf4 	bl	80052bc <HAL_GetTick>
 800acd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0308 	and.w	r3, r3, #8
 800ace0:	2b08      	cmp	r3, #8
 800ace2:	d10e      	bne.n	800ad02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ace4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f82d 	bl	800ad52 <UART_WaitOnFlagUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e023      	b.n	800ad4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d10e      	bne.n	800ad2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 f817 	bl	800ad52 <UART_WaitOnFlagUntilTimeout>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d001      	beq.n	800ad2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e00d      	b.n	800ad4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2220      	movs	r2, #32
 800ad32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2220      	movs	r2, #32
 800ad38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ad48:	2300      	movs	r3, #0
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b09c      	sub	sp, #112	; 0x70
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	60f8      	str	r0, [r7, #12]
 800ad5a:	60b9      	str	r1, [r7, #8]
 800ad5c:	603b      	str	r3, [r7, #0]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad62:	e0a5      	b.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad6a:	f000 80a1 	beq.w	800aeb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad6e:	f7fa faa5 	bl	80052bc <HAL_GetTick>
 800ad72:	4602      	mov	r2, r0
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	1ad3      	subs	r3, r2, r3
 800ad78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d302      	bcc.n	800ad84 <UART_WaitOnFlagUntilTimeout+0x32>
 800ad7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d13e      	bne.n	800ae02 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ad98:	667b      	str	r3, [r7, #100]	; 0x64
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ada2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ada4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ada8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800adaa:	e841 2300 	strex	r3, r2, [r1]
 800adae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800adb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1e6      	bne.n	800ad84 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	3308      	adds	r3, #8
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	f023 0301 	bic.w	r3, r3, #1
 800adcc:	663b      	str	r3, [r7, #96]	; 0x60
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3308      	adds	r3, #8
 800add4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800add6:	64ba      	str	r2, [r7, #72]	; 0x48
 800add8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800addc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adde:	e841 2300 	strex	r3, r2, [r1]
 800ade2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ade4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1e5      	bne.n	800adb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2220      	movs	r2, #32
 800adee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2220      	movs	r2, #32
 800adf4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800adfe:	2303      	movs	r3, #3
 800ae00:	e067      	b.n	800aed2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f003 0304 	and.w	r3, r3, #4
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d04f      	beq.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae1e:	d147      	bne.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae28:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae32:	e853 3f00 	ldrex	r3, [r3]
 800ae36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	461a      	mov	r2, r3
 800ae46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae48:	637b      	str	r3, [r7, #52]	; 0x34
 800ae4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae50:	e841 2300 	strex	r3, r2, [r1]
 800ae54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1e6      	bne.n	800ae2a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3308      	adds	r3, #8
 800ae62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	e853 3f00 	ldrex	r3, [r3]
 800ae6a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	f023 0301 	bic.w	r3, r3, #1
 800ae72:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3308      	adds	r3, #8
 800ae7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ae7c:	623a      	str	r2, [r7, #32]
 800ae7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae80:	69f9      	ldr	r1, [r7, #28]
 800ae82:	6a3a      	ldr	r2, [r7, #32]
 800ae84:	e841 2300 	strex	r3, r2, [r1]
 800ae88:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d1e5      	bne.n	800ae5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2220      	movs	r2, #32
 800ae94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2220      	movs	r2, #32
 800aea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e010      	b.n	800aed2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	69da      	ldr	r2, [r3, #28]
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	4013      	ands	r3, r2
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	bf0c      	ite	eq
 800aec0:	2301      	moveq	r3, #1
 800aec2:	2300      	movne	r3, #0
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	461a      	mov	r2, r3
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	f43f af4a 	beq.w	800ad64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3770      	adds	r7, #112	; 0x70
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b095      	sub	sp, #84	; 0x54
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800aef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af00:	643b      	str	r3, [r7, #64]	; 0x40
 800af02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800af06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e6      	bne.n	800aee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	61fb      	str	r3, [r7, #28]
   return(result);
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f023 0301 	bic.w	r3, r3, #1
 800af2a:	64bb      	str	r3, [r7, #72]	; 0x48
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3308      	adds	r3, #8
 800af32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af34:	62fa      	str	r2, [r7, #44]	; 0x2c
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e5      	bne.n	800af14 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d118      	bne.n	800af82 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	f023 0310 	bic.w	r3, r3, #16
 800af64:	647b      	str	r3, [r7, #68]	; 0x44
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	461a      	mov	r2, r3
 800af6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af6e:	61bb      	str	r3, [r7, #24]
 800af70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	6979      	ldr	r1, [r7, #20]
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	613b      	str	r3, [r7, #16]
   return(result);
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e6      	bne.n	800af50 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	665a      	str	r2, [r3, #100]	; 0x64
}
 800af94:	bf00      	nop
 800af96:	3754      	adds	r7, #84	; 0x54
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2200      	movs	r2, #0
 800afb2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff fb0e 	bl	800a5e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afc4:	bf00      	nop
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800afcc:	b480      	push	{r7}
 800afce:	b08f      	sub	sp, #60	; 0x3c
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800afd8:	2b21      	cmp	r3, #33	; 0x21
 800afda:	d14d      	bne.n	800b078 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d132      	bne.n	800b04e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	61fb      	str	r3, [r7, #28]
   return(result);
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800affc:	637b      	str	r3, [r7, #52]	; 0x34
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b006:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b008:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b00c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b00e:	e841 2300 	strex	r3, r2, [r1]
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e6      	bne.n	800afe8 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	e853 3f00 	ldrex	r3, [r3]
 800b026:	60bb      	str	r3, [r7, #8]
   return(result);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b02e:	633b      	str	r3, [r7, #48]	; 0x30
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6979      	ldr	r1, [r7, #20]
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	613b      	str	r3, [r7, #16]
   return(result);
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e6      	bne.n	800b01a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b04c:	e014      	b.n	800b078 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b052:	781a      	ldrb	r2, [r3, #0]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	b292      	uxth	r2, r2
 800b05a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b060:	1c5a      	adds	r2, r3, #1
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	3b01      	subs	r3, #1
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b078:	bf00      	nop
 800b07a:	373c      	adds	r7, #60	; 0x3c
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b084:	b480      	push	{r7}
 800b086:	b091      	sub	sp, #68	; 0x44
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b090:	2b21      	cmp	r3, #33	; 0x21
 800b092:	d151      	bne.n	800b138 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d132      	bne.n	800b106 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	633b      	str	r3, [r7, #48]	; 0x30
 800b0c0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e6      	bne.n	800b0a0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	693b      	ldr	r3, [r7, #16]
 800b0da:	e853 3f00 	ldrex	r3, [r3]
 800b0de:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0e6:	637b      	str	r3, [r7, #52]	; 0x34
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f4:	69b9      	ldr	r1, [r7, #24]
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	e841 2300 	strex	r3, r2, [r1]
 800b0fc:	617b      	str	r3, [r7, #20]
   return(result);
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d1e6      	bne.n	800b0d2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b104:	e018      	b.n	800b138 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b10c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b10e:	881a      	ldrh	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b118:	b292      	uxth	r2, r2
 800b11a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b120:	1c9a      	adds	r2, r3, #2
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	3b01      	subs	r3, #1
 800b130:	b29a      	uxth	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b138:	bf00      	nop
 800b13a:	3744      	adds	r7, #68	; 0x44
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	e853 3f00 	ldrex	r3, [r3]
 800b158:	60bb      	str	r3, [r7, #8]
   return(result);
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b160:	61fb      	str	r3, [r7, #28]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	461a      	mov	r2, r3
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	61bb      	str	r3, [r7, #24]
 800b16c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16e:	6979      	ldr	r1, [r7, #20]
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	e841 2300 	strex	r3, r2, [r1]
 800b176:	613b      	str	r3, [r7, #16]
   return(result);
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1e6      	bne.n	800b14c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2220      	movs	r2, #32
 800b182:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f7f6 fe58 	bl	8001e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b190:	bf00      	nop
 800b192:	3720      	adds	r7, #32
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b085      	sub	sp, #20
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b1ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b1be:	2b84      	cmp	r3, #132	; 0x84
 800b1c0:	d005      	beq.n	800b1ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b1c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3303      	adds	r3, #3
 800b1cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b1e0:	f000 fade 	bl	800b7a0 <vTaskStartScheduler>
  
  return osOK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	bd80      	pop	{r7, pc}

0800b1ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b1ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ec:	b089      	sub	sp, #36	; 0x24
 800b1ee:	af04      	add	r7, sp, #16
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d020      	beq.n	800b23e <osThreadCreate+0x54>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d01c      	beq.n	800b23e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685c      	ldr	r4, [r3, #4]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681d      	ldr	r5, [r3, #0]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	691e      	ldr	r6, [r3, #16]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b216:	4618      	mov	r0, r3
 800b218:	f7ff ffc8 	bl	800b1ac <makeFreeRtosPriority>
 800b21c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	695b      	ldr	r3, [r3, #20]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b226:	9202      	str	r2, [sp, #8]
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	9100      	str	r1, [sp, #0]
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	4632      	mov	r2, r6
 800b230:	4629      	mov	r1, r5
 800b232:	4620      	mov	r0, r4
 800b234:	f000 f8ed 	bl	800b412 <xTaskCreateStatic>
 800b238:	4603      	mov	r3, r0
 800b23a:	60fb      	str	r3, [r7, #12]
 800b23c:	e01c      	b.n	800b278 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	685c      	ldr	r4, [r3, #4]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b24a:	b29e      	uxth	r6, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff ffaa 	bl	800b1ac <makeFreeRtosPriority>
 800b258:	4602      	mov	r2, r0
 800b25a:	f107 030c 	add.w	r3, r7, #12
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	9200      	str	r2, [sp, #0]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	4632      	mov	r2, r6
 800b266:	4629      	mov	r1, r5
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 f92f 	bl	800b4cc <xTaskCreate>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b01      	cmp	r3, #1
 800b272:	d001      	beq.n	800b278 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b274:	2300      	movs	r3, #0
 800b276:	e000      	b.n	800b27a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b278:	68fb      	ldr	r3, [r7, #12]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b282 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <osDelay+0x16>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	e000      	b.n	800b29a <osDelay+0x18>
 800b298:	2301      	movs	r3, #1
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fa4c 	bl	800b738 <vTaskDelay>
  
  return osOK;
 800b2a0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2aa:	b480      	push	{r7}
 800b2ac:	b083      	sub	sp, #12
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f103 0208 	add.w	r2, r3, #8
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f103 0208 	add.w	r2, r3, #8
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f103 0208 	add.w	r2, r3, #8
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2de:	bf00      	nop
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2ea:	b480      	push	{r7}
 800b2ec:	b083      	sub	sp, #12
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	689a      	ldr	r2, [r3, #8]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	1c5a      	adds	r2, r3, #1
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	601a      	str	r2, [r3, #0]
}
 800b340:	bf00      	nop
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b362:	d103      	bne.n	800b36c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	e00c      	b.n	800b386 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3308      	adds	r3, #8
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	e002      	b.n	800b37a <vListInsert+0x2e>
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	68ba      	ldr	r2, [r7, #8]
 800b382:	429a      	cmp	r2, r3
 800b384:	d2f6      	bcs.n	800b374 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685a      	ldr	r2, [r3, #4]
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	683a      	ldr	r2, [r7, #0]
 800b3a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	601a      	str	r2, [r3, #0]
}
 800b3b2:	bf00      	nop
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b085      	sub	sp, #20
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	6892      	ldr	r2, [r2, #8]
 800b3d4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	6852      	ldr	r2, [r2, #4]
 800b3de:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d103      	bne.n	800b3f2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689a      	ldr	r2, [r3, #8]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	1e5a      	subs	r2, r3, #1
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b412:	b580      	push	{r7, lr}
 800b414:	b08e      	sub	sp, #56	; 0x38
 800b416:	af04      	add	r7, sp, #16
 800b418:	60f8      	str	r0, [r7, #12]
 800b41a:	60b9      	str	r1, [r7, #8]
 800b41c:	607a      	str	r2, [r7, #4]
 800b41e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10a      	bne.n	800b43c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b438:	bf00      	nop
 800b43a:	e7fe      	b.n	800b43a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10a      	bne.n	800b458 <xTaskCreateStatic+0x46>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	f383 8811 	msr	BASEPRI, r3
 800b44a:	f3bf 8f6f 	isb	sy
 800b44e:	f3bf 8f4f 	dsb	sy
 800b452:	61fb      	str	r3, [r7, #28]
}
 800b454:	bf00      	nop
 800b456:	e7fe      	b.n	800b456 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b458:	2354      	movs	r3, #84	; 0x54
 800b45a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b54      	cmp	r3, #84	; 0x54
 800b460:	d00a      	beq.n	800b478 <xTaskCreateStatic+0x66>
	__asm volatile
 800b462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b466:	f383 8811 	msr	BASEPRI, r3
 800b46a:	f3bf 8f6f 	isb	sy
 800b46e:	f3bf 8f4f 	dsb	sy
 800b472:	61bb      	str	r3, [r7, #24]
}
 800b474:	bf00      	nop
 800b476:	e7fe      	b.n	800b476 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b478:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01e      	beq.n	800b4be <xTaskCreateStatic+0xac>
 800b480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b482:	2b00      	cmp	r3, #0
 800b484:	d01b      	beq.n	800b4be <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b48e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b492:	2202      	movs	r2, #2
 800b494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b498:	2300      	movs	r3, #0
 800b49a:	9303      	str	r3, [sp, #12]
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	9302      	str	r3, [sp, #8]
 800b4a0:	f107 0314 	add.w	r3, r7, #20
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	68b9      	ldr	r1, [r7, #8]
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f850 	bl	800b556 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4b8:	f000 f8d4 	bl	800b664 <prvAddNewTaskToReadyList>
 800b4bc:	e001      	b.n	800b4c2 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4c2:	697b      	ldr	r3, [r7, #20]
	}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3728      	adds	r7, #40	; 0x28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b08c      	sub	sp, #48	; 0x30
 800b4d0:	af04      	add	r7, sp, #16
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	603b      	str	r3, [r7, #0]
 800b4d8:	4613      	mov	r3, r2
 800b4da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b4dc:	88fb      	ldrh	r3, [r7, #6]
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 fee1 	bl	800c2a8 <pvPortMalloc>
 800b4e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00e      	beq.n	800b50c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4ee:	2054      	movs	r0, #84	; 0x54
 800b4f0:	f000 feda 	bl	800c2a8 <pvPortMalloc>
 800b4f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	631a      	str	r2, [r3, #48]	; 0x30
 800b502:	e005      	b.n	800b510 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b504:	6978      	ldr	r0, [r7, #20]
 800b506:	f000 ff9b 	bl	800c440 <vPortFree>
 800b50a:	e001      	b.n	800b510 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b510:	69fb      	ldr	r3, [r7, #28]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d017      	beq.n	800b546 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b51e:	88fa      	ldrh	r2, [r7, #6]
 800b520:	2300      	movs	r3, #0
 800b522:	9303      	str	r3, [sp, #12]
 800b524:	69fb      	ldr	r3, [r7, #28]
 800b526:	9302      	str	r3, [sp, #8]
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	9301      	str	r3, [sp, #4]
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68b9      	ldr	r1, [r7, #8]
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f000 f80e 	bl	800b556 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b53a:	69f8      	ldr	r0, [r7, #28]
 800b53c:	f000 f892 	bl	800b664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b540:	2301      	movs	r3, #1
 800b542:	61bb      	str	r3, [r7, #24]
 800b544:	e002      	b.n	800b54c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b546:	f04f 33ff 	mov.w	r3, #4294967295
 800b54a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b54c:	69bb      	ldr	r3, [r7, #24]
	}
 800b54e:	4618      	mov	r0, r3
 800b550:	3720      	adds	r7, #32
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b088      	sub	sp, #32
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	60b9      	str	r1, [r7, #8]
 800b560:	607a      	str	r2, [r7, #4]
 800b562:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b56e:	3b01      	subs	r3, #1
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b576:	69bb      	ldr	r3, [r7, #24]
 800b578:	f023 0307 	bic.w	r3, r3, #7
 800b57c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	f003 0307 	and.w	r3, r3, #7
 800b584:	2b00      	cmp	r3, #0
 800b586:	d00a      	beq.n	800b59e <prvInitialiseNewTask+0x48>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	617b      	str	r3, [r7, #20]
}
 800b59a:	bf00      	nop
 800b59c:	e7fe      	b.n	800b59c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d01f      	beq.n	800b5e4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	61fb      	str	r3, [r7, #28]
 800b5a8:	e012      	b.n	800b5d0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	7819      	ldrb	r1, [r3, #0]
 800b5b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	3334      	adds	r3, #52	; 0x34
 800b5ba:	460a      	mov	r2, r1
 800b5bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d006      	beq.n	800b5d8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	61fb      	str	r3, [r7, #28]
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	2b0f      	cmp	r3, #15
 800b5d4:	d9e9      	bls.n	800b5aa <prvInitialiseNewTask+0x54>
 800b5d6:	e000      	b.n	800b5da <prvInitialiseNewTask+0x84>
			{
				break;
 800b5d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b5e2:	e003      	b.n	800b5ec <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ee:	2b06      	cmp	r3, #6
 800b5f0:	d901      	bls.n	800b5f6 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5f2:	2306      	movs	r3, #6
 800b5f4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5fa:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b600:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b604:	2200      	movs	r2, #0
 800b606:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60a:	3304      	adds	r3, #4
 800b60c:	4618      	mov	r0, r3
 800b60e:	f7ff fe6c 	bl	800b2ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b614:	3318      	adds	r3, #24
 800b616:	4618      	mov	r0, r3
 800b618:	f7ff fe67 	bl	800b2ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b620:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	f1c3 0207 	rsb	r2, r3, #7
 800b628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b630:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b634:	2200      	movs	r2, #0
 800b636:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63a:	2200      	movs	r2, #0
 800b63c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	68f9      	ldr	r1, [r7, #12]
 800b644:	69b8      	ldr	r0, [r7, #24]
 800b646:	f000 fc23 	bl	800be90 <pxPortInitialiseStack>
 800b64a:	4602      	mov	r2, r0
 800b64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b652:	2b00      	cmp	r3, #0
 800b654:	d002      	beq.n	800b65c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b65a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b65c:	bf00      	nop
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}

0800b664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b66c:	f000 fd3a 	bl	800c0e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b670:	4b2a      	ldr	r3, [pc, #168]	; (800b71c <prvAddNewTaskToReadyList+0xb8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	3301      	adds	r3, #1
 800b676:	4a29      	ldr	r2, [pc, #164]	; (800b71c <prvAddNewTaskToReadyList+0xb8>)
 800b678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b67a:	4b29      	ldr	r3, [pc, #164]	; (800b720 <prvAddNewTaskToReadyList+0xbc>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b682:	4a27      	ldr	r2, [pc, #156]	; (800b720 <prvAddNewTaskToReadyList+0xbc>)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b688:	4b24      	ldr	r3, [pc, #144]	; (800b71c <prvAddNewTaskToReadyList+0xb8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d110      	bne.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b690:	f000 fabc 	bl	800bc0c <prvInitialiseTaskLists>
 800b694:	e00d      	b.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b696:	4b23      	ldr	r3, [pc, #140]	; (800b724 <prvAddNewTaskToReadyList+0xc0>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d109      	bne.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b69e:	4b20      	ldr	r3, [pc, #128]	; (800b720 <prvAddNewTaskToReadyList+0xbc>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d802      	bhi.n	800b6b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6ac:	4a1c      	ldr	r2, [pc, #112]	; (800b720 <prvAddNewTaskToReadyList+0xbc>)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6b2:	4b1d      	ldr	r3, [pc, #116]	; (800b728 <prvAddNewTaskToReadyList+0xc4>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	4a1b      	ldr	r2, [pc, #108]	; (800b728 <prvAddNewTaskToReadyList+0xc4>)
 800b6ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	409a      	lsls	r2, r3
 800b6c4:	4b19      	ldr	r3, [pc, #100]	; (800b72c <prvAddNewTaskToReadyList+0xc8>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	4a18      	ldr	r2, [pc, #96]	; (800b72c <prvAddNewTaskToReadyList+0xc8>)
 800b6cc:	6013      	str	r3, [r2, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4413      	add	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4a15      	ldr	r2, [pc, #84]	; (800b730 <prvAddNewTaskToReadyList+0xcc>)
 800b6dc:	441a      	add	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f7ff fe0d 	bl	800b304 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6ea:	f000 fd2b 	bl	800c144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	; (800b724 <prvAddNewTaskToReadyList+0xc0>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00e      	beq.n	800b714 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6f6:	4b0a      	ldr	r3, [pc, #40]	; (800b720 <prvAddNewTaskToReadyList+0xbc>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b700:	429a      	cmp	r2, r3
 800b702:	d207      	bcs.n	800b714 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b704:	4b0b      	ldr	r3, [pc, #44]	; (800b734 <prvAddNewTaskToReadyList+0xd0>)
 800b706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b70a:	601a      	str	r2, [r3, #0]
 800b70c:	f3bf 8f4f 	dsb	sy
 800b710:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20000cbc 	.word	0x20000cbc
 800b720:	20000bbc 	.word	0x20000bbc
 800b724:	20000cc8 	.word	0x20000cc8
 800b728:	20000cd8 	.word	0x20000cd8
 800b72c:	20000cc4 	.word	0x20000cc4
 800b730:	20000bc0 	.word	0x20000bc0
 800b734:	e000ed04 	.word	0xe000ed04

0800b738 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b740:	2300      	movs	r3, #0
 800b742:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d017      	beq.n	800b77a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b74a:	4b13      	ldr	r3, [pc, #76]	; (800b798 <vTaskDelay+0x60>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <vTaskDelay+0x30>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	60bb      	str	r3, [r7, #8]
}
 800b764:	bf00      	nop
 800b766:	e7fe      	b.n	800b766 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b768:	f000 f87a 	bl	800b860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b76c:	2100      	movs	r1, #0
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fb28 	bl	800bdc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b774:	f000 f882 	bl	800b87c <xTaskResumeAll>
 800b778:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d107      	bne.n	800b790 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b780:	4b06      	ldr	r3, [pc, #24]	; (800b79c <vTaskDelay+0x64>)
 800b782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b790:	bf00      	nop
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	20000ce4 	.word	0x20000ce4
 800b79c:	e000ed04 	.word	0xe000ed04

0800b7a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08a      	sub	sp, #40	; 0x28
 800b7a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7ae:	463a      	mov	r2, r7
 800b7b0:	1d39      	adds	r1, r7, #4
 800b7b2:	f107 0308 	add.w	r3, r7, #8
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7f5 fe0e 	bl	80013d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	9202      	str	r2, [sp, #8]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	9300      	str	r3, [sp, #0]
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	460a      	mov	r2, r1
 800b7ce:	491e      	ldr	r1, [pc, #120]	; (800b848 <vTaskStartScheduler+0xa8>)
 800b7d0:	481e      	ldr	r0, [pc, #120]	; (800b84c <vTaskStartScheduler+0xac>)
 800b7d2:	f7ff fe1e 	bl	800b412 <xTaskCreateStatic>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	4a1d      	ldr	r2, [pc, #116]	; (800b850 <vTaskStartScheduler+0xb0>)
 800b7da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7dc:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <vTaskStartScheduler+0xb0>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d002      	beq.n	800b7ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	e001      	b.n	800b7ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d116      	bne.n	800b822 <vTaskStartScheduler+0x82>
	__asm volatile
 800b7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f8:	f383 8811 	msr	BASEPRI, r3
 800b7fc:	f3bf 8f6f 	isb	sy
 800b800:	f3bf 8f4f 	dsb	sy
 800b804:	613b      	str	r3, [r7, #16]
}
 800b806:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b808:	4b12      	ldr	r3, [pc, #72]	; (800b854 <vTaskStartScheduler+0xb4>)
 800b80a:	f04f 32ff 	mov.w	r2, #4294967295
 800b80e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b810:	4b11      	ldr	r3, [pc, #68]	; (800b858 <vTaskStartScheduler+0xb8>)
 800b812:	2201      	movs	r2, #1
 800b814:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b816:	4b11      	ldr	r3, [pc, #68]	; (800b85c <vTaskStartScheduler+0xbc>)
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b81c:	f000 fbc0 	bl	800bfa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b820:	e00e      	b.n	800b840 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b828:	d10a      	bne.n	800b840 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b82e:	f383 8811 	msr	BASEPRI, r3
 800b832:	f3bf 8f6f 	isb	sy
 800b836:	f3bf 8f4f 	dsb	sy
 800b83a:	60fb      	str	r3, [r7, #12]
}
 800b83c:	bf00      	nop
 800b83e:	e7fe      	b.n	800b83e <vTaskStartScheduler+0x9e>
}
 800b840:	bf00      	nop
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	0800ff64 	.word	0x0800ff64
 800b84c:	0800bbdd 	.word	0x0800bbdd
 800b850:	20000ce0 	.word	0x20000ce0
 800b854:	20000cdc 	.word	0x20000cdc
 800b858:	20000cc8 	.word	0x20000cc8
 800b85c:	20000cc0 	.word	0x20000cc0

0800b860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b860:	b480      	push	{r7}
 800b862:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b864:	4b04      	ldr	r3, [pc, #16]	; (800b878 <vTaskSuspendAll+0x18>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3301      	adds	r3, #1
 800b86a:	4a03      	ldr	r2, [pc, #12]	; (800b878 <vTaskSuspendAll+0x18>)
 800b86c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b86e:	bf00      	nop
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	20000ce4 	.word	0x20000ce4

0800b87c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b886:	2300      	movs	r3, #0
 800b888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b88a:	4b41      	ldr	r3, [pc, #260]	; (800b990 <xTaskResumeAll+0x114>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d10a      	bne.n	800b8a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800b892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b896:	f383 8811 	msr	BASEPRI, r3
 800b89a:	f3bf 8f6f 	isb	sy
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	603b      	str	r3, [r7, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	e7fe      	b.n	800b8a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8a8:	f000 fc1c 	bl	800c0e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8ac:	4b38      	ldr	r3, [pc, #224]	; (800b990 <xTaskResumeAll+0x114>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	4a37      	ldr	r2, [pc, #220]	; (800b990 <xTaskResumeAll+0x114>)
 800b8b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8b6:	4b36      	ldr	r3, [pc, #216]	; (800b990 <xTaskResumeAll+0x114>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d161      	bne.n	800b982 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8be:	4b35      	ldr	r3, [pc, #212]	; (800b994 <xTaskResumeAll+0x118>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d05d      	beq.n	800b982 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8c6:	e02e      	b.n	800b926 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8c8:	4b33      	ldr	r3, [pc, #204]	; (800b998 <xTaskResumeAll+0x11c>)
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	3318      	adds	r3, #24
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff fd72 	bl	800b3be <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	3304      	adds	r3, #4
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff fd6d 	bl	800b3be <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	409a      	lsls	r2, r3
 800b8ec:	4b2b      	ldr	r3, [pc, #172]	; (800b99c <xTaskResumeAll+0x120>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	4a2a      	ldr	r2, [pc, #168]	; (800b99c <xTaskResumeAll+0x120>)
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	009b      	lsls	r3, r3, #2
 800b8fe:	4413      	add	r3, r2
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4a27      	ldr	r2, [pc, #156]	; (800b9a0 <xTaskResumeAll+0x124>)
 800b904:	441a      	add	r2, r3
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	3304      	adds	r3, #4
 800b90a:	4619      	mov	r1, r3
 800b90c:	4610      	mov	r0, r2
 800b90e:	f7ff fcf9 	bl	800b304 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b916:	4b23      	ldr	r3, [pc, #140]	; (800b9a4 <xTaskResumeAll+0x128>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d302      	bcc.n	800b926 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b920:	4b21      	ldr	r3, [pc, #132]	; (800b9a8 <xTaskResumeAll+0x12c>)
 800b922:	2201      	movs	r2, #1
 800b924:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b926:	4b1c      	ldr	r3, [pc, #112]	; (800b998 <xTaskResumeAll+0x11c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1cc      	bne.n	800b8c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d001      	beq.n	800b938 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b934:	f000 fa08 	bl	800bd48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b938:	4b1c      	ldr	r3, [pc, #112]	; (800b9ac <xTaskResumeAll+0x130>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d010      	beq.n	800b966 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b944:	f000 f836 	bl	800b9b4 <xTaskIncrementTick>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d002      	beq.n	800b954 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b94e:	4b16      	ldr	r3, [pc, #88]	; (800b9a8 <xTaskResumeAll+0x12c>)
 800b950:	2201      	movs	r2, #1
 800b952:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3b01      	subs	r3, #1
 800b958:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d1f1      	bne.n	800b944 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b960:	4b12      	ldr	r3, [pc, #72]	; (800b9ac <xTaskResumeAll+0x130>)
 800b962:	2200      	movs	r2, #0
 800b964:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b966:	4b10      	ldr	r3, [pc, #64]	; (800b9a8 <xTaskResumeAll+0x12c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d009      	beq.n	800b982 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b96e:	2301      	movs	r3, #1
 800b970:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <xTaskResumeAll+0x134>)
 800b974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b982:	f000 fbdf 	bl	800c144 <vPortExitCritical>

	return xAlreadyYielded;
 800b986:	68bb      	ldr	r3, [r7, #8]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	20000ce4 	.word	0x20000ce4
 800b994:	20000cbc 	.word	0x20000cbc
 800b998:	20000c7c 	.word	0x20000c7c
 800b99c:	20000cc4 	.word	0x20000cc4
 800b9a0:	20000bc0 	.word	0x20000bc0
 800b9a4:	20000bbc 	.word	0x20000bbc
 800b9a8:	20000cd0 	.word	0x20000cd0
 800b9ac:	20000ccc 	.word	0x20000ccc
 800b9b0:	e000ed04 	.word	0xe000ed04

0800b9b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9be:	4b4e      	ldr	r3, [pc, #312]	; (800baf8 <xTaskIncrementTick+0x144>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f040 808e 	bne.w	800bae4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9c8:	4b4c      	ldr	r3, [pc, #304]	; (800bafc <xTaskIncrementTick+0x148>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9d0:	4a4a      	ldr	r2, [pc, #296]	; (800bafc <xTaskIncrementTick+0x148>)
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d120      	bne.n	800ba1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9dc:	4b48      	ldr	r3, [pc, #288]	; (800bb00 <xTaskIncrementTick+0x14c>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <xTaskIncrementTick+0x48>
	__asm volatile
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	603b      	str	r3, [r7, #0]
}
 800b9f8:	bf00      	nop
 800b9fa:	e7fe      	b.n	800b9fa <xTaskIncrementTick+0x46>
 800b9fc:	4b40      	ldr	r3, [pc, #256]	; (800bb00 <xTaskIncrementTick+0x14c>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60fb      	str	r3, [r7, #12]
 800ba02:	4b40      	ldr	r3, [pc, #256]	; (800bb04 <xTaskIncrementTick+0x150>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a3e      	ldr	r2, [pc, #248]	; (800bb00 <xTaskIncrementTick+0x14c>)
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	4a3e      	ldr	r2, [pc, #248]	; (800bb04 <xTaskIncrementTick+0x150>)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	4b3d      	ldr	r3, [pc, #244]	; (800bb08 <xTaskIncrementTick+0x154>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	3301      	adds	r3, #1
 800ba16:	4a3c      	ldr	r2, [pc, #240]	; (800bb08 <xTaskIncrementTick+0x154>)
 800ba18:	6013      	str	r3, [r2, #0]
 800ba1a:	f000 f995 	bl	800bd48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba1e:	4b3b      	ldr	r3, [pc, #236]	; (800bb0c <xTaskIncrementTick+0x158>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	693a      	ldr	r2, [r7, #16]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d348      	bcc.n	800baba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba28:	4b35      	ldr	r3, [pc, #212]	; (800bb00 <xTaskIncrementTick+0x14c>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d104      	bne.n	800ba3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba32:	4b36      	ldr	r3, [pc, #216]	; (800bb0c <xTaskIncrementTick+0x158>)
 800ba34:	f04f 32ff 	mov.w	r2, #4294967295
 800ba38:	601a      	str	r2, [r3, #0]
					break;
 800ba3a:	e03e      	b.n	800baba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba3c:	4b30      	ldr	r3, [pc, #192]	; (800bb00 <xTaskIncrementTick+0x14c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba4c:	693a      	ldr	r2, [r7, #16]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d203      	bcs.n	800ba5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba54:	4a2d      	ldr	r2, [pc, #180]	; (800bb0c <xTaskIncrementTick+0x158>)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba5a:	e02e      	b.n	800baba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	3304      	adds	r3, #4
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7ff fcac 	bl	800b3be <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d004      	beq.n	800ba78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	3318      	adds	r3, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fca3 	bl	800b3be <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	409a      	lsls	r2, r3
 800ba80:	4b23      	ldr	r3, [pc, #140]	; (800bb10 <xTaskIncrementTick+0x15c>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	4a22      	ldr	r2, [pc, #136]	; (800bb10 <xTaskIncrementTick+0x15c>)
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8e:	4613      	mov	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	4a1f      	ldr	r2, [pc, #124]	; (800bb14 <xTaskIncrementTick+0x160>)
 800ba98:	441a      	add	r2, r3
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4610      	mov	r0, r2
 800baa2:	f7ff fc2f 	bl	800b304 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baaa:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <xTaskIncrementTick+0x164>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d3b9      	bcc.n	800ba28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bab4:	2301      	movs	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab8:	e7b6      	b.n	800ba28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800baba:	4b17      	ldr	r3, [pc, #92]	; (800bb18 <xTaskIncrementTick+0x164>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac0:	4914      	ldr	r1, [pc, #80]	; (800bb14 <xTaskIncrementTick+0x160>)
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	440b      	add	r3, r1
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d901      	bls.n	800bad6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bad2:	2301      	movs	r3, #1
 800bad4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bad6:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <xTaskIncrementTick+0x168>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d007      	beq.n	800baee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bade:	2301      	movs	r3, #1
 800bae0:	617b      	str	r3, [r7, #20]
 800bae2:	e004      	b.n	800baee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bae4:	4b0e      	ldr	r3, [pc, #56]	; (800bb20 <xTaskIncrementTick+0x16c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3301      	adds	r3, #1
 800baea:	4a0d      	ldr	r2, [pc, #52]	; (800bb20 <xTaskIncrementTick+0x16c>)
 800baec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800baee:	697b      	ldr	r3, [r7, #20]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	20000ce4 	.word	0x20000ce4
 800bafc:	20000cc0 	.word	0x20000cc0
 800bb00:	20000c74 	.word	0x20000c74
 800bb04:	20000c78 	.word	0x20000c78
 800bb08:	20000cd4 	.word	0x20000cd4
 800bb0c:	20000cdc 	.word	0x20000cdc
 800bb10:	20000cc4 	.word	0x20000cc4
 800bb14:	20000bc0 	.word	0x20000bc0
 800bb18:	20000bbc 	.word	0x20000bbc
 800bb1c:	20000cd0 	.word	0x20000cd0
 800bb20:	20000ccc 	.word	0x20000ccc

0800bb24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb2a:	4b27      	ldr	r3, [pc, #156]	; (800bbc8 <vTaskSwitchContext+0xa4>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb32:	4b26      	ldr	r3, [pc, #152]	; (800bbcc <vTaskSwitchContext+0xa8>)
 800bb34:	2201      	movs	r2, #1
 800bb36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb38:	e03f      	b.n	800bbba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800bb3a:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <vTaskSwitchContext+0xa8>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb40:	4b23      	ldr	r3, [pc, #140]	; (800bbd0 <vTaskSwitchContext+0xac>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	fab3 f383 	clz	r3, r3
 800bb4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb4e:	7afb      	ldrb	r3, [r7, #11]
 800bb50:	f1c3 031f 	rsb	r3, r3, #31
 800bb54:	617b      	str	r3, [r7, #20]
 800bb56:	491f      	ldr	r1, [pc, #124]	; (800bbd4 <vTaskSwitchContext+0xb0>)
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	4413      	add	r3, r2
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	440b      	add	r3, r1
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10a      	bne.n	800bb80 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	607b      	str	r3, [r7, #4]
}
 800bb7c:	bf00      	nop
 800bb7e:	e7fe      	b.n	800bb7e <vTaskSwitchContext+0x5a>
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	4613      	mov	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4a12      	ldr	r2, [pc, #72]	; (800bbd4 <vTaskSwitchContext+0xb0>)
 800bb8c:	4413      	add	r3, r2
 800bb8e:	613b      	str	r3, [r7, #16]
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	605a      	str	r2, [r3, #4]
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	685a      	ldr	r2, [r3, #4]
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	3308      	adds	r3, #8
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d104      	bne.n	800bbb0 <vTaskSwitchContext+0x8c>
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	605a      	str	r2, [r3, #4]
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	4a08      	ldr	r2, [pc, #32]	; (800bbd8 <vTaskSwitchContext+0xb4>)
 800bbb8:	6013      	str	r3, [r2, #0]
}
 800bbba:	bf00      	nop
 800bbbc:	371c      	adds	r7, #28
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	20000ce4 	.word	0x20000ce4
 800bbcc:	20000cd0 	.word	0x20000cd0
 800bbd0:	20000cc4 	.word	0x20000cc4
 800bbd4:	20000bc0 	.word	0x20000bc0
 800bbd8:	20000bbc 	.word	0x20000bbc

0800bbdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b082      	sub	sp, #8
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbe4:	f000 f852 	bl	800bc8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <prvIdleTask+0x28>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d9f9      	bls.n	800bbe4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbf0:	4b05      	ldr	r3, [pc, #20]	; (800bc08 <prvIdleTask+0x2c>)
 800bbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bc00:	e7f0      	b.n	800bbe4 <prvIdleTask+0x8>
 800bc02:	bf00      	nop
 800bc04:	20000bc0 	.word	0x20000bc0
 800bc08:	e000ed04 	.word	0xe000ed04

0800bc0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc12:	2300      	movs	r3, #0
 800bc14:	607b      	str	r3, [r7, #4]
 800bc16:	e00c      	b.n	800bc32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4a12      	ldr	r2, [pc, #72]	; (800bc6c <prvInitialiseTaskLists+0x60>)
 800bc24:	4413      	add	r3, r2
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff fb3f 	bl	800b2aa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	607b      	str	r3, [r7, #4]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b06      	cmp	r3, #6
 800bc36:	d9ef      	bls.n	800bc18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc38:	480d      	ldr	r0, [pc, #52]	; (800bc70 <prvInitialiseTaskLists+0x64>)
 800bc3a:	f7ff fb36 	bl	800b2aa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc3e:	480d      	ldr	r0, [pc, #52]	; (800bc74 <prvInitialiseTaskLists+0x68>)
 800bc40:	f7ff fb33 	bl	800b2aa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc44:	480c      	ldr	r0, [pc, #48]	; (800bc78 <prvInitialiseTaskLists+0x6c>)
 800bc46:	f7ff fb30 	bl	800b2aa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc4a:	480c      	ldr	r0, [pc, #48]	; (800bc7c <prvInitialiseTaskLists+0x70>)
 800bc4c:	f7ff fb2d 	bl	800b2aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc50:	480b      	ldr	r0, [pc, #44]	; (800bc80 <prvInitialiseTaskLists+0x74>)
 800bc52:	f7ff fb2a 	bl	800b2aa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc56:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <prvInitialiseTaskLists+0x78>)
 800bc58:	4a05      	ldr	r2, [pc, #20]	; (800bc70 <prvInitialiseTaskLists+0x64>)
 800bc5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc5c:	4b0a      	ldr	r3, [pc, #40]	; (800bc88 <prvInitialiseTaskLists+0x7c>)
 800bc5e:	4a05      	ldr	r2, [pc, #20]	; (800bc74 <prvInitialiseTaskLists+0x68>)
 800bc60:	601a      	str	r2, [r3, #0]
}
 800bc62:	bf00      	nop
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	20000bc0 	.word	0x20000bc0
 800bc70:	20000c4c 	.word	0x20000c4c
 800bc74:	20000c60 	.word	0x20000c60
 800bc78:	20000c7c 	.word	0x20000c7c
 800bc7c:	20000c90 	.word	0x20000c90
 800bc80:	20000ca8 	.word	0x20000ca8
 800bc84:	20000c74 	.word	0x20000c74
 800bc88:	20000c78 	.word	0x20000c78

0800bc8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc92:	e019      	b.n	800bcc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc94:	f000 fa26 	bl	800c0e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc98:	4b10      	ldr	r3, [pc, #64]	; (800bcdc <prvCheckTasksWaitingTermination+0x50>)
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	3304      	adds	r3, #4
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7ff fb8a 	bl	800b3be <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bcaa:	4b0d      	ldr	r3, [pc, #52]	; (800bce0 <prvCheckTasksWaitingTermination+0x54>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	4a0b      	ldr	r2, [pc, #44]	; (800bce0 <prvCheckTasksWaitingTermination+0x54>)
 800bcb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bcb4:	4b0b      	ldr	r3, [pc, #44]	; (800bce4 <prvCheckTasksWaitingTermination+0x58>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3b01      	subs	r3, #1
 800bcba:	4a0a      	ldr	r2, [pc, #40]	; (800bce4 <prvCheckTasksWaitingTermination+0x58>)
 800bcbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bcbe:	f000 fa41 	bl	800c144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f810 	bl	800bce8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcc8:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <prvCheckTasksWaitingTermination+0x58>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1e1      	bne.n	800bc94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bcd0:	bf00      	nop
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	20000c90 	.word	0x20000c90
 800bce0:	20000cbc 	.word	0x20000cbc
 800bce4:	20000ca4 	.word	0x20000ca4

0800bce8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b084      	sub	sp, #16
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d108      	bne.n	800bd0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 fb9e 	bl	800c440 <vPortFree>
				vPortFree( pxTCB );
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fb9b 	bl	800c440 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bd0a:	e018      	b.n	800bd3e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d103      	bne.n	800bd1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fb92 	bl	800c440 <vPortFree>
	}
 800bd1c:	e00f      	b.n	800bd3e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d00a      	beq.n	800bd3e <prvDeleteTCB+0x56>
	__asm volatile
 800bd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	60fb      	str	r3, [r7, #12]
}
 800bd3a:	bf00      	nop
 800bd3c:	e7fe      	b.n	800bd3c <prvDeleteTCB+0x54>
	}
 800bd3e:	bf00      	nop
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd4e:	4b0c      	ldr	r3, [pc, #48]	; (800bd80 <prvResetNextTaskUnblockTime+0x38>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d104      	bne.n	800bd62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd58:	4b0a      	ldr	r3, [pc, #40]	; (800bd84 <prvResetNextTaskUnblockTime+0x3c>)
 800bd5a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd60:	e008      	b.n	800bd74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd62:	4b07      	ldr	r3, [pc, #28]	; (800bd80 <prvResetNextTaskUnblockTime+0x38>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	4a04      	ldr	r2, [pc, #16]	; (800bd84 <prvResetNextTaskUnblockTime+0x3c>)
 800bd72:	6013      	str	r3, [r2, #0]
}
 800bd74:	bf00      	nop
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr
 800bd80:	20000c74 	.word	0x20000c74
 800bd84:	20000cdc 	.word	0x20000cdc

0800bd88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd8e:	4b0b      	ldr	r3, [pc, #44]	; (800bdbc <xTaskGetSchedulerState+0x34>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d102      	bne.n	800bd9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd96:	2301      	movs	r3, #1
 800bd98:	607b      	str	r3, [r7, #4]
 800bd9a:	e008      	b.n	800bdae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd9c:	4b08      	ldr	r3, [pc, #32]	; (800bdc0 <xTaskGetSchedulerState+0x38>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d102      	bne.n	800bdaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bda4:	2302      	movs	r3, #2
 800bda6:	607b      	str	r3, [r7, #4]
 800bda8:	e001      	b.n	800bdae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdae:	687b      	ldr	r3, [r7, #4]
	}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000cc8 	.word	0x20000cc8
 800bdc0:	20000ce4 	.word	0x20000ce4

0800bdc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdce:	4b29      	ldr	r3, [pc, #164]	; (800be74 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdd4:	4b28      	ldr	r3, [pc, #160]	; (800be78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	3304      	adds	r3, #4
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff faef 	bl	800b3be <uxListRemove>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10b      	bne.n	800bdfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bde6:	4b24      	ldr	r3, [pc, #144]	; (800be78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdec:	2201      	movs	r2, #1
 800bdee:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf2:	43da      	mvns	r2, r3
 800bdf4:	4b21      	ldr	r3, [pc, #132]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	4a20      	ldr	r2, [pc, #128]	; (800be7c <prvAddCurrentTaskToDelayedList+0xb8>)
 800bdfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be04:	d10a      	bne.n	800be1c <prvAddCurrentTaskToDelayedList+0x58>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d007      	beq.n	800be1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be0c:	4b1a      	ldr	r3, [pc, #104]	; (800be78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3304      	adds	r3, #4
 800be12:	4619      	mov	r1, r3
 800be14:	481a      	ldr	r0, [pc, #104]	; (800be80 <prvAddCurrentTaskToDelayedList+0xbc>)
 800be16:	f7ff fa75 	bl	800b304 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be1a:	e026      	b.n	800be6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4413      	add	r3, r2
 800be22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be24:	4b14      	ldr	r3, [pc, #80]	; (800be78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	429a      	cmp	r2, r3
 800be32:	d209      	bcs.n	800be48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be34:	4b13      	ldr	r3, [pc, #76]	; (800be84 <prvAddCurrentTaskToDelayedList+0xc0>)
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	4b0f      	ldr	r3, [pc, #60]	; (800be78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	3304      	adds	r3, #4
 800be3e:	4619      	mov	r1, r3
 800be40:	4610      	mov	r0, r2
 800be42:	f7ff fa83 	bl	800b34c <vListInsert>
}
 800be46:	e010      	b.n	800be6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be48:	4b0f      	ldr	r3, [pc, #60]	; (800be88 <prvAddCurrentTaskToDelayedList+0xc4>)
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	4b0a      	ldr	r3, [pc, #40]	; (800be78 <prvAddCurrentTaskToDelayedList+0xb4>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	3304      	adds	r3, #4
 800be52:	4619      	mov	r1, r3
 800be54:	4610      	mov	r0, r2
 800be56:	f7ff fa79 	bl	800b34c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be5a:	4b0c      	ldr	r3, [pc, #48]	; (800be8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	429a      	cmp	r2, r3
 800be62:	d202      	bcs.n	800be6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800be64:	4a09      	ldr	r2, [pc, #36]	; (800be8c <prvAddCurrentTaskToDelayedList+0xc8>)
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	6013      	str	r3, [r2, #0]
}
 800be6a:	bf00      	nop
 800be6c:	3710      	adds	r7, #16
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20000cc0 	.word	0x20000cc0
 800be78:	20000bbc 	.word	0x20000bbc
 800be7c:	20000cc4 	.word	0x20000cc4
 800be80:	20000ca8 	.word	0x20000ca8
 800be84:	20000c78 	.word	0x20000c78
 800be88:	20000c74 	.word	0x20000c74
 800be8c:	20000cdc 	.word	0x20000cdc

0800be90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	3b04      	subs	r3, #4
 800bea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3b04      	subs	r3, #4
 800beae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f023 0201 	bic.w	r2, r3, #1
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3b04      	subs	r3, #4
 800bebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bec0:	4a0c      	ldr	r2, [pc, #48]	; (800bef4 <pxPortInitialiseStack+0x64>)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	3b14      	subs	r3, #20
 800beca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3b04      	subs	r3, #4
 800bed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f06f 0202 	mvn.w	r2, #2
 800bede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3b20      	subs	r3, #32
 800bee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bee6:	68fb      	ldr	r3, [r7, #12]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3714      	adds	r7, #20
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	0800bef9 	.word	0x0800bef9

0800bef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800befe:	2300      	movs	r3, #0
 800bf00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf02:	4b12      	ldr	r3, [pc, #72]	; (800bf4c <prvTaskExitError+0x54>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0a:	d00a      	beq.n	800bf22 <prvTaskExitError+0x2a>
	__asm volatile
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	60fb      	str	r3, [r7, #12]
}
 800bf1e:	bf00      	nop
 800bf20:	e7fe      	b.n	800bf20 <prvTaskExitError+0x28>
	__asm volatile
 800bf22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf26:	f383 8811 	msr	BASEPRI, r3
 800bf2a:	f3bf 8f6f 	isb	sy
 800bf2e:	f3bf 8f4f 	dsb	sy
 800bf32:	60bb      	str	r3, [r7, #8]
}
 800bf34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf36:	bf00      	nop
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0fc      	beq.n	800bf38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf3e:	bf00      	nop
 800bf40:	bf00      	nop
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	2000000c 	.word	0x2000000c

0800bf50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf50:	4b07      	ldr	r3, [pc, #28]	; (800bf70 <pxCurrentTCBConst2>)
 800bf52:	6819      	ldr	r1, [r3, #0]
 800bf54:	6808      	ldr	r0, [r1, #0]
 800bf56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5a:	f380 8809 	msr	PSP, r0
 800bf5e:	f3bf 8f6f 	isb	sy
 800bf62:	f04f 0000 	mov.w	r0, #0
 800bf66:	f380 8811 	msr	BASEPRI, r0
 800bf6a:	4770      	bx	lr
 800bf6c:	f3af 8000 	nop.w

0800bf70 <pxCurrentTCBConst2>:
 800bf70:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop

0800bf78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf78:	4808      	ldr	r0, [pc, #32]	; (800bf9c <prvPortStartFirstTask+0x24>)
 800bf7a:	6800      	ldr	r0, [r0, #0]
 800bf7c:	6800      	ldr	r0, [r0, #0]
 800bf7e:	f380 8808 	msr	MSP, r0
 800bf82:	f04f 0000 	mov.w	r0, #0
 800bf86:	f380 8814 	msr	CONTROL, r0
 800bf8a:	b662      	cpsie	i
 800bf8c:	b661      	cpsie	f
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	df00      	svc	0
 800bf98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf9a:	bf00      	nop
 800bf9c:	e000ed08 	.word	0xe000ed08

0800bfa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bfa6:	4b46      	ldr	r3, [pc, #280]	; (800c0c0 <xPortStartScheduler+0x120>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a46      	ldr	r2, [pc, #280]	; (800c0c4 <xPortStartScheduler+0x124>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d10a      	bne.n	800bfc6 <xPortStartScheduler+0x26>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	613b      	str	r3, [r7, #16]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfc6:	4b3e      	ldr	r3, [pc, #248]	; (800c0c0 <xPortStartScheduler+0x120>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a3f      	ldr	r2, [pc, #252]	; (800c0c8 <xPortStartScheduler+0x128>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d10a      	bne.n	800bfe6 <xPortStartScheduler+0x46>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	60fb      	str	r3, [r7, #12]
}
 800bfe2:	bf00      	nop
 800bfe4:	e7fe      	b.n	800bfe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfe6:	4b39      	ldr	r3, [pc, #228]	; (800c0cc <xPortStartScheduler+0x12c>)
 800bfe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	22ff      	movs	r2, #255	; 0xff
 800bff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c008:	b2da      	uxtb	r2, r3
 800c00a:	4b31      	ldr	r3, [pc, #196]	; (800c0d0 <xPortStartScheduler+0x130>)
 800c00c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c00e:	4b31      	ldr	r3, [pc, #196]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c010:	2207      	movs	r2, #7
 800c012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c014:	e009      	b.n	800c02a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c016:	4b2f      	ldr	r3, [pc, #188]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3b01      	subs	r3, #1
 800c01c:	4a2d      	ldr	r2, [pc, #180]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c01e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	b2db      	uxtb	r3, r3
 800c024:	005b      	lsls	r3, r3, #1
 800c026:	b2db      	uxtb	r3, r3
 800c028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c02a:	78fb      	ldrb	r3, [r7, #3]
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c032:	2b80      	cmp	r3, #128	; 0x80
 800c034:	d0ef      	beq.n	800c016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c036:	4b27      	ldr	r3, [pc, #156]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f1c3 0307 	rsb	r3, r3, #7
 800c03e:	2b04      	cmp	r3, #4
 800c040:	d00a      	beq.n	800c058 <xPortStartScheduler+0xb8>
	__asm volatile
 800c042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c046:	f383 8811 	msr	BASEPRI, r3
 800c04a:	f3bf 8f6f 	isb	sy
 800c04e:	f3bf 8f4f 	dsb	sy
 800c052:	60bb      	str	r3, [r7, #8]
}
 800c054:	bf00      	nop
 800c056:	e7fe      	b.n	800c056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c058:	4b1e      	ldr	r3, [pc, #120]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	021b      	lsls	r3, r3, #8
 800c05e:	4a1d      	ldr	r2, [pc, #116]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c062:	4b1c      	ldr	r3, [pc, #112]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c06a:	4a1a      	ldr	r2, [pc, #104]	; (800c0d4 <xPortStartScheduler+0x134>)
 800c06c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	b2da      	uxtb	r2, r3
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c076:	4b18      	ldr	r3, [pc, #96]	; (800c0d8 <xPortStartScheduler+0x138>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a17      	ldr	r2, [pc, #92]	; (800c0d8 <xPortStartScheduler+0x138>)
 800c07c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c082:	4b15      	ldr	r3, [pc, #84]	; (800c0d8 <xPortStartScheduler+0x138>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a14      	ldr	r2, [pc, #80]	; (800c0d8 <xPortStartScheduler+0x138>)
 800c088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c08c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c08e:	f000 f8dd 	bl	800c24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c092:	4b12      	ldr	r3, [pc, #72]	; (800c0dc <xPortStartScheduler+0x13c>)
 800c094:	2200      	movs	r2, #0
 800c096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c098:	f000 f8fc 	bl	800c294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c09c:	4b10      	ldr	r3, [pc, #64]	; (800c0e0 <xPortStartScheduler+0x140>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a0f      	ldr	r2, [pc, #60]	; (800c0e0 <xPortStartScheduler+0x140>)
 800c0a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c0a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0a8:	f7ff ff66 	bl	800bf78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0ac:	f7ff fd3a 	bl	800bb24 <vTaskSwitchContext>
	prvTaskExitError();
 800c0b0:	f7ff ff22 	bl	800bef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3718      	adds	r7, #24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
 800c0be:	bf00      	nop
 800c0c0:	e000ed00 	.word	0xe000ed00
 800c0c4:	410fc271 	.word	0x410fc271
 800c0c8:	410fc270 	.word	0x410fc270
 800c0cc:	e000e400 	.word	0xe000e400
 800c0d0:	20000ce8 	.word	0x20000ce8
 800c0d4:	20000cec 	.word	0x20000cec
 800c0d8:	e000ed20 	.word	0xe000ed20
 800c0dc:	2000000c 	.word	0x2000000c
 800c0e0:	e000ef34 	.word	0xe000ef34

0800c0e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ee:	f383 8811 	msr	BASEPRI, r3
 800c0f2:	f3bf 8f6f 	isb	sy
 800c0f6:	f3bf 8f4f 	dsb	sy
 800c0fa:	607b      	str	r3, [r7, #4]
}
 800c0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0fe:	4b0f      	ldr	r3, [pc, #60]	; (800c13c <vPortEnterCritical+0x58>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	3301      	adds	r3, #1
 800c104:	4a0d      	ldr	r2, [pc, #52]	; (800c13c <vPortEnterCritical+0x58>)
 800c106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c108:	4b0c      	ldr	r3, [pc, #48]	; (800c13c <vPortEnterCritical+0x58>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d10f      	bne.n	800c130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c110:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <vPortEnterCritical+0x5c>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00a      	beq.n	800c130 <vPortEnterCritical+0x4c>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	603b      	str	r3, [r7, #0]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <vPortEnterCritical+0x4a>
	}
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr
 800c13c:	2000000c 	.word	0x2000000c
 800c140:	e000ed04 	.word	0xe000ed04

0800c144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c14a:	4b12      	ldr	r3, [pc, #72]	; (800c194 <vPortExitCritical+0x50>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10a      	bne.n	800c168 <vPortExitCritical+0x24>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	607b      	str	r3, [r7, #4]
}
 800c164:	bf00      	nop
 800c166:	e7fe      	b.n	800c166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c168:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <vPortExitCritical+0x50>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	4a09      	ldr	r2, [pc, #36]	; (800c194 <vPortExitCritical+0x50>)
 800c170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c172:	4b08      	ldr	r3, [pc, #32]	; (800c194 <vPortExitCritical+0x50>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d105      	bne.n	800c186 <vPortExitCritical+0x42>
 800c17a:	2300      	movs	r3, #0
 800c17c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c186:	bf00      	nop
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	2000000c 	.word	0x2000000c
	...

0800c1a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1a0:	f3ef 8009 	mrs	r0, PSP
 800c1a4:	f3bf 8f6f 	isb	sy
 800c1a8:	4b15      	ldr	r3, [pc, #84]	; (800c200 <pxCurrentTCBConst>)
 800c1aa:	681a      	ldr	r2, [r3, #0]
 800c1ac:	f01e 0f10 	tst.w	lr, #16
 800c1b0:	bf08      	it	eq
 800c1b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ba:	6010      	str	r0, [r2, #0]
 800c1bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1c4:	f380 8811 	msr	BASEPRI, r0
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f7ff fca8 	bl	800bb24 <vTaskSwitchContext>
 800c1d4:	f04f 0000 	mov.w	r0, #0
 800c1d8:	f380 8811 	msr	BASEPRI, r0
 800c1dc:	bc09      	pop	{r0, r3}
 800c1de:	6819      	ldr	r1, [r3, #0]
 800c1e0:	6808      	ldr	r0, [r1, #0]
 800c1e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e6:	f01e 0f10 	tst.w	lr, #16
 800c1ea:	bf08      	it	eq
 800c1ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1f0:	f380 8809 	msr	PSP, r0
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	f3af 8000 	nop.w

0800c200 <pxCurrentTCBConst>:
 800c200:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop

0800c208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	607b      	str	r3, [r7, #4]
}
 800c220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c222:	f7ff fbc7 	bl	800b9b4 <xTaskIncrementTick>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c22c:	4b06      	ldr	r3, [pc, #24]	; (800c248 <xPortSysTickHandler+0x40>)
 800c22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	2300      	movs	r3, #0
 800c236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	f383 8811 	msr	BASEPRI, r3
}
 800c23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c24c:	b480      	push	{r7}
 800c24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c250:	4b0b      	ldr	r3, [pc, #44]	; (800c280 <vPortSetupTimerInterrupt+0x34>)
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c256:	4b0b      	ldr	r3, [pc, #44]	; (800c284 <vPortSetupTimerInterrupt+0x38>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c25c:	4b0a      	ldr	r3, [pc, #40]	; (800c288 <vPortSetupTimerInterrupt+0x3c>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a0a      	ldr	r2, [pc, #40]	; (800c28c <vPortSetupTimerInterrupt+0x40>)
 800c262:	fba2 2303 	umull	r2, r3, r2, r3
 800c266:	099b      	lsrs	r3, r3, #6
 800c268:	4a09      	ldr	r2, [pc, #36]	; (800c290 <vPortSetupTimerInterrupt+0x44>)
 800c26a:	3b01      	subs	r3, #1
 800c26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c26e:	4b04      	ldr	r3, [pc, #16]	; (800c280 <vPortSetupTimerInterrupt+0x34>)
 800c270:	2207      	movs	r2, #7
 800c272:	601a      	str	r2, [r3, #0]
}
 800c274:	bf00      	nop
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	e000e010 	.word	0xe000e010
 800c284:	e000e018 	.word	0xe000e018
 800c288:	20000000 	.word	0x20000000
 800c28c:	10624dd3 	.word	0x10624dd3
 800c290:	e000e014 	.word	0xe000e014

0800c294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c294:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c2a4 <vPortEnableVFP+0x10>
 800c298:	6801      	ldr	r1, [r0, #0]
 800c29a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c29e:	6001      	str	r1, [r0, #0]
 800c2a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c2a2:	bf00      	nop
 800c2a4:	e000ed88 	.word	0xe000ed88

0800c2a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b08a      	sub	sp, #40	; 0x28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c2b4:	f7ff fad4 	bl	800b860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c2b8:	4b5b      	ldr	r3, [pc, #364]	; (800c428 <pvPortMalloc+0x180>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d101      	bne.n	800c2c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c2c0:	f000 f920 	bl	800c504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c2c4:	4b59      	ldr	r3, [pc, #356]	; (800c42c <pvPortMalloc+0x184>)
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4013      	ands	r3, r2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f040 8093 	bne.w	800c3f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01d      	beq.n	800c314 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c2d8:	2208      	movs	r2, #8
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4413      	add	r3, r2
 800c2de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f003 0307 	and.w	r3, r3, #7
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d014      	beq.n	800c314 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f023 0307 	bic.w	r3, r3, #7
 800c2f0:	3308      	adds	r3, #8
 800c2f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00a      	beq.n	800c314 <pvPortMalloc+0x6c>
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	617b      	str	r3, [r7, #20]
}
 800c310:	bf00      	nop
 800c312:	e7fe      	b.n	800c312 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d06e      	beq.n	800c3f8 <pvPortMalloc+0x150>
 800c31a:	4b45      	ldr	r3, [pc, #276]	; (800c430 <pvPortMalloc+0x188>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d869      	bhi.n	800c3f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c324:	4b43      	ldr	r3, [pc, #268]	; (800c434 <pvPortMalloc+0x18c>)
 800c326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c328:	4b42      	ldr	r3, [pc, #264]	; (800c434 <pvPortMalloc+0x18c>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c32e:	e004      	b.n	800c33a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	429a      	cmp	r2, r3
 800c342:	d903      	bls.n	800c34c <pvPortMalloc+0xa4>
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1f1      	bne.n	800c330 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c34c:	4b36      	ldr	r3, [pc, #216]	; (800c428 <pvPortMalloc+0x180>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c352:	429a      	cmp	r2, r3
 800c354:	d050      	beq.n	800c3f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c356:	6a3b      	ldr	r3, [r7, #32]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2208      	movs	r2, #8
 800c35c:	4413      	add	r3, r2
 800c35e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	1ad2      	subs	r2, r2, r3
 800c370:	2308      	movs	r3, #8
 800c372:	005b      	lsls	r3, r3, #1
 800c374:	429a      	cmp	r2, r3
 800c376:	d91f      	bls.n	800c3b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4413      	add	r3, r2
 800c37e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	f003 0307 	and.w	r3, r3, #7
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <pvPortMalloc+0xf8>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	613b      	str	r3, [r7, #16]
}
 800c39c:	bf00      	nop
 800c39e:	e7fe      	b.n	800c39e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	685a      	ldr	r2, [r3, #4]
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	1ad2      	subs	r2, r2, r3
 800c3a8:	69bb      	ldr	r3, [r7, #24]
 800c3aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c3b2:	69b8      	ldr	r0, [r7, #24]
 800c3b4:	f000 f908 	bl	800c5c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c3b8:	4b1d      	ldr	r3, [pc, #116]	; (800c430 <pvPortMalloc+0x188>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	1ad3      	subs	r3, r2, r3
 800c3c2:	4a1b      	ldr	r2, [pc, #108]	; (800c430 <pvPortMalloc+0x188>)
 800c3c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c3c6:	4b1a      	ldr	r3, [pc, #104]	; (800c430 <pvPortMalloc+0x188>)
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	4b1b      	ldr	r3, [pc, #108]	; (800c438 <pvPortMalloc+0x190>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	429a      	cmp	r2, r3
 800c3d0:	d203      	bcs.n	800c3da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c3d2:	4b17      	ldr	r3, [pc, #92]	; (800c430 <pvPortMalloc+0x188>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a18      	ldr	r2, [pc, #96]	; (800c438 <pvPortMalloc+0x190>)
 800c3d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3dc:	685a      	ldr	r2, [r3, #4]
 800c3de:	4b13      	ldr	r3, [pc, #76]	; (800c42c <pvPortMalloc+0x184>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c3ee:	4b13      	ldr	r3, [pc, #76]	; (800c43c <pvPortMalloc+0x194>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	4a11      	ldr	r2, [pc, #68]	; (800c43c <pvPortMalloc+0x194>)
 800c3f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c3f8:	f7ff fa40 	bl	800b87c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3fc:	69fb      	ldr	r3, [r7, #28]
 800c3fe:	f003 0307 	and.w	r3, r3, #7
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00a      	beq.n	800c41c <pvPortMalloc+0x174>
	__asm volatile
 800c406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	60fb      	str	r3, [r7, #12]
}
 800c418:	bf00      	nop
 800c41a:	e7fe      	b.n	800c41a <pvPortMalloc+0x172>
	return pvReturn;
 800c41c:	69fb      	ldr	r3, [r7, #28]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3728      	adds	r7, #40	; 0x28
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
 800c426:	bf00      	nop
 800c428:	20002468 	.word	0x20002468
 800c42c:	2000247c 	.word	0x2000247c
 800c430:	2000246c 	.word	0x2000246c
 800c434:	20002460 	.word	0x20002460
 800c438:	20002470 	.word	0x20002470
 800c43c:	20002474 	.word	0x20002474

0800c440 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d04d      	beq.n	800c4ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c452:	2308      	movs	r3, #8
 800c454:	425b      	negs	r3, r3
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	4413      	add	r3, r2
 800c45a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	4b24      	ldr	r3, [pc, #144]	; (800c4f8 <vPortFree+0xb8>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4013      	ands	r3, r2
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10a      	bne.n	800c484 <vPortFree+0x44>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	60fb      	str	r3, [r7, #12]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00a      	beq.n	800c4a2 <vPortFree+0x62>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	60bb      	str	r3, [r7, #8]
}
 800c49e:	bf00      	nop
 800c4a0:	e7fe      	b.n	800c4a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	4b14      	ldr	r3, [pc, #80]	; (800c4f8 <vPortFree+0xb8>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d01e      	beq.n	800c4ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d11a      	bne.n	800c4ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	4b0e      	ldr	r3, [pc, #56]	; (800c4f8 <vPortFree+0xb8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	43db      	mvns	r3, r3
 800c4c2:	401a      	ands	r2, r3
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c4c8:	f7ff f9ca 	bl	800b860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	4b0a      	ldr	r3, [pc, #40]	; (800c4fc <vPortFree+0xbc>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	4a09      	ldr	r2, [pc, #36]	; (800c4fc <vPortFree+0xbc>)
 800c4d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c4da:	6938      	ldr	r0, [r7, #16]
 800c4dc:	f000 f874 	bl	800c5c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c4e0:	4b07      	ldr	r3, [pc, #28]	; (800c500 <vPortFree+0xc0>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	4a06      	ldr	r2, [pc, #24]	; (800c500 <vPortFree+0xc0>)
 800c4e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c4ea:	f7ff f9c7 	bl	800b87c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c4ee:	bf00      	nop
 800c4f0:	3718      	adds	r7, #24
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}
 800c4f6:	bf00      	nop
 800c4f8:	2000247c 	.word	0x2000247c
 800c4fc:	2000246c 	.word	0x2000246c
 800c500:	20002478 	.word	0x20002478

0800c504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c50a:	f241 7370 	movw	r3, #6000	; 0x1770
 800c50e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c510:	4b27      	ldr	r3, [pc, #156]	; (800c5b0 <prvHeapInit+0xac>)
 800c512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00c      	beq.n	800c538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3307      	adds	r3, #7
 800c522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f023 0307 	bic.w	r3, r3, #7
 800c52a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	4a1f      	ldr	r2, [pc, #124]	; (800c5b0 <prvHeapInit+0xac>)
 800c534:	4413      	add	r3, r2
 800c536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c53c:	4a1d      	ldr	r2, [pc, #116]	; (800c5b4 <prvHeapInit+0xb0>)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c542:	4b1c      	ldr	r3, [pc, #112]	; (800c5b4 <prvHeapInit+0xb0>)
 800c544:	2200      	movs	r2, #0
 800c546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	4413      	add	r3, r2
 800c54e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c550:	2208      	movs	r2, #8
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	1a9b      	subs	r3, r3, r2
 800c556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 0307 	bic.w	r3, r3, #7
 800c55e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	4a15      	ldr	r2, [pc, #84]	; (800c5b8 <prvHeapInit+0xb4>)
 800c564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c566:	4b14      	ldr	r3, [pc, #80]	; (800c5b8 <prvHeapInit+0xb4>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	2200      	movs	r2, #0
 800c56c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c56e:	4b12      	ldr	r3, [pc, #72]	; (800c5b8 <prvHeapInit+0xb4>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	1ad2      	subs	r2, r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c584:	4b0c      	ldr	r3, [pc, #48]	; (800c5b8 <prvHeapInit+0xb4>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	4a0a      	ldr	r2, [pc, #40]	; (800c5bc <prvHeapInit+0xb8>)
 800c592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	4a09      	ldr	r2, [pc, #36]	; (800c5c0 <prvHeapInit+0xbc>)
 800c59a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c59c:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <prvHeapInit+0xc0>)
 800c59e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c5a2:	601a      	str	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr
 800c5b0:	20000cf0 	.word	0x20000cf0
 800c5b4:	20002460 	.word	0x20002460
 800c5b8:	20002468 	.word	0x20002468
 800c5bc:	20002470 	.word	0x20002470
 800c5c0:	2000246c 	.word	0x2000246c
 800c5c4:	2000247c 	.word	0x2000247c

0800c5c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c5c8:	b480      	push	{r7}
 800c5ca:	b085      	sub	sp, #20
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c5d0:	4b28      	ldr	r3, [pc, #160]	; (800c674 <prvInsertBlockIntoFreeList+0xac>)
 800c5d2:	60fb      	str	r3, [r7, #12]
 800c5d4:	e002      	b.n	800c5dc <prvInsertBlockIntoFreeList+0x14>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	60fb      	str	r3, [r7, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d8f7      	bhi.n	800c5d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d108      	bne.n	800c60a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	441a      	add	r2, r3
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	441a      	add	r2, r3
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d118      	bne.n	800c650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	4b15      	ldr	r3, [pc, #84]	; (800c678 <prvInsertBlockIntoFreeList+0xb0>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	429a      	cmp	r2, r3
 800c628:	d00d      	beq.n	800c646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	685b      	ldr	r3, [r3, #4]
 800c634:	441a      	add	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	601a      	str	r2, [r3, #0]
 800c644:	e008      	b.n	800c658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c646:	4b0c      	ldr	r3, [pc, #48]	; (800c678 <prvInsertBlockIntoFreeList+0xb0>)
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	e003      	b.n	800c658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c658:	68fa      	ldr	r2, [r7, #12]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d002      	beq.n	800c666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c666:	bf00      	nop
 800c668:	3714      	adds	r7, #20
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop
 800c674:	20002460 	.word	0x20002460
 800c678:	20002468 	.word	0x20002468

0800c67c <__errno>:
 800c67c:	4b01      	ldr	r3, [pc, #4]	; (800c684 <__errno+0x8>)
 800c67e:	6818      	ldr	r0, [r3, #0]
 800c680:	4770      	bx	lr
 800c682:	bf00      	nop
 800c684:	20000010 	.word	0x20000010

0800c688 <__libc_init_array>:
 800c688:	b570      	push	{r4, r5, r6, lr}
 800c68a:	4d0d      	ldr	r5, [pc, #52]	; (800c6c0 <__libc_init_array+0x38>)
 800c68c:	4c0d      	ldr	r4, [pc, #52]	; (800c6c4 <__libc_init_array+0x3c>)
 800c68e:	1b64      	subs	r4, r4, r5
 800c690:	10a4      	asrs	r4, r4, #2
 800c692:	2600      	movs	r6, #0
 800c694:	42a6      	cmp	r6, r4
 800c696:	d109      	bne.n	800c6ac <__libc_init_array+0x24>
 800c698:	4d0b      	ldr	r5, [pc, #44]	; (800c6c8 <__libc_init_array+0x40>)
 800c69a:	4c0c      	ldr	r4, [pc, #48]	; (800c6cc <__libc_init_array+0x44>)
 800c69c:	f003 fb6c 	bl	800fd78 <_init>
 800c6a0:	1b64      	subs	r4, r4, r5
 800c6a2:	10a4      	asrs	r4, r4, #2
 800c6a4:	2600      	movs	r6, #0
 800c6a6:	42a6      	cmp	r6, r4
 800c6a8:	d105      	bne.n	800c6b6 <__libc_init_array+0x2e>
 800c6aa:	bd70      	pop	{r4, r5, r6, pc}
 800c6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6b0:	4798      	blx	r3
 800c6b2:	3601      	adds	r6, #1
 800c6b4:	e7ee      	b.n	800c694 <__libc_init_array+0xc>
 800c6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6ba:	4798      	blx	r3
 800c6bc:	3601      	adds	r6, #1
 800c6be:	e7f2      	b.n	800c6a6 <__libc_init_array+0x1e>
 800c6c0:	080103f4 	.word	0x080103f4
 800c6c4:	080103f4 	.word	0x080103f4
 800c6c8:	080103f4 	.word	0x080103f4
 800c6cc:	080103f8 	.word	0x080103f8

0800c6d0 <memcpy>:
 800c6d0:	440a      	add	r2, r1
 800c6d2:	4291      	cmp	r1, r2
 800c6d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6d8:	d100      	bne.n	800c6dc <memcpy+0xc>
 800c6da:	4770      	bx	lr
 800c6dc:	b510      	push	{r4, lr}
 800c6de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6e6:	4291      	cmp	r1, r2
 800c6e8:	d1f9      	bne.n	800c6de <memcpy+0xe>
 800c6ea:	bd10      	pop	{r4, pc}

0800c6ec <memset>:
 800c6ec:	4402      	add	r2, r0
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d100      	bne.n	800c6f6 <memset+0xa>
 800c6f4:	4770      	bx	lr
 800c6f6:	f803 1b01 	strb.w	r1, [r3], #1
 800c6fa:	e7f9      	b.n	800c6f0 <memset+0x4>

0800c6fc <_scanf_float>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	b087      	sub	sp, #28
 800c702:	4617      	mov	r7, r2
 800c704:	9303      	str	r3, [sp, #12]
 800c706:	688b      	ldr	r3, [r1, #8]
 800c708:	1e5a      	subs	r2, r3, #1
 800c70a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c70e:	bf83      	ittte	hi
 800c710:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c714:	195b      	addhi	r3, r3, r5
 800c716:	9302      	strhi	r3, [sp, #8]
 800c718:	2300      	movls	r3, #0
 800c71a:	bf86      	itte	hi
 800c71c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c720:	608b      	strhi	r3, [r1, #8]
 800c722:	9302      	strls	r3, [sp, #8]
 800c724:	680b      	ldr	r3, [r1, #0]
 800c726:	468b      	mov	fp, r1
 800c728:	2500      	movs	r5, #0
 800c72a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c72e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c732:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c736:	4680      	mov	r8, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	465e      	mov	r6, fp
 800c73c:	46aa      	mov	sl, r5
 800c73e:	46a9      	mov	r9, r5
 800c740:	9501      	str	r5, [sp, #4]
 800c742:	68a2      	ldr	r2, [r4, #8]
 800c744:	b152      	cbz	r2, 800c75c <_scanf_float+0x60>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	2b4e      	cmp	r3, #78	; 0x4e
 800c74c:	d864      	bhi.n	800c818 <_scanf_float+0x11c>
 800c74e:	2b40      	cmp	r3, #64	; 0x40
 800c750:	d83c      	bhi.n	800c7cc <_scanf_float+0xd0>
 800c752:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c756:	b2c8      	uxtb	r0, r1
 800c758:	280e      	cmp	r0, #14
 800c75a:	d93a      	bls.n	800c7d2 <_scanf_float+0xd6>
 800c75c:	f1b9 0f00 	cmp.w	r9, #0
 800c760:	d003      	beq.n	800c76a <_scanf_float+0x6e>
 800c762:	6823      	ldr	r3, [r4, #0]
 800c764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c76e:	f1ba 0f01 	cmp.w	sl, #1
 800c772:	f200 8113 	bhi.w	800c99c <_scanf_float+0x2a0>
 800c776:	455e      	cmp	r6, fp
 800c778:	f200 8105 	bhi.w	800c986 <_scanf_float+0x28a>
 800c77c:	2501      	movs	r5, #1
 800c77e:	4628      	mov	r0, r5
 800c780:	b007      	add	sp, #28
 800c782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c786:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c78a:	2a0d      	cmp	r2, #13
 800c78c:	d8e6      	bhi.n	800c75c <_scanf_float+0x60>
 800c78e:	a101      	add	r1, pc, #4	; (adr r1, 800c794 <_scanf_float+0x98>)
 800c790:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c794:	0800c8d3 	.word	0x0800c8d3
 800c798:	0800c75d 	.word	0x0800c75d
 800c79c:	0800c75d 	.word	0x0800c75d
 800c7a0:	0800c75d 	.word	0x0800c75d
 800c7a4:	0800c933 	.word	0x0800c933
 800c7a8:	0800c90b 	.word	0x0800c90b
 800c7ac:	0800c75d 	.word	0x0800c75d
 800c7b0:	0800c75d 	.word	0x0800c75d
 800c7b4:	0800c8e1 	.word	0x0800c8e1
 800c7b8:	0800c75d 	.word	0x0800c75d
 800c7bc:	0800c75d 	.word	0x0800c75d
 800c7c0:	0800c75d 	.word	0x0800c75d
 800c7c4:	0800c75d 	.word	0x0800c75d
 800c7c8:	0800c899 	.word	0x0800c899
 800c7cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c7d0:	e7db      	b.n	800c78a <_scanf_float+0x8e>
 800c7d2:	290e      	cmp	r1, #14
 800c7d4:	d8c2      	bhi.n	800c75c <_scanf_float+0x60>
 800c7d6:	a001      	add	r0, pc, #4	; (adr r0, 800c7dc <_scanf_float+0xe0>)
 800c7d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c7dc:	0800c88b 	.word	0x0800c88b
 800c7e0:	0800c75d 	.word	0x0800c75d
 800c7e4:	0800c88b 	.word	0x0800c88b
 800c7e8:	0800c91f 	.word	0x0800c91f
 800c7ec:	0800c75d 	.word	0x0800c75d
 800c7f0:	0800c839 	.word	0x0800c839
 800c7f4:	0800c875 	.word	0x0800c875
 800c7f8:	0800c875 	.word	0x0800c875
 800c7fc:	0800c875 	.word	0x0800c875
 800c800:	0800c875 	.word	0x0800c875
 800c804:	0800c875 	.word	0x0800c875
 800c808:	0800c875 	.word	0x0800c875
 800c80c:	0800c875 	.word	0x0800c875
 800c810:	0800c875 	.word	0x0800c875
 800c814:	0800c875 	.word	0x0800c875
 800c818:	2b6e      	cmp	r3, #110	; 0x6e
 800c81a:	d809      	bhi.n	800c830 <_scanf_float+0x134>
 800c81c:	2b60      	cmp	r3, #96	; 0x60
 800c81e:	d8b2      	bhi.n	800c786 <_scanf_float+0x8a>
 800c820:	2b54      	cmp	r3, #84	; 0x54
 800c822:	d077      	beq.n	800c914 <_scanf_float+0x218>
 800c824:	2b59      	cmp	r3, #89	; 0x59
 800c826:	d199      	bne.n	800c75c <_scanf_float+0x60>
 800c828:	2d07      	cmp	r5, #7
 800c82a:	d197      	bne.n	800c75c <_scanf_float+0x60>
 800c82c:	2508      	movs	r5, #8
 800c82e:	e029      	b.n	800c884 <_scanf_float+0x188>
 800c830:	2b74      	cmp	r3, #116	; 0x74
 800c832:	d06f      	beq.n	800c914 <_scanf_float+0x218>
 800c834:	2b79      	cmp	r3, #121	; 0x79
 800c836:	e7f6      	b.n	800c826 <_scanf_float+0x12a>
 800c838:	6821      	ldr	r1, [r4, #0]
 800c83a:	05c8      	lsls	r0, r1, #23
 800c83c:	d51a      	bpl.n	800c874 <_scanf_float+0x178>
 800c83e:	9b02      	ldr	r3, [sp, #8]
 800c840:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c844:	6021      	str	r1, [r4, #0]
 800c846:	f109 0901 	add.w	r9, r9, #1
 800c84a:	b11b      	cbz	r3, 800c854 <_scanf_float+0x158>
 800c84c:	3b01      	subs	r3, #1
 800c84e:	3201      	adds	r2, #1
 800c850:	9302      	str	r3, [sp, #8]
 800c852:	60a2      	str	r2, [r4, #8]
 800c854:	68a3      	ldr	r3, [r4, #8]
 800c856:	3b01      	subs	r3, #1
 800c858:	60a3      	str	r3, [r4, #8]
 800c85a:	6923      	ldr	r3, [r4, #16]
 800c85c:	3301      	adds	r3, #1
 800c85e:	6123      	str	r3, [r4, #16]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	3b01      	subs	r3, #1
 800c864:	2b00      	cmp	r3, #0
 800c866:	607b      	str	r3, [r7, #4]
 800c868:	f340 8084 	ble.w	800c974 <_scanf_float+0x278>
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	3301      	adds	r3, #1
 800c870:	603b      	str	r3, [r7, #0]
 800c872:	e766      	b.n	800c742 <_scanf_float+0x46>
 800c874:	eb1a 0f05 	cmn.w	sl, r5
 800c878:	f47f af70 	bne.w	800c75c <_scanf_float+0x60>
 800c87c:	6822      	ldr	r2, [r4, #0]
 800c87e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c882:	6022      	str	r2, [r4, #0]
 800c884:	f806 3b01 	strb.w	r3, [r6], #1
 800c888:	e7e4      	b.n	800c854 <_scanf_float+0x158>
 800c88a:	6822      	ldr	r2, [r4, #0]
 800c88c:	0610      	lsls	r0, r2, #24
 800c88e:	f57f af65 	bpl.w	800c75c <_scanf_float+0x60>
 800c892:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c896:	e7f4      	b.n	800c882 <_scanf_float+0x186>
 800c898:	f1ba 0f00 	cmp.w	sl, #0
 800c89c:	d10e      	bne.n	800c8bc <_scanf_float+0x1c0>
 800c89e:	f1b9 0f00 	cmp.w	r9, #0
 800c8a2:	d10e      	bne.n	800c8c2 <_scanf_float+0x1c6>
 800c8a4:	6822      	ldr	r2, [r4, #0]
 800c8a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c8aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c8ae:	d108      	bne.n	800c8c2 <_scanf_float+0x1c6>
 800c8b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8b4:	6022      	str	r2, [r4, #0]
 800c8b6:	f04f 0a01 	mov.w	sl, #1
 800c8ba:	e7e3      	b.n	800c884 <_scanf_float+0x188>
 800c8bc:	f1ba 0f02 	cmp.w	sl, #2
 800c8c0:	d055      	beq.n	800c96e <_scanf_float+0x272>
 800c8c2:	2d01      	cmp	r5, #1
 800c8c4:	d002      	beq.n	800c8cc <_scanf_float+0x1d0>
 800c8c6:	2d04      	cmp	r5, #4
 800c8c8:	f47f af48 	bne.w	800c75c <_scanf_float+0x60>
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	b2ed      	uxtb	r5, r5
 800c8d0:	e7d8      	b.n	800c884 <_scanf_float+0x188>
 800c8d2:	f1ba 0f01 	cmp.w	sl, #1
 800c8d6:	f47f af41 	bne.w	800c75c <_scanf_float+0x60>
 800c8da:	f04f 0a02 	mov.w	sl, #2
 800c8de:	e7d1      	b.n	800c884 <_scanf_float+0x188>
 800c8e0:	b97d      	cbnz	r5, 800c902 <_scanf_float+0x206>
 800c8e2:	f1b9 0f00 	cmp.w	r9, #0
 800c8e6:	f47f af3c 	bne.w	800c762 <_scanf_float+0x66>
 800c8ea:	6822      	ldr	r2, [r4, #0]
 800c8ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c8f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c8f4:	f47f af39 	bne.w	800c76a <_scanf_float+0x6e>
 800c8f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c8fc:	6022      	str	r2, [r4, #0]
 800c8fe:	2501      	movs	r5, #1
 800c900:	e7c0      	b.n	800c884 <_scanf_float+0x188>
 800c902:	2d03      	cmp	r5, #3
 800c904:	d0e2      	beq.n	800c8cc <_scanf_float+0x1d0>
 800c906:	2d05      	cmp	r5, #5
 800c908:	e7de      	b.n	800c8c8 <_scanf_float+0x1cc>
 800c90a:	2d02      	cmp	r5, #2
 800c90c:	f47f af26 	bne.w	800c75c <_scanf_float+0x60>
 800c910:	2503      	movs	r5, #3
 800c912:	e7b7      	b.n	800c884 <_scanf_float+0x188>
 800c914:	2d06      	cmp	r5, #6
 800c916:	f47f af21 	bne.w	800c75c <_scanf_float+0x60>
 800c91a:	2507      	movs	r5, #7
 800c91c:	e7b2      	b.n	800c884 <_scanf_float+0x188>
 800c91e:	6822      	ldr	r2, [r4, #0]
 800c920:	0591      	lsls	r1, r2, #22
 800c922:	f57f af1b 	bpl.w	800c75c <_scanf_float+0x60>
 800c926:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c92a:	6022      	str	r2, [r4, #0]
 800c92c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c930:	e7a8      	b.n	800c884 <_scanf_float+0x188>
 800c932:	6822      	ldr	r2, [r4, #0]
 800c934:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c938:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c93c:	d006      	beq.n	800c94c <_scanf_float+0x250>
 800c93e:	0550      	lsls	r0, r2, #21
 800c940:	f57f af0c 	bpl.w	800c75c <_scanf_float+0x60>
 800c944:	f1b9 0f00 	cmp.w	r9, #0
 800c948:	f43f af0f 	beq.w	800c76a <_scanf_float+0x6e>
 800c94c:	0591      	lsls	r1, r2, #22
 800c94e:	bf58      	it	pl
 800c950:	9901      	ldrpl	r1, [sp, #4]
 800c952:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c956:	bf58      	it	pl
 800c958:	eba9 0101 	subpl.w	r1, r9, r1
 800c95c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c960:	bf58      	it	pl
 800c962:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c966:	6022      	str	r2, [r4, #0]
 800c968:	f04f 0900 	mov.w	r9, #0
 800c96c:	e78a      	b.n	800c884 <_scanf_float+0x188>
 800c96e:	f04f 0a03 	mov.w	sl, #3
 800c972:	e787      	b.n	800c884 <_scanf_float+0x188>
 800c974:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c978:	4639      	mov	r1, r7
 800c97a:	4640      	mov	r0, r8
 800c97c:	4798      	blx	r3
 800c97e:	2800      	cmp	r0, #0
 800c980:	f43f aedf 	beq.w	800c742 <_scanf_float+0x46>
 800c984:	e6ea      	b.n	800c75c <_scanf_float+0x60>
 800c986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c98a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c98e:	463a      	mov	r2, r7
 800c990:	4640      	mov	r0, r8
 800c992:	4798      	blx	r3
 800c994:	6923      	ldr	r3, [r4, #16]
 800c996:	3b01      	subs	r3, #1
 800c998:	6123      	str	r3, [r4, #16]
 800c99a:	e6ec      	b.n	800c776 <_scanf_float+0x7a>
 800c99c:	1e6b      	subs	r3, r5, #1
 800c99e:	2b06      	cmp	r3, #6
 800c9a0:	d825      	bhi.n	800c9ee <_scanf_float+0x2f2>
 800c9a2:	2d02      	cmp	r5, #2
 800c9a4:	d836      	bhi.n	800ca14 <_scanf_float+0x318>
 800c9a6:	455e      	cmp	r6, fp
 800c9a8:	f67f aee8 	bls.w	800c77c <_scanf_float+0x80>
 800c9ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c9b4:	463a      	mov	r2, r7
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	4798      	blx	r3
 800c9ba:	6923      	ldr	r3, [r4, #16]
 800c9bc:	3b01      	subs	r3, #1
 800c9be:	6123      	str	r3, [r4, #16]
 800c9c0:	e7f1      	b.n	800c9a6 <_scanf_float+0x2aa>
 800c9c2:	9802      	ldr	r0, [sp, #8]
 800c9c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c9c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c9cc:	9002      	str	r0, [sp, #8]
 800c9ce:	463a      	mov	r2, r7
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	4798      	blx	r3
 800c9d4:	6923      	ldr	r3, [r4, #16]
 800c9d6:	3b01      	subs	r3, #1
 800c9d8:	6123      	str	r3, [r4, #16]
 800c9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9de:	fa5f fa8a 	uxtb.w	sl, sl
 800c9e2:	f1ba 0f02 	cmp.w	sl, #2
 800c9e6:	d1ec      	bne.n	800c9c2 <_scanf_float+0x2c6>
 800c9e8:	3d03      	subs	r5, #3
 800c9ea:	b2ed      	uxtb	r5, r5
 800c9ec:	1b76      	subs	r6, r6, r5
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	05da      	lsls	r2, r3, #23
 800c9f2:	d52f      	bpl.n	800ca54 <_scanf_float+0x358>
 800c9f4:	055b      	lsls	r3, r3, #21
 800c9f6:	d510      	bpl.n	800ca1a <_scanf_float+0x31e>
 800c9f8:	455e      	cmp	r6, fp
 800c9fa:	f67f aebf 	bls.w	800c77c <_scanf_float+0x80>
 800c9fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca06:	463a      	mov	r2, r7
 800ca08:	4640      	mov	r0, r8
 800ca0a:	4798      	blx	r3
 800ca0c:	6923      	ldr	r3, [r4, #16]
 800ca0e:	3b01      	subs	r3, #1
 800ca10:	6123      	str	r3, [r4, #16]
 800ca12:	e7f1      	b.n	800c9f8 <_scanf_float+0x2fc>
 800ca14:	46aa      	mov	sl, r5
 800ca16:	9602      	str	r6, [sp, #8]
 800ca18:	e7df      	b.n	800c9da <_scanf_float+0x2de>
 800ca1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ca1e:	6923      	ldr	r3, [r4, #16]
 800ca20:	2965      	cmp	r1, #101	; 0x65
 800ca22:	f103 33ff 	add.w	r3, r3, #4294967295
 800ca26:	f106 35ff 	add.w	r5, r6, #4294967295
 800ca2a:	6123      	str	r3, [r4, #16]
 800ca2c:	d00c      	beq.n	800ca48 <_scanf_float+0x34c>
 800ca2e:	2945      	cmp	r1, #69	; 0x45
 800ca30:	d00a      	beq.n	800ca48 <_scanf_float+0x34c>
 800ca32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca36:	463a      	mov	r2, r7
 800ca38:	4640      	mov	r0, r8
 800ca3a:	4798      	blx	r3
 800ca3c:	6923      	ldr	r3, [r4, #16]
 800ca3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ca42:	3b01      	subs	r3, #1
 800ca44:	1eb5      	subs	r5, r6, #2
 800ca46:	6123      	str	r3, [r4, #16]
 800ca48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca4c:	463a      	mov	r2, r7
 800ca4e:	4640      	mov	r0, r8
 800ca50:	4798      	blx	r3
 800ca52:	462e      	mov	r6, r5
 800ca54:	6825      	ldr	r5, [r4, #0]
 800ca56:	f015 0510 	ands.w	r5, r5, #16
 800ca5a:	d159      	bne.n	800cb10 <_scanf_float+0x414>
 800ca5c:	7035      	strb	r5, [r6, #0]
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ca64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca68:	d11b      	bne.n	800caa2 <_scanf_float+0x3a6>
 800ca6a:	9b01      	ldr	r3, [sp, #4]
 800ca6c:	454b      	cmp	r3, r9
 800ca6e:	eba3 0209 	sub.w	r2, r3, r9
 800ca72:	d123      	bne.n	800cabc <_scanf_float+0x3c0>
 800ca74:	2200      	movs	r2, #0
 800ca76:	4659      	mov	r1, fp
 800ca78:	4640      	mov	r0, r8
 800ca7a:	f000 ff23 	bl	800d8c4 <_strtod_r>
 800ca7e:	6822      	ldr	r2, [r4, #0]
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	f012 0f02 	tst.w	r2, #2
 800ca86:	ec57 6b10 	vmov	r6, r7, d0
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	d021      	beq.n	800cad2 <_scanf_float+0x3d6>
 800ca8e:	9903      	ldr	r1, [sp, #12]
 800ca90:	1d1a      	adds	r2, r3, #4
 800ca92:	600a      	str	r2, [r1, #0]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	e9c3 6700 	strd	r6, r7, [r3]
 800ca9a:	68e3      	ldr	r3, [r4, #12]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	60e3      	str	r3, [r4, #12]
 800caa0:	e66d      	b.n	800c77e <_scanf_float+0x82>
 800caa2:	9b04      	ldr	r3, [sp, #16]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d0e5      	beq.n	800ca74 <_scanf_float+0x378>
 800caa8:	9905      	ldr	r1, [sp, #20]
 800caaa:	230a      	movs	r3, #10
 800caac:	462a      	mov	r2, r5
 800caae:	3101      	adds	r1, #1
 800cab0:	4640      	mov	r0, r8
 800cab2:	f000 ff8f 	bl	800d9d4 <_strtol_r>
 800cab6:	9b04      	ldr	r3, [sp, #16]
 800cab8:	9e05      	ldr	r6, [sp, #20]
 800caba:	1ac2      	subs	r2, r0, r3
 800cabc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cac0:	429e      	cmp	r6, r3
 800cac2:	bf28      	it	cs
 800cac4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cac8:	4912      	ldr	r1, [pc, #72]	; (800cb14 <_scanf_float+0x418>)
 800caca:	4630      	mov	r0, r6
 800cacc:	f000 f860 	bl	800cb90 <siprintf>
 800cad0:	e7d0      	b.n	800ca74 <_scanf_float+0x378>
 800cad2:	9903      	ldr	r1, [sp, #12]
 800cad4:	f012 0f04 	tst.w	r2, #4
 800cad8:	f103 0204 	add.w	r2, r3, #4
 800cadc:	600a      	str	r2, [r1, #0]
 800cade:	d1d9      	bne.n	800ca94 <_scanf_float+0x398>
 800cae0:	f8d3 8000 	ldr.w	r8, [r3]
 800cae4:	ee10 2a10 	vmov	r2, s0
 800cae8:	ee10 0a10 	vmov	r0, s0
 800caec:	463b      	mov	r3, r7
 800caee:	4639      	mov	r1, r7
 800caf0:	f7f4 f81c 	bl	8000b2c <__aeabi_dcmpun>
 800caf4:	b128      	cbz	r0, 800cb02 <_scanf_float+0x406>
 800caf6:	4808      	ldr	r0, [pc, #32]	; (800cb18 <_scanf_float+0x41c>)
 800caf8:	f000 f810 	bl	800cb1c <nanf>
 800cafc:	ed88 0a00 	vstr	s0, [r8]
 800cb00:	e7cb      	b.n	800ca9a <_scanf_float+0x39e>
 800cb02:	4630      	mov	r0, r6
 800cb04:	4639      	mov	r1, r7
 800cb06:	f7f4 f847 	bl	8000b98 <__aeabi_d2f>
 800cb0a:	f8c8 0000 	str.w	r0, [r8]
 800cb0e:	e7c4      	b.n	800ca9a <_scanf_float+0x39e>
 800cb10:	2500      	movs	r5, #0
 800cb12:	e634      	b.n	800c77e <_scanf_float+0x82>
 800cb14:	0800ffb8 	.word	0x0800ffb8
 800cb18:	0801038a 	.word	0x0801038a

0800cb1c <nanf>:
 800cb1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb24 <nanf+0x8>
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	7fc00000 	.word	0x7fc00000

0800cb28 <sniprintf>:
 800cb28:	b40c      	push	{r2, r3}
 800cb2a:	b530      	push	{r4, r5, lr}
 800cb2c:	4b17      	ldr	r3, [pc, #92]	; (800cb8c <sniprintf+0x64>)
 800cb2e:	1e0c      	subs	r4, r1, #0
 800cb30:	681d      	ldr	r5, [r3, #0]
 800cb32:	b09d      	sub	sp, #116	; 0x74
 800cb34:	da08      	bge.n	800cb48 <sniprintf+0x20>
 800cb36:	238b      	movs	r3, #139	; 0x8b
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3e:	b01d      	add	sp, #116	; 0x74
 800cb40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb44:	b002      	add	sp, #8
 800cb46:	4770      	bx	lr
 800cb48:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cb4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb50:	bf14      	ite	ne
 800cb52:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cb56:	4623      	moveq	r3, r4
 800cb58:	9304      	str	r3, [sp, #16]
 800cb5a:	9307      	str	r3, [sp, #28]
 800cb5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cb60:	9002      	str	r0, [sp, #8]
 800cb62:	9006      	str	r0, [sp, #24]
 800cb64:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cb68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cb6a:	ab21      	add	r3, sp, #132	; 0x84
 800cb6c:	a902      	add	r1, sp, #8
 800cb6e:	4628      	mov	r0, r5
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	f002 f8af 	bl	800ecd4 <_svfiprintf_r>
 800cb76:	1c43      	adds	r3, r0, #1
 800cb78:	bfbc      	itt	lt
 800cb7a:	238b      	movlt	r3, #139	; 0x8b
 800cb7c:	602b      	strlt	r3, [r5, #0]
 800cb7e:	2c00      	cmp	r4, #0
 800cb80:	d0dd      	beq.n	800cb3e <sniprintf+0x16>
 800cb82:	9b02      	ldr	r3, [sp, #8]
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
 800cb88:	e7d9      	b.n	800cb3e <sniprintf+0x16>
 800cb8a:	bf00      	nop
 800cb8c:	20000010 	.word	0x20000010

0800cb90 <siprintf>:
 800cb90:	b40e      	push	{r1, r2, r3}
 800cb92:	b500      	push	{lr}
 800cb94:	b09c      	sub	sp, #112	; 0x70
 800cb96:	ab1d      	add	r3, sp, #116	; 0x74
 800cb98:	9002      	str	r0, [sp, #8]
 800cb9a:	9006      	str	r0, [sp, #24]
 800cb9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cba0:	4809      	ldr	r0, [pc, #36]	; (800cbc8 <siprintf+0x38>)
 800cba2:	9107      	str	r1, [sp, #28]
 800cba4:	9104      	str	r1, [sp, #16]
 800cba6:	4909      	ldr	r1, [pc, #36]	; (800cbcc <siprintf+0x3c>)
 800cba8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbac:	9105      	str	r1, [sp, #20]
 800cbae:	6800      	ldr	r0, [r0, #0]
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	a902      	add	r1, sp, #8
 800cbb4:	f002 f88e 	bl	800ecd4 <_svfiprintf_r>
 800cbb8:	9b02      	ldr	r3, [sp, #8]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	701a      	strb	r2, [r3, #0]
 800cbbe:	b01c      	add	sp, #112	; 0x70
 800cbc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbc4:	b003      	add	sp, #12
 800cbc6:	4770      	bx	lr
 800cbc8:	20000010 	.word	0x20000010
 800cbcc:	ffff0208 	.word	0xffff0208

0800cbd0 <__sread>:
 800cbd0:	b510      	push	{r4, lr}
 800cbd2:	460c      	mov	r4, r1
 800cbd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbd8:	f002 fb10 	bl	800f1fc <_read_r>
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	bfab      	itete	ge
 800cbe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbe2:	89a3      	ldrhlt	r3, [r4, #12]
 800cbe4:	181b      	addge	r3, r3, r0
 800cbe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbea:	bfac      	ite	ge
 800cbec:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbee:	81a3      	strhlt	r3, [r4, #12]
 800cbf0:	bd10      	pop	{r4, pc}

0800cbf2 <__swrite>:
 800cbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbf6:	461f      	mov	r7, r3
 800cbf8:	898b      	ldrh	r3, [r1, #12]
 800cbfa:	05db      	lsls	r3, r3, #23
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	4616      	mov	r6, r2
 800cc02:	d505      	bpl.n	800cc10 <__swrite+0x1e>
 800cc04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc08:	2302      	movs	r3, #2
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f001 fa76 	bl	800e0fc <_lseek_r>
 800cc10:	89a3      	ldrh	r3, [r4, #12]
 800cc12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc1a:	81a3      	strh	r3, [r4, #12]
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	463b      	mov	r3, r7
 800cc20:	4628      	mov	r0, r5
 800cc22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc26:	f000 bed7 	b.w	800d9d8 <_write_r>

0800cc2a <__sseek>:
 800cc2a:	b510      	push	{r4, lr}
 800cc2c:	460c      	mov	r4, r1
 800cc2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc32:	f001 fa63 	bl	800e0fc <_lseek_r>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	bf15      	itete	ne
 800cc3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc46:	81a3      	strheq	r3, [r4, #12]
 800cc48:	bf18      	it	ne
 800cc4a:	81a3      	strhne	r3, [r4, #12]
 800cc4c:	bd10      	pop	{r4, pc}

0800cc4e <__sclose>:
 800cc4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc52:	f000 bed3 	b.w	800d9fc <_close_r>

0800cc56 <strncmp>:
 800cc56:	b510      	push	{r4, lr}
 800cc58:	b17a      	cbz	r2, 800cc7a <strncmp+0x24>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	3901      	subs	r1, #1
 800cc5e:	1884      	adds	r4, r0, r2
 800cc60:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cc64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cc68:	4290      	cmp	r0, r2
 800cc6a:	d101      	bne.n	800cc70 <strncmp+0x1a>
 800cc6c:	42a3      	cmp	r3, r4
 800cc6e:	d101      	bne.n	800cc74 <strncmp+0x1e>
 800cc70:	1a80      	subs	r0, r0, r2
 800cc72:	bd10      	pop	{r4, pc}
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d1f3      	bne.n	800cc60 <strncmp+0xa>
 800cc78:	e7fa      	b.n	800cc70 <strncmp+0x1a>
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	e7f9      	b.n	800cc72 <strncmp+0x1c>

0800cc7e <sulp>:
 800cc7e:	b570      	push	{r4, r5, r6, lr}
 800cc80:	4604      	mov	r4, r0
 800cc82:	460d      	mov	r5, r1
 800cc84:	ec45 4b10 	vmov	d0, r4, r5
 800cc88:	4616      	mov	r6, r2
 800cc8a:	f001 fdcd 	bl	800e828 <__ulp>
 800cc8e:	ec51 0b10 	vmov	r0, r1, d0
 800cc92:	b17e      	cbz	r6, 800ccb4 <sulp+0x36>
 800cc94:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cc98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd09      	ble.n	800ccb4 <sulp+0x36>
 800cca0:	051b      	lsls	r3, r3, #20
 800cca2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cca6:	2400      	movs	r4, #0
 800cca8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ccac:	4622      	mov	r2, r4
 800ccae:	462b      	mov	r3, r5
 800ccb0:	f7f3 fca2 	bl	80005f8 <__aeabi_dmul>
 800ccb4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ccb8 <_strtod_l>:
 800ccb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccbc:	ed2d 8b02 	vpush	{d8}
 800ccc0:	b09d      	sub	sp, #116	; 0x74
 800ccc2:	461f      	mov	r7, r3
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9318      	str	r3, [sp, #96]	; 0x60
 800ccc8:	4ba2      	ldr	r3, [pc, #648]	; (800cf54 <_strtod_l+0x29c>)
 800ccca:	9213      	str	r2, [sp, #76]	; 0x4c
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	9305      	str	r3, [sp, #20]
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	4688      	mov	r8, r1
 800ccd6:	f7f3 fa7b 	bl	80001d0 <strlen>
 800ccda:	f04f 0a00 	mov.w	sl, #0
 800ccde:	4605      	mov	r5, r0
 800cce0:	f04f 0b00 	mov.w	fp, #0
 800cce4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccea:	781a      	ldrb	r2, [r3, #0]
 800ccec:	2a2b      	cmp	r2, #43	; 0x2b
 800ccee:	d04e      	beq.n	800cd8e <_strtod_l+0xd6>
 800ccf0:	d83b      	bhi.n	800cd6a <_strtod_l+0xb2>
 800ccf2:	2a0d      	cmp	r2, #13
 800ccf4:	d834      	bhi.n	800cd60 <_strtod_l+0xa8>
 800ccf6:	2a08      	cmp	r2, #8
 800ccf8:	d834      	bhi.n	800cd64 <_strtod_l+0xac>
 800ccfa:	2a00      	cmp	r2, #0
 800ccfc:	d03e      	beq.n	800cd7c <_strtod_l+0xc4>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	930a      	str	r3, [sp, #40]	; 0x28
 800cd02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800cd04:	7833      	ldrb	r3, [r6, #0]
 800cd06:	2b30      	cmp	r3, #48	; 0x30
 800cd08:	f040 80b0 	bne.w	800ce6c <_strtod_l+0x1b4>
 800cd0c:	7873      	ldrb	r3, [r6, #1]
 800cd0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cd12:	2b58      	cmp	r3, #88	; 0x58
 800cd14:	d168      	bne.n	800cde8 <_strtod_l+0x130>
 800cd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	ab18      	add	r3, sp, #96	; 0x60
 800cd1c:	9702      	str	r7, [sp, #8]
 800cd1e:	9300      	str	r3, [sp, #0]
 800cd20:	4a8d      	ldr	r2, [pc, #564]	; (800cf58 <_strtod_l+0x2a0>)
 800cd22:	ab19      	add	r3, sp, #100	; 0x64
 800cd24:	a917      	add	r1, sp, #92	; 0x5c
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 fee0 	bl	800daec <__gethex>
 800cd2c:	f010 0707 	ands.w	r7, r0, #7
 800cd30:	4605      	mov	r5, r0
 800cd32:	d005      	beq.n	800cd40 <_strtod_l+0x88>
 800cd34:	2f06      	cmp	r7, #6
 800cd36:	d12c      	bne.n	800cd92 <_strtod_l+0xda>
 800cd38:	3601      	adds	r6, #1
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd3e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f040 8590 	bne.w	800d868 <_strtod_l+0xbb0>
 800cd48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd4a:	b1eb      	cbz	r3, 800cd88 <_strtod_l+0xd0>
 800cd4c:	4652      	mov	r2, sl
 800cd4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cd52:	ec43 2b10 	vmov	d0, r2, r3
 800cd56:	b01d      	add	sp, #116	; 0x74
 800cd58:	ecbd 8b02 	vpop	{d8}
 800cd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd60:	2a20      	cmp	r2, #32
 800cd62:	d1cc      	bne.n	800ccfe <_strtod_l+0x46>
 800cd64:	3301      	adds	r3, #1
 800cd66:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd68:	e7be      	b.n	800cce8 <_strtod_l+0x30>
 800cd6a:	2a2d      	cmp	r2, #45	; 0x2d
 800cd6c:	d1c7      	bne.n	800ccfe <_strtod_l+0x46>
 800cd6e:	2201      	movs	r2, #1
 800cd70:	920a      	str	r2, [sp, #40]	; 0x28
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	9217      	str	r2, [sp, #92]	; 0x5c
 800cd76:	785b      	ldrb	r3, [r3, #1]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1c2      	bne.n	800cd02 <_strtod_l+0x4a>
 800cd7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cd7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f040 856e 	bne.w	800d864 <_strtod_l+0xbac>
 800cd88:	4652      	mov	r2, sl
 800cd8a:	465b      	mov	r3, fp
 800cd8c:	e7e1      	b.n	800cd52 <_strtod_l+0x9a>
 800cd8e:	2200      	movs	r2, #0
 800cd90:	e7ee      	b.n	800cd70 <_strtod_l+0xb8>
 800cd92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cd94:	b13a      	cbz	r2, 800cda6 <_strtod_l+0xee>
 800cd96:	2135      	movs	r1, #53	; 0x35
 800cd98:	a81a      	add	r0, sp, #104	; 0x68
 800cd9a:	f001 fe50 	bl	800ea3e <__copybits>
 800cd9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cda0:	4620      	mov	r0, r4
 800cda2:	f001 fa0f 	bl	800e1c4 <_Bfree>
 800cda6:	3f01      	subs	r7, #1
 800cda8:	2f04      	cmp	r7, #4
 800cdaa:	d806      	bhi.n	800cdba <_strtod_l+0x102>
 800cdac:	e8df f007 	tbb	[pc, r7]
 800cdb0:	1714030a 	.word	0x1714030a
 800cdb4:	0a          	.byte	0x0a
 800cdb5:	00          	.byte	0x00
 800cdb6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cdba:	0728      	lsls	r0, r5, #28
 800cdbc:	d5c0      	bpl.n	800cd40 <_strtod_l+0x88>
 800cdbe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cdc2:	e7bd      	b.n	800cd40 <_strtod_l+0x88>
 800cdc4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cdc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cdca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cdce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cdd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cdd6:	e7f0      	b.n	800cdba <_strtod_l+0x102>
 800cdd8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cf5c <_strtod_l+0x2a4>
 800cddc:	e7ed      	b.n	800cdba <_strtod_l+0x102>
 800cdde:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cde2:	f04f 3aff 	mov.w	sl, #4294967295
 800cde6:	e7e8      	b.n	800cdba <_strtod_l+0x102>
 800cde8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	9217      	str	r2, [sp, #92]	; 0x5c
 800cdee:	785b      	ldrb	r3, [r3, #1]
 800cdf0:	2b30      	cmp	r3, #48	; 0x30
 800cdf2:	d0f9      	beq.n	800cde8 <_strtod_l+0x130>
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d0a3      	beq.n	800cd40 <_strtod_l+0x88>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	f04f 0900 	mov.w	r9, #0
 800cdfe:	9304      	str	r3, [sp, #16]
 800ce00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce02:	9308      	str	r3, [sp, #32]
 800ce04:	f8cd 901c 	str.w	r9, [sp, #28]
 800ce08:	464f      	mov	r7, r9
 800ce0a:	220a      	movs	r2, #10
 800ce0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ce0e:	7806      	ldrb	r6, [r0, #0]
 800ce10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ce14:	b2d9      	uxtb	r1, r3
 800ce16:	2909      	cmp	r1, #9
 800ce18:	d92a      	bls.n	800ce70 <_strtod_l+0x1b8>
 800ce1a:	9905      	ldr	r1, [sp, #20]
 800ce1c:	462a      	mov	r2, r5
 800ce1e:	f7ff ff1a 	bl	800cc56 <strncmp>
 800ce22:	b398      	cbz	r0, 800ce8c <_strtod_l+0x1d4>
 800ce24:	2000      	movs	r0, #0
 800ce26:	4632      	mov	r2, r6
 800ce28:	463d      	mov	r5, r7
 800ce2a:	9005      	str	r0, [sp, #20]
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2a65      	cmp	r2, #101	; 0x65
 800ce30:	d001      	beq.n	800ce36 <_strtod_l+0x17e>
 800ce32:	2a45      	cmp	r2, #69	; 0x45
 800ce34:	d118      	bne.n	800ce68 <_strtod_l+0x1b0>
 800ce36:	b91d      	cbnz	r5, 800ce40 <_strtod_l+0x188>
 800ce38:	9a04      	ldr	r2, [sp, #16]
 800ce3a:	4302      	orrs	r2, r0
 800ce3c:	d09e      	beq.n	800cd7c <_strtod_l+0xc4>
 800ce3e:	2500      	movs	r5, #0
 800ce40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ce44:	f108 0201 	add.w	r2, r8, #1
 800ce48:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce4a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ce4e:	2a2b      	cmp	r2, #43	; 0x2b
 800ce50:	d075      	beq.n	800cf3e <_strtod_l+0x286>
 800ce52:	2a2d      	cmp	r2, #45	; 0x2d
 800ce54:	d07b      	beq.n	800cf4e <_strtod_l+0x296>
 800ce56:	f04f 0c00 	mov.w	ip, #0
 800ce5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ce5e:	2909      	cmp	r1, #9
 800ce60:	f240 8082 	bls.w	800cf68 <_strtod_l+0x2b0>
 800ce64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce68:	2600      	movs	r6, #0
 800ce6a:	e09d      	b.n	800cfa8 <_strtod_l+0x2f0>
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	e7c4      	b.n	800cdfa <_strtod_l+0x142>
 800ce70:	2f08      	cmp	r7, #8
 800ce72:	bfd8      	it	le
 800ce74:	9907      	ldrle	r1, [sp, #28]
 800ce76:	f100 0001 	add.w	r0, r0, #1
 800ce7a:	bfda      	itte	le
 800ce7c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ce80:	9307      	strle	r3, [sp, #28]
 800ce82:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ce86:	3701      	adds	r7, #1
 800ce88:	9017      	str	r0, [sp, #92]	; 0x5c
 800ce8a:	e7bf      	b.n	800ce0c <_strtod_l+0x154>
 800ce8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce8e:	195a      	adds	r2, r3, r5
 800ce90:	9217      	str	r2, [sp, #92]	; 0x5c
 800ce92:	5d5a      	ldrb	r2, [r3, r5]
 800ce94:	2f00      	cmp	r7, #0
 800ce96:	d037      	beq.n	800cf08 <_strtod_l+0x250>
 800ce98:	9005      	str	r0, [sp, #20]
 800ce9a:	463d      	mov	r5, r7
 800ce9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cea0:	2b09      	cmp	r3, #9
 800cea2:	d912      	bls.n	800ceca <_strtod_l+0x212>
 800cea4:	2301      	movs	r3, #1
 800cea6:	e7c2      	b.n	800ce2e <_strtod_l+0x176>
 800cea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ceaa:	1c5a      	adds	r2, r3, #1
 800ceac:	9217      	str	r2, [sp, #92]	; 0x5c
 800ceae:	785a      	ldrb	r2, [r3, #1]
 800ceb0:	3001      	adds	r0, #1
 800ceb2:	2a30      	cmp	r2, #48	; 0x30
 800ceb4:	d0f8      	beq.n	800cea8 <_strtod_l+0x1f0>
 800ceb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ceba:	2b08      	cmp	r3, #8
 800cebc:	f200 84d9 	bhi.w	800d872 <_strtod_l+0xbba>
 800cec0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cec2:	9005      	str	r0, [sp, #20]
 800cec4:	2000      	movs	r0, #0
 800cec6:	9308      	str	r3, [sp, #32]
 800cec8:	4605      	mov	r5, r0
 800ceca:	3a30      	subs	r2, #48	; 0x30
 800cecc:	f100 0301 	add.w	r3, r0, #1
 800ced0:	d014      	beq.n	800cefc <_strtod_l+0x244>
 800ced2:	9905      	ldr	r1, [sp, #20]
 800ced4:	4419      	add	r1, r3
 800ced6:	9105      	str	r1, [sp, #20]
 800ced8:	462b      	mov	r3, r5
 800ceda:	eb00 0e05 	add.w	lr, r0, r5
 800cede:	210a      	movs	r1, #10
 800cee0:	4573      	cmp	r3, lr
 800cee2:	d113      	bne.n	800cf0c <_strtod_l+0x254>
 800cee4:	182b      	adds	r3, r5, r0
 800cee6:	2b08      	cmp	r3, #8
 800cee8:	f105 0501 	add.w	r5, r5, #1
 800ceec:	4405      	add	r5, r0
 800ceee:	dc1c      	bgt.n	800cf2a <_strtod_l+0x272>
 800cef0:	9907      	ldr	r1, [sp, #28]
 800cef2:	230a      	movs	r3, #10
 800cef4:	fb03 2301 	mla	r3, r3, r1, r2
 800cef8:	9307      	str	r3, [sp, #28]
 800cefa:	2300      	movs	r3, #0
 800cefc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cefe:	1c51      	adds	r1, r2, #1
 800cf00:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf02:	7852      	ldrb	r2, [r2, #1]
 800cf04:	4618      	mov	r0, r3
 800cf06:	e7c9      	b.n	800ce9c <_strtod_l+0x1e4>
 800cf08:	4638      	mov	r0, r7
 800cf0a:	e7d2      	b.n	800ceb2 <_strtod_l+0x1fa>
 800cf0c:	2b08      	cmp	r3, #8
 800cf0e:	dc04      	bgt.n	800cf1a <_strtod_l+0x262>
 800cf10:	9e07      	ldr	r6, [sp, #28]
 800cf12:	434e      	muls	r6, r1
 800cf14:	9607      	str	r6, [sp, #28]
 800cf16:	3301      	adds	r3, #1
 800cf18:	e7e2      	b.n	800cee0 <_strtod_l+0x228>
 800cf1a:	f103 0c01 	add.w	ip, r3, #1
 800cf1e:	f1bc 0f10 	cmp.w	ip, #16
 800cf22:	bfd8      	it	le
 800cf24:	fb01 f909 	mulle.w	r9, r1, r9
 800cf28:	e7f5      	b.n	800cf16 <_strtod_l+0x25e>
 800cf2a:	2d10      	cmp	r5, #16
 800cf2c:	bfdc      	itt	le
 800cf2e:	230a      	movle	r3, #10
 800cf30:	fb03 2909 	mlale	r9, r3, r9, r2
 800cf34:	e7e1      	b.n	800cefa <_strtod_l+0x242>
 800cf36:	2300      	movs	r3, #0
 800cf38:	9305      	str	r3, [sp, #20]
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	e77c      	b.n	800ce38 <_strtod_l+0x180>
 800cf3e:	f04f 0c00 	mov.w	ip, #0
 800cf42:	f108 0202 	add.w	r2, r8, #2
 800cf46:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf48:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cf4c:	e785      	b.n	800ce5a <_strtod_l+0x1a2>
 800cf4e:	f04f 0c01 	mov.w	ip, #1
 800cf52:	e7f6      	b.n	800cf42 <_strtod_l+0x28a>
 800cf54:	08010198 	.word	0x08010198
 800cf58:	0800ffcc 	.word	0x0800ffcc
 800cf5c:	7ff00000 	.word	0x7ff00000
 800cf60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf62:	1c51      	adds	r1, r2, #1
 800cf64:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf66:	7852      	ldrb	r2, [r2, #1]
 800cf68:	2a30      	cmp	r2, #48	; 0x30
 800cf6a:	d0f9      	beq.n	800cf60 <_strtod_l+0x2a8>
 800cf6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cf70:	2908      	cmp	r1, #8
 800cf72:	f63f af79 	bhi.w	800ce68 <_strtod_l+0x1b0>
 800cf76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cf7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf7c:	9206      	str	r2, [sp, #24]
 800cf7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cf80:	1c51      	adds	r1, r2, #1
 800cf82:	9117      	str	r1, [sp, #92]	; 0x5c
 800cf84:	7852      	ldrb	r2, [r2, #1]
 800cf86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cf8a:	2e09      	cmp	r6, #9
 800cf8c:	d937      	bls.n	800cffe <_strtod_l+0x346>
 800cf8e:	9e06      	ldr	r6, [sp, #24]
 800cf90:	1b89      	subs	r1, r1, r6
 800cf92:	2908      	cmp	r1, #8
 800cf94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cf98:	dc02      	bgt.n	800cfa0 <_strtod_l+0x2e8>
 800cf9a:	4576      	cmp	r6, lr
 800cf9c:	bfa8      	it	ge
 800cf9e:	4676      	movge	r6, lr
 800cfa0:	f1bc 0f00 	cmp.w	ip, #0
 800cfa4:	d000      	beq.n	800cfa8 <_strtod_l+0x2f0>
 800cfa6:	4276      	negs	r6, r6
 800cfa8:	2d00      	cmp	r5, #0
 800cfaa:	d14d      	bne.n	800d048 <_strtod_l+0x390>
 800cfac:	9904      	ldr	r1, [sp, #16]
 800cfae:	4301      	orrs	r1, r0
 800cfb0:	f47f aec6 	bne.w	800cd40 <_strtod_l+0x88>
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f47f aee1 	bne.w	800cd7c <_strtod_l+0xc4>
 800cfba:	2a69      	cmp	r2, #105	; 0x69
 800cfbc:	d027      	beq.n	800d00e <_strtod_l+0x356>
 800cfbe:	dc24      	bgt.n	800d00a <_strtod_l+0x352>
 800cfc0:	2a49      	cmp	r2, #73	; 0x49
 800cfc2:	d024      	beq.n	800d00e <_strtod_l+0x356>
 800cfc4:	2a4e      	cmp	r2, #78	; 0x4e
 800cfc6:	f47f aed9 	bne.w	800cd7c <_strtod_l+0xc4>
 800cfca:	499f      	ldr	r1, [pc, #636]	; (800d248 <_strtod_l+0x590>)
 800cfcc:	a817      	add	r0, sp, #92	; 0x5c
 800cfce:	f000 ffe5 	bl	800df9c <__match>
 800cfd2:	2800      	cmp	r0, #0
 800cfd4:	f43f aed2 	beq.w	800cd7c <_strtod_l+0xc4>
 800cfd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfda:	781b      	ldrb	r3, [r3, #0]
 800cfdc:	2b28      	cmp	r3, #40	; 0x28
 800cfde:	d12d      	bne.n	800d03c <_strtod_l+0x384>
 800cfe0:	499a      	ldr	r1, [pc, #616]	; (800d24c <_strtod_l+0x594>)
 800cfe2:	aa1a      	add	r2, sp, #104	; 0x68
 800cfe4:	a817      	add	r0, sp, #92	; 0x5c
 800cfe6:	f000 ffed 	bl	800dfc4 <__hexnan>
 800cfea:	2805      	cmp	r0, #5
 800cfec:	d126      	bne.n	800d03c <_strtod_l+0x384>
 800cfee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cff0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cff4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cff8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cffc:	e6a0      	b.n	800cd40 <_strtod_l+0x88>
 800cffe:	210a      	movs	r1, #10
 800d000:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d004:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d008:	e7b9      	b.n	800cf7e <_strtod_l+0x2c6>
 800d00a:	2a6e      	cmp	r2, #110	; 0x6e
 800d00c:	e7db      	b.n	800cfc6 <_strtod_l+0x30e>
 800d00e:	4990      	ldr	r1, [pc, #576]	; (800d250 <_strtod_l+0x598>)
 800d010:	a817      	add	r0, sp, #92	; 0x5c
 800d012:	f000 ffc3 	bl	800df9c <__match>
 800d016:	2800      	cmp	r0, #0
 800d018:	f43f aeb0 	beq.w	800cd7c <_strtod_l+0xc4>
 800d01c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d01e:	498d      	ldr	r1, [pc, #564]	; (800d254 <_strtod_l+0x59c>)
 800d020:	3b01      	subs	r3, #1
 800d022:	a817      	add	r0, sp, #92	; 0x5c
 800d024:	9317      	str	r3, [sp, #92]	; 0x5c
 800d026:	f000 ffb9 	bl	800df9c <__match>
 800d02a:	b910      	cbnz	r0, 800d032 <_strtod_l+0x37a>
 800d02c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d02e:	3301      	adds	r3, #1
 800d030:	9317      	str	r3, [sp, #92]	; 0x5c
 800d032:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d264 <_strtod_l+0x5ac>
 800d036:	f04f 0a00 	mov.w	sl, #0
 800d03a:	e681      	b.n	800cd40 <_strtod_l+0x88>
 800d03c:	4886      	ldr	r0, [pc, #536]	; (800d258 <_strtod_l+0x5a0>)
 800d03e:	f002 f8ef 	bl	800f220 <nan>
 800d042:	ec5b ab10 	vmov	sl, fp, d0
 800d046:	e67b      	b.n	800cd40 <_strtod_l+0x88>
 800d048:	9b05      	ldr	r3, [sp, #20]
 800d04a:	9807      	ldr	r0, [sp, #28]
 800d04c:	1af3      	subs	r3, r6, r3
 800d04e:	2f00      	cmp	r7, #0
 800d050:	bf08      	it	eq
 800d052:	462f      	moveq	r7, r5
 800d054:	2d10      	cmp	r5, #16
 800d056:	9306      	str	r3, [sp, #24]
 800d058:	46a8      	mov	r8, r5
 800d05a:	bfa8      	it	ge
 800d05c:	f04f 0810 	movge.w	r8, #16
 800d060:	f7f3 fa50 	bl	8000504 <__aeabi_ui2d>
 800d064:	2d09      	cmp	r5, #9
 800d066:	4682      	mov	sl, r0
 800d068:	468b      	mov	fp, r1
 800d06a:	dd13      	ble.n	800d094 <_strtod_l+0x3dc>
 800d06c:	4b7b      	ldr	r3, [pc, #492]	; (800d25c <_strtod_l+0x5a4>)
 800d06e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d072:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	4682      	mov	sl, r0
 800d07c:	4648      	mov	r0, r9
 800d07e:	468b      	mov	fp, r1
 800d080:	f7f3 fa40 	bl	8000504 <__aeabi_ui2d>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4650      	mov	r0, sl
 800d08a:	4659      	mov	r1, fp
 800d08c:	f7f3 f8fe 	bl	800028c <__adddf3>
 800d090:	4682      	mov	sl, r0
 800d092:	468b      	mov	fp, r1
 800d094:	2d0f      	cmp	r5, #15
 800d096:	dc38      	bgt.n	800d10a <_strtod_l+0x452>
 800d098:	9b06      	ldr	r3, [sp, #24]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	f43f ae50 	beq.w	800cd40 <_strtod_l+0x88>
 800d0a0:	dd24      	ble.n	800d0ec <_strtod_l+0x434>
 800d0a2:	2b16      	cmp	r3, #22
 800d0a4:	dc0b      	bgt.n	800d0be <_strtod_l+0x406>
 800d0a6:	496d      	ldr	r1, [pc, #436]	; (800d25c <_strtod_l+0x5a4>)
 800d0a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0b0:	4652      	mov	r2, sl
 800d0b2:	465b      	mov	r3, fp
 800d0b4:	f7f3 faa0 	bl	80005f8 <__aeabi_dmul>
 800d0b8:	4682      	mov	sl, r0
 800d0ba:	468b      	mov	fp, r1
 800d0bc:	e640      	b.n	800cd40 <_strtod_l+0x88>
 800d0be:	9a06      	ldr	r2, [sp, #24]
 800d0c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	db20      	blt.n	800d10a <_strtod_l+0x452>
 800d0c8:	4c64      	ldr	r4, [pc, #400]	; (800d25c <_strtod_l+0x5a4>)
 800d0ca:	f1c5 050f 	rsb	r5, r5, #15
 800d0ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d0d2:	4652      	mov	r2, sl
 800d0d4:	465b      	mov	r3, fp
 800d0d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0da:	f7f3 fa8d 	bl	80005f8 <__aeabi_dmul>
 800d0de:	9b06      	ldr	r3, [sp, #24]
 800d0e0:	1b5d      	subs	r5, r3, r5
 800d0e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d0e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d0ea:	e7e3      	b.n	800d0b4 <_strtod_l+0x3fc>
 800d0ec:	9b06      	ldr	r3, [sp, #24]
 800d0ee:	3316      	adds	r3, #22
 800d0f0:	db0b      	blt.n	800d10a <_strtod_l+0x452>
 800d0f2:	9b05      	ldr	r3, [sp, #20]
 800d0f4:	1b9e      	subs	r6, r3, r6
 800d0f6:	4b59      	ldr	r3, [pc, #356]	; (800d25c <_strtod_l+0x5a4>)
 800d0f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d0fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d100:	4650      	mov	r0, sl
 800d102:	4659      	mov	r1, fp
 800d104:	f7f3 fba2 	bl	800084c <__aeabi_ddiv>
 800d108:	e7d6      	b.n	800d0b8 <_strtod_l+0x400>
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	eba5 0808 	sub.w	r8, r5, r8
 800d110:	4498      	add	r8, r3
 800d112:	f1b8 0f00 	cmp.w	r8, #0
 800d116:	dd74      	ble.n	800d202 <_strtod_l+0x54a>
 800d118:	f018 030f 	ands.w	r3, r8, #15
 800d11c:	d00a      	beq.n	800d134 <_strtod_l+0x47c>
 800d11e:	494f      	ldr	r1, [pc, #316]	; (800d25c <_strtod_l+0x5a4>)
 800d120:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d124:	4652      	mov	r2, sl
 800d126:	465b      	mov	r3, fp
 800d128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d12c:	f7f3 fa64 	bl	80005f8 <__aeabi_dmul>
 800d130:	4682      	mov	sl, r0
 800d132:	468b      	mov	fp, r1
 800d134:	f038 080f 	bics.w	r8, r8, #15
 800d138:	d04f      	beq.n	800d1da <_strtod_l+0x522>
 800d13a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d13e:	dd22      	ble.n	800d186 <_strtod_l+0x4ce>
 800d140:	2500      	movs	r5, #0
 800d142:	462e      	mov	r6, r5
 800d144:	9507      	str	r5, [sp, #28]
 800d146:	9505      	str	r5, [sp, #20]
 800d148:	2322      	movs	r3, #34	; 0x22
 800d14a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d264 <_strtod_l+0x5ac>
 800d14e:	6023      	str	r3, [r4, #0]
 800d150:	f04f 0a00 	mov.w	sl, #0
 800d154:	9b07      	ldr	r3, [sp, #28]
 800d156:	2b00      	cmp	r3, #0
 800d158:	f43f adf2 	beq.w	800cd40 <_strtod_l+0x88>
 800d15c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d15e:	4620      	mov	r0, r4
 800d160:	f001 f830 	bl	800e1c4 <_Bfree>
 800d164:	9905      	ldr	r1, [sp, #20]
 800d166:	4620      	mov	r0, r4
 800d168:	f001 f82c 	bl	800e1c4 <_Bfree>
 800d16c:	4631      	mov	r1, r6
 800d16e:	4620      	mov	r0, r4
 800d170:	f001 f828 	bl	800e1c4 <_Bfree>
 800d174:	9907      	ldr	r1, [sp, #28]
 800d176:	4620      	mov	r0, r4
 800d178:	f001 f824 	bl	800e1c4 <_Bfree>
 800d17c:	4629      	mov	r1, r5
 800d17e:	4620      	mov	r0, r4
 800d180:	f001 f820 	bl	800e1c4 <_Bfree>
 800d184:	e5dc      	b.n	800cd40 <_strtod_l+0x88>
 800d186:	4b36      	ldr	r3, [pc, #216]	; (800d260 <_strtod_l+0x5a8>)
 800d188:	9304      	str	r3, [sp, #16]
 800d18a:	2300      	movs	r3, #0
 800d18c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d190:	4650      	mov	r0, sl
 800d192:	4659      	mov	r1, fp
 800d194:	4699      	mov	r9, r3
 800d196:	f1b8 0f01 	cmp.w	r8, #1
 800d19a:	dc21      	bgt.n	800d1e0 <_strtod_l+0x528>
 800d19c:	b10b      	cbz	r3, 800d1a2 <_strtod_l+0x4ea>
 800d19e:	4682      	mov	sl, r0
 800d1a0:	468b      	mov	fp, r1
 800d1a2:	4b2f      	ldr	r3, [pc, #188]	; (800d260 <_strtod_l+0x5a8>)
 800d1a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d1a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d1ac:	4652      	mov	r2, sl
 800d1ae:	465b      	mov	r3, fp
 800d1b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d1b4:	f7f3 fa20 	bl	80005f8 <__aeabi_dmul>
 800d1b8:	4b2a      	ldr	r3, [pc, #168]	; (800d264 <_strtod_l+0x5ac>)
 800d1ba:	460a      	mov	r2, r1
 800d1bc:	400b      	ands	r3, r1
 800d1be:	492a      	ldr	r1, [pc, #168]	; (800d268 <_strtod_l+0x5b0>)
 800d1c0:	428b      	cmp	r3, r1
 800d1c2:	4682      	mov	sl, r0
 800d1c4:	d8bc      	bhi.n	800d140 <_strtod_l+0x488>
 800d1c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d1ca:	428b      	cmp	r3, r1
 800d1cc:	bf86      	itte	hi
 800d1ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d26c <_strtod_l+0x5b4>
 800d1d2:	f04f 3aff 	movhi.w	sl, #4294967295
 800d1d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d1da:	2300      	movs	r3, #0
 800d1dc:	9304      	str	r3, [sp, #16]
 800d1de:	e084      	b.n	800d2ea <_strtod_l+0x632>
 800d1e0:	f018 0f01 	tst.w	r8, #1
 800d1e4:	d005      	beq.n	800d1f2 <_strtod_l+0x53a>
 800d1e6:	9b04      	ldr	r3, [sp, #16]
 800d1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ec:	f7f3 fa04 	bl	80005f8 <__aeabi_dmul>
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	9a04      	ldr	r2, [sp, #16]
 800d1f4:	3208      	adds	r2, #8
 800d1f6:	f109 0901 	add.w	r9, r9, #1
 800d1fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d1fe:	9204      	str	r2, [sp, #16]
 800d200:	e7c9      	b.n	800d196 <_strtod_l+0x4de>
 800d202:	d0ea      	beq.n	800d1da <_strtod_l+0x522>
 800d204:	f1c8 0800 	rsb	r8, r8, #0
 800d208:	f018 020f 	ands.w	r2, r8, #15
 800d20c:	d00a      	beq.n	800d224 <_strtod_l+0x56c>
 800d20e:	4b13      	ldr	r3, [pc, #76]	; (800d25c <_strtod_l+0x5a4>)
 800d210:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d214:	4650      	mov	r0, sl
 800d216:	4659      	mov	r1, fp
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	f7f3 fb16 	bl	800084c <__aeabi_ddiv>
 800d220:	4682      	mov	sl, r0
 800d222:	468b      	mov	fp, r1
 800d224:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d228:	d0d7      	beq.n	800d1da <_strtod_l+0x522>
 800d22a:	f1b8 0f1f 	cmp.w	r8, #31
 800d22e:	dd1f      	ble.n	800d270 <_strtod_l+0x5b8>
 800d230:	2500      	movs	r5, #0
 800d232:	462e      	mov	r6, r5
 800d234:	9507      	str	r5, [sp, #28]
 800d236:	9505      	str	r5, [sp, #20]
 800d238:	2322      	movs	r3, #34	; 0x22
 800d23a:	f04f 0a00 	mov.w	sl, #0
 800d23e:	f04f 0b00 	mov.w	fp, #0
 800d242:	6023      	str	r3, [r4, #0]
 800d244:	e786      	b.n	800d154 <_strtod_l+0x49c>
 800d246:	bf00      	nop
 800d248:	0800ffc6 	.word	0x0800ffc6
 800d24c:	0800ffe0 	.word	0x0800ffe0
 800d250:	0800ffbd 	.word	0x0800ffbd
 800d254:	0800ffc0 	.word	0x0800ffc0
 800d258:	0801038a 	.word	0x0801038a
 800d25c:	08010248 	.word	0x08010248
 800d260:	08010220 	.word	0x08010220
 800d264:	7ff00000 	.word	0x7ff00000
 800d268:	7ca00000 	.word	0x7ca00000
 800d26c:	7fefffff 	.word	0x7fefffff
 800d270:	f018 0310 	ands.w	r3, r8, #16
 800d274:	bf18      	it	ne
 800d276:	236a      	movne	r3, #106	; 0x6a
 800d278:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d628 <_strtod_l+0x970>
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	4650      	mov	r0, sl
 800d280:	4659      	mov	r1, fp
 800d282:	2300      	movs	r3, #0
 800d284:	f018 0f01 	tst.w	r8, #1
 800d288:	d004      	beq.n	800d294 <_strtod_l+0x5dc>
 800d28a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d28e:	f7f3 f9b3 	bl	80005f8 <__aeabi_dmul>
 800d292:	2301      	movs	r3, #1
 800d294:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d298:	f109 0908 	add.w	r9, r9, #8
 800d29c:	d1f2      	bne.n	800d284 <_strtod_l+0x5cc>
 800d29e:	b10b      	cbz	r3, 800d2a4 <_strtod_l+0x5ec>
 800d2a0:	4682      	mov	sl, r0
 800d2a2:	468b      	mov	fp, r1
 800d2a4:	9b04      	ldr	r3, [sp, #16]
 800d2a6:	b1c3      	cbz	r3, 800d2da <_strtod_l+0x622>
 800d2a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d2ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	4659      	mov	r1, fp
 800d2b4:	dd11      	ble.n	800d2da <_strtod_l+0x622>
 800d2b6:	2b1f      	cmp	r3, #31
 800d2b8:	f340 8124 	ble.w	800d504 <_strtod_l+0x84c>
 800d2bc:	2b34      	cmp	r3, #52	; 0x34
 800d2be:	bfde      	ittt	le
 800d2c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d2c4:	f04f 33ff 	movle.w	r3, #4294967295
 800d2c8:	fa03 f202 	lslle.w	r2, r3, r2
 800d2cc:	f04f 0a00 	mov.w	sl, #0
 800d2d0:	bfcc      	ite	gt
 800d2d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d2d6:	ea02 0b01 	andle.w	fp, r2, r1
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2300      	movs	r3, #0
 800d2de:	4650      	mov	r0, sl
 800d2e0:	4659      	mov	r1, fp
 800d2e2:	f7f3 fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d1a2      	bne.n	800d230 <_strtod_l+0x578>
 800d2ea:	9b07      	ldr	r3, [sp, #28]
 800d2ec:	9300      	str	r3, [sp, #0]
 800d2ee:	9908      	ldr	r1, [sp, #32]
 800d2f0:	462b      	mov	r3, r5
 800d2f2:	463a      	mov	r2, r7
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 ffcd 	bl	800e294 <__s2b>
 800d2fa:	9007      	str	r0, [sp, #28]
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	f43f af1f 	beq.w	800d140 <_strtod_l+0x488>
 800d302:	9b05      	ldr	r3, [sp, #20]
 800d304:	1b9e      	subs	r6, r3, r6
 800d306:	9b06      	ldr	r3, [sp, #24]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bfb4      	ite	lt
 800d30c:	4633      	movlt	r3, r6
 800d30e:	2300      	movge	r3, #0
 800d310:	930c      	str	r3, [sp, #48]	; 0x30
 800d312:	9b06      	ldr	r3, [sp, #24]
 800d314:	2500      	movs	r5, #0
 800d316:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d31a:	9312      	str	r3, [sp, #72]	; 0x48
 800d31c:	462e      	mov	r6, r5
 800d31e:	9b07      	ldr	r3, [sp, #28]
 800d320:	4620      	mov	r0, r4
 800d322:	6859      	ldr	r1, [r3, #4]
 800d324:	f000 ff0e 	bl	800e144 <_Balloc>
 800d328:	9005      	str	r0, [sp, #20]
 800d32a:	2800      	cmp	r0, #0
 800d32c:	f43f af0c 	beq.w	800d148 <_strtod_l+0x490>
 800d330:	9b07      	ldr	r3, [sp, #28]
 800d332:	691a      	ldr	r2, [r3, #16]
 800d334:	3202      	adds	r2, #2
 800d336:	f103 010c 	add.w	r1, r3, #12
 800d33a:	0092      	lsls	r2, r2, #2
 800d33c:	300c      	adds	r0, #12
 800d33e:	f7ff f9c7 	bl	800c6d0 <memcpy>
 800d342:	ec4b ab10 	vmov	d0, sl, fp
 800d346:	aa1a      	add	r2, sp, #104	; 0x68
 800d348:	a919      	add	r1, sp, #100	; 0x64
 800d34a:	4620      	mov	r0, r4
 800d34c:	f001 fae8 	bl	800e920 <__d2b>
 800d350:	ec4b ab18 	vmov	d8, sl, fp
 800d354:	9018      	str	r0, [sp, #96]	; 0x60
 800d356:	2800      	cmp	r0, #0
 800d358:	f43f aef6 	beq.w	800d148 <_strtod_l+0x490>
 800d35c:	2101      	movs	r1, #1
 800d35e:	4620      	mov	r0, r4
 800d360:	f001 f832 	bl	800e3c8 <__i2b>
 800d364:	4606      	mov	r6, r0
 800d366:	2800      	cmp	r0, #0
 800d368:	f43f aeee 	beq.w	800d148 <_strtod_l+0x490>
 800d36c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d36e:	9904      	ldr	r1, [sp, #16]
 800d370:	2b00      	cmp	r3, #0
 800d372:	bfab      	itete	ge
 800d374:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d376:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d378:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d37a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d37e:	bfac      	ite	ge
 800d380:	eb03 0902 	addge.w	r9, r3, r2
 800d384:	1ad7      	sublt	r7, r2, r3
 800d386:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d388:	eba3 0801 	sub.w	r8, r3, r1
 800d38c:	4490      	add	r8, r2
 800d38e:	4ba1      	ldr	r3, [pc, #644]	; (800d614 <_strtod_l+0x95c>)
 800d390:	f108 38ff 	add.w	r8, r8, #4294967295
 800d394:	4598      	cmp	r8, r3
 800d396:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d39a:	f280 80c7 	bge.w	800d52c <_strtod_l+0x874>
 800d39e:	eba3 0308 	sub.w	r3, r3, r8
 800d3a2:	2b1f      	cmp	r3, #31
 800d3a4:	eba2 0203 	sub.w	r2, r2, r3
 800d3a8:	f04f 0101 	mov.w	r1, #1
 800d3ac:	f300 80b1 	bgt.w	800d512 <_strtod_l+0x85a>
 800d3b0:	fa01 f303 	lsl.w	r3, r1, r3
 800d3b4:	930d      	str	r3, [sp, #52]	; 0x34
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	9308      	str	r3, [sp, #32]
 800d3ba:	eb09 0802 	add.w	r8, r9, r2
 800d3be:	9b04      	ldr	r3, [sp, #16]
 800d3c0:	45c1      	cmp	r9, r8
 800d3c2:	4417      	add	r7, r2
 800d3c4:	441f      	add	r7, r3
 800d3c6:	464b      	mov	r3, r9
 800d3c8:	bfa8      	it	ge
 800d3ca:	4643      	movge	r3, r8
 800d3cc:	42bb      	cmp	r3, r7
 800d3ce:	bfa8      	it	ge
 800d3d0:	463b      	movge	r3, r7
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	bfc2      	ittt	gt
 800d3d6:	eba8 0803 	subgt.w	r8, r8, r3
 800d3da:	1aff      	subgt	r7, r7, r3
 800d3dc:	eba9 0903 	subgt.w	r9, r9, r3
 800d3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	dd17      	ble.n	800d416 <_strtod_l+0x75e>
 800d3e6:	4631      	mov	r1, r6
 800d3e8:	461a      	mov	r2, r3
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f001 f8ac 	bl	800e548 <__pow5mult>
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	f43f aea8 	beq.w	800d148 <_strtod_l+0x490>
 800d3f8:	4601      	mov	r1, r0
 800d3fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f000 fff9 	bl	800e3f4 <__multiply>
 800d402:	900b      	str	r0, [sp, #44]	; 0x2c
 800d404:	2800      	cmp	r0, #0
 800d406:	f43f ae9f 	beq.w	800d148 <_strtod_l+0x490>
 800d40a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d40c:	4620      	mov	r0, r4
 800d40e:	f000 fed9 	bl	800e1c4 <_Bfree>
 800d412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d414:	9318      	str	r3, [sp, #96]	; 0x60
 800d416:	f1b8 0f00 	cmp.w	r8, #0
 800d41a:	f300 808c 	bgt.w	800d536 <_strtod_l+0x87e>
 800d41e:	9b06      	ldr	r3, [sp, #24]
 800d420:	2b00      	cmp	r3, #0
 800d422:	dd08      	ble.n	800d436 <_strtod_l+0x77e>
 800d424:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d426:	9905      	ldr	r1, [sp, #20]
 800d428:	4620      	mov	r0, r4
 800d42a:	f001 f88d 	bl	800e548 <__pow5mult>
 800d42e:	9005      	str	r0, [sp, #20]
 800d430:	2800      	cmp	r0, #0
 800d432:	f43f ae89 	beq.w	800d148 <_strtod_l+0x490>
 800d436:	2f00      	cmp	r7, #0
 800d438:	dd08      	ble.n	800d44c <_strtod_l+0x794>
 800d43a:	9905      	ldr	r1, [sp, #20]
 800d43c:	463a      	mov	r2, r7
 800d43e:	4620      	mov	r0, r4
 800d440:	f001 f8dc 	bl	800e5fc <__lshift>
 800d444:	9005      	str	r0, [sp, #20]
 800d446:	2800      	cmp	r0, #0
 800d448:	f43f ae7e 	beq.w	800d148 <_strtod_l+0x490>
 800d44c:	f1b9 0f00 	cmp.w	r9, #0
 800d450:	dd08      	ble.n	800d464 <_strtod_l+0x7ac>
 800d452:	4631      	mov	r1, r6
 800d454:	464a      	mov	r2, r9
 800d456:	4620      	mov	r0, r4
 800d458:	f001 f8d0 	bl	800e5fc <__lshift>
 800d45c:	4606      	mov	r6, r0
 800d45e:	2800      	cmp	r0, #0
 800d460:	f43f ae72 	beq.w	800d148 <_strtod_l+0x490>
 800d464:	9a05      	ldr	r2, [sp, #20]
 800d466:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d468:	4620      	mov	r0, r4
 800d46a:	f001 f953 	bl	800e714 <__mdiff>
 800d46e:	4605      	mov	r5, r0
 800d470:	2800      	cmp	r0, #0
 800d472:	f43f ae69 	beq.w	800d148 <_strtod_l+0x490>
 800d476:	68c3      	ldr	r3, [r0, #12]
 800d478:	930b      	str	r3, [sp, #44]	; 0x2c
 800d47a:	2300      	movs	r3, #0
 800d47c:	60c3      	str	r3, [r0, #12]
 800d47e:	4631      	mov	r1, r6
 800d480:	f001 f92c 	bl	800e6dc <__mcmp>
 800d484:	2800      	cmp	r0, #0
 800d486:	da60      	bge.n	800d54a <_strtod_l+0x892>
 800d488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d48a:	ea53 030a 	orrs.w	r3, r3, sl
 800d48e:	f040 8082 	bne.w	800d596 <_strtod_l+0x8de>
 800d492:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d496:	2b00      	cmp	r3, #0
 800d498:	d17d      	bne.n	800d596 <_strtod_l+0x8de>
 800d49a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d49e:	0d1b      	lsrs	r3, r3, #20
 800d4a0:	051b      	lsls	r3, r3, #20
 800d4a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d4a6:	d976      	bls.n	800d596 <_strtod_l+0x8de>
 800d4a8:	696b      	ldr	r3, [r5, #20]
 800d4aa:	b913      	cbnz	r3, 800d4b2 <_strtod_l+0x7fa>
 800d4ac:	692b      	ldr	r3, [r5, #16]
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	dd71      	ble.n	800d596 <_strtod_l+0x8de>
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	f001 f8a0 	bl	800e5fc <__lshift>
 800d4bc:	4631      	mov	r1, r6
 800d4be:	4605      	mov	r5, r0
 800d4c0:	f001 f90c 	bl	800e6dc <__mcmp>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	dd66      	ble.n	800d596 <_strtod_l+0x8de>
 800d4c8:	9904      	ldr	r1, [sp, #16]
 800d4ca:	4a53      	ldr	r2, [pc, #332]	; (800d618 <_strtod_l+0x960>)
 800d4cc:	465b      	mov	r3, fp
 800d4ce:	2900      	cmp	r1, #0
 800d4d0:	f000 8081 	beq.w	800d5d6 <_strtod_l+0x91e>
 800d4d4:	ea02 010b 	and.w	r1, r2, fp
 800d4d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d4dc:	dc7b      	bgt.n	800d5d6 <_strtod_l+0x91e>
 800d4de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d4e2:	f77f aea9 	ble.w	800d238 <_strtod_l+0x580>
 800d4e6:	4b4d      	ldr	r3, [pc, #308]	; (800d61c <_strtod_l+0x964>)
 800d4e8:	4650      	mov	r0, sl
 800d4ea:	4659      	mov	r1, fp
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f7f3 f883 	bl	80005f8 <__aeabi_dmul>
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	4303      	orrs	r3, r0
 800d4f6:	bf08      	it	eq
 800d4f8:	2322      	moveq	r3, #34	; 0x22
 800d4fa:	4682      	mov	sl, r0
 800d4fc:	468b      	mov	fp, r1
 800d4fe:	bf08      	it	eq
 800d500:	6023      	streq	r3, [r4, #0]
 800d502:	e62b      	b.n	800d15c <_strtod_l+0x4a4>
 800d504:	f04f 32ff 	mov.w	r2, #4294967295
 800d508:	fa02 f303 	lsl.w	r3, r2, r3
 800d50c:	ea03 0a0a 	and.w	sl, r3, sl
 800d510:	e6e3      	b.n	800d2da <_strtod_l+0x622>
 800d512:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d516:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d51a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d51e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d522:	fa01 f308 	lsl.w	r3, r1, r8
 800d526:	9308      	str	r3, [sp, #32]
 800d528:	910d      	str	r1, [sp, #52]	; 0x34
 800d52a:	e746      	b.n	800d3ba <_strtod_l+0x702>
 800d52c:	2300      	movs	r3, #0
 800d52e:	9308      	str	r3, [sp, #32]
 800d530:	2301      	movs	r3, #1
 800d532:	930d      	str	r3, [sp, #52]	; 0x34
 800d534:	e741      	b.n	800d3ba <_strtod_l+0x702>
 800d536:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d538:	4642      	mov	r2, r8
 800d53a:	4620      	mov	r0, r4
 800d53c:	f001 f85e 	bl	800e5fc <__lshift>
 800d540:	9018      	str	r0, [sp, #96]	; 0x60
 800d542:	2800      	cmp	r0, #0
 800d544:	f47f af6b 	bne.w	800d41e <_strtod_l+0x766>
 800d548:	e5fe      	b.n	800d148 <_strtod_l+0x490>
 800d54a:	465f      	mov	r7, fp
 800d54c:	d16e      	bne.n	800d62c <_strtod_l+0x974>
 800d54e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d550:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d554:	b342      	cbz	r2, 800d5a8 <_strtod_l+0x8f0>
 800d556:	4a32      	ldr	r2, [pc, #200]	; (800d620 <_strtod_l+0x968>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d128      	bne.n	800d5ae <_strtod_l+0x8f6>
 800d55c:	9b04      	ldr	r3, [sp, #16]
 800d55e:	4651      	mov	r1, sl
 800d560:	b1eb      	cbz	r3, 800d59e <_strtod_l+0x8e6>
 800d562:	4b2d      	ldr	r3, [pc, #180]	; (800d618 <_strtod_l+0x960>)
 800d564:	403b      	ands	r3, r7
 800d566:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d56a:	f04f 32ff 	mov.w	r2, #4294967295
 800d56e:	d819      	bhi.n	800d5a4 <_strtod_l+0x8ec>
 800d570:	0d1b      	lsrs	r3, r3, #20
 800d572:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d576:	fa02 f303 	lsl.w	r3, r2, r3
 800d57a:	4299      	cmp	r1, r3
 800d57c:	d117      	bne.n	800d5ae <_strtod_l+0x8f6>
 800d57e:	4b29      	ldr	r3, [pc, #164]	; (800d624 <_strtod_l+0x96c>)
 800d580:	429f      	cmp	r7, r3
 800d582:	d102      	bne.n	800d58a <_strtod_l+0x8d2>
 800d584:	3101      	adds	r1, #1
 800d586:	f43f addf 	beq.w	800d148 <_strtod_l+0x490>
 800d58a:	4b23      	ldr	r3, [pc, #140]	; (800d618 <_strtod_l+0x960>)
 800d58c:	403b      	ands	r3, r7
 800d58e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d592:	f04f 0a00 	mov.w	sl, #0
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1a4      	bne.n	800d4e6 <_strtod_l+0x82e>
 800d59c:	e5de      	b.n	800d15c <_strtod_l+0x4a4>
 800d59e:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a2:	e7ea      	b.n	800d57a <_strtod_l+0x8c2>
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	e7e8      	b.n	800d57a <_strtod_l+0x8c2>
 800d5a8:	ea53 030a 	orrs.w	r3, r3, sl
 800d5ac:	d08c      	beq.n	800d4c8 <_strtod_l+0x810>
 800d5ae:	9b08      	ldr	r3, [sp, #32]
 800d5b0:	b1db      	cbz	r3, 800d5ea <_strtod_l+0x932>
 800d5b2:	423b      	tst	r3, r7
 800d5b4:	d0ef      	beq.n	800d596 <_strtod_l+0x8de>
 800d5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5b8:	9a04      	ldr	r2, [sp, #16]
 800d5ba:	4650      	mov	r0, sl
 800d5bc:	4659      	mov	r1, fp
 800d5be:	b1c3      	cbz	r3, 800d5f2 <_strtod_l+0x93a>
 800d5c0:	f7ff fb5d 	bl	800cc7e <sulp>
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	ec51 0b18 	vmov	r0, r1, d8
 800d5cc:	f7f2 fe5e 	bl	800028c <__adddf3>
 800d5d0:	4682      	mov	sl, r0
 800d5d2:	468b      	mov	fp, r1
 800d5d4:	e7df      	b.n	800d596 <_strtod_l+0x8de>
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d5dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d5e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d5e4:	f04f 3aff 	mov.w	sl, #4294967295
 800d5e8:	e7d5      	b.n	800d596 <_strtod_l+0x8de>
 800d5ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5ec:	ea13 0f0a 	tst.w	r3, sl
 800d5f0:	e7e0      	b.n	800d5b4 <_strtod_l+0x8fc>
 800d5f2:	f7ff fb44 	bl	800cc7e <sulp>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	ec51 0b18 	vmov	r0, r1, d8
 800d5fe:	f7f2 fe43 	bl	8000288 <__aeabi_dsub>
 800d602:	2200      	movs	r2, #0
 800d604:	2300      	movs	r3, #0
 800d606:	4682      	mov	sl, r0
 800d608:	468b      	mov	fp, r1
 800d60a:	f7f3 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d60e:	2800      	cmp	r0, #0
 800d610:	d0c1      	beq.n	800d596 <_strtod_l+0x8de>
 800d612:	e611      	b.n	800d238 <_strtod_l+0x580>
 800d614:	fffffc02 	.word	0xfffffc02
 800d618:	7ff00000 	.word	0x7ff00000
 800d61c:	39500000 	.word	0x39500000
 800d620:	000fffff 	.word	0x000fffff
 800d624:	7fefffff 	.word	0x7fefffff
 800d628:	0800fff8 	.word	0x0800fff8
 800d62c:	4631      	mov	r1, r6
 800d62e:	4628      	mov	r0, r5
 800d630:	f001 f9d2 	bl	800e9d8 <__ratio>
 800d634:	ec59 8b10 	vmov	r8, r9, d0
 800d638:	ee10 0a10 	vmov	r0, s0
 800d63c:	2200      	movs	r2, #0
 800d63e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d642:	4649      	mov	r1, r9
 800d644:	f7f3 fa54 	bl	8000af0 <__aeabi_dcmple>
 800d648:	2800      	cmp	r0, #0
 800d64a:	d07a      	beq.n	800d742 <_strtod_l+0xa8a>
 800d64c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d04a      	beq.n	800d6e8 <_strtod_l+0xa30>
 800d652:	4b95      	ldr	r3, [pc, #596]	; (800d8a8 <_strtod_l+0xbf0>)
 800d654:	2200      	movs	r2, #0
 800d656:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d65a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d8a8 <_strtod_l+0xbf0>
 800d65e:	f04f 0800 	mov.w	r8, #0
 800d662:	4b92      	ldr	r3, [pc, #584]	; (800d8ac <_strtod_l+0xbf4>)
 800d664:	403b      	ands	r3, r7
 800d666:	930d      	str	r3, [sp, #52]	; 0x34
 800d668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d66a:	4b91      	ldr	r3, [pc, #580]	; (800d8b0 <_strtod_l+0xbf8>)
 800d66c:	429a      	cmp	r2, r3
 800d66e:	f040 80b0 	bne.w	800d7d2 <_strtod_l+0xb1a>
 800d672:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d676:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d67a:	ec4b ab10 	vmov	d0, sl, fp
 800d67e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d682:	f001 f8d1 	bl	800e828 <__ulp>
 800d686:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d68a:	ec53 2b10 	vmov	r2, r3, d0
 800d68e:	f7f2 ffb3 	bl	80005f8 <__aeabi_dmul>
 800d692:	4652      	mov	r2, sl
 800d694:	465b      	mov	r3, fp
 800d696:	f7f2 fdf9 	bl	800028c <__adddf3>
 800d69a:	460b      	mov	r3, r1
 800d69c:	4983      	ldr	r1, [pc, #524]	; (800d8ac <_strtod_l+0xbf4>)
 800d69e:	4a85      	ldr	r2, [pc, #532]	; (800d8b4 <_strtod_l+0xbfc>)
 800d6a0:	4019      	ands	r1, r3
 800d6a2:	4291      	cmp	r1, r2
 800d6a4:	4682      	mov	sl, r0
 800d6a6:	d960      	bls.n	800d76a <_strtod_l+0xab2>
 800d6a8:	ee18 3a90 	vmov	r3, s17
 800d6ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d104      	bne.n	800d6be <_strtod_l+0xa06>
 800d6b4:	ee18 3a10 	vmov	r3, s16
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	f43f ad45 	beq.w	800d148 <_strtod_l+0x490>
 800d6be:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d8c0 <_strtod_l+0xc08>
 800d6c2:	f04f 3aff 	mov.w	sl, #4294967295
 800d6c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f000 fd7b 	bl	800e1c4 <_Bfree>
 800d6ce:	9905      	ldr	r1, [sp, #20]
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f000 fd77 	bl	800e1c4 <_Bfree>
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f000 fd73 	bl	800e1c4 <_Bfree>
 800d6de:	4629      	mov	r1, r5
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f000 fd6f 	bl	800e1c4 <_Bfree>
 800d6e6:	e61a      	b.n	800d31e <_strtod_l+0x666>
 800d6e8:	f1ba 0f00 	cmp.w	sl, #0
 800d6ec:	d11b      	bne.n	800d726 <_strtod_l+0xa6e>
 800d6ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d6f2:	b9f3      	cbnz	r3, 800d732 <_strtod_l+0xa7a>
 800d6f4:	4b6c      	ldr	r3, [pc, #432]	; (800d8a8 <_strtod_l+0xbf0>)
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	4640      	mov	r0, r8
 800d6fa:	4649      	mov	r1, r9
 800d6fc:	f7f3 f9ee 	bl	8000adc <__aeabi_dcmplt>
 800d700:	b9d0      	cbnz	r0, 800d738 <_strtod_l+0xa80>
 800d702:	4640      	mov	r0, r8
 800d704:	4649      	mov	r1, r9
 800d706:	4b6c      	ldr	r3, [pc, #432]	; (800d8b8 <_strtod_l+0xc00>)
 800d708:	2200      	movs	r2, #0
 800d70a:	f7f2 ff75 	bl	80005f8 <__aeabi_dmul>
 800d70e:	4680      	mov	r8, r0
 800d710:	4689      	mov	r9, r1
 800d712:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d716:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d71a:	9315      	str	r3, [sp, #84]	; 0x54
 800d71c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d720:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d724:	e79d      	b.n	800d662 <_strtod_l+0x9aa>
 800d726:	f1ba 0f01 	cmp.w	sl, #1
 800d72a:	d102      	bne.n	800d732 <_strtod_l+0xa7a>
 800d72c:	2f00      	cmp	r7, #0
 800d72e:	f43f ad83 	beq.w	800d238 <_strtod_l+0x580>
 800d732:	4b62      	ldr	r3, [pc, #392]	; (800d8bc <_strtod_l+0xc04>)
 800d734:	2200      	movs	r2, #0
 800d736:	e78e      	b.n	800d656 <_strtod_l+0x99e>
 800d738:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d8b8 <_strtod_l+0xc00>
 800d73c:	f04f 0800 	mov.w	r8, #0
 800d740:	e7e7      	b.n	800d712 <_strtod_l+0xa5a>
 800d742:	4b5d      	ldr	r3, [pc, #372]	; (800d8b8 <_strtod_l+0xc00>)
 800d744:	4640      	mov	r0, r8
 800d746:	4649      	mov	r1, r9
 800d748:	2200      	movs	r2, #0
 800d74a:	f7f2 ff55 	bl	80005f8 <__aeabi_dmul>
 800d74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d750:	4680      	mov	r8, r0
 800d752:	4689      	mov	r9, r1
 800d754:	b933      	cbnz	r3, 800d764 <_strtod_l+0xaac>
 800d756:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d75a:	900e      	str	r0, [sp, #56]	; 0x38
 800d75c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d75e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d762:	e7dd      	b.n	800d720 <_strtod_l+0xa68>
 800d764:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d768:	e7f9      	b.n	800d75e <_strtod_l+0xaa6>
 800d76a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d76e:	9b04      	ldr	r3, [sp, #16]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1a8      	bne.n	800d6c6 <_strtod_l+0xa0e>
 800d774:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d77a:	0d1b      	lsrs	r3, r3, #20
 800d77c:	051b      	lsls	r3, r3, #20
 800d77e:	429a      	cmp	r2, r3
 800d780:	d1a1      	bne.n	800d6c6 <_strtod_l+0xa0e>
 800d782:	4640      	mov	r0, r8
 800d784:	4649      	mov	r1, r9
 800d786:	f7f3 fa6f 	bl	8000c68 <__aeabi_d2lz>
 800d78a:	f7f2 ff07 	bl	800059c <__aeabi_l2d>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4640      	mov	r0, r8
 800d794:	4649      	mov	r1, r9
 800d796:	f7f2 fd77 	bl	8000288 <__aeabi_dsub>
 800d79a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d79c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7a0:	ea43 030a 	orr.w	r3, r3, sl
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	4680      	mov	r8, r0
 800d7a8:	4689      	mov	r9, r1
 800d7aa:	d055      	beq.n	800d858 <_strtod_l+0xba0>
 800d7ac:	a336      	add	r3, pc, #216	; (adr r3, 800d888 <_strtod_l+0xbd0>)
 800d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7b2:	f7f3 f993 	bl	8000adc <__aeabi_dcmplt>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	f47f acd0 	bne.w	800d15c <_strtod_l+0x4a4>
 800d7bc:	a334      	add	r3, pc, #208	; (adr r3, 800d890 <_strtod_l+0xbd8>)
 800d7be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7c2:	4640      	mov	r0, r8
 800d7c4:	4649      	mov	r1, r9
 800d7c6:	f7f3 f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	f43f af7b 	beq.w	800d6c6 <_strtod_l+0xa0e>
 800d7d0:	e4c4      	b.n	800d15c <_strtod_l+0x4a4>
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	b333      	cbz	r3, 800d824 <_strtod_l+0xb6c>
 800d7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d7dc:	d822      	bhi.n	800d824 <_strtod_l+0xb6c>
 800d7de:	a32e      	add	r3, pc, #184	; (adr r3, 800d898 <_strtod_l+0xbe0>)
 800d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	4649      	mov	r1, r9
 800d7e8:	f7f3 f982 	bl	8000af0 <__aeabi_dcmple>
 800d7ec:	b1a0      	cbz	r0, 800d818 <_strtod_l+0xb60>
 800d7ee:	4649      	mov	r1, r9
 800d7f0:	4640      	mov	r0, r8
 800d7f2:	f7f3 f9b1 	bl	8000b58 <__aeabi_d2uiz>
 800d7f6:	2801      	cmp	r0, #1
 800d7f8:	bf38      	it	cc
 800d7fa:	2001      	movcc	r0, #1
 800d7fc:	f7f2 fe82 	bl	8000504 <__aeabi_ui2d>
 800d800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d802:	4680      	mov	r8, r0
 800d804:	4689      	mov	r9, r1
 800d806:	bb23      	cbnz	r3, 800d852 <_strtod_l+0xb9a>
 800d808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d80c:	9010      	str	r0, [sp, #64]	; 0x40
 800d80e:	9311      	str	r3, [sp, #68]	; 0x44
 800d810:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d814:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d81a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d81c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d820:	1a9b      	subs	r3, r3, r2
 800d822:	9309      	str	r3, [sp, #36]	; 0x24
 800d824:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d828:	eeb0 0a48 	vmov.f32	s0, s16
 800d82c:	eef0 0a68 	vmov.f32	s1, s17
 800d830:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d834:	f000 fff8 	bl	800e828 <__ulp>
 800d838:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d83c:	ec53 2b10 	vmov	r2, r3, d0
 800d840:	f7f2 feda 	bl	80005f8 <__aeabi_dmul>
 800d844:	ec53 2b18 	vmov	r2, r3, d8
 800d848:	f7f2 fd20 	bl	800028c <__adddf3>
 800d84c:	4682      	mov	sl, r0
 800d84e:	468b      	mov	fp, r1
 800d850:	e78d      	b.n	800d76e <_strtod_l+0xab6>
 800d852:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d856:	e7db      	b.n	800d810 <_strtod_l+0xb58>
 800d858:	a311      	add	r3, pc, #68	; (adr r3, 800d8a0 <_strtod_l+0xbe8>)
 800d85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85e:	f7f3 f93d 	bl	8000adc <__aeabi_dcmplt>
 800d862:	e7b2      	b.n	800d7ca <_strtod_l+0xb12>
 800d864:	2300      	movs	r3, #0
 800d866:	930a      	str	r3, [sp, #40]	; 0x28
 800d868:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d86a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d86c:	6013      	str	r3, [r2, #0]
 800d86e:	f7ff ba6b 	b.w	800cd48 <_strtod_l+0x90>
 800d872:	2a65      	cmp	r2, #101	; 0x65
 800d874:	f43f ab5f 	beq.w	800cf36 <_strtod_l+0x27e>
 800d878:	2a45      	cmp	r2, #69	; 0x45
 800d87a:	f43f ab5c 	beq.w	800cf36 <_strtod_l+0x27e>
 800d87e:	2301      	movs	r3, #1
 800d880:	f7ff bb94 	b.w	800cfac <_strtod_l+0x2f4>
 800d884:	f3af 8000 	nop.w
 800d888:	94a03595 	.word	0x94a03595
 800d88c:	3fdfffff 	.word	0x3fdfffff
 800d890:	35afe535 	.word	0x35afe535
 800d894:	3fe00000 	.word	0x3fe00000
 800d898:	ffc00000 	.word	0xffc00000
 800d89c:	41dfffff 	.word	0x41dfffff
 800d8a0:	94a03595 	.word	0x94a03595
 800d8a4:	3fcfffff 	.word	0x3fcfffff
 800d8a8:	3ff00000 	.word	0x3ff00000
 800d8ac:	7ff00000 	.word	0x7ff00000
 800d8b0:	7fe00000 	.word	0x7fe00000
 800d8b4:	7c9fffff 	.word	0x7c9fffff
 800d8b8:	3fe00000 	.word	0x3fe00000
 800d8bc:	bff00000 	.word	0xbff00000
 800d8c0:	7fefffff 	.word	0x7fefffff

0800d8c4 <_strtod_r>:
 800d8c4:	4b01      	ldr	r3, [pc, #4]	; (800d8cc <_strtod_r+0x8>)
 800d8c6:	f7ff b9f7 	b.w	800ccb8 <_strtod_l>
 800d8ca:	bf00      	nop
 800d8cc:	20000078 	.word	0x20000078

0800d8d0 <_strtol_l.constprop.0>:
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8d6:	d001      	beq.n	800d8dc <_strtol_l.constprop.0+0xc>
 800d8d8:	2b24      	cmp	r3, #36	; 0x24
 800d8da:	d906      	bls.n	800d8ea <_strtol_l.constprop.0+0x1a>
 800d8dc:	f7fe fece 	bl	800c67c <__errno>
 800d8e0:	2316      	movs	r3, #22
 800d8e2:	6003      	str	r3, [r0, #0]
 800d8e4:	2000      	movs	r0, #0
 800d8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d9d0 <_strtol_l.constprop.0+0x100>
 800d8ee:	460d      	mov	r5, r1
 800d8f0:	462e      	mov	r6, r5
 800d8f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d8fa:	f017 0708 	ands.w	r7, r7, #8
 800d8fe:	d1f7      	bne.n	800d8f0 <_strtol_l.constprop.0+0x20>
 800d900:	2c2d      	cmp	r4, #45	; 0x2d
 800d902:	d132      	bne.n	800d96a <_strtol_l.constprop.0+0x9a>
 800d904:	782c      	ldrb	r4, [r5, #0]
 800d906:	2701      	movs	r7, #1
 800d908:	1cb5      	adds	r5, r6, #2
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d05b      	beq.n	800d9c6 <_strtol_l.constprop.0+0xf6>
 800d90e:	2b10      	cmp	r3, #16
 800d910:	d109      	bne.n	800d926 <_strtol_l.constprop.0+0x56>
 800d912:	2c30      	cmp	r4, #48	; 0x30
 800d914:	d107      	bne.n	800d926 <_strtol_l.constprop.0+0x56>
 800d916:	782c      	ldrb	r4, [r5, #0]
 800d918:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d91c:	2c58      	cmp	r4, #88	; 0x58
 800d91e:	d14d      	bne.n	800d9bc <_strtol_l.constprop.0+0xec>
 800d920:	786c      	ldrb	r4, [r5, #1]
 800d922:	2310      	movs	r3, #16
 800d924:	3502      	adds	r5, #2
 800d926:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d92a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d92e:	f04f 0c00 	mov.w	ip, #0
 800d932:	fbb8 f9f3 	udiv	r9, r8, r3
 800d936:	4666      	mov	r6, ip
 800d938:	fb03 8a19 	mls	sl, r3, r9, r8
 800d93c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d940:	f1be 0f09 	cmp.w	lr, #9
 800d944:	d816      	bhi.n	800d974 <_strtol_l.constprop.0+0xa4>
 800d946:	4674      	mov	r4, lr
 800d948:	42a3      	cmp	r3, r4
 800d94a:	dd24      	ble.n	800d996 <_strtol_l.constprop.0+0xc6>
 800d94c:	f1bc 0f00 	cmp.w	ip, #0
 800d950:	db1e      	blt.n	800d990 <_strtol_l.constprop.0+0xc0>
 800d952:	45b1      	cmp	r9, r6
 800d954:	d31c      	bcc.n	800d990 <_strtol_l.constprop.0+0xc0>
 800d956:	d101      	bne.n	800d95c <_strtol_l.constprop.0+0x8c>
 800d958:	45a2      	cmp	sl, r4
 800d95a:	db19      	blt.n	800d990 <_strtol_l.constprop.0+0xc0>
 800d95c:	fb06 4603 	mla	r6, r6, r3, r4
 800d960:	f04f 0c01 	mov.w	ip, #1
 800d964:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d968:	e7e8      	b.n	800d93c <_strtol_l.constprop.0+0x6c>
 800d96a:	2c2b      	cmp	r4, #43	; 0x2b
 800d96c:	bf04      	itt	eq
 800d96e:	782c      	ldrbeq	r4, [r5, #0]
 800d970:	1cb5      	addeq	r5, r6, #2
 800d972:	e7ca      	b.n	800d90a <_strtol_l.constprop.0+0x3a>
 800d974:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d978:	f1be 0f19 	cmp.w	lr, #25
 800d97c:	d801      	bhi.n	800d982 <_strtol_l.constprop.0+0xb2>
 800d97e:	3c37      	subs	r4, #55	; 0x37
 800d980:	e7e2      	b.n	800d948 <_strtol_l.constprop.0+0x78>
 800d982:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d986:	f1be 0f19 	cmp.w	lr, #25
 800d98a:	d804      	bhi.n	800d996 <_strtol_l.constprop.0+0xc6>
 800d98c:	3c57      	subs	r4, #87	; 0x57
 800d98e:	e7db      	b.n	800d948 <_strtol_l.constprop.0+0x78>
 800d990:	f04f 3cff 	mov.w	ip, #4294967295
 800d994:	e7e6      	b.n	800d964 <_strtol_l.constprop.0+0x94>
 800d996:	f1bc 0f00 	cmp.w	ip, #0
 800d99a:	da05      	bge.n	800d9a8 <_strtol_l.constprop.0+0xd8>
 800d99c:	2322      	movs	r3, #34	; 0x22
 800d99e:	6003      	str	r3, [r0, #0]
 800d9a0:	4646      	mov	r6, r8
 800d9a2:	b942      	cbnz	r2, 800d9b6 <_strtol_l.constprop.0+0xe6>
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	e79e      	b.n	800d8e6 <_strtol_l.constprop.0+0x16>
 800d9a8:	b107      	cbz	r7, 800d9ac <_strtol_l.constprop.0+0xdc>
 800d9aa:	4276      	negs	r6, r6
 800d9ac:	2a00      	cmp	r2, #0
 800d9ae:	d0f9      	beq.n	800d9a4 <_strtol_l.constprop.0+0xd4>
 800d9b0:	f1bc 0f00 	cmp.w	ip, #0
 800d9b4:	d000      	beq.n	800d9b8 <_strtol_l.constprop.0+0xe8>
 800d9b6:	1e69      	subs	r1, r5, #1
 800d9b8:	6011      	str	r1, [r2, #0]
 800d9ba:	e7f3      	b.n	800d9a4 <_strtol_l.constprop.0+0xd4>
 800d9bc:	2430      	movs	r4, #48	; 0x30
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1b1      	bne.n	800d926 <_strtol_l.constprop.0+0x56>
 800d9c2:	2308      	movs	r3, #8
 800d9c4:	e7af      	b.n	800d926 <_strtol_l.constprop.0+0x56>
 800d9c6:	2c30      	cmp	r4, #48	; 0x30
 800d9c8:	d0a5      	beq.n	800d916 <_strtol_l.constprop.0+0x46>
 800d9ca:	230a      	movs	r3, #10
 800d9cc:	e7ab      	b.n	800d926 <_strtol_l.constprop.0+0x56>
 800d9ce:	bf00      	nop
 800d9d0:	08010021 	.word	0x08010021

0800d9d4 <_strtol_r>:
 800d9d4:	f7ff bf7c 	b.w	800d8d0 <_strtol_l.constprop.0>

0800d9d8 <_write_r>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	4d07      	ldr	r5, [pc, #28]	; (800d9f8 <_write_r+0x20>)
 800d9dc:	4604      	mov	r4, r0
 800d9de:	4608      	mov	r0, r1
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	602a      	str	r2, [r5, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	f7f5 f881 	bl	8002aee <_write>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_write_r+0x1e>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_write_r+0x1e>
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	20002488 	.word	0x20002488

0800d9fc <_close_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4d06      	ldr	r5, [pc, #24]	; (800da18 <_close_r+0x1c>)
 800da00:	2300      	movs	r3, #0
 800da02:	4604      	mov	r4, r0
 800da04:	4608      	mov	r0, r1
 800da06:	602b      	str	r3, [r5, #0]
 800da08:	f7f5 f88d 	bl	8002b26 <_close>
 800da0c:	1c43      	adds	r3, r0, #1
 800da0e:	d102      	bne.n	800da16 <_close_r+0x1a>
 800da10:	682b      	ldr	r3, [r5, #0]
 800da12:	b103      	cbz	r3, 800da16 <_close_r+0x1a>
 800da14:	6023      	str	r3, [r4, #0]
 800da16:	bd38      	pop	{r3, r4, r5, pc}
 800da18:	20002488 	.word	0x20002488

0800da1c <rshift>:
 800da1c:	6903      	ldr	r3, [r0, #16]
 800da1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800da22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da26:	ea4f 1261 	mov.w	r2, r1, asr #5
 800da2a:	f100 0414 	add.w	r4, r0, #20
 800da2e:	dd45      	ble.n	800dabc <rshift+0xa0>
 800da30:	f011 011f 	ands.w	r1, r1, #31
 800da34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800da38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800da3c:	d10c      	bne.n	800da58 <rshift+0x3c>
 800da3e:	f100 0710 	add.w	r7, r0, #16
 800da42:	4629      	mov	r1, r5
 800da44:	42b1      	cmp	r1, r6
 800da46:	d334      	bcc.n	800dab2 <rshift+0x96>
 800da48:	1a9b      	subs	r3, r3, r2
 800da4a:	009b      	lsls	r3, r3, #2
 800da4c:	1eea      	subs	r2, r5, #3
 800da4e:	4296      	cmp	r6, r2
 800da50:	bf38      	it	cc
 800da52:	2300      	movcc	r3, #0
 800da54:	4423      	add	r3, r4
 800da56:	e015      	b.n	800da84 <rshift+0x68>
 800da58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800da5c:	f1c1 0820 	rsb	r8, r1, #32
 800da60:	40cf      	lsrs	r7, r1
 800da62:	f105 0e04 	add.w	lr, r5, #4
 800da66:	46a1      	mov	r9, r4
 800da68:	4576      	cmp	r6, lr
 800da6a:	46f4      	mov	ip, lr
 800da6c:	d815      	bhi.n	800da9a <rshift+0x7e>
 800da6e:	1a9a      	subs	r2, r3, r2
 800da70:	0092      	lsls	r2, r2, #2
 800da72:	3a04      	subs	r2, #4
 800da74:	3501      	adds	r5, #1
 800da76:	42ae      	cmp	r6, r5
 800da78:	bf38      	it	cc
 800da7a:	2200      	movcc	r2, #0
 800da7c:	18a3      	adds	r3, r4, r2
 800da7e:	50a7      	str	r7, [r4, r2]
 800da80:	b107      	cbz	r7, 800da84 <rshift+0x68>
 800da82:	3304      	adds	r3, #4
 800da84:	1b1a      	subs	r2, r3, r4
 800da86:	42a3      	cmp	r3, r4
 800da88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800da8c:	bf08      	it	eq
 800da8e:	2300      	moveq	r3, #0
 800da90:	6102      	str	r2, [r0, #16]
 800da92:	bf08      	it	eq
 800da94:	6143      	streq	r3, [r0, #20]
 800da96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da9a:	f8dc c000 	ldr.w	ip, [ip]
 800da9e:	fa0c fc08 	lsl.w	ip, ip, r8
 800daa2:	ea4c 0707 	orr.w	r7, ip, r7
 800daa6:	f849 7b04 	str.w	r7, [r9], #4
 800daaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800daae:	40cf      	lsrs	r7, r1
 800dab0:	e7da      	b.n	800da68 <rshift+0x4c>
 800dab2:	f851 cb04 	ldr.w	ip, [r1], #4
 800dab6:	f847 cf04 	str.w	ip, [r7, #4]!
 800daba:	e7c3      	b.n	800da44 <rshift+0x28>
 800dabc:	4623      	mov	r3, r4
 800dabe:	e7e1      	b.n	800da84 <rshift+0x68>

0800dac0 <__hexdig_fun>:
 800dac0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dac4:	2b09      	cmp	r3, #9
 800dac6:	d802      	bhi.n	800dace <__hexdig_fun+0xe>
 800dac8:	3820      	subs	r0, #32
 800daca:	b2c0      	uxtb	r0, r0
 800dacc:	4770      	bx	lr
 800dace:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dad2:	2b05      	cmp	r3, #5
 800dad4:	d801      	bhi.n	800dada <__hexdig_fun+0x1a>
 800dad6:	3847      	subs	r0, #71	; 0x47
 800dad8:	e7f7      	b.n	800daca <__hexdig_fun+0xa>
 800dada:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dade:	2b05      	cmp	r3, #5
 800dae0:	d801      	bhi.n	800dae6 <__hexdig_fun+0x26>
 800dae2:	3827      	subs	r0, #39	; 0x27
 800dae4:	e7f1      	b.n	800daca <__hexdig_fun+0xa>
 800dae6:	2000      	movs	r0, #0
 800dae8:	4770      	bx	lr
	...

0800daec <__gethex>:
 800daec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf0:	ed2d 8b02 	vpush	{d8}
 800daf4:	b089      	sub	sp, #36	; 0x24
 800daf6:	ee08 0a10 	vmov	s16, r0
 800dafa:	9304      	str	r3, [sp, #16]
 800dafc:	4bb4      	ldr	r3, [pc, #720]	; (800ddd0 <__gethex+0x2e4>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	9301      	str	r3, [sp, #4]
 800db02:	4618      	mov	r0, r3
 800db04:	468b      	mov	fp, r1
 800db06:	4690      	mov	r8, r2
 800db08:	f7f2 fb62 	bl	80001d0 <strlen>
 800db0c:	9b01      	ldr	r3, [sp, #4]
 800db0e:	f8db 2000 	ldr.w	r2, [fp]
 800db12:	4403      	add	r3, r0
 800db14:	4682      	mov	sl, r0
 800db16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800db1a:	9305      	str	r3, [sp, #20]
 800db1c:	1c93      	adds	r3, r2, #2
 800db1e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800db22:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800db26:	32fe      	adds	r2, #254	; 0xfe
 800db28:	18d1      	adds	r1, r2, r3
 800db2a:	461f      	mov	r7, r3
 800db2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800db30:	9100      	str	r1, [sp, #0]
 800db32:	2830      	cmp	r0, #48	; 0x30
 800db34:	d0f8      	beq.n	800db28 <__gethex+0x3c>
 800db36:	f7ff ffc3 	bl	800dac0 <__hexdig_fun>
 800db3a:	4604      	mov	r4, r0
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d13a      	bne.n	800dbb6 <__gethex+0xca>
 800db40:	9901      	ldr	r1, [sp, #4]
 800db42:	4652      	mov	r2, sl
 800db44:	4638      	mov	r0, r7
 800db46:	f7ff f886 	bl	800cc56 <strncmp>
 800db4a:	4605      	mov	r5, r0
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d168      	bne.n	800dc22 <__gethex+0x136>
 800db50:	f817 000a 	ldrb.w	r0, [r7, sl]
 800db54:	eb07 060a 	add.w	r6, r7, sl
 800db58:	f7ff ffb2 	bl	800dac0 <__hexdig_fun>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d062      	beq.n	800dc26 <__gethex+0x13a>
 800db60:	4633      	mov	r3, r6
 800db62:	7818      	ldrb	r0, [r3, #0]
 800db64:	2830      	cmp	r0, #48	; 0x30
 800db66:	461f      	mov	r7, r3
 800db68:	f103 0301 	add.w	r3, r3, #1
 800db6c:	d0f9      	beq.n	800db62 <__gethex+0x76>
 800db6e:	f7ff ffa7 	bl	800dac0 <__hexdig_fun>
 800db72:	2301      	movs	r3, #1
 800db74:	fab0 f480 	clz	r4, r0
 800db78:	0964      	lsrs	r4, r4, #5
 800db7a:	4635      	mov	r5, r6
 800db7c:	9300      	str	r3, [sp, #0]
 800db7e:	463a      	mov	r2, r7
 800db80:	4616      	mov	r6, r2
 800db82:	3201      	adds	r2, #1
 800db84:	7830      	ldrb	r0, [r6, #0]
 800db86:	f7ff ff9b 	bl	800dac0 <__hexdig_fun>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	d1f8      	bne.n	800db80 <__gethex+0x94>
 800db8e:	9901      	ldr	r1, [sp, #4]
 800db90:	4652      	mov	r2, sl
 800db92:	4630      	mov	r0, r6
 800db94:	f7ff f85f 	bl	800cc56 <strncmp>
 800db98:	b980      	cbnz	r0, 800dbbc <__gethex+0xd0>
 800db9a:	b94d      	cbnz	r5, 800dbb0 <__gethex+0xc4>
 800db9c:	eb06 050a 	add.w	r5, r6, sl
 800dba0:	462a      	mov	r2, r5
 800dba2:	4616      	mov	r6, r2
 800dba4:	3201      	adds	r2, #1
 800dba6:	7830      	ldrb	r0, [r6, #0]
 800dba8:	f7ff ff8a 	bl	800dac0 <__hexdig_fun>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d1f8      	bne.n	800dba2 <__gethex+0xb6>
 800dbb0:	1bad      	subs	r5, r5, r6
 800dbb2:	00ad      	lsls	r5, r5, #2
 800dbb4:	e004      	b.n	800dbc0 <__gethex+0xd4>
 800dbb6:	2400      	movs	r4, #0
 800dbb8:	4625      	mov	r5, r4
 800dbba:	e7e0      	b.n	800db7e <__gethex+0x92>
 800dbbc:	2d00      	cmp	r5, #0
 800dbbe:	d1f7      	bne.n	800dbb0 <__gethex+0xc4>
 800dbc0:	7833      	ldrb	r3, [r6, #0]
 800dbc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dbc6:	2b50      	cmp	r3, #80	; 0x50
 800dbc8:	d13b      	bne.n	800dc42 <__gethex+0x156>
 800dbca:	7873      	ldrb	r3, [r6, #1]
 800dbcc:	2b2b      	cmp	r3, #43	; 0x2b
 800dbce:	d02c      	beq.n	800dc2a <__gethex+0x13e>
 800dbd0:	2b2d      	cmp	r3, #45	; 0x2d
 800dbd2:	d02e      	beq.n	800dc32 <__gethex+0x146>
 800dbd4:	1c71      	adds	r1, r6, #1
 800dbd6:	f04f 0900 	mov.w	r9, #0
 800dbda:	7808      	ldrb	r0, [r1, #0]
 800dbdc:	f7ff ff70 	bl	800dac0 <__hexdig_fun>
 800dbe0:	1e43      	subs	r3, r0, #1
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b18      	cmp	r3, #24
 800dbe6:	d82c      	bhi.n	800dc42 <__gethex+0x156>
 800dbe8:	f1a0 0210 	sub.w	r2, r0, #16
 800dbec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dbf0:	f7ff ff66 	bl	800dac0 <__hexdig_fun>
 800dbf4:	1e43      	subs	r3, r0, #1
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	2b18      	cmp	r3, #24
 800dbfa:	d91d      	bls.n	800dc38 <__gethex+0x14c>
 800dbfc:	f1b9 0f00 	cmp.w	r9, #0
 800dc00:	d000      	beq.n	800dc04 <__gethex+0x118>
 800dc02:	4252      	negs	r2, r2
 800dc04:	4415      	add	r5, r2
 800dc06:	f8cb 1000 	str.w	r1, [fp]
 800dc0a:	b1e4      	cbz	r4, 800dc46 <__gethex+0x15a>
 800dc0c:	9b00      	ldr	r3, [sp, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	bf14      	ite	ne
 800dc12:	2700      	movne	r7, #0
 800dc14:	2706      	moveq	r7, #6
 800dc16:	4638      	mov	r0, r7
 800dc18:	b009      	add	sp, #36	; 0x24
 800dc1a:	ecbd 8b02 	vpop	{d8}
 800dc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc22:	463e      	mov	r6, r7
 800dc24:	4625      	mov	r5, r4
 800dc26:	2401      	movs	r4, #1
 800dc28:	e7ca      	b.n	800dbc0 <__gethex+0xd4>
 800dc2a:	f04f 0900 	mov.w	r9, #0
 800dc2e:	1cb1      	adds	r1, r6, #2
 800dc30:	e7d3      	b.n	800dbda <__gethex+0xee>
 800dc32:	f04f 0901 	mov.w	r9, #1
 800dc36:	e7fa      	b.n	800dc2e <__gethex+0x142>
 800dc38:	230a      	movs	r3, #10
 800dc3a:	fb03 0202 	mla	r2, r3, r2, r0
 800dc3e:	3a10      	subs	r2, #16
 800dc40:	e7d4      	b.n	800dbec <__gethex+0x100>
 800dc42:	4631      	mov	r1, r6
 800dc44:	e7df      	b.n	800dc06 <__gethex+0x11a>
 800dc46:	1bf3      	subs	r3, r6, r7
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	4621      	mov	r1, r4
 800dc4c:	2b07      	cmp	r3, #7
 800dc4e:	dc0b      	bgt.n	800dc68 <__gethex+0x17c>
 800dc50:	ee18 0a10 	vmov	r0, s16
 800dc54:	f000 fa76 	bl	800e144 <_Balloc>
 800dc58:	4604      	mov	r4, r0
 800dc5a:	b940      	cbnz	r0, 800dc6e <__gethex+0x182>
 800dc5c:	4b5d      	ldr	r3, [pc, #372]	; (800ddd4 <__gethex+0x2e8>)
 800dc5e:	4602      	mov	r2, r0
 800dc60:	21de      	movs	r1, #222	; 0xde
 800dc62:	485d      	ldr	r0, [pc, #372]	; (800ddd8 <__gethex+0x2ec>)
 800dc64:	f001 fb02 	bl	800f26c <__assert_func>
 800dc68:	3101      	adds	r1, #1
 800dc6a:	105b      	asrs	r3, r3, #1
 800dc6c:	e7ee      	b.n	800dc4c <__gethex+0x160>
 800dc6e:	f100 0914 	add.w	r9, r0, #20
 800dc72:	f04f 0b00 	mov.w	fp, #0
 800dc76:	f1ca 0301 	rsb	r3, sl, #1
 800dc7a:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc7e:	f8cd b000 	str.w	fp, [sp]
 800dc82:	9306      	str	r3, [sp, #24]
 800dc84:	42b7      	cmp	r7, r6
 800dc86:	d340      	bcc.n	800dd0a <__gethex+0x21e>
 800dc88:	9802      	ldr	r0, [sp, #8]
 800dc8a:	9b00      	ldr	r3, [sp, #0]
 800dc8c:	f840 3b04 	str.w	r3, [r0], #4
 800dc90:	eba0 0009 	sub.w	r0, r0, r9
 800dc94:	1080      	asrs	r0, r0, #2
 800dc96:	0146      	lsls	r6, r0, #5
 800dc98:	6120      	str	r0, [r4, #16]
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f000 fb44 	bl	800e328 <__hi0bits>
 800dca0:	1a30      	subs	r0, r6, r0
 800dca2:	f8d8 6000 	ldr.w	r6, [r8]
 800dca6:	42b0      	cmp	r0, r6
 800dca8:	dd63      	ble.n	800dd72 <__gethex+0x286>
 800dcaa:	1b87      	subs	r7, r0, r6
 800dcac:	4639      	mov	r1, r7
 800dcae:	4620      	mov	r0, r4
 800dcb0:	f000 fee8 	bl	800ea84 <__any_on>
 800dcb4:	4682      	mov	sl, r0
 800dcb6:	b1a8      	cbz	r0, 800dce4 <__gethex+0x1f8>
 800dcb8:	1e7b      	subs	r3, r7, #1
 800dcba:	1159      	asrs	r1, r3, #5
 800dcbc:	f003 021f 	and.w	r2, r3, #31
 800dcc0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dcc4:	f04f 0a01 	mov.w	sl, #1
 800dcc8:	fa0a f202 	lsl.w	r2, sl, r2
 800dccc:	420a      	tst	r2, r1
 800dcce:	d009      	beq.n	800dce4 <__gethex+0x1f8>
 800dcd0:	4553      	cmp	r3, sl
 800dcd2:	dd05      	ble.n	800dce0 <__gethex+0x1f4>
 800dcd4:	1eb9      	subs	r1, r7, #2
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f000 fed4 	bl	800ea84 <__any_on>
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	d145      	bne.n	800dd6c <__gethex+0x280>
 800dce0:	f04f 0a02 	mov.w	sl, #2
 800dce4:	4639      	mov	r1, r7
 800dce6:	4620      	mov	r0, r4
 800dce8:	f7ff fe98 	bl	800da1c <rshift>
 800dcec:	443d      	add	r5, r7
 800dcee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcf2:	42ab      	cmp	r3, r5
 800dcf4:	da4c      	bge.n	800dd90 <__gethex+0x2a4>
 800dcf6:	ee18 0a10 	vmov	r0, s16
 800dcfa:	4621      	mov	r1, r4
 800dcfc:	f000 fa62 	bl	800e1c4 <_Bfree>
 800dd00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd02:	2300      	movs	r3, #0
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	27a3      	movs	r7, #163	; 0xa3
 800dd08:	e785      	b.n	800dc16 <__gethex+0x12a>
 800dd0a:	1e73      	subs	r3, r6, #1
 800dd0c:	9a05      	ldr	r2, [sp, #20]
 800dd0e:	9303      	str	r3, [sp, #12]
 800dd10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d019      	beq.n	800dd4c <__gethex+0x260>
 800dd18:	f1bb 0f20 	cmp.w	fp, #32
 800dd1c:	d107      	bne.n	800dd2e <__gethex+0x242>
 800dd1e:	9b02      	ldr	r3, [sp, #8]
 800dd20:	9a00      	ldr	r2, [sp, #0]
 800dd22:	f843 2b04 	str.w	r2, [r3], #4
 800dd26:	9302      	str	r3, [sp, #8]
 800dd28:	2300      	movs	r3, #0
 800dd2a:	9300      	str	r3, [sp, #0]
 800dd2c:	469b      	mov	fp, r3
 800dd2e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800dd32:	f7ff fec5 	bl	800dac0 <__hexdig_fun>
 800dd36:	9b00      	ldr	r3, [sp, #0]
 800dd38:	f000 000f 	and.w	r0, r0, #15
 800dd3c:	fa00 f00b 	lsl.w	r0, r0, fp
 800dd40:	4303      	orrs	r3, r0
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	f10b 0b04 	add.w	fp, fp, #4
 800dd48:	9b03      	ldr	r3, [sp, #12]
 800dd4a:	e00d      	b.n	800dd68 <__gethex+0x27c>
 800dd4c:	9b03      	ldr	r3, [sp, #12]
 800dd4e:	9a06      	ldr	r2, [sp, #24]
 800dd50:	4413      	add	r3, r2
 800dd52:	42bb      	cmp	r3, r7
 800dd54:	d3e0      	bcc.n	800dd18 <__gethex+0x22c>
 800dd56:	4618      	mov	r0, r3
 800dd58:	9901      	ldr	r1, [sp, #4]
 800dd5a:	9307      	str	r3, [sp, #28]
 800dd5c:	4652      	mov	r2, sl
 800dd5e:	f7fe ff7a 	bl	800cc56 <strncmp>
 800dd62:	9b07      	ldr	r3, [sp, #28]
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d1d7      	bne.n	800dd18 <__gethex+0x22c>
 800dd68:	461e      	mov	r6, r3
 800dd6a:	e78b      	b.n	800dc84 <__gethex+0x198>
 800dd6c:	f04f 0a03 	mov.w	sl, #3
 800dd70:	e7b8      	b.n	800dce4 <__gethex+0x1f8>
 800dd72:	da0a      	bge.n	800dd8a <__gethex+0x29e>
 800dd74:	1a37      	subs	r7, r6, r0
 800dd76:	4621      	mov	r1, r4
 800dd78:	ee18 0a10 	vmov	r0, s16
 800dd7c:	463a      	mov	r2, r7
 800dd7e:	f000 fc3d 	bl	800e5fc <__lshift>
 800dd82:	1bed      	subs	r5, r5, r7
 800dd84:	4604      	mov	r4, r0
 800dd86:	f100 0914 	add.w	r9, r0, #20
 800dd8a:	f04f 0a00 	mov.w	sl, #0
 800dd8e:	e7ae      	b.n	800dcee <__gethex+0x202>
 800dd90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dd94:	42a8      	cmp	r0, r5
 800dd96:	dd72      	ble.n	800de7e <__gethex+0x392>
 800dd98:	1b45      	subs	r5, r0, r5
 800dd9a:	42ae      	cmp	r6, r5
 800dd9c:	dc36      	bgt.n	800de0c <__gethex+0x320>
 800dd9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	d02a      	beq.n	800ddfc <__gethex+0x310>
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d02c      	beq.n	800de04 <__gethex+0x318>
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d11c      	bne.n	800dde8 <__gethex+0x2fc>
 800ddae:	42ae      	cmp	r6, r5
 800ddb0:	d11a      	bne.n	800dde8 <__gethex+0x2fc>
 800ddb2:	2e01      	cmp	r6, #1
 800ddb4:	d112      	bne.n	800dddc <__gethex+0x2f0>
 800ddb6:	9a04      	ldr	r2, [sp, #16]
 800ddb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ddbc:	6013      	str	r3, [r2, #0]
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	6123      	str	r3, [r4, #16]
 800ddc2:	f8c9 3000 	str.w	r3, [r9]
 800ddc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ddc8:	2762      	movs	r7, #98	; 0x62
 800ddca:	601c      	str	r4, [r3, #0]
 800ddcc:	e723      	b.n	800dc16 <__gethex+0x12a>
 800ddce:	bf00      	nop
 800ddd0:	08010198 	.word	0x08010198
 800ddd4:	08010121 	.word	0x08010121
 800ddd8:	08010132 	.word	0x08010132
 800dddc:	1e71      	subs	r1, r6, #1
 800ddde:	4620      	mov	r0, r4
 800dde0:	f000 fe50 	bl	800ea84 <__any_on>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d1e6      	bne.n	800ddb6 <__gethex+0x2ca>
 800dde8:	ee18 0a10 	vmov	r0, s16
 800ddec:	4621      	mov	r1, r4
 800ddee:	f000 f9e9 	bl	800e1c4 <_Bfree>
 800ddf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	2750      	movs	r7, #80	; 0x50
 800ddfa:	e70c      	b.n	800dc16 <__gethex+0x12a>
 800ddfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1f2      	bne.n	800dde8 <__gethex+0x2fc>
 800de02:	e7d8      	b.n	800ddb6 <__gethex+0x2ca>
 800de04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1d5      	bne.n	800ddb6 <__gethex+0x2ca>
 800de0a:	e7ed      	b.n	800dde8 <__gethex+0x2fc>
 800de0c:	1e6f      	subs	r7, r5, #1
 800de0e:	f1ba 0f00 	cmp.w	sl, #0
 800de12:	d131      	bne.n	800de78 <__gethex+0x38c>
 800de14:	b127      	cbz	r7, 800de20 <__gethex+0x334>
 800de16:	4639      	mov	r1, r7
 800de18:	4620      	mov	r0, r4
 800de1a:	f000 fe33 	bl	800ea84 <__any_on>
 800de1e:	4682      	mov	sl, r0
 800de20:	117b      	asrs	r3, r7, #5
 800de22:	2101      	movs	r1, #1
 800de24:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800de28:	f007 071f 	and.w	r7, r7, #31
 800de2c:	fa01 f707 	lsl.w	r7, r1, r7
 800de30:	421f      	tst	r7, r3
 800de32:	4629      	mov	r1, r5
 800de34:	4620      	mov	r0, r4
 800de36:	bf18      	it	ne
 800de38:	f04a 0a02 	orrne.w	sl, sl, #2
 800de3c:	1b76      	subs	r6, r6, r5
 800de3e:	f7ff fded 	bl	800da1c <rshift>
 800de42:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800de46:	2702      	movs	r7, #2
 800de48:	f1ba 0f00 	cmp.w	sl, #0
 800de4c:	d048      	beq.n	800dee0 <__gethex+0x3f4>
 800de4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800de52:	2b02      	cmp	r3, #2
 800de54:	d015      	beq.n	800de82 <__gethex+0x396>
 800de56:	2b03      	cmp	r3, #3
 800de58:	d017      	beq.n	800de8a <__gethex+0x39e>
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d109      	bne.n	800de72 <__gethex+0x386>
 800de5e:	f01a 0f02 	tst.w	sl, #2
 800de62:	d006      	beq.n	800de72 <__gethex+0x386>
 800de64:	f8d9 0000 	ldr.w	r0, [r9]
 800de68:	ea4a 0a00 	orr.w	sl, sl, r0
 800de6c:	f01a 0f01 	tst.w	sl, #1
 800de70:	d10e      	bne.n	800de90 <__gethex+0x3a4>
 800de72:	f047 0710 	orr.w	r7, r7, #16
 800de76:	e033      	b.n	800dee0 <__gethex+0x3f4>
 800de78:	f04f 0a01 	mov.w	sl, #1
 800de7c:	e7d0      	b.n	800de20 <__gethex+0x334>
 800de7e:	2701      	movs	r7, #1
 800de80:	e7e2      	b.n	800de48 <__gethex+0x35c>
 800de82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de84:	f1c3 0301 	rsb	r3, r3, #1
 800de88:	9315      	str	r3, [sp, #84]	; 0x54
 800de8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d0f0      	beq.n	800de72 <__gethex+0x386>
 800de90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800de94:	f104 0314 	add.w	r3, r4, #20
 800de98:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800de9c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dea0:	f04f 0c00 	mov.w	ip, #0
 800dea4:	4618      	mov	r0, r3
 800dea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800deaa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800deae:	d01c      	beq.n	800deea <__gethex+0x3fe>
 800deb0:	3201      	adds	r2, #1
 800deb2:	6002      	str	r2, [r0, #0]
 800deb4:	2f02      	cmp	r7, #2
 800deb6:	f104 0314 	add.w	r3, r4, #20
 800deba:	d13f      	bne.n	800df3c <__gethex+0x450>
 800debc:	f8d8 2000 	ldr.w	r2, [r8]
 800dec0:	3a01      	subs	r2, #1
 800dec2:	42b2      	cmp	r2, r6
 800dec4:	d10a      	bne.n	800dedc <__gethex+0x3f0>
 800dec6:	1171      	asrs	r1, r6, #5
 800dec8:	2201      	movs	r2, #1
 800deca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dece:	f006 061f 	and.w	r6, r6, #31
 800ded2:	fa02 f606 	lsl.w	r6, r2, r6
 800ded6:	421e      	tst	r6, r3
 800ded8:	bf18      	it	ne
 800deda:	4617      	movne	r7, r2
 800dedc:	f047 0720 	orr.w	r7, r7, #32
 800dee0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dee2:	601c      	str	r4, [r3, #0]
 800dee4:	9b04      	ldr	r3, [sp, #16]
 800dee6:	601d      	str	r5, [r3, #0]
 800dee8:	e695      	b.n	800dc16 <__gethex+0x12a>
 800deea:	4299      	cmp	r1, r3
 800deec:	f843 cc04 	str.w	ip, [r3, #-4]
 800def0:	d8d8      	bhi.n	800dea4 <__gethex+0x3b8>
 800def2:	68a3      	ldr	r3, [r4, #8]
 800def4:	459b      	cmp	fp, r3
 800def6:	db19      	blt.n	800df2c <__gethex+0x440>
 800def8:	6861      	ldr	r1, [r4, #4]
 800defa:	ee18 0a10 	vmov	r0, s16
 800defe:	3101      	adds	r1, #1
 800df00:	f000 f920 	bl	800e144 <_Balloc>
 800df04:	4681      	mov	r9, r0
 800df06:	b918      	cbnz	r0, 800df10 <__gethex+0x424>
 800df08:	4b1a      	ldr	r3, [pc, #104]	; (800df74 <__gethex+0x488>)
 800df0a:	4602      	mov	r2, r0
 800df0c:	2184      	movs	r1, #132	; 0x84
 800df0e:	e6a8      	b.n	800dc62 <__gethex+0x176>
 800df10:	6922      	ldr	r2, [r4, #16]
 800df12:	3202      	adds	r2, #2
 800df14:	f104 010c 	add.w	r1, r4, #12
 800df18:	0092      	lsls	r2, r2, #2
 800df1a:	300c      	adds	r0, #12
 800df1c:	f7fe fbd8 	bl	800c6d0 <memcpy>
 800df20:	4621      	mov	r1, r4
 800df22:	ee18 0a10 	vmov	r0, s16
 800df26:	f000 f94d 	bl	800e1c4 <_Bfree>
 800df2a:	464c      	mov	r4, r9
 800df2c:	6923      	ldr	r3, [r4, #16]
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800df34:	6122      	str	r2, [r4, #16]
 800df36:	2201      	movs	r2, #1
 800df38:	615a      	str	r2, [r3, #20]
 800df3a:	e7bb      	b.n	800deb4 <__gethex+0x3c8>
 800df3c:	6922      	ldr	r2, [r4, #16]
 800df3e:	455a      	cmp	r2, fp
 800df40:	dd0b      	ble.n	800df5a <__gethex+0x46e>
 800df42:	2101      	movs	r1, #1
 800df44:	4620      	mov	r0, r4
 800df46:	f7ff fd69 	bl	800da1c <rshift>
 800df4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df4e:	3501      	adds	r5, #1
 800df50:	42ab      	cmp	r3, r5
 800df52:	f6ff aed0 	blt.w	800dcf6 <__gethex+0x20a>
 800df56:	2701      	movs	r7, #1
 800df58:	e7c0      	b.n	800dedc <__gethex+0x3f0>
 800df5a:	f016 061f 	ands.w	r6, r6, #31
 800df5e:	d0fa      	beq.n	800df56 <__gethex+0x46a>
 800df60:	4453      	add	r3, sl
 800df62:	f1c6 0620 	rsb	r6, r6, #32
 800df66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800df6a:	f000 f9dd 	bl	800e328 <__hi0bits>
 800df6e:	42b0      	cmp	r0, r6
 800df70:	dbe7      	blt.n	800df42 <__gethex+0x456>
 800df72:	e7f0      	b.n	800df56 <__gethex+0x46a>
 800df74:	08010121 	.word	0x08010121

0800df78 <L_shift>:
 800df78:	f1c2 0208 	rsb	r2, r2, #8
 800df7c:	0092      	lsls	r2, r2, #2
 800df7e:	b570      	push	{r4, r5, r6, lr}
 800df80:	f1c2 0620 	rsb	r6, r2, #32
 800df84:	6843      	ldr	r3, [r0, #4]
 800df86:	6804      	ldr	r4, [r0, #0]
 800df88:	fa03 f506 	lsl.w	r5, r3, r6
 800df8c:	432c      	orrs	r4, r5
 800df8e:	40d3      	lsrs	r3, r2
 800df90:	6004      	str	r4, [r0, #0]
 800df92:	f840 3f04 	str.w	r3, [r0, #4]!
 800df96:	4288      	cmp	r0, r1
 800df98:	d3f4      	bcc.n	800df84 <L_shift+0xc>
 800df9a:	bd70      	pop	{r4, r5, r6, pc}

0800df9c <__match>:
 800df9c:	b530      	push	{r4, r5, lr}
 800df9e:	6803      	ldr	r3, [r0, #0]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dfa6:	b914      	cbnz	r4, 800dfae <__match+0x12>
 800dfa8:	6003      	str	r3, [r0, #0]
 800dfaa:	2001      	movs	r0, #1
 800dfac:	bd30      	pop	{r4, r5, pc}
 800dfae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dfb6:	2d19      	cmp	r5, #25
 800dfb8:	bf98      	it	ls
 800dfba:	3220      	addls	r2, #32
 800dfbc:	42a2      	cmp	r2, r4
 800dfbe:	d0f0      	beq.n	800dfa2 <__match+0x6>
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	e7f3      	b.n	800dfac <__match+0x10>

0800dfc4 <__hexnan>:
 800dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	680b      	ldr	r3, [r1, #0]
 800dfca:	115e      	asrs	r6, r3, #5
 800dfcc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dfd0:	f013 031f 	ands.w	r3, r3, #31
 800dfd4:	b087      	sub	sp, #28
 800dfd6:	bf18      	it	ne
 800dfd8:	3604      	addne	r6, #4
 800dfda:	2500      	movs	r5, #0
 800dfdc:	1f37      	subs	r7, r6, #4
 800dfde:	4690      	mov	r8, r2
 800dfe0:	6802      	ldr	r2, [r0, #0]
 800dfe2:	9301      	str	r3, [sp, #4]
 800dfe4:	4682      	mov	sl, r0
 800dfe6:	f846 5c04 	str.w	r5, [r6, #-4]
 800dfea:	46b9      	mov	r9, r7
 800dfec:	463c      	mov	r4, r7
 800dfee:	9502      	str	r5, [sp, #8]
 800dff0:	46ab      	mov	fp, r5
 800dff2:	7851      	ldrb	r1, [r2, #1]
 800dff4:	1c53      	adds	r3, r2, #1
 800dff6:	9303      	str	r3, [sp, #12]
 800dff8:	b341      	cbz	r1, 800e04c <__hexnan+0x88>
 800dffa:	4608      	mov	r0, r1
 800dffc:	9205      	str	r2, [sp, #20]
 800dffe:	9104      	str	r1, [sp, #16]
 800e000:	f7ff fd5e 	bl	800dac0 <__hexdig_fun>
 800e004:	2800      	cmp	r0, #0
 800e006:	d14f      	bne.n	800e0a8 <__hexnan+0xe4>
 800e008:	9904      	ldr	r1, [sp, #16]
 800e00a:	9a05      	ldr	r2, [sp, #20]
 800e00c:	2920      	cmp	r1, #32
 800e00e:	d818      	bhi.n	800e042 <__hexnan+0x7e>
 800e010:	9b02      	ldr	r3, [sp, #8]
 800e012:	459b      	cmp	fp, r3
 800e014:	dd13      	ble.n	800e03e <__hexnan+0x7a>
 800e016:	454c      	cmp	r4, r9
 800e018:	d206      	bcs.n	800e028 <__hexnan+0x64>
 800e01a:	2d07      	cmp	r5, #7
 800e01c:	dc04      	bgt.n	800e028 <__hexnan+0x64>
 800e01e:	462a      	mov	r2, r5
 800e020:	4649      	mov	r1, r9
 800e022:	4620      	mov	r0, r4
 800e024:	f7ff ffa8 	bl	800df78 <L_shift>
 800e028:	4544      	cmp	r4, r8
 800e02a:	d950      	bls.n	800e0ce <__hexnan+0x10a>
 800e02c:	2300      	movs	r3, #0
 800e02e:	f1a4 0904 	sub.w	r9, r4, #4
 800e032:	f844 3c04 	str.w	r3, [r4, #-4]
 800e036:	f8cd b008 	str.w	fp, [sp, #8]
 800e03a:	464c      	mov	r4, r9
 800e03c:	461d      	mov	r5, r3
 800e03e:	9a03      	ldr	r2, [sp, #12]
 800e040:	e7d7      	b.n	800dff2 <__hexnan+0x2e>
 800e042:	2929      	cmp	r1, #41	; 0x29
 800e044:	d156      	bne.n	800e0f4 <__hexnan+0x130>
 800e046:	3202      	adds	r2, #2
 800e048:	f8ca 2000 	str.w	r2, [sl]
 800e04c:	f1bb 0f00 	cmp.w	fp, #0
 800e050:	d050      	beq.n	800e0f4 <__hexnan+0x130>
 800e052:	454c      	cmp	r4, r9
 800e054:	d206      	bcs.n	800e064 <__hexnan+0xa0>
 800e056:	2d07      	cmp	r5, #7
 800e058:	dc04      	bgt.n	800e064 <__hexnan+0xa0>
 800e05a:	462a      	mov	r2, r5
 800e05c:	4649      	mov	r1, r9
 800e05e:	4620      	mov	r0, r4
 800e060:	f7ff ff8a 	bl	800df78 <L_shift>
 800e064:	4544      	cmp	r4, r8
 800e066:	d934      	bls.n	800e0d2 <__hexnan+0x10e>
 800e068:	f1a8 0204 	sub.w	r2, r8, #4
 800e06c:	4623      	mov	r3, r4
 800e06e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e072:	f842 1f04 	str.w	r1, [r2, #4]!
 800e076:	429f      	cmp	r7, r3
 800e078:	d2f9      	bcs.n	800e06e <__hexnan+0xaa>
 800e07a:	1b3b      	subs	r3, r7, r4
 800e07c:	f023 0303 	bic.w	r3, r3, #3
 800e080:	3304      	adds	r3, #4
 800e082:	3401      	adds	r4, #1
 800e084:	3e03      	subs	r6, #3
 800e086:	42b4      	cmp	r4, r6
 800e088:	bf88      	it	hi
 800e08a:	2304      	movhi	r3, #4
 800e08c:	4443      	add	r3, r8
 800e08e:	2200      	movs	r2, #0
 800e090:	f843 2b04 	str.w	r2, [r3], #4
 800e094:	429f      	cmp	r7, r3
 800e096:	d2fb      	bcs.n	800e090 <__hexnan+0xcc>
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	b91b      	cbnz	r3, 800e0a4 <__hexnan+0xe0>
 800e09c:	4547      	cmp	r7, r8
 800e09e:	d127      	bne.n	800e0f0 <__hexnan+0x12c>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	603b      	str	r3, [r7, #0]
 800e0a4:	2005      	movs	r0, #5
 800e0a6:	e026      	b.n	800e0f6 <__hexnan+0x132>
 800e0a8:	3501      	adds	r5, #1
 800e0aa:	2d08      	cmp	r5, #8
 800e0ac:	f10b 0b01 	add.w	fp, fp, #1
 800e0b0:	dd06      	ble.n	800e0c0 <__hexnan+0xfc>
 800e0b2:	4544      	cmp	r4, r8
 800e0b4:	d9c3      	bls.n	800e03e <__hexnan+0x7a>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e0bc:	2501      	movs	r5, #1
 800e0be:	3c04      	subs	r4, #4
 800e0c0:	6822      	ldr	r2, [r4, #0]
 800e0c2:	f000 000f 	and.w	r0, r0, #15
 800e0c6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e0ca:	6022      	str	r2, [r4, #0]
 800e0cc:	e7b7      	b.n	800e03e <__hexnan+0x7a>
 800e0ce:	2508      	movs	r5, #8
 800e0d0:	e7b5      	b.n	800e03e <__hexnan+0x7a>
 800e0d2:	9b01      	ldr	r3, [sp, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d0df      	beq.n	800e098 <__hexnan+0xd4>
 800e0d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e0dc:	f1c3 0320 	rsb	r3, r3, #32
 800e0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800e0e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e0e8:	401a      	ands	r2, r3
 800e0ea:	f846 2c04 	str.w	r2, [r6, #-4]
 800e0ee:	e7d3      	b.n	800e098 <__hexnan+0xd4>
 800e0f0:	3f04      	subs	r7, #4
 800e0f2:	e7d1      	b.n	800e098 <__hexnan+0xd4>
 800e0f4:	2004      	movs	r0, #4
 800e0f6:	b007      	add	sp, #28
 800e0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0fc <_lseek_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4d07      	ldr	r5, [pc, #28]	; (800e11c <_lseek_r+0x20>)
 800e100:	4604      	mov	r4, r0
 800e102:	4608      	mov	r0, r1
 800e104:	4611      	mov	r1, r2
 800e106:	2200      	movs	r2, #0
 800e108:	602a      	str	r2, [r5, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	f7f4 fd32 	bl	8002b74 <_lseek>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_lseek_r+0x1e>
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	b103      	cbz	r3, 800e11a <_lseek_r+0x1e>
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	20002488 	.word	0x20002488

0800e120 <__ascii_mbtowc>:
 800e120:	b082      	sub	sp, #8
 800e122:	b901      	cbnz	r1, 800e126 <__ascii_mbtowc+0x6>
 800e124:	a901      	add	r1, sp, #4
 800e126:	b142      	cbz	r2, 800e13a <__ascii_mbtowc+0x1a>
 800e128:	b14b      	cbz	r3, 800e13e <__ascii_mbtowc+0x1e>
 800e12a:	7813      	ldrb	r3, [r2, #0]
 800e12c:	600b      	str	r3, [r1, #0]
 800e12e:	7812      	ldrb	r2, [r2, #0]
 800e130:	1e10      	subs	r0, r2, #0
 800e132:	bf18      	it	ne
 800e134:	2001      	movne	r0, #1
 800e136:	b002      	add	sp, #8
 800e138:	4770      	bx	lr
 800e13a:	4610      	mov	r0, r2
 800e13c:	e7fb      	b.n	800e136 <__ascii_mbtowc+0x16>
 800e13e:	f06f 0001 	mvn.w	r0, #1
 800e142:	e7f8      	b.n	800e136 <__ascii_mbtowc+0x16>

0800e144 <_Balloc>:
 800e144:	b570      	push	{r4, r5, r6, lr}
 800e146:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e148:	4604      	mov	r4, r0
 800e14a:	460d      	mov	r5, r1
 800e14c:	b976      	cbnz	r6, 800e16c <_Balloc+0x28>
 800e14e:	2010      	movs	r0, #16
 800e150:	f001 fa76 	bl	800f640 <malloc>
 800e154:	4602      	mov	r2, r0
 800e156:	6260      	str	r0, [r4, #36]	; 0x24
 800e158:	b920      	cbnz	r0, 800e164 <_Balloc+0x20>
 800e15a:	4b18      	ldr	r3, [pc, #96]	; (800e1bc <_Balloc+0x78>)
 800e15c:	4818      	ldr	r0, [pc, #96]	; (800e1c0 <_Balloc+0x7c>)
 800e15e:	2166      	movs	r1, #102	; 0x66
 800e160:	f001 f884 	bl	800f26c <__assert_func>
 800e164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e168:	6006      	str	r6, [r0, #0]
 800e16a:	60c6      	str	r6, [r0, #12]
 800e16c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e16e:	68f3      	ldr	r3, [r6, #12]
 800e170:	b183      	cbz	r3, 800e194 <_Balloc+0x50>
 800e172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e17a:	b9b8      	cbnz	r0, 800e1ac <_Balloc+0x68>
 800e17c:	2101      	movs	r1, #1
 800e17e:	fa01 f605 	lsl.w	r6, r1, r5
 800e182:	1d72      	adds	r2, r6, #5
 800e184:	0092      	lsls	r2, r2, #2
 800e186:	4620      	mov	r0, r4
 800e188:	f000 fc9d 	bl	800eac6 <_calloc_r>
 800e18c:	b160      	cbz	r0, 800e1a8 <_Balloc+0x64>
 800e18e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e192:	e00e      	b.n	800e1b2 <_Balloc+0x6e>
 800e194:	2221      	movs	r2, #33	; 0x21
 800e196:	2104      	movs	r1, #4
 800e198:	4620      	mov	r0, r4
 800e19a:	f000 fc94 	bl	800eac6 <_calloc_r>
 800e19e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1a0:	60f0      	str	r0, [r6, #12]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d1e4      	bne.n	800e172 <_Balloc+0x2e>
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
 800e1ac:	6802      	ldr	r2, [r0, #0]
 800e1ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1b8:	e7f7      	b.n	800e1aa <_Balloc+0x66>
 800e1ba:	bf00      	nop
 800e1bc:	080101ac 	.word	0x080101ac
 800e1c0:	080101c3 	.word	0x080101c3

0800e1c4 <_Bfree>:
 800e1c4:	b570      	push	{r4, r5, r6, lr}
 800e1c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1c8:	4605      	mov	r5, r0
 800e1ca:	460c      	mov	r4, r1
 800e1cc:	b976      	cbnz	r6, 800e1ec <_Bfree+0x28>
 800e1ce:	2010      	movs	r0, #16
 800e1d0:	f001 fa36 	bl	800f640 <malloc>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	6268      	str	r0, [r5, #36]	; 0x24
 800e1d8:	b920      	cbnz	r0, 800e1e4 <_Bfree+0x20>
 800e1da:	4b09      	ldr	r3, [pc, #36]	; (800e200 <_Bfree+0x3c>)
 800e1dc:	4809      	ldr	r0, [pc, #36]	; (800e204 <_Bfree+0x40>)
 800e1de:	218a      	movs	r1, #138	; 0x8a
 800e1e0:	f001 f844 	bl	800f26c <__assert_func>
 800e1e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1e8:	6006      	str	r6, [r0, #0]
 800e1ea:	60c6      	str	r6, [r0, #12]
 800e1ec:	b13c      	cbz	r4, 800e1fe <_Bfree+0x3a>
 800e1ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1f0:	6862      	ldr	r2, [r4, #4]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e1f8:	6021      	str	r1, [r4, #0]
 800e1fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e1fe:	bd70      	pop	{r4, r5, r6, pc}
 800e200:	080101ac 	.word	0x080101ac
 800e204:	080101c3 	.word	0x080101c3

0800e208 <__multadd>:
 800e208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e20c:	690d      	ldr	r5, [r1, #16]
 800e20e:	4607      	mov	r7, r0
 800e210:	460c      	mov	r4, r1
 800e212:	461e      	mov	r6, r3
 800e214:	f101 0c14 	add.w	ip, r1, #20
 800e218:	2000      	movs	r0, #0
 800e21a:	f8dc 3000 	ldr.w	r3, [ip]
 800e21e:	b299      	uxth	r1, r3
 800e220:	fb02 6101 	mla	r1, r2, r1, r6
 800e224:	0c1e      	lsrs	r6, r3, #16
 800e226:	0c0b      	lsrs	r3, r1, #16
 800e228:	fb02 3306 	mla	r3, r2, r6, r3
 800e22c:	b289      	uxth	r1, r1
 800e22e:	3001      	adds	r0, #1
 800e230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e234:	4285      	cmp	r5, r0
 800e236:	f84c 1b04 	str.w	r1, [ip], #4
 800e23a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e23e:	dcec      	bgt.n	800e21a <__multadd+0x12>
 800e240:	b30e      	cbz	r6, 800e286 <__multadd+0x7e>
 800e242:	68a3      	ldr	r3, [r4, #8]
 800e244:	42ab      	cmp	r3, r5
 800e246:	dc19      	bgt.n	800e27c <__multadd+0x74>
 800e248:	6861      	ldr	r1, [r4, #4]
 800e24a:	4638      	mov	r0, r7
 800e24c:	3101      	adds	r1, #1
 800e24e:	f7ff ff79 	bl	800e144 <_Balloc>
 800e252:	4680      	mov	r8, r0
 800e254:	b928      	cbnz	r0, 800e262 <__multadd+0x5a>
 800e256:	4602      	mov	r2, r0
 800e258:	4b0c      	ldr	r3, [pc, #48]	; (800e28c <__multadd+0x84>)
 800e25a:	480d      	ldr	r0, [pc, #52]	; (800e290 <__multadd+0x88>)
 800e25c:	21b5      	movs	r1, #181	; 0xb5
 800e25e:	f001 f805 	bl	800f26c <__assert_func>
 800e262:	6922      	ldr	r2, [r4, #16]
 800e264:	3202      	adds	r2, #2
 800e266:	f104 010c 	add.w	r1, r4, #12
 800e26a:	0092      	lsls	r2, r2, #2
 800e26c:	300c      	adds	r0, #12
 800e26e:	f7fe fa2f 	bl	800c6d0 <memcpy>
 800e272:	4621      	mov	r1, r4
 800e274:	4638      	mov	r0, r7
 800e276:	f7ff ffa5 	bl	800e1c4 <_Bfree>
 800e27a:	4644      	mov	r4, r8
 800e27c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e280:	3501      	adds	r5, #1
 800e282:	615e      	str	r6, [r3, #20]
 800e284:	6125      	str	r5, [r4, #16]
 800e286:	4620      	mov	r0, r4
 800e288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e28c:	08010121 	.word	0x08010121
 800e290:	080101c3 	.word	0x080101c3

0800e294 <__s2b>:
 800e294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e298:	460c      	mov	r4, r1
 800e29a:	4615      	mov	r5, r2
 800e29c:	461f      	mov	r7, r3
 800e29e:	2209      	movs	r2, #9
 800e2a0:	3308      	adds	r3, #8
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	db09      	blt.n	800e2c4 <__s2b+0x30>
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f7ff ff47 	bl	800e144 <_Balloc>
 800e2b6:	b940      	cbnz	r0, 800e2ca <__s2b+0x36>
 800e2b8:	4602      	mov	r2, r0
 800e2ba:	4b19      	ldr	r3, [pc, #100]	; (800e320 <__s2b+0x8c>)
 800e2bc:	4819      	ldr	r0, [pc, #100]	; (800e324 <__s2b+0x90>)
 800e2be:	21ce      	movs	r1, #206	; 0xce
 800e2c0:	f000 ffd4 	bl	800f26c <__assert_func>
 800e2c4:	0052      	lsls	r2, r2, #1
 800e2c6:	3101      	adds	r1, #1
 800e2c8:	e7f0      	b.n	800e2ac <__s2b+0x18>
 800e2ca:	9b08      	ldr	r3, [sp, #32]
 800e2cc:	6143      	str	r3, [r0, #20]
 800e2ce:	2d09      	cmp	r5, #9
 800e2d0:	f04f 0301 	mov.w	r3, #1
 800e2d4:	6103      	str	r3, [r0, #16]
 800e2d6:	dd16      	ble.n	800e306 <__s2b+0x72>
 800e2d8:	f104 0909 	add.w	r9, r4, #9
 800e2dc:	46c8      	mov	r8, r9
 800e2de:	442c      	add	r4, r5
 800e2e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e2e4:	4601      	mov	r1, r0
 800e2e6:	3b30      	subs	r3, #48	; 0x30
 800e2e8:	220a      	movs	r2, #10
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f7ff ff8c 	bl	800e208 <__multadd>
 800e2f0:	45a0      	cmp	r8, r4
 800e2f2:	d1f5      	bne.n	800e2e0 <__s2b+0x4c>
 800e2f4:	f1a5 0408 	sub.w	r4, r5, #8
 800e2f8:	444c      	add	r4, r9
 800e2fa:	1b2d      	subs	r5, r5, r4
 800e2fc:	1963      	adds	r3, r4, r5
 800e2fe:	42bb      	cmp	r3, r7
 800e300:	db04      	blt.n	800e30c <__s2b+0x78>
 800e302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e306:	340a      	adds	r4, #10
 800e308:	2509      	movs	r5, #9
 800e30a:	e7f6      	b.n	800e2fa <__s2b+0x66>
 800e30c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e310:	4601      	mov	r1, r0
 800e312:	3b30      	subs	r3, #48	; 0x30
 800e314:	220a      	movs	r2, #10
 800e316:	4630      	mov	r0, r6
 800e318:	f7ff ff76 	bl	800e208 <__multadd>
 800e31c:	e7ee      	b.n	800e2fc <__s2b+0x68>
 800e31e:	bf00      	nop
 800e320:	08010121 	.word	0x08010121
 800e324:	080101c3 	.word	0x080101c3

0800e328 <__hi0bits>:
 800e328:	0c03      	lsrs	r3, r0, #16
 800e32a:	041b      	lsls	r3, r3, #16
 800e32c:	b9d3      	cbnz	r3, 800e364 <__hi0bits+0x3c>
 800e32e:	0400      	lsls	r0, r0, #16
 800e330:	2310      	movs	r3, #16
 800e332:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e336:	bf04      	itt	eq
 800e338:	0200      	lsleq	r0, r0, #8
 800e33a:	3308      	addeq	r3, #8
 800e33c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e340:	bf04      	itt	eq
 800e342:	0100      	lsleq	r0, r0, #4
 800e344:	3304      	addeq	r3, #4
 800e346:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e34a:	bf04      	itt	eq
 800e34c:	0080      	lsleq	r0, r0, #2
 800e34e:	3302      	addeq	r3, #2
 800e350:	2800      	cmp	r0, #0
 800e352:	db05      	blt.n	800e360 <__hi0bits+0x38>
 800e354:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e358:	f103 0301 	add.w	r3, r3, #1
 800e35c:	bf08      	it	eq
 800e35e:	2320      	moveq	r3, #32
 800e360:	4618      	mov	r0, r3
 800e362:	4770      	bx	lr
 800e364:	2300      	movs	r3, #0
 800e366:	e7e4      	b.n	800e332 <__hi0bits+0xa>

0800e368 <__lo0bits>:
 800e368:	6803      	ldr	r3, [r0, #0]
 800e36a:	f013 0207 	ands.w	r2, r3, #7
 800e36e:	4601      	mov	r1, r0
 800e370:	d00b      	beq.n	800e38a <__lo0bits+0x22>
 800e372:	07da      	lsls	r2, r3, #31
 800e374:	d423      	bmi.n	800e3be <__lo0bits+0x56>
 800e376:	0798      	lsls	r0, r3, #30
 800e378:	bf49      	itett	mi
 800e37a:	085b      	lsrmi	r3, r3, #1
 800e37c:	089b      	lsrpl	r3, r3, #2
 800e37e:	2001      	movmi	r0, #1
 800e380:	600b      	strmi	r3, [r1, #0]
 800e382:	bf5c      	itt	pl
 800e384:	600b      	strpl	r3, [r1, #0]
 800e386:	2002      	movpl	r0, #2
 800e388:	4770      	bx	lr
 800e38a:	b298      	uxth	r0, r3
 800e38c:	b9a8      	cbnz	r0, 800e3ba <__lo0bits+0x52>
 800e38e:	0c1b      	lsrs	r3, r3, #16
 800e390:	2010      	movs	r0, #16
 800e392:	b2da      	uxtb	r2, r3
 800e394:	b90a      	cbnz	r2, 800e39a <__lo0bits+0x32>
 800e396:	3008      	adds	r0, #8
 800e398:	0a1b      	lsrs	r3, r3, #8
 800e39a:	071a      	lsls	r2, r3, #28
 800e39c:	bf04      	itt	eq
 800e39e:	091b      	lsreq	r3, r3, #4
 800e3a0:	3004      	addeq	r0, #4
 800e3a2:	079a      	lsls	r2, r3, #30
 800e3a4:	bf04      	itt	eq
 800e3a6:	089b      	lsreq	r3, r3, #2
 800e3a8:	3002      	addeq	r0, #2
 800e3aa:	07da      	lsls	r2, r3, #31
 800e3ac:	d403      	bmi.n	800e3b6 <__lo0bits+0x4e>
 800e3ae:	085b      	lsrs	r3, r3, #1
 800e3b0:	f100 0001 	add.w	r0, r0, #1
 800e3b4:	d005      	beq.n	800e3c2 <__lo0bits+0x5a>
 800e3b6:	600b      	str	r3, [r1, #0]
 800e3b8:	4770      	bx	lr
 800e3ba:	4610      	mov	r0, r2
 800e3bc:	e7e9      	b.n	800e392 <__lo0bits+0x2a>
 800e3be:	2000      	movs	r0, #0
 800e3c0:	4770      	bx	lr
 800e3c2:	2020      	movs	r0, #32
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <__i2b>:
 800e3c8:	b510      	push	{r4, lr}
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	f7ff feb9 	bl	800e144 <_Balloc>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	b928      	cbnz	r0, 800e3e2 <__i2b+0x1a>
 800e3d6:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <__i2b+0x24>)
 800e3d8:	4805      	ldr	r0, [pc, #20]	; (800e3f0 <__i2b+0x28>)
 800e3da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e3de:	f000 ff45 	bl	800f26c <__assert_func>
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	6144      	str	r4, [r0, #20]
 800e3e6:	6103      	str	r3, [r0, #16]
 800e3e8:	bd10      	pop	{r4, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08010121 	.word	0x08010121
 800e3f0:	080101c3 	.word	0x080101c3

0800e3f4 <__multiply>:
 800e3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	4691      	mov	r9, r2
 800e3fa:	690a      	ldr	r2, [r1, #16]
 800e3fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e400:	429a      	cmp	r2, r3
 800e402:	bfb8      	it	lt
 800e404:	460b      	movlt	r3, r1
 800e406:	460c      	mov	r4, r1
 800e408:	bfbc      	itt	lt
 800e40a:	464c      	movlt	r4, r9
 800e40c:	4699      	movlt	r9, r3
 800e40e:	6927      	ldr	r7, [r4, #16]
 800e410:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e414:	68a3      	ldr	r3, [r4, #8]
 800e416:	6861      	ldr	r1, [r4, #4]
 800e418:	eb07 060a 	add.w	r6, r7, sl
 800e41c:	42b3      	cmp	r3, r6
 800e41e:	b085      	sub	sp, #20
 800e420:	bfb8      	it	lt
 800e422:	3101      	addlt	r1, #1
 800e424:	f7ff fe8e 	bl	800e144 <_Balloc>
 800e428:	b930      	cbnz	r0, 800e438 <__multiply+0x44>
 800e42a:	4602      	mov	r2, r0
 800e42c:	4b44      	ldr	r3, [pc, #272]	; (800e540 <__multiply+0x14c>)
 800e42e:	4845      	ldr	r0, [pc, #276]	; (800e544 <__multiply+0x150>)
 800e430:	f240 115d 	movw	r1, #349	; 0x15d
 800e434:	f000 ff1a 	bl	800f26c <__assert_func>
 800e438:	f100 0514 	add.w	r5, r0, #20
 800e43c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e440:	462b      	mov	r3, r5
 800e442:	2200      	movs	r2, #0
 800e444:	4543      	cmp	r3, r8
 800e446:	d321      	bcc.n	800e48c <__multiply+0x98>
 800e448:	f104 0314 	add.w	r3, r4, #20
 800e44c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e450:	f109 0314 	add.w	r3, r9, #20
 800e454:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e458:	9202      	str	r2, [sp, #8]
 800e45a:	1b3a      	subs	r2, r7, r4
 800e45c:	3a15      	subs	r2, #21
 800e45e:	f022 0203 	bic.w	r2, r2, #3
 800e462:	3204      	adds	r2, #4
 800e464:	f104 0115 	add.w	r1, r4, #21
 800e468:	428f      	cmp	r7, r1
 800e46a:	bf38      	it	cc
 800e46c:	2204      	movcc	r2, #4
 800e46e:	9201      	str	r2, [sp, #4]
 800e470:	9a02      	ldr	r2, [sp, #8]
 800e472:	9303      	str	r3, [sp, #12]
 800e474:	429a      	cmp	r2, r3
 800e476:	d80c      	bhi.n	800e492 <__multiply+0x9e>
 800e478:	2e00      	cmp	r6, #0
 800e47a:	dd03      	ble.n	800e484 <__multiply+0x90>
 800e47c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e480:	2b00      	cmp	r3, #0
 800e482:	d05a      	beq.n	800e53a <__multiply+0x146>
 800e484:	6106      	str	r6, [r0, #16]
 800e486:	b005      	add	sp, #20
 800e488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48c:	f843 2b04 	str.w	r2, [r3], #4
 800e490:	e7d8      	b.n	800e444 <__multiply+0x50>
 800e492:	f8b3 a000 	ldrh.w	sl, [r3]
 800e496:	f1ba 0f00 	cmp.w	sl, #0
 800e49a:	d024      	beq.n	800e4e6 <__multiply+0xf2>
 800e49c:	f104 0e14 	add.w	lr, r4, #20
 800e4a0:	46a9      	mov	r9, r5
 800e4a2:	f04f 0c00 	mov.w	ip, #0
 800e4a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e4aa:	f8d9 1000 	ldr.w	r1, [r9]
 800e4ae:	fa1f fb82 	uxth.w	fp, r2
 800e4b2:	b289      	uxth	r1, r1
 800e4b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800e4b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e4bc:	f8d9 2000 	ldr.w	r2, [r9]
 800e4c0:	4461      	add	r1, ip
 800e4c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e4ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e4ce:	b289      	uxth	r1, r1
 800e4d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e4d4:	4577      	cmp	r7, lr
 800e4d6:	f849 1b04 	str.w	r1, [r9], #4
 800e4da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e4de:	d8e2      	bhi.n	800e4a6 <__multiply+0xb2>
 800e4e0:	9a01      	ldr	r2, [sp, #4]
 800e4e2:	f845 c002 	str.w	ip, [r5, r2]
 800e4e6:	9a03      	ldr	r2, [sp, #12]
 800e4e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	f1b9 0f00 	cmp.w	r9, #0
 800e4f2:	d020      	beq.n	800e536 <__multiply+0x142>
 800e4f4:	6829      	ldr	r1, [r5, #0]
 800e4f6:	f104 0c14 	add.w	ip, r4, #20
 800e4fa:	46ae      	mov	lr, r5
 800e4fc:	f04f 0a00 	mov.w	sl, #0
 800e500:	f8bc b000 	ldrh.w	fp, [ip]
 800e504:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e508:	fb09 220b 	mla	r2, r9, fp, r2
 800e50c:	4492      	add	sl, r2
 800e50e:	b289      	uxth	r1, r1
 800e510:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e514:	f84e 1b04 	str.w	r1, [lr], #4
 800e518:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e51c:	f8be 1000 	ldrh.w	r1, [lr]
 800e520:	0c12      	lsrs	r2, r2, #16
 800e522:	fb09 1102 	mla	r1, r9, r2, r1
 800e526:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e52a:	4567      	cmp	r7, ip
 800e52c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e530:	d8e6      	bhi.n	800e500 <__multiply+0x10c>
 800e532:	9a01      	ldr	r2, [sp, #4]
 800e534:	50a9      	str	r1, [r5, r2]
 800e536:	3504      	adds	r5, #4
 800e538:	e79a      	b.n	800e470 <__multiply+0x7c>
 800e53a:	3e01      	subs	r6, #1
 800e53c:	e79c      	b.n	800e478 <__multiply+0x84>
 800e53e:	bf00      	nop
 800e540:	08010121 	.word	0x08010121
 800e544:	080101c3 	.word	0x080101c3

0800e548 <__pow5mult>:
 800e548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e54c:	4615      	mov	r5, r2
 800e54e:	f012 0203 	ands.w	r2, r2, #3
 800e552:	4606      	mov	r6, r0
 800e554:	460f      	mov	r7, r1
 800e556:	d007      	beq.n	800e568 <__pow5mult+0x20>
 800e558:	4c25      	ldr	r4, [pc, #148]	; (800e5f0 <__pow5mult+0xa8>)
 800e55a:	3a01      	subs	r2, #1
 800e55c:	2300      	movs	r3, #0
 800e55e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e562:	f7ff fe51 	bl	800e208 <__multadd>
 800e566:	4607      	mov	r7, r0
 800e568:	10ad      	asrs	r5, r5, #2
 800e56a:	d03d      	beq.n	800e5e8 <__pow5mult+0xa0>
 800e56c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e56e:	b97c      	cbnz	r4, 800e590 <__pow5mult+0x48>
 800e570:	2010      	movs	r0, #16
 800e572:	f001 f865 	bl	800f640 <malloc>
 800e576:	4602      	mov	r2, r0
 800e578:	6270      	str	r0, [r6, #36]	; 0x24
 800e57a:	b928      	cbnz	r0, 800e588 <__pow5mult+0x40>
 800e57c:	4b1d      	ldr	r3, [pc, #116]	; (800e5f4 <__pow5mult+0xac>)
 800e57e:	481e      	ldr	r0, [pc, #120]	; (800e5f8 <__pow5mult+0xb0>)
 800e580:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e584:	f000 fe72 	bl	800f26c <__assert_func>
 800e588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e58c:	6004      	str	r4, [r0, #0]
 800e58e:	60c4      	str	r4, [r0, #12]
 800e590:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e598:	b94c      	cbnz	r4, 800e5ae <__pow5mult+0x66>
 800e59a:	f240 2171 	movw	r1, #625	; 0x271
 800e59e:	4630      	mov	r0, r6
 800e5a0:	f7ff ff12 	bl	800e3c8 <__i2b>
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	6003      	str	r3, [r0, #0]
 800e5ae:	f04f 0900 	mov.w	r9, #0
 800e5b2:	07eb      	lsls	r3, r5, #31
 800e5b4:	d50a      	bpl.n	800e5cc <__pow5mult+0x84>
 800e5b6:	4639      	mov	r1, r7
 800e5b8:	4622      	mov	r2, r4
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f7ff ff1a 	bl	800e3f4 <__multiply>
 800e5c0:	4639      	mov	r1, r7
 800e5c2:	4680      	mov	r8, r0
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f7ff fdfd 	bl	800e1c4 <_Bfree>
 800e5ca:	4647      	mov	r7, r8
 800e5cc:	106d      	asrs	r5, r5, #1
 800e5ce:	d00b      	beq.n	800e5e8 <__pow5mult+0xa0>
 800e5d0:	6820      	ldr	r0, [r4, #0]
 800e5d2:	b938      	cbnz	r0, 800e5e4 <__pow5mult+0x9c>
 800e5d4:	4622      	mov	r2, r4
 800e5d6:	4621      	mov	r1, r4
 800e5d8:	4630      	mov	r0, r6
 800e5da:	f7ff ff0b 	bl	800e3f4 <__multiply>
 800e5de:	6020      	str	r0, [r4, #0]
 800e5e0:	f8c0 9000 	str.w	r9, [r0]
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	e7e4      	b.n	800e5b2 <__pow5mult+0x6a>
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5ee:	bf00      	nop
 800e5f0:	08010310 	.word	0x08010310
 800e5f4:	080101ac 	.word	0x080101ac
 800e5f8:	080101c3 	.word	0x080101c3

0800e5fc <__lshift>:
 800e5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e600:	460c      	mov	r4, r1
 800e602:	6849      	ldr	r1, [r1, #4]
 800e604:	6923      	ldr	r3, [r4, #16]
 800e606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e60a:	68a3      	ldr	r3, [r4, #8]
 800e60c:	4607      	mov	r7, r0
 800e60e:	4691      	mov	r9, r2
 800e610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e614:	f108 0601 	add.w	r6, r8, #1
 800e618:	42b3      	cmp	r3, r6
 800e61a:	db0b      	blt.n	800e634 <__lshift+0x38>
 800e61c:	4638      	mov	r0, r7
 800e61e:	f7ff fd91 	bl	800e144 <_Balloc>
 800e622:	4605      	mov	r5, r0
 800e624:	b948      	cbnz	r0, 800e63a <__lshift+0x3e>
 800e626:	4602      	mov	r2, r0
 800e628:	4b2a      	ldr	r3, [pc, #168]	; (800e6d4 <__lshift+0xd8>)
 800e62a:	482b      	ldr	r0, [pc, #172]	; (800e6d8 <__lshift+0xdc>)
 800e62c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e630:	f000 fe1c 	bl	800f26c <__assert_func>
 800e634:	3101      	adds	r1, #1
 800e636:	005b      	lsls	r3, r3, #1
 800e638:	e7ee      	b.n	800e618 <__lshift+0x1c>
 800e63a:	2300      	movs	r3, #0
 800e63c:	f100 0114 	add.w	r1, r0, #20
 800e640:	f100 0210 	add.w	r2, r0, #16
 800e644:	4618      	mov	r0, r3
 800e646:	4553      	cmp	r3, sl
 800e648:	db37      	blt.n	800e6ba <__lshift+0xbe>
 800e64a:	6920      	ldr	r0, [r4, #16]
 800e64c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e650:	f104 0314 	add.w	r3, r4, #20
 800e654:	f019 091f 	ands.w	r9, r9, #31
 800e658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e65c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e660:	d02f      	beq.n	800e6c2 <__lshift+0xc6>
 800e662:	f1c9 0e20 	rsb	lr, r9, #32
 800e666:	468a      	mov	sl, r1
 800e668:	f04f 0c00 	mov.w	ip, #0
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	fa02 f209 	lsl.w	r2, r2, r9
 800e672:	ea42 020c 	orr.w	r2, r2, ip
 800e676:	f84a 2b04 	str.w	r2, [sl], #4
 800e67a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e67e:	4298      	cmp	r0, r3
 800e680:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e684:	d8f2      	bhi.n	800e66c <__lshift+0x70>
 800e686:	1b03      	subs	r3, r0, r4
 800e688:	3b15      	subs	r3, #21
 800e68a:	f023 0303 	bic.w	r3, r3, #3
 800e68e:	3304      	adds	r3, #4
 800e690:	f104 0215 	add.w	r2, r4, #21
 800e694:	4290      	cmp	r0, r2
 800e696:	bf38      	it	cc
 800e698:	2304      	movcc	r3, #4
 800e69a:	f841 c003 	str.w	ip, [r1, r3]
 800e69e:	f1bc 0f00 	cmp.w	ip, #0
 800e6a2:	d001      	beq.n	800e6a8 <__lshift+0xac>
 800e6a4:	f108 0602 	add.w	r6, r8, #2
 800e6a8:	3e01      	subs	r6, #1
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	612e      	str	r6, [r5, #16]
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	f7ff fd88 	bl	800e1c4 <_Bfree>
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6be:	3301      	adds	r3, #1
 800e6c0:	e7c1      	b.n	800e646 <__lshift+0x4a>
 800e6c2:	3904      	subs	r1, #4
 800e6c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6cc:	4298      	cmp	r0, r3
 800e6ce:	d8f9      	bhi.n	800e6c4 <__lshift+0xc8>
 800e6d0:	e7ea      	b.n	800e6a8 <__lshift+0xac>
 800e6d2:	bf00      	nop
 800e6d4:	08010121 	.word	0x08010121
 800e6d8:	080101c3 	.word	0x080101c3

0800e6dc <__mcmp>:
 800e6dc:	b530      	push	{r4, r5, lr}
 800e6de:	6902      	ldr	r2, [r0, #16]
 800e6e0:	690c      	ldr	r4, [r1, #16]
 800e6e2:	1b12      	subs	r2, r2, r4
 800e6e4:	d10e      	bne.n	800e704 <__mcmp+0x28>
 800e6e6:	f100 0314 	add.w	r3, r0, #20
 800e6ea:	3114      	adds	r1, #20
 800e6ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e6f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e6f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e6f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e6fc:	42a5      	cmp	r5, r4
 800e6fe:	d003      	beq.n	800e708 <__mcmp+0x2c>
 800e700:	d305      	bcc.n	800e70e <__mcmp+0x32>
 800e702:	2201      	movs	r2, #1
 800e704:	4610      	mov	r0, r2
 800e706:	bd30      	pop	{r4, r5, pc}
 800e708:	4283      	cmp	r3, r0
 800e70a:	d3f3      	bcc.n	800e6f4 <__mcmp+0x18>
 800e70c:	e7fa      	b.n	800e704 <__mcmp+0x28>
 800e70e:	f04f 32ff 	mov.w	r2, #4294967295
 800e712:	e7f7      	b.n	800e704 <__mcmp+0x28>

0800e714 <__mdiff>:
 800e714:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e718:	460c      	mov	r4, r1
 800e71a:	4606      	mov	r6, r0
 800e71c:	4611      	mov	r1, r2
 800e71e:	4620      	mov	r0, r4
 800e720:	4690      	mov	r8, r2
 800e722:	f7ff ffdb 	bl	800e6dc <__mcmp>
 800e726:	1e05      	subs	r5, r0, #0
 800e728:	d110      	bne.n	800e74c <__mdiff+0x38>
 800e72a:	4629      	mov	r1, r5
 800e72c:	4630      	mov	r0, r6
 800e72e:	f7ff fd09 	bl	800e144 <_Balloc>
 800e732:	b930      	cbnz	r0, 800e742 <__mdiff+0x2e>
 800e734:	4b3a      	ldr	r3, [pc, #232]	; (800e820 <__mdiff+0x10c>)
 800e736:	4602      	mov	r2, r0
 800e738:	f240 2132 	movw	r1, #562	; 0x232
 800e73c:	4839      	ldr	r0, [pc, #228]	; (800e824 <__mdiff+0x110>)
 800e73e:	f000 fd95 	bl	800f26c <__assert_func>
 800e742:	2301      	movs	r3, #1
 800e744:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e74c:	bfa4      	itt	ge
 800e74e:	4643      	movge	r3, r8
 800e750:	46a0      	movge	r8, r4
 800e752:	4630      	mov	r0, r6
 800e754:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e758:	bfa6      	itte	ge
 800e75a:	461c      	movge	r4, r3
 800e75c:	2500      	movge	r5, #0
 800e75e:	2501      	movlt	r5, #1
 800e760:	f7ff fcf0 	bl	800e144 <_Balloc>
 800e764:	b920      	cbnz	r0, 800e770 <__mdiff+0x5c>
 800e766:	4b2e      	ldr	r3, [pc, #184]	; (800e820 <__mdiff+0x10c>)
 800e768:	4602      	mov	r2, r0
 800e76a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e76e:	e7e5      	b.n	800e73c <__mdiff+0x28>
 800e770:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e774:	6926      	ldr	r6, [r4, #16]
 800e776:	60c5      	str	r5, [r0, #12]
 800e778:	f104 0914 	add.w	r9, r4, #20
 800e77c:	f108 0514 	add.w	r5, r8, #20
 800e780:	f100 0e14 	add.w	lr, r0, #20
 800e784:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e788:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e78c:	f108 0210 	add.w	r2, r8, #16
 800e790:	46f2      	mov	sl, lr
 800e792:	2100      	movs	r1, #0
 800e794:	f859 3b04 	ldr.w	r3, [r9], #4
 800e798:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e79c:	fa1f f883 	uxth.w	r8, r3
 800e7a0:	fa11 f18b 	uxtah	r1, r1, fp
 800e7a4:	0c1b      	lsrs	r3, r3, #16
 800e7a6:	eba1 0808 	sub.w	r8, r1, r8
 800e7aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e7ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e7b2:	fa1f f888 	uxth.w	r8, r8
 800e7b6:	1419      	asrs	r1, r3, #16
 800e7b8:	454e      	cmp	r6, r9
 800e7ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e7be:	f84a 3b04 	str.w	r3, [sl], #4
 800e7c2:	d8e7      	bhi.n	800e794 <__mdiff+0x80>
 800e7c4:	1b33      	subs	r3, r6, r4
 800e7c6:	3b15      	subs	r3, #21
 800e7c8:	f023 0303 	bic.w	r3, r3, #3
 800e7cc:	3304      	adds	r3, #4
 800e7ce:	3415      	adds	r4, #21
 800e7d0:	42a6      	cmp	r6, r4
 800e7d2:	bf38      	it	cc
 800e7d4:	2304      	movcc	r3, #4
 800e7d6:	441d      	add	r5, r3
 800e7d8:	4473      	add	r3, lr
 800e7da:	469e      	mov	lr, r3
 800e7dc:	462e      	mov	r6, r5
 800e7de:	4566      	cmp	r6, ip
 800e7e0:	d30e      	bcc.n	800e800 <__mdiff+0xec>
 800e7e2:	f10c 0203 	add.w	r2, ip, #3
 800e7e6:	1b52      	subs	r2, r2, r5
 800e7e8:	f022 0203 	bic.w	r2, r2, #3
 800e7ec:	3d03      	subs	r5, #3
 800e7ee:	45ac      	cmp	ip, r5
 800e7f0:	bf38      	it	cc
 800e7f2:	2200      	movcc	r2, #0
 800e7f4:	441a      	add	r2, r3
 800e7f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e7fa:	b17b      	cbz	r3, 800e81c <__mdiff+0x108>
 800e7fc:	6107      	str	r7, [r0, #16]
 800e7fe:	e7a3      	b.n	800e748 <__mdiff+0x34>
 800e800:	f856 8b04 	ldr.w	r8, [r6], #4
 800e804:	fa11 f288 	uxtah	r2, r1, r8
 800e808:	1414      	asrs	r4, r2, #16
 800e80a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e80e:	b292      	uxth	r2, r2
 800e810:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e814:	f84e 2b04 	str.w	r2, [lr], #4
 800e818:	1421      	asrs	r1, r4, #16
 800e81a:	e7e0      	b.n	800e7de <__mdiff+0xca>
 800e81c:	3f01      	subs	r7, #1
 800e81e:	e7ea      	b.n	800e7f6 <__mdiff+0xe2>
 800e820:	08010121 	.word	0x08010121
 800e824:	080101c3 	.word	0x080101c3

0800e828 <__ulp>:
 800e828:	b082      	sub	sp, #8
 800e82a:	ed8d 0b00 	vstr	d0, [sp]
 800e82e:	9b01      	ldr	r3, [sp, #4]
 800e830:	4912      	ldr	r1, [pc, #72]	; (800e87c <__ulp+0x54>)
 800e832:	4019      	ands	r1, r3
 800e834:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e838:	2900      	cmp	r1, #0
 800e83a:	dd05      	ble.n	800e848 <__ulp+0x20>
 800e83c:	2200      	movs	r2, #0
 800e83e:	460b      	mov	r3, r1
 800e840:	ec43 2b10 	vmov	d0, r2, r3
 800e844:	b002      	add	sp, #8
 800e846:	4770      	bx	lr
 800e848:	4249      	negs	r1, r1
 800e84a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e84e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e852:	f04f 0200 	mov.w	r2, #0
 800e856:	f04f 0300 	mov.w	r3, #0
 800e85a:	da04      	bge.n	800e866 <__ulp+0x3e>
 800e85c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e860:	fa41 f300 	asr.w	r3, r1, r0
 800e864:	e7ec      	b.n	800e840 <__ulp+0x18>
 800e866:	f1a0 0114 	sub.w	r1, r0, #20
 800e86a:	291e      	cmp	r1, #30
 800e86c:	bfda      	itte	le
 800e86e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e872:	fa20 f101 	lsrle.w	r1, r0, r1
 800e876:	2101      	movgt	r1, #1
 800e878:	460a      	mov	r2, r1
 800e87a:	e7e1      	b.n	800e840 <__ulp+0x18>
 800e87c:	7ff00000 	.word	0x7ff00000

0800e880 <__b2d>:
 800e880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e882:	6905      	ldr	r5, [r0, #16]
 800e884:	f100 0714 	add.w	r7, r0, #20
 800e888:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e88c:	1f2e      	subs	r6, r5, #4
 800e88e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e892:	4620      	mov	r0, r4
 800e894:	f7ff fd48 	bl	800e328 <__hi0bits>
 800e898:	f1c0 0320 	rsb	r3, r0, #32
 800e89c:	280a      	cmp	r0, #10
 800e89e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e91c <__b2d+0x9c>
 800e8a2:	600b      	str	r3, [r1, #0]
 800e8a4:	dc14      	bgt.n	800e8d0 <__b2d+0x50>
 800e8a6:	f1c0 0e0b 	rsb	lr, r0, #11
 800e8aa:	fa24 f10e 	lsr.w	r1, r4, lr
 800e8ae:	42b7      	cmp	r7, r6
 800e8b0:	ea41 030c 	orr.w	r3, r1, ip
 800e8b4:	bf34      	ite	cc
 800e8b6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8ba:	2100      	movcs	r1, #0
 800e8bc:	3015      	adds	r0, #21
 800e8be:	fa04 f000 	lsl.w	r0, r4, r0
 800e8c2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e8c6:	ea40 0201 	orr.w	r2, r0, r1
 800e8ca:	ec43 2b10 	vmov	d0, r2, r3
 800e8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8d0:	42b7      	cmp	r7, r6
 800e8d2:	bf3a      	itte	cc
 800e8d4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e8d8:	f1a5 0608 	subcc.w	r6, r5, #8
 800e8dc:	2100      	movcs	r1, #0
 800e8de:	380b      	subs	r0, #11
 800e8e0:	d017      	beq.n	800e912 <__b2d+0x92>
 800e8e2:	f1c0 0c20 	rsb	ip, r0, #32
 800e8e6:	fa04 f500 	lsl.w	r5, r4, r0
 800e8ea:	42be      	cmp	r6, r7
 800e8ec:	fa21 f40c 	lsr.w	r4, r1, ip
 800e8f0:	ea45 0504 	orr.w	r5, r5, r4
 800e8f4:	bf8c      	ite	hi
 800e8f6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e8fa:	2400      	movls	r4, #0
 800e8fc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e900:	fa01 f000 	lsl.w	r0, r1, r0
 800e904:	fa24 f40c 	lsr.w	r4, r4, ip
 800e908:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e90c:	ea40 0204 	orr.w	r2, r0, r4
 800e910:	e7db      	b.n	800e8ca <__b2d+0x4a>
 800e912:	ea44 030c 	orr.w	r3, r4, ip
 800e916:	460a      	mov	r2, r1
 800e918:	e7d7      	b.n	800e8ca <__b2d+0x4a>
 800e91a:	bf00      	nop
 800e91c:	3ff00000 	.word	0x3ff00000

0800e920 <__d2b>:
 800e920:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e924:	4689      	mov	r9, r1
 800e926:	2101      	movs	r1, #1
 800e928:	ec57 6b10 	vmov	r6, r7, d0
 800e92c:	4690      	mov	r8, r2
 800e92e:	f7ff fc09 	bl	800e144 <_Balloc>
 800e932:	4604      	mov	r4, r0
 800e934:	b930      	cbnz	r0, 800e944 <__d2b+0x24>
 800e936:	4602      	mov	r2, r0
 800e938:	4b25      	ldr	r3, [pc, #148]	; (800e9d0 <__d2b+0xb0>)
 800e93a:	4826      	ldr	r0, [pc, #152]	; (800e9d4 <__d2b+0xb4>)
 800e93c:	f240 310a 	movw	r1, #778	; 0x30a
 800e940:	f000 fc94 	bl	800f26c <__assert_func>
 800e944:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e948:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e94c:	bb35      	cbnz	r5, 800e99c <__d2b+0x7c>
 800e94e:	2e00      	cmp	r6, #0
 800e950:	9301      	str	r3, [sp, #4]
 800e952:	d028      	beq.n	800e9a6 <__d2b+0x86>
 800e954:	4668      	mov	r0, sp
 800e956:	9600      	str	r6, [sp, #0]
 800e958:	f7ff fd06 	bl	800e368 <__lo0bits>
 800e95c:	9900      	ldr	r1, [sp, #0]
 800e95e:	b300      	cbz	r0, 800e9a2 <__d2b+0x82>
 800e960:	9a01      	ldr	r2, [sp, #4]
 800e962:	f1c0 0320 	rsb	r3, r0, #32
 800e966:	fa02 f303 	lsl.w	r3, r2, r3
 800e96a:	430b      	orrs	r3, r1
 800e96c:	40c2      	lsrs	r2, r0
 800e96e:	6163      	str	r3, [r4, #20]
 800e970:	9201      	str	r2, [sp, #4]
 800e972:	9b01      	ldr	r3, [sp, #4]
 800e974:	61a3      	str	r3, [r4, #24]
 800e976:	2b00      	cmp	r3, #0
 800e978:	bf14      	ite	ne
 800e97a:	2202      	movne	r2, #2
 800e97c:	2201      	moveq	r2, #1
 800e97e:	6122      	str	r2, [r4, #16]
 800e980:	b1d5      	cbz	r5, 800e9b8 <__d2b+0x98>
 800e982:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e986:	4405      	add	r5, r0
 800e988:	f8c9 5000 	str.w	r5, [r9]
 800e98c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e990:	f8c8 0000 	str.w	r0, [r8]
 800e994:	4620      	mov	r0, r4
 800e996:	b003      	add	sp, #12
 800e998:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e99c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9a0:	e7d5      	b.n	800e94e <__d2b+0x2e>
 800e9a2:	6161      	str	r1, [r4, #20]
 800e9a4:	e7e5      	b.n	800e972 <__d2b+0x52>
 800e9a6:	a801      	add	r0, sp, #4
 800e9a8:	f7ff fcde 	bl	800e368 <__lo0bits>
 800e9ac:	9b01      	ldr	r3, [sp, #4]
 800e9ae:	6163      	str	r3, [r4, #20]
 800e9b0:	2201      	movs	r2, #1
 800e9b2:	6122      	str	r2, [r4, #16]
 800e9b4:	3020      	adds	r0, #32
 800e9b6:	e7e3      	b.n	800e980 <__d2b+0x60>
 800e9b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e9bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e9c0:	f8c9 0000 	str.w	r0, [r9]
 800e9c4:	6918      	ldr	r0, [r3, #16]
 800e9c6:	f7ff fcaf 	bl	800e328 <__hi0bits>
 800e9ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e9ce:	e7df      	b.n	800e990 <__d2b+0x70>
 800e9d0:	08010121 	.word	0x08010121
 800e9d4:	080101c3 	.word	0x080101c3

0800e9d8 <__ratio>:
 800e9d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	4688      	mov	r8, r1
 800e9de:	4669      	mov	r1, sp
 800e9e0:	4681      	mov	r9, r0
 800e9e2:	f7ff ff4d 	bl	800e880 <__b2d>
 800e9e6:	a901      	add	r1, sp, #4
 800e9e8:	4640      	mov	r0, r8
 800e9ea:	ec55 4b10 	vmov	r4, r5, d0
 800e9ee:	f7ff ff47 	bl	800e880 <__b2d>
 800e9f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e9fa:	eba3 0c02 	sub.w	ip, r3, r2
 800e9fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea02:	1a9b      	subs	r3, r3, r2
 800ea04:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ea08:	ec51 0b10 	vmov	r0, r1, d0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bfd6      	itet	le
 800ea10:	460a      	movle	r2, r1
 800ea12:	462a      	movgt	r2, r5
 800ea14:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea18:	468b      	mov	fp, r1
 800ea1a:	462f      	mov	r7, r5
 800ea1c:	bfd4      	ite	le
 800ea1e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ea22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ea26:	4620      	mov	r0, r4
 800ea28:	ee10 2a10 	vmov	r2, s0
 800ea2c:	465b      	mov	r3, fp
 800ea2e:	4639      	mov	r1, r7
 800ea30:	f7f1 ff0c 	bl	800084c <__aeabi_ddiv>
 800ea34:	ec41 0b10 	vmov	d0, r0, r1
 800ea38:	b003      	add	sp, #12
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea3e <__copybits>:
 800ea3e:	3901      	subs	r1, #1
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	1149      	asrs	r1, r1, #5
 800ea44:	6914      	ldr	r4, [r2, #16]
 800ea46:	3101      	adds	r1, #1
 800ea48:	f102 0314 	add.w	r3, r2, #20
 800ea4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ea54:	1f05      	subs	r5, r0, #4
 800ea56:	42a3      	cmp	r3, r4
 800ea58:	d30c      	bcc.n	800ea74 <__copybits+0x36>
 800ea5a:	1aa3      	subs	r3, r4, r2
 800ea5c:	3b11      	subs	r3, #17
 800ea5e:	f023 0303 	bic.w	r3, r3, #3
 800ea62:	3211      	adds	r2, #17
 800ea64:	42a2      	cmp	r2, r4
 800ea66:	bf88      	it	hi
 800ea68:	2300      	movhi	r3, #0
 800ea6a:	4418      	add	r0, r3
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	4288      	cmp	r0, r1
 800ea70:	d305      	bcc.n	800ea7e <__copybits+0x40>
 800ea72:	bd70      	pop	{r4, r5, r6, pc}
 800ea74:	f853 6b04 	ldr.w	r6, [r3], #4
 800ea78:	f845 6f04 	str.w	r6, [r5, #4]!
 800ea7c:	e7eb      	b.n	800ea56 <__copybits+0x18>
 800ea7e:	f840 3b04 	str.w	r3, [r0], #4
 800ea82:	e7f4      	b.n	800ea6e <__copybits+0x30>

0800ea84 <__any_on>:
 800ea84:	f100 0214 	add.w	r2, r0, #20
 800ea88:	6900      	ldr	r0, [r0, #16]
 800ea8a:	114b      	asrs	r3, r1, #5
 800ea8c:	4298      	cmp	r0, r3
 800ea8e:	b510      	push	{r4, lr}
 800ea90:	db11      	blt.n	800eab6 <__any_on+0x32>
 800ea92:	dd0a      	ble.n	800eaaa <__any_on+0x26>
 800ea94:	f011 011f 	ands.w	r1, r1, #31
 800ea98:	d007      	beq.n	800eaaa <__any_on+0x26>
 800ea9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ea9e:	fa24 f001 	lsr.w	r0, r4, r1
 800eaa2:	fa00 f101 	lsl.w	r1, r0, r1
 800eaa6:	428c      	cmp	r4, r1
 800eaa8:	d10b      	bne.n	800eac2 <__any_on+0x3e>
 800eaaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d803      	bhi.n	800eaba <__any_on+0x36>
 800eab2:	2000      	movs	r0, #0
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	4603      	mov	r3, r0
 800eab8:	e7f7      	b.n	800eaaa <__any_on+0x26>
 800eaba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eabe:	2900      	cmp	r1, #0
 800eac0:	d0f5      	beq.n	800eaae <__any_on+0x2a>
 800eac2:	2001      	movs	r0, #1
 800eac4:	e7f6      	b.n	800eab4 <__any_on+0x30>

0800eac6 <_calloc_r>:
 800eac6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eac8:	fba1 2402 	umull	r2, r4, r1, r2
 800eacc:	b94c      	cbnz	r4, 800eae2 <_calloc_r+0x1c>
 800eace:	4611      	mov	r1, r2
 800ead0:	9201      	str	r2, [sp, #4]
 800ead2:	f000 f82f 	bl	800eb34 <_malloc_r>
 800ead6:	9a01      	ldr	r2, [sp, #4]
 800ead8:	4605      	mov	r5, r0
 800eada:	b930      	cbnz	r0, 800eaea <_calloc_r+0x24>
 800eadc:	4628      	mov	r0, r5
 800eade:	b003      	add	sp, #12
 800eae0:	bd30      	pop	{r4, r5, pc}
 800eae2:	220c      	movs	r2, #12
 800eae4:	6002      	str	r2, [r0, #0]
 800eae6:	2500      	movs	r5, #0
 800eae8:	e7f8      	b.n	800eadc <_calloc_r+0x16>
 800eaea:	4621      	mov	r1, r4
 800eaec:	f7fd fdfe 	bl	800c6ec <memset>
 800eaf0:	e7f4      	b.n	800eadc <_calloc_r+0x16>
	...

0800eaf4 <sbrk_aligned>:
 800eaf4:	b570      	push	{r4, r5, r6, lr}
 800eaf6:	4e0e      	ldr	r6, [pc, #56]	; (800eb30 <sbrk_aligned+0x3c>)
 800eaf8:	460c      	mov	r4, r1
 800eafa:	6831      	ldr	r1, [r6, #0]
 800eafc:	4605      	mov	r5, r0
 800eafe:	b911      	cbnz	r1, 800eb06 <sbrk_aligned+0x12>
 800eb00:	f000 fb96 	bl	800f230 <_sbrk_r>
 800eb04:	6030      	str	r0, [r6, #0]
 800eb06:	4621      	mov	r1, r4
 800eb08:	4628      	mov	r0, r5
 800eb0a:	f000 fb91 	bl	800f230 <_sbrk_r>
 800eb0e:	1c43      	adds	r3, r0, #1
 800eb10:	d00a      	beq.n	800eb28 <sbrk_aligned+0x34>
 800eb12:	1cc4      	adds	r4, r0, #3
 800eb14:	f024 0403 	bic.w	r4, r4, #3
 800eb18:	42a0      	cmp	r0, r4
 800eb1a:	d007      	beq.n	800eb2c <sbrk_aligned+0x38>
 800eb1c:	1a21      	subs	r1, r4, r0
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f000 fb86 	bl	800f230 <_sbrk_r>
 800eb24:	3001      	adds	r0, #1
 800eb26:	d101      	bne.n	800eb2c <sbrk_aligned+0x38>
 800eb28:	f04f 34ff 	mov.w	r4, #4294967295
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	bd70      	pop	{r4, r5, r6, pc}
 800eb30:	20002484 	.word	0x20002484

0800eb34 <_malloc_r>:
 800eb34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb38:	1ccd      	adds	r5, r1, #3
 800eb3a:	f025 0503 	bic.w	r5, r5, #3
 800eb3e:	3508      	adds	r5, #8
 800eb40:	2d0c      	cmp	r5, #12
 800eb42:	bf38      	it	cc
 800eb44:	250c      	movcc	r5, #12
 800eb46:	2d00      	cmp	r5, #0
 800eb48:	4607      	mov	r7, r0
 800eb4a:	db01      	blt.n	800eb50 <_malloc_r+0x1c>
 800eb4c:	42a9      	cmp	r1, r5
 800eb4e:	d905      	bls.n	800eb5c <_malloc_r+0x28>
 800eb50:	230c      	movs	r3, #12
 800eb52:	603b      	str	r3, [r7, #0]
 800eb54:	2600      	movs	r6, #0
 800eb56:	4630      	mov	r0, r6
 800eb58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5c:	4e2e      	ldr	r6, [pc, #184]	; (800ec18 <_malloc_r+0xe4>)
 800eb5e:	f000 fd91 	bl	800f684 <__malloc_lock>
 800eb62:	6833      	ldr	r3, [r6, #0]
 800eb64:	461c      	mov	r4, r3
 800eb66:	bb34      	cbnz	r4, 800ebb6 <_malloc_r+0x82>
 800eb68:	4629      	mov	r1, r5
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	f7ff ffc2 	bl	800eaf4 <sbrk_aligned>
 800eb70:	1c43      	adds	r3, r0, #1
 800eb72:	4604      	mov	r4, r0
 800eb74:	d14d      	bne.n	800ec12 <_malloc_r+0xde>
 800eb76:	6834      	ldr	r4, [r6, #0]
 800eb78:	4626      	mov	r6, r4
 800eb7a:	2e00      	cmp	r6, #0
 800eb7c:	d140      	bne.n	800ec00 <_malloc_r+0xcc>
 800eb7e:	6823      	ldr	r3, [r4, #0]
 800eb80:	4631      	mov	r1, r6
 800eb82:	4638      	mov	r0, r7
 800eb84:	eb04 0803 	add.w	r8, r4, r3
 800eb88:	f000 fb52 	bl	800f230 <_sbrk_r>
 800eb8c:	4580      	cmp	r8, r0
 800eb8e:	d13a      	bne.n	800ec06 <_malloc_r+0xd2>
 800eb90:	6821      	ldr	r1, [r4, #0]
 800eb92:	3503      	adds	r5, #3
 800eb94:	1a6d      	subs	r5, r5, r1
 800eb96:	f025 0503 	bic.w	r5, r5, #3
 800eb9a:	3508      	adds	r5, #8
 800eb9c:	2d0c      	cmp	r5, #12
 800eb9e:	bf38      	it	cc
 800eba0:	250c      	movcc	r5, #12
 800eba2:	4629      	mov	r1, r5
 800eba4:	4638      	mov	r0, r7
 800eba6:	f7ff ffa5 	bl	800eaf4 <sbrk_aligned>
 800ebaa:	3001      	adds	r0, #1
 800ebac:	d02b      	beq.n	800ec06 <_malloc_r+0xd2>
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	442b      	add	r3, r5
 800ebb2:	6023      	str	r3, [r4, #0]
 800ebb4:	e00e      	b.n	800ebd4 <_malloc_r+0xa0>
 800ebb6:	6822      	ldr	r2, [r4, #0]
 800ebb8:	1b52      	subs	r2, r2, r5
 800ebba:	d41e      	bmi.n	800ebfa <_malloc_r+0xc6>
 800ebbc:	2a0b      	cmp	r2, #11
 800ebbe:	d916      	bls.n	800ebee <_malloc_r+0xba>
 800ebc0:	1961      	adds	r1, r4, r5
 800ebc2:	42a3      	cmp	r3, r4
 800ebc4:	6025      	str	r5, [r4, #0]
 800ebc6:	bf18      	it	ne
 800ebc8:	6059      	strne	r1, [r3, #4]
 800ebca:	6863      	ldr	r3, [r4, #4]
 800ebcc:	bf08      	it	eq
 800ebce:	6031      	streq	r1, [r6, #0]
 800ebd0:	5162      	str	r2, [r4, r5]
 800ebd2:	604b      	str	r3, [r1, #4]
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	f104 060b 	add.w	r6, r4, #11
 800ebda:	f000 fd59 	bl	800f690 <__malloc_unlock>
 800ebde:	f026 0607 	bic.w	r6, r6, #7
 800ebe2:	1d23      	adds	r3, r4, #4
 800ebe4:	1af2      	subs	r2, r6, r3
 800ebe6:	d0b6      	beq.n	800eb56 <_malloc_r+0x22>
 800ebe8:	1b9b      	subs	r3, r3, r6
 800ebea:	50a3      	str	r3, [r4, r2]
 800ebec:	e7b3      	b.n	800eb56 <_malloc_r+0x22>
 800ebee:	6862      	ldr	r2, [r4, #4]
 800ebf0:	42a3      	cmp	r3, r4
 800ebf2:	bf0c      	ite	eq
 800ebf4:	6032      	streq	r2, [r6, #0]
 800ebf6:	605a      	strne	r2, [r3, #4]
 800ebf8:	e7ec      	b.n	800ebd4 <_malloc_r+0xa0>
 800ebfa:	4623      	mov	r3, r4
 800ebfc:	6864      	ldr	r4, [r4, #4]
 800ebfe:	e7b2      	b.n	800eb66 <_malloc_r+0x32>
 800ec00:	4634      	mov	r4, r6
 800ec02:	6876      	ldr	r6, [r6, #4]
 800ec04:	e7b9      	b.n	800eb7a <_malloc_r+0x46>
 800ec06:	230c      	movs	r3, #12
 800ec08:	603b      	str	r3, [r7, #0]
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	f000 fd40 	bl	800f690 <__malloc_unlock>
 800ec10:	e7a1      	b.n	800eb56 <_malloc_r+0x22>
 800ec12:	6025      	str	r5, [r4, #0]
 800ec14:	e7de      	b.n	800ebd4 <_malloc_r+0xa0>
 800ec16:	bf00      	nop
 800ec18:	20002480 	.word	0x20002480

0800ec1c <__ssputs_r>:
 800ec1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec20:	688e      	ldr	r6, [r1, #8]
 800ec22:	429e      	cmp	r6, r3
 800ec24:	4682      	mov	sl, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	4690      	mov	r8, r2
 800ec2a:	461f      	mov	r7, r3
 800ec2c:	d838      	bhi.n	800eca0 <__ssputs_r+0x84>
 800ec2e:	898a      	ldrh	r2, [r1, #12]
 800ec30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec34:	d032      	beq.n	800ec9c <__ssputs_r+0x80>
 800ec36:	6825      	ldr	r5, [r4, #0]
 800ec38:	6909      	ldr	r1, [r1, #16]
 800ec3a:	eba5 0901 	sub.w	r9, r5, r1
 800ec3e:	6965      	ldr	r5, [r4, #20]
 800ec40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec48:	3301      	adds	r3, #1
 800ec4a:	444b      	add	r3, r9
 800ec4c:	106d      	asrs	r5, r5, #1
 800ec4e:	429d      	cmp	r5, r3
 800ec50:	bf38      	it	cc
 800ec52:	461d      	movcc	r5, r3
 800ec54:	0553      	lsls	r3, r2, #21
 800ec56:	d531      	bpl.n	800ecbc <__ssputs_r+0xa0>
 800ec58:	4629      	mov	r1, r5
 800ec5a:	f7ff ff6b 	bl	800eb34 <_malloc_r>
 800ec5e:	4606      	mov	r6, r0
 800ec60:	b950      	cbnz	r0, 800ec78 <__ssputs_r+0x5c>
 800ec62:	230c      	movs	r3, #12
 800ec64:	f8ca 3000 	str.w	r3, [sl]
 800ec68:	89a3      	ldrh	r3, [r4, #12]
 800ec6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec6e:	81a3      	strh	r3, [r4, #12]
 800ec70:	f04f 30ff 	mov.w	r0, #4294967295
 800ec74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec78:	6921      	ldr	r1, [r4, #16]
 800ec7a:	464a      	mov	r2, r9
 800ec7c:	f7fd fd28 	bl	800c6d0 <memcpy>
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ec86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec8a:	81a3      	strh	r3, [r4, #12]
 800ec8c:	6126      	str	r6, [r4, #16]
 800ec8e:	6165      	str	r5, [r4, #20]
 800ec90:	444e      	add	r6, r9
 800ec92:	eba5 0509 	sub.w	r5, r5, r9
 800ec96:	6026      	str	r6, [r4, #0]
 800ec98:	60a5      	str	r5, [r4, #8]
 800ec9a:	463e      	mov	r6, r7
 800ec9c:	42be      	cmp	r6, r7
 800ec9e:	d900      	bls.n	800eca2 <__ssputs_r+0x86>
 800eca0:	463e      	mov	r6, r7
 800eca2:	6820      	ldr	r0, [r4, #0]
 800eca4:	4632      	mov	r2, r6
 800eca6:	4641      	mov	r1, r8
 800eca8:	f000 fcd2 	bl	800f650 <memmove>
 800ecac:	68a3      	ldr	r3, [r4, #8]
 800ecae:	1b9b      	subs	r3, r3, r6
 800ecb0:	60a3      	str	r3, [r4, #8]
 800ecb2:	6823      	ldr	r3, [r4, #0]
 800ecb4:	4433      	add	r3, r6
 800ecb6:	6023      	str	r3, [r4, #0]
 800ecb8:	2000      	movs	r0, #0
 800ecba:	e7db      	b.n	800ec74 <__ssputs_r+0x58>
 800ecbc:	462a      	mov	r2, r5
 800ecbe:	f000 fd39 	bl	800f734 <_realloc_r>
 800ecc2:	4606      	mov	r6, r0
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	d1e1      	bne.n	800ec8c <__ssputs_r+0x70>
 800ecc8:	6921      	ldr	r1, [r4, #16]
 800ecca:	4650      	mov	r0, sl
 800eccc:	f000 fce6 	bl	800f69c <_free_r>
 800ecd0:	e7c7      	b.n	800ec62 <__ssputs_r+0x46>
	...

0800ecd4 <_svfiprintf_r>:
 800ecd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd8:	4698      	mov	r8, r3
 800ecda:	898b      	ldrh	r3, [r1, #12]
 800ecdc:	061b      	lsls	r3, r3, #24
 800ecde:	b09d      	sub	sp, #116	; 0x74
 800ece0:	4607      	mov	r7, r0
 800ece2:	460d      	mov	r5, r1
 800ece4:	4614      	mov	r4, r2
 800ece6:	d50e      	bpl.n	800ed06 <_svfiprintf_r+0x32>
 800ece8:	690b      	ldr	r3, [r1, #16]
 800ecea:	b963      	cbnz	r3, 800ed06 <_svfiprintf_r+0x32>
 800ecec:	2140      	movs	r1, #64	; 0x40
 800ecee:	f7ff ff21 	bl	800eb34 <_malloc_r>
 800ecf2:	6028      	str	r0, [r5, #0]
 800ecf4:	6128      	str	r0, [r5, #16]
 800ecf6:	b920      	cbnz	r0, 800ed02 <_svfiprintf_r+0x2e>
 800ecf8:	230c      	movs	r3, #12
 800ecfa:	603b      	str	r3, [r7, #0]
 800ecfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ed00:	e0d1      	b.n	800eea6 <_svfiprintf_r+0x1d2>
 800ed02:	2340      	movs	r3, #64	; 0x40
 800ed04:	616b      	str	r3, [r5, #20]
 800ed06:	2300      	movs	r3, #0
 800ed08:	9309      	str	r3, [sp, #36]	; 0x24
 800ed0a:	2320      	movs	r3, #32
 800ed0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed10:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed14:	2330      	movs	r3, #48	; 0x30
 800ed16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eec0 <_svfiprintf_r+0x1ec>
 800ed1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed1e:	f04f 0901 	mov.w	r9, #1
 800ed22:	4623      	mov	r3, r4
 800ed24:	469a      	mov	sl, r3
 800ed26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed2a:	b10a      	cbz	r2, 800ed30 <_svfiprintf_r+0x5c>
 800ed2c:	2a25      	cmp	r2, #37	; 0x25
 800ed2e:	d1f9      	bne.n	800ed24 <_svfiprintf_r+0x50>
 800ed30:	ebba 0b04 	subs.w	fp, sl, r4
 800ed34:	d00b      	beq.n	800ed4e <_svfiprintf_r+0x7a>
 800ed36:	465b      	mov	r3, fp
 800ed38:	4622      	mov	r2, r4
 800ed3a:	4629      	mov	r1, r5
 800ed3c:	4638      	mov	r0, r7
 800ed3e:	f7ff ff6d 	bl	800ec1c <__ssputs_r>
 800ed42:	3001      	adds	r0, #1
 800ed44:	f000 80aa 	beq.w	800ee9c <_svfiprintf_r+0x1c8>
 800ed48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed4a:	445a      	add	r2, fp
 800ed4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ed4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f000 80a2 	beq.w	800ee9c <_svfiprintf_r+0x1c8>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed62:	f10a 0a01 	add.w	sl, sl, #1
 800ed66:	9304      	str	r3, [sp, #16]
 800ed68:	9307      	str	r3, [sp, #28]
 800ed6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed6e:	931a      	str	r3, [sp, #104]	; 0x68
 800ed70:	4654      	mov	r4, sl
 800ed72:	2205      	movs	r2, #5
 800ed74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed78:	4851      	ldr	r0, [pc, #324]	; (800eec0 <_svfiprintf_r+0x1ec>)
 800ed7a:	f7f1 fa31 	bl	80001e0 <memchr>
 800ed7e:	9a04      	ldr	r2, [sp, #16]
 800ed80:	b9d8      	cbnz	r0, 800edba <_svfiprintf_r+0xe6>
 800ed82:	06d0      	lsls	r0, r2, #27
 800ed84:	bf44      	itt	mi
 800ed86:	2320      	movmi	r3, #32
 800ed88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed8c:	0711      	lsls	r1, r2, #28
 800ed8e:	bf44      	itt	mi
 800ed90:	232b      	movmi	r3, #43	; 0x2b
 800ed92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed96:	f89a 3000 	ldrb.w	r3, [sl]
 800ed9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ed9c:	d015      	beq.n	800edca <_svfiprintf_r+0xf6>
 800ed9e:	9a07      	ldr	r2, [sp, #28]
 800eda0:	4654      	mov	r4, sl
 800eda2:	2000      	movs	r0, #0
 800eda4:	f04f 0c0a 	mov.w	ip, #10
 800eda8:	4621      	mov	r1, r4
 800edaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edae:	3b30      	subs	r3, #48	; 0x30
 800edb0:	2b09      	cmp	r3, #9
 800edb2:	d94e      	bls.n	800ee52 <_svfiprintf_r+0x17e>
 800edb4:	b1b0      	cbz	r0, 800ede4 <_svfiprintf_r+0x110>
 800edb6:	9207      	str	r2, [sp, #28]
 800edb8:	e014      	b.n	800ede4 <_svfiprintf_r+0x110>
 800edba:	eba0 0308 	sub.w	r3, r0, r8
 800edbe:	fa09 f303 	lsl.w	r3, r9, r3
 800edc2:	4313      	orrs	r3, r2
 800edc4:	9304      	str	r3, [sp, #16]
 800edc6:	46a2      	mov	sl, r4
 800edc8:	e7d2      	b.n	800ed70 <_svfiprintf_r+0x9c>
 800edca:	9b03      	ldr	r3, [sp, #12]
 800edcc:	1d19      	adds	r1, r3, #4
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	9103      	str	r1, [sp, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	bfbb      	ittet	lt
 800edd6:	425b      	neglt	r3, r3
 800edd8:	f042 0202 	orrlt.w	r2, r2, #2
 800eddc:	9307      	strge	r3, [sp, #28]
 800edde:	9307      	strlt	r3, [sp, #28]
 800ede0:	bfb8      	it	lt
 800ede2:	9204      	strlt	r2, [sp, #16]
 800ede4:	7823      	ldrb	r3, [r4, #0]
 800ede6:	2b2e      	cmp	r3, #46	; 0x2e
 800ede8:	d10c      	bne.n	800ee04 <_svfiprintf_r+0x130>
 800edea:	7863      	ldrb	r3, [r4, #1]
 800edec:	2b2a      	cmp	r3, #42	; 0x2a
 800edee:	d135      	bne.n	800ee5c <_svfiprintf_r+0x188>
 800edf0:	9b03      	ldr	r3, [sp, #12]
 800edf2:	1d1a      	adds	r2, r3, #4
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	9203      	str	r2, [sp, #12]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	bfb8      	it	lt
 800edfc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee00:	3402      	adds	r4, #2
 800ee02:	9305      	str	r3, [sp, #20]
 800ee04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eed0 <_svfiprintf_r+0x1fc>
 800ee08:	7821      	ldrb	r1, [r4, #0]
 800ee0a:	2203      	movs	r2, #3
 800ee0c:	4650      	mov	r0, sl
 800ee0e:	f7f1 f9e7 	bl	80001e0 <memchr>
 800ee12:	b140      	cbz	r0, 800ee26 <_svfiprintf_r+0x152>
 800ee14:	2340      	movs	r3, #64	; 0x40
 800ee16:	eba0 000a 	sub.w	r0, r0, sl
 800ee1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ee1e:	9b04      	ldr	r3, [sp, #16]
 800ee20:	4303      	orrs	r3, r0
 800ee22:	3401      	adds	r4, #1
 800ee24:	9304      	str	r3, [sp, #16]
 800ee26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee2a:	4826      	ldr	r0, [pc, #152]	; (800eec4 <_svfiprintf_r+0x1f0>)
 800ee2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee30:	2206      	movs	r2, #6
 800ee32:	f7f1 f9d5 	bl	80001e0 <memchr>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d038      	beq.n	800eeac <_svfiprintf_r+0x1d8>
 800ee3a:	4b23      	ldr	r3, [pc, #140]	; (800eec8 <_svfiprintf_r+0x1f4>)
 800ee3c:	bb1b      	cbnz	r3, 800ee86 <_svfiprintf_r+0x1b2>
 800ee3e:	9b03      	ldr	r3, [sp, #12]
 800ee40:	3307      	adds	r3, #7
 800ee42:	f023 0307 	bic.w	r3, r3, #7
 800ee46:	3308      	adds	r3, #8
 800ee48:	9303      	str	r3, [sp, #12]
 800ee4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee4c:	4433      	add	r3, r6
 800ee4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee50:	e767      	b.n	800ed22 <_svfiprintf_r+0x4e>
 800ee52:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee56:	460c      	mov	r4, r1
 800ee58:	2001      	movs	r0, #1
 800ee5a:	e7a5      	b.n	800eda8 <_svfiprintf_r+0xd4>
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	3401      	adds	r4, #1
 800ee60:	9305      	str	r3, [sp, #20]
 800ee62:	4619      	mov	r1, r3
 800ee64:	f04f 0c0a 	mov.w	ip, #10
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee6e:	3a30      	subs	r2, #48	; 0x30
 800ee70:	2a09      	cmp	r2, #9
 800ee72:	d903      	bls.n	800ee7c <_svfiprintf_r+0x1a8>
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d0c5      	beq.n	800ee04 <_svfiprintf_r+0x130>
 800ee78:	9105      	str	r1, [sp, #20]
 800ee7a:	e7c3      	b.n	800ee04 <_svfiprintf_r+0x130>
 800ee7c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee80:	4604      	mov	r4, r0
 800ee82:	2301      	movs	r3, #1
 800ee84:	e7f0      	b.n	800ee68 <_svfiprintf_r+0x194>
 800ee86:	ab03      	add	r3, sp, #12
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	462a      	mov	r2, r5
 800ee8c:	4b0f      	ldr	r3, [pc, #60]	; (800eecc <_svfiprintf_r+0x1f8>)
 800ee8e:	a904      	add	r1, sp, #16
 800ee90:	4638      	mov	r0, r7
 800ee92:	f3af 8000 	nop.w
 800ee96:	1c42      	adds	r2, r0, #1
 800ee98:	4606      	mov	r6, r0
 800ee9a:	d1d6      	bne.n	800ee4a <_svfiprintf_r+0x176>
 800ee9c:	89ab      	ldrh	r3, [r5, #12]
 800ee9e:	065b      	lsls	r3, r3, #25
 800eea0:	f53f af2c 	bmi.w	800ecfc <_svfiprintf_r+0x28>
 800eea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eea6:	b01d      	add	sp, #116	; 0x74
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeac:	ab03      	add	r3, sp, #12
 800eeae:	9300      	str	r3, [sp, #0]
 800eeb0:	462a      	mov	r2, r5
 800eeb2:	4b06      	ldr	r3, [pc, #24]	; (800eecc <_svfiprintf_r+0x1f8>)
 800eeb4:	a904      	add	r1, sp, #16
 800eeb6:	4638      	mov	r0, r7
 800eeb8:	f000 f87a 	bl	800efb0 <_printf_i>
 800eebc:	e7eb      	b.n	800ee96 <_svfiprintf_r+0x1c2>
 800eebe:	bf00      	nop
 800eec0:	0801031c 	.word	0x0801031c
 800eec4:	08010326 	.word	0x08010326
 800eec8:	00000000 	.word	0x00000000
 800eecc:	0800ec1d 	.word	0x0800ec1d
 800eed0:	08010322 	.word	0x08010322

0800eed4 <_printf_common>:
 800eed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eed8:	4616      	mov	r6, r2
 800eeda:	4699      	mov	r9, r3
 800eedc:	688a      	ldr	r2, [r1, #8]
 800eede:	690b      	ldr	r3, [r1, #16]
 800eee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eee4:	4293      	cmp	r3, r2
 800eee6:	bfb8      	it	lt
 800eee8:	4613      	movlt	r3, r2
 800eeea:	6033      	str	r3, [r6, #0]
 800eeec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eef0:	4607      	mov	r7, r0
 800eef2:	460c      	mov	r4, r1
 800eef4:	b10a      	cbz	r2, 800eefa <_printf_common+0x26>
 800eef6:	3301      	adds	r3, #1
 800eef8:	6033      	str	r3, [r6, #0]
 800eefa:	6823      	ldr	r3, [r4, #0]
 800eefc:	0699      	lsls	r1, r3, #26
 800eefe:	bf42      	ittt	mi
 800ef00:	6833      	ldrmi	r3, [r6, #0]
 800ef02:	3302      	addmi	r3, #2
 800ef04:	6033      	strmi	r3, [r6, #0]
 800ef06:	6825      	ldr	r5, [r4, #0]
 800ef08:	f015 0506 	ands.w	r5, r5, #6
 800ef0c:	d106      	bne.n	800ef1c <_printf_common+0x48>
 800ef0e:	f104 0a19 	add.w	sl, r4, #25
 800ef12:	68e3      	ldr	r3, [r4, #12]
 800ef14:	6832      	ldr	r2, [r6, #0]
 800ef16:	1a9b      	subs	r3, r3, r2
 800ef18:	42ab      	cmp	r3, r5
 800ef1a:	dc26      	bgt.n	800ef6a <_printf_common+0x96>
 800ef1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef20:	1e13      	subs	r3, r2, #0
 800ef22:	6822      	ldr	r2, [r4, #0]
 800ef24:	bf18      	it	ne
 800ef26:	2301      	movne	r3, #1
 800ef28:	0692      	lsls	r2, r2, #26
 800ef2a:	d42b      	bmi.n	800ef84 <_printf_common+0xb0>
 800ef2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef30:	4649      	mov	r1, r9
 800ef32:	4638      	mov	r0, r7
 800ef34:	47c0      	blx	r8
 800ef36:	3001      	adds	r0, #1
 800ef38:	d01e      	beq.n	800ef78 <_printf_common+0xa4>
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	68e5      	ldr	r5, [r4, #12]
 800ef3e:	6832      	ldr	r2, [r6, #0]
 800ef40:	f003 0306 	and.w	r3, r3, #6
 800ef44:	2b04      	cmp	r3, #4
 800ef46:	bf08      	it	eq
 800ef48:	1aad      	subeq	r5, r5, r2
 800ef4a:	68a3      	ldr	r3, [r4, #8]
 800ef4c:	6922      	ldr	r2, [r4, #16]
 800ef4e:	bf0c      	ite	eq
 800ef50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef54:	2500      	movne	r5, #0
 800ef56:	4293      	cmp	r3, r2
 800ef58:	bfc4      	itt	gt
 800ef5a:	1a9b      	subgt	r3, r3, r2
 800ef5c:	18ed      	addgt	r5, r5, r3
 800ef5e:	2600      	movs	r6, #0
 800ef60:	341a      	adds	r4, #26
 800ef62:	42b5      	cmp	r5, r6
 800ef64:	d11a      	bne.n	800ef9c <_printf_common+0xc8>
 800ef66:	2000      	movs	r0, #0
 800ef68:	e008      	b.n	800ef7c <_printf_common+0xa8>
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	4652      	mov	r2, sl
 800ef6e:	4649      	mov	r1, r9
 800ef70:	4638      	mov	r0, r7
 800ef72:	47c0      	blx	r8
 800ef74:	3001      	adds	r0, #1
 800ef76:	d103      	bne.n	800ef80 <_printf_common+0xac>
 800ef78:	f04f 30ff 	mov.w	r0, #4294967295
 800ef7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef80:	3501      	adds	r5, #1
 800ef82:	e7c6      	b.n	800ef12 <_printf_common+0x3e>
 800ef84:	18e1      	adds	r1, r4, r3
 800ef86:	1c5a      	adds	r2, r3, #1
 800ef88:	2030      	movs	r0, #48	; 0x30
 800ef8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef8e:	4422      	add	r2, r4
 800ef90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef98:	3302      	adds	r3, #2
 800ef9a:	e7c7      	b.n	800ef2c <_printf_common+0x58>
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	4622      	mov	r2, r4
 800efa0:	4649      	mov	r1, r9
 800efa2:	4638      	mov	r0, r7
 800efa4:	47c0      	blx	r8
 800efa6:	3001      	adds	r0, #1
 800efa8:	d0e6      	beq.n	800ef78 <_printf_common+0xa4>
 800efaa:	3601      	adds	r6, #1
 800efac:	e7d9      	b.n	800ef62 <_printf_common+0x8e>
	...

0800efb0 <_printf_i>:
 800efb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efb4:	7e0f      	ldrb	r7, [r1, #24]
 800efb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800efb8:	2f78      	cmp	r7, #120	; 0x78
 800efba:	4691      	mov	r9, r2
 800efbc:	4680      	mov	r8, r0
 800efbe:	460c      	mov	r4, r1
 800efc0:	469a      	mov	sl, r3
 800efc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800efc6:	d807      	bhi.n	800efd8 <_printf_i+0x28>
 800efc8:	2f62      	cmp	r7, #98	; 0x62
 800efca:	d80a      	bhi.n	800efe2 <_printf_i+0x32>
 800efcc:	2f00      	cmp	r7, #0
 800efce:	f000 80d8 	beq.w	800f182 <_printf_i+0x1d2>
 800efd2:	2f58      	cmp	r7, #88	; 0x58
 800efd4:	f000 80a3 	beq.w	800f11e <_printf_i+0x16e>
 800efd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efe0:	e03a      	b.n	800f058 <_printf_i+0xa8>
 800efe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efe6:	2b15      	cmp	r3, #21
 800efe8:	d8f6      	bhi.n	800efd8 <_printf_i+0x28>
 800efea:	a101      	add	r1, pc, #4	; (adr r1, 800eff0 <_printf_i+0x40>)
 800efec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eff0:	0800f049 	.word	0x0800f049
 800eff4:	0800f05d 	.word	0x0800f05d
 800eff8:	0800efd9 	.word	0x0800efd9
 800effc:	0800efd9 	.word	0x0800efd9
 800f000:	0800efd9 	.word	0x0800efd9
 800f004:	0800efd9 	.word	0x0800efd9
 800f008:	0800f05d 	.word	0x0800f05d
 800f00c:	0800efd9 	.word	0x0800efd9
 800f010:	0800efd9 	.word	0x0800efd9
 800f014:	0800efd9 	.word	0x0800efd9
 800f018:	0800efd9 	.word	0x0800efd9
 800f01c:	0800f169 	.word	0x0800f169
 800f020:	0800f08d 	.word	0x0800f08d
 800f024:	0800f14b 	.word	0x0800f14b
 800f028:	0800efd9 	.word	0x0800efd9
 800f02c:	0800efd9 	.word	0x0800efd9
 800f030:	0800f18b 	.word	0x0800f18b
 800f034:	0800efd9 	.word	0x0800efd9
 800f038:	0800f08d 	.word	0x0800f08d
 800f03c:	0800efd9 	.word	0x0800efd9
 800f040:	0800efd9 	.word	0x0800efd9
 800f044:	0800f153 	.word	0x0800f153
 800f048:	682b      	ldr	r3, [r5, #0]
 800f04a:	1d1a      	adds	r2, r3, #4
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	602a      	str	r2, [r5, #0]
 800f050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f058:	2301      	movs	r3, #1
 800f05a:	e0a3      	b.n	800f1a4 <_printf_i+0x1f4>
 800f05c:	6820      	ldr	r0, [r4, #0]
 800f05e:	6829      	ldr	r1, [r5, #0]
 800f060:	0606      	lsls	r6, r0, #24
 800f062:	f101 0304 	add.w	r3, r1, #4
 800f066:	d50a      	bpl.n	800f07e <_printf_i+0xce>
 800f068:	680e      	ldr	r6, [r1, #0]
 800f06a:	602b      	str	r3, [r5, #0]
 800f06c:	2e00      	cmp	r6, #0
 800f06e:	da03      	bge.n	800f078 <_printf_i+0xc8>
 800f070:	232d      	movs	r3, #45	; 0x2d
 800f072:	4276      	negs	r6, r6
 800f074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f078:	485e      	ldr	r0, [pc, #376]	; (800f1f4 <_printf_i+0x244>)
 800f07a:	230a      	movs	r3, #10
 800f07c:	e019      	b.n	800f0b2 <_printf_i+0x102>
 800f07e:	680e      	ldr	r6, [r1, #0]
 800f080:	602b      	str	r3, [r5, #0]
 800f082:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f086:	bf18      	it	ne
 800f088:	b236      	sxthne	r6, r6
 800f08a:	e7ef      	b.n	800f06c <_printf_i+0xbc>
 800f08c:	682b      	ldr	r3, [r5, #0]
 800f08e:	6820      	ldr	r0, [r4, #0]
 800f090:	1d19      	adds	r1, r3, #4
 800f092:	6029      	str	r1, [r5, #0]
 800f094:	0601      	lsls	r1, r0, #24
 800f096:	d501      	bpl.n	800f09c <_printf_i+0xec>
 800f098:	681e      	ldr	r6, [r3, #0]
 800f09a:	e002      	b.n	800f0a2 <_printf_i+0xf2>
 800f09c:	0646      	lsls	r6, r0, #25
 800f09e:	d5fb      	bpl.n	800f098 <_printf_i+0xe8>
 800f0a0:	881e      	ldrh	r6, [r3, #0]
 800f0a2:	4854      	ldr	r0, [pc, #336]	; (800f1f4 <_printf_i+0x244>)
 800f0a4:	2f6f      	cmp	r7, #111	; 0x6f
 800f0a6:	bf0c      	ite	eq
 800f0a8:	2308      	moveq	r3, #8
 800f0aa:	230a      	movne	r3, #10
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0b2:	6865      	ldr	r5, [r4, #4]
 800f0b4:	60a5      	str	r5, [r4, #8]
 800f0b6:	2d00      	cmp	r5, #0
 800f0b8:	bfa2      	ittt	ge
 800f0ba:	6821      	ldrge	r1, [r4, #0]
 800f0bc:	f021 0104 	bicge.w	r1, r1, #4
 800f0c0:	6021      	strge	r1, [r4, #0]
 800f0c2:	b90e      	cbnz	r6, 800f0c8 <_printf_i+0x118>
 800f0c4:	2d00      	cmp	r5, #0
 800f0c6:	d04d      	beq.n	800f164 <_printf_i+0x1b4>
 800f0c8:	4615      	mov	r5, r2
 800f0ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0ce:	fb03 6711 	mls	r7, r3, r1, r6
 800f0d2:	5dc7      	ldrb	r7, [r0, r7]
 800f0d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0d8:	4637      	mov	r7, r6
 800f0da:	42bb      	cmp	r3, r7
 800f0dc:	460e      	mov	r6, r1
 800f0de:	d9f4      	bls.n	800f0ca <_printf_i+0x11a>
 800f0e0:	2b08      	cmp	r3, #8
 800f0e2:	d10b      	bne.n	800f0fc <_printf_i+0x14c>
 800f0e4:	6823      	ldr	r3, [r4, #0]
 800f0e6:	07de      	lsls	r6, r3, #31
 800f0e8:	d508      	bpl.n	800f0fc <_printf_i+0x14c>
 800f0ea:	6923      	ldr	r3, [r4, #16]
 800f0ec:	6861      	ldr	r1, [r4, #4]
 800f0ee:	4299      	cmp	r1, r3
 800f0f0:	bfde      	ittt	le
 800f0f2:	2330      	movle	r3, #48	; 0x30
 800f0f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0fc:	1b52      	subs	r2, r2, r5
 800f0fe:	6122      	str	r2, [r4, #16]
 800f100:	f8cd a000 	str.w	sl, [sp]
 800f104:	464b      	mov	r3, r9
 800f106:	aa03      	add	r2, sp, #12
 800f108:	4621      	mov	r1, r4
 800f10a:	4640      	mov	r0, r8
 800f10c:	f7ff fee2 	bl	800eed4 <_printf_common>
 800f110:	3001      	adds	r0, #1
 800f112:	d14c      	bne.n	800f1ae <_printf_i+0x1fe>
 800f114:	f04f 30ff 	mov.w	r0, #4294967295
 800f118:	b004      	add	sp, #16
 800f11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f11e:	4835      	ldr	r0, [pc, #212]	; (800f1f4 <_printf_i+0x244>)
 800f120:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f124:	6829      	ldr	r1, [r5, #0]
 800f126:	6823      	ldr	r3, [r4, #0]
 800f128:	f851 6b04 	ldr.w	r6, [r1], #4
 800f12c:	6029      	str	r1, [r5, #0]
 800f12e:	061d      	lsls	r5, r3, #24
 800f130:	d514      	bpl.n	800f15c <_printf_i+0x1ac>
 800f132:	07df      	lsls	r7, r3, #31
 800f134:	bf44      	itt	mi
 800f136:	f043 0320 	orrmi.w	r3, r3, #32
 800f13a:	6023      	strmi	r3, [r4, #0]
 800f13c:	b91e      	cbnz	r6, 800f146 <_printf_i+0x196>
 800f13e:	6823      	ldr	r3, [r4, #0]
 800f140:	f023 0320 	bic.w	r3, r3, #32
 800f144:	6023      	str	r3, [r4, #0]
 800f146:	2310      	movs	r3, #16
 800f148:	e7b0      	b.n	800f0ac <_printf_i+0xfc>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	f043 0320 	orr.w	r3, r3, #32
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	2378      	movs	r3, #120	; 0x78
 800f154:	4828      	ldr	r0, [pc, #160]	; (800f1f8 <_printf_i+0x248>)
 800f156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f15a:	e7e3      	b.n	800f124 <_printf_i+0x174>
 800f15c:	0659      	lsls	r1, r3, #25
 800f15e:	bf48      	it	mi
 800f160:	b2b6      	uxthmi	r6, r6
 800f162:	e7e6      	b.n	800f132 <_printf_i+0x182>
 800f164:	4615      	mov	r5, r2
 800f166:	e7bb      	b.n	800f0e0 <_printf_i+0x130>
 800f168:	682b      	ldr	r3, [r5, #0]
 800f16a:	6826      	ldr	r6, [r4, #0]
 800f16c:	6961      	ldr	r1, [r4, #20]
 800f16e:	1d18      	adds	r0, r3, #4
 800f170:	6028      	str	r0, [r5, #0]
 800f172:	0635      	lsls	r5, r6, #24
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	d501      	bpl.n	800f17c <_printf_i+0x1cc>
 800f178:	6019      	str	r1, [r3, #0]
 800f17a:	e002      	b.n	800f182 <_printf_i+0x1d2>
 800f17c:	0670      	lsls	r0, r6, #25
 800f17e:	d5fb      	bpl.n	800f178 <_printf_i+0x1c8>
 800f180:	8019      	strh	r1, [r3, #0]
 800f182:	2300      	movs	r3, #0
 800f184:	6123      	str	r3, [r4, #16]
 800f186:	4615      	mov	r5, r2
 800f188:	e7ba      	b.n	800f100 <_printf_i+0x150>
 800f18a:	682b      	ldr	r3, [r5, #0]
 800f18c:	1d1a      	adds	r2, r3, #4
 800f18e:	602a      	str	r2, [r5, #0]
 800f190:	681d      	ldr	r5, [r3, #0]
 800f192:	6862      	ldr	r2, [r4, #4]
 800f194:	2100      	movs	r1, #0
 800f196:	4628      	mov	r0, r5
 800f198:	f7f1 f822 	bl	80001e0 <memchr>
 800f19c:	b108      	cbz	r0, 800f1a2 <_printf_i+0x1f2>
 800f19e:	1b40      	subs	r0, r0, r5
 800f1a0:	6060      	str	r0, [r4, #4]
 800f1a2:	6863      	ldr	r3, [r4, #4]
 800f1a4:	6123      	str	r3, [r4, #16]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1ac:	e7a8      	b.n	800f100 <_printf_i+0x150>
 800f1ae:	6923      	ldr	r3, [r4, #16]
 800f1b0:	462a      	mov	r2, r5
 800f1b2:	4649      	mov	r1, r9
 800f1b4:	4640      	mov	r0, r8
 800f1b6:	47d0      	blx	sl
 800f1b8:	3001      	adds	r0, #1
 800f1ba:	d0ab      	beq.n	800f114 <_printf_i+0x164>
 800f1bc:	6823      	ldr	r3, [r4, #0]
 800f1be:	079b      	lsls	r3, r3, #30
 800f1c0:	d413      	bmi.n	800f1ea <_printf_i+0x23a>
 800f1c2:	68e0      	ldr	r0, [r4, #12]
 800f1c4:	9b03      	ldr	r3, [sp, #12]
 800f1c6:	4298      	cmp	r0, r3
 800f1c8:	bfb8      	it	lt
 800f1ca:	4618      	movlt	r0, r3
 800f1cc:	e7a4      	b.n	800f118 <_printf_i+0x168>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4632      	mov	r2, r6
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	4640      	mov	r0, r8
 800f1d6:	47d0      	blx	sl
 800f1d8:	3001      	adds	r0, #1
 800f1da:	d09b      	beq.n	800f114 <_printf_i+0x164>
 800f1dc:	3501      	adds	r5, #1
 800f1de:	68e3      	ldr	r3, [r4, #12]
 800f1e0:	9903      	ldr	r1, [sp, #12]
 800f1e2:	1a5b      	subs	r3, r3, r1
 800f1e4:	42ab      	cmp	r3, r5
 800f1e6:	dcf2      	bgt.n	800f1ce <_printf_i+0x21e>
 800f1e8:	e7eb      	b.n	800f1c2 <_printf_i+0x212>
 800f1ea:	2500      	movs	r5, #0
 800f1ec:	f104 0619 	add.w	r6, r4, #25
 800f1f0:	e7f5      	b.n	800f1de <_printf_i+0x22e>
 800f1f2:	bf00      	nop
 800f1f4:	0801032d 	.word	0x0801032d
 800f1f8:	0801033e 	.word	0x0801033e

0800f1fc <_read_r>:
 800f1fc:	b538      	push	{r3, r4, r5, lr}
 800f1fe:	4d07      	ldr	r5, [pc, #28]	; (800f21c <_read_r+0x20>)
 800f200:	4604      	mov	r4, r0
 800f202:	4608      	mov	r0, r1
 800f204:	4611      	mov	r1, r2
 800f206:	2200      	movs	r2, #0
 800f208:	602a      	str	r2, [r5, #0]
 800f20a:	461a      	mov	r2, r3
 800f20c:	f7f3 fc52 	bl	8002ab4 <_read>
 800f210:	1c43      	adds	r3, r0, #1
 800f212:	d102      	bne.n	800f21a <_read_r+0x1e>
 800f214:	682b      	ldr	r3, [r5, #0]
 800f216:	b103      	cbz	r3, 800f21a <_read_r+0x1e>
 800f218:	6023      	str	r3, [r4, #0]
 800f21a:	bd38      	pop	{r3, r4, r5, pc}
 800f21c:	20002488 	.word	0x20002488

0800f220 <nan>:
 800f220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f228 <nan+0x8>
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop
 800f228:	00000000 	.word	0x00000000
 800f22c:	7ff80000 	.word	0x7ff80000

0800f230 <_sbrk_r>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	4d06      	ldr	r5, [pc, #24]	; (800f24c <_sbrk_r+0x1c>)
 800f234:	2300      	movs	r3, #0
 800f236:	4604      	mov	r4, r0
 800f238:	4608      	mov	r0, r1
 800f23a:	602b      	str	r3, [r5, #0]
 800f23c:	f7f3 fca8 	bl	8002b90 <_sbrk>
 800f240:	1c43      	adds	r3, r0, #1
 800f242:	d102      	bne.n	800f24a <_sbrk_r+0x1a>
 800f244:	682b      	ldr	r3, [r5, #0]
 800f246:	b103      	cbz	r3, 800f24a <_sbrk_r+0x1a>
 800f248:	6023      	str	r3, [r4, #0]
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	20002488 	.word	0x20002488

0800f250 <__ascii_wctomb>:
 800f250:	b149      	cbz	r1, 800f266 <__ascii_wctomb+0x16>
 800f252:	2aff      	cmp	r2, #255	; 0xff
 800f254:	bf85      	ittet	hi
 800f256:	238a      	movhi	r3, #138	; 0x8a
 800f258:	6003      	strhi	r3, [r0, #0]
 800f25a:	700a      	strbls	r2, [r1, #0]
 800f25c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f260:	bf98      	it	ls
 800f262:	2001      	movls	r0, #1
 800f264:	4770      	bx	lr
 800f266:	4608      	mov	r0, r1
 800f268:	4770      	bx	lr
	...

0800f26c <__assert_func>:
 800f26c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f26e:	4614      	mov	r4, r2
 800f270:	461a      	mov	r2, r3
 800f272:	4b09      	ldr	r3, [pc, #36]	; (800f298 <__assert_func+0x2c>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4605      	mov	r5, r0
 800f278:	68d8      	ldr	r0, [r3, #12]
 800f27a:	b14c      	cbz	r4, 800f290 <__assert_func+0x24>
 800f27c:	4b07      	ldr	r3, [pc, #28]	; (800f29c <__assert_func+0x30>)
 800f27e:	9100      	str	r1, [sp, #0]
 800f280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f284:	4906      	ldr	r1, [pc, #24]	; (800f2a0 <__assert_func+0x34>)
 800f286:	462b      	mov	r3, r5
 800f288:	f000 f9a6 	bl	800f5d8 <fiprintf>
 800f28c:	f000 fc9a 	bl	800fbc4 <abort>
 800f290:	4b04      	ldr	r3, [pc, #16]	; (800f2a4 <__assert_func+0x38>)
 800f292:	461c      	mov	r4, r3
 800f294:	e7f3      	b.n	800f27e <__assert_func+0x12>
 800f296:	bf00      	nop
 800f298:	20000010 	.word	0x20000010
 800f29c:	0801034f 	.word	0x0801034f
 800f2a0:	0801035c 	.word	0x0801035c
 800f2a4:	0801038a 	.word	0x0801038a

0800f2a8 <__sflush_r>:
 800f2a8:	898a      	ldrh	r2, [r1, #12]
 800f2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ae:	4605      	mov	r5, r0
 800f2b0:	0710      	lsls	r0, r2, #28
 800f2b2:	460c      	mov	r4, r1
 800f2b4:	d458      	bmi.n	800f368 <__sflush_r+0xc0>
 800f2b6:	684b      	ldr	r3, [r1, #4]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	dc05      	bgt.n	800f2c8 <__sflush_r+0x20>
 800f2bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	dc02      	bgt.n	800f2c8 <__sflush_r+0x20>
 800f2c2:	2000      	movs	r0, #0
 800f2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2ca:	2e00      	cmp	r6, #0
 800f2cc:	d0f9      	beq.n	800f2c2 <__sflush_r+0x1a>
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2d4:	682f      	ldr	r7, [r5, #0]
 800f2d6:	602b      	str	r3, [r5, #0]
 800f2d8:	d032      	beq.n	800f340 <__sflush_r+0x98>
 800f2da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2dc:	89a3      	ldrh	r3, [r4, #12]
 800f2de:	075a      	lsls	r2, r3, #29
 800f2e0:	d505      	bpl.n	800f2ee <__sflush_r+0x46>
 800f2e2:	6863      	ldr	r3, [r4, #4]
 800f2e4:	1ac0      	subs	r0, r0, r3
 800f2e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2e8:	b10b      	cbz	r3, 800f2ee <__sflush_r+0x46>
 800f2ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2ec:	1ac0      	subs	r0, r0, r3
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2f4:	6a21      	ldr	r1, [r4, #32]
 800f2f6:	4628      	mov	r0, r5
 800f2f8:	47b0      	blx	r6
 800f2fa:	1c43      	adds	r3, r0, #1
 800f2fc:	89a3      	ldrh	r3, [r4, #12]
 800f2fe:	d106      	bne.n	800f30e <__sflush_r+0x66>
 800f300:	6829      	ldr	r1, [r5, #0]
 800f302:	291d      	cmp	r1, #29
 800f304:	d82c      	bhi.n	800f360 <__sflush_r+0xb8>
 800f306:	4a2a      	ldr	r2, [pc, #168]	; (800f3b0 <__sflush_r+0x108>)
 800f308:	40ca      	lsrs	r2, r1
 800f30a:	07d6      	lsls	r6, r2, #31
 800f30c:	d528      	bpl.n	800f360 <__sflush_r+0xb8>
 800f30e:	2200      	movs	r2, #0
 800f310:	6062      	str	r2, [r4, #4]
 800f312:	04d9      	lsls	r1, r3, #19
 800f314:	6922      	ldr	r2, [r4, #16]
 800f316:	6022      	str	r2, [r4, #0]
 800f318:	d504      	bpl.n	800f324 <__sflush_r+0x7c>
 800f31a:	1c42      	adds	r2, r0, #1
 800f31c:	d101      	bne.n	800f322 <__sflush_r+0x7a>
 800f31e:	682b      	ldr	r3, [r5, #0]
 800f320:	b903      	cbnz	r3, 800f324 <__sflush_r+0x7c>
 800f322:	6560      	str	r0, [r4, #84]	; 0x54
 800f324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f326:	602f      	str	r7, [r5, #0]
 800f328:	2900      	cmp	r1, #0
 800f32a:	d0ca      	beq.n	800f2c2 <__sflush_r+0x1a>
 800f32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f330:	4299      	cmp	r1, r3
 800f332:	d002      	beq.n	800f33a <__sflush_r+0x92>
 800f334:	4628      	mov	r0, r5
 800f336:	f000 f9b1 	bl	800f69c <_free_r>
 800f33a:	2000      	movs	r0, #0
 800f33c:	6360      	str	r0, [r4, #52]	; 0x34
 800f33e:	e7c1      	b.n	800f2c4 <__sflush_r+0x1c>
 800f340:	6a21      	ldr	r1, [r4, #32]
 800f342:	2301      	movs	r3, #1
 800f344:	4628      	mov	r0, r5
 800f346:	47b0      	blx	r6
 800f348:	1c41      	adds	r1, r0, #1
 800f34a:	d1c7      	bne.n	800f2dc <__sflush_r+0x34>
 800f34c:	682b      	ldr	r3, [r5, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d0c4      	beq.n	800f2dc <__sflush_r+0x34>
 800f352:	2b1d      	cmp	r3, #29
 800f354:	d001      	beq.n	800f35a <__sflush_r+0xb2>
 800f356:	2b16      	cmp	r3, #22
 800f358:	d101      	bne.n	800f35e <__sflush_r+0xb6>
 800f35a:	602f      	str	r7, [r5, #0]
 800f35c:	e7b1      	b.n	800f2c2 <__sflush_r+0x1a>
 800f35e:	89a3      	ldrh	r3, [r4, #12]
 800f360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f364:	81a3      	strh	r3, [r4, #12]
 800f366:	e7ad      	b.n	800f2c4 <__sflush_r+0x1c>
 800f368:	690f      	ldr	r7, [r1, #16]
 800f36a:	2f00      	cmp	r7, #0
 800f36c:	d0a9      	beq.n	800f2c2 <__sflush_r+0x1a>
 800f36e:	0793      	lsls	r3, r2, #30
 800f370:	680e      	ldr	r6, [r1, #0]
 800f372:	bf08      	it	eq
 800f374:	694b      	ldreq	r3, [r1, #20]
 800f376:	600f      	str	r7, [r1, #0]
 800f378:	bf18      	it	ne
 800f37a:	2300      	movne	r3, #0
 800f37c:	eba6 0807 	sub.w	r8, r6, r7
 800f380:	608b      	str	r3, [r1, #8]
 800f382:	f1b8 0f00 	cmp.w	r8, #0
 800f386:	dd9c      	ble.n	800f2c2 <__sflush_r+0x1a>
 800f388:	6a21      	ldr	r1, [r4, #32]
 800f38a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f38c:	4643      	mov	r3, r8
 800f38e:	463a      	mov	r2, r7
 800f390:	4628      	mov	r0, r5
 800f392:	47b0      	blx	r6
 800f394:	2800      	cmp	r0, #0
 800f396:	dc06      	bgt.n	800f3a6 <__sflush_r+0xfe>
 800f398:	89a3      	ldrh	r3, [r4, #12]
 800f39a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f39e:	81a3      	strh	r3, [r4, #12]
 800f3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a4:	e78e      	b.n	800f2c4 <__sflush_r+0x1c>
 800f3a6:	4407      	add	r7, r0
 800f3a8:	eba8 0800 	sub.w	r8, r8, r0
 800f3ac:	e7e9      	b.n	800f382 <__sflush_r+0xda>
 800f3ae:	bf00      	nop
 800f3b0:	20400001 	.word	0x20400001

0800f3b4 <_fflush_r>:
 800f3b4:	b538      	push	{r3, r4, r5, lr}
 800f3b6:	690b      	ldr	r3, [r1, #16]
 800f3b8:	4605      	mov	r5, r0
 800f3ba:	460c      	mov	r4, r1
 800f3bc:	b913      	cbnz	r3, 800f3c4 <_fflush_r+0x10>
 800f3be:	2500      	movs	r5, #0
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	bd38      	pop	{r3, r4, r5, pc}
 800f3c4:	b118      	cbz	r0, 800f3ce <_fflush_r+0x1a>
 800f3c6:	6983      	ldr	r3, [r0, #24]
 800f3c8:	b90b      	cbnz	r3, 800f3ce <_fflush_r+0x1a>
 800f3ca:	f000 f887 	bl	800f4dc <__sinit>
 800f3ce:	4b14      	ldr	r3, [pc, #80]	; (800f420 <_fflush_r+0x6c>)
 800f3d0:	429c      	cmp	r4, r3
 800f3d2:	d11b      	bne.n	800f40c <_fflush_r+0x58>
 800f3d4:	686c      	ldr	r4, [r5, #4]
 800f3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d0ef      	beq.n	800f3be <_fflush_r+0xa>
 800f3de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3e0:	07d0      	lsls	r0, r2, #31
 800f3e2:	d404      	bmi.n	800f3ee <_fflush_r+0x3a>
 800f3e4:	0599      	lsls	r1, r3, #22
 800f3e6:	d402      	bmi.n	800f3ee <_fflush_r+0x3a>
 800f3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3ea:	f000 f927 	bl	800f63c <__retarget_lock_acquire_recursive>
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	f7ff ff59 	bl	800f2a8 <__sflush_r>
 800f3f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3f8:	07da      	lsls	r2, r3, #31
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	d4e0      	bmi.n	800f3c0 <_fflush_r+0xc>
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	059b      	lsls	r3, r3, #22
 800f402:	d4dd      	bmi.n	800f3c0 <_fflush_r+0xc>
 800f404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f406:	f000 f91a 	bl	800f63e <__retarget_lock_release_recursive>
 800f40a:	e7d9      	b.n	800f3c0 <_fflush_r+0xc>
 800f40c:	4b05      	ldr	r3, [pc, #20]	; (800f424 <_fflush_r+0x70>)
 800f40e:	429c      	cmp	r4, r3
 800f410:	d101      	bne.n	800f416 <_fflush_r+0x62>
 800f412:	68ac      	ldr	r4, [r5, #8]
 800f414:	e7df      	b.n	800f3d6 <_fflush_r+0x22>
 800f416:	4b04      	ldr	r3, [pc, #16]	; (800f428 <_fflush_r+0x74>)
 800f418:	429c      	cmp	r4, r3
 800f41a:	bf08      	it	eq
 800f41c:	68ec      	ldreq	r4, [r5, #12]
 800f41e:	e7da      	b.n	800f3d6 <_fflush_r+0x22>
 800f420:	080103ac 	.word	0x080103ac
 800f424:	080103cc 	.word	0x080103cc
 800f428:	0801038c 	.word	0x0801038c

0800f42c <std>:
 800f42c:	2300      	movs	r3, #0
 800f42e:	b510      	push	{r4, lr}
 800f430:	4604      	mov	r4, r0
 800f432:	e9c0 3300 	strd	r3, r3, [r0]
 800f436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f43a:	6083      	str	r3, [r0, #8]
 800f43c:	8181      	strh	r1, [r0, #12]
 800f43e:	6643      	str	r3, [r0, #100]	; 0x64
 800f440:	81c2      	strh	r2, [r0, #14]
 800f442:	6183      	str	r3, [r0, #24]
 800f444:	4619      	mov	r1, r3
 800f446:	2208      	movs	r2, #8
 800f448:	305c      	adds	r0, #92	; 0x5c
 800f44a:	f7fd f94f 	bl	800c6ec <memset>
 800f44e:	4b05      	ldr	r3, [pc, #20]	; (800f464 <std+0x38>)
 800f450:	6263      	str	r3, [r4, #36]	; 0x24
 800f452:	4b05      	ldr	r3, [pc, #20]	; (800f468 <std+0x3c>)
 800f454:	62a3      	str	r3, [r4, #40]	; 0x28
 800f456:	4b05      	ldr	r3, [pc, #20]	; (800f46c <std+0x40>)
 800f458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f45a:	4b05      	ldr	r3, [pc, #20]	; (800f470 <std+0x44>)
 800f45c:	6224      	str	r4, [r4, #32]
 800f45e:	6323      	str	r3, [r4, #48]	; 0x30
 800f460:	bd10      	pop	{r4, pc}
 800f462:	bf00      	nop
 800f464:	0800cbd1 	.word	0x0800cbd1
 800f468:	0800cbf3 	.word	0x0800cbf3
 800f46c:	0800cc2b 	.word	0x0800cc2b
 800f470:	0800cc4f 	.word	0x0800cc4f

0800f474 <_cleanup_r>:
 800f474:	4901      	ldr	r1, [pc, #4]	; (800f47c <_cleanup_r+0x8>)
 800f476:	f000 b8c1 	b.w	800f5fc <_fwalk_reent>
 800f47a:	bf00      	nop
 800f47c:	0800f3b5 	.word	0x0800f3b5

0800f480 <__sfmoreglue>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	2268      	movs	r2, #104	; 0x68
 800f484:	1e4d      	subs	r5, r1, #1
 800f486:	4355      	muls	r5, r2
 800f488:	460e      	mov	r6, r1
 800f48a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f48e:	f7ff fb51 	bl	800eb34 <_malloc_r>
 800f492:	4604      	mov	r4, r0
 800f494:	b140      	cbz	r0, 800f4a8 <__sfmoreglue+0x28>
 800f496:	2100      	movs	r1, #0
 800f498:	e9c0 1600 	strd	r1, r6, [r0]
 800f49c:	300c      	adds	r0, #12
 800f49e:	60a0      	str	r0, [r4, #8]
 800f4a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4a4:	f7fd f922 	bl	800c6ec <memset>
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	bd70      	pop	{r4, r5, r6, pc}

0800f4ac <__sfp_lock_acquire>:
 800f4ac:	4801      	ldr	r0, [pc, #4]	; (800f4b4 <__sfp_lock_acquire+0x8>)
 800f4ae:	f000 b8c5 	b.w	800f63c <__retarget_lock_acquire_recursive>
 800f4b2:	bf00      	nop
 800f4b4:	2000248d 	.word	0x2000248d

0800f4b8 <__sfp_lock_release>:
 800f4b8:	4801      	ldr	r0, [pc, #4]	; (800f4c0 <__sfp_lock_release+0x8>)
 800f4ba:	f000 b8c0 	b.w	800f63e <__retarget_lock_release_recursive>
 800f4be:	bf00      	nop
 800f4c0:	2000248d 	.word	0x2000248d

0800f4c4 <__sinit_lock_acquire>:
 800f4c4:	4801      	ldr	r0, [pc, #4]	; (800f4cc <__sinit_lock_acquire+0x8>)
 800f4c6:	f000 b8b9 	b.w	800f63c <__retarget_lock_acquire_recursive>
 800f4ca:	bf00      	nop
 800f4cc:	2000248e 	.word	0x2000248e

0800f4d0 <__sinit_lock_release>:
 800f4d0:	4801      	ldr	r0, [pc, #4]	; (800f4d8 <__sinit_lock_release+0x8>)
 800f4d2:	f000 b8b4 	b.w	800f63e <__retarget_lock_release_recursive>
 800f4d6:	bf00      	nop
 800f4d8:	2000248e 	.word	0x2000248e

0800f4dc <__sinit>:
 800f4dc:	b510      	push	{r4, lr}
 800f4de:	4604      	mov	r4, r0
 800f4e0:	f7ff fff0 	bl	800f4c4 <__sinit_lock_acquire>
 800f4e4:	69a3      	ldr	r3, [r4, #24]
 800f4e6:	b11b      	cbz	r3, 800f4f0 <__sinit+0x14>
 800f4e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4ec:	f7ff bff0 	b.w	800f4d0 <__sinit_lock_release>
 800f4f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4f4:	6523      	str	r3, [r4, #80]	; 0x50
 800f4f6:	4b13      	ldr	r3, [pc, #76]	; (800f544 <__sinit+0x68>)
 800f4f8:	4a13      	ldr	r2, [pc, #76]	; (800f548 <__sinit+0x6c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f4fe:	42a3      	cmp	r3, r4
 800f500:	bf04      	itt	eq
 800f502:	2301      	moveq	r3, #1
 800f504:	61a3      	streq	r3, [r4, #24]
 800f506:	4620      	mov	r0, r4
 800f508:	f000 f820 	bl	800f54c <__sfp>
 800f50c:	6060      	str	r0, [r4, #4]
 800f50e:	4620      	mov	r0, r4
 800f510:	f000 f81c 	bl	800f54c <__sfp>
 800f514:	60a0      	str	r0, [r4, #8]
 800f516:	4620      	mov	r0, r4
 800f518:	f000 f818 	bl	800f54c <__sfp>
 800f51c:	2200      	movs	r2, #0
 800f51e:	60e0      	str	r0, [r4, #12]
 800f520:	2104      	movs	r1, #4
 800f522:	6860      	ldr	r0, [r4, #4]
 800f524:	f7ff ff82 	bl	800f42c <std>
 800f528:	68a0      	ldr	r0, [r4, #8]
 800f52a:	2201      	movs	r2, #1
 800f52c:	2109      	movs	r1, #9
 800f52e:	f7ff ff7d 	bl	800f42c <std>
 800f532:	68e0      	ldr	r0, [r4, #12]
 800f534:	2202      	movs	r2, #2
 800f536:	2112      	movs	r1, #18
 800f538:	f7ff ff78 	bl	800f42c <std>
 800f53c:	2301      	movs	r3, #1
 800f53e:	61a3      	str	r3, [r4, #24]
 800f540:	e7d2      	b.n	800f4e8 <__sinit+0xc>
 800f542:	bf00      	nop
 800f544:	0800ffb4 	.word	0x0800ffb4
 800f548:	0800f475 	.word	0x0800f475

0800f54c <__sfp>:
 800f54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54e:	4607      	mov	r7, r0
 800f550:	f7ff ffac 	bl	800f4ac <__sfp_lock_acquire>
 800f554:	4b1e      	ldr	r3, [pc, #120]	; (800f5d0 <__sfp+0x84>)
 800f556:	681e      	ldr	r6, [r3, #0]
 800f558:	69b3      	ldr	r3, [r6, #24]
 800f55a:	b913      	cbnz	r3, 800f562 <__sfp+0x16>
 800f55c:	4630      	mov	r0, r6
 800f55e:	f7ff ffbd 	bl	800f4dc <__sinit>
 800f562:	3648      	adds	r6, #72	; 0x48
 800f564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f568:	3b01      	subs	r3, #1
 800f56a:	d503      	bpl.n	800f574 <__sfp+0x28>
 800f56c:	6833      	ldr	r3, [r6, #0]
 800f56e:	b30b      	cbz	r3, 800f5b4 <__sfp+0x68>
 800f570:	6836      	ldr	r6, [r6, #0]
 800f572:	e7f7      	b.n	800f564 <__sfp+0x18>
 800f574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f578:	b9d5      	cbnz	r5, 800f5b0 <__sfp+0x64>
 800f57a:	4b16      	ldr	r3, [pc, #88]	; (800f5d4 <__sfp+0x88>)
 800f57c:	60e3      	str	r3, [r4, #12]
 800f57e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f582:	6665      	str	r5, [r4, #100]	; 0x64
 800f584:	f000 f859 	bl	800f63a <__retarget_lock_init_recursive>
 800f588:	f7ff ff96 	bl	800f4b8 <__sfp_lock_release>
 800f58c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f594:	6025      	str	r5, [r4, #0]
 800f596:	61a5      	str	r5, [r4, #24]
 800f598:	2208      	movs	r2, #8
 800f59a:	4629      	mov	r1, r5
 800f59c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5a0:	f7fd f8a4 	bl	800c6ec <memset>
 800f5a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5b0:	3468      	adds	r4, #104	; 0x68
 800f5b2:	e7d9      	b.n	800f568 <__sfp+0x1c>
 800f5b4:	2104      	movs	r1, #4
 800f5b6:	4638      	mov	r0, r7
 800f5b8:	f7ff ff62 	bl	800f480 <__sfmoreglue>
 800f5bc:	4604      	mov	r4, r0
 800f5be:	6030      	str	r0, [r6, #0]
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d1d5      	bne.n	800f570 <__sfp+0x24>
 800f5c4:	f7ff ff78 	bl	800f4b8 <__sfp_lock_release>
 800f5c8:	230c      	movs	r3, #12
 800f5ca:	603b      	str	r3, [r7, #0]
 800f5cc:	e7ee      	b.n	800f5ac <__sfp+0x60>
 800f5ce:	bf00      	nop
 800f5d0:	0800ffb4 	.word	0x0800ffb4
 800f5d4:	ffff0001 	.word	0xffff0001

0800f5d8 <fiprintf>:
 800f5d8:	b40e      	push	{r1, r2, r3}
 800f5da:	b503      	push	{r0, r1, lr}
 800f5dc:	4601      	mov	r1, r0
 800f5de:	ab03      	add	r3, sp, #12
 800f5e0:	4805      	ldr	r0, [pc, #20]	; (800f5f8 <fiprintf+0x20>)
 800f5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5e6:	6800      	ldr	r0, [r0, #0]
 800f5e8:	9301      	str	r3, [sp, #4]
 800f5ea:	f000 f8fb 	bl	800f7e4 <_vfiprintf_r>
 800f5ee:	b002      	add	sp, #8
 800f5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5f4:	b003      	add	sp, #12
 800f5f6:	4770      	bx	lr
 800f5f8:	20000010 	.word	0x20000010

0800f5fc <_fwalk_reent>:
 800f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f600:	4606      	mov	r6, r0
 800f602:	4688      	mov	r8, r1
 800f604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f608:	2700      	movs	r7, #0
 800f60a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f60e:	f1b9 0901 	subs.w	r9, r9, #1
 800f612:	d505      	bpl.n	800f620 <_fwalk_reent+0x24>
 800f614:	6824      	ldr	r4, [r4, #0]
 800f616:	2c00      	cmp	r4, #0
 800f618:	d1f7      	bne.n	800f60a <_fwalk_reent+0xe>
 800f61a:	4638      	mov	r0, r7
 800f61c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f620:	89ab      	ldrh	r3, [r5, #12]
 800f622:	2b01      	cmp	r3, #1
 800f624:	d907      	bls.n	800f636 <_fwalk_reent+0x3a>
 800f626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f62a:	3301      	adds	r3, #1
 800f62c:	d003      	beq.n	800f636 <_fwalk_reent+0x3a>
 800f62e:	4629      	mov	r1, r5
 800f630:	4630      	mov	r0, r6
 800f632:	47c0      	blx	r8
 800f634:	4307      	orrs	r7, r0
 800f636:	3568      	adds	r5, #104	; 0x68
 800f638:	e7e9      	b.n	800f60e <_fwalk_reent+0x12>

0800f63a <__retarget_lock_init_recursive>:
 800f63a:	4770      	bx	lr

0800f63c <__retarget_lock_acquire_recursive>:
 800f63c:	4770      	bx	lr

0800f63e <__retarget_lock_release_recursive>:
 800f63e:	4770      	bx	lr

0800f640 <malloc>:
 800f640:	4b02      	ldr	r3, [pc, #8]	; (800f64c <malloc+0xc>)
 800f642:	4601      	mov	r1, r0
 800f644:	6818      	ldr	r0, [r3, #0]
 800f646:	f7ff ba75 	b.w	800eb34 <_malloc_r>
 800f64a:	bf00      	nop
 800f64c:	20000010 	.word	0x20000010

0800f650 <memmove>:
 800f650:	4288      	cmp	r0, r1
 800f652:	b510      	push	{r4, lr}
 800f654:	eb01 0402 	add.w	r4, r1, r2
 800f658:	d902      	bls.n	800f660 <memmove+0x10>
 800f65a:	4284      	cmp	r4, r0
 800f65c:	4623      	mov	r3, r4
 800f65e:	d807      	bhi.n	800f670 <memmove+0x20>
 800f660:	1e43      	subs	r3, r0, #1
 800f662:	42a1      	cmp	r1, r4
 800f664:	d008      	beq.n	800f678 <memmove+0x28>
 800f666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f66e:	e7f8      	b.n	800f662 <memmove+0x12>
 800f670:	4402      	add	r2, r0
 800f672:	4601      	mov	r1, r0
 800f674:	428a      	cmp	r2, r1
 800f676:	d100      	bne.n	800f67a <memmove+0x2a>
 800f678:	bd10      	pop	{r4, pc}
 800f67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f67e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f682:	e7f7      	b.n	800f674 <memmove+0x24>

0800f684 <__malloc_lock>:
 800f684:	4801      	ldr	r0, [pc, #4]	; (800f68c <__malloc_lock+0x8>)
 800f686:	f7ff bfd9 	b.w	800f63c <__retarget_lock_acquire_recursive>
 800f68a:	bf00      	nop
 800f68c:	2000248c 	.word	0x2000248c

0800f690 <__malloc_unlock>:
 800f690:	4801      	ldr	r0, [pc, #4]	; (800f698 <__malloc_unlock+0x8>)
 800f692:	f7ff bfd4 	b.w	800f63e <__retarget_lock_release_recursive>
 800f696:	bf00      	nop
 800f698:	2000248c 	.word	0x2000248c

0800f69c <_free_r>:
 800f69c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f69e:	2900      	cmp	r1, #0
 800f6a0:	d044      	beq.n	800f72c <_free_r+0x90>
 800f6a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6a6:	9001      	str	r0, [sp, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f6ae:	bfb8      	it	lt
 800f6b0:	18e4      	addlt	r4, r4, r3
 800f6b2:	f7ff ffe7 	bl	800f684 <__malloc_lock>
 800f6b6:	4a1e      	ldr	r2, [pc, #120]	; (800f730 <_free_r+0x94>)
 800f6b8:	9801      	ldr	r0, [sp, #4]
 800f6ba:	6813      	ldr	r3, [r2, #0]
 800f6bc:	b933      	cbnz	r3, 800f6cc <_free_r+0x30>
 800f6be:	6063      	str	r3, [r4, #4]
 800f6c0:	6014      	str	r4, [r2, #0]
 800f6c2:	b003      	add	sp, #12
 800f6c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f6c8:	f7ff bfe2 	b.w	800f690 <__malloc_unlock>
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	d908      	bls.n	800f6e2 <_free_r+0x46>
 800f6d0:	6825      	ldr	r5, [r4, #0]
 800f6d2:	1961      	adds	r1, r4, r5
 800f6d4:	428b      	cmp	r3, r1
 800f6d6:	bf01      	itttt	eq
 800f6d8:	6819      	ldreq	r1, [r3, #0]
 800f6da:	685b      	ldreq	r3, [r3, #4]
 800f6dc:	1949      	addeq	r1, r1, r5
 800f6de:	6021      	streq	r1, [r4, #0]
 800f6e0:	e7ed      	b.n	800f6be <_free_r+0x22>
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	b10b      	cbz	r3, 800f6ec <_free_r+0x50>
 800f6e8:	42a3      	cmp	r3, r4
 800f6ea:	d9fa      	bls.n	800f6e2 <_free_r+0x46>
 800f6ec:	6811      	ldr	r1, [r2, #0]
 800f6ee:	1855      	adds	r5, r2, r1
 800f6f0:	42a5      	cmp	r5, r4
 800f6f2:	d10b      	bne.n	800f70c <_free_r+0x70>
 800f6f4:	6824      	ldr	r4, [r4, #0]
 800f6f6:	4421      	add	r1, r4
 800f6f8:	1854      	adds	r4, r2, r1
 800f6fa:	42a3      	cmp	r3, r4
 800f6fc:	6011      	str	r1, [r2, #0]
 800f6fe:	d1e0      	bne.n	800f6c2 <_free_r+0x26>
 800f700:	681c      	ldr	r4, [r3, #0]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	6053      	str	r3, [r2, #4]
 800f706:	4421      	add	r1, r4
 800f708:	6011      	str	r1, [r2, #0]
 800f70a:	e7da      	b.n	800f6c2 <_free_r+0x26>
 800f70c:	d902      	bls.n	800f714 <_free_r+0x78>
 800f70e:	230c      	movs	r3, #12
 800f710:	6003      	str	r3, [r0, #0]
 800f712:	e7d6      	b.n	800f6c2 <_free_r+0x26>
 800f714:	6825      	ldr	r5, [r4, #0]
 800f716:	1961      	adds	r1, r4, r5
 800f718:	428b      	cmp	r3, r1
 800f71a:	bf04      	itt	eq
 800f71c:	6819      	ldreq	r1, [r3, #0]
 800f71e:	685b      	ldreq	r3, [r3, #4]
 800f720:	6063      	str	r3, [r4, #4]
 800f722:	bf04      	itt	eq
 800f724:	1949      	addeq	r1, r1, r5
 800f726:	6021      	streq	r1, [r4, #0]
 800f728:	6054      	str	r4, [r2, #4]
 800f72a:	e7ca      	b.n	800f6c2 <_free_r+0x26>
 800f72c:	b003      	add	sp, #12
 800f72e:	bd30      	pop	{r4, r5, pc}
 800f730:	20002480 	.word	0x20002480

0800f734 <_realloc_r>:
 800f734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f738:	4680      	mov	r8, r0
 800f73a:	4614      	mov	r4, r2
 800f73c:	460e      	mov	r6, r1
 800f73e:	b921      	cbnz	r1, 800f74a <_realloc_r+0x16>
 800f740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f744:	4611      	mov	r1, r2
 800f746:	f7ff b9f5 	b.w	800eb34 <_malloc_r>
 800f74a:	b92a      	cbnz	r2, 800f758 <_realloc_r+0x24>
 800f74c:	f7ff ffa6 	bl	800f69c <_free_r>
 800f750:	4625      	mov	r5, r4
 800f752:	4628      	mov	r0, r5
 800f754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f758:	f000 faa0 	bl	800fc9c <_malloc_usable_size_r>
 800f75c:	4284      	cmp	r4, r0
 800f75e:	4607      	mov	r7, r0
 800f760:	d802      	bhi.n	800f768 <_realloc_r+0x34>
 800f762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f766:	d812      	bhi.n	800f78e <_realloc_r+0x5a>
 800f768:	4621      	mov	r1, r4
 800f76a:	4640      	mov	r0, r8
 800f76c:	f7ff f9e2 	bl	800eb34 <_malloc_r>
 800f770:	4605      	mov	r5, r0
 800f772:	2800      	cmp	r0, #0
 800f774:	d0ed      	beq.n	800f752 <_realloc_r+0x1e>
 800f776:	42bc      	cmp	r4, r7
 800f778:	4622      	mov	r2, r4
 800f77a:	4631      	mov	r1, r6
 800f77c:	bf28      	it	cs
 800f77e:	463a      	movcs	r2, r7
 800f780:	f7fc ffa6 	bl	800c6d0 <memcpy>
 800f784:	4631      	mov	r1, r6
 800f786:	4640      	mov	r0, r8
 800f788:	f7ff ff88 	bl	800f69c <_free_r>
 800f78c:	e7e1      	b.n	800f752 <_realloc_r+0x1e>
 800f78e:	4635      	mov	r5, r6
 800f790:	e7df      	b.n	800f752 <_realloc_r+0x1e>

0800f792 <__sfputc_r>:
 800f792:	6893      	ldr	r3, [r2, #8]
 800f794:	3b01      	subs	r3, #1
 800f796:	2b00      	cmp	r3, #0
 800f798:	b410      	push	{r4}
 800f79a:	6093      	str	r3, [r2, #8]
 800f79c:	da08      	bge.n	800f7b0 <__sfputc_r+0x1e>
 800f79e:	6994      	ldr	r4, [r2, #24]
 800f7a0:	42a3      	cmp	r3, r4
 800f7a2:	db01      	blt.n	800f7a8 <__sfputc_r+0x16>
 800f7a4:	290a      	cmp	r1, #10
 800f7a6:	d103      	bne.n	800f7b0 <__sfputc_r+0x1e>
 800f7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7ac:	f000 b94a 	b.w	800fa44 <__swbuf_r>
 800f7b0:	6813      	ldr	r3, [r2, #0]
 800f7b2:	1c58      	adds	r0, r3, #1
 800f7b4:	6010      	str	r0, [r2, #0]
 800f7b6:	7019      	strb	r1, [r3, #0]
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7be:	4770      	bx	lr

0800f7c0 <__sfputs_r>:
 800f7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c2:	4606      	mov	r6, r0
 800f7c4:	460f      	mov	r7, r1
 800f7c6:	4614      	mov	r4, r2
 800f7c8:	18d5      	adds	r5, r2, r3
 800f7ca:	42ac      	cmp	r4, r5
 800f7cc:	d101      	bne.n	800f7d2 <__sfputs_r+0x12>
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e007      	b.n	800f7e2 <__sfputs_r+0x22>
 800f7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7d6:	463a      	mov	r2, r7
 800f7d8:	4630      	mov	r0, r6
 800f7da:	f7ff ffda 	bl	800f792 <__sfputc_r>
 800f7de:	1c43      	adds	r3, r0, #1
 800f7e0:	d1f3      	bne.n	800f7ca <__sfputs_r+0xa>
 800f7e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f7e4 <_vfiprintf_r>:
 800f7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	b09d      	sub	sp, #116	; 0x74
 800f7ec:	4614      	mov	r4, r2
 800f7ee:	4698      	mov	r8, r3
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	b118      	cbz	r0, 800f7fc <_vfiprintf_r+0x18>
 800f7f4:	6983      	ldr	r3, [r0, #24]
 800f7f6:	b90b      	cbnz	r3, 800f7fc <_vfiprintf_r+0x18>
 800f7f8:	f7ff fe70 	bl	800f4dc <__sinit>
 800f7fc:	4b89      	ldr	r3, [pc, #548]	; (800fa24 <_vfiprintf_r+0x240>)
 800f7fe:	429d      	cmp	r5, r3
 800f800:	d11b      	bne.n	800f83a <_vfiprintf_r+0x56>
 800f802:	6875      	ldr	r5, [r6, #4]
 800f804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f806:	07d9      	lsls	r1, r3, #31
 800f808:	d405      	bmi.n	800f816 <_vfiprintf_r+0x32>
 800f80a:	89ab      	ldrh	r3, [r5, #12]
 800f80c:	059a      	lsls	r2, r3, #22
 800f80e:	d402      	bmi.n	800f816 <_vfiprintf_r+0x32>
 800f810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f812:	f7ff ff13 	bl	800f63c <__retarget_lock_acquire_recursive>
 800f816:	89ab      	ldrh	r3, [r5, #12]
 800f818:	071b      	lsls	r3, r3, #28
 800f81a:	d501      	bpl.n	800f820 <_vfiprintf_r+0x3c>
 800f81c:	692b      	ldr	r3, [r5, #16]
 800f81e:	b9eb      	cbnz	r3, 800f85c <_vfiprintf_r+0x78>
 800f820:	4629      	mov	r1, r5
 800f822:	4630      	mov	r0, r6
 800f824:	f000 f960 	bl	800fae8 <__swsetup_r>
 800f828:	b1c0      	cbz	r0, 800f85c <_vfiprintf_r+0x78>
 800f82a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f82c:	07dc      	lsls	r4, r3, #31
 800f82e:	d50e      	bpl.n	800f84e <_vfiprintf_r+0x6a>
 800f830:	f04f 30ff 	mov.w	r0, #4294967295
 800f834:	b01d      	add	sp, #116	; 0x74
 800f836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f83a:	4b7b      	ldr	r3, [pc, #492]	; (800fa28 <_vfiprintf_r+0x244>)
 800f83c:	429d      	cmp	r5, r3
 800f83e:	d101      	bne.n	800f844 <_vfiprintf_r+0x60>
 800f840:	68b5      	ldr	r5, [r6, #8]
 800f842:	e7df      	b.n	800f804 <_vfiprintf_r+0x20>
 800f844:	4b79      	ldr	r3, [pc, #484]	; (800fa2c <_vfiprintf_r+0x248>)
 800f846:	429d      	cmp	r5, r3
 800f848:	bf08      	it	eq
 800f84a:	68f5      	ldreq	r5, [r6, #12]
 800f84c:	e7da      	b.n	800f804 <_vfiprintf_r+0x20>
 800f84e:	89ab      	ldrh	r3, [r5, #12]
 800f850:	0598      	lsls	r0, r3, #22
 800f852:	d4ed      	bmi.n	800f830 <_vfiprintf_r+0x4c>
 800f854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f856:	f7ff fef2 	bl	800f63e <__retarget_lock_release_recursive>
 800f85a:	e7e9      	b.n	800f830 <_vfiprintf_r+0x4c>
 800f85c:	2300      	movs	r3, #0
 800f85e:	9309      	str	r3, [sp, #36]	; 0x24
 800f860:	2320      	movs	r3, #32
 800f862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f866:	f8cd 800c 	str.w	r8, [sp, #12]
 800f86a:	2330      	movs	r3, #48	; 0x30
 800f86c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa30 <_vfiprintf_r+0x24c>
 800f870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f874:	f04f 0901 	mov.w	r9, #1
 800f878:	4623      	mov	r3, r4
 800f87a:	469a      	mov	sl, r3
 800f87c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f880:	b10a      	cbz	r2, 800f886 <_vfiprintf_r+0xa2>
 800f882:	2a25      	cmp	r2, #37	; 0x25
 800f884:	d1f9      	bne.n	800f87a <_vfiprintf_r+0x96>
 800f886:	ebba 0b04 	subs.w	fp, sl, r4
 800f88a:	d00b      	beq.n	800f8a4 <_vfiprintf_r+0xc0>
 800f88c:	465b      	mov	r3, fp
 800f88e:	4622      	mov	r2, r4
 800f890:	4629      	mov	r1, r5
 800f892:	4630      	mov	r0, r6
 800f894:	f7ff ff94 	bl	800f7c0 <__sfputs_r>
 800f898:	3001      	adds	r0, #1
 800f89a:	f000 80aa 	beq.w	800f9f2 <_vfiprintf_r+0x20e>
 800f89e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8a0:	445a      	add	r2, fp
 800f8a2:	9209      	str	r2, [sp, #36]	; 0x24
 800f8a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 80a2 	beq.w	800f9f2 <_vfiprintf_r+0x20e>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8b8:	f10a 0a01 	add.w	sl, sl, #1
 800f8bc:	9304      	str	r3, [sp, #16]
 800f8be:	9307      	str	r3, [sp, #28]
 800f8c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8c4:	931a      	str	r3, [sp, #104]	; 0x68
 800f8c6:	4654      	mov	r4, sl
 800f8c8:	2205      	movs	r2, #5
 800f8ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8ce:	4858      	ldr	r0, [pc, #352]	; (800fa30 <_vfiprintf_r+0x24c>)
 800f8d0:	f7f0 fc86 	bl	80001e0 <memchr>
 800f8d4:	9a04      	ldr	r2, [sp, #16]
 800f8d6:	b9d8      	cbnz	r0, 800f910 <_vfiprintf_r+0x12c>
 800f8d8:	06d1      	lsls	r1, r2, #27
 800f8da:	bf44      	itt	mi
 800f8dc:	2320      	movmi	r3, #32
 800f8de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8e2:	0713      	lsls	r3, r2, #28
 800f8e4:	bf44      	itt	mi
 800f8e6:	232b      	movmi	r3, #43	; 0x2b
 800f8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800f8f2:	d015      	beq.n	800f920 <_vfiprintf_r+0x13c>
 800f8f4:	9a07      	ldr	r2, [sp, #28]
 800f8f6:	4654      	mov	r4, sl
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	f04f 0c0a 	mov.w	ip, #10
 800f8fe:	4621      	mov	r1, r4
 800f900:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f904:	3b30      	subs	r3, #48	; 0x30
 800f906:	2b09      	cmp	r3, #9
 800f908:	d94e      	bls.n	800f9a8 <_vfiprintf_r+0x1c4>
 800f90a:	b1b0      	cbz	r0, 800f93a <_vfiprintf_r+0x156>
 800f90c:	9207      	str	r2, [sp, #28]
 800f90e:	e014      	b.n	800f93a <_vfiprintf_r+0x156>
 800f910:	eba0 0308 	sub.w	r3, r0, r8
 800f914:	fa09 f303 	lsl.w	r3, r9, r3
 800f918:	4313      	orrs	r3, r2
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	46a2      	mov	sl, r4
 800f91e:	e7d2      	b.n	800f8c6 <_vfiprintf_r+0xe2>
 800f920:	9b03      	ldr	r3, [sp, #12]
 800f922:	1d19      	adds	r1, r3, #4
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	9103      	str	r1, [sp, #12]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	bfbb      	ittet	lt
 800f92c:	425b      	neglt	r3, r3
 800f92e:	f042 0202 	orrlt.w	r2, r2, #2
 800f932:	9307      	strge	r3, [sp, #28]
 800f934:	9307      	strlt	r3, [sp, #28]
 800f936:	bfb8      	it	lt
 800f938:	9204      	strlt	r2, [sp, #16]
 800f93a:	7823      	ldrb	r3, [r4, #0]
 800f93c:	2b2e      	cmp	r3, #46	; 0x2e
 800f93e:	d10c      	bne.n	800f95a <_vfiprintf_r+0x176>
 800f940:	7863      	ldrb	r3, [r4, #1]
 800f942:	2b2a      	cmp	r3, #42	; 0x2a
 800f944:	d135      	bne.n	800f9b2 <_vfiprintf_r+0x1ce>
 800f946:	9b03      	ldr	r3, [sp, #12]
 800f948:	1d1a      	adds	r2, r3, #4
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	9203      	str	r2, [sp, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	bfb8      	it	lt
 800f952:	f04f 33ff 	movlt.w	r3, #4294967295
 800f956:	3402      	adds	r4, #2
 800f958:	9305      	str	r3, [sp, #20]
 800f95a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa40 <_vfiprintf_r+0x25c>
 800f95e:	7821      	ldrb	r1, [r4, #0]
 800f960:	2203      	movs	r2, #3
 800f962:	4650      	mov	r0, sl
 800f964:	f7f0 fc3c 	bl	80001e0 <memchr>
 800f968:	b140      	cbz	r0, 800f97c <_vfiprintf_r+0x198>
 800f96a:	2340      	movs	r3, #64	; 0x40
 800f96c:	eba0 000a 	sub.w	r0, r0, sl
 800f970:	fa03 f000 	lsl.w	r0, r3, r0
 800f974:	9b04      	ldr	r3, [sp, #16]
 800f976:	4303      	orrs	r3, r0
 800f978:	3401      	adds	r4, #1
 800f97a:	9304      	str	r3, [sp, #16]
 800f97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f980:	482c      	ldr	r0, [pc, #176]	; (800fa34 <_vfiprintf_r+0x250>)
 800f982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f986:	2206      	movs	r2, #6
 800f988:	f7f0 fc2a 	bl	80001e0 <memchr>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d03f      	beq.n	800fa10 <_vfiprintf_r+0x22c>
 800f990:	4b29      	ldr	r3, [pc, #164]	; (800fa38 <_vfiprintf_r+0x254>)
 800f992:	bb1b      	cbnz	r3, 800f9dc <_vfiprintf_r+0x1f8>
 800f994:	9b03      	ldr	r3, [sp, #12]
 800f996:	3307      	adds	r3, #7
 800f998:	f023 0307 	bic.w	r3, r3, #7
 800f99c:	3308      	adds	r3, #8
 800f99e:	9303      	str	r3, [sp, #12]
 800f9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9a2:	443b      	add	r3, r7
 800f9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a6:	e767      	b.n	800f878 <_vfiprintf_r+0x94>
 800f9a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9ac:	460c      	mov	r4, r1
 800f9ae:	2001      	movs	r0, #1
 800f9b0:	e7a5      	b.n	800f8fe <_vfiprintf_r+0x11a>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	3401      	adds	r4, #1
 800f9b6:	9305      	str	r3, [sp, #20]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	f04f 0c0a 	mov.w	ip, #10
 800f9be:	4620      	mov	r0, r4
 800f9c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9c4:	3a30      	subs	r2, #48	; 0x30
 800f9c6:	2a09      	cmp	r2, #9
 800f9c8:	d903      	bls.n	800f9d2 <_vfiprintf_r+0x1ee>
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d0c5      	beq.n	800f95a <_vfiprintf_r+0x176>
 800f9ce:	9105      	str	r1, [sp, #20]
 800f9d0:	e7c3      	b.n	800f95a <_vfiprintf_r+0x176>
 800f9d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e7f0      	b.n	800f9be <_vfiprintf_r+0x1da>
 800f9dc:	ab03      	add	r3, sp, #12
 800f9de:	9300      	str	r3, [sp, #0]
 800f9e0:	462a      	mov	r2, r5
 800f9e2:	4b16      	ldr	r3, [pc, #88]	; (800fa3c <_vfiprintf_r+0x258>)
 800f9e4:	a904      	add	r1, sp, #16
 800f9e6:	4630      	mov	r0, r6
 800f9e8:	f3af 8000 	nop.w
 800f9ec:	4607      	mov	r7, r0
 800f9ee:	1c78      	adds	r0, r7, #1
 800f9f0:	d1d6      	bne.n	800f9a0 <_vfiprintf_r+0x1bc>
 800f9f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9f4:	07d9      	lsls	r1, r3, #31
 800f9f6:	d405      	bmi.n	800fa04 <_vfiprintf_r+0x220>
 800f9f8:	89ab      	ldrh	r3, [r5, #12]
 800f9fa:	059a      	lsls	r2, r3, #22
 800f9fc:	d402      	bmi.n	800fa04 <_vfiprintf_r+0x220>
 800f9fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa00:	f7ff fe1d 	bl	800f63e <__retarget_lock_release_recursive>
 800fa04:	89ab      	ldrh	r3, [r5, #12]
 800fa06:	065b      	lsls	r3, r3, #25
 800fa08:	f53f af12 	bmi.w	800f830 <_vfiprintf_r+0x4c>
 800fa0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa0e:	e711      	b.n	800f834 <_vfiprintf_r+0x50>
 800fa10:	ab03      	add	r3, sp, #12
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	462a      	mov	r2, r5
 800fa16:	4b09      	ldr	r3, [pc, #36]	; (800fa3c <_vfiprintf_r+0x258>)
 800fa18:	a904      	add	r1, sp, #16
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f7ff fac8 	bl	800efb0 <_printf_i>
 800fa20:	e7e4      	b.n	800f9ec <_vfiprintf_r+0x208>
 800fa22:	bf00      	nop
 800fa24:	080103ac 	.word	0x080103ac
 800fa28:	080103cc 	.word	0x080103cc
 800fa2c:	0801038c 	.word	0x0801038c
 800fa30:	0801031c 	.word	0x0801031c
 800fa34:	08010326 	.word	0x08010326
 800fa38:	00000000 	.word	0x00000000
 800fa3c:	0800f7c1 	.word	0x0800f7c1
 800fa40:	08010322 	.word	0x08010322

0800fa44 <__swbuf_r>:
 800fa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa46:	460e      	mov	r6, r1
 800fa48:	4614      	mov	r4, r2
 800fa4a:	4605      	mov	r5, r0
 800fa4c:	b118      	cbz	r0, 800fa56 <__swbuf_r+0x12>
 800fa4e:	6983      	ldr	r3, [r0, #24]
 800fa50:	b90b      	cbnz	r3, 800fa56 <__swbuf_r+0x12>
 800fa52:	f7ff fd43 	bl	800f4dc <__sinit>
 800fa56:	4b21      	ldr	r3, [pc, #132]	; (800fadc <__swbuf_r+0x98>)
 800fa58:	429c      	cmp	r4, r3
 800fa5a:	d12b      	bne.n	800fab4 <__swbuf_r+0x70>
 800fa5c:	686c      	ldr	r4, [r5, #4]
 800fa5e:	69a3      	ldr	r3, [r4, #24]
 800fa60:	60a3      	str	r3, [r4, #8]
 800fa62:	89a3      	ldrh	r3, [r4, #12]
 800fa64:	071a      	lsls	r2, r3, #28
 800fa66:	d52f      	bpl.n	800fac8 <__swbuf_r+0x84>
 800fa68:	6923      	ldr	r3, [r4, #16]
 800fa6a:	b36b      	cbz	r3, 800fac8 <__swbuf_r+0x84>
 800fa6c:	6923      	ldr	r3, [r4, #16]
 800fa6e:	6820      	ldr	r0, [r4, #0]
 800fa70:	1ac0      	subs	r0, r0, r3
 800fa72:	6963      	ldr	r3, [r4, #20]
 800fa74:	b2f6      	uxtb	r6, r6
 800fa76:	4283      	cmp	r3, r0
 800fa78:	4637      	mov	r7, r6
 800fa7a:	dc04      	bgt.n	800fa86 <__swbuf_r+0x42>
 800fa7c:	4621      	mov	r1, r4
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f7ff fc98 	bl	800f3b4 <_fflush_r>
 800fa84:	bb30      	cbnz	r0, 800fad4 <__swbuf_r+0x90>
 800fa86:	68a3      	ldr	r3, [r4, #8]
 800fa88:	3b01      	subs	r3, #1
 800fa8a:	60a3      	str	r3, [r4, #8]
 800fa8c:	6823      	ldr	r3, [r4, #0]
 800fa8e:	1c5a      	adds	r2, r3, #1
 800fa90:	6022      	str	r2, [r4, #0]
 800fa92:	701e      	strb	r6, [r3, #0]
 800fa94:	6963      	ldr	r3, [r4, #20]
 800fa96:	3001      	adds	r0, #1
 800fa98:	4283      	cmp	r3, r0
 800fa9a:	d004      	beq.n	800faa6 <__swbuf_r+0x62>
 800fa9c:	89a3      	ldrh	r3, [r4, #12]
 800fa9e:	07db      	lsls	r3, r3, #31
 800faa0:	d506      	bpl.n	800fab0 <__swbuf_r+0x6c>
 800faa2:	2e0a      	cmp	r6, #10
 800faa4:	d104      	bne.n	800fab0 <__swbuf_r+0x6c>
 800faa6:	4621      	mov	r1, r4
 800faa8:	4628      	mov	r0, r5
 800faaa:	f7ff fc83 	bl	800f3b4 <_fflush_r>
 800faae:	b988      	cbnz	r0, 800fad4 <__swbuf_r+0x90>
 800fab0:	4638      	mov	r0, r7
 800fab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fab4:	4b0a      	ldr	r3, [pc, #40]	; (800fae0 <__swbuf_r+0x9c>)
 800fab6:	429c      	cmp	r4, r3
 800fab8:	d101      	bne.n	800fabe <__swbuf_r+0x7a>
 800faba:	68ac      	ldr	r4, [r5, #8]
 800fabc:	e7cf      	b.n	800fa5e <__swbuf_r+0x1a>
 800fabe:	4b09      	ldr	r3, [pc, #36]	; (800fae4 <__swbuf_r+0xa0>)
 800fac0:	429c      	cmp	r4, r3
 800fac2:	bf08      	it	eq
 800fac4:	68ec      	ldreq	r4, [r5, #12]
 800fac6:	e7ca      	b.n	800fa5e <__swbuf_r+0x1a>
 800fac8:	4621      	mov	r1, r4
 800faca:	4628      	mov	r0, r5
 800facc:	f000 f80c 	bl	800fae8 <__swsetup_r>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	d0cb      	beq.n	800fa6c <__swbuf_r+0x28>
 800fad4:	f04f 37ff 	mov.w	r7, #4294967295
 800fad8:	e7ea      	b.n	800fab0 <__swbuf_r+0x6c>
 800fada:	bf00      	nop
 800fadc:	080103ac 	.word	0x080103ac
 800fae0:	080103cc 	.word	0x080103cc
 800fae4:	0801038c 	.word	0x0801038c

0800fae8 <__swsetup_r>:
 800fae8:	4b32      	ldr	r3, [pc, #200]	; (800fbb4 <__swsetup_r+0xcc>)
 800faea:	b570      	push	{r4, r5, r6, lr}
 800faec:	681d      	ldr	r5, [r3, #0]
 800faee:	4606      	mov	r6, r0
 800faf0:	460c      	mov	r4, r1
 800faf2:	b125      	cbz	r5, 800fafe <__swsetup_r+0x16>
 800faf4:	69ab      	ldr	r3, [r5, #24]
 800faf6:	b913      	cbnz	r3, 800fafe <__swsetup_r+0x16>
 800faf8:	4628      	mov	r0, r5
 800fafa:	f7ff fcef 	bl	800f4dc <__sinit>
 800fafe:	4b2e      	ldr	r3, [pc, #184]	; (800fbb8 <__swsetup_r+0xd0>)
 800fb00:	429c      	cmp	r4, r3
 800fb02:	d10f      	bne.n	800fb24 <__swsetup_r+0x3c>
 800fb04:	686c      	ldr	r4, [r5, #4]
 800fb06:	89a3      	ldrh	r3, [r4, #12]
 800fb08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb0c:	0719      	lsls	r1, r3, #28
 800fb0e:	d42c      	bmi.n	800fb6a <__swsetup_r+0x82>
 800fb10:	06dd      	lsls	r5, r3, #27
 800fb12:	d411      	bmi.n	800fb38 <__swsetup_r+0x50>
 800fb14:	2309      	movs	r3, #9
 800fb16:	6033      	str	r3, [r6, #0]
 800fb18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb1c:	81a3      	strh	r3, [r4, #12]
 800fb1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fb22:	e03e      	b.n	800fba2 <__swsetup_r+0xba>
 800fb24:	4b25      	ldr	r3, [pc, #148]	; (800fbbc <__swsetup_r+0xd4>)
 800fb26:	429c      	cmp	r4, r3
 800fb28:	d101      	bne.n	800fb2e <__swsetup_r+0x46>
 800fb2a:	68ac      	ldr	r4, [r5, #8]
 800fb2c:	e7eb      	b.n	800fb06 <__swsetup_r+0x1e>
 800fb2e:	4b24      	ldr	r3, [pc, #144]	; (800fbc0 <__swsetup_r+0xd8>)
 800fb30:	429c      	cmp	r4, r3
 800fb32:	bf08      	it	eq
 800fb34:	68ec      	ldreq	r4, [r5, #12]
 800fb36:	e7e6      	b.n	800fb06 <__swsetup_r+0x1e>
 800fb38:	0758      	lsls	r0, r3, #29
 800fb3a:	d512      	bpl.n	800fb62 <__swsetup_r+0x7a>
 800fb3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb3e:	b141      	cbz	r1, 800fb52 <__swsetup_r+0x6a>
 800fb40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb44:	4299      	cmp	r1, r3
 800fb46:	d002      	beq.n	800fb4e <__swsetup_r+0x66>
 800fb48:	4630      	mov	r0, r6
 800fb4a:	f7ff fda7 	bl	800f69c <_free_r>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	6363      	str	r3, [r4, #52]	; 0x34
 800fb52:	89a3      	ldrh	r3, [r4, #12]
 800fb54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb58:	81a3      	strh	r3, [r4, #12]
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	6063      	str	r3, [r4, #4]
 800fb5e:	6923      	ldr	r3, [r4, #16]
 800fb60:	6023      	str	r3, [r4, #0]
 800fb62:	89a3      	ldrh	r3, [r4, #12]
 800fb64:	f043 0308 	orr.w	r3, r3, #8
 800fb68:	81a3      	strh	r3, [r4, #12]
 800fb6a:	6923      	ldr	r3, [r4, #16]
 800fb6c:	b94b      	cbnz	r3, 800fb82 <__swsetup_r+0x9a>
 800fb6e:	89a3      	ldrh	r3, [r4, #12]
 800fb70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fb74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb78:	d003      	beq.n	800fb82 <__swsetup_r+0x9a>
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	4630      	mov	r0, r6
 800fb7e:	f000 f84d 	bl	800fc1c <__smakebuf_r>
 800fb82:	89a0      	ldrh	r0, [r4, #12]
 800fb84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb88:	f010 0301 	ands.w	r3, r0, #1
 800fb8c:	d00a      	beq.n	800fba4 <__swsetup_r+0xbc>
 800fb8e:	2300      	movs	r3, #0
 800fb90:	60a3      	str	r3, [r4, #8]
 800fb92:	6963      	ldr	r3, [r4, #20]
 800fb94:	425b      	negs	r3, r3
 800fb96:	61a3      	str	r3, [r4, #24]
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	b943      	cbnz	r3, 800fbae <__swsetup_r+0xc6>
 800fb9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fba0:	d1ba      	bne.n	800fb18 <__swsetup_r+0x30>
 800fba2:	bd70      	pop	{r4, r5, r6, pc}
 800fba4:	0781      	lsls	r1, r0, #30
 800fba6:	bf58      	it	pl
 800fba8:	6963      	ldrpl	r3, [r4, #20]
 800fbaa:	60a3      	str	r3, [r4, #8]
 800fbac:	e7f4      	b.n	800fb98 <__swsetup_r+0xb0>
 800fbae:	2000      	movs	r0, #0
 800fbb0:	e7f7      	b.n	800fba2 <__swsetup_r+0xba>
 800fbb2:	bf00      	nop
 800fbb4:	20000010 	.word	0x20000010
 800fbb8:	080103ac 	.word	0x080103ac
 800fbbc:	080103cc 	.word	0x080103cc
 800fbc0:	0801038c 	.word	0x0801038c

0800fbc4 <abort>:
 800fbc4:	b508      	push	{r3, lr}
 800fbc6:	2006      	movs	r0, #6
 800fbc8:	f000 f898 	bl	800fcfc <raise>
 800fbcc:	2001      	movs	r0, #1
 800fbce:	f7f2 ff67 	bl	8002aa0 <_exit>

0800fbd2 <__swhatbuf_r>:
 800fbd2:	b570      	push	{r4, r5, r6, lr}
 800fbd4:	460e      	mov	r6, r1
 800fbd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbda:	2900      	cmp	r1, #0
 800fbdc:	b096      	sub	sp, #88	; 0x58
 800fbde:	4614      	mov	r4, r2
 800fbe0:	461d      	mov	r5, r3
 800fbe2:	da08      	bge.n	800fbf6 <__swhatbuf_r+0x24>
 800fbe4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	602a      	str	r2, [r5, #0]
 800fbec:	061a      	lsls	r2, r3, #24
 800fbee:	d410      	bmi.n	800fc12 <__swhatbuf_r+0x40>
 800fbf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbf4:	e00e      	b.n	800fc14 <__swhatbuf_r+0x42>
 800fbf6:	466a      	mov	r2, sp
 800fbf8:	f000 f89c 	bl	800fd34 <_fstat_r>
 800fbfc:	2800      	cmp	r0, #0
 800fbfe:	dbf1      	blt.n	800fbe4 <__swhatbuf_r+0x12>
 800fc00:	9a01      	ldr	r2, [sp, #4]
 800fc02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc0a:	425a      	negs	r2, r3
 800fc0c:	415a      	adcs	r2, r3
 800fc0e:	602a      	str	r2, [r5, #0]
 800fc10:	e7ee      	b.n	800fbf0 <__swhatbuf_r+0x1e>
 800fc12:	2340      	movs	r3, #64	; 0x40
 800fc14:	2000      	movs	r0, #0
 800fc16:	6023      	str	r3, [r4, #0]
 800fc18:	b016      	add	sp, #88	; 0x58
 800fc1a:	bd70      	pop	{r4, r5, r6, pc}

0800fc1c <__smakebuf_r>:
 800fc1c:	898b      	ldrh	r3, [r1, #12]
 800fc1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc20:	079d      	lsls	r5, r3, #30
 800fc22:	4606      	mov	r6, r0
 800fc24:	460c      	mov	r4, r1
 800fc26:	d507      	bpl.n	800fc38 <__smakebuf_r+0x1c>
 800fc28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc2c:	6023      	str	r3, [r4, #0]
 800fc2e:	6123      	str	r3, [r4, #16]
 800fc30:	2301      	movs	r3, #1
 800fc32:	6163      	str	r3, [r4, #20]
 800fc34:	b002      	add	sp, #8
 800fc36:	bd70      	pop	{r4, r5, r6, pc}
 800fc38:	ab01      	add	r3, sp, #4
 800fc3a:	466a      	mov	r2, sp
 800fc3c:	f7ff ffc9 	bl	800fbd2 <__swhatbuf_r>
 800fc40:	9900      	ldr	r1, [sp, #0]
 800fc42:	4605      	mov	r5, r0
 800fc44:	4630      	mov	r0, r6
 800fc46:	f7fe ff75 	bl	800eb34 <_malloc_r>
 800fc4a:	b948      	cbnz	r0, 800fc60 <__smakebuf_r+0x44>
 800fc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc50:	059a      	lsls	r2, r3, #22
 800fc52:	d4ef      	bmi.n	800fc34 <__smakebuf_r+0x18>
 800fc54:	f023 0303 	bic.w	r3, r3, #3
 800fc58:	f043 0302 	orr.w	r3, r3, #2
 800fc5c:	81a3      	strh	r3, [r4, #12]
 800fc5e:	e7e3      	b.n	800fc28 <__smakebuf_r+0xc>
 800fc60:	4b0d      	ldr	r3, [pc, #52]	; (800fc98 <__smakebuf_r+0x7c>)
 800fc62:	62b3      	str	r3, [r6, #40]	; 0x28
 800fc64:	89a3      	ldrh	r3, [r4, #12]
 800fc66:	6020      	str	r0, [r4, #0]
 800fc68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc6c:	81a3      	strh	r3, [r4, #12]
 800fc6e:	9b00      	ldr	r3, [sp, #0]
 800fc70:	6163      	str	r3, [r4, #20]
 800fc72:	9b01      	ldr	r3, [sp, #4]
 800fc74:	6120      	str	r0, [r4, #16]
 800fc76:	b15b      	cbz	r3, 800fc90 <__smakebuf_r+0x74>
 800fc78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc7c:	4630      	mov	r0, r6
 800fc7e:	f000 f86b 	bl	800fd58 <_isatty_r>
 800fc82:	b128      	cbz	r0, 800fc90 <__smakebuf_r+0x74>
 800fc84:	89a3      	ldrh	r3, [r4, #12]
 800fc86:	f023 0303 	bic.w	r3, r3, #3
 800fc8a:	f043 0301 	orr.w	r3, r3, #1
 800fc8e:	81a3      	strh	r3, [r4, #12]
 800fc90:	89a0      	ldrh	r0, [r4, #12]
 800fc92:	4305      	orrs	r5, r0
 800fc94:	81a5      	strh	r5, [r4, #12]
 800fc96:	e7cd      	b.n	800fc34 <__smakebuf_r+0x18>
 800fc98:	0800f475 	.word	0x0800f475

0800fc9c <_malloc_usable_size_r>:
 800fc9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fca0:	1f18      	subs	r0, r3, #4
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	bfbc      	itt	lt
 800fca6:	580b      	ldrlt	r3, [r1, r0]
 800fca8:	18c0      	addlt	r0, r0, r3
 800fcaa:	4770      	bx	lr

0800fcac <_raise_r>:
 800fcac:	291f      	cmp	r1, #31
 800fcae:	b538      	push	{r3, r4, r5, lr}
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	460d      	mov	r5, r1
 800fcb4:	d904      	bls.n	800fcc0 <_raise_r+0x14>
 800fcb6:	2316      	movs	r3, #22
 800fcb8:	6003      	str	r3, [r0, #0]
 800fcba:	f04f 30ff 	mov.w	r0, #4294967295
 800fcbe:	bd38      	pop	{r3, r4, r5, pc}
 800fcc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fcc2:	b112      	cbz	r2, 800fcca <_raise_r+0x1e>
 800fcc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcc8:	b94b      	cbnz	r3, 800fcde <_raise_r+0x32>
 800fcca:	4620      	mov	r0, r4
 800fccc:	f000 f830 	bl	800fd30 <_getpid_r>
 800fcd0:	462a      	mov	r2, r5
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcda:	f000 b817 	b.w	800fd0c <_kill_r>
 800fcde:	2b01      	cmp	r3, #1
 800fce0:	d00a      	beq.n	800fcf8 <_raise_r+0x4c>
 800fce2:	1c59      	adds	r1, r3, #1
 800fce4:	d103      	bne.n	800fcee <_raise_r+0x42>
 800fce6:	2316      	movs	r3, #22
 800fce8:	6003      	str	r3, [r0, #0]
 800fcea:	2001      	movs	r0, #1
 800fcec:	e7e7      	b.n	800fcbe <_raise_r+0x12>
 800fcee:	2400      	movs	r4, #0
 800fcf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	4798      	blx	r3
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	e7e0      	b.n	800fcbe <_raise_r+0x12>

0800fcfc <raise>:
 800fcfc:	4b02      	ldr	r3, [pc, #8]	; (800fd08 <raise+0xc>)
 800fcfe:	4601      	mov	r1, r0
 800fd00:	6818      	ldr	r0, [r3, #0]
 800fd02:	f7ff bfd3 	b.w	800fcac <_raise_r>
 800fd06:	bf00      	nop
 800fd08:	20000010 	.word	0x20000010

0800fd0c <_kill_r>:
 800fd0c:	b538      	push	{r3, r4, r5, lr}
 800fd0e:	4d07      	ldr	r5, [pc, #28]	; (800fd2c <_kill_r+0x20>)
 800fd10:	2300      	movs	r3, #0
 800fd12:	4604      	mov	r4, r0
 800fd14:	4608      	mov	r0, r1
 800fd16:	4611      	mov	r1, r2
 800fd18:	602b      	str	r3, [r5, #0]
 800fd1a:	f7f2 feb1 	bl	8002a80 <_kill>
 800fd1e:	1c43      	adds	r3, r0, #1
 800fd20:	d102      	bne.n	800fd28 <_kill_r+0x1c>
 800fd22:	682b      	ldr	r3, [r5, #0]
 800fd24:	b103      	cbz	r3, 800fd28 <_kill_r+0x1c>
 800fd26:	6023      	str	r3, [r4, #0]
 800fd28:	bd38      	pop	{r3, r4, r5, pc}
 800fd2a:	bf00      	nop
 800fd2c:	20002488 	.word	0x20002488

0800fd30 <_getpid_r>:
 800fd30:	f7f2 be9e 	b.w	8002a70 <_getpid>

0800fd34 <_fstat_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4d07      	ldr	r5, [pc, #28]	; (800fd54 <_fstat_r+0x20>)
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4604      	mov	r4, r0
 800fd3c:	4608      	mov	r0, r1
 800fd3e:	4611      	mov	r1, r2
 800fd40:	602b      	str	r3, [r5, #0]
 800fd42:	f7f2 fefc 	bl	8002b3e <_fstat>
 800fd46:	1c43      	adds	r3, r0, #1
 800fd48:	d102      	bne.n	800fd50 <_fstat_r+0x1c>
 800fd4a:	682b      	ldr	r3, [r5, #0]
 800fd4c:	b103      	cbz	r3, 800fd50 <_fstat_r+0x1c>
 800fd4e:	6023      	str	r3, [r4, #0]
 800fd50:	bd38      	pop	{r3, r4, r5, pc}
 800fd52:	bf00      	nop
 800fd54:	20002488 	.word	0x20002488

0800fd58 <_isatty_r>:
 800fd58:	b538      	push	{r3, r4, r5, lr}
 800fd5a:	4d06      	ldr	r5, [pc, #24]	; (800fd74 <_isatty_r+0x1c>)
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	4604      	mov	r4, r0
 800fd60:	4608      	mov	r0, r1
 800fd62:	602b      	str	r3, [r5, #0]
 800fd64:	f7f2 fefb 	bl	8002b5e <_isatty>
 800fd68:	1c43      	adds	r3, r0, #1
 800fd6a:	d102      	bne.n	800fd72 <_isatty_r+0x1a>
 800fd6c:	682b      	ldr	r3, [r5, #0]
 800fd6e:	b103      	cbz	r3, 800fd72 <_isatty_r+0x1a>
 800fd70:	6023      	str	r3, [r4, #0]
 800fd72:	bd38      	pop	{r3, r4, r5, pc}
 800fd74:	20002488 	.word	0x20002488

0800fd78 <_init>:
 800fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd7a:	bf00      	nop
 800fd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd7e:	bc08      	pop	{r3}
 800fd80:	469e      	mov	lr, r3
 800fd82:	4770      	bx	lr

0800fd84 <_fini>:
 800fd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd86:	bf00      	nop
 800fd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd8a:	bc08      	pop	{r3}
 800fd8c:	469e      	mov	lr, r3
 800fd8e:	4770      	bx	lr
