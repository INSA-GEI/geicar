
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013540  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  080136d0  080136d0  000236d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d70  08013d70  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08013d70  08013d70  00023d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d78  08013d78  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d78  08013d78  00023d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d7c  08013d7c  00023d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08013d80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025c8  200001e8  08013f64  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200027b0  08013f64  000327b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000434f2  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067f5  00000000  00000000  00073706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003a38  00000000  00000000  00079f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003770  00000000  00000000  0007d938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000326f6  00000000  00000000  000810a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037282  00000000  00000000  000b379e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012913d  00000000  00000000  000eaa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00213b5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011208  00000000  00000000  00213bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080136b8 	.word	0x080136b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	080136b8 	.word	0x080136b8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <Tasks_Init>:

#define LIDAR_DATA_LENGTH 47
uint8_t data_buffer[LIDAR_DATA_LENGTH] = {0};

void Tasks_Init(void)
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b096      	sub	sp, #88	; 0x58
 800101c:	af00      	add	r7, sp, #0
	osThreadDef(UART, StartUart, osPriorityNormal, 0, 64);
 800101e:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <Tasks_Init+0x7c>)
 8001020:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001024:	461d      	mov	r5, r3
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UARTHandle = osThreadCreate(osThread(UART), NULL);
 8001032:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00c fa4d 	bl	800d4d8 <osThreadCreate>
 800103e:	4603      	mov	r3, r0
 8001040:	4a15      	ldr	r2, [pc, #84]	; (8001098 <Tasks_Init+0x80>)
 8001042:	6013      	str	r3, [r2, #0]

	osThreadDef(IMU, StartIMU, osPriorityHigh, 0, 512);
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <Tasks_Init+0x84>)
 8001046:	f107 0420 	add.w	r4, r7, #32
 800104a:	461d      	mov	r5, r3
 800104c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001050:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001054:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMUHandle = osThreadCreate(osThread(IMU), NULL);
 8001058:	f107 0320 	add.w	r3, r7, #32
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00c fa3a 	bl	800d4d8 <osThreadCreate>
 8001064:	4603      	mov	r3, r0
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <Tasks_Init+0x88>)
 8001068:	6013      	str	r3, [r2, #0]

	osThreadDef(GPS, StartGPS, osPriorityAboveNormal, 0, 64);
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <Tasks_Init+0x8c>)
 800106c:	1d3c      	adds	r4, r7, #4
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001078:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00c fa29 	bl	800d4d8 <osThreadCreate>
 8001086:	4603      	mov	r3, r0
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <Tasks_Init+0x90>)
 800108a:	6013      	str	r3, [r2, #0]
	osThreadDef(I2C, StartI2C, osPriorityBelowNormal, 0, 64);
	I2CHandle = osThreadCreate(osThread(I2C), NULL);

	osThreadDef(SPI, StartSPI, osPriorityBelowNormal, 0, 64);
	SPIHandle = osThreadCreate(osThread(SPI), NULL);*/
}
 800108c:	bf00      	nop
 800108e:	3758      	adds	r7, #88	; 0x58
 8001090:	46bd      	mov	sp, r7
 8001092:	bdb0      	pop	{r4, r5, r7, pc}
 8001094:	080136e0 	.word	0x080136e0
 8001098:	2000020c 	.word	0x2000020c
 800109c:	080136fc 	.word	0x080136fc
 80010a0:	20000204 	.word	0x20000204
 80010a4:	08013718 	.word	0x08013718
 80010a8:	20000208 	.word	0x20000208

080010ac <IMU_Receive_Transmit_Data>:

void IMU_Receive_Transmit_Data()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	IMU_GetData();
 80010b0:	f000 fa58 	bl	8001564 <IMU_GetData>
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <GetData_GPS>:

void GetData_GPS(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
 80010bc:	2201      	movs	r2, #1
 80010be:	4903      	ldr	r1, [pc, #12]	; (80010cc <GetData_GPS+0x14>)
 80010c0:	4803      	ldr	r0, [pc, #12]	; (80010d0 <GetData_GPS+0x18>)
 80010c2:	f00a fea1 	bl	800be08 <HAL_UART_Receive_IT>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000d6c 	.word	0x20000d6c
 80010d0:	20000c60 	.word	0x20000c60

080010d4 <HAL_UART_TxCpltCallback>:
		 }
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1f      	ldr	r2, [pc, #124]	; (8001174 <HAL_UART_RxCpltCallback+0x8c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d137      	bne.n	800116a <HAL_UART_RxCpltCallback+0x82>

			static char rx_buffer[LINEMAX];   // Local holding buffer to build line
			static int rx_index = 0;


			if ((rxBufferGps == '\r') || (rxBufferGps == '\n')) // Is this an end-of-line condition, either will suffice?
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <HAL_UART_RxCpltCallback+0x90>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b0d      	cmp	r3, #13
 8001100:	d003      	beq.n	800110a <HAL_UART_RxCpltCallback+0x22>
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_UART_RxCpltCallback+0x90>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b0a      	cmp	r3, #10
 8001108:	d116      	bne.n	8001138 <HAL_UART_RxCpltCallback+0x50>
			{
			  if (rx_index != 0) // Line has some content
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d026      	beq.n	8001160 <HAL_UART_RxCpltCallback+0x78>
			  {
				memcpy((void *)nmeaFrame, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4919      	ldr	r1, [pc, #100]	; (8001180 <HAL_UART_RxCpltCallback+0x98>)
 800111a:	481a      	ldr	r0, [pc, #104]	; (8001184 <HAL_UART_RxCpltCallback+0x9c>)
 800111c:	f00e fa48 	bl	800f5b0 <memcpy>
				nmeaFrame[rx_index] = 0; // Add terminating NUL
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_UART_RxCpltCallback+0x9c>)
 8001126:	2100      	movs	r1, #0
 8001128:	54d1      	strb	r1, [r2, r3]
				nmeaFrameValid = 1; // flag new line valid for processing
 800112a:	4b17      	ldr	r3, [pc, #92]	; (8001188 <HAL_UART_RxCpltCallback+0xa0>)
 800112c:	2201      	movs	r2, #1
 800112e:	601a      	str	r2, [r3, #0]

				rx_index = 0; // Reset content pointer
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
			  if (rx_index != 0) // Line has some content
 8001136:	e013      	b.n	8001160 <HAL_UART_RxCpltCallback+0x78>
			  }
			}
			else
			{
			  if ((rxBufferGps == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_UART_RxCpltCallback+0x90>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b24      	cmp	r3, #36	; 0x24
 800113e:	d003      	beq.n	8001148 <HAL_UART_RxCpltCallback+0x60>
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2bc8      	cmp	r3, #200	; 0xc8
 8001146:	d102      	bne.n	800114e <HAL_UART_RxCpltCallback+0x66>
				rx_index = 0;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]

			  rx_buffer[rx_index++] = rxBufferGps; // Copy to buffer and increment
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	4909      	ldr	r1, [pc, #36]	; (800117c <HAL_UART_RxCpltCallback+0x94>)
 8001156:	600a      	str	r2, [r1, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_UART_RxCpltCallback+0x90>)
 800115a:	7811      	ldrb	r1, [r2, #0]
 800115c:	4a08      	ldr	r2, [pc, #32]	; (8001180 <HAL_UART_RxCpltCallback+0x98>)
 800115e:	54d1      	strb	r1, [r2, r3]
			}


    	HAL_UART_Receive_IT(&huart2, &rxBufferGps, 1);
 8001160:	2201      	movs	r2, #1
 8001162:	4905      	ldr	r1, [pc, #20]	; (8001178 <HAL_UART_RxCpltCallback+0x90>)
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <HAL_UART_RxCpltCallback+0xa4>)
 8001166:	f00a fe4f 	bl	800be08 <HAL_UART_Receive_IT>

    if (huart -> Instance == USART3)
    {

    }
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40004400 	.word	0x40004400
 8001178:	20000d6c 	.word	0x20000d6c
 800117c:	20000210 	.word	0x20000210
 8001180:	20000214 	.word	0x20000214
 8001184:	20000d70 	.word	0x20000d70
 8001188:	20000e38 	.word	0x20000e38
 800118c:	20000c60 	.word	0x20000c60

08001190 <Transmit_data_to_usb>:

void Transmit_data_to_usb(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
	MESSAGE_Typedef message_appli;
	message_appli = MESSAGE_ReadMailboxNoDelay(Appli_Mailbox);
 8001196:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <Transmit_data_to_usb+0x50>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4611      	mov	r1, r2
 800119e:	4618      	mov	r0, r3
 80011a0:	f000 fb06 	bl	80017b0 <MESSAGE_ReadMailboxNoDelay>
	switch(message_appli.id){
 80011a4:	88bb      	ldrh	r3, [r7, #4]
 80011a6:	2b40      	cmp	r3, #64	; 0x40
 80011a8:	d00f      	beq.n	80011ca <Transmit_data_to_usb+0x3a>
 80011aa:	2b40      	cmp	r3, #64	; 0x40
 80011ac:	dc12      	bgt.n	80011d4 <Transmit_data_to_usb+0x44>
 80011ae:	2b20      	cmp	r3, #32
 80011b0:	d006      	beq.n	80011c0 <Transmit_data_to_usb+0x30>
 80011b2:	2b30      	cmp	r3, #48	; 0x30
 80011b4:	d10e      	bne.n	80011d4 <Transmit_data_to_usb+0x44>

	case MSG_ID_GPS :
		TransmitGPSFrame(message_appli.data);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fee7 	bl	8001f8c <TransmitGPSFrame>
		//HAL_UART_Transmit_IT(&huart4, message_appli.data, sizeof(message_appli.data));
		break;
 80011be:	e00a      	b.n	80011d6 <Transmit_data_to_usb+0x46>
	case MSG_ID_IMU :
		   TransmitIMUFrame(message_appli.data);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fa30 	bl	8001628 <TransmitIMUFrame>
		break;
 80011c8:	e005      	b.n	80011d6 <Transmit_data_to_usb+0x46>
	case MSG_ID_LIDAR :
		TransmitLiDARFrame(message_appli.data);
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 faa7 	bl	8001720 <TransmitLiDARFrame>
		//HAL_UART_Transmit_IT(&huart4, (uint8_t*)message_appli.data,30);
		break;
 80011d2:	e000      	b.n	80011d6 <Transmit_data_to_usb+0x46>
		break;
	case MSG_ID_IMU_GYR :
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)message_appli.data, 50);
		break;*/
	default :
		break;
 80011d4:	bf00      	nop
	}
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200004d4 	.word	0x200004d4

080011e4 <StartUart>:

void StartUart(void const * argument)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80011f0:	f00d f9b0 	bl	800e554 <xTaskGetTickCount>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60bb      	str	r3, [r7, #8]
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {

	  Transmit_data_to_usb();
 80011f8:	f7ff ffca 	bl	8001190 <Transmit_data_to_usb>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	68f9      	ldr	r1, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	f00c ffea 	bl	800e1dc <vTaskDelayUntil>
	  Transmit_data_to_usb();
 8001208:	e7f6      	b.n	80011f8 <StartUart+0x14>

0800120a <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(500);
 8001212:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001216:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001218:	f00d f99c 	bl	800e554 <xTaskGetTickCount>
 800121c:	4603      	mov	r3, r0
 800121e:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	  IMU_Receive_Transmit_Data();
 8001220:	f7ff ff44 	bl	80010ac <IMU_Receive_Transmit_Data>
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	68f9      	ldr	r1, [r7, #12]
 800122a:	4618      	mov	r0, r3
 800122c:	f00c ffd6 	bl	800e1dc <vTaskDelayUntil>
	  IMU_Receive_Transmit_Data();
 8001230:	e7f6      	b.n	8001220 <StartIMU+0x16>

08001232 <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b084      	sub	sp, #16
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800123e:	f00d f989 	bl	800e554 <xTaskGetTickCount>
 8001242:	4603      	mov	r3, r0
 8001244:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  GetData_GPS();
 8001246:	f7ff ff37 	bl	80010b8 <GetData_GPS>
	  task_update_gps();
 800124a:	f000 faf7 	bl	800183c <task_update_gps>
	  task_send_values_GPS();
 800124e:	f000 fb13 	bl	8001878 <task_send_values_GPS>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	4618      	mov	r0, r3
 800125a:	f00c ffbf 	bl	800e1dc <vTaskDelayUntil>
	  GetData_GPS();
 800125e:	e7f2      	b.n	8001246 <StartGPS+0x14>

08001260 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <GLOBVAR_Init+0x88>)
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <GLOBVAR_Init+0x8c>)
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <GLOBVAR_Init+0x90>)
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <GLOBVAR_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <GLOBVAR_Init+0x94>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <GLOBVAR_Init+0x94>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <GLOBVAR_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <GLOBVAR_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <GLOBVAR_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <GLOBVAR_Init+0x9c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <GLOBVAR_Init+0x9c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <GLOBVAR_Init+0x9c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 80012b2:	4913      	ldr	r1, [pc, #76]	; (8001300 <GLOBVAR_Init+0xa0>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 80012c0:	490f      	ldr	r1, [pc, #60]	; (8001300 <GLOBVAR_Init+0xa0>)
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	f04f 0300 	mov.w	r3, #0
 80012ca:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 80012ce:	490c      	ldr	r1, [pc, #48]	; (8001300 <GLOBVAR_Init+0xa0>)
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9c1 2302 	strd	r2, r3, [r1, #8]


}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000300 	.word	0x20000300
 80012ec:	20000304 	.word	0x20000304
 80012f0:	20000308 	.word	0x20000308
 80012f4:	200002dc 	.word	0x200002dc
 80012f8:	200002e8 	.word	0x200002e8
 80012fc:	200002f4 	.word	0x200002f4
 8001300:	20000330 	.word	0x20000330

08001304 <CalculateCRC>:
float pression;
float humidite;
float temperature;


uint8_t CalculateCRC(uint8_t *data, uint8_t len) {
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	73bb      	strb	r3, [r7, #14]
 8001318:	e009      	b.n	800132e <CalculateCRC+0x2a>
        crc ^= data[i];
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	781a      	ldrb	r2, [r3, #0]
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	4053      	eors	r3, r2
 8001326:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8001328:	7bbb      	ldrb	r3, [r7, #14]
 800132a:	3301      	adds	r3, #1
 800132c:	73bb      	strb	r3, [r7, #14]
 800132e:	7bba      	ldrb	r2, [r7, #14]
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	429a      	cmp	r2, r3
 8001334:	d3f1      	bcc.n	800131a <CalculateCRC+0x16>
    }
    return crc;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <IMU_init>:

void IMU_init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 8001348:	4b57      	ldr	r3, [pc, #348]	; (80014a8 <IMU_init+0x164>)
 800134a:	22bf      	movs	r2, #191	; 0xbf
 800134c:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <IMU_init+0x164>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001354:	4b54      	ldr	r3, [pc, #336]	; (80014a8 <IMU_init+0x164>)
 8001356:	4a55      	ldr	r2, [pc, #340]	; (80014ac <IMU_init+0x168>)
 8001358:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <IMU_init+0x164>)
 800135c:	4a54      	ldr	r2, [pc, #336]	; (80014b0 <IMU_init+0x16c>)
 800135e:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001360:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <IMU_init+0x164>)
 8001362:	4a54      	ldr	r2, [pc, #336]	; (80014b4 <IMU_init+0x170>)
 8001364:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001366:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <IMU_init+0x164>)
 8001368:	4a53      	ldr	r2, [pc, #332]	; (80014b8 <IMU_init+0x174>)
 800136a:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800136c:	4b4e      	ldr	r3, [pc, #312]	; (80014a8 <IMU_init+0x164>)
 800136e:	4a53      	ldr	r2, [pc, #332]	; (80014bc <IMU_init+0x178>)
 8001370:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <IMU_init+0x164>)
 8001374:	4a52      	ldr	r2, [pc, #328]	; (80014c0 <IMU_init+0x17c>)
 8001376:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 8001378:	494b      	ldr	r1, [pc, #300]	; (80014a8 <IMU_init+0x164>)
 800137a:	4852      	ldr	r0, [pc, #328]	; (80014c4 <IMU_init+0x180>)
 800137c:	f003 f8b8 	bl	80044f0 <HTS221_RegisterBusIO>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d000      	beq.n	8001388 <IMU_init+0x44>
		while(1);
 8001386:	e7fe      	b.n	8001386 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 8001388:	484e      	ldr	r0, [pc, #312]	; (80014c4 <IMU_init+0x180>)
 800138a:	f003 f8fb 	bl	8004584 <HTS221_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d000      	beq.n	8001396 <IMU_init+0x52>
		while (1);
 8001394:	e7fe      	b.n	8001394 <IMU_init+0x50>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <IMU_init+0x184>)
 8001398:	2233      	movs	r2, #51	; 0x33
 800139a:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <IMU_init+0x184>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <IMU_init+0x184>)
 80013a4:	4a41      	ldr	r2, [pc, #260]	; (80014ac <IMU_init+0x168>)
 80013a6:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <IMU_init+0x184>)
 80013aa:	4a41      	ldr	r2, [pc, #260]	; (80014b0 <IMU_init+0x16c>)
 80013ac:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80013ae:	4b46      	ldr	r3, [pc, #280]	; (80014c8 <IMU_init+0x184>)
 80013b0:	4a40      	ldr	r2, [pc, #256]	; (80014b4 <IMU_init+0x170>)
 80013b2:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <IMU_init+0x184>)
 80013b6:	4a40      	ldr	r2, [pc, #256]	; (80014b8 <IMU_init+0x174>)
 80013b8:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80013ba:	4b43      	ldr	r3, [pc, #268]	; (80014c8 <IMU_init+0x184>)
 80013bc:	4a3f      	ldr	r2, [pc, #252]	; (80014bc <IMU_init+0x178>)
 80013be:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 80013c0:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <IMU_init+0x184>)
 80013c2:	4a3f      	ldr	r2, [pc, #252]	; (80014c0 <IMU_init+0x17c>)
 80013c4:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 80013c6:	4940      	ldr	r1, [pc, #256]	; (80014c8 <IMU_init+0x184>)
 80013c8:	4840      	ldr	r0, [pc, #256]	; (80014cc <IMU_init+0x188>)
 80013ca:	f004 f83b 	bl	8005444 <LSM303AGR_ACC_RegisterBusIO>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d000      	beq.n	80013d6 <IMU_init+0x92>
		while(1);
 80013d4:	e7fe      	b.n	80013d4 <IMU_init+0x90>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 80013d6:	4b3c      	ldr	r3, [pc, #240]	; (80014c8 <IMU_init+0x184>)
 80013d8:	223d      	movs	r2, #61	; 0x3d
 80013da:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 80013dc:	493a      	ldr	r1, [pc, #232]	; (80014c8 <IMU_init+0x184>)
 80013de:	483c      	ldr	r0, [pc, #240]	; (80014d0 <IMU_init+0x18c>)
 80013e0:	f004 fa20 	bl	8005824 <LSM303AGR_MAG_RegisterBusIO>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d000      	beq.n	80013ec <IMU_init+0xa8>
		while(1);
 80013ea:	e7fe      	b.n	80013ea <IMU_init+0xa6>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 80013ec:	4837      	ldr	r0, [pc, #220]	; (80014cc <IMU_init+0x188>)
 80013ee:	f004 f893 	bl	8005518 <LSM303AGR_ACC_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d000      	beq.n	80013fa <IMU_init+0xb6>
		while (1);
 80013f8:	e7fe      	b.n	80013f8 <IMU_init+0xb4>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 80013fa:	4835      	ldr	r0, [pc, #212]	; (80014d0 <IMU_init+0x18c>)
 80013fc:	f004 fa76 	bl	80058ec <LSM303AGR_MAG_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d000      	beq.n	8001408 <IMU_init+0xc4>
		while (1);
 8001406:	e7fe      	b.n	8001406 <IMU_init+0xc2>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 8001408:	4b32      	ldr	r3, [pc, #200]	; (80014d4 <IMU_init+0x190>)
 800140a:	22d7      	movs	r2, #215	; 0xd7
 800140c:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <IMU_init+0x190>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <IMU_init+0x190>)
 8001416:	4a25      	ldr	r2, [pc, #148]	; (80014ac <IMU_init+0x168>)
 8001418:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <IMU_init+0x190>)
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <IMU_init+0x16c>)
 800141e:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <IMU_init+0x190>)
 8001422:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <IMU_init+0x170>)
 8001424:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <IMU_init+0x190>)
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <IMU_init+0x174>)
 800142a:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <IMU_init+0x190>)
 800142e:	4a23      	ldr	r2, [pc, #140]	; (80014bc <IMU_init+0x178>)
 8001430:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <IMU_init+0x190>)
 8001434:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <IMU_init+0x17c>)
 8001436:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 8001438:	4926      	ldr	r1, [pc, #152]	; (80014d4 <IMU_init+0x190>)
 800143a:	4827      	ldr	r0, [pc, #156]	; (80014d8 <IMU_init+0x194>)
 800143c:	f004 ff30 	bl	80062a0 <LSM6DSL_RegisterBusIO>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d000      	beq.n	8001448 <IMU_init+0x104>
		while(1);
 8001446:	e7fe      	b.n	8001446 <IMU_init+0x102>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 8001448:	4823      	ldr	r0, [pc, #140]	; (80014d8 <IMU_init+0x194>)
 800144a:	f004 ff93 	bl	8006374 <LSM6DSL_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d000      	beq.n	8001456 <IMU_init+0x112>
		while (1);
 8001454:	e7fe      	b.n	8001454 <IMU_init+0x110>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <IMU_init+0x198>)
 8001458:	22bb      	movs	r2, #187	; 0xbb
 800145a:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <IMU_init+0x198>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <IMU_init+0x198>)
 8001464:	4a11      	ldr	r2, [pc, #68]	; (80014ac <IMU_init+0x168>)
 8001466:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <IMU_init+0x198>)
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <IMU_init+0x16c>)
 800146c:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <IMU_init+0x198>)
 8001470:	4a10      	ldr	r2, [pc, #64]	; (80014b4 <IMU_init+0x170>)
 8001472:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <IMU_init+0x198>)
 8001476:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <IMU_init+0x174>)
 8001478:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <IMU_init+0x198>)
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <IMU_init+0x178>)
 800147e:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <IMU_init+0x198>)
 8001482:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <IMU_init+0x17c>)
 8001484:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 8001486:	4915      	ldr	r1, [pc, #84]	; (80014dc <IMU_init+0x198>)
 8001488:	4815      	ldr	r0, [pc, #84]	; (80014e0 <IMU_init+0x19c>)
 800148a:	f003 fcdf 	bl	8004e4c <LPS22HB_RegisterBusIO>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d000      	beq.n	8001496 <IMU_init+0x152>
		while(1);
 8001494:	e7fe      	b.n	8001494 <IMU_init+0x150>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <IMU_init+0x19c>)
 8001498:	f003 fd42 	bl	8004f20 <LPS22HB_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d000      	beq.n	80014a4 <IMU_init+0x160>
		while (1);
 80014a2:	e7fe      	b.n	80014a2 <IMU_init+0x15e>
	}



}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000034c 	.word	0x2000034c
 80014ac:	08003fd9 	.word	0x08003fd9
 80014b0:	08004055 	.word	0x08004055
 80014b4:	08004109 	.word	0x08004109
 80014b8:	080040a5 	.word	0x080040a5
 80014bc:	08006b39 	.word	0x08006b39
 80014c0:	08006b51 	.word	0x08006b51
 80014c4:	2000036c 	.word	0x2000036c
 80014c8:	200003a0 	.word	0x200003a0
 80014cc:	200003c0 	.word	0x200003c0
 80014d0:	200003f4 	.word	0x200003f4
 80014d4:	20000428 	.word	0x20000428
 80014d8:	20000448 	.word	0x20000448
 80014dc:	20000480 	.word	0x20000480
 80014e0:	200004a0 	.word	0x200004a0

080014e4 <IMU_enable>:

void IMU_enable(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 80014e8:	4819      	ldr	r0, [pc, #100]	; (8001550 <IMU_enable+0x6c>)
 80014ea:	f003 f866 	bl	80045ba <HTS221_HUM_Enable>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d000      	beq.n	80014f6 <IMU_enable+0x12>
		while (1);
 80014f4:	e7fe      	b.n	80014f4 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 80014f6:	4816      	ldr	r0, [pc, #88]	; (8001550 <IMU_enable+0x6c>)
 80014f8:	f003 f90c 	bl	8004714 <HTS221_TEMP_Enable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d000      	beq.n	8001504 <IMU_enable+0x20>
		while (1);
 8001502:	e7fe      	b.n	8001502 <IMU_enable+0x1e>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 8001504:	4813      	ldr	r0, [pc, #76]	; (8001554 <IMU_enable+0x70>)
 8001506:	f004 f848 	bl	800559a <LSM303AGR_ACC_Enable>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d000      	beq.n	8001512 <IMU_enable+0x2e>
		while (1);
 8001510:	e7fe      	b.n	8001510 <IMU_enable+0x2c>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 8001512:	4811      	ldr	r0, [pc, #68]	; (8001558 <IMU_enable+0x74>)
 8001514:	f004 fa27 	bl	8005966 <LSM303AGR_MAG_Enable>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d000      	beq.n	8001520 <IMU_enable+0x3c>
		while (1);
 800151e:	e7fe      	b.n	800151e <IMU_enable+0x3a>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 8001520:	480e      	ldr	r0, [pc, #56]	; (800155c <IMU_enable+0x78>)
 8001522:	f004 ff90 	bl	8006446 <LSM6DSL_ACC_Enable>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d000      	beq.n	800152e <IMU_enable+0x4a>
		while (1);
 800152c:	e7fe      	b.n	800152c <IMU_enable+0x48>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <IMU_enable+0x78>)
 8001530:	f004 ffad 	bl	800648e <LSM6DSL_GYRO_Enable>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d000      	beq.n	800153c <IMU_enable+0x58>
		while (1);
 800153a:	e7fe      	b.n	800153a <IMU_enable+0x56>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 800153c:	4808      	ldr	r0, [pc, #32]	; (8001560 <IMU_enable+0x7c>)
 800153e:	f003 fd0a 	bl	8004f56 <LPS22HB_PRESS_Enable>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d000      	beq.n	800154a <IMU_enable+0x66>
		while (1);
 8001548:	e7fe      	b.n	8001548 <IMU_enable+0x64>
	}
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000036c 	.word	0x2000036c
 8001554:	200003c0 	.word	0x200003c0
 8001558:	200003f4 	.word	0x200003f4
 800155c:	20000448 	.word	0x20000448
 8001560:	200004a0 	.word	0x200004a0

08001564 <IMU_GetData>:

void IMU_GetData(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08c      	sub	sp, #48	; 0x30
 8001568:	af00      	add	r7, sp, #0
	 IMUFrameTypeDef imu_frame;

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 800156a:	4923      	ldr	r1, [pc, #140]	; (80015f8 <IMU_GetData+0x94>)
 800156c:	4823      	ldr	r0, [pc, #140]	; (80015fc <IMU_GetData+0x98>)
 800156e:	f003 f849 	bl	8004604 <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 8001572:	4923      	ldr	r1, [pc, #140]	; (8001600 <IMU_GetData+0x9c>)
 8001574:	4821      	ldr	r0, [pc, #132]	; (80015fc <IMU_GetData+0x98>)
 8001576:	f003 f8f2 	bl	800475e <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 800157a:	4922      	ldr	r1, [pc, #136]	; (8001604 <IMU_GetData+0xa0>)
 800157c:	4822      	ldr	r0, [pc, #136]	; (8001608 <IMU_GetData+0xa4>)
 800157e:	f004 f8e1 	bl	8005744 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <IMU_GetData+0xa8>)
 8001584:	4822      	ldr	r0, [pc, #136]	; (8001610 <IMU_GetData+0xac>)
 8001586:	f004 fa1e 	bl	80059c6 <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 800158a:	4922      	ldr	r1, [pc, #136]	; (8001614 <IMU_GetData+0xb0>)
 800158c:	4822      	ldr	r0, [pc, #136]	; (8001618 <IMU_GetData+0xb4>)
 800158e:	f003 fd06 	bl	8004f9e <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 8001592:	4922      	ldr	r1, [pc, #136]	; (800161c <IMU_GetData+0xb8>)
 8001594:	4822      	ldr	r0, [pc, #136]	; (8001620 <IMU_GetData+0xbc>)
 8001596:	f004 fff1 	bl	800657c <LSM6DSL_GYRO_GetAxes>

	 imu_frame.humidity = current_humidity_perc;
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <IMU_GetData+0x94>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	607b      	str	r3, [r7, #4]
	 imu_frame.temperature = current_temperature_degC;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <IMU_GetData+0x9c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	603b      	str	r3, [r7, #0]
	 imu_frame.pressure = current_pressure_hPa;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <IMU_GetData+0xb0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	60bb      	str	r3, [r7, #8]
	 imu_frame.magnetic_x = current_magnetic_mG.x;
 80015ac:	4b17      	ldr	r3, [pc, #92]	; (800160c <IMU_GetData+0xa8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	60fb      	str	r3, [r7, #12]
	 imu_frame.magnetic_y = current_magnetic_mG.y;
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <IMU_GetData+0xa8>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	613b      	str	r3, [r7, #16]
	 imu_frame.magnetic_z = current_magnetic_mG.z;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <IMU_GetData+0xa8>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	617b      	str	r3, [r7, #20]
	 imu_frame.acceleration_x = current_acceleration_mg.x;
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <IMU_GetData+0xa0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	61bb      	str	r3, [r7, #24]
	 imu_frame.acceleration_y = current_acceleration_mg.y;
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <IMU_GetData+0xa0>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	61fb      	str	r3, [r7, #28]
	 imu_frame.acceleration_z = current_acceleration_mg.z;
 80015ca:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <IMU_GetData+0xa0>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	623b      	str	r3, [r7, #32]
	 imu_frame.gyro_x = current_angular_rate_mdps.x;
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <IMU_GetData+0xb8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
	 imu_frame.gyro_y = current_angular_rate_mdps.y;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <IMU_GetData+0xb8>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
	 imu_frame.gyro_z = current_angular_rate_mdps.z;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <IMU_GetData+0xb8>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU, NULL,&imu_frame);
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <IMU_GetData+0xc0>)
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	2120      	movs	r1, #32
 80015ec:	f000 f904 	bl	80017f8 <MESSAGE_SendMailbox>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_GYR, NULL,message_gyro);
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_MAG, NULL,message_mag);*/

}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000308 	.word	0x20000308
 80015fc:	2000036c 	.word	0x2000036c
 8001600:	20000304 	.word	0x20000304
 8001604:	200002dc 	.word	0x200002dc
 8001608:	200003c0 	.word	0x200003c0
 800160c:	200002f4 	.word	0x200002f4
 8001610:	200003f4 	.word	0x200003f4
 8001614:	20000300 	.word	0x20000300
 8001618:	200004a0 	.word	0x200004a0
 800161c:	200002e8 	.word	0x200002e8
 8001620:	20000448 	.word	0x20000448
 8001624:	200004d4 	.word	0x200004d4

08001628 <TransmitIMUFrame>:

void TransmitIMUFrame(IMUFrameTypeDef *frame) {
 8001628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800162a:	b09f      	sub	sp, #124	; 0x7c
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
    // Convertir la structure en un tableau de bytes
	uint8_t buffer[sizeof(API_FrameTypeDef_IMU)];
	API_FrameTypeDef_IMU api_frame;
	api_frame.header = API_HEADER;
 8001630:	237e      	movs	r3, #126	; 0x7e
 8001632:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(IMUFrameTypeDef);
 8001634:	2330      	movs	r3, #48	; 0x30
 8001636:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_IMU;
 8001638:	2320      	movs	r3, #32
 800163a:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(IMUFrameTypeDef));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f107 000d 	add.w	r0, r7, #13
 8001642:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001646:	4602      	mov	r2, r0
 8001648:	4619      	mov	r1, r3
 800164a:	f8d1 c000 	ldr.w	ip, [r1]
 800164e:	684e      	ldr	r6, [r1, #4]
 8001650:	688d      	ldr	r5, [r1, #8]
 8001652:	68c9      	ldr	r1, [r1, #12]
 8001654:	f8c2 c000 	str.w	ip, [r2]
 8001658:	6056      	str	r6, [r2, #4]
 800165a:	6095      	str	r5, [r2, #8]
 800165c:	60d1      	str	r1, [r2, #12]
 800165e:	3310      	adds	r3, #16
 8001660:	3010      	adds	r0, #16
 8001662:	42a3      	cmp	r3, r4
 8001664:	d1ef      	bne.n	8001646 <TransmitIMUFrame+0x1e>
	api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(IMUFrameTypeDef));
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	3305      	adds	r3, #5
 800166c:	2130      	movs	r1, #48	; 0x30
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fe48 	bl	8001304 <CalculateCRC>
 8001674:	4603      	mov	r3, r0
 8001676:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    //uint8_t buffer[sizeof(IMUFrameTypeDef)];
    //memcpy(buffer, frame, sizeof(IMUFrameTypeDef));
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_IMU));
 800167a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800167e:	f107 0508 	add.w	r5, r7, #8
 8001682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001692:	6020      	str	r0, [r4, #0]
 8001694:	3404      	adds	r4, #4
 8001696:	8021      	strh	r1, [r4, #0]
	snprintf((char*)message_temp,35,"salut !\r\n");
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <TransmitIMUFrame+0x9c>)
 800169a:	2123      	movs	r1, #35	; 0x23
 800169c:	480a      	ldr	r0, [pc, #40]	; (80016c8 <TransmitIMUFrame+0xa0>)
 800169e:	f00e fa29 	bl	800faf4 <sniprintf>
	HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));
 80016a2:	2223      	movs	r2, #35	; 0x23
 80016a4:	4908      	ldr	r1, [pc, #32]	; (80016c8 <TransmitIMUFrame+0xa0>)
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <TransmitIMUFrame+0xa4>)
 80016a8:	f00a fb40 	bl	800bd2c <HAL_UART_Transmit_IT>
    // Transmettre le tableau de bytes via UART
    HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_IMU));
 80016ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016b0:	2236      	movs	r2, #54	; 0x36
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <TransmitIMUFrame+0xa4>)
 80016b6:	f00a fb39 	bl	800bd2c <HAL_UART_Transmit_IT>
}
 80016ba:	bf00      	nop
 80016bc:	377c      	adds	r7, #124	; 0x7c
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08013734 	.word	0x08013734
 80016c8:	2000030c 	.word	0x2000030c
 80016cc:	20000ad4 	.word	0x20000ad4

080016d0 <CalCRC8>:
#include "stm32l4xx_hal.h"

extern UART_HandleTypeDef huart4;

uint8_t CalCRC8(uint8_t package[], uint8_t len)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	for (i = 0; i < len; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	81bb      	strh	r3, [r7, #12]
 80016e4:	e00d      	b.n	8001702 <CalCRC8+0x32>
	{
		crc = CrcTable[(crc ^ package[i]) & 0xff];
 80016e6:	89bb      	ldrh	r3, [r7, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	4053      	eors	r3, r2
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <CalCRC8+0x4c>)
 80016f8:	5c9b      	ldrb	r3, [r3, r2]
 80016fa:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len; i++)
 80016fc:	89bb      	ldrh	r3, [r7, #12]
 80016fe:	3301      	adds	r3, #1
 8001700:	81bb      	strh	r3, [r7, #12]
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	b29b      	uxth	r3, r3
 8001706:	89ba      	ldrh	r2, [r7, #12]
 8001708:	429a      	cmp	r2, r3
 800170a:	d3ec      	bcc.n	80016e6 <CalCRC8+0x16>
	}
	return crc;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	080137cc 	.word	0x080137cc

08001720 <TransmitLiDARFrame>:
		}
	}
	return lf;
}

void TransmitLiDARFrame(LiDARFrameTypeDef *frame) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b0be      	sub	sp, #248	; 0xf8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_LIDAR)];
	API_FrameTypeDef_LIDAR api_frame;
	api_frame.header = API_HEADER;
 8001728:	237e      	movs	r3, #126	; 0x7e
 800172a:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(LiDARFrameTypeDef);
 800172c:	2371      	movs	r3, #113	; 0x71
 800172e:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_LIDAR;
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(LiDARFrameTypeDef));
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	f107 030d 	add.w	r3, r7, #13
 800173a:	4611      	mov	r1, r2
 800173c:	2271      	movs	r2, #113	; 0x71
 800173e:	4618      	mov	r0, r3
 8001740:	f00d ff36 	bl	800f5b0 <memcpy>
	api_frame.crc = CalCRC8((uint8_t*)&(api_frame.data), sizeof(LiDARFrameTypeDef));
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	3305      	adds	r3, #5
 800174a:	2171      	movs	r1, #113	; 0x71
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ffbf 	bl	80016d0 <CalCRC8>
 8001752:	4603      	mov	r3, r0
 8001754:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_LIDAR));
 8001758:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800175c:	f107 0108 	add.w	r1, r7, #8
 8001760:	2278      	movs	r2, #120	; 0x78
 8001762:	4618      	mov	r0, r3
 8001764:	f00d ff24 	bl	800f5b0 <memcpy>

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_LIDAR));
 8001768:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800176c:	2278      	movs	r2, #120	; 0x78
 800176e:	4619      	mov	r1, r3
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <TransmitLiDARFrame+0x60>)
 8001772:	f00a fadb 	bl	800bd2c <HAL_UART_Transmit_IT>

}
 8001776:	bf00      	nop
 8001778:	37f8      	adds	r7, #248	; 0xf8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000ad4 	.word	0x20000ad4

08001784 <MESSAGE_Init>:

//QueueHandle_t IMU_Mailbox;
//QueueHandle_t GPS_Mailbox;
QueueHandle_t Appli_Mailbox;

void  MESSAGE_Init(void) {
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
	//IMU_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	//GPS_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	Appli_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
 8001788:	2200      	movs	r2, #0
 800178a:	210c      	movs	r1, #12
 800178c:	2020      	movs	r0, #32
 800178e:	f00c f81f 	bl	800d7d0 <xQueueGenericCreate>
 8001792:	4603      	mov	r3, r0
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <MESSAGE_Init+0x24>)
 8001796:	6013      	str	r3, [r2, #0]

	/* Add queues to registry in order to view them in stm32cube ide */
	//vQueueAddToRegistry(IMU_Mailbox,"IMU Mailbox");
	//vQueueAddToRegistry(GPS_Mailbox,"GPS Mailbox");
	vQueueAddToRegistry(Appli_Mailbox,"Appli Mailbox");
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <MESSAGE_Init+0x24>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4903      	ldr	r1, [pc, #12]	; (80017ac <MESSAGE_Init+0x28>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f00c fb5e 	bl	800de60 <vQueueAddToRegistry>
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200004d4 	.word	0x200004d4
 80017ac:	08013740 	.word	0x08013740

080017b0 <MESSAGE_ReadMailboxNoDelay>:
 *
 * @remark This function is non blocking.
 * If mailbox is empty when calling the function, a message structure is still returned with \ref MSG_ID_NO_MESSAGE
 * in message id field
 */
MESSAGE_Typedef MESSAGE_ReadMailboxNoDelay(QueueHandle_t mbx) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
	MESSAGE_Typedef msg= {0};
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]

	if (!xQueueReceive(mbx, &msg, 0))  // Pas de message dans la mailbox
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	6838      	ldr	r0, [r7, #0]
 80017d0:	f00c f956 	bl	800da80 <xQueueReceive>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <MESSAGE_ReadMailboxNoDelay+0x2e>
		msg.id=MSG_ID_NO_MESSAGE;
 80017da:	2300      	movs	r3, #0
 80017dc:	81bb      	strh	r3, [r7, #12]

	return msg;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	461c      	mov	r4, r3
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80017ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	371c      	adds	r7, #28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd90      	pop	{r4, r7, pc}
	...

080017f8 <MESSAGE_SendMailbox>:
 * @return None
 *
 * @remark This function is non blocking.
 * If mailbox is full when calling the function, error will be ignored silently
 */
void MESSAGE_SendMailbox(QueueHandle_t mbx_dest, uint16_t id, QueueHandle_t mbx_sender, void *data){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	460b      	mov	r3, r1
 8001806:	817b      	strh	r3, [r7, #10]
	MESSAGE_Typedef msg;

	msg.id=id;
 8001808:	897b      	ldrh	r3, [r7, #10]
 800180a:	82bb      	strh	r3, [r7, #20]
	msg.sender = &mbx_sender;
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	61bb      	str	r3, [r7, #24]
	msg.data=data;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	61fb      	str	r3, [r7, #28]

	if (!xQueueSend(mbx_dest, &msg, 0)) { // envoi sans attendre
 8001814:	f107 0114 	add.w	r1, r7, #20
 8001818:	2300      	movs	r3, #0
 800181a:	2200      	movs	r2, #0
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f00c f831 	bl	800d884 <xQueueGenericSend>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d102      	bne.n	800182e <MESSAGE_SendMailbox+0x36>
		printf("Failed to send data, Queue full.\r\n");
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MESSAGE_SendMailbox+0x40>)
 800182a:	f00e f955 	bl	800fad8 <puts>
	}
}
 800182e:	bf00      	nop
 8001830:	3720      	adds	r7, #32
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	08013750 	.word	0x08013750

0800183c <task_update_gps>:
	}
}



void task_update_gps(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
	if (nmeaFrameValid){
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <task_update_gps+0x28>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <task_update_gps+0x22>
		ProcessNMEALine(nmeaFrame,&gpsCoords, &gpsQuality);
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <task_update_gps+0x2c>)
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <task_update_gps+0x30>)
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <task_update_gps+0x34>)
 800184e:	f000 fbd9 	bl	8002004 <ProcessNMEALine>
		gpsSend = 1;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <task_update_gps+0x38>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]
		nmeaFrameValid = 0;
 8001858:	4b02      	ldr	r3, [pc, #8]	; (8001864 <task_update_gps+0x28>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
	}

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000e38 	.word	0x20000e38
 8001868:	20000348 	.word	0x20000348
 800186c:	20000330 	.word	0x20000330
 8001870:	20000d70 	.word	0x20000d70
 8001874:	200004d8 	.word	0x200004d8

08001878 <task_send_values_GPS>:

void task_send_values_GPS (void) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b09a      	sub	sp, #104	; 0x68
 800187c:	af00      	add	r7, sp, #0

	if (gpsSend){
 800187e:	4bc8      	ldr	r3, [pc, #800]	; (8001ba0 <task_send_values_GPS+0x328>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8378 	beq.w	8001f78 <task_send_values_GPS+0x700>
		//Latitude
		double computing = gpsCoords.lat;
 8001888:	4bc6      	ldr	r3, [pc, #792]	; (8001ba4 <task_send_values_GPS+0x32c>)
 800188a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat7 = floor(computing);
 8001892:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001896:	f011 fe8f 	bl	80135b8 <floor>
 800189a:	ec53 2b10 	vmov	r2, r3, d0
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f969 	bl	8000b78 <__aeabi_d2iz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	65fb      	str	r3, [r7, #92]	; 0x5c
		computing = 100.0*(computing-(double)Lat7);
 80018aa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80018ac:	f7fe fe4a 	bl	8000544 <__aeabi_i2d>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018b8:	f7fe fcf6 	bl	80002a8 <__aeabi_dsub>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4bb7      	ldr	r3, [pc, #732]	; (8001ba8 <task_send_values_GPS+0x330>)
 80018ca:	f7fe fea5 	bl	8000618 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat6 = floor(computing);
 80018d6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80018da:	f011 fe6d 	bl	80135b8 <floor>
 80018de:	ec53 2b10 	vmov	r2, r3, d0
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f947 	bl	8000b78 <__aeabi_d2iz>
 80018ea:	4603      	mov	r3, r0
 80018ec:	65bb      	str	r3, [r7, #88]	; 0x58
		computing = 100.0*(computing-(double)Lat6);
 80018ee:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80018f0:	f7fe fe28 	bl	8000544 <__aeabi_i2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80018fc:	f7fe fcd4 	bl	80002a8 <__aeabi_dsub>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	4ba6      	ldr	r3, [pc, #664]	; (8001ba8 <task_send_values_GPS+0x330>)
 800190e:	f7fe fe83 	bl	8000618 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat5 = floor(computing);
 800191a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 800191e:	f011 fe4b 	bl	80135b8 <floor>
 8001922:	ec53 2b10 	vmov	r2, r3, d0
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f925 	bl	8000b78 <__aeabi_d2iz>
 800192e:	4603      	mov	r3, r0
 8001930:	657b      	str	r3, [r7, #84]	; 0x54
		computing = 100.0*(computing-(double)Lat5);
 8001932:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001934:	f7fe fe06 	bl	8000544 <__aeabi_i2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001940:	f7fe fcb2 	bl	80002a8 <__aeabi_dsub>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	4b95      	ldr	r3, [pc, #596]	; (8001ba8 <task_send_values_GPS+0x330>)
 8001952:	f7fe fe61 	bl	8000618 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat4 = floor(computing);
 800195e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001962:	f011 fe29 	bl	80135b8 <floor>
 8001966:	ec53 2b10 	vmov	r2, r3, d0
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f903 	bl	8000b78 <__aeabi_d2iz>
 8001972:	4603      	mov	r3, r0
 8001974:	653b      	str	r3, [r7, #80]	; 0x50
		computing = 100.0*(computing-(double)Lat4);
 8001976:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001978:	f7fe fde4 	bl	8000544 <__aeabi_i2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001984:	f7fe fc90 	bl	80002a8 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	4b84      	ldr	r3, [pc, #528]	; (8001ba8 <task_send_values_GPS+0x330>)
 8001996:	f7fe fe3f 	bl	8000618 <__aeabi_dmul>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat3 = floor(computing);
 80019a2:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80019a6:	f011 fe07 	bl	80135b8 <floor>
 80019aa:	ec53 2b10 	vmov	r2, r3, d0
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f8e1 	bl	8000b78 <__aeabi_d2iz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	64fb      	str	r3, [r7, #76]	; 0x4c
		computing = 100.0*(computing-(double)Lat3);
 80019ba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019bc:	f7fe fdc2 	bl	8000544 <__aeabi_i2d>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80019c8:	f7fe fc6e 	bl	80002a8 <__aeabi_dsub>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b73      	ldr	r3, [pc, #460]	; (8001ba8 <task_send_values_GPS+0x330>)
 80019da:	f7fe fe1d 	bl	8000618 <__aeabi_dmul>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat2 = floor(computing);
 80019e6:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 80019ea:	f011 fde5 	bl	80135b8 <floor>
 80019ee:	ec53 2b10 	vmov	r2, r3, d0
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8bf 	bl	8000b78 <__aeabi_d2iz>
 80019fa:	4603      	mov	r3, r0
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
		computing = 100.0*(computing-(double)Lat2);
 80019fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001a00:	f7fe fda0 	bl	8000544 <__aeabi_i2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a0c:	f7fe fc4c 	bl	80002a8 <__aeabi_dsub>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	4b62      	ldr	r3, [pc, #392]	; (8001ba8 <task_send_values_GPS+0x330>)
 8001a1e:	f7fe fdfb 	bl	8000618 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat1 = floor(computing);
 8001a2a:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001a2e:	f011 fdc3 	bl	80135b8 <floor>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f7ff f89d 	bl	8000b78 <__aeabi_d2iz>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
		computing = 100.0*(computing-(double)Lat1);
 8001a42:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001a44:	f7fe fd7e 	bl	8000544 <__aeabi_i2d>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a50:	f7fe fc2a 	bl	80002a8 <__aeabi_dsub>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <task_send_values_GPS+0x330>)
 8001a62:	f7fe fdd9 	bl	8000618 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lat0 = floor(computing);
 8001a6e:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001a72:	f011 fda1 	bl	80135b8 <floor>
 8001a76:	ec53 2b10 	vmov	r2, r3, d0
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f87b 	bl	8000b78 <__aeabi_d2iz>
 8001a82:	4603      	mov	r3, r0
 8001a84:	643b      	str	r3, [r7, #64]	; 0x40

		gps_data1.gps_data_lat[0] = Lat7;
 8001a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <task_send_values_GPS+0x334>)
 8001a8c:	701a      	strb	r2, [r3, #0]
		gps_data1.gps_data_lat[1] = Lat6;
 8001a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <task_send_values_GPS+0x334>)
 8001a94:	705a      	strb	r2, [r3, #1]
		gps_data1.gps_data_lat[2] = Lat5;
 8001a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <task_send_values_GPS+0x334>)
 8001a9c:	709a      	strb	r2, [r3, #2]
		gps_data1.gps_data_lat[3] = Lat4;
 8001a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b42      	ldr	r3, [pc, #264]	; (8001bac <task_send_values_GPS+0x334>)
 8001aa4:	70da      	strb	r2, [r3, #3]
		gps_data1.gps_data_lat[4] = Lat3;
 8001aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <task_send_values_GPS+0x334>)
 8001aac:	711a      	strb	r2, [r3, #4]
		gps_data1.gps_data_lat[5] = Lat2;
 8001aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b3e      	ldr	r3, [pc, #248]	; (8001bac <task_send_values_GPS+0x334>)
 8001ab4:	715a      	strb	r2, [r3, #5]
		gps_data1.gps_data_lat[6] = Lat1;
 8001ab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <task_send_values_GPS+0x334>)
 8001abc:	719a      	strb	r2, [r3, #6]
		gps_data1.gps_data_lat[7] = Lat0;
 8001abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <task_send_values_GPS+0x334>)
 8001ac4:	71da      	strb	r2, [r3, #7]
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Longitude
		computing = gpsCoords.lon;
 8001ac6:	4b37      	ldr	r3, [pc, #220]	; (8001ba4 <task_send_values_GPS+0x32c>)
 8001ac8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001acc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon7 = floor(computing);
 8001ad0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001ad4:	f011 fd70 	bl	80135b8 <floor>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f84a 	bl	8000b78 <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
		computing = 100.0*(computing-(double)Lon7);
 8001ae8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001aea:	f7fe fd2b 	bl	8000544 <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001af6:	f7fe fbd7 	bl	80002a8 <__aeabi_dsub>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <task_send_values_GPS+0x330>)
 8001b08:	f7fe fd86 	bl	8000618 <__aeabi_dmul>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon6 = floor(computing);
 8001b14:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001b18:	f011 fd4e 	bl	80135b8 <floor>
 8001b1c:	ec53 2b10 	vmov	r2, r3, d0
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f828 	bl	8000b78 <__aeabi_d2iz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
		computing = 100.0*(computing-(double)Lon6);
 8001b2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b2e:	f7fe fd09 	bl	8000544 <__aeabi_i2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b3a:	f7fe fbb5 	bl	80002a8 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <task_send_values_GPS+0x330>)
 8001b4c:	f7fe fd64 	bl	8000618 <__aeabi_dmul>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon5 = floor(computing);
 8001b58:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001b5c:	f011 fd2c 	bl	80135b8 <floor>
 8001b60:	ec53 2b10 	vmov	r2, r3, d0
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f806 	bl	8000b78 <__aeabi_d2iz>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
		computing = 100.0*(computing-(double)Lon5);
 8001b70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b72:	f7fe fce7 	bl	8000544 <__aeabi_i2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001b7e:	f7fe fb93 	bl	80002a8 <__aeabi_dsub>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <task_send_values_GPS+0x330>)
 8001b90:	f7fe fd42 	bl	8000618 <__aeabi_dmul>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8001b9c:	e008      	b.n	8001bb0 <task_send_values_GPS+0x338>
 8001b9e:	bf00      	nop
 8001ba0:	200004d8 	.word	0x200004d8
 8001ba4:	20000330 	.word	0x20000330
 8001ba8:	40590000 	.word	0x40590000
 8001bac:	200004dc 	.word	0x200004dc
		int Lon4 = floor(computing);
 8001bb0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001bb4:	f011 fd00 	bl	80135b8 <floor>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe ffda 	bl	8000b78 <__aeabi_d2iz>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
		computing = 100.0*(computing-(double)Lon4);
 8001bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001bca:	f7fe fcbb 	bl	8000544 <__aeabi_i2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001bd6:	f7fe fb67 	bl	80002a8 <__aeabi_dsub>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	4bca      	ldr	r3, [pc, #808]	; (8001f10 <task_send_values_GPS+0x698>)
 8001be8:	f7fe fd16 	bl	8000618 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon3 = floor(computing);
 8001bf4:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001bf8:	f011 fcde 	bl	80135b8 <floor>
 8001bfc:	ec53 2b10 	vmov	r2, r3, d0
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ffb8 	bl	8000b78 <__aeabi_d2iz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
		computing = 100.0*(computing-(double)Lon3);
 8001c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c0e:	f7fe fc99 	bl	8000544 <__aeabi_i2d>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c1a:	f7fe fb45 	bl	80002a8 <__aeabi_dsub>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4bb9      	ldr	r3, [pc, #740]	; (8001f10 <task_send_values_GPS+0x698>)
 8001c2c:	f7fe fcf4 	bl	8000618 <__aeabi_dmul>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon2 = floor(computing);
 8001c38:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001c3c:	f011 fcbc 	bl	80135b8 <floor>
 8001c40:	ec53 2b10 	vmov	r2, r3, d0
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ff96 	bl	8000b78 <__aeabi_d2iz>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
		computing = 100.0*(computing-(double)Lon2);
 8001c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c52:	f7fe fc77 	bl	8000544 <__aeabi_i2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c5e:	f7fe fb23 	bl	80002a8 <__aeabi_dsub>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4ba8      	ldr	r3, [pc, #672]	; (8001f10 <task_send_values_GPS+0x698>)
 8001c70:	f7fe fcd2 	bl	8000618 <__aeabi_dmul>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon1 = floor(computing);
 8001c7c:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001c80:	f011 fc9a 	bl	80135b8 <floor>
 8001c84:	ec53 2b10 	vmov	r2, r3, d0
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f7fe ff74 	bl	8000b78 <__aeabi_d2iz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
		computing = 100.0*(computing-(double)Lon1);
 8001c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c96:	f7fe fc55 	bl	8000544 <__aeabi_i2d>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ca2:	f7fe fb01 	bl	80002a8 <__aeabi_dsub>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f04f 0200 	mov.w	r2, #0
 8001cb2:	4b97      	ldr	r3, [pc, #604]	; (8001f10 <task_send_values_GPS+0x698>)
 8001cb4:	f7fe fcb0 	bl	8000618 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Lon0 = floor(computing);
 8001cc0:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001cc4:	f011 fc78 	bl	80135b8 <floor>
 8001cc8:	ec53 2b10 	vmov	r2, r3, d0
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe ff52 	bl	8000b78 <__aeabi_d2iz>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	623b      	str	r3, [r7, #32]

		gps_data1.gps_data_long[0] = Lon7;
 8001cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b8d      	ldr	r3, [pc, #564]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001cde:	721a      	strb	r2, [r3, #8]
		gps_data1.gps_data_long[1] = Lon6;
 8001ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	4b8b      	ldr	r3, [pc, #556]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001ce6:	725a      	strb	r2, [r3, #9]
		gps_data1.gps_data_long[2] = Lon5;
 8001ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001cee:	729a      	strb	r2, [r3, #10]
		gps_data1.gps_data_long[3] = Lon4;
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b87      	ldr	r3, [pc, #540]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001cf6:	72da      	strb	r2, [r3, #11]
		gps_data1.gps_data_long[4] = Lon3;
 8001cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b85      	ldr	r3, [pc, #532]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001cfe:	731a      	strb	r2, [r3, #12]
		gps_data1.gps_data_long[5] = Lon2;
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b83      	ldr	r3, [pc, #524]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001d06:	735a      	strb	r2, [r3, #13]
		gps_data1.gps_data_long[6] = Lon1;
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b81      	ldr	r3, [pc, #516]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001d0e:	739a      	strb	r2, [r3, #14]
		gps_data1.gps_data_long[7] = Lon0;
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b7f      	ldr	r3, [pc, #508]	; (8001f14 <task_send_values_GPS+0x69c>)
 8001d16:	73da      	strb	r2, [r3, #15]

		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		//Altitude
		computing = gpsCoords.alt;
 8001d18:	4b7f      	ldr	r3, [pc, #508]	; (8001f18 <task_send_values_GPS+0x6a0>)
 8001d1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt7 = floor(computing);
 8001d22:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d26:	f011 fc47 	bl	80135b8 <floor>
 8001d2a:	ec53 2b10 	vmov	r2, r3, d0
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff21 	bl	8000b78 <__aeabi_d2iz>
 8001d36:	4603      	mov	r3, r0
 8001d38:	61fb      	str	r3, [r7, #28]
		computing = 100.0*(computing-(double)Alt7);
 8001d3a:	69f8      	ldr	r0, [r7, #28]
 8001d3c:	f7fe fc02 	bl	8000544 <__aeabi_i2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d48:	f7fe faae 	bl	80002a8 <__aeabi_dsub>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	4b6d      	ldr	r3, [pc, #436]	; (8001f10 <task_send_values_GPS+0x698>)
 8001d5a:	f7fe fc5d 	bl	8000618 <__aeabi_dmul>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt6 = floor(computing);
 8001d66:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001d6a:	f011 fc25 	bl	80135b8 <floor>
 8001d6e:	ec53 2b10 	vmov	r2, r3, d0
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f7fe feff 	bl	8000b78 <__aeabi_d2iz>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	61bb      	str	r3, [r7, #24]
		computing = 100.0*(computing-(double)Alt6);
 8001d7e:	69b8      	ldr	r0, [r7, #24]
 8001d80:	f7fe fbe0 	bl	8000544 <__aeabi_i2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d8c:	f7fe fa8c 	bl	80002a8 <__aeabi_dsub>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <task_send_values_GPS+0x698>)
 8001d9e:	f7fe fc3b 	bl	8000618 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt5 = floor(computing);
 8001daa:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001dae:	f011 fc03 	bl	80135b8 <floor>
 8001db2:	ec53 2b10 	vmov	r2, r3, d0
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	f7fe fedd 	bl	8000b78 <__aeabi_d2iz>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	617b      	str	r3, [r7, #20]
		computing = 100.0*(computing-(double)Alt5);
 8001dc2:	6978      	ldr	r0, [r7, #20]
 8001dc4:	f7fe fbbe 	bl	8000544 <__aeabi_i2d>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dd0:	f7fe fa6a 	bl	80002a8 <__aeabi_dsub>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <task_send_values_GPS+0x698>)
 8001de2:	f7fe fc19 	bl	8000618 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt4 = floor(computing);
 8001dee:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001df2:	f011 fbe1 	bl	80135b8 <floor>
 8001df6:	ec53 2b10 	vmov	r2, r3, d0
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f7fe febb 	bl	8000b78 <__aeabi_d2iz>
 8001e02:	4603      	mov	r3, r0
 8001e04:	613b      	str	r3, [r7, #16]
		computing = 100.0*(computing-(double)Alt4);
 8001e06:	6938      	ldr	r0, [r7, #16]
 8001e08:	f7fe fb9c 	bl	8000544 <__aeabi_i2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e14:	f7fe fa48 	bl	80002a8 <__aeabi_dsub>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b3a      	ldr	r3, [pc, #232]	; (8001f10 <task_send_values_GPS+0x698>)
 8001e26:	f7fe fbf7 	bl	8000618 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt3 = floor(computing);
 8001e32:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001e36:	f011 fbbf 	bl	80135b8 <floor>
 8001e3a:	ec53 2b10 	vmov	r2, r3, d0
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe99 	bl	8000b78 <__aeabi_d2iz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	60fb      	str	r3, [r7, #12]
		computing = 100.0*(computing-(double)Alt3);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7fe fb7a 	bl	8000544 <__aeabi_i2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e58:	f7fe fa26 	bl	80002a8 <__aeabi_dsub>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b29      	ldr	r3, [pc, #164]	; (8001f10 <task_send_values_GPS+0x698>)
 8001e6a:	f7fe fbd5 	bl	8000618 <__aeabi_dmul>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt2 = floor(computing);
 8001e76:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001e7a:	f011 fb9d 	bl	80135b8 <floor>
 8001e7e:	ec53 2b10 	vmov	r2, r3, d0
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe77 	bl	8000b78 <__aeabi_d2iz>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60bb      	str	r3, [r7, #8]
		computing = 100.0*(computing-(double)Alt2);
 8001e8e:	68b8      	ldr	r0, [r7, #8]
 8001e90:	f7fe fb58 	bl	8000544 <__aeabi_i2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e9c:	f7fe fa04 	bl	80002a8 <__aeabi_dsub>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <task_send_values_GPS+0x698>)
 8001eae:	f7fe fbb3 	bl	8000618 <__aeabi_dmul>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt1 = floor(computing);
 8001eba:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001ebe:	f011 fb7b 	bl	80135b8 <floor>
 8001ec2:	ec53 2b10 	vmov	r2, r3, d0
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fe55 	bl	8000b78 <__aeabi_d2iz>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	607b      	str	r3, [r7, #4]
		computing = 100.0*(computing-(double)Alt1);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fb36 	bl	8000544 <__aeabi_i2d>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ee0:	f7fe f9e2 	bl	80002a8 <__aeabi_dsub>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <task_send_values_GPS+0x698>)
 8001ef2:	f7fe fb91 	bl	8000618 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		int Alt0 = floor(computing);
 8001efe:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8001f02:	f011 fb59 	bl	80135b8 <floor>
 8001f06:	ec53 2b10 	vmov	r2, r3, d0
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	e005      	b.n	8001f1c <task_send_values_GPS+0x6a4>
 8001f10:	40590000 	.word	0x40590000
 8001f14:	200004dc 	.word	0x200004dc
 8001f18:	20000330 	.word	0x20000330
 8001f1c:	f7fe fe2c 	bl	8000b78 <__aeabi_d2iz>
 8001f20:	4603      	mov	r3, r0
 8001f22:	603b      	str	r3, [r7, #0]

		gps_data1.gps_data_alt[0] = Alt7;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f2a:	741a      	strb	r2, [r3, #16]
		gps_data1.gps_data_alt[1] = Alt6;
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f32:	745a      	strb	r2, [r3, #17]
		gps_data1.gps_data_alt[2] = Alt5;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f3a:	749a      	strb	r2, [r3, #18]
		gps_data1.gps_data_alt[3] = Alt4;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f42:	74da      	strb	r2, [r3, #19]
		gps_data1.gps_data_alt[4] = Alt3;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f4a:	751a      	strb	r2, [r3, #20]
		gps_data1.gps_data_alt[5] = Alt2;
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f52:	755a      	strb	r2, [r3, #21]
		gps_data1.gps_data_alt[6] = Alt1;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f5a:	759a      	strb	r2, [r3, #22]
		gps_data1.gps_data_alt[7] = Alt0;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f62:	75da      	strb	r2, [r3, #23]

		MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_GPS, NULL,&gps_data1);
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <task_send_values_GPS+0x70c>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <task_send_values_GPS+0x708>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2130      	movs	r1, #48	; 0x30
 8001f6e:	f7ff fc43 	bl	80017f8 <MESSAGE_SendMailbox>
		//HAL_UART_Transmit_IT(&huart4,gps_data,sizeof(gps_data));

		gpsSend = 0;
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <task_send_values_GPS+0x710>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
	}


}
 8001f78:	bf00      	nop
 8001f7a:	3768      	adds	r7, #104	; 0x68
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200004dc 	.word	0x200004dc
 8001f84:	200004d4 	.word	0x200004d4
 8001f88:	200004d8 	.word	0x200004d8

08001f8c <TransmitGPSFrame>:

void TransmitGPSFrame(GPSFrameTypeDef *frame) {
 8001f8c:	b5b0      	push	{r4, r5, r7, lr}
 8001f8e:	b092      	sub	sp, #72	; 0x48
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	uint8_t buffer[sizeof(API_FrameTypeDef_GPS)];
	API_FrameTypeDef_GPS api_frame;
	api_frame.header = API_HEADER;
 8001f94:	237e      	movs	r3, #126	; 0x7e
 8001f96:	723b      	strb	r3, [r7, #8]
	api_frame.length = sizeof(GPSFrameTypeDef);
 8001f98:	2318      	movs	r3, #24
 8001f9a:	817b      	strh	r3, [r7, #10]
	api_frame.frame_type = MSG_ID_GPS;
 8001f9c:	2330      	movs	r3, #48	; 0x30
 8001f9e:	733b      	strb	r3, [r7, #12]

	memcpy(&(api_frame.data), frame, sizeof(GPSFrameTypeDef));
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	f107 030d 	add.w	r3, r7, #13
 8001fa6:	6810      	ldr	r0, [r2, #0]
 8001fa8:	6851      	ldr	r1, [r2, #4]
 8001faa:	6895      	ldr	r5, [r2, #8]
 8001fac:	68d4      	ldr	r4, [r2, #12]
 8001fae:	6018      	str	r0, [r3, #0]
 8001fb0:	6059      	str	r1, [r3, #4]
 8001fb2:	609d      	str	r5, [r3, #8]
 8001fb4:	60dc      	str	r4, [r3, #12]
 8001fb6:	6910      	ldr	r0, [r2, #16]
 8001fb8:	6951      	ldr	r1, [r2, #20]
 8001fba:	6118      	str	r0, [r3, #16]
 8001fbc:	6159      	str	r1, [r3, #20]
	api_frame.crc = CalculateCRC((uint8_t*)&(api_frame.data), sizeof(GPSFrameTypeDef));
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	3305      	adds	r3, #5
 8001fc4:	2118      	movs	r1, #24
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff f99c 	bl	8001304 <CalculateCRC>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	memcpy(buffer,&api_frame, sizeof(API_FrameTypeDef_GPS));
 8001fd4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fd8:	f107 0508 	add.w	r5, r7, #8
 8001fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fe4:	c407      	stmia	r4!, {r0, r1, r2}
 8001fe6:	8023      	strh	r3, [r4, #0]

	// Transmettre le tableau de bytes via UART
	HAL_UART_Transmit_IT(&huart4, buffer, sizeof(API_FrameTypeDef_GPS));
 8001fe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fec:	221e      	movs	r2, #30
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4803      	ldr	r0, [pc, #12]	; (8002000 <TransmitGPSFrame+0x74>)
 8001ff2:	f009 fe9b 	bl	800bd2c <HAL_UART_Transmit_IT>

}
 8001ff6:	bf00      	nop
 8001ff8:	3748      	adds	r7, #72	; 0x48
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000ad4 	.word	0x20000ad4

08002004 <ProcessNMEALine>:
#include <trames_nmea.h>

//Interprets gps frames to retrieve useful data (latitude, longitude, altitude ...)
void ProcessNMEALine(char *s, GPS_Coords_t * coords, int * quality)
{
 8002004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002008:	b0d6      	sub	sp, #344	; 0x158
 800200a:	af00      	add	r7, sp, #0
 800200c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002010:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002014:	6018      	str	r0, [r3, #0]
 8002016:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800201a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800201e:	6019      	str	r1, [r3, #0]
 8002020:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002024:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002028:	601a      	str	r2, [r3, #0]
  int x;


  // Check the line synchronization

  if (s[0] != '$')
 800202a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800202e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b24      	cmp	r3, #36	; 0x24
 8002038:	f040 83f5 	bne.w	8002826 <ProcessNMEALine+0x822>
    return;

  // Verify the line checksum integrity

  c = 0; // checksum
 800203c:	2300      	movs	r3, #0
 800203e:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f

  i = 1; // Xor bytes between $ and *, but not including those bytes
 8002042:	2301      	movs	r3, #1
 8002044:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

  while((s[i] != 0) && (s[i] != '*'))
 8002048:	e011      	b.n	800206e <ProcessNMEALine+0x6a>
    c ^= s[i++];
 800204a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8002054:	461a      	mov	r2, r3
 8002056:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800205a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4413      	add	r3, r2
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8002068:	4053      	eors	r3, r2
 800206a:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
  while((s[i] != 0) && (s[i] != '*'))
 800206e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002072:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002076:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	4413      	add	r3, r2
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <ProcessNMEALine+0x96>
 8002084:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002088:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800208c:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b2a      	cmp	r3, #42	; 0x2a
 8002098:	d1d7      	bne.n	800204a <ProcessNMEALine+0x46>

  if (s[i] == 0)
 800209a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800209e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80020a2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 83bc 	beq.w	800282a <ProcessNMEALine+0x826>
    return;

  sscanf(&s[i + 1],"%x",&x); // Checksum byte - Note sscanf needs this to be an int, rather than a single byte
 80020b2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80020b6:	3301      	adds	r3, #1
 80020b8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80020bc:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	4413      	add	r3, r2
 80020c4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020c8:	4952      	ldr	r1, [pc, #328]	; (8002214 <ProcessNMEALine+0x210>)
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00d fd66 	bl	800fb9c <siscanf>

  if (c != (char)(x & 0xFF)) // Leave if checksum fails
 80020d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f897 214f 	ldrb.w	r2, [r7, #335]	; 0x14f
 80020da:	429a      	cmp	r2, r3
 80020dc:	f040 83a7 	bne.w	800282e <ProcessNMEALine+0x82a>
    return;

  // Parse out fields on , and *

  f = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

  while(1)
  {
    field[f++] = s;
 80020e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80020f6:	f107 0208 	add.w	r2, r7, #8
 80020fa:	4413      	add	r3, r2
 80020fc:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002100:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	f843 2ccc 	str.w	r2, [r3, #-204]

    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 800210a:	e00a      	b.n	8002122 <ProcessNMEALine+0x11e>
      s++;
 800210c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002110:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002114:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002118:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	3201      	adds	r2, #1
 8002120:	601a      	str	r2, [r3, #0]
    while((*s != 0) && (*s != ',') && (*s != '*') && (*s != 0x0D) && (*s != 0x0A))
 8002122:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002126:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d01f      	beq.n	8002172 <ProcessNMEALine+0x16e>
 8002132:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002136:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b2c      	cmp	r3, #44	; 0x2c
 8002140:	d017      	beq.n	8002172 <ProcessNMEALine+0x16e>
 8002142:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002146:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b2a      	cmp	r3, #42	; 0x2a
 8002150:	d00f      	beq.n	8002172 <ProcessNMEALine+0x16e>
 8002152:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002156:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b0d      	cmp	r3, #13
 8002160:	d007      	beq.n	8002172 <ProcessNMEALine+0x16e>
 8002162:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002166:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d1cc      	bne.n	800210c <ProcessNMEALine+0x108>

    if ((*s == 0) || (*s == '*') || (*s == 0x0D) || (*s == 0x0A) || (f == (FIELD_MAX - 1)))
 8002172:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002176:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01b      	beq.n	80021ba <ProcessNMEALine+0x1b6>
 8002182:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002186:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b2a      	cmp	r3, #42	; 0x2a
 8002190:	d013      	beq.n	80021ba <ProcessNMEALine+0x1b6>
 8002192:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002196:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b0d      	cmp	r3, #13
 80021a0:	d00b      	beq.n	80021ba <ProcessNMEALine+0x1b6>
 80021a2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b0a      	cmp	r3, #10
 80021b0:	d003      	beq.n	80021ba <ProcessNMEALine+0x1b6>
 80021b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021b6:	2b13      	cmp	r3, #19
 80021b8:	d11e      	bne.n	80021f8 <ProcessNMEALine+0x1f4>
    {
      *s = 0;
 80021ba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021be:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
      field[f] = NULL;
 80021c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80021d2:	f107 0208 	add.w	r2, r7, #8
 80021d6:	4413      	add	r3, r2
 80021d8:	2200      	movs	r2, #0
 80021da:	f843 2ccc 	str.w	r2, [r3, #-204]
      break;
 80021de:	bf00      	nop
  }


  // Process a couple of NMEA sentences for illustration

  if (strncmp(field[0],"$G",2) == 0) // Allow for different Talker ID's ie $GP, $GN, $GL, etc
 80021e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e4:	2202      	movs	r2, #2
 80021e6:	490c      	ldr	r1, [pc, #48]	; (8002218 <ProcessNMEALine+0x214>)
 80021e8:	4618      	mov	r0, r3
 80021ea:	f00d fd48 	bl	800fc7e <strncmp>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 831e 	bne.w	8002832 <ProcessNMEALine+0x82e>
 80021f6:	e011      	b.n	800221c <ProcessNMEALine+0x218>
    *s++ = 0;
 80021f8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80021fc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8002206:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800220a:	1c59      	adds	r1, r3, #1
 800220c:	6011      	str	r1, [r2, #0]
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
    field[f++] = s;
 8002212:	e768      	b.n	80020e6 <ProcessNMEALine+0xe2>
 8002214:	08013774 	.word	0x08013774
 8002218:	08013778 	.word	0x08013778
  {
    if ((strcmp(&field[0][3],"GLL") == 0) && (f > 6)) // Geographic Position, Latitude, Longitude and Time
 800221c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002220:	3303      	adds	r3, #3
 8002222:	49bd      	ldr	r1, [pc, #756]	; (8002518 <ProcessNMEALine+0x514>)
 8002224:	4618      	mov	r0, r3
 8002226:	f7fd ffd3 	bl	80001d0 <strcmp>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	f040 8116 	bne.w	800245e <ProcessNMEALine+0x45a>
 8002232:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002236:	2b06      	cmp	r3, #6
 8002238:	f340 8111 	ble.w	800245e <ProcessNMEALine+0x45a>
      // Field 4 Lon Hemi E/W
      // Field 5 UTC Time HHMMSS.SSS
      // Field 6 Fix A=Valid, V=Not Valid
      // Field 7 Mode A=Autonomous, D=Differential, E=Estimated, N=Not Valid [Optional] - Simulator Does not report this

      sscanf(field[1],"%lf",&lat);
 800223c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002240:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002244:	49b5      	ldr	r1, [pc, #724]	; (800251c <ProcessNMEALine+0x518>)
 8002246:	4618      	mov	r0, r3
 8002248:	f00d fca8 	bl	800fb9c <siscanf>

      lat_hemi = field[2][0];
 800224c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143

      sscanf(field[3],"%lf",&lon);
 8002256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800225a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800225e:	49af      	ldr	r1, [pc, #700]	; (800251c <ProcessNMEALine+0x518>)
 8002260:	4618      	mov	r0, r3
 8002262:	f00d fc9b 	bl	800fb9c <siscanf>

      lon_hemi = field[4][0];
 8002266:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142

      sscanf(field[5],"%lf",&fix_time);
 8002270:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002274:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002278:	49a8      	ldr	r1, [pc, #672]	; (800251c <ProcessNMEALine+0x518>)
 800227a:	4618      	mov	r0, r3
 800227c:	f00d fc8e 	bl	800fb9c <siscanf>

      valid = field[6][0];
 8002280:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141

      if (valid == 'A')
 800228a:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800228e:	2b41      	cmp	r3, #65	; 0x41
 8002290:	f040 82c7 	bne.w	8002822 <ProcessNMEALine+0x81e>
      {
        // Extract Time-of-Fix

        fix_minute = (int)fix_time / 100;
 8002294:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fc6c 	bl	8000b78 <__aeabi_d2iz>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4a9f      	ldr	r2, [pc, #636]	; (8002520 <ProcessNMEALine+0x51c>)
 80022a4:	fb82 1203 	smull	r1, r2, r2, r3
 80022a8:	1152      	asrs	r2, r2, #5
 80022aa:	17db      	asrs	r3, r3, #31
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        fix_second = fix_time - (fix_minute * 100);
 80022b2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80022b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022ba:	2264      	movs	r2, #100	; 0x64
 80022bc:	fb02 f303 	mul.w	r3, r2, r3
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe f93f 	bl	8000544 <__aeabi_i2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4620      	mov	r0, r4
 80022cc:	4629      	mov	r1, r5
 80022ce:	f7fd ffeb 	bl	80002a8 <__aeabi_dsub>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

        fix_hour = fix_minute / 100;
 80022da:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022de:	4a90      	ldr	r2, [pc, #576]	; (8002520 <ProcessNMEALine+0x51c>)
 80022e0:	fb82 1203 	smull	r1, r2, r2, r3
 80022e4:	1152      	asrs	r2, r2, #5
 80022e6:	17db      	asrs	r3, r3, #31
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

        fix_minute = fix_minute % 100;
 80022ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022f2:	4a8b      	ldr	r2, [pc, #556]	; (8002520 <ProcessNMEALine+0x51c>)
 80022f4:	fb82 1203 	smull	r1, r2, r2, r3
 80022f8:	1151      	asrs	r1, r2, #5
 80022fa:	17da      	asrs	r2, r3, #31
 80022fc:	1a8a      	subs	r2, r1, r2
 80022fe:	2164      	movs	r1, #100	; 0x64
 8002300:	fb01 f202 	mul.w	r2, r1, r2
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

        // Process Latitude DDMM.mmmmm

        lat_deg = (int)lat / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 800230a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800230e:	4610      	mov	r0, r2
 8002310:	4619      	mov	r1, r3
 8002312:	f7fe fc31 	bl	8000b78 <__aeabi_d2iz>
 8002316:	4603      	mov	r3, r0
 8002318:	4a81      	ldr	r2, [pc, #516]	; (8002520 <ProcessNMEALine+0x51c>)
 800231a:	fb82 1203 	smull	r1, r2, r2, r3
 800231e:	1152      	asrs	r2, r2, #5
 8002320:	17db      	asrs	r3, r3, #31
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

        lat_min = lat - (lat_deg * 100);
 8002328:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800232c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002330:	2264      	movs	r2, #100	; 0x64
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f904 	bl	8000544 <__aeabi_i2d>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4620      	mov	r0, r4
 8002342:	4629      	mov	r1, r5
 8002344:	f7fd ffb0 	bl	80002a8 <__aeabi_dsub>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

        lat = (double)lat_deg + (lat_min / 60.0); // Computed Latitude in DECIMAL DEGREES
 8002350:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8002354:	f7fe f8f6 	bl	8000544 <__aeabi_i2d>
 8002358:	4604      	mov	r4, r0
 800235a:	460d      	mov	r5, r1
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b70      	ldr	r3, [pc, #448]	; (8002524 <ProcessNMEALine+0x520>)
 8002362:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002366:	f7fe fa81 	bl	800086c <__aeabi_ddiv>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4620      	mov	r0, r4
 8002370:	4629      	mov	r1, r5
 8002372:	f7fd ff9b 	bl	80002ac <__adddf3>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

        if (lat_hemi == 'S')
 800237e:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 8002382:	2b53      	cmp	r3, #83	; 0x53
 8002384:	d10e      	bne.n	80023a4 <ProcessNMEALine+0x3a0>
        {
          lat_deg = -lat_deg;
 8002386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800238a:	425b      	negs	r3, r3
 800238c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
          lat = -lat;
 8002390:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002394:	603a      	str	r2, [r7, #0]
 8002396:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	ed97 7b00 	vldr	d7, [r7]
 80023a0:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
        }

        // Process Longitude DDDMM.mmmmm

        lon_deg = (int)lon / 100; // Decompose NMEA form ASCII into DEGREES and MINUTES
 80023a4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fbe4 	bl	8000b78 <__aeabi_d2iz>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4a5b      	ldr	r2, [pc, #364]	; (8002520 <ProcessNMEALine+0x51c>)
 80023b4:	fb82 1203 	smull	r1, r2, r2, r3
 80023b8:	1152      	asrs	r2, r2, #5
 80023ba:	17db      	asrs	r3, r3, #31
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

        lon_min = lon - (lon_deg * 100);
 80023c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80023c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80023ca:	2264      	movs	r2, #100	; 0x64
 80023cc:	fb02 f303 	mul.w	r3, r2, r3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f8b7 	bl	8000544 <__aeabi_i2d>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	4620      	mov	r0, r4
 80023dc:	4629      	mov	r1, r5
 80023de:	f7fd ff63 	bl	80002a8 <__aeabi_dsub>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

        lon = (double)lon_deg + (lon_min / 60.0); // Computed Longitude in DECIMAL DEGREES
 80023ea:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80023ee:	f7fe f8a9 	bl	8000544 <__aeabi_i2d>
 80023f2:	4604      	mov	r4, r0
 80023f4:	460d      	mov	r5, r1
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <ProcessNMEALine+0x520>)
 80023fc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002400:	f7fe fa34 	bl	800086c <__aeabi_ddiv>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4620      	mov	r0, r4
 800240a:	4629      	mov	r1, r5
 800240c:	f7fd ff4e 	bl	80002ac <__adddf3>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

        if (lon_hemi == 'W')
 8002418:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800241c:	2b57      	cmp	r3, #87	; 0x57
 800241e:	d10b      	bne.n	8002438 <ProcessNMEALine+0x434>
        {
          lon_deg = -lon_deg;
 8002420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002424:	425b      	negs	r3, r3
 8002426:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
          lon = -lon;
 800242a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800242e:	4692      	mov	sl, r2
 8002430:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8002434:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
        }


        coords->lat=lat;
 8002438:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800243c:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002440:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 8002444:	6809      	ldr	r1, [r1, #0]
 8002446:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 800244a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800244e:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002452:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 8002456:	6809      	ldr	r1, [r1, #0]
 8002458:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
 800245c:	e1e1      	b.n	8002822 <ProcessNMEALine+0x81e>
      }

    }
    else if ((strcmp(&field[0][3],"GSA") == 0) && (f > 17)) // GPS DOP and Active Satellites
 800245e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002462:	3303      	adds	r3, #3
 8002464:	4930      	ldr	r1, [pc, #192]	; (8002528 <ProcessNMEALine+0x524>)
 8002466:	4618      	mov	r0, r3
 8002468:	f7fd feb2 	bl	80001d0 <strcmp>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d15e      	bne.n	8002530 <ProcessNMEALine+0x52c>
 8002472:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002476:	2b11      	cmp	r3, #17
 8002478:	dd5a      	ble.n	8002530 <ProcessNMEALine+0x52c>
      // Field 14 SV List#12
      // Field 15 PDOP
      // Field 16 HDOP
      // Field 17 VDOP

      mode = field[1][0];
 800247a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
      fix = field[2][0];
 8002484:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f887 310e 	strb.w	r3, [r7, #270]	; 0x10e

      sscanf(field[15],"%lf",&pdop); // Position Dilution of precision (PDOP)
 800248e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002492:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002496:	4921      	ldr	r1, [pc, #132]	; (800251c <ProcessNMEALine+0x518>)
 8002498:	4618      	mov	r0, r3
 800249a:	f00d fb7f 	bl	800fb9c <siscanf>
      sscanf(field[16],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 800249e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024a2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024a6:	491d      	ldr	r1, [pc, #116]	; (800251c <ProcessNMEALine+0x518>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f00d fb77 	bl	800fb9c <siscanf>
      sscanf(field[17],"%lf",&vdop); // Vertical Dilution of precision (VDOP)
 80024ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80024b2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80024b6:	4919      	ldr	r1, [pc, #100]	; (800251c <ProcessNMEALine+0x518>)
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00d fb6f 	bl	800fb9c <siscanf>


      for(i=0; i<12; i++)
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80024c4:	e023      	b.n	800250e <ProcessNMEALine+0x50a>
      {
        if (field[3+i][0])
 80024c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80024ca:	3303      	adds	r3, #3
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80024d2:	f107 0208 	add.w	r2, r7, #8
 80024d6:	4413      	add	r3, r2
 80024d8:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <ProcessNMEALine+0x500>
        {
          sscanf(field[3+i],"%d",&sv);
 80024e2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80024e6:	3303      	adds	r3, #3
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80024ee:	f107 0208 	add.w	r2, r7, #8
 80024f2:	4413      	add	r3, r2
 80024f4:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 80024f8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80024fc:	490b      	ldr	r1, [pc, #44]	; (800252c <ProcessNMEALine+0x528>)
 80024fe:	4618      	mov	r0, r3
 8002500:	f00d fb4c 	bl	800fb9c <siscanf>
      for(i=0; i<12; i++)
 8002504:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002508:	3301      	adds	r3, #1
 800250a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800250e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8002512:	2b0b      	cmp	r3, #11
 8002514:	ddd7      	ble.n	80024c6 <ProcessNMEALine+0x4c2>
    {
 8002516:	e185      	b.n	8002824 <ProcessNMEALine+0x820>
 8002518:	0801377c 	.word	0x0801377c
 800251c:	08013780 	.word	0x08013780
 8002520:	51eb851f 	.word	0x51eb851f
 8002524:	404e0000 	.word	0x404e0000
 8002528:	08013784 	.word	0x08013784
 800252c:	08013788 	.word	0x08013788
        }
      }


    }
    else  if ((strcmp(&field[0][3],"GGA") == 0) && (f > 14))
 8002530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002534:	3303      	adds	r3, #3
 8002536:	49c2      	ldr	r1, [pc, #776]	; (8002840 <ProcessNMEALine+0x83c>)
 8002538:	4618      	mov	r0, r3
 800253a:	f7fd fe49 	bl	80001d0 <strcmp>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	f040 8176 	bne.w	8002832 <ProcessNMEALine+0x82e>
 8002546:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800254a:	2b0e      	cmp	r3, #14
 800254c:	f340 8171 	ble.w	8002832 <ProcessNMEALine+0x82e>
      double lat_min, lon_min;
      double fix_time;
      int fix_hour, fix_minute;
      double fix_second;
      char lat_hemi, lon_hemi;
      int valid = 1;
 8002550:	2301      	movs	r3, #1
 8002552:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      // Field 11 Geoid Separation
      // Field 12 Units M
      // Field 13 Age of Differential (NULL when not used)
      // Field 14 Differential Reference Station ID

      sscanf(field[2],"%lf",&lat);
 8002556:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800255a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800255e:	49b9      	ldr	r1, [pc, #740]	; (8002844 <ProcessNMEALine+0x840>)
 8002560:	4618      	mov	r0, r3
 8002562:	f00d fb1b 	bl	800fb9c <siscanf>

      lat_hemi = field[3][0];
 8002566:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

      sscanf(field[4],"%lf",&lon);
 8002570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002574:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002578:	49b2      	ldr	r1, [pc, #712]	; (8002844 <ProcessNMEALine+0x840>)
 800257a:	4618      	mov	r0, r3
 800257c:	f00d fb0e 	bl	800fb9c <siscanf>

      lon_hemi = field[5][0];
 8002580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c

      sscanf(field[9],"%lf",&msl);
 800258a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800258e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002592:	49ac      	ldr	r1, [pc, #688]	; (8002844 <ProcessNMEALine+0x840>)
 8002594:	4618      	mov	r0, r3
 8002596:	f00d fb01 	bl	800fb9c <siscanf>

      sscanf(field[11],"%lf",&alt);
 800259a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800259e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025a2:	49a8      	ldr	r1, [pc, #672]	; (8002844 <ProcessNMEALine+0x840>)
 80025a4:	4618      	mov	r0, r3
 80025a6:	f00d faf9 	bl	800fb9c <siscanf>

      sscanf(field[1],"%lf",&fix_time);
 80025aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025b2:	49a4      	ldr	r1, [pc, #656]	; (8002844 <ProcessNMEALine+0x840>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f00d faf1 	bl	800fb9c <siscanf>

      if (sscanf(field[6],"%d",quality) == 0)// 0=Fix Not available, 1=GPS SPS, 2=GPS SPS DIFF
 80025ba:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80025be:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80025c2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	499f      	ldr	r1, [pc, #636]	; (8002848 <ProcessNMEALine+0x844>)
 80025ca:	f00d fae7 	bl	800fb9c <siscanf>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <ProcessNMEALine+0x5d6>
        valid = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

      sscanf(field[7],"%d",&sv);    // Satellites used (or in view, depends on receiver)
 80025da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025de:	f107 021c 	add.w	r2, r7, #28
 80025e2:	4999      	ldr	r1, [pc, #612]	; (8002848 <ProcessNMEALine+0x844>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	f00d fad9 	bl	800fb9c <siscanf>

      sscanf(field[8],"%lf",&hdop); // Horizontal Dilution of precision (HDOP)
 80025ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025ee:	f107 0220 	add.w	r2, r7, #32
 80025f2:	4994      	ldr	r1, [pc, #592]	; (8002844 <ProcessNMEALine+0x840>)
 80025f4:	4618      	mov	r0, r3
 80025f6:	f00d fad1 	bl	800fb9c <siscanf>

      if (valid != 0)
 80025fa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 8117 	beq.w	8002832 <ProcessNMEALine+0x82e>
      {
        lat_deg = (int)lat / 100;
 8002604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe fab2 	bl	8000b78 <__aeabi_d2iz>
 8002614:	4603      	mov	r3, r0
 8002616:	4a8d      	ldr	r2, [pc, #564]	; (800284c <ProcessNMEALine+0x848>)
 8002618:	fb82 1203 	smull	r1, r2, r2, r3
 800261c:	1152      	asrs	r2, r2, #5
 800261e:	17db      	asrs	r3, r3, #31
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

        lat_min = lat - (lat_deg * 100);
 8002626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800262a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800262e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002632:	2264      	movs	r2, #100	; 0x64
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd ff83 	bl	8000544 <__aeabi_i2d>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4650      	mov	r0, sl
 8002644:	4659      	mov	r1, fp
 8002646:	f7fd fe2f 	bl	80002a8 <__aeabi_dsub>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	e9c7 2340 	strd	r2, r3, [r7, #256]	; 0x100

        lat = (double)lat_deg + (lat_min / 60.0);
 8002652:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8002656:	f7fd ff75 	bl	8000544 <__aeabi_i2d>
 800265a:	4682      	mov	sl, r0
 800265c:	468b      	mov	fp, r1
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <ProcessNMEALine+0x84c>)
 8002664:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	; 0x100
 8002668:	f7fe f900 	bl	800086c <__aeabi_ddiv>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4650      	mov	r0, sl
 8002672:	4659      	mov	r1, fp
 8002674:	f7fd fe1a 	bl	80002ac <__adddf3>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002680:	e9c1 2300 	strd	r2, r3, [r1]

        if (lat_hemi == 'S')
 8002684:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8002688:	2b53      	cmp	r3, #83	; 0x53
 800268a:	d10a      	bne.n	80026a2 <ProcessNMEALine+0x69e>
          lat = -lat;
 800268c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	4690      	mov	r8, r2
 8002696:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800269a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800269e:	e9c3 8900 	strd	r8, r9, [r3]


        lon_deg = (int)lon / 100;
 80026a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa63 	bl	8000b78 <__aeabi_d2iz>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4a65      	ldr	r2, [pc, #404]	; (800284c <ProcessNMEALine+0x848>)
 80026b6:	fb82 1203 	smull	r1, r2, r2, r3
 80026ba:	1152      	asrs	r2, r2, #5
 80026bc:	17db      	asrs	r3, r3, #31
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

        lon_min = lon - (lon_deg * 100);
 80026c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026c8:	e953 8902 	ldrd	r8, r9, [r3, #-8]
 80026cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d0:	2264      	movs	r2, #100	; 0x64
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fd ff34 	bl	8000544 <__aeabi_i2d>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4640      	mov	r0, r8
 80026e2:	4649      	mov	r1, r9
 80026e4:	f7fd fde0 	bl	80002a8 <__aeabi_dsub>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

        lon = (double)lon_deg + (lon_min / 60.0);
 80026f0:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80026f4:	f7fd ff26 	bl	8000544 <__aeabi_i2d>
 80026f8:	4680      	mov	r8, r0
 80026fa:	4689      	mov	r9, r1
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	4b53      	ldr	r3, [pc, #332]	; (8002850 <ProcessNMEALine+0x84c>)
 8002702:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8002706:	f7fe f8b1 	bl	800086c <__aeabi_ddiv>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4640      	mov	r0, r8
 8002710:	4649      	mov	r1, r9
 8002712:	f7fd fdcb 	bl	80002ac <__adddf3>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800271e:	e941 2302 	strd	r2, r3, [r1, #-8]

        if (lon_hemi == 'W')
 8002722:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8002726:	2b57      	cmp	r3, #87	; 0x57
 8002728:	d10a      	bne.n	8002740 <ProcessNMEALine+0x73c>
          lon = -lon;
 800272a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800272e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002732:	4614      	mov	r4, r2
 8002734:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002738:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800273c:	e943 4502 	strd	r4, r5, [r3, #-8]

        alt += msl; // Convert to height above datum
 8002740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002748:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800274c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002750:	f7fd fdac 	bl	80002ac <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800275c:	e9c1 2300 	strd	r2, r3, [r1]

        fix_minute = (int)fix_time / 100;
 8002760:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	4610      	mov	r0, r2
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fa04 	bl	8000b78 <__aeabi_d2iz>
 8002770:	4603      	mov	r3, r0
 8002772:	4a36      	ldr	r2, [pc, #216]	; (800284c <ProcessNMEALine+0x848>)
 8002774:	fb82 1203 	smull	r1, r2, r2, r3
 8002778:	1152      	asrs	r2, r2, #5
 800277a:	17db      	asrs	r3, r3, #31
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

        fix_second = fix_time - (fix_minute * 100);
 8002782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002786:	e9d3 4500 	ldrd	r4, r5, [r3]
 800278a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800278e:	2264      	movs	r2, #100	; 0x64
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fed5 	bl	8000544 <__aeabi_i2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd fd81 	bl	80002a8 <__aeabi_dsub>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

        fix_hour = fix_minute / 100;
 80027ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027b2:	4a26      	ldr	r2, [pc, #152]	; (800284c <ProcessNMEALine+0x848>)
 80027b4:	fb82 1203 	smull	r1, r2, r2, r3
 80027b8:	1152      	asrs	r2, r2, #5
 80027ba:	17db      	asrs	r3, r3, #31
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

        fix_minute = fix_minute % 100;
 80027c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <ProcessNMEALine+0x848>)
 80027c8:	fb82 1203 	smull	r1, r2, r2, r3
 80027cc:	1151      	asrs	r1, r2, #5
 80027ce:	17da      	asrs	r2, r3, #31
 80027d0:	1a8a      	subs	r2, r1, r2
 80027d2:	2164      	movs	r1, #100	; 0x64
 80027d4:	fb01 f202 	mul.w	r2, r1, r2
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

        coords->lat=lat;
 80027de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80027ea:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80027ee:	6809      	ldr	r1, [r1, #0]
 80027f0:	e9c1 2300 	strd	r2, r3, [r1]
        coords->lon=lon;
 80027f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80027fc:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002800:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 8002804:	6809      	ldr	r1, [r1, #0]
 8002806:	e9c1 2302 	strd	r2, r3, [r1, #8]
        coords->alt=alt;
 800280a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8002816:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 800281a:	6809      	ldr	r1, [r1, #0]
 800281c:	e9c1 2304 	strd	r2, r3, [r1, #16]
      }
    }
  }
  return;
 8002820:	e007      	b.n	8002832 <ProcessNMEALine+0x82e>
    {
 8002822:	bf00      	nop
  return;
 8002824:	e005      	b.n	8002832 <ProcessNMEALine+0x82e>
    return;
 8002826:	bf00      	nop
 8002828:	e004      	b.n	8002834 <ProcessNMEALine+0x830>
    return;
 800282a:	bf00      	nop
 800282c:	e002      	b.n	8002834 <ProcessNMEALine+0x830>
    return;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <ProcessNMEALine+0x830>
  return;
 8002832:	bf00      	nop
}
 8002834:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8002838:	46bd      	mov	sp, r7
 800283a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800283e:	bf00      	nop
 8002840:	0801378c 	.word	0x0801378c
 8002844:	08013780 	.word	0x08013780
 8002848:	08013788 	.word	0x08013788
 800284c:	51eb851f 	.word	0x51eb851f
 8002850:	404e0000 	.word	0x404e0000

08002854 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <vApplicationGetIdleTaskMemory+0x2c>)
 8002864:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4a06      	ldr	r2, [pc, #24]	; (8002884 <vApplicationGetIdleTaskMemory+0x30>)
 800286a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	200004f4 	.word	0x200004f4
 8002884:	20000548 	.word	0x20000548

08002888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800288e:	f004 f8e3 	bl	8006a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002892:	f000 f847 	bl	8002924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002896:	f000 fd53 	bl	8003340 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800289a:	f000 fcf1 	bl	8003280 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 800289e:	f000 f893 	bl	80029c8 <MX_ADC3_Init>
  MX_CAN1_Init();
 80028a2:	f000 f8f5 	bl	8002a90 <MX_CAN1_Init>
  MX_TIM1_Init();
 80028a6:	f000 fa2d 	bl	8002d04 <MX_TIM1_Init>
  MX_TIM3_Init();
 80028aa:	f000 fa85 	bl	8002db8 <MX_TIM3_Init>
  MX_TIM8_Init();
 80028ae:	f000 fb87 	bl	8002fc0 <MX_TIM8_Init>
  MX_UART4_Init();
 80028b2:	f000 fc55 	bl	8003160 <MX_UART4_Init>
  MX_USART3_UART_Init();
 80028b6:	f000 fd13 	bl	80032e0 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 80028ba:	f000 f94b 	bl	8002b54 <MX_I2C2_Init>
  MX_UART5_Init();
 80028be:	f000 fc7f 	bl	80031c0 <MX_UART5_Init>
  MX_COMP2_Init();
 80028c2:	f000 f91b 	bl	8002afc <MX_COMP2_Init>
  MX_SPI2_Init();
 80028c6:	f000 f985 	bl	8002bd4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80028ca:	f000 f9c1 	bl	8002c50 <MX_SPI3_Init>
  MX_SWPMI1_Init();
 80028ce:	f000 f9f9 	bl	8002cc4 <MX_SWPMI1_Init>
  MX_TIM6_Init();
 80028d2:	f000 fb09 	bl	8002ee8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80028d6:	f000 fb3d 	bl	8002f54 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80028da:	f000 fca1 	bl	8003220 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 80028de:	f7fe fcbf 	bl	8001260 <GLOBVAR_Init>

  MESSAGE_Init();
 80028e2:	f7fe ff4f 	bl	8001784 <MESSAGE_Init>

  IMU_init();
 80028e6:	f7fe fd2d 	bl	8001344 <IMU_init>
  IMU_enable();
 80028ea:	f7fe fdfb 	bl	80014e4 <IMU_enable>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <main+0x94>)
 80028f0:	1d3c      	adds	r4, r7, #4
 80028f2:	461d      	mov	r5, r3
 80028f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80028fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f00a fde7 	bl	800d4d8 <osThreadCreate>
 800290a:	4603      	mov	r3, r0
 800290c:	4a04      	ldr	r2, [pc, #16]	; (8002920 <main+0x98>)
 800290e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Tasks_Init();
 8002910:	f7fe fb82 	bl	8001018 <Tasks_Init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002914:	f00a fdd9 	bl	800d4ca <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002918:	e7fe      	b.n	8002918 <main+0x90>
 800291a:	bf00      	nop
 800291c:	0801379c 	.word	0x0801379c
 8002920:	20000d68 	.word	0x20000d68

08002924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b096      	sub	sp, #88	; 0x58
 8002928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	2244      	movs	r2, #68	; 0x44
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f00c fe4a 	bl	800f5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002938:	463b      	mov	r3, r7
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]
 8002944:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002946:	f44f 7000 	mov.w	r0, #512	; 0x200
 800294a:	f006 fd25 	bl	8009398 <HAL_PWREx_ControlVoltageScaling>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002954:	f000 fd6f 	bl	8003436 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002958:	2302      	movs	r3, #2
 800295a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800295c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002960:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002962:	2310      	movs	r3, #16
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002966:	2302      	movs	r3, #2
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800296a:	2302      	movs	r3, #2
 800296c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002972:	230a      	movs	r3, #10
 8002974:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002976:	2307      	movs	r3, #7
 8002978:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800297a:	2302      	movs	r3, #2
 800297c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800297e:	2302      	movs	r3, #2
 8002980:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	4618      	mov	r0, r3
 8002988:	f006 fd5c 	bl	8009444 <HAL_RCC_OscConfig>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002992:	f000 fd50 	bl	8003436 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002996:	230f      	movs	r3, #15
 8002998:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800299a:	2303      	movs	r3, #3
 800299c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029aa:	463b      	mov	r3, r7
 80029ac:	2104      	movs	r1, #4
 80029ae:	4618      	mov	r0, r3
 80029b0:	f007 f924 	bl	8009bfc <HAL_RCC_ClockConfig>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80029ba:	f000 fd3c 	bl	8003436 <Error_Handler>
  }
}
 80029be:	bf00      	nop
 80029c0:	3758      	adds	r7, #88	; 0x58
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ce:	463b      	mov	r3, r7
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <MX_ADC3_Init+0xbc>)
 80029e0:	4a29      	ldr	r2, [pc, #164]	; (8002a88 <MX_ADC3_Init+0xc0>)
 80029e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <MX_ADC3_Init+0xbc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <MX_ADC3_Init+0xbc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029f0:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <MX_ADC3_Init+0xbc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80029f6:	4b23      	ldr	r3, [pc, #140]	; (8002a84 <MX_ADC3_Init+0xbc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029fc:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <MX_ADC3_Init+0xbc>)
 80029fe:	2204      	movs	r2, #4
 8002a00:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a22:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002a3e:	4811      	ldr	r0, [pc, #68]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a40:	f004 fa36 	bl	8006eb0 <HAL_ADC_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8002a4a:	f000 fcf4 	bl	8003436 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_ADC3_Init+0xc4>)
 8002a50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002a52:	2306      	movs	r3, #6
 8002a54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002a5a:	237f      	movs	r3, #127	; 0x7f
 8002a5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a66:	463b      	mov	r3, r7
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4806      	ldr	r0, [pc, #24]	; (8002a84 <MX_ADC3_Init+0xbc>)
 8002a6c:	f004 fb76 	bl	800715c <HAL_ADC_ConfigChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8002a76:	f000 fcde 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002a7a:	bf00      	nop
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000748 	.word	0x20000748
 8002a88:	50040200 	.word	0x50040200
 8002a8c:	04300002 	.word	0x04300002

08002a90 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <MX_CAN1_Init+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002aae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ab2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002acc:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ae0:	f004 ff2c 	bl	800793c <HAL_CAN_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002aea:	f000 fca4 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200007ac 	.word	0x200007ac
 8002af8:	40006400 	.word	0x40006400

08002afc <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002b00:	4b12      	ldr	r3, [pc, #72]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b02:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <MX_COMP2_Init+0x54>)
 8002b04:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002b06:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b08:	2270      	movs	r2, #112	; 0x70
 8002b0a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b12:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002b2a:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002b36:	4805      	ldr	r0, [pc, #20]	; (8002b4c <MX_COMP2_Init+0x50>)
 8002b38:	f005 f8a4 	bl	8007c84 <HAL_COMP_Init>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8002b42:	f000 fc78 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200007d4 	.word	0x200007d4
 8002b50:	40010204 	.word	0x40010204

08002b54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <MX_I2C2_Init+0x78>)
 8002b5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <MX_I2C2_Init+0x7c>)
 8002b62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002b7c:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002b8e:	480e      	ldr	r0, [pc, #56]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002b90:	f005 fdb0 	bl	80086f4 <HAL_I2C_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002b9a:	f000 fc4c 	bl	8003436 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002ba2:	f006 fb53 	bl	800924c <HAL_I2CEx_ConfigAnalogFilter>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002bac:	f000 fc43 	bl	8003436 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_I2C2_Init+0x74>)
 8002bb4:	f006 fb95 	bl	80092e2 <HAL_I2CEx_ConfigDigitalFilter>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002bbe:	f000 fc3a 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000800 	.word	0x20000800
 8002bcc:	40005800 	.word	0x40005800
 8002bd0:	10909cec 	.word	0x10909cec

08002bd4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <MX_SPI2_Init+0x78>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002be0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002be4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002bec:	4b16      	ldr	r3, [pc, #88]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002bee:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002bf2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bfa:	4b13      	ldr	r3, [pc, #76]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c06:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c20:	4b09      	ldr	r3, [pc, #36]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c22:	2207      	movs	r2, #7
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c26:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c2e:	2208      	movs	r2, #8
 8002c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_SPI2_Init+0x74>)
 8002c34:	f007 fec2 	bl	800a9bc <HAL_SPI_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c3e:	f000 fbfa 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000854 	.word	0x20000854
 8002c4c:	40003800 	.word	0x40003800

08002c50 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c56:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <MX_SPI3_Init+0x70>)
 8002c58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002c60:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c66:	4b15      	ldr	r3, [pc, #84]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c68:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002c6c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c80:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002c94:	4b09      	ldr	r3, [pc, #36]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c96:	2207      	movs	r2, #7
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <MX_SPI3_Init+0x6c>)
 8002ca8:	f007 fe88 	bl	800a9bc <HAL_SPI_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8002cb2:	f000 fbc0 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	200008b8 	.word	0x200008b8
 8002cc0:	40003c00 	.word	0x40003c00

08002cc4 <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_SWPMI1_Init+0x38>)
 8002cca:	4a0d      	ldr	r2, [pc, #52]	; (8002d00 <MX_SWPMI1_Init+0x3c>)
 8002ccc:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_SWPMI1_Init+0x38>)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_SWPMI1_Init+0x38>)
 8002cd6:	2213      	movs	r2, #19
 8002cd8:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_SWPMI1_Init+0x38>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_SWPMI1_Init+0x38>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_SWPMI1_Init+0x38>)
 8002ce8:	f007 ff0c 	bl	800ab04 <HAL_SWPMI_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 8002cf2:	f000 fba0 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	2000091c 	.word	0x2000091c
 8002d00:	40008800 	.word	0x40008800

08002d04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08c      	sub	sp, #48	; 0x30
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d0a:	f107 030c 	add.w	r3, r7, #12
 8002d0e:	2224      	movs	r2, #36	; 0x24
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f00c fc5a 	bl	800f5cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d18:	463b      	mov	r3, r7
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d24:	4a23      	ldr	r2, [pc, #140]	; (8002db4 <MX_TIM1_Init+0xb0>)
 8002d26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2e:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d34:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3c:	4b1c      	ldr	r3, [pc, #112]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d56:	2301      	movs	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d62:	2300      	movs	r3, #0
 8002d64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d66:	2301      	movs	r3, #1
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002d72:	f107 030c 	add.w	r3, r7, #12
 8002d76:	4619      	mov	r1, r3
 8002d78:	480d      	ldr	r0, [pc, #52]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d7a:	f007 fff5 	bl	800ad68 <HAL_TIM_Encoder_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002d84:	f000 fb57 	bl	8003436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d94:	463b      	mov	r3, r7
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_TIM1_Init+0xac>)
 8002d9a:	f008 fe73 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002da4:	f000 fb47 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002da8:	bf00      	nop
 8002daa:	3730      	adds	r7, #48	; 0x30
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000958 	.word	0x20000958
 8002db4:	40012c00 	.word	0x40012c00

08002db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08e      	sub	sp, #56	; 0x38
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd8:	463b      	mov	r3, r7
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	615a      	str	r2, [r3, #20]
 8002de8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dea:	4b3d      	ldr	r3, [pc, #244]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002dec:	4a3d      	ldr	r2, [pc, #244]	; (8002ee4 <MX_TIM3_Init+0x12c>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002df0:	4b3b      	ldr	r3, [pc, #236]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b3a      	ldr	r3, [pc, #232]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002dfc:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002dfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e0a:	4b35      	ldr	r3, [pc, #212]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e10:	4833      	ldr	r0, [pc, #204]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e12:	f007 fef1 	bl	800abf8 <HAL_TIM_Base_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002e1c:	f000 fb0b 	bl	8003436 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	482c      	ldr	r0, [pc, #176]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e2e:	f008 f955 	bl	800b0dc <HAL_TIM_ConfigClockSource>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002e38:	f000 fafd 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002e3c:	4828      	ldr	r0, [pc, #160]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e3e:	f007 ff32 	bl	800aca6 <HAL_TIM_PWM_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002e48:	f000 faf5 	bl	8003436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4821      	ldr	r0, [pc, #132]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e5c:	f008 fe12 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002e66:	f000 fae6 	bl	8003436 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e6a:	2360      	movs	r3, #96	; 0x60
 8002e6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4817      	ldr	r0, [pc, #92]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e82:	f008 f817 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002e8c:	f000 fad3 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e90:	463b      	mov	r3, r7
 8002e92:	2204      	movs	r2, #4
 8002e94:	4619      	mov	r1, r3
 8002e96:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002e98:	f008 f80c 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002ea2:	f000 fac8 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	4619      	mov	r1, r3
 8002eac:	480c      	ldr	r0, [pc, #48]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002eae:	f008 f801 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002eb8:	f000 fabd 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ebc:	463b      	mov	r3, r7
 8002ebe:	220c      	movs	r2, #12
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002ec4:	f007 fff6 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8002ece:	f000 fab2 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ed2:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <MX_TIM3_Init+0x128>)
 8002ed4:	f000 fdf0 	bl	8003ab8 <HAL_TIM_MspPostInit>

}
 8002ed8:	bf00      	nop
 8002eda:	3738      	adds	r7, #56	; 0x38
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	200009a4 	.word	0x200009a4
 8002ee4:	40000400 	.word	0x40000400

08002ee8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002efa:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <MX_TIM6_Init+0x68>)
 8002efc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f10:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f18:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f1a:	f007 fe6d 	bl	800abf8 <HAL_TIM_Base_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002f24:	f000 fa87 	bl	8003436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	; (8002f4c <MX_TIM6_Init+0x64>)
 8002f36:	f008 fda5 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002f40:	f000 fa79 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200009f0 	.word	0x200009f0
 8002f50:	40001000 	.word	0x40001000

08002f54 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <MX_TIM7_Init+0x64>)
 8002f66:	4a15      	ldr	r2, [pc, #84]	; (8002fbc <MX_TIM7_Init+0x68>)
 8002f68:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002f6a:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <MX_TIM7_Init+0x64>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f70:	4b11      	ldr	r3, [pc, #68]	; (8002fb8 <MX_TIM7_Init+0x64>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002f76:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <MX_TIM7_Init+0x64>)
 8002f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f7c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7e:	4b0e      	ldr	r3, [pc, #56]	; (8002fb8 <MX_TIM7_Init+0x64>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002f84:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <MX_TIM7_Init+0x64>)
 8002f86:	f007 fe37 	bl	800abf8 <HAL_TIM_Base_Init>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002f90:	f000 fa51 	bl	8003436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <MX_TIM7_Init+0x64>)
 8002fa2:	f008 fd6f 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002fac:	f000 fa43 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000a3c 	.word	0x20000a3c
 8002fbc:	40001400 	.word	0x40001400

08002fc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b09a      	sub	sp, #104	; 0x68
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fc6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
 8002ff0:	615a      	str	r2, [r3, #20]
 8002ff2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	222c      	movs	r2, #44	; 0x2c
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f00c fae6 	bl	800f5cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003000:	4b55      	ldr	r3, [pc, #340]	; (8003158 <MX_TIM8_Init+0x198>)
 8003002:	4a56      	ldr	r2, [pc, #344]	; (800315c <MX_TIM8_Init+0x19c>)
 8003004:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003006:	4b54      	ldr	r3, [pc, #336]	; (8003158 <MX_TIM8_Init+0x198>)
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300c:	4b52      	ldr	r3, [pc, #328]	; (8003158 <MX_TIM8_Init+0x198>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003012:	4b51      	ldr	r3, [pc, #324]	; (8003158 <MX_TIM8_Init+0x198>)
 8003014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003018:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301a:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <MX_TIM8_Init+0x198>)
 800301c:	2200      	movs	r2, #0
 800301e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003020:	4b4d      	ldr	r3, [pc, #308]	; (8003158 <MX_TIM8_Init+0x198>)
 8003022:	2200      	movs	r2, #0
 8003024:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003026:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <MX_TIM8_Init+0x198>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800302c:	484a      	ldr	r0, [pc, #296]	; (8003158 <MX_TIM8_Init+0x198>)
 800302e:	f007 fde3 	bl	800abf8 <HAL_TIM_Base_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003038:	f000 f9fd 	bl	8003436 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800303c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003040:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003042:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003046:	4619      	mov	r1, r3
 8003048:	4843      	ldr	r0, [pc, #268]	; (8003158 <MX_TIM8_Init+0x198>)
 800304a:	f008 f847 	bl	800b0dc <HAL_TIM_ConfigClockSource>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003054:	f000 f9ef 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003058:	483f      	ldr	r0, [pc, #252]	; (8003158 <MX_TIM8_Init+0x198>)
 800305a:	f007 fe24 	bl	800aca6 <HAL_TIM_PWM_Init>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003064:	f000 f9e7 	bl	8003436 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003068:	2300      	movs	r3, #0
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003074:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003078:	4619      	mov	r1, r3
 800307a:	4837      	ldr	r0, [pc, #220]	; (8003158 <MX_TIM8_Init+0x198>)
 800307c:	f008 fd02 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003086:	f000 f9d6 	bl	8003436 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800308a:	2360      	movs	r3, #96	; 0x60
 800308c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003092:	2300      	movs	r3, #0
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003096:	2300      	movs	r3, #0
 8003098:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800309a:	2300      	movs	r3, #0
 800309c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800309e:	2300      	movs	r3, #0
 80030a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80030a2:	2300      	movs	r3, #0
 80030a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030aa:	2200      	movs	r2, #0
 80030ac:	4619      	mov	r1, r3
 80030ae:	482a      	ldr	r0, [pc, #168]	; (8003158 <MX_TIM8_Init+0x198>)
 80030b0:	f007 ff00 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80030ba:	f000 f9bc 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030c2:	2204      	movs	r2, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	4824      	ldr	r0, [pc, #144]	; (8003158 <MX_TIM8_Init+0x198>)
 80030c8:	f007 fef4 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80030d2:	f000 f9b0 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030da:	2208      	movs	r2, #8
 80030dc:	4619      	mov	r1, r3
 80030de:	481e      	ldr	r0, [pc, #120]	; (8003158 <MX_TIM8_Init+0x198>)
 80030e0:	f007 fee8 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80030ea:	f000 f9a4 	bl	8003436 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030f2:	220c      	movs	r2, #12
 80030f4:	4619      	mov	r1, r3
 80030f6:	4818      	ldr	r0, [pc, #96]	; (8003158 <MX_TIM8_Init+0x198>)
 80030f8:	f007 fedc 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8003102:	f000 f998 	bl	8003436 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800311a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800311e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003132:	2300      	movs	r3, #0
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	4619      	mov	r1, r3
 800313a:	4807      	ldr	r0, [pc, #28]	; (8003158 <MX_TIM8_Init+0x198>)
 800313c:	f008 fd2a 	bl	800bb94 <HAL_TIMEx_ConfigBreakDeadTime>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8003146:	f000 f976 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800314a:	4803      	ldr	r0, [pc, #12]	; (8003158 <MX_TIM8_Init+0x198>)
 800314c:	f000 fcb4 	bl	8003ab8 <HAL_TIM_MspPostInit>

}
 8003150:	bf00      	nop
 8003152:	3768      	adds	r7, #104	; 0x68
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20000a88 	.word	0x20000a88
 800315c:	40013400 	.word	0x40013400

08003160 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003164:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <MX_UART4_Init+0x58>)
 8003166:	4a15      	ldr	r2, [pc, #84]	; (80031bc <MX_UART4_Init+0x5c>)
 8003168:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800316a:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <MX_UART4_Init+0x58>)
 800316c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003170:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <MX_UART4_Init+0x58>)
 8003174:	2200      	movs	r2, #0
 8003176:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <MX_UART4_Init+0x58>)
 800317a:	2200      	movs	r2, #0
 800317c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800317e:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <MX_UART4_Init+0x58>)
 8003180:	2200      	movs	r2, #0
 8003182:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <MX_UART4_Init+0x58>)
 8003186:	220c      	movs	r2, #12
 8003188:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <MX_UART4_Init+0x58>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <MX_UART4_Init+0x58>)
 8003192:	2200      	movs	r2, #0
 8003194:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <MX_UART4_Init+0x58>)
 8003198:	2200      	movs	r2, #0
 800319a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_UART4_Init+0x58>)
 800319e:	2200      	movs	r2, #0
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80031a2:	4805      	ldr	r0, [pc, #20]	; (80031b8 <MX_UART4_Init+0x58>)
 80031a4:	f008 fd74 	bl	800bc90 <HAL_UART_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80031ae:	f000 f942 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000ad4 	.word	0x20000ad4
 80031bc:	40004c00 	.word	0x40004c00

080031c0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <MX_UART5_Init+0x58>)
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <MX_UART5_Init+0x5c>)
 80031c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80031ca:	4b13      	ldr	r3, [pc, #76]	; (8003218 <MX_UART5_Init+0x58>)
 80031cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80031d2:	4b11      	ldr	r3, [pc, #68]	; (8003218 <MX_UART5_Init+0x58>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80031d8:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <MX_UART5_Init+0x58>)
 80031da:	2200      	movs	r2, #0
 80031dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80031de:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <MX_UART5_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <MX_UART5_Init+0x58>)
 80031e6:	220c      	movs	r2, #12
 80031e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <MX_UART5_Init+0x58>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <MX_UART5_Init+0x58>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031f6:	4b08      	ldr	r3, [pc, #32]	; (8003218 <MX_UART5_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <MX_UART5_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003202:	4805      	ldr	r0, [pc, #20]	; (8003218 <MX_UART5_Init+0x58>)
 8003204:	f008 fd44 	bl	800bc90 <HAL_UART_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800320e:	f000 f912 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000b58 	.word	0x20000b58
 800321c:	40005000 	.word	0x40005000

08003220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <MX_USART1_UART_Init+0x58>)
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <MX_USART1_UART_Init+0x5c>)
 8003228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800322a:	4b13      	ldr	r3, [pc, #76]	; (8003278 <MX_USART1_UART_Init+0x58>)
 800322c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003232:	4b11      	ldr	r3, [pc, #68]	; (8003278 <MX_USART1_UART_Init+0x58>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003238:	4b0f      	ldr	r3, [pc, #60]	; (8003278 <MX_USART1_UART_Init+0x58>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <MX_USART1_UART_Init+0x58>)
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <MX_USART1_UART_Init+0x58>)
 8003246:	220c      	movs	r2, #12
 8003248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800324a:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <MX_USART1_UART_Init+0x58>)
 800324c:	2200      	movs	r2, #0
 800324e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <MX_USART1_UART_Init+0x58>)
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003256:	4b08      	ldr	r3, [pc, #32]	; (8003278 <MX_USART1_UART_Init+0x58>)
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <MX_USART1_UART_Init+0x58>)
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003262:	4805      	ldr	r0, [pc, #20]	; (8003278 <MX_USART1_UART_Init+0x58>)
 8003264:	f008 fd14 	bl	800bc90 <HAL_UART_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800326e:	f000 f8e2 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000bdc 	.word	0x20000bdc
 800327c:	40013800 	.word	0x40013800

08003280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 8003286:	4a15      	ldr	r2, [pc, #84]	; (80032dc <MX_USART2_UART_Init+0x5c>)
 8003288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 800328c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 8003294:	2200      	movs	r2, #0
 8003296:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003298:	4b0f      	ldr	r3, [pc, #60]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 800329a:	2200      	movs	r2, #0
 800329c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800329e:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 80032a6:	220c      	movs	r2, #12
 80032a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 80032be:	2200      	movs	r2, #0
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032c2:	4805      	ldr	r0, [pc, #20]	; (80032d8 <MX_USART2_UART_Init+0x58>)
 80032c4:	f008 fce4 	bl	800bc90 <HAL_UART_Init>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80032ce:	f000 f8b2 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000c60 	.word	0x20000c60
 80032dc:	40004400 	.word	0x40004400

080032e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <MX_USART3_UART_Init+0x58>)
 80032e6:	4a15      	ldr	r2, [pc, #84]	; (800333c <MX_USART3_UART_Init+0x5c>)
 80032e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <MX_USART3_UART_Init+0x58>)
 80032ec:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80032f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <MX_USART3_UART_Init+0x58>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <MX_USART3_UART_Init+0x58>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80032fe:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <MX_USART3_UART_Init+0x58>)
 8003300:	2200      	movs	r2, #0
 8003302:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <MX_USART3_UART_Init+0x58>)
 8003306:	220c      	movs	r2, #12
 8003308:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800330a:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <MX_USART3_UART_Init+0x58>)
 800330c:	2200      	movs	r2, #0
 800330e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <MX_USART3_UART_Init+0x58>)
 8003312:	2200      	movs	r2, #0
 8003314:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <MX_USART3_UART_Init+0x58>)
 8003318:	2200      	movs	r2, #0
 800331a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800331c:	4b06      	ldr	r3, [pc, #24]	; (8003338 <MX_USART3_UART_Init+0x58>)
 800331e:	2200      	movs	r2, #0
 8003320:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <MX_USART3_UART_Init+0x58>)
 8003324:	f008 fcb4 	bl	800bc90 <HAL_UART_Init>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800332e:	f000 f882 	bl	8003436 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000ce4 	.word	0x20000ce4
 800333c:	40004800 	.word	0x40004800

08003340 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	60da      	str	r2, [r3, #12]
 8003354:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003356:	4b31      	ldr	r3, [pc, #196]	; (800341c <MX_GPIO_Init+0xdc>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	4a30      	ldr	r2, [pc, #192]	; (800341c <MX_GPIO_Init+0xdc>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <MX_GPIO_Init+0xdc>)
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800336e:	4b2b      	ldr	r3, [pc, #172]	; (800341c <MX_GPIO_Init+0xdc>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	4a2a      	ldr	r2, [pc, #168]	; (800341c <MX_GPIO_Init+0xdc>)
 8003374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <MX_GPIO_Init+0xdc>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003386:	4b25      	ldr	r3, [pc, #148]	; (800341c <MX_GPIO_Init+0xdc>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	4a24      	ldr	r2, [pc, #144]	; (800341c <MX_GPIO_Init+0xdc>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003392:	4b22      	ldr	r3, [pc, #136]	; (800341c <MX_GPIO_Init+0xdc>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <MX_GPIO_Init+0xdc>)
 80033a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a2:	4a1e      	ldr	r2, [pc, #120]	; (800341c <MX_GPIO_Init+0xdc>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <MX_GPIO_Init+0xdc>)
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	607b      	str	r3, [r7, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <MX_GPIO_Init+0xdc>)
 80033b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ba:	4a18      	ldr	r2, [pc, #96]	; (800341c <MX_GPIO_Init+0xdc>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <MX_GPIO_Init+0xdc>)
 80033c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2120      	movs	r1, #32
 80033d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d6:	f005 f975 	bl	80086c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80033da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80033e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80033e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033ea:	f107 0314 	add.w	r3, r7, #20
 80033ee:	4619      	mov	r1, r3
 80033f0:	480b      	ldr	r0, [pc, #44]	; (8003420 <MX_GPIO_Init+0xe0>)
 80033f2:	f004 fec9 	bl	8008188 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80033f6:	2320      	movs	r3, #32
 80033f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003406:	f107 0314 	add.w	r3, r7, #20
 800340a:	4619      	mov	r1, r3
 800340c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003410:	f004 feba 	bl	8008188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003414:	bf00      	nop
 8003416:	3728      	adds	r7, #40	; 0x28
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	48000800 	.word	0x48000800

08003424 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 800342c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003430:	f00a f89e 	bl	800d570 <osDelay>
 8003434:	e7fa      	b.n	800342c <StartDefaultTask+0x8>

08003436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003436:	b480      	push	{r7}
 8003438:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800343a:	b672      	cpsid	i
}
 800343c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800343e:	e7fe      	b.n	800343e <Error_Handler+0x8>

08003440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_MspInit+0x4c>)
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	4a10      	ldr	r2, [pc, #64]	; (800348c <HAL_MspInit+0x4c>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6613      	str	r3, [r2, #96]	; 0x60
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_MspInit+0x4c>)
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <HAL_MspInit+0x4c>)
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_MspInit+0x4c>)
 8003464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <HAL_MspInit+0x4c>)
 800346c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003476:	2200      	movs	r2, #0
 8003478:	210f      	movs	r1, #15
 800347a:	f06f 0001 	mvn.w	r0, #1
 800347e:	f004 fdce 	bl	800801e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000

08003490 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b0ac      	sub	sp, #176	; 0xb0
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003498:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	609a      	str	r2, [r3, #8]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a8:	f107 0314 	add.w	r3, r7, #20
 80034ac:	2288      	movs	r2, #136	; 0x88
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f00c f88b 	bl	800f5cc <memset>
  if(hadc->Instance==ADC3)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a27      	ldr	r2, [pc, #156]	; (8003558 <HAL_ADC_MspInit+0xc8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d146      	bne.n	800354e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80034c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80034c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80034ce:	2302      	movs	r3, #2
 80034d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80034d6:	2308      	movs	r3, #8
 80034d8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80034da:	2307      	movs	r3, #7
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80034de:	2302      	movs	r3, #2
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80034e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034ec:	f107 0314 	add.w	r3, r7, #20
 80034f0:	4618      	mov	r0, r3
 80034f2:	f006 fda7 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80034fc:	f7ff ff9b 	bl	8003436 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8003500:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_ADC_MspInit+0xcc>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_ADC_MspInit+0xcc>)
 8003506:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800350a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800350c:	4b13      	ldr	r3, [pc, #76]	; (800355c <HAL_ADC_MspInit+0xcc>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003518:	4b10      	ldr	r3, [pc, #64]	; (800355c <HAL_ADC_MspInit+0xcc>)
 800351a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351c:	4a0f      	ldr	r2, [pc, #60]	; (800355c <HAL_ADC_MspInit+0xcc>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003524:	4b0d      	ldr	r3, [pc, #52]	; (800355c <HAL_ADC_MspInit+0xcc>)
 8003526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003530:	2307      	movs	r3, #7
 8003532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003536:	230b      	movs	r3, #11
 8003538:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003542:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003546:	4619      	mov	r1, r3
 8003548:	4805      	ldr	r0, [pc, #20]	; (8003560 <HAL_ADC_MspInit+0xd0>)
 800354a:	f004 fe1d 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	37b0      	adds	r7, #176	; 0xb0
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	50040200 	.word	0x50040200
 800355c:	40021000 	.word	0x40021000
 8003560:	48000800 	.word	0x48000800

08003564 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a18      	ldr	r2, [pc, #96]	; (80035e4 <HAL_CAN_MspInit+0x80>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d129      	bne.n	80035da <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003586:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_CAN_MspInit+0x84>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_CAN_MspInit+0x84>)
 800358c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003590:	6593      	str	r3, [r2, #88]	; 0x58
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <HAL_CAN_MspInit+0x84>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_CAN_MspInit+0x84>)
 80035a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a2:	4a11      	ldr	r2, [pc, #68]	; (80035e8 <HAL_CAN_MspInit+0x84>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <HAL_CAN_MspInit+0x84>)
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	60fb      	str	r3, [r7, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80035b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80035ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035bc:	2302      	movs	r3, #2
 80035be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c4:	2303      	movs	r3, #3
 80035c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80035c8:	2309      	movs	r3, #9
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	f107 0314 	add.w	r3, r7, #20
 80035d0:	4619      	mov	r1, r3
 80035d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d6:	f004 fdd7 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80035da:	bf00      	nop
 80035dc:	3728      	adds	r7, #40	; 0x28
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40006400 	.word	0x40006400
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 030c 	add.w	r3, r7, #12
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0f      	ldr	r2, [pc, #60]	; (8003648 <HAL_COMP_MspInit+0x5c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d117      	bne.n	800363e <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <HAL_COMP_MspInit+0x60>)
 8003610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003612:	4a0e      	ldr	r2, [pc, #56]	; (800364c <HAL_COMP_MspInit+0x60>)
 8003614:	f043 0302 	orr.w	r3, r3, #2
 8003618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800361a:	4b0c      	ldr	r3, [pc, #48]	; (800364c <HAL_COMP_MspInit+0x60>)
 800361c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8003626:	2390      	movs	r3, #144	; 0x90
 8003628:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800362a:	2303      	movs	r3, #3
 800362c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	4619      	mov	r1, r3
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <HAL_COMP_MspInit+0x64>)
 800363a:	f004 fda5 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800363e:	bf00      	nop
 8003640:	3720      	adds	r7, #32
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40010204 	.word	0x40010204
 800364c:	40021000 	.word	0x40021000
 8003650:	48000400 	.word	0x48000400

08003654 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0ac      	sub	sp, #176	; 0xb0
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	2288      	movs	r2, #136	; 0x88
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f00b ffa9 	bl	800f5cc <memset>
  if(hi2c->Instance==I2C2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_I2C_MspInit+0xb0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d13b      	bne.n	80036fc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003684:	2380      	movs	r3, #128	; 0x80
 8003686:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003688:	2300      	movs	r3, #0
 800368a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368c:	f107 0314 	add.w	r3, r7, #20
 8003690:	4618      	mov	r0, r3
 8003692:	f006 fcd7 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800369c:	f7ff fecb 	bl	8003436 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a0:	4b19      	ldr	r3, [pc, #100]	; (8003708 <HAL_I2C_MspInit+0xb4>)
 80036a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a4:	4a18      	ldr	r2, [pc, #96]	; (8003708 <HAL_I2C_MspInit+0xb4>)
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <HAL_I2C_MspInit+0xb4>)
 80036ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	613b      	str	r3, [r7, #16]
 80036b6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c0:	2312      	movs	r3, #18
 80036c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036cc:	2303      	movs	r3, #3
 80036ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80036d2:	2304      	movs	r3, #4
 80036d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036dc:	4619      	mov	r1, r3
 80036de:	480b      	ldr	r0, [pc, #44]	; (800370c <HAL_I2C_MspInit+0xb8>)
 80036e0:	f004 fd52 	bl	8008188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <HAL_I2C_MspInit+0xb4>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	4a07      	ldr	r2, [pc, #28]	; (8003708 <HAL_I2C_MspInit+0xb4>)
 80036ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036ee:	6593      	str	r3, [r2, #88]	; 0x58
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <HAL_I2C_MspInit+0xb4>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80036fc:	bf00      	nop
 80036fe:	37b0      	adds	r7, #176	; 0xb0
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40005800 	.word	0x40005800
 8003708:	40021000 	.word	0x40021000
 800370c:	48000400 	.word	0x48000400

08003710 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_I2C_MspDeInit+0x3c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d10f      	bne.n	8003742 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_I2C_MspDeInit+0x40>)
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <HAL_I2C_MspDeInit+0x40>)
 8003728:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800372c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800372e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003732:	4808      	ldr	r0, [pc, #32]	; (8003754 <HAL_I2C_MspDeInit+0x44>)
 8003734:	f004 fed2 	bl	80084dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8003738:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800373c:	4805      	ldr	r0, [pc, #20]	; (8003754 <HAL_I2C_MspDeInit+0x44>)
 800373e:	f004 fecd 	bl	80084dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40005800 	.word	0x40005800
 8003750:	40021000 	.word	0x40021000
 8003754:	48000400 	.word	0x48000400

08003758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b08e      	sub	sp, #56	; 0x38
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	605a      	str	r2, [r3, #4]
 800376a:	609a      	str	r2, [r3, #8]
 800376c:	60da      	str	r2, [r3, #12]
 800376e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a4b      	ldr	r2, [pc, #300]	; (80038a4 <HAL_SPI_MspInit+0x14c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d145      	bne.n	8003806 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800377a:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	4a4a      	ldr	r2, [pc, #296]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003784:	6593      	str	r3, [r2, #88]	; 0x58
 8003786:	4b48      	ldr	r3, [pc, #288]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378e:	623b      	str	r3, [r7, #32]
 8003790:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003792:	4b45      	ldr	r3, [pc, #276]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	4a44      	ldr	r2, [pc, #272]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003798:	f043 0304 	orr.w	r3, r3, #4
 800379c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800379e:	4b42      	ldr	r3, [pc, #264]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	61fb      	str	r3, [r7, #28]
 80037a8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	4a3e      	ldr	r2, [pc, #248]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037b6:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	61bb      	str	r3, [r7, #24]
 80037c0:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037c2:	2308      	movs	r3, #8
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037d2:	2305      	movs	r3, #5
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037da:	4619      	mov	r1, r3
 80037dc:	4833      	ldr	r0, [pc, #204]	; (80038ac <HAL_SPI_MspInit+0x154>)
 80037de:	f004 fcd3 	bl	8008188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80037e2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f0:	2303      	movs	r3, #3
 80037f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037f4:	2305      	movs	r3, #5
 80037f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037fc:	4619      	mov	r1, r3
 80037fe:	482c      	ldr	r0, [pc, #176]	; (80038b0 <HAL_SPI_MspInit+0x158>)
 8003800:	f004 fcc2 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003804:	e049      	b.n	800389a <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2a      	ldr	r2, [pc, #168]	; (80038b4 <HAL_SPI_MspInit+0x15c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d144      	bne.n	800389a <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003814:	4a24      	ldr	r2, [pc, #144]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381a:	6593      	str	r3, [r2, #88]	; 0x58
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 800382a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382c:	4a1e      	ldr	r2, [pc, #120]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 800382e:	f043 0304 	orr.w	r3, r3, #4
 8003832:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003834:	4b1c      	ldr	r3, [pc, #112]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 8003846:	f043 0302 	orr.w	r3, r3, #2
 800384a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_SPI_MspInit+0x150>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003858:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003862:	2300      	movs	r3, #0
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003866:	2303      	movs	r3, #3
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800386a:	2306      	movs	r3, #6
 800386c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800386e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003872:	4619      	mov	r1, r3
 8003874:	480d      	ldr	r0, [pc, #52]	; (80038ac <HAL_SPI_MspInit+0x154>)
 8003876:	f004 fc87 	bl	8008188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800387a:	2320      	movs	r3, #32
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800387e:	2302      	movs	r3, #2
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003886:	2303      	movs	r3, #3
 8003888:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800388a:	2306      	movs	r3, #6
 800388c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003892:	4619      	mov	r1, r3
 8003894:	4806      	ldr	r0, [pc, #24]	; (80038b0 <HAL_SPI_MspInit+0x158>)
 8003896:	f004 fc77 	bl	8008188 <HAL_GPIO_Init>
}
 800389a:	bf00      	nop
 800389c:	3738      	adds	r7, #56	; 0x38
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40003800 	.word	0x40003800
 80038a8:	40021000 	.word	0x40021000
 80038ac:	48000800 	.word	0x48000800
 80038b0:	48000400 	.word	0x48000400
 80038b4:	40003c00 	.word	0x40003c00

080038b8 <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b0ac      	sub	sp, #176	; 0xb0
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d0:	f107 0314 	add.w	r3, r7, #20
 80038d4:	2288      	movs	r2, #136	; 0x88
 80038d6:	2100      	movs	r1, #0
 80038d8:	4618      	mov	r0, r3
 80038da:	f00b fe77 	bl	800f5cc <memset>
  if(hswpmi->Instance==SWPMI1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a22      	ldr	r2, [pc, #136]	; (800396c <HAL_SWPMI_MspInit+0xb4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d13d      	bne.n	8003964 <HAL_SWPMI_MspInit+0xac>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 80038e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4618      	mov	r0, r3
 80038fa:	f006 fba3 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 8003904:	f7ff fd97 	bl	8003436 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 8003908:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_SWPMI_MspInit+0xb8>)
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	4a18      	ldr	r2, [pc, #96]	; (8003970 <HAL_SWPMI_MspInit+0xb8>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003914:	4b16      	ldr	r3, [pc, #88]	; (8003970 <HAL_SWPMI_MspInit+0xb8>)
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <HAL_SWPMI_MspInit+0xb8>)
 8003922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003924:	4a12      	ldr	r2, [pc, #72]	; (8003970 <HAL_SWPMI_MspInit+0xb8>)
 8003926:	f043 0302 	orr.w	r3, r3, #2
 800392a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800392c:	4b10      	ldr	r3, [pc, #64]	; (8003970 <HAL_SWPMI_MspInit+0xb8>)
 800392e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
    /**SWPMI1 GPIO Configuration
    PB12     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800393c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003940:	2302      	movs	r3, #2
 8003942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800394c:	2303      	movs	r3, #3
 800394e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 8003952:	230c      	movs	r3, #12
 8003954:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003958:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800395c:	4619      	mov	r1, r3
 800395e:	4805      	ldr	r0, [pc, #20]	; (8003974 <HAL_SWPMI_MspInit+0xbc>)
 8003960:	f004 fc12 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 8003964:	bf00      	nop
 8003966:	37b0      	adds	r7, #176	; 0xb0
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40008800 	.word	0x40008800
 8003970:	40021000 	.word	0x40021000
 8003974:	48000400 	.word	0x48000400

08003978 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_TIM_Encoder_MspInit+0x80>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d129      	bne.n	80039ee <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039a4:	6613      	str	r3, [r2, #96]	; 0x60
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b2:	4b12      	ldr	r3, [pc, #72]	; (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b6:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039be:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <HAL_TIM_Encoder_MspInit+0x84>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d8:	2300      	movs	r3, #0
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039dc:	2301      	movs	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4619      	mov	r1, r3
 80039e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ea:	f004 fbcd 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80039ee:	bf00      	nop
 80039f0:	3728      	adds	r7, #40	; 0x28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <HAL_TIM_Base_MspInit+0xa4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10c      	bne.n	8003a2c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a12:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a16:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1e:	4b22      	ldr	r3, [pc, #136]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a2a:	e034      	b.n	8003a96 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <HAL_TIM_Base_MspInit+0xac>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10c      	bne.n	8003a50 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a3c:	f043 0310 	orr.w	r3, r3, #16
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
}
 8003a4e:	e022      	b.n	8003a96 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a16      	ldr	r2, [pc, #88]	; (8003ab0 <HAL_TIM_Base_MspInit+0xb0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10c      	bne.n	8003a74 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a60:	f043 0320 	orr.w	r3, r3, #32
 8003a64:	6593      	str	r3, [r2, #88]	; 0x58
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
}
 8003a72:	e010      	b.n	8003a96 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0e      	ldr	r2, [pc, #56]	; (8003ab4 <HAL_TIM_Base_MspInit+0xb4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10b      	bne.n	8003a96 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a82:	4a09      	ldr	r2, [pc, #36]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a88:	6613      	str	r3, [r2, #96]	; 0x60
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_TIM_Base_MspInit+0xa8>)
 8003a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40001000 	.word	0x40001000
 8003ab0:	40001400 	.word	0x40001400
 8003ab4:	40013400 	.word	0x40013400

08003ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08a      	sub	sp, #40	; 0x28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
 8003ac8:	605a      	str	r2, [r3, #4]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	60da      	str	r2, [r3, #12]
 8003ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a31      	ldr	r2, [pc, #196]	; (8003b9c <HAL_TIM_MspPostInit+0xe4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d139      	bne.n	8003b4e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ade:	4a30      	ldr	r2, [pc, #192]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af2:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003af8:	f043 0302 	orr.w	r3, r3, #2
 8003afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003afe:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b0a:	23c0      	movs	r3, #192	; 0xc0
 8003b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	4619      	mov	r1, r3
 8003b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b28:	f004 fb2e 	bl	8008188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b40:	f107 0314 	add.w	r3, r7, #20
 8003b44:	4619      	mov	r1, r3
 8003b46:	4817      	ldr	r0, [pc, #92]	; (8003ba4 <HAL_TIM_MspPostInit+0xec>)
 8003b48:	f004 fb1e 	bl	8008188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b4c:	e021      	b.n	8003b92 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a15      	ldr	r2, [pc, #84]	; (8003ba8 <HAL_TIM_MspPostInit+0xf0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d11c      	bne.n	8003b92 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b58:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5c:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003b5e:	f043 0304 	orr.w	r3, r3, #4
 8003b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <HAL_TIM_MspPostInit+0xe8>)
 8003b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003b70:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b76:	2302      	movs	r3, #2
 8003b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003b82:	2303      	movs	r3, #3
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b86:	f107 0314 	add.w	r3, r7, #20
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4807      	ldr	r0, [pc, #28]	; (8003bac <HAL_TIM_MspPostInit+0xf4>)
 8003b8e:	f004 fafb 	bl	8008188 <HAL_GPIO_Init>
}
 8003b92:	bf00      	nop
 8003b94:	3728      	adds	r7, #40	; 0x28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	48000400 	.word	0x48000400
 8003ba8:	40013400 	.word	0x40013400
 8003bac:	48000800 	.word	0x48000800

08003bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b0b6      	sub	sp, #216	; 0xd8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	60da      	str	r2, [r3, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bcc:	2288      	movs	r2, #136	; 0x88
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f00b fcfb 	bl	800f5cc <memset>
  if(huart->Instance==UART4)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4aad      	ldr	r2, [pc, #692]	; (8003e90 <HAL_UART_MspInit+0x2e0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d145      	bne.n	8003c6c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003be0:	2308      	movs	r3, #8
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f006 fa28 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003bfa:	f7ff fc1c 	bl	8003436 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003bfe:	4ba5      	ldr	r3, [pc, #660]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	4aa4      	ldr	r2, [pc, #656]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c08:	6593      	str	r3, [r2, #88]	; 0x58
 8003c0a:	4ba2      	ldr	r3, [pc, #648]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c16:	4b9f      	ldr	r3, [pc, #636]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	4a9e      	ldr	r2, [pc, #632]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c22:	4b9c      	ldr	r3, [pc, #624]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c40:	2303      	movs	r3, #3
 8003c42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003c46:	2308      	movs	r3, #8
 8003c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c50:	4619      	mov	r1, r3
 8003c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c56:	f004 fa97 	bl	8008188 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2105      	movs	r1, #5
 8003c5e:	2034      	movs	r0, #52	; 0x34
 8003c60:	f004 f9dd 	bl	800801e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003c64:	2034      	movs	r0, #52	; 0x34
 8003c66:	f004 f9f6 	bl	8008056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c6a:	e169      	b.n	8003f40 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a89      	ldr	r2, [pc, #548]	; (8003e98 <HAL_UART_MspInit+0x2e8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d15e      	bne.n	8003d34 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003c76:	2310      	movs	r3, #16
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c84:	4618      	mov	r0, r3
 8003c86:	f006 f9dd 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8003c90:	f7ff fbd1 	bl	8003436 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c94:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	4a7e      	ldr	r2, [pc, #504]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca0:	4b7c      	ldr	r3, [pc, #496]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cac:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb0:	4a78      	ldr	r2, [pc, #480]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003cb2:	f043 0304 	orr.w	r3, r3, #4
 8003cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cb8:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc4:	4b73      	ldr	r3, [pc, #460]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	4a72      	ldr	r2, [pc, #456]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003cca:	f043 0308 	orr.w	r3, r3, #8
 8003cce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd0:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd4:	f003 0308 	and.w	r3, r3, #8
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003cf6:	2308      	movs	r3, #8
 8003cf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4866      	ldr	r0, [pc, #408]	; (8003e9c <HAL_UART_MspInit+0x2ec>)
 8003d04:	f004 fa40 	bl	8008188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d08:	2304      	movs	r3, #4
 8003d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d20:	2308      	movs	r3, #8
 8003d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	485c      	ldr	r0, [pc, #368]	; (8003ea0 <HAL_UART_MspInit+0x2f0>)
 8003d2e:	f004 fa2b 	bl	8008188 <HAL_GPIO_Init>
}
 8003d32:	e105      	b.n	8003f40 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a5a      	ldr	r2, [pc, #360]	; (8003ea4 <HAL_UART_MspInit+0x2f4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d15e      	bne.n	8003dfc <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d42:	2300      	movs	r3, #0
 8003d44:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d46:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f006 f97a 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8003d56:	f7ff fb6e 	bl	8003436 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d5e:	4a4d      	ldr	r2, [pc, #308]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d64:	6613      	str	r3, [r2, #96]	; 0x60
 8003d66:	4b4b      	ldr	r3, [pc, #300]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d72:	4b48      	ldr	r3, [pc, #288]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	4a47      	ldr	r2, [pc, #284]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d7e:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8a:	4b42      	ldr	r3, [pc, #264]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8e:	4a41      	ldr	r2, [pc, #260]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d90:	f043 0302 	orr.w	r3, r3, #2
 8003d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d96:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003da6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	2302      	movs	r3, #2
 8003dac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003db6:	2303      	movs	r3, #3
 8003db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dbc:	2307      	movs	r3, #7
 8003dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dcc:	f004 f9dc 	bl	8008188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003dd0:	2340      	movs	r3, #64	; 0x40
 8003dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de2:	2303      	movs	r3, #3
 8003de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003de8:	2307      	movs	r3, #7
 8003dea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dee:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003df2:	4619      	mov	r1, r3
 8003df4:	482c      	ldr	r0, [pc, #176]	; (8003ea8 <HAL_UART_MspInit+0x2f8>)
 8003df6:	f004 f9c7 	bl	8008188 <HAL_GPIO_Init>
}
 8003dfa:	e0a1      	b.n	8003f40 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <HAL_UART_MspInit+0x2fc>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d154      	bne.n	8003eb0 <HAL_UART_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e06:	2302      	movs	r3, #2
 8003e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e0e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e12:	4618      	mov	r0, r3
 8003e14:	f006 f916 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8003e1e:	f7ff fb0a 	bl	8003436 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e22:	4b1c      	ldr	r3, [pc, #112]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	4a1b      	ldr	r2, [pc, #108]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e2e:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <HAL_UART_MspInit+0x2e4>)
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e52:	230c      	movs	r3, #12
 8003e54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e64:	2303      	movs	r3, #3
 8003e66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e6a:	2307      	movs	r3, #7
 8003e6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003e74:	4619      	mov	r1, r3
 8003e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e7a:	f004 f985 	bl	8008188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2105      	movs	r1, #5
 8003e82:	2026      	movs	r0, #38	; 0x26
 8003e84:	f004 f8cb 	bl	800801e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e88:	2026      	movs	r0, #38	; 0x26
 8003e8a:	f004 f8e4 	bl	8008056 <HAL_NVIC_EnableIRQ>
}
 8003e8e:	e057      	b.n	8003f40 <HAL_UART_MspInit+0x390>
 8003e90:	40004c00 	.word	0x40004c00
 8003e94:	40021000 	.word	0x40021000
 8003e98:	40005000 	.word	0x40005000
 8003e9c:	48000800 	.word	0x48000800
 8003ea0:	48000c00 	.word	0x48000c00
 8003ea4:	40013800 	.word	0x40013800
 8003ea8:	48000400 	.word	0x48000400
 8003eac:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <HAL_UART_MspInit+0x398>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d142      	bne.n	8003f40 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003eba:	2304      	movs	r3, #4
 8003ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ec2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f006 f8bc 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_UART_MspInit+0x326>
      Error_Handler();
 8003ed2:	f7ff fab0 	bl	8003436 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_UART_MspInit+0x39c>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	4a1c      	ldr	r2, [pc, #112]	; (8003f4c <HAL_UART_MspInit+0x39c>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	; (8003f4c <HAL_UART_MspInit+0x39c>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eea:	613b      	str	r3, [r7, #16]
 8003eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_UART_MspInit+0x39c>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	4a16      	ldr	r2, [pc, #88]	; (8003f4c <HAL_UART_MspInit+0x39c>)
 8003ef4:	f043 0304 	orr.w	r3, r3, #4
 8003ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <HAL_UART_MspInit+0x39c>)
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f06:	2330      	movs	r3, #48	; 0x30
 8003f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f1e:	2307      	movs	r3, #7
 8003f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4809      	ldr	r0, [pc, #36]	; (8003f50 <HAL_UART_MspInit+0x3a0>)
 8003f2c:	f004 f92c 	bl	8008188 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003f30:	2200      	movs	r2, #0
 8003f32:	2105      	movs	r1, #5
 8003f34:	2027      	movs	r0, #39	; 0x27
 8003f36:	f004 f872 	bl	800801e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f3a:	2027      	movs	r0, #39	; 0x27
 8003f3c:	f004 f88b 	bl	8008056 <HAL_NVIC_EnableIRQ>
}
 8003f40:	bf00      	nop
 8003f42:	37d8      	adds	r7, #216	; 0xd8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40004800 	.word	0x40004800
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	48000800 	.word	0x48000800

08003f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f58:	e7fe      	b.n	8003f58 <NMI_Handler+0x4>

08003f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f5e:	e7fe      	b.n	8003f5e <HardFault_Handler+0x4>

08003f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f64:	e7fe      	b.n	8003f64 <MemManage_Handler+0x4>

08003f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f66:	b480      	push	{r7}
 8003f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f6a:	e7fe      	b.n	8003f6a <BusFault_Handler+0x4>

08003f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f70:	e7fe      	b.n	8003f70 <UsageFault_Handler+0x4>

08003f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f72:	b480      	push	{r7}
 8003f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f84:	f002 fdc4 	bl	8006b10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003f88:	f00a fde8 	bl	800eb5c <xTaskGetSchedulerState>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d001      	beq.n	8003f96 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003f92:	f00b f8a9 	bl	800f0e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003fa0:	4802      	ldr	r0, [pc, #8]	; (8003fac <USART2_IRQHandler+0x10>)
 8003fa2:	f007 ff87 	bl	800beb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003fa6:	bf00      	nop
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000c60 	.word	0x20000c60

08003fb0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003fb4:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <USART3_IRQHandler+0x10>)
 8003fb6:	f007 ff7d 	bl	800beb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000ce4 	.word	0x20000ce4

08003fc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003fc8:	4802      	ldr	r0, [pc, #8]	; (8003fd4 <UART4_IRQHandler+0x10>)
 8003fca:	f007 ff73 	bl	800beb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20000ad4 	.word	0x20000ad4

08003fd8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8003fe2:	4b19      	ldr	r3, [pc, #100]	; (8004048 <BSP_I2C1_Init+0x70>)
 8003fe4:	4a19      	ldr	r2, [pc, #100]	; (800404c <BSP_I2C1_Init+0x74>)
 8003fe6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <BSP_I2C1_Init+0x78>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	4918      	ldr	r1, [pc, #96]	; (8004050 <BSP_I2C1_Init+0x78>)
 8003ff0:	600a      	str	r2, [r1, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d122      	bne.n	800403c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003ff6:	4814      	ldr	r0, [pc, #80]	; (8004048 <BSP_I2C1_Init+0x70>)
 8003ff8:	f004 fe68 	bl	8008ccc <HAL_I2C_GetState>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11c      	bne.n	800403c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8004002:	4811      	ldr	r0, [pc, #68]	; (8004048 <BSP_I2C1_Init+0x70>)
 8004004:	f000 f8f6 	bl	80041f4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d116      	bne.n	800403c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800400e:	480e      	ldr	r0, [pc, #56]	; (8004048 <BSP_I2C1_Init+0x70>)
 8004010:	f000 f8ac 	bl	800416c <MX_I2C1_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800401a:	f06f 0307 	mvn.w	r3, #7
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	e00c      	b.n	800403c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004022:	2100      	movs	r1, #0
 8004024:	4808      	ldr	r0, [pc, #32]	; (8004048 <BSP_I2C1_Init+0x70>)
 8004026:	f005 f911 	bl	800924c <HAL_I2CEx_ConfigAnalogFilter>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004030:	f06f 0307 	mvn.w	r3, #7
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	e001      	b.n	800403c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8004038:	2300      	movs	r3, #0
 800403a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800403c:	687b      	ldr	r3, [r7, #4]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000e3c 	.word	0x20000e3c
 800404c:	40005400 	.word	0x40005400
 8004050:	20000e90 	.word	0x20000e90

08004054 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800405a:	2300      	movs	r3, #0
 800405c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <BSP_I2C1_DeInit+0x48>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <BSP_I2C1_DeInit+0x48>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <BSP_I2C1_DeInit+0x48>)
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	4b0a      	ldr	r3, [pc, #40]	; (800409c <BSP_I2C1_DeInit+0x48>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10b      	bne.n	8004090 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8004078:	4809      	ldr	r0, [pc, #36]	; (80040a0 <BSP_I2C1_DeInit+0x4c>)
 800407a:	f000 f91b 	bl	80042b4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800407e:	4808      	ldr	r0, [pc, #32]	; (80040a0 <BSP_I2C1_DeInit+0x4c>)
 8004080:	f004 fbc7 	bl	8008812 <HAL_I2C_DeInit>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800408a:	f06f 0307 	mvn.w	r3, #7
 800408e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004090:	687b      	ldr	r3, [r7, #4]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000e90 	.word	0x20000e90
 80040a0:	20000e3c 	.word	0x20000e3c

080040a4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af04      	add	r7, sp, #16
 80040aa:	60ba      	str	r2, [r7, #8]
 80040ac:	461a      	mov	r2, r3
 80040ae:	4603      	mov	r3, r0
 80040b0:	81fb      	strh	r3, [r7, #14]
 80040b2:	460b      	mov	r3, r1
 80040b4:	81bb      	strh	r3, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80040be:	89ba      	ldrh	r2, [r7, #12]
 80040c0:	89f9      	ldrh	r1, [r7, #14]
 80040c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2301      	movs	r3, #1
 80040d2:	480c      	ldr	r0, [pc, #48]	; (8004104 <BSP_I2C1_WriteReg+0x60>)
 80040d4:	f004 fbcc 	bl	8008870 <HAL_I2C_Mem_Write>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80040de:	4809      	ldr	r0, [pc, #36]	; (8004104 <BSP_I2C1_WriteReg+0x60>)
 80040e0:	f004 fe02 	bl	8008ce8 <HAL_I2C_GetError>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d103      	bne.n	80040f2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80040ea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e002      	b.n	80040f8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80040f2:	f06f 0303 	mvn.w	r3, #3
 80040f6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80040f8:	697b      	ldr	r3, [r7, #20]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000e3c 	.word	0x20000e3c

08004108 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af04      	add	r7, sp, #16
 800410e:	60ba      	str	r2, [r7, #8]
 8004110:	461a      	mov	r2, r3
 8004112:	4603      	mov	r3, r0
 8004114:	81fb      	strh	r3, [r7, #14]
 8004116:	460b      	mov	r3, r1
 8004118:	81bb      	strh	r3, [r7, #12]
 800411a:	4613      	mov	r3, r2
 800411c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004122:	89ba      	ldrh	r2, [r7, #12]
 8004124:	89f9      	ldrh	r1, [r7, #14]
 8004126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800412a:	9302      	str	r3, [sp, #8]
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	9301      	str	r3, [sp, #4]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	9300      	str	r3, [sp, #0]
 8004134:	2301      	movs	r3, #1
 8004136:	480c      	ldr	r0, [pc, #48]	; (8004168 <BSP_I2C1_ReadReg+0x60>)
 8004138:	f004 fcae 	bl	8008a98 <HAL_I2C_Mem_Read>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004142:	4809      	ldr	r0, [pc, #36]	; (8004168 <BSP_I2C1_ReadReg+0x60>)
 8004144:	f004 fdd0 	bl	8008ce8 <HAL_I2C_GetError>
 8004148:	4603      	mov	r3, r0
 800414a:	2b04      	cmp	r3, #4
 800414c:	d103      	bne.n	8004156 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800414e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e002      	b.n	800415c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004156:	f06f 0303 	mvn.w	r3, #3
 800415a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800415c:	697b      	ldr	r3, [r7, #20]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000e3c 	.word	0x20000e3c

0800416c <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <MX_I2C1_Init+0x80>)
 800417c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <MX_I2C1_Init+0x84>)
 8004182:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f004 faa0 	bl	80086f4 <HAL_I2C_Init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041be:	2100      	movs	r1, #0
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f005 f843 	bl	800924c <HAL_I2CEx_ConfigAnalogFilter>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80041d0:	2100      	movs	r1, #0
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f005 f885 	bl	80092e2 <HAL_I2CEx_ConfigDigitalFilter>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40005400 	.word	0x40005400
 80041f0:	10909cec 	.word	0x10909cec

080041f4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b0ac      	sub	sp, #176	; 0xb0
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	2288      	movs	r2, #136	; 0x88
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f00b f9e1 	bl	800f5cc <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800420a:	2340      	movs	r3, #64	; 0x40
 800420c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800420e:	2300      	movs	r3, #0
 8004210:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4618      	mov	r0, r3
 8004218:	f005 ff14 	bl	800a044 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421c:	4b23      	ldr	r3, [pc, #140]	; (80042ac <I2C1_MspInit+0xb8>)
 800421e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004220:	4a22      	ldr	r2, [pc, #136]	; (80042ac <I2C1_MspInit+0xb8>)
 8004222:	f043 0302 	orr.w	r3, r3, #2
 8004226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <I2C1_MspInit+0xb8>)
 800422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8004234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800423c:	2312      	movs	r3, #18
 800423e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004248:	2303      	movs	r3, #3
 800424a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800424e:	2304      	movs	r3, #4
 8004250:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004254:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004258:	4619      	mov	r1, r3
 800425a:	4815      	ldr	r0, [pc, #84]	; (80042b0 <I2C1_MspInit+0xbc>)
 800425c:	f003 ff94 	bl	8008188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8004260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004268:	2312      	movs	r3, #18
 800426a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004274:	2303      	movs	r3, #3
 8004276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800427a:	2304      	movs	r3, #4
 800427c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004284:	4619      	mov	r1, r3
 8004286:	480a      	ldr	r0, [pc, #40]	; (80042b0 <I2C1_MspInit+0xbc>)
 8004288:	f003 ff7e 	bl	8008188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800428c:	4b07      	ldr	r3, [pc, #28]	; (80042ac <I2C1_MspInit+0xb8>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	4a06      	ldr	r2, [pc, #24]	; (80042ac <I2C1_MspInit+0xb8>)
 8004292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004296:	6593      	str	r3, [r2, #88]	; 0x58
 8004298:	4b04      	ldr	r3, [pc, #16]	; (80042ac <I2C1_MspInit+0xb8>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80042a4:	bf00      	nop
 80042a6:	37b0      	adds	r7, #176	; 0xb0
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	48000400 	.word	0x48000400

080042b4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <I2C1_MspDeInit+0x30>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	4a08      	ldr	r2, [pc, #32]	; (80042e4 <I2C1_MspDeInit+0x30>)
 80042c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042c6:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80042c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042cc:	4806      	ldr	r0, [pc, #24]	; (80042e8 <I2C1_MspDeInit+0x34>)
 80042ce:	f004 f905 	bl	80084dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80042d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042d6:	4804      	ldr	r0, [pc, #16]	; (80042e8 <I2C1_MspDeInit+0x34>)
 80042d8:	f004 f900 	bl	80084dc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40021000 	.word	0x40021000
 80042e8:	48000400 	.word	0x48000400

080042ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  return 1;
 80042f0:	2301      	movs	r3, #1
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <_kill>:

int _kill(int pid, int sig)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004306:	f00b f929 	bl	800f55c <__errno>
 800430a:	4603      	mov	r3, r0
 800430c:	2216      	movs	r2, #22
 800430e:	601a      	str	r2, [r3, #0]
  return -1;
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <_exit>:

void _exit (int status)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004324:	f04f 31ff 	mov.w	r1, #4294967295
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ffe7 	bl	80042fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800432e:	e7fe      	b.n	800432e <_exit+0x12>

08004330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	e00a      	b.n	8004358 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004342:	f3af 8000 	nop.w
 8004346:	4601      	mov	r1, r0
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	60ba      	str	r2, [r7, #8]
 800434e:	b2ca      	uxtb	r2, r1
 8004350:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3301      	adds	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	429a      	cmp	r2, r3
 800435e:	dbf0      	blt.n	8004342 <_read+0x12>
  }

  return len;
 8004360:	687b      	ldr	r3, [r7, #4]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e009      	b.n	8004390 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	60ba      	str	r2, [r7, #8]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	3301      	adds	r3, #1
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	429a      	cmp	r2, r3
 8004396:	dbf1      	blt.n	800437c <_write+0x12>
  }
  return len;
 8004398:	687b      	ldr	r3, [r7, #4]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_close>:

int _close(int file)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043ca:	605a      	str	r2, [r3, #4]
  return 0;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <_isatty>:

int _isatty(int file)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80043e2:	2301      	movs	r3, #1
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004414:	4a14      	ldr	r2, [pc, #80]	; (8004468 <_sbrk+0x5c>)
 8004416:	4b15      	ldr	r3, [pc, #84]	; (800446c <_sbrk+0x60>)
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <_sbrk+0x64>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d102      	bne.n	800442e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <_sbrk+0x64>)
 800442a:	4a12      	ldr	r2, [pc, #72]	; (8004474 <_sbrk+0x68>)
 800442c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <_sbrk+0x64>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	429a      	cmp	r2, r3
 800443a:	d207      	bcs.n	800444c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800443c:	f00b f88e 	bl	800f55c <__errno>
 8004440:	4603      	mov	r3, r0
 8004442:	220c      	movs	r2, #12
 8004444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	e009      	b.n	8004460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800444c:	4b08      	ldr	r3, [pc, #32]	; (8004470 <_sbrk+0x64>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004452:	4b07      	ldr	r3, [pc, #28]	; (8004470 <_sbrk+0x64>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	4a05      	ldr	r2, [pc, #20]	; (8004470 <_sbrk+0x64>)
 800445c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20018000 	.word	0x20018000
 800446c:	00000400 	.word	0x00000400
 8004470:	20000e94 	.word	0x20000e94
 8004474:	200027b0 	.word	0x200027b0

08004478 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <SystemInit+0x20>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <SystemInit+0x20>)
 8004484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800448c:	bf00      	nop
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000ed00 	.word	0xe000ed00

0800449c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800449c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
	    bl  SystemInit
 80044a0:	f7ff ffea 	bl	8004478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044a4:	480c      	ldr	r0, [pc, #48]	; (80044d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80044a6:	490d      	ldr	r1, [pc, #52]	; (80044dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80044a8:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <LoopForever+0xe>)
  movs r3, #0
 80044aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ac:	e002      	b.n	80044b4 <LoopCopyDataInit>

080044ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b2:	3304      	adds	r3, #4

080044b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b8:	d3f9      	bcc.n	80044ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044bc:	4c0a      	ldr	r4, [pc, #40]	; (80044e8 <LoopForever+0x16>)
  movs r3, #0
 80044be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c0:	e001      	b.n	80044c6 <LoopFillZerobss>

080044c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c4:	3204      	adds	r2, #4

080044c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c8:	d3fb      	bcc.n	80044c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044ca:	f00b f84d 	bl	800f568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80044ce:	f7fe f9db 	bl	8002888 <main>

080044d2 <LoopForever>:

LoopForever:
    b LoopForever
 80044d2:	e7fe      	b.n	80044d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80044d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80044d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044dc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80044e0:	08013d80 	.word	0x08013d80
  ldr r2, =_sbss
 80044e4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80044e8:	200027b0 	.word	0x200027b0

080044ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044ec:	e7fe      	b.n	80044ec <ADC1_2_IRQHandler>
	...

080044f0 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d103      	bne.n	8004508 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e034      	b.n	8004572 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	7b1a      	ldrb	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a0e      	ldr	r2, [pc, #56]	; (800457c <HTS221_RegisterBusIO+0x8c>)
 8004544:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a0d      	ldr	r2, [pc, #52]	; (8004580 <HTS221_RegisterBusIO+0x90>)
 800454a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4798      	blx	r3
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	e002      	b.n	8004572 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	0800495d 	.word	0x0800495d
 8004580:	080049bf 	.word	0x080049bf

08004584 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f97b 	bl	8004892 <HTS221_Initialize>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e004      	b.n	80045b2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	e015      	b.n	80045fc <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10b      	bne.n	80045f2 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3320      	adds	r3, #32
 80045de:	2101      	movs	r1, #1
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fadf 	bl	8004ba4 <hts221_power_on_set>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
 80045f0:	e004      	b.n	80045fc <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3320      	adds	r3, #32
 8004612:	f107 020c 	add.w	r2, r7, #12
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fb87 	bl	8004d2c <hts221_hum_adc_point_0_get>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8004624:	f04f 33ff 	mov.w	r3, #4294967295
 8004628:	e06b      	b.n	8004702 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f103 0220 	add.w	r2, r3, #32
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	3304      	adds	r3, #4
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f000 fad9 	bl	8004bf0 <hts221_hum_rh_point_0_get>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	e05b      	b.n	8004702 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f103 0220 	add.w	r2, r3, #32
 8004650:	f107 030c 	add.w	r3, r7, #12
 8004654:	3308      	adds	r3, #8
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f000 fb8b 	bl	8004d74 <hts221_hum_adc_point_1_get>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8004664:	f04f 33ff 	mov.w	r3, #4294967295
 8004668:	e04b      	b.n	8004702 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f103 0220 	add.w	r2, r3, #32
 8004670:	f107 030c 	add.w	r3, r7, #12
 8004674:	330c      	adds	r3, #12
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f000 fad7 	bl	8004c2c <hts221_hum_rh_point_1_get>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d002      	beq.n	800468a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
 8004688:	e03b      	b.n	8004702 <HTS221_HUM_GetHumidity+0xfe>
 800468a:	2300      	movs	r3, #0
 800468c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3320      	adds	r3, #32
 8004692:	f107 021c 	add.w	r2, r7, #28
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fa3d 	bl	8004b18 <hts221_humidity_raw_get>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295
 80046a8:	e02b      	b.n	8004702 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80046aa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046b6:	f107 030c 	add.w	r3, r7, #12
 80046ba:	eeb0 0a67 	vmov.f32	s0, s15
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 f913 	bl	80048ea <Linear_Interpolation>
 80046c4:	eef0 7a40 	vmov.f32	s15, s0
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	edd3 7a00 	vldr	s15, [r3]
 80046d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046dc:	d503      	bpl.n	80046e6 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f04f 0200 	mov.w	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	edd3 7a00 	vldr	s15, [r3]
 80046ec:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800470c <HTS221_HUM_GetHumidity+0x108>
 80046f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f8:	dd02      	ble.n	8004700 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <HTS221_HUM_GetHumidity+0x10c>)
 80046fe:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3720      	adds	r7, #32
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	42c80000 	.word	0x42c80000
 8004710:	42c80000 	.word	0x42c80000

08004714 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e015      	b.n	8004756 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3320      	adds	r3, #32
 8004738:	2101      	movs	r1, #1
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fa32 	bl	8004ba4 <hts221_power_on_set>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	e004      	b.n	8004756 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b088      	sub	sp, #32
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3320      	adds	r3, #32
 800476c:	f107 020c 	add.w	r2, r7, #12
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fb22 	bl	8004dbc <hts221_temp_adc_point_0_get>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	e052      	b.n	800482a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f103 0220 	add.w	r2, r3, #32
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	3304      	adds	r3, #4
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f000 fa68 	bl	8004c68 <hts221_temp_deg_point_0_get>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	e042      	b.n	800482a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f103 0220 	add.w	r2, r3, #32
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	3308      	adds	r3, #8
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f000 fb26 	bl	8004e04 <hts221_temp_adc_point_1_get>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295
 80047c2:	e032      	b.n	800482a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f103 0220 	add.w	r2, r3, #32
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	330c      	adds	r3, #12
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 fa79 	bl	8004cca <hts221_temp_deg_point_1_get>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	e022      	b.n	800482a <HTS221_TEMP_GetTemperature+0xcc>
 80047e4:	2300      	movs	r3, #0
 80047e6:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3320      	adds	r3, #32
 80047ec:	f107 021c 	add.w	r2, r7, #28
 80047f0:	4611      	mov	r1, r2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 f9b3 	bl	8004b5e <hts221_temperature_raw_get>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e012      	b.n	800482a <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8004804:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004808:	ee07 3a90 	vmov	s15, r3
 800480c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	eeb0 0a67 	vmov.f32	s0, s15
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f866 	bl	80048ea <Linear_Interpolation>
 800481e:	eef0 7a40 	vmov.f32	s15, s0
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
 800483a:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 800483e:	edd7 7a00 	vldr	s15, [r7]
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	d801      	bhi.n	8004854 <HTS221_SetOutputDataRate+0x22>
 8004850:	2301      	movs	r3, #1
 8004852:	e00b      	b.n	800486c <HTS221_SetOutputDataRate+0x3a>
 8004854:	edd7 7a00 	vldr	s15, [r7]
 8004858:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800485c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004864:	d801      	bhi.n	800486a <HTS221_SetOutputDataRate+0x38>
 8004866:	2302      	movs	r3, #2
 8004868:	e000      	b.n	800486c <HTS221_SetOutputDataRate+0x3a>
 800486a:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800486c:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3320      	adds	r3, #32
 8004872:	7bfa      	ldrb	r2, [r7, #15]
 8004874:	4611      	mov	r1, r2
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f902 	bl	8004a80 <hts221_data_rate_set>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d002      	beq.n	8004888 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	e000      	b.n	800488a <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3320      	adds	r3, #32
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 f97f 	bl	8004ba4 <hts221_power_on_set>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	e017      	b.n	80048e2 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3320      	adds	r3, #32
 80048b6:	2101      	movs	r1, #1
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f907 	bl	8004acc <hts221_block_data_update_set>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	e00b      	b.n	80048e2 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80048ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff ffaf 	bl	8004832 <HTS221_SetOutputDataRate>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80048da:	f04f 33ff 	mov.w	r3, #4294967295
 80048de:	e000      	b.n	80048e2 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b083      	sub	sp, #12
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8004902:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004906:	edd7 7a00 	vldr	s15, [r7]
 800490a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	edd3 6a02 	vldr	s13, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	edd3 7a01 	vldr	s15, [r3, #4]
 800491a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	ed93 6a00 	vldr	s12, [r3]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	edd3 7a03 	vldr	s15, [r3, #12]
 800492a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800492e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004932:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	edd3 6a02 	vldr	s13, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	edd3 7a00 	vldr	s15, [r3]
 8004942:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004946:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800494a:	eef0 7a66 	vmov.f32	s15, s13
}
 800494e:	eeb0 0a67 	vmov.f32	s0, s15
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800495c:	b590      	push	{r4, r7, lr}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	607a      	str	r2, [r7, #4]
 8004966:	461a      	mov	r2, r3
 8004968:	460b      	mov	r3, r1
 800496a:	72fb      	strb	r3, [r7, #11]
 800496c:	4613      	mov	r3, r2
 800496e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10e      	bne.n	800499a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	695c      	ldr	r4, [r3, #20]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	7b1b      	ldrb	r3, [r3, #12]
 8004984:	b298      	uxth	r0, r3
 8004986:	7afb      	ldrb	r3, [r7, #11]
 8004988:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800498c:	b2db      	uxtb	r3, r3
 800498e:	b299      	uxth	r1, r3
 8004990:	893b      	ldrh	r3, [r7, #8]
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	47a0      	blx	r4
 8004996:	4603      	mov	r3, r0
 8004998:	e00d      	b.n	80049b6 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	695c      	ldr	r4, [r3, #20]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	7b1b      	ldrb	r3, [r3, #12]
 80049a2:	b298      	uxth	r0, r3
 80049a4:	7afb      	ldrb	r3, [r7, #11]
 80049a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	b299      	uxth	r1, r3
 80049ae:	893b      	ldrh	r3, [r7, #8]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	47a0      	blx	r4
 80049b4:	4603      	mov	r3, r0
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd90      	pop	{r4, r7, pc}

080049be <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80049be:	b590      	push	{r4, r7, lr}
 80049c0:	b087      	sub	sp, #28
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	461a      	mov	r2, r3
 80049ca:	460b      	mov	r3, r1
 80049cc:	72fb      	strb	r3, [r7, #11]
 80049ce:	4613      	mov	r3, r2
 80049d0:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10e      	bne.n	80049fc <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	691c      	ldr	r4, [r3, #16]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	7b1b      	ldrb	r3, [r3, #12]
 80049e6:	b298      	uxth	r0, r3
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	b299      	uxth	r1, r3
 80049f2:	893b      	ldrh	r3, [r7, #8]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	47a0      	blx	r4
 80049f8:	4603      	mov	r3, r0
 80049fa:	e00d      	b.n	8004a18 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	691c      	ldr	r4, [r3, #16]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	7b1b      	ldrb	r3, [r3, #12]
 8004a04:	b298      	uxth	r0, r3
 8004a06:	7afb      	ldrb	r3, [r7, #11]
 8004a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	b299      	uxth	r1, r3
 8004a10:	893b      	ldrh	r3, [r7, #8]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	47a0      	blx	r4
 8004a16:	4603      	mov	r3, r0
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}

08004a20 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8004a20:	b590      	push	{r4, r7, lr}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	607a      	str	r2, [r7, #4]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	72fb      	strb	r3, [r7, #11]
 8004a30:	4613      	mov	r3, r2
 8004a32:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	685c      	ldr	r4, [r3, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68d8      	ldr	r0, [r3, #12]
 8004a3c:	893b      	ldrh	r3, [r7, #8]
 8004a3e:	7af9      	ldrb	r1, [r7, #11]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	47a0      	blx	r4
 8004a44:	6178      	str	r0, [r7, #20]

  return ret;
 8004a46:	697b      	ldr	r3, [r7, #20]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd90      	pop	{r4, r7, pc}

08004a50 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004a50:	b590      	push	{r4, r7, lr}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	72fb      	strb	r3, [r7, #11]
 8004a60:	4613      	mov	r3, r2
 8004a62:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681c      	ldr	r4, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68d8      	ldr	r0, [r3, #12]
 8004a6c:	893b      	ldrh	r3, [r7, #8]
 8004a6e:	7af9      	ldrb	r1, [r7, #11]
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	47a0      	blx	r4
 8004a74:	6178      	str	r0, [r7, #20]

  return ret;
 8004a76:	697b      	ldr	r3, [r7, #20]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}

08004a80 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004a8c:	f107 0208 	add.w	r2, r7, #8
 8004a90:	2301      	movs	r3, #1
 8004a92:	2120      	movs	r1, #32
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff ffc3 	bl	8004a20 <hts221_read_reg>
 8004a9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	7a3b      	ldrb	r3, [r7, #8]
 8004aac:	f362 0301 	bfi	r3, r2, #0, #2
 8004ab0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ab2:	f107 0208 	add.w	r2, r7, #8
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	2120      	movs	r1, #32
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff ffc8 	bl	8004a50 <hts221_write_reg>
 8004ac0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004ad8:	f107 0208 	add.w	r2, r7, #8
 8004adc:	2301      	movs	r3, #1
 8004ade:	2120      	movs	r1, #32
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f7ff ff9d 	bl	8004a20 <hts221_read_reg>
 8004ae6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10f      	bne.n	8004b0e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	7a3b      	ldrb	r3, [r7, #8]
 8004af8:	f362 0382 	bfi	r3, r2, #2, #1
 8004afc:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004afe:	f107 0208 	add.w	r2, r7, #8
 8004b02:	2301      	movs	r3, #1
 8004b04:	2120      	movs	r1, #32
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff ffa2 	bl	8004a50 <hts221_write_reg>
 8004b0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8004b22:	f107 0208 	add.w	r2, r7, #8
 8004b26:	2302      	movs	r3, #2
 8004b28:	2128      	movs	r1, #40	; 0x28
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff ff78 	bl	8004a20 <hts221_read_reg>
 8004b30:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004b32:	7a7b      	ldrb	r3, [r7, #9]
 8004b34:	b21a      	sxth	r2, r3
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	7a3b      	ldrb	r3, [r7, #8]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	b21a      	sxth	r2, r3
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	801a      	strh	r2, [r3, #0]

  return ret;
 8004b54:	68fb      	ldr	r3, [r7, #12]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8004b68:	f107 0208 	add.w	r2, r7, #8
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	212a      	movs	r1, #42	; 0x2a
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff55 	bl	8004a20 <hts221_read_reg>
 8004b76:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8004b78:	7a7b      	ldrb	r3, [r7, #9]
 8004b7a:	b21a      	sxth	r2, r3
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	7a3b      	ldrb	r3, [r7, #8]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	4413      	add	r3, r2
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	b21a      	sxth	r2, r3
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	801a      	strh	r2, [r3, #0]

  return ret;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004bb0:	f107 0208 	add.w	r2, r7, #8
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	2120      	movs	r1, #32
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff31 	bl	8004a20 <hts221_read_reg>
 8004bbe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10f      	bne.n	8004be6 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	7a3b      	ldrb	r3, [r7, #8]
 8004bd0:	f362 13c7 	bfi	r3, r2, #7, #1
 8004bd4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8004bd6:	f107 0208 	add.w	r2, r7, #8
 8004bda:	2301      	movs	r3, #1
 8004bdc:	2120      	movs	r1, #32
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ff36 	bl	8004a50 <hts221_write_reg>
 8004be4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004be6:	68fb      	ldr	r3, [r7, #12]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8004bfa:	f107 020b 	add.w	r2, r7, #11
 8004bfe:	2301      	movs	r3, #1
 8004c00:	2130      	movs	r1, #48	; 0x30
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff ff0c 	bl	8004a20 <hts221_read_reg>
 8004c08:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004c0a:	7afb      	ldrb	r3, [r7, #11]
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c14:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8004c36:	f107 020b 	add.w	r2, r7, #11
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	2131      	movs	r1, #49	; 0x31
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7ff feee 	bl	8004a20 <hts221_read_reg>
 8004c44:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8004c46:	7afb      	ldrb	r3, [r7, #11]
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8004c72:	f107 020f 	add.w	r2, r7, #15
 8004c76:	2301      	movs	r3, #1
 8004c78:	2132      	movs	r1, #50	; 0x32
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fed0 	bl	8004a20 <hts221_read_reg>
 8004c80:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d11b      	bne.n	8004cc0 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004c88:	f107 0210 	add.w	r2, r7, #16
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2135      	movs	r1, #53	; 0x35
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fec5 	bl	8004a20 <hts221_read_reg>
 8004c96:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8004c98:	7c3b      	ldrb	r3, [r7, #16]
 8004c9a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	7bfa      	ldrb	r2, [r7, #15]
 8004ca8:	4413      	add	r3, r2
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cb2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004cb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004cc0:	697b      	ldr	r3, [r7, #20]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8004cd4:	f107 020f 	add.w	r2, r7, #15
 8004cd8:	2301      	movs	r3, #1
 8004cda:	2133      	movs	r1, #51	; 0x33
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fe9f 	bl	8004a20 <hts221_read_reg>
 8004ce2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d11b      	bne.n	8004d22 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8004cea:	f107 0210 	add.w	r2, r7, #16
 8004cee:	2301      	movs	r3, #1
 8004cf0:	2135      	movs	r1, #53	; 0x35
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fe94 	bl	8004a20 <hts221_read_reg>
 8004cf8:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8004cfa:	7c3b      	ldrb	r3, [r7, #16]
 8004cfc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8004d04:	7cfb      	ldrb	r3, [r7, #19]
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	7bfa      	ldrb	r2, [r7, #15]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d14:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004d18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8004d22:	697b      	ldr	r3, [r7, #20]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8004d36:	f107 0208 	add.w	r2, r7, #8
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	2136      	movs	r1, #54	; 0x36
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7ff fe6e 	bl	8004a20 <hts221_read_reg>
 8004d44:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004d46:	7a7b      	ldrb	r3, [r7, #9]
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	7a3b      	ldrb	r3, [r7, #8]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	4413      	add	r3, r2
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004d58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d5c:	ee07 3a90 	vmov	s15, r3
 8004d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8004d7e:	f107 0208 	add.w	r2, r7, #8
 8004d82:	2302      	movs	r3, #2
 8004d84:	213a      	movs	r1, #58	; 0x3a
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fe4a 	bl	8004a20 <hts221_read_reg>
 8004d8c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004d8e:	7a7b      	ldrb	r3, [r7, #9]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	7a3b      	ldrb	r3, [r7, #8]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004da0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004da4:	ee07 3a90 	vmov	s15, r3
 8004da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004db2:	68fb      	ldr	r3, [r7, #12]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8004dc6:	f107 0208 	add.w	r2, r7, #8
 8004dca:	2302      	movs	r3, #2
 8004dcc:	213c      	movs	r1, #60	; 0x3c
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fe26 	bl	8004a20 <hts221_read_reg>
 8004dd4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004dd6:	7a7b      	ldrb	r3, [r7, #9]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	b29a      	uxth	r2, r3
 8004dde:	7a3b      	ldrb	r3, [r7, #8]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	4413      	add	r3, r2
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004de8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8004e0e:	f107 0208 	add.w	r2, r7, #8
 8004e12:	2302      	movs	r3, #2
 8004e14:	213e      	movs	r1, #62	; 0x3e
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7ff fe02 	bl	8004a20 <hts221_read_reg>
 8004e1c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004e1e:	7a7b      	ldrb	r3, [r7, #9]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	021b      	lsls	r3, r3, #8
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	7a3b      	ldrb	r3, [r7, #8]
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004e30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004e42:	68fb      	ldr	r3, [r7, #12]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	e051      	b.n	8004f0c <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	7b1a      	ldrb	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699a      	ldr	r2, [r3, #24]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a1d      	ldr	r2, [pc, #116]	; (8004f18 <LPS22HB_RegisterBusIO+0xcc>)
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	; (8004f1c <LPS22HB_RegisterBusIO+0xd0>)
 8004eaa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8004ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	e020      	b.n	8004f0c <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4798      	blx	r3
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8004ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	e016      	b.n	8004f0c <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d112      	bne.n	8004f0c <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8004ef4:	7afb      	ldrb	r3, [r7, #11]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2110      	movs	r1, #16
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f877 	bl	8004fee <LPS22HB_Write_Reg>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	080050d7 	.word	0x080050d7
 8004f1c:	0800515d 	.word	0x0800515d

08004f20 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d108      	bne.n	8004f44 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f876 	bl	8005024 <LPS22HB_Initialize>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8004f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f42:	e004      	b.n	8004f4e <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e014      	b.n	8004f96 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f103 0220 	add.w	r2, r3, #32
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f000 f9c6 	bl	800530c <lps22hb_data_rate_set>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
 8004f8a:	e004      	b.n	8004f96 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8004fa8:	f107 030c 	add.w	r3, r7, #12
 8004fac:	2204      	movs	r2, #4
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f00a fb0b 	bl	800f5cc <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3320      	adds	r3, #32
 8004fba:	f107 020c 	add.w	r2, r7, #12
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f9c9 	bl	8005358 <lps22hb_pressure_raw_get>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd0:	e009      	b.n	8004fe6 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f935 	bl	8005244 <lps22hb_from_lsb_to_hpa>
 8004fda:	eef0 7a40 	vmov.f32	s15, s0
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b082      	sub	sp, #8
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	70fb      	strb	r3, [r7, #3]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f103 0020 	add.w	r0, r3, #32
 8005004:	1cba      	adds	r2, r7, #2
 8005006:	78f9      	ldrb	r1, [r7, #3]
 8005008:	2301      	movs	r3, #1
 800500a:	f000 f902 	bl	8005212 <lps22hb_write_reg>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8005014:	f04f 33ff 	mov.w	r3, #4294967295
 8005018:	e000      	b.n	800501c <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3320      	adds	r3, #32
 8005030:	2101      	movs	r1, #1
 8005032:	4618      	mov	r0, r3
 8005034:	f000 f9b9 	bl	80053aa <lps22hb_low_power_set>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	e044      	b.n	80050ce <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3320      	adds	r3, #32
 8005048:	2100      	movs	r1, #0
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f95e 	bl	800530c <lps22hb_data_rate_set>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8005056:	f04f 33ff 	mov.w	r3, #4294967295
 800505a:	e038      	b.n	80050ce <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3320      	adds	r3, #32
 8005060:	2102      	movs	r1, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f92c 	bl	80052c0 <lps22hb_low_pass_filter_mode_set>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295
 8005072:	e02c      	b.n	80050ce <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3320      	adds	r3, #32
 8005078:	2101      	movs	r1, #1
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f8fa 	bl	8005274 <lps22hb_block_data_update_set>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	e020      	b.n	80050ce <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3320      	adds	r3, #32
 8005098:	2100      	movs	r1, #0
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f9ab 	bl	80053f6 <lps22hb_auto_add_inc_set>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295
 80050aa:	e010      	b.n	80050ce <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3320      	adds	r3, #32
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 f99f 	bl	80053f6 <lps22hb_auto_add_inc_set>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80050be:	f04f 33ff 	mov.w	r3, #4294967295
 80050c2:	e004      	b.n	80050ce <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2203      	movs	r2, #3
 80050c8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80050d6:	b590      	push	{r4, r7, lr}
 80050d8:	b089      	sub	sp, #36	; 0x24
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	461a      	mov	r2, r3
 80050e2:	460b      	mov	r3, r1
 80050e4:	72fb      	strb	r3, [r7, #11]
 80050e6:	4613      	mov	r3, r2
 80050e8:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d121      	bne.n	800513e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	83fb      	strh	r3, [r7, #30]
 80050fe:	e018      	b.n	8005132 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	695c      	ldr	r4, [r3, #20]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	7b1b      	ldrb	r3, [r3, #12]
 8005108:	b298      	uxth	r0, r3
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	b29a      	uxth	r2, r3
 800510e:	8bfb      	ldrh	r3, [r7, #30]
 8005110:	4413      	add	r3, r2
 8005112:	b299      	uxth	r1, r3
 8005114:	8bfb      	ldrh	r3, [r7, #30]
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	441a      	add	r2, r3
 800511a:	2301      	movs	r3, #1
 800511c:	47a0      	blx	r4
 800511e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d002      	beq.n	800512c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8005126:	f04f 33ff 	mov.w	r3, #4294967295
 800512a:	e013      	b.n	8005154 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800512c:	8bfb      	ldrh	r3, [r7, #30]
 800512e:	3301      	adds	r3, #1
 8005130:	83fb      	strh	r3, [r7, #30]
 8005132:	8bfa      	ldrh	r2, [r7, #30]
 8005134:	893b      	ldrh	r3, [r7, #8]
 8005136:	429a      	cmp	r2, r3
 8005138:	d3e2      	bcc.n	8005100 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	e00a      	b.n	8005154 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	695c      	ldr	r4, [r3, #20]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	7b1b      	ldrb	r3, [r3, #12]
 8005146:	b298      	uxth	r0, r3
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	b299      	uxth	r1, r3
 800514c:	893b      	ldrh	r3, [r7, #8]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	47a0      	blx	r4
 8005152:	4603      	mov	r3, r0
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3724      	adds	r7, #36	; 0x24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd90      	pop	{r4, r7, pc}

0800515c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800515c:	b590      	push	{r4, r7, lr}
 800515e:	b089      	sub	sp, #36	; 0x24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	461a      	mov	r2, r3
 8005168:	460b      	mov	r3, r1
 800516a:	72fb      	strb	r3, [r7, #11]
 800516c:	4613      	mov	r3, r2
 800516e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d121      	bne.n	80051c4 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8005180:	2300      	movs	r3, #0
 8005182:	83fb      	strh	r3, [r7, #30]
 8005184:	e018      	b.n	80051b8 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	691c      	ldr	r4, [r3, #16]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	7b1b      	ldrb	r3, [r3, #12]
 800518e:	b298      	uxth	r0, r3
 8005190:	7afb      	ldrb	r3, [r7, #11]
 8005192:	b29a      	uxth	r2, r3
 8005194:	8bfb      	ldrh	r3, [r7, #30]
 8005196:	4413      	add	r3, r2
 8005198:	b299      	uxth	r1, r3
 800519a:	8bfb      	ldrh	r3, [r7, #30]
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	441a      	add	r2, r3
 80051a0:	2301      	movs	r3, #1
 80051a2:	47a0      	blx	r4
 80051a4:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	e013      	b.n	80051da <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80051b2:	8bfb      	ldrh	r3, [r7, #30]
 80051b4:	3301      	adds	r3, #1
 80051b6:	83fb      	strh	r3, [r7, #30]
 80051b8:	8bfa      	ldrh	r2, [r7, #30]
 80051ba:	893b      	ldrh	r3, [r7, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d3e2      	bcc.n	8005186 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	e00a      	b.n	80051da <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	691c      	ldr	r4, [r3, #16]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	7b1b      	ldrb	r3, [r3, #12]
 80051cc:	b298      	uxth	r0, r3
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	b299      	uxth	r1, r3
 80051d2:	893b      	ldrh	r3, [r7, #8]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	47a0      	blx	r4
 80051d8:	4603      	mov	r3, r0
  }
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3724      	adds	r7, #36	; 0x24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd90      	pop	{r4, r7, pc}

080051e2 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80051e2:	b590      	push	{r4, r7, lr}
 80051e4:	b087      	sub	sp, #28
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	60f8      	str	r0, [r7, #12]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	461a      	mov	r2, r3
 80051ee:	460b      	mov	r3, r1
 80051f0:	72fb      	strb	r3, [r7, #11]
 80051f2:	4613      	mov	r3, r2
 80051f4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	685c      	ldr	r4, [r3, #4]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	68d8      	ldr	r0, [r3, #12]
 80051fe:	893b      	ldrh	r3, [r7, #8]
 8005200:	7af9      	ldrb	r1, [r7, #11]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	47a0      	blx	r4
 8005206:	6178      	str	r0, [r7, #20]

  return ret;
 8005208:	697b      	ldr	r3, [r7, #20]
}
 800520a:	4618      	mov	r0, r3
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd90      	pop	{r4, r7, pc}

08005212 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005212:	b590      	push	{r4, r7, lr}
 8005214:	b087      	sub	sp, #28
 8005216:	af00      	add	r7, sp, #0
 8005218:	60f8      	str	r0, [r7, #12]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	461a      	mov	r2, r3
 800521e:	460b      	mov	r3, r1
 8005220:	72fb      	strb	r3, [r7, #11]
 8005222:	4613      	mov	r3, r2
 8005224:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681c      	ldr	r4, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68d8      	ldr	r0, [r3, #12]
 800522e:	893b      	ldrh	r3, [r7, #8]
 8005230:	7af9      	ldrb	r1, [r7, #11]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	47a0      	blx	r4
 8005236:	6178      	str	r0, [r7, #20]

  return ret;
 8005238:	697b      	ldr	r3, [r7, #20]
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd90      	pop	{r4, r7, pc}
	...

08005244 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005256:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005270 <lps22hb_from_lsb_to_hpa+0x2c>
 800525a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800525e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005262:	eeb0 0a67 	vmov.f32	s0, s15
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	49800000 	.word	0x49800000

08005274 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005280:	f107 0208 	add.w	r2, r7, #8
 8005284:	2301      	movs	r3, #1
 8005286:	2110      	movs	r1, #16
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ffaa 	bl	80051e2 <lps22hb_read_reg>
 800528e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10f      	bne.n	80052b6 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	b2da      	uxtb	r2, r3
 800529e:	7a3b      	ldrb	r3, [r7, #8]
 80052a0:	f362 0341 	bfi	r3, r2, #1, #1
 80052a4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80052a6:	f107 0208 	add.w	r2, r7, #8
 80052aa:	2301      	movs	r3, #1
 80052ac:	2110      	movs	r1, #16
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ffaf 	bl	8005212 <lps22hb_write_reg>
 80052b4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	460b      	mov	r3, r1
 80052ca:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80052cc:	f107 0208 	add.w	r2, r7, #8
 80052d0:	2301      	movs	r3, #1
 80052d2:	2110      	movs	r1, #16
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ff84 	bl	80051e2 <lps22hb_read_reg>
 80052da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	7a3b      	ldrb	r3, [r7, #8]
 80052ec:	f362 0383 	bfi	r3, r2, #2, #2
 80052f0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80052f2:	f107 0208 	add.w	r2, r7, #8
 80052f6:	2301      	movs	r3, #1
 80052f8:	2110      	movs	r1, #16
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff ff89 	bl	8005212 <lps22hb_write_reg>
 8005300:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005302:	68fb      	ldr	r3, [r7, #12]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005318:	f107 0208 	add.w	r2, r7, #8
 800531c:	2301      	movs	r3, #1
 800531e:	2110      	movs	r1, #16
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ff5e 	bl	80051e2 <lps22hb_read_reg>
 8005326:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10f      	bne.n	800534e <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	b2da      	uxtb	r2, r3
 8005336:	7a3b      	ldrb	r3, [r7, #8]
 8005338:	f362 1306 	bfi	r3, r2, #4, #3
 800533c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800533e:	f107 0208 	add.w	r2, r7, #8
 8005342:	2301      	movs	r3, #1
 8005344:	2110      	movs	r1, #16
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f7ff ff63 	bl	8005212 <lps22hb_write_reg>
 800534c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3710      	adds	r7, #16
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8005362:	f107 0208 	add.w	r2, r7, #8
 8005366:	2303      	movs	r3, #3
 8005368:	2128      	movs	r1, #40	; 0x28
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff ff39 	bl	80051e2 <lps22hb_read_reg>
 8005370:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8005372:	7abb      	ldrb	r3, [r7, #10]
 8005374:	461a      	mov	r2, r3
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	7a7a      	ldrb	r2, [r7, #9]
 8005382:	441a      	add	r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	7a3a      	ldrb	r2, [r7, #8]
 8005390:	441a      	add	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	601a      	str	r2, [r3, #0]

  return ret;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80053b6:	f107 0208 	add.w	r2, r7, #8
 80053ba:	2301      	movs	r3, #1
 80053bc:	211a      	movs	r1, #26
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff0f 	bl	80051e2 <lps22hb_read_reg>
 80053c4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10f      	bne.n	80053ec <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 80053cc:	78fb      	ldrb	r3, [r7, #3]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	7a3b      	ldrb	r3, [r7, #8]
 80053d6:	f362 0300 	bfi	r3, r2, #0, #1
 80053da:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80053dc:	f107 0208 	add.w	r2, r7, #8
 80053e0:	2301      	movs	r3, #1
 80053e2:	211a      	movs	r1, #26
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff14 	bl	8005212 <lps22hb_write_reg>
 80053ea:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	460b      	mov	r3, r1
 8005400:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005402:	f107 0208 	add.w	r2, r7, #8
 8005406:	2301      	movs	r3, #1
 8005408:	2111      	movs	r1, #17
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff fee9 	bl	80051e2 <lps22hb_read_reg>
 8005410:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10f      	bne.n	8005438 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 8005418:	78fb      	ldrb	r3, [r7, #3]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	b2da      	uxtb	r2, r3
 8005420:	7a3b      	ldrb	r3, [r7, #8]
 8005422:	f362 1304 	bfi	r3, r2, #4, #1
 8005426:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005428:	f107 0208 	add.w	r2, r7, #8
 800542c:	2301      	movs	r3, #1
 800542e:	2111      	movs	r1, #17
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff feee 	bl	8005212 <lps22hb_write_reg>
 8005436:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d103      	bne.n	8005460 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	e051      	b.n	8005504 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	7b1a      	ldrb	r2, [r3, #12]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	695a      	ldr	r2, [r3, #20]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 800549c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 80054a2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d103      	bne.n	80054c2 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	e020      	b.n	8005504 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4798      	blx	r3
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e016      	b.n	8005504 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d112      	bne.n	8005504 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10d      	bne.n	8005504 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80054e8:	2301      	movs	r3, #1
 80054ea:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 80054ec:	7afb      	ldrb	r3, [r7, #11]
 80054ee:	461a      	mov	r2, r3
 80054f0:	2123      	movs	r1, #35	; 0x23
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f97b 	bl	80057ee <LSM303AGR_ACC_Write_Reg>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d002      	beq.n	8005504 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 80054fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005502:	e000      	b.n	8005506 <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8005504:	68fb      	ldr	r3, [r7, #12]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	08005c09 	.word	0x08005c09
 8005514:	08005c6b 	.word	0x08005c6b

08005518 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3320      	adds	r3, #32
 8005524:	2101      	movs	r1, #1
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fd1a 	bl	8005f60 <lsm303agr_xl_block_data_update_set>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	e02c      	b.n	8005592 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3320      	adds	r3, #32
 800553c:	2100      	movs	r1, #0
 800553e:	4618      	mov	r0, r3
 8005540:	f000 fe62 	bl	8006208 <lsm303agr_xl_fifo_mode_set>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800554a:	f04f 33ff 	mov.w	r3, #4294967295
 800554e:	e020      	b.n	8005592 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2205      	movs	r2, #5
 8005554:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3320      	adds	r3, #32
 800555c:	2100      	movs	r1, #0
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fc7a 	bl	8005e58 <lsm303agr_xl_data_rate_set>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	e010      	b.n	8005592 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3320      	adds	r3, #32
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fc94 	bl	8005ea4 <lsm303agr_xl_full_scale_set>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8005582:	f04f 33ff 	mov.w	r3, #4294967295
 8005586:	e004      	b.n	8005592 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e014      	b.n	80055da <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f103 0220 	add.w	r2, r3, #32
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 fc4a 	bl	8005e58 <lsm303agr_xl_data_rate_set>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80055ca:	f04f 33ff 	mov.w	r3, #4294967295
 80055ce:	e004      	b.n	80055da <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3320      	adds	r3, #32
 80055f4:	f107 020b 	add.w	r2, r7, #11
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fbf8 	bl	8005df0 <lsm303agr_xl_operating_mode_get>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295
 800560a:	e031      	b.n	8005670 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 800560c:	7afb      	ldrb	r3, [r7, #11]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d01a      	beq.n	8005648 <LSM303AGR_ACC_GetSensitivity+0x66>
 8005612:	2b02      	cmp	r3, #2
 8005614:	dc22      	bgt.n	800565c <LSM303AGR_ACC_GetSensitivity+0x7a>
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <LSM303AGR_ACC_GetSensitivity+0x3e>
 800561a:	2b01      	cmp	r3, #1
 800561c:	d00a      	beq.n	8005634 <LSM303AGR_ACC_GetSensitivity+0x52>
 800561e:	e01d      	b.n	800565c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa1e 	bl	8005a64 <LSM303AGR_ACC_GetSensitivityHR>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d01a      	beq.n	8005664 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 800562e:	f04f 33ff 	mov.w	r3, #4294967295
 8005632:	e01d      	b.n	8005670 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8005634:	6839      	ldr	r1, [r7, #0]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fa5a 	bl	8005af0 <LSM303AGR_ACC_GetSensitivityNM>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d012      	beq.n	8005668 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	e013      	b.n	8005670 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fa96 	bl	8005b7c <LSM303AGR_ACC_GetSensitivityLP>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	e009      	b.n	8005670 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800565c:	f04f 33ff 	mov.w	r3, #4294967295
 8005660:	60fb      	str	r3, [r7, #12]
      break;
 8005662:	e004      	b.n	800566e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005664:	bf00      	nop
 8005666:	e002      	b.n	800566e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800566c:	bf00      	nop
  }

  return ret;
 800566e:	68fb      	ldr	r3, [r7, #12]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8005682:	2301      	movs	r3, #1
 8005684:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3320      	adds	r3, #32
 800568e:	f107 020f 	add.w	r2, r7, #15
 8005692:	4611      	mov	r1, r2
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fbab 	bl	8005df0 <lsm303agr_xl_operating_mode_get>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295
 80056a4:	e04a      	b.n	800573c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d00c      	beq.n	80056c6 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	dc0e      	bgt.n	80056ce <LSM303AGR_ACC_GetAxesRaw+0x56>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <LSM303AGR_ACC_GetAxesRaw+0x42>
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d003      	beq.n	80056c0 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80056b8:	e009      	b.n	80056ce <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80056ba:	2310      	movs	r3, #16
 80056bc:	83fb      	strh	r3, [r7, #30]
      break;
 80056be:	e00a      	b.n	80056d6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	83fb      	strh	r3, [r7, #30]
      break;
 80056c4:	e007      	b.n	80056d6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80056c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056ca:	83fb      	strh	r3, [r7, #30]
      break;
 80056cc:	e003      	b.n	80056d6 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	61bb      	str	r3, [r7, #24]
      break;
 80056d4:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056dc:	d101      	bne.n	80056e2 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	e02c      	b.n	800573c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3320      	adds	r3, #32
 80056e6:	f107 0210 	add.w	r2, r7, #16
 80056ea:	4611      	mov	r1, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 fc5d 	bl	8005fac <lsm303agr_acceleration_raw_get>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80056f8:	f04f 33ff 	mov.w	r3, #4294967295
 80056fc:	e01e      	b.n	800573c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80056fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005702:	461a      	mov	r2, r3
 8005704:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005708:	fb92 f3f3 	sdiv	r3, r2, r3
 800570c:	b21a      	sxth	r2, r3
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8005712:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005716:	461a      	mov	r2, r3
 8005718:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800571c:	fb92 f3f3 	sdiv	r3, r2, r3
 8005720:	b21a      	sxth	r2, r3
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8005726:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800572a:	461a      	mov	r2, r3
 800572c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005730:	fb92 f3f3 	sdiv	r3, r2, r3
 8005734:	b21a      	sxth	r2, r3
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	809a      	strh	r2, [r3, #4]

  return ret;
 800573a:	69bb      	ldr	r3, [r7, #24]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800574e:	f04f 0300 	mov.w	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8005754:	f107 0310 	add.w	r3, r7, #16
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff ff8c 	bl	8005678 <LSM303AGR_ACC_GetAxesRaw>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8005766:	f04f 33ff 	mov.w	r3, #4294967295
 800576a:	e03c      	b.n	80057e6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 800576c:	f107 030c 	add.w	r3, r7, #12
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff35 	bl	80055e2 <LSM303AGR_ACC_GetSensitivity>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	e030      	b.n	80057e6 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8005784:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005790:	edd7 7a03 	vldr	s15, [r7, #12]
 8005794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005798:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800579c:	ee17 2a90 	vmov	r2, s15
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80057a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80057b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057bc:	ee17 2a90 	vmov	r2, s15
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80057c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80057c8:	ee07 3a90 	vmov	s15, r3
 80057cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80057d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057dc:	ee17 2a90 	vmov	r2, s15
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3718      	adds	r7, #24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	70fb      	strb	r3, [r7, #3]
 80057fa:	4613      	mov	r3, r2
 80057fc:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f103 0020 	add.w	r0, r3, #32
 8005804:	1cba      	adds	r2, r7, #2
 8005806:	78f9      	ldrb	r1, [r7, #3]
 8005808:	2301      	movs	r3, #1
 800580a:	f000 fad9 	bl	8005dc0 <lsm303agr_write_reg>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d002      	beq.n	800581a <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8005814:	f04f 33ff 	mov.w	r3, #4294967295
 8005818:	e000      	b.n	800581c <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e04b      	b.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	7b1a      	ldrb	r2, [r3, #12]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699a      	ldr	r2, [r3, #24]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a1a      	ldr	r2, [pc, #104]	; (80058e4 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 800587c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a19      	ldr	r2, [pc, #100]	; (80058e8 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8005882:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8005892:	f04f 33ff 	mov.w	r3, #4294967295
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	e01e      	b.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4798      	blx	r3
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80058a6:	f04f 33ff 	mov.w	r3, #4294967295
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e014      	b.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d010      	beq.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3320      	adds	r3, #32
 80058c4:	2101      	movs	r1, #1
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fcc4 	bl	8006254 <lsm303agr_mag_i2c_interface_set>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295
 80058d6:	e000      	b.n	80058da <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80058d8:	68fb      	ldr	r3, [r7, #12]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	08005ccd 	.word	0x08005ccd
 80058e8:	08005d2f 	.word	0x08005d2f

080058ec <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3320      	adds	r3, #32
 80058f8:	2101      	movs	r1, #1
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fbed 	bl	80060da <lsm303agr_mag_block_data_update_set>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8005906:	f04f 33ff 	mov.w	r3, #4294967295
 800590a:	e028      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3320      	adds	r3, #32
 8005910:	2102      	movs	r1, #2
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fb95 	bl	8006042 <lsm303agr_mag_operating_mode_set>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	e01c      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3320      	adds	r3, #32
 8005928:	2103      	movs	r1, #3
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fbaf 	bl	800608e <lsm303agr_mag_data_rate_set>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8005936:	f04f 33ff 	mov.w	r3, #4294967295
 800593a:	e010      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3320      	adds	r3, #32
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f000 fc3a 	bl	80061bc <lsm303agr_mag_self_test_set>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	e004      	b.n	800595e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b082      	sub	sp, #8
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	e010      	b.n	800599e <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3320      	adds	r3, #32
 8005980:	2100      	movs	r1, #0
 8005982:	4618      	mov	r0, r3
 8005984:	f000 fb5d 	bl	8006042 <lsm303agr_mag_operating_mode_set>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
 8005992:	e004      	b.n	800599e <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80059b6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b086      	sub	sp, #24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	3320      	adds	r3, #32
 80059d4:	f107 0210 	add.w	r2, r7, #16
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fba3 	bl	8006126 <lsm303agr_magnetic_raw_get>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ea:	e036      	b.n	8005a5a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 80059ec:	f107 030c 	add.w	r3, r7, #12
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff ffd7 	bl	80059a6 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80059f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80059fc:	ee07 3a90 	vmov	s15, r3
 8005a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a04:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a10:	ee17 2a90 	vmov	r2, s15
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8005a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a30:	ee17 2a90 	vmov	r2, s15
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8005a38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a3c:	ee07 3a90 	vmov	s15, r3
 8005a40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a44:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a50:	ee17 2a90 	vmov	r2, s15
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3320      	adds	r3, #32
 8005a76:	f107 020b 	add.w	r2, r7, #11
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fa37 	bl	8005ef0 <lsm303agr_xl_full_scale_get>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8005a88:	f04f 33ff 	mov.w	r3, #4294967295
 8005a8c:	e023      	b.n	8005ad6 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
 8005a90:	2b03      	cmp	r3, #3
 8005a92:	d81b      	bhi.n	8005acc <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8005a94:	a201      	add	r2, pc, #4	; (adr r2, 8005a9c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005aad 	.word	0x08005aad
 8005aa0:	08005ab5 	.word	0x08005ab5
 8005aa4:	08005abd 	.word	0x08005abd
 8005aa8:	08005ac5 	.word	0x08005ac5
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8005ab0:	601a      	str	r2, [r3, #0]
      break;
 8005ab2:	e00f      	b.n	8005ad4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4a0b      	ldr	r2, [pc, #44]	; (8005ae4 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8005ab8:	601a      	str	r2, [r3, #0]
      break;
 8005aba:	e00b      	b.n	8005ad4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	4a0a      	ldr	r2, [pc, #40]	; (8005ae8 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8005ac0:	601a      	str	r2, [r3, #0]
      break;
 8005ac2:	e007      	b.n	8005ad4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4a09      	ldr	r2, [pc, #36]	; (8005aec <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8005ac8:	601a      	str	r2, [r3, #0]
      break;
 8005aca:	e003      	b.n	8005ad4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad0:	60fb      	str	r3, [r7, #12]
      break;
 8005ad2:	bf00      	nop
  }

  return ret;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	3f7ae148 	.word	0x3f7ae148
 8005ae4:	3ff9999a 	.word	0x3ff9999a
 8005ae8:	4079999a 	.word	0x4079999a
 8005aec:	413b851f 	.word	0x413b851f

08005af0 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3320      	adds	r3, #32
 8005b02:	f107 020b 	add.w	r2, r7, #11
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 f9f1 	bl	8005ef0 <lsm303agr_xl_full_scale_get>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
 8005b18:	e023      	b.n	8005b62 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005b1a:	7afb      	ldrb	r3, [r7, #11]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d81b      	bhi.n	8005b58 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8005b20:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b41 	.word	0x08005b41
 8005b30:	08005b49 	.word	0x08005b49
 8005b34:	08005b51 	.word	0x08005b51
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8005b3c:	601a      	str	r2, [r3, #0]
      break;
 8005b3e:	e00f      	b.n	8005b60 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	4a0b      	ldr	r2, [pc, #44]	; (8005b70 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8005b44:	601a      	str	r2, [r3, #0]
      break;
 8005b46:	e00b      	b.n	8005b60 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8005b4c:	601a      	str	r2, [r3, #0]
      break;
 8005b4e:	e007      	b.n	8005b60 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8005b54:	601a      	str	r2, [r3, #0]
      break;
 8005b56:	e003      	b.n	8005b60 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	60fb      	str	r3, [r7, #12]
      break;
 8005b5e:	bf00      	nop
  }

  return ret;
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	4079999a 	.word	0x4079999a
 8005b70:	40fa3d71 	.word	0x40fa3d71
 8005b74:	417a147b 	.word	0x417a147b
 8005b78:	423b999a 	.word	0x423b999a

08005b7c <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	3320      	adds	r3, #32
 8005b8e:	f107 020b 	add.w	r2, r7, #11
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 f9ab 	bl	8005ef0 <lsm303agr_xl_full_scale_get>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba4:	e023      	b.n	8005bee <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8005ba6:	7afb      	ldrb	r3, [r7, #11]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d81b      	bhi.n	8005be4 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bcd 	.word	0x08005bcd
 8005bbc:	08005bd5 	.word	0x08005bd5
 8005bc0:	08005bdd 	.word	0x08005bdd
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4a0c      	ldr	r2, [pc, #48]	; (8005bf8 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8005bc8:	601a      	str	r2, [r3, #0]
      break;
 8005bca:	e00f      	b.n	8005bec <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4a0b      	ldr	r2, [pc, #44]	; (8005bfc <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8005bd0:	601a      	str	r2, [r3, #0]
      break;
 8005bd2:	e00b      	b.n	8005bec <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	4a0a      	ldr	r2, [pc, #40]	; (8005c00 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8005bd8:	601a      	str	r2, [r3, #0]
      break;
 8005bda:	e007      	b.n	8005bec <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4a09      	ldr	r2, [pc, #36]	; (8005c04 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8005be0:	601a      	str	r2, [r3, #0]
      break;
 8005be2:	e003      	b.n	8005bec <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8005be4:	f04f 33ff 	mov.w	r3, #4294967295
 8005be8:	60fb      	str	r3, [r7, #12]
      break;
 8005bea:	bf00      	nop
  }

  return ret;
 8005bec:	68fb      	ldr	r3, [r7, #12]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	417a147b 	.word	0x417a147b
 8005bfc:	41fa147b 	.word	0x41fa147b
 8005c00:	427a147b 	.word	0x427a147b
 8005c04:	433b947b 	.word	0x433b947b

08005c08 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	607a      	str	r2, [r7, #4]
 8005c12:	461a      	mov	r2, r3
 8005c14:	460b      	mov	r3, r1
 8005c16:	72fb      	strb	r3, [r7, #11]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10e      	bne.n	8005c46 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	695c      	ldr	r4, [r3, #20]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	7b1b      	ldrb	r3, [r3, #12]
 8005c30:	b298      	uxth	r0, r3
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	b299      	uxth	r1, r3
 8005c3c:	893b      	ldrh	r3, [r7, #8]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	47a0      	blx	r4
 8005c42:	4603      	mov	r3, r0
 8005c44:	e00d      	b.n	8005c62 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	695c      	ldr	r4, [r3, #20]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	7b1b      	ldrb	r3, [r3, #12]
 8005c4e:	b298      	uxth	r0, r3
 8005c50:	7afb      	ldrb	r3, [r7, #11]
 8005c52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	b299      	uxth	r1, r3
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	47a0      	blx	r4
 8005c60:	4603      	mov	r3, r0
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd90      	pop	{r4, r7, pc}

08005c6a <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005c6a:	b590      	push	{r4, r7, lr}
 8005c6c:	b087      	sub	sp, #28
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	60f8      	str	r0, [r7, #12]
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	461a      	mov	r2, r3
 8005c76:	460b      	mov	r3, r1
 8005c78:	72fb      	strb	r3, [r7, #11]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10e      	bne.n	8005ca8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	691c      	ldr	r4, [r3, #16]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	7b1b      	ldrb	r3, [r3, #12]
 8005c92:	b298      	uxth	r0, r3
 8005c94:	7afb      	ldrb	r3, [r7, #11]
 8005c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	b299      	uxth	r1, r3
 8005c9e:	893b      	ldrh	r3, [r7, #8]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	47a0      	blx	r4
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	e00d      	b.n	8005cc4 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	691c      	ldr	r4, [r3, #16]
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	7b1b      	ldrb	r3, [r3, #12]
 8005cb0:	b298      	uxth	r0, r3
 8005cb2:	7afb      	ldrb	r3, [r7, #11]
 8005cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	b299      	uxth	r1, r3
 8005cbc:	893b      	ldrh	r3, [r7, #8]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	47a0      	blx	r4
 8005cc2:	4603      	mov	r3, r0
  }
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd90      	pop	{r4, r7, pc}

08005ccc <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005ccc:	b590      	push	{r4, r7, lr}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	460b      	mov	r3, r1
 8005cda:	72fb      	strb	r3, [r7, #11]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10e      	bne.n	8005d0a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	695c      	ldr	r4, [r3, #20]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	7b1b      	ldrb	r3, [r3, #12]
 8005cf4:	b298      	uxth	r0, r3
 8005cf6:	7afb      	ldrb	r3, [r7, #11]
 8005cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	b299      	uxth	r1, r3
 8005d00:	893b      	ldrh	r3, [r7, #8]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	47a0      	blx	r4
 8005d06:	4603      	mov	r3, r0
 8005d08:	e00d      	b.n	8005d26 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	695c      	ldr	r4, [r3, #20]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	7b1b      	ldrb	r3, [r3, #12]
 8005d12:	b298      	uxth	r0, r3
 8005d14:	7afb      	ldrb	r3, [r7, #11]
 8005d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	b299      	uxth	r1, r3
 8005d1e:	893b      	ldrh	r3, [r7, #8]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	47a0      	blx	r4
 8005d24:	4603      	mov	r3, r0
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd90      	pop	{r4, r7, pc}

08005d2e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005d2e:	b590      	push	{r4, r7, lr}
 8005d30:	b087      	sub	sp, #28
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	60f8      	str	r0, [r7, #12]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	461a      	mov	r2, r3
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	72fb      	strb	r3, [r7, #11]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10e      	bne.n	8005d6c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	691c      	ldr	r4, [r3, #16]
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	7b1b      	ldrb	r3, [r3, #12]
 8005d56:	b298      	uxth	r0, r3
 8005d58:	7afb      	ldrb	r3, [r7, #11]
 8005d5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	b299      	uxth	r1, r3
 8005d62:	893b      	ldrh	r3, [r7, #8]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	47a0      	blx	r4
 8005d68:	4603      	mov	r3, r0
 8005d6a:	e00d      	b.n	8005d88 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	691c      	ldr	r4, [r3, #16]
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	7b1b      	ldrb	r3, [r3, #12]
 8005d74:	b298      	uxth	r0, r3
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	b299      	uxth	r1, r3
 8005d80:	893b      	ldrh	r3, [r7, #8]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	47a0      	blx	r4
 8005d86:	4603      	mov	r3, r0
  }
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd90      	pop	{r4, r7, pc}

08005d90 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8005d90:	b590      	push	{r4, r7, lr}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	72fb      	strb	r3, [r7, #11]
 8005da0:	4613      	mov	r3, r2
 8005da2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	685c      	ldr	r4, [r3, #4]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68d8      	ldr	r0, [r3, #12]
 8005dac:	893b      	ldrh	r3, [r7, #8]
 8005dae:	7af9      	ldrb	r1, [r7, #11]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	47a0      	blx	r4
 8005db4:	6178      	str	r0, [r7, #20]

  return ret;
 8005db6:	697b      	ldr	r3, [r7, #20]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	371c      	adds	r7, #28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd90      	pop	{r4, r7, pc}

08005dc0 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005dc0:	b590      	push	{r4, r7, lr}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	607a      	str	r2, [r7, #4]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	460b      	mov	r3, r1
 8005dce:	72fb      	strb	r3, [r7, #11]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681c      	ldr	r4, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68d8      	ldr	r0, [r3, #12]
 8005ddc:	893b      	ldrh	r3, [r7, #8]
 8005dde:	7af9      	ldrb	r1, [r7, #11]
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	47a0      	blx	r4
 8005de4:	6178      	str	r0, [r7, #20]

  return ret;
 8005de6:	697b      	ldr	r3, [r7, #20]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd90      	pop	{r4, r7, pc}

08005df0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005dfa:	f107 020c 	add.w	r2, r7, #12
 8005dfe:	2301      	movs	r3, #1
 8005e00:	2120      	movs	r1, #32
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7ff ffc4 	bl	8005d90 <lsm303agr_read_reg>
 8005e08:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d107      	bne.n	8005e20 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005e10:	f107 0210 	add.w	r2, r7, #16
 8005e14:	2301      	movs	r3, #1
 8005e16:	2123      	movs	r1, #35	; 0x23
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff ffb9 	bl	8005d90 <lsm303agr_read_reg>
 8005e1e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8005e20:	7b3b      	ldrb	r3, [r7, #12]
 8005e22:	f003 0308 	and.w	r3, r3, #8
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e00c      	b.n	8005e4e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8005e34:	7c3b      	ldrb	r3, [r7, #16]
 8005e36:	f003 0308 	and.w	r3, r3, #8
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	e002      	b.n	8005e4e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8005e4e:	697b      	ldr	r3, [r7, #20]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005e64:	f107 0208 	add.w	r2, r7, #8
 8005e68:	2301      	movs	r3, #1
 8005e6a:	2120      	movs	r1, #32
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff8f 	bl	8005d90 <lsm303agr_read_reg>
 8005e72:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10f      	bne.n	8005e9a <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	f003 030f 	and.w	r3, r3, #15
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	7a3b      	ldrb	r3, [r7, #8]
 8005e84:	f362 1307 	bfi	r3, r2, #4, #4
 8005e88:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8005e8a:	f107 0208 	add.w	r2, r7, #8
 8005e8e:	2301      	movs	r3, #1
 8005e90:	2120      	movs	r1, #32
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff ff94 	bl	8005dc0 <lsm303agr_write_reg>
 8005e98:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005eb0:	f107 0208 	add.w	r2, r7, #8
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	2123      	movs	r1, #35	; 0x23
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff ff69 	bl	8005d90 <lsm303agr_read_reg>
 8005ebe:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10f      	bne.n	8005ee6 <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	f003 0303 	and.w	r3, r3, #3
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	7a3b      	ldrb	r3, [r7, #8]
 8005ed0:	f362 1305 	bfi	r3, r2, #4, #2
 8005ed4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005ed6:	f107 0208 	add.w	r2, r7, #8
 8005eda:	2301      	movs	r3, #1
 8005edc:	2123      	movs	r1, #35	; 0x23
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff ff6e 	bl	8005dc0 <lsm303agr_write_reg>
 8005ee4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005efa:	f107 0208 	add.w	r2, r7, #8
 8005efe:	2301      	movs	r3, #1
 8005f00:	2123      	movs	r1, #35	; 0x23
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff ff44 	bl	8005d90 <lsm303agr_read_reg>
 8005f08:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8005f0a:	7a3b      	ldrb	r3, [r7, #8]
 8005f0c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b03      	cmp	r3, #3
 8005f14:	d81a      	bhi.n	8005f4c <lsm303agr_xl_full_scale_get+0x5c>
 8005f16:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <lsm303agr_xl_full_scale_get+0x2c>)
 8005f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005f35 	.word	0x08005f35
 8005f24:	08005f3d 	.word	0x08005f3d
 8005f28:	08005f45 	.word	0x08005f45
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
      break;
 8005f32:	e00f      	b.n	8005f54 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
      break;
 8005f3a:	e00b      	b.n	8005f54 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	701a      	strb	r2, [r3, #0]
      break;
 8005f42:	e007      	b.n	8005f54 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	2203      	movs	r2, #3
 8005f48:	701a      	strb	r2, [r3, #0]
      break;
 8005f4a:	e003      	b.n	8005f54 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
      break;
 8005f52:	bf00      	nop
  }

  return ret;
 8005f54:	68fb      	ldr	r3, [r7, #12]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop

08005f60 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005f6c:	f107 0208 	add.w	r2, r7, #8
 8005f70:	2301      	movs	r3, #1
 8005f72:	2123      	movs	r1, #35	; 0x23
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ff0b 	bl	8005d90 <lsm303agr_read_reg>
 8005f7a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10f      	bne.n	8005fa2 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	7a3b      	ldrb	r3, [r7, #8]
 8005f8c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005f90:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005f92:	f107 0208 	add.w	r2, r7, #8
 8005f96:	2301      	movs	r3, #1
 8005f98:	2123      	movs	r1, #35	; 0x23
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff ff10 	bl	8005dc0 <lsm303agr_write_reg>
 8005fa0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8005fb6:	f107 020c 	add.w	r2, r7, #12
 8005fba:	2306      	movs	r3, #6
 8005fbc:	2128      	movs	r1, #40	; 0x28
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff fee6 	bl	8005d90 <lsm303agr_read_reg>
 8005fc4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005fc6:	7b7b      	ldrb	r3, [r7, #13]
 8005fc8:	b21a      	sxth	r2, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	021b      	lsls	r3, r3, #8
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	7b3b      	ldrb	r3, [r7, #12]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4413      	add	r3, r2
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	b21a      	sxth	r2, r3
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005fe8:	7bfa      	ldrb	r2, [r7, #15]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	3302      	adds	r3, #2
 8005fee:	b212      	sxth	r2, r2
 8005ff0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	7bbb      	ldrb	r3, [r7, #14]
 8006002:	b29b      	uxth	r3, r3
 8006004:	4413      	add	r3, r2
 8006006:	b29a      	uxth	r2, r3
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	3302      	adds	r3, #2
 800600c:	b212      	sxth	r2, r2
 800600e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006010:	7c7a      	ldrb	r2, [r7, #17]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	3304      	adds	r3, #4
 8006016:	b212      	sxth	r2, r2
 8006018:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	3304      	adds	r3, #4
 800601e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006022:	b29b      	uxth	r3, r3
 8006024:	021b      	lsls	r3, r3, #8
 8006026:	b29a      	uxth	r2, r3
 8006028:	7c3b      	ldrb	r3, [r7, #16]
 800602a:	b29b      	uxth	r3, r3
 800602c:	4413      	add	r3, r2
 800602e:	b29a      	uxth	r2, r3
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	3304      	adds	r3, #4
 8006034:	b212      	sxth	r2, r2
 8006036:	801a      	strh	r2, [r3, #0]

  return ret;
 8006038:	697b      	ldr	r3, [r7, #20]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	460b      	mov	r3, r1
 800604c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800604e:	f107 0208 	add.w	r2, r7, #8
 8006052:	2301      	movs	r3, #1
 8006054:	2160      	movs	r1, #96	; 0x60
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff fe9a 	bl	8005d90 <lsm303agr_read_reg>
 800605c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	b2da      	uxtb	r2, r3
 800606c:	7a3b      	ldrb	r3, [r7, #8]
 800606e:	f362 0301 	bfi	r3, r2, #0, #2
 8006072:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8006074:	f107 0208 	add.w	r2, r7, #8
 8006078:	2301      	movs	r3, #1
 800607a:	2160      	movs	r1, #96	; 0x60
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f7ff fe9f 	bl	8005dc0 <lsm303agr_write_reg>
 8006082:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8006084:	68fb      	ldr	r3, [r7, #12]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b084      	sub	sp, #16
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	460b      	mov	r3, r1
 8006098:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800609a:	f107 0208 	add.w	r2, r7, #8
 800609e:	2301      	movs	r3, #1
 80060a0:	2160      	movs	r1, #96	; 0x60
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff fe74 	bl	8005d90 <lsm303agr_read_reg>
 80060a8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	b2da      	uxtb	r2, r3
 80060b8:	7a3b      	ldrb	r3, [r7, #8]
 80060ba:	f362 0383 	bfi	r3, r2, #2, #2
 80060be:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80060c0:	f107 0208 	add.w	r2, r7, #8
 80060c4:	2301      	movs	r3, #1
 80060c6:	2160      	movs	r1, #96	; 0x60
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fe79 	bl	8005dc0 <lsm303agr_write_reg>
 80060ce:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80060d0:	68fb      	ldr	r3, [r7, #12]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80060e6:	f107 0208 	add.w	r2, r7, #8
 80060ea:	2301      	movs	r3, #1
 80060ec:	2162      	movs	r1, #98	; 0x62
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff fe4e 	bl	8005d90 <lsm303agr_read_reg>
 80060f4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10f      	bne.n	800611c <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	b2da      	uxtb	r2, r3
 8006104:	7a3b      	ldrb	r3, [r7, #8]
 8006106:	f362 1304 	bfi	r3, r2, #4, #1
 800610a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800610c:	f107 0208 	add.w	r2, r7, #8
 8006110:	2301      	movs	r3, #1
 8006112:	2162      	movs	r1, #98	; 0x62
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7ff fe53 	bl	8005dc0 <lsm303agr_write_reg>
 800611a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800611c:	68fb      	ldr	r3, [r7, #12]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b086      	sub	sp, #24
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8006130:	f107 020c 	add.w	r2, r7, #12
 8006134:	2306      	movs	r3, #6
 8006136:	2168      	movs	r1, #104	; 0x68
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff fe29 	bl	8005d90 <lsm303agr_read_reg>
 800613e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006140:	7b7b      	ldrb	r3, [r7, #13]
 8006142:	b21a      	sxth	r2, r3
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800614e:	b29b      	uxth	r3, r3
 8006150:	021b      	lsls	r3, r3, #8
 8006152:	b29a      	uxth	r2, r3
 8006154:	7b3b      	ldrb	r3, [r7, #12]
 8006156:	b29b      	uxth	r3, r3
 8006158:	4413      	add	r3, r2
 800615a:	b29b      	uxth	r3, r3
 800615c:	b21a      	sxth	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006162:	7bfa      	ldrb	r2, [r7, #15]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	3302      	adds	r3, #2
 8006168:	b212      	sxth	r2, r2
 800616a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	3302      	adds	r3, #2
 8006170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006174:	b29b      	uxth	r3, r3
 8006176:	021b      	lsls	r3, r3, #8
 8006178:	b29a      	uxth	r2, r3
 800617a:	7bbb      	ldrb	r3, [r7, #14]
 800617c:	b29b      	uxth	r3, r3
 800617e:	4413      	add	r3, r2
 8006180:	b29a      	uxth	r2, r3
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	3302      	adds	r3, #2
 8006186:	b212      	sxth	r2, r2
 8006188:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800618a:	7c7a      	ldrb	r2, [r7, #17]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	3304      	adds	r3, #4
 8006190:	b212      	sxth	r2, r2
 8006192:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	3304      	adds	r3, #4
 8006198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800619c:	b29b      	uxth	r3, r3
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	7c3b      	ldrb	r3, [r7, #16]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	4413      	add	r3, r2
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	3304      	adds	r3, #4
 80061ae:	b212      	sxth	r2, r2
 80061b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80061b2:	697b      	ldr	r3, [r7, #20]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80061c8:	f107 0208 	add.w	r2, r7, #8
 80061cc:	2301      	movs	r3, #1
 80061ce:	2162      	movs	r1, #98	; 0x62
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff fddd 	bl	8005d90 <lsm303agr_read_reg>
 80061d6:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 80061de:	78fb      	ldrb	r3, [r7, #3]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	7a3b      	ldrb	r3, [r7, #8]
 80061e8:	f362 0341 	bfi	r3, r2, #1, #1
 80061ec:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80061ee:	f107 0208 	add.w	r2, r7, #8
 80061f2:	2301      	movs	r3, #1
 80061f4:	2162      	movs	r1, #98	; 0x62
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff fde2 	bl	8005dc0 <lsm303agr_write_reg>
 80061fc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80061fe:	68fb      	ldr	r3, [r7, #12]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8006214:	f107 0208 	add.w	r2, r7, #8
 8006218:	2301      	movs	r3, #1
 800621a:	212e      	movs	r1, #46	; 0x2e
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fdb7 	bl	8005d90 <lsm303agr_read_reg>
 8006222:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	b2da      	uxtb	r2, r3
 8006232:	7a3b      	ldrb	r3, [r7, #8]
 8006234:	f362 1387 	bfi	r3, r2, #6, #2
 8006238:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800623a:	f107 0208 	add.w	r2, r7, #8
 800623e:	2301      	movs	r3, #1
 8006240:	212e      	movs	r1, #46	; 0x2e
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fdbc 	bl	8005dc0 <lsm303agr_write_reg>
 8006248:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	460b      	mov	r3, r1
 800625e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006260:	f107 0208 	add.w	r2, r7, #8
 8006264:	2301      	movs	r3, #1
 8006266:	2162      	movs	r1, #98	; 0x62
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff fd91 	bl	8005d90 <lsm303agr_read_reg>
 800626e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10f      	bne.n	8006296 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	b2da      	uxtb	r2, r3
 800627e:	7a3b      	ldrb	r3, [r7, #8]
 8006280:	f362 1345 	bfi	r3, r2, #5, #1
 8006284:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8006286:	f107 0208 	add.w	r2, r7, #8
 800628a:	2301      	movs	r3, #1
 800628c:	2162      	movs	r1, #98	; 0x62
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fd96 	bl	8005dc0 <lsm303agr_write_reg>
 8006294:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8006296:	68fb      	ldr	r3, [r7, #12]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e051      	b.n	8006360 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	7b1a      	ldrb	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	695a      	ldr	r2, [r3, #20]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a1d      	ldr	r2, [pc, #116]	; (800636c <LSM6DSL_RegisterBusIO+0xcc>)
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a1c      	ldr	r2, [pc, #112]	; (8006370 <LSM6DSL_RegisterBusIO+0xd0>)
 80062fe:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d103      	bne.n	800631e <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8006316:	f04f 33ff 	mov.w	r3, #4294967295
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	e020      	b.n	8006360 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4798      	blx	r3
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 800632a:	f04f 33ff 	mov.w	r3, #4294967295
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e016      	b.n	8006360 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d112      	bne.n	8006360 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10d      	bne.n	8006360 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006344:	230c      	movs	r3, #12
 8006346:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8006348:	7afb      	ldrb	r3, [r7, #11]
 800634a:	461a      	mov	r2, r3
 800634c:	2112      	movs	r1, #18
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f968 	bl	8006624 <LSM6DSL_Write_Reg>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800635a:	f04f 33ff 	mov.w	r3, #4294967295
 800635e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8006360:	68fb      	ldr	r3, [r7, #12]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	0800665b 	.word	0x0800665b
 8006370:	08006691 	.word	0x08006691

08006374 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3320      	adds	r3, #32
 8006380:	2101      	movs	r1, #1
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fb1b 	bl	80069be <lsm6dsl_auto_increment_set>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800638e:	f04f 33ff 	mov.w	r3, #4294967295
 8006392:	e054      	b.n	800643e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3320      	adds	r3, #32
 8006398:	2101      	movs	r1, #1
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fa9e 	bl	80068dc <lsm6dsl_block_data_update_set>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295
 80063aa:	e048      	b.n	800643e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3320      	adds	r3, #32
 80063b0:	2100      	movs	r1, #0
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fb29 	bl	8006a0a <lsm6dsl_fifo_mode_set>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80063be:	f04f 33ff 	mov.w	r3, #4294967295
 80063c2:	e03c      	b.n	800643e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2204      	movs	r2, #4
 80063c8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3320      	adds	r3, #32
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 f9cd 	bl	8006772 <lsm6dsl_xl_data_rate_set>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d002      	beq.n	80063e4 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	e02c      	b.n	800643e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3320      	adds	r3, #32
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f99b 	bl	8006726 <lsm6dsl_xl_full_scale_set>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	e020      	b.n	800643e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2204      	movs	r2, #4
 8006400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3320      	adds	r3, #32
 8006408:	2100      	movs	r1, #0
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fa40 	bl	8006890 <lsm6dsl_gy_data_rate_set>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	e010      	b.n	800643e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3320      	adds	r3, #32
 8006420:	2106      	movs	r1, #6
 8006422:	4618      	mov	r0, r3
 8006424:	f000 f9cb 	bl	80067be <lsm6dsl_gy_full_scale_set>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800642e:	f04f 33ff 	mov.w	r3, #4294967295
 8006432:	e004      	b.n	800643e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	e014      	b.n	8006486 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f103 0220 	add.w	r2, r3, #32
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f000 f981 	bl	8006772 <lsm6dsl_xl_data_rate_set>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
 800647a:	e004      	b.n	8006486 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e014      	b.n	80064ce <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f103 0220 	add.w	r2, r3, #32
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064b0:	4619      	mov	r1, r3
 80064b2:	4610      	mov	r0, r2
 80064b4:	f000 f9ec 	bl	8006890 <lsm6dsl_gy_data_rate_set>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80064be:	f04f 33ff 	mov.w	r3, #4294967295
 80064c2:	e004      	b.n	80064ce <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3320      	adds	r3, #32
 80064ea:	f107 020b 	add.w	r2, r7, #11
 80064ee:	4611      	mov	r1, r2
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 f98b 	bl	800680c <lsm6dsl_gy_full_scale_get>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d002      	beq.n	8006502 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006500:	e02d      	b.n	800655e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006502:	7afb      	ldrb	r3, [r7, #11]
 8006504:	2b06      	cmp	r3, #6
 8006506:	d825      	bhi.n	8006554 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8006508:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800650a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650e:	bf00      	nop
 8006510:	08006535 	.word	0x08006535
 8006514:	0800652d 	.word	0x0800652d
 8006518:	0800653d 	.word	0x0800653d
 800651c:	08006555 	.word	0x08006555
 8006520:	08006545 	.word	0x08006545
 8006524:	08006555 	.word	0x08006555
 8006528:	0800654d 	.word	0x0800654d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	4a0e      	ldr	r2, [pc, #56]	; (8006568 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8006530:	601a      	str	r2, [r3, #0]
      break;
 8006532:	e013      	b.n	800655c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4a0d      	ldr	r2, [pc, #52]	; (800656c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8006538:	601a      	str	r2, [r3, #0]
      break;
 800653a:	e00f      	b.n	800655c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8006540:	601a      	str	r2, [r3, #0]
      break;
 8006542:	e00b      	b.n	800655c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8006548:	601a      	str	r2, [r3, #0]
      break;
 800654a:	e007      	b.n	800655c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8006550:	601a      	str	r2, [r3, #0]
      break;
 8006552:	e003      	b.n	800655c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8006554:	f04f 33ff 	mov.w	r3, #4294967295
 8006558:	60fb      	str	r3, [r7, #12]
      break;
 800655a:	bf00      	nop
  }

  return ret;
 800655c:	68fb      	ldr	r3, [r7, #12]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	408c0000 	.word	0x408c0000
 800656c:	410c0000 	.word	0x410c0000
 8006570:	418c0000 	.word	0x418c0000
 8006574:	420c0000 	.word	0x420c0000
 8006578:	428c0000 	.word	0x428c0000

0800657c <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3320      	adds	r3, #32
 800658a:	f107 0210 	add.w	r2, r7, #16
 800658e:	4611      	mov	r1, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f000 f9c9 	bl	8006928 <lsm6dsl_angular_rate_raw_get>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	e03c      	b.n	800661c <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80065a2:	f107 030c 	add.w	r3, r7, #12
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7ff ff95 	bl	80064d8 <LSM6DSL_GYRO_GetSensitivity>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80065b4:	f04f 33ff 	mov.w	r3, #4294967295
 80065b8:	e030      	b.n	800661c <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80065ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80065ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065d2:	ee17 2a90 	vmov	r2, s15
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80065da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065de:	ee07 3a90 	vmov	s15, r3
 80065e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80065ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065f2:	ee17 2a90 	vmov	r2, s15
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80065fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006606:	edd7 7a03 	vldr	s15, [r7, #12]
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006612:	ee17 2a90 	vmov	r2, s15
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
 8006630:	4613      	mov	r3, r2
 8006632:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f103 0020 	add.w	r0, r3, #32
 800663a:	1cba      	adds	r2, r7, #2
 800663c:	78f9      	ldrb	r1, [r7, #3]
 800663e:	2301      	movs	r3, #1
 8006640:	f000 f859 	bl	80066f6 <lsm6dsl_write_reg>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	e000      	b.n	8006652 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800665a:	b590      	push	{r4, r7, lr}
 800665c:	b087      	sub	sp, #28
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	461a      	mov	r2, r3
 8006666:	460b      	mov	r3, r1
 8006668:	72fb      	strb	r3, [r7, #11]
 800666a:	4613      	mov	r3, r2
 800666c:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	695c      	ldr	r4, [r3, #20]
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	7b1b      	ldrb	r3, [r3, #12]
 800667a:	b298      	uxth	r0, r3
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	b299      	uxth	r1, r3
 8006680:	893b      	ldrh	r3, [r7, #8]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	47a0      	blx	r4
 8006686:	4603      	mov	r3, r0
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	bd90      	pop	{r4, r7, pc}

08006690 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	607a      	str	r2, [r7, #4]
 800669a:	461a      	mov	r2, r3
 800669c:	460b      	mov	r3, r1
 800669e:	72fb      	strb	r3, [r7, #11]
 80066a0:	4613      	mov	r3, r2
 80066a2:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	691c      	ldr	r4, [r3, #16]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	7b1b      	ldrb	r3, [r3, #12]
 80066b0:	b298      	uxth	r0, r3
 80066b2:	7afb      	ldrb	r3, [r7, #11]
 80066b4:	b299      	uxth	r1, r3
 80066b6:	893b      	ldrh	r3, [r7, #8]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	47a0      	blx	r4
 80066bc:	4603      	mov	r3, r0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd90      	pop	{r4, r7, pc}

080066c6 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80066c6:	b590      	push	{r4, r7, lr}
 80066c8:	b087      	sub	sp, #28
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	461a      	mov	r2, r3
 80066d2:	460b      	mov	r3, r1
 80066d4:	72fb      	strb	r3, [r7, #11]
 80066d6:	4613      	mov	r3, r2
 80066d8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685c      	ldr	r4, [r3, #4]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68d8      	ldr	r0, [r3, #12]
 80066e2:	893b      	ldrh	r3, [r7, #8]
 80066e4:	7af9      	ldrb	r1, [r7, #11]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	47a0      	blx	r4
 80066ea:	6178      	str	r0, [r7, #20]

  return ret;
 80066ec:	697b      	ldr	r3, [r7, #20]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd90      	pop	{r4, r7, pc}

080066f6 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80066f6:	b590      	push	{r4, r7, lr}
 80066f8:	b087      	sub	sp, #28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	461a      	mov	r2, r3
 8006702:	460b      	mov	r3, r1
 8006704:	72fb      	strb	r3, [r7, #11]
 8006706:	4613      	mov	r3, r2
 8006708:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681c      	ldr	r4, [r3, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	68d8      	ldr	r0, [r3, #12]
 8006712:	893b      	ldrh	r3, [r7, #8]
 8006714:	7af9      	ldrb	r1, [r7, #11]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	47a0      	blx	r4
 800671a:	6178      	str	r0, [r7, #20]

  return ret;
 800671c:	697b      	ldr	r3, [r7, #20]
}
 800671e:	4618      	mov	r0, r3
 8006720:	371c      	adds	r7, #28
 8006722:	46bd      	mov	sp, r7
 8006724:	bd90      	pop	{r4, r7, pc}

08006726 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	460b      	mov	r3, r1
 8006730:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006732:	f107 0208 	add.w	r2, r7, #8
 8006736:	2301      	movs	r3, #1
 8006738:	2110      	movs	r1, #16
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ffc3 	bl	80066c6 <lsm6dsl_read_reg>
 8006740:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10f      	bne.n	8006768 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	b2da      	uxtb	r2, r3
 8006750:	7a3b      	ldrb	r3, [r7, #8]
 8006752:	f362 0383 	bfi	r3, r2, #2, #2
 8006756:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8006758:	f107 0208 	add.w	r2, r7, #8
 800675c:	2301      	movs	r3, #1
 800675e:	2110      	movs	r1, #16
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff ffc8 	bl	80066f6 <lsm6dsl_write_reg>
 8006766:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006768:	68fb      	ldr	r3, [r7, #12]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800677e:	f107 0208 	add.w	r2, r7, #8
 8006782:	2301      	movs	r3, #1
 8006784:	2110      	movs	r1, #16
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7ff ff9d 	bl	80066c6 <lsm6dsl_read_reg>
 800678c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10f      	bne.n	80067b4 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	b2da      	uxtb	r2, r3
 800679c:	7a3b      	ldrb	r3, [r7, #8]
 800679e:	f362 1307 	bfi	r3, r2, #4, #4
 80067a2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80067a4:	f107 0208 	add.w	r2, r7, #8
 80067a8:	2301      	movs	r3, #1
 80067aa:	2110      	movs	r1, #16
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7ff ffa2 	bl	80066f6 <lsm6dsl_write_reg>
 80067b2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	460b      	mov	r3, r1
 80067c8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80067ca:	f107 0208 	add.w	r2, r7, #8
 80067ce:	2301      	movs	r3, #1
 80067d0:	2111      	movs	r1, #17
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff ff77 	bl	80066c6 <lsm6dsl_read_reg>
 80067d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10f      	bne.n	8006800 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	7a3b      	ldrb	r3, [r7, #8]
 80067ea:	f362 0343 	bfi	r3, r2, #1, #3
 80067ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80067f0:	f107 0208 	add.w	r2, r7, #8
 80067f4:	2301      	movs	r3, #1
 80067f6:	2111      	movs	r1, #17
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff7c 	bl	80066f6 <lsm6dsl_write_reg>
 80067fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006800:	68fb      	ldr	r3, [r7, #12]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	2301      	movs	r3, #1
 800681c:	2111      	movs	r1, #17
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff ff51 	bl	80066c6 <lsm6dsl_read_reg>
 8006824:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 8006826:	7a3b      	ldrb	r3, [r7, #8]
 8006828:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b06      	cmp	r3, #6
 8006830:	d824      	bhi.n	800687c <lsm6dsl_gy_full_scale_get+0x70>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <lsm6dsl_gy_full_scale_get+0x2c>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	08006855 	.word	0x08006855
 800683c:	0800685d 	.word	0x0800685d
 8006840:	08006865 	.word	0x08006865
 8006844:	0800687d 	.word	0x0800687d
 8006848:	0800686d 	.word	0x0800686d
 800684c:	0800687d 	.word	0x0800687d
 8006850:	08006875 	.word	0x08006875
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	701a      	strb	r2, [r3, #0]
      break;
 800685a:	e013      	b.n	8006884 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2201      	movs	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
      break;
 8006862:	e00f      	b.n	8006884 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2202      	movs	r2, #2
 8006868:	701a      	strb	r2, [r3, #0]
      break;
 800686a:	e00b      	b.n	8006884 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2204      	movs	r2, #4
 8006870:	701a      	strb	r2, [r3, #0]
      break;
 8006872:	e007      	b.n	8006884 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2206      	movs	r2, #6
 8006878:	701a      	strb	r2, [r3, #0]
      break;
 800687a:	e003      	b.n	8006884 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2207      	movs	r2, #7
 8006880:	701a      	strb	r2, [r3, #0]
      break;
 8006882:	bf00      	nop
  }

  return ret;
 8006884:	68fb      	ldr	r3, [r7, #12]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop

08006890 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	460b      	mov	r3, r1
 800689a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800689c:	f107 0208 	add.w	r2, r7, #8
 80068a0:	2301      	movs	r3, #1
 80068a2:	2111      	movs	r1, #17
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ff0e 	bl	80066c6 <lsm6dsl_read_reg>
 80068aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10f      	bne.n	80068d2 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	7a3b      	ldrb	r3, [r7, #8]
 80068bc:	f362 1307 	bfi	r3, r2, #4, #4
 80068c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80068c2:	f107 0208 	add.w	r2, r7, #8
 80068c6:	2301      	movs	r3, #1
 80068c8:	2111      	movs	r1, #17
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff13 	bl	80066f6 <lsm6dsl_write_reg>
 80068d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80068d2:	68fb      	ldr	r3, [r7, #12]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80068e8:	f107 0208 	add.w	r2, r7, #8
 80068ec:	2301      	movs	r3, #1
 80068ee:	2112      	movs	r1, #18
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fee8 	bl	80066c6 <lsm6dsl_read_reg>
 80068f6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10f      	bne.n	800691e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	7a3b      	ldrb	r3, [r7, #8]
 8006908:	f362 1386 	bfi	r3, r2, #6, #1
 800690c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800690e:	f107 0208 	add.w	r2, r7, #8
 8006912:	2301      	movs	r3, #1
 8006914:	2112      	movs	r1, #18
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7ff feed 	bl	80066f6 <lsm6dsl_write_reg>
 800691c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800691e:	68fb      	ldr	r3, [r7, #12]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8006932:	f107 020c 	add.w	r2, r7, #12
 8006936:	2306      	movs	r3, #6
 8006938:	2122      	movs	r1, #34	; 0x22
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff fec3 	bl	80066c6 <lsm6dsl_read_reg>
 8006940:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8006942:	7b7b      	ldrb	r3, [r7, #13]
 8006944:	b21a      	sxth	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006950:	b29b      	uxth	r3, r3
 8006952:	021b      	lsls	r3, r3, #8
 8006954:	b29a      	uxth	r2, r3
 8006956:	7b3b      	ldrb	r3, [r7, #12]
 8006958:	b29b      	uxth	r3, r3
 800695a:	4413      	add	r3, r2
 800695c:	b29b      	uxth	r3, r3
 800695e:	b21a      	sxth	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8006964:	7bfa      	ldrb	r2, [r7, #15]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	3302      	adds	r3, #2
 800696a:	b212      	sxth	r2, r2
 800696c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	3302      	adds	r3, #2
 8006972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006976:	b29b      	uxth	r3, r3
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	b29a      	uxth	r2, r3
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	b29b      	uxth	r3, r3
 8006980:	4413      	add	r3, r2
 8006982:	b29a      	uxth	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	3302      	adds	r3, #2
 8006988:	b212      	sxth	r2, r2
 800698a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800698c:	7c7a      	ldrb	r2, [r7, #17]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	3304      	adds	r3, #4
 8006992:	b212      	sxth	r2, r2
 8006994:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	3304      	adds	r3, #4
 800699a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	7c3b      	ldrb	r3, [r7, #16]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	4413      	add	r3, r2
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	3304      	adds	r3, #4
 80069b0:	b212      	sxth	r2, r2
 80069b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80069b4:	697b      	ldr	r3, [r7, #20]
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80069ca:	f107 0208 	add.w	r2, r7, #8
 80069ce:	2301      	movs	r3, #1
 80069d0:	2112      	movs	r1, #18
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fe77 	bl	80066c6 <lsm6dsl_read_reg>
 80069d8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10f      	bne.n	8006a00 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 80069e0:	78fb      	ldrb	r3, [r7, #3]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	7a3b      	ldrb	r3, [r7, #8]
 80069ea:	f362 0382 	bfi	r3, r2, #2, #1
 80069ee:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80069f0:	f107 0208 	add.w	r2, r7, #8
 80069f4:	2301      	movs	r3, #1
 80069f6:	2112      	movs	r1, #18
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff fe7c 	bl	80066f6 <lsm6dsl_write_reg>
 80069fe:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006a00:	68fb      	ldr	r3, [r7, #12]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	460b      	mov	r3, r1
 8006a14:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006a16:	f107 0208 	add.w	r2, r7, #8
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	210a      	movs	r1, #10
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fe51 	bl	80066c6 <lsm6dsl_read_reg>
 8006a24:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d10f      	bne.n	8006a4c <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8006a2c:	78fb      	ldrb	r3, [r7, #3]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	7a3b      	ldrb	r3, [r7, #8]
 8006a36:	f362 0302 	bfi	r3, r2, #0, #3
 8006a3a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8006a3c:	f107 0208 	add.w	r2, r7, #8
 8006a40:	2301      	movs	r3, #1
 8006a42:	210a      	movs	r1, #10
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fe56 	bl	80066f6 <lsm6dsl_write_reg>
 8006a4a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a62:	4b0c      	ldr	r3, [pc, #48]	; (8006a94 <HAL_Init+0x3c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <HAL_Init+0x3c>)
 8006a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a6e:	2003      	movs	r0, #3
 8006a70:	f001 faca 	bl	8008008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a74:	200f      	movs	r0, #15
 8006a76:	f000 f80f 	bl	8006a98 <HAL_InitTick>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	71fb      	strb	r3, [r7, #7]
 8006a84:	e001      	b.n	8006a8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a86:	f7fc fcdb 	bl	8003440 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40022000 	.word	0x40022000

08006a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006aa4:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <HAL_InitTick+0x6c>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d023      	beq.n	8006af4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006aac:	4b16      	ldr	r3, [pc, #88]	; (8006b08 <HAL_InitTick+0x70>)
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	4b14      	ldr	r3, [pc, #80]	; (8006b04 <HAL_InitTick+0x6c>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f001 fad5 	bl	8008072 <HAL_SYSTICK_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10f      	bne.n	8006aee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2b0f      	cmp	r3, #15
 8006ad2:	d809      	bhi.n	8006ae8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8006adc:	f001 fa9f 	bl	800801e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <HAL_InitTick+0x74>)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	e007      	b.n	8006af8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
 8006aec:	e004      	b.n	8006af8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	73fb      	strb	r3, [r7, #15]
 8006af2:	e001      	b.n	8006af8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000008 	.word	0x20000008
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	20000004 	.word	0x20000004

08006b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b14:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <HAL_IncTick+0x20>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <HAL_IncTick+0x24>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4413      	add	r3, r2
 8006b20:	4a04      	ldr	r2, [pc, #16]	; (8006b34 <HAL_IncTick+0x24>)
 8006b22:	6013      	str	r3, [r2, #0]
}
 8006b24:	bf00      	nop
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	20000008 	.word	0x20000008
 8006b34:	20000e98 	.word	0x20000e98

08006b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8006b3c:	4b03      	ldr	r3, [pc, #12]	; (8006b4c <HAL_GetTick+0x14>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	20000e98 	.word	0x20000e98

08006b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b58:	f7ff ffee 	bl	8006b38 <HAL_GetTick>
 8006b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b68:	d005      	beq.n	8006b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	; (8006b94 <HAL_Delay+0x44>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b76:	bf00      	nop
 8006b78:	f7ff ffde 	bl	8006b38 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d8f7      	bhi.n	8006b78 <HAL_Delay+0x28>
  {
  }
}
 8006b88:	bf00      	nop
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	20000008 	.word	0x20000008

08006b98 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b083      	sub	sp, #12
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	609a      	str	r2, [r3, #8]
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
 8006c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	3360      	adds	r3, #96	; 0x60
 8006c12:	461a      	mov	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	4b08      	ldr	r3, [pc, #32]	; (8006c44 <LL_ADC_SetOffset+0x44>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	03fff000 	.word	0x03fff000

08006c48 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3360      	adds	r3, #96	; 0x60
 8006c56:	461a      	mov	r2, r3
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3360      	adds	r3, #96	; 0x60
 8006c84:	461a      	mov	r2, r3
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006c9e:	bf00      	nop
 8006ca0:	371c      	adds	r7, #28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b087      	sub	sp, #28
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3330      	adds	r3, #48	; 0x30
 8006cba:	461a      	mov	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	4413      	add	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	211f      	movs	r1, #31
 8006cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	401a      	ands	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0e9b      	lsrs	r3, r3, #26
 8006ce2:	f003 011f 	and.w	r1, r3, #31
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f003 031f 	and.w	r3, r3, #31
 8006cec:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf0:	431a      	orrs	r2, r3
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b087      	sub	sp, #28
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3314      	adds	r3, #20
 8006d12:	461a      	mov	r2, r3
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	0e5b      	lsrs	r3, r3, #25
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	4413      	add	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	0d1b      	lsrs	r3, r3, #20
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2107      	movs	r1, #7
 8006d30:	fa01 f303 	lsl.w	r3, r1, r3
 8006d34:	43db      	mvns	r3, r3
 8006d36:	401a      	ands	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	0d1b      	lsrs	r3, r3, #20
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	6879      	ldr	r1, [r7, #4]
 8006d42:	fa01 f303 	lsl.w	r3, r1, r3
 8006d46:	431a      	orrs	r2, r3
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006d4c:	bf00      	nop
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f003 0318 	and.w	r3, r3, #24
 8006d7a:	4908      	ldr	r1, [pc, #32]	; (8006d9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8006d7c:	40d9      	lsrs	r1, r3
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	400b      	ands	r3, r1
 8006d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d86:	431a      	orrs	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	0007ffff 	.word	0x0007ffff

08006da0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	6093      	str	r3, [r2, #8]
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd8:	d101      	bne.n	8006dde <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006dfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006e08:	bf00      	nop
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e28:	d101      	bne.n	8006e2e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e000      	b.n	8006e30 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <LL_ADC_IsEnabled+0x18>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e000      	b.n	8006e56 <LL_ADC_IsEnabled+0x1a>
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b04      	cmp	r3, #4
 8006e74:	d101      	bne.n	8006e7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e000      	b.n	8006e7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d101      	bne.n	8006ea0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
	...

08006eb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006eb0:	b590      	push	{r4, r7, lr}
 8006eb2:	b089      	sub	sp, #36	; 0x24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e136      	b.n	8007138 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fc fad9 	bl	8003490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f7ff ff67 	bl	8006dc4 <LL_ADC_IsDeepPowerDownEnabled>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d004      	beq.n	8006f06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff ff4d 	bl	8006da0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff82 	bl	8006e14 <LL_ADC_IsInternalRegulatorEnabled>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d115      	bne.n	8006f42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7ff ff66 	bl	8006dec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f20:	4b87      	ldr	r3, [pc, #540]	; (8007140 <HAL_ADC_Init+0x290>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	099b      	lsrs	r3, r3, #6
 8006f26:	4a87      	ldr	r2, [pc, #540]	; (8007144 <HAL_ADC_Init+0x294>)
 8006f28:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2c:	099b      	lsrs	r3, r3, #6
 8006f2e:	3301      	adds	r3, #1
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f34:	e002      	b.n	8006f3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f9      	bne.n	8006f36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff ff64 	bl	8006e14 <LL_ADC_IsInternalRegulatorEnabled>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10d      	bne.n	8006f6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f56:	f043 0210 	orr.w	r2, r3, #16
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f62:	f043 0201 	orr.w	r2, r3, #1
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ff75 	bl	8006e62 <LL_ADC_REG_IsConversionOngoing>
 8006f78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f040 80cf 	bne.w	8007126 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f040 80cb 	bne.w	8007126 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006f98:	f043 0202 	orr.w	r2, r3, #2
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff ff49 	bl	8006e3c <LL_ADC_IsEnabled>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d115      	bne.n	8006fdc <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fb0:	4865      	ldr	r0, [pc, #404]	; (8007148 <HAL_ADC_Init+0x298>)
 8006fb2:	f7ff ff43 	bl	8006e3c <LL_ADC_IsEnabled>
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4864      	ldr	r0, [pc, #400]	; (800714c <HAL_ADC_Init+0x29c>)
 8006fba:	f7ff ff3f 	bl	8006e3c <LL_ADC_IsEnabled>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	431c      	orrs	r4, r3
 8006fc2:	4863      	ldr	r0, [pc, #396]	; (8007150 <HAL_ADC_Init+0x2a0>)
 8006fc4:	f7ff ff3a 	bl	8006e3c <LL_ADC_IsEnabled>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	4323      	orrs	r3, r4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d105      	bne.n	8006fdc <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	485f      	ldr	r0, [pc, #380]	; (8007154 <HAL_ADC_Init+0x2a4>)
 8006fd8:	f7ff fdde 	bl	8006b98 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7e5b      	ldrb	r3, [r3, #25]
 8006fe0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006fe6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006fec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006ff2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ffa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d106      	bne.n	8007018 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	3b01      	subs	r3, #1
 8007010:	045b      	lsls	r3, r3, #17
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	4313      	orrs	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701c:	2b00      	cmp	r3, #0
 800701e:	d009      	beq.n	8007034 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007024:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800702e:	69ba      	ldr	r2, [r7, #24]
 8007030:	4313      	orrs	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	4b47      	ldr	r3, [pc, #284]	; (8007158 <HAL_ADC_Init+0x2a8>)
 800703c:	4013      	ands	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6812      	ldr	r2, [r2, #0]
 8007042:	69b9      	ldr	r1, [r7, #24]
 8007044:	430b      	orrs	r3, r1
 8007046:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff ff08 	bl	8006e62 <LL_ADC_REG_IsConversionOngoing>
 8007052:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff ff15 	bl	8006e88 <LL_ADC_INJ_IsConversionOngoing>
 800705e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d13d      	bne.n	80070e2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d13a      	bne.n	80070e2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007070:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007078:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800707a:	4313      	orrs	r3, r2
 800707c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007088:	f023 0302 	bic.w	r3, r3, #2
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	69b9      	ldr	r1, [r7, #24]
 8007092:	430b      	orrs	r3, r1
 8007094:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800709c:	2b01      	cmp	r3, #1
 800709e:	d118      	bne.n	80070d2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80070aa:	f023 0304 	bic.w	r3, r3, #4
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070b6:	4311      	orrs	r1, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070bc:	4311      	orrs	r1, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070c2:	430a      	orrs	r2, r1
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0201 	orr.w	r2, r2, #1
 80070ce:	611a      	str	r2, [r3, #16]
 80070d0:	e007      	b.n	80070e2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f022 0201 	bic.w	r2, r2, #1
 80070e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d10c      	bne.n	8007104 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	f023 010f 	bic.w	r1, r3, #15
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	1e5a      	subs	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
 8007102:	e007      	b.n	8007114 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 020f 	bic.w	r2, r2, #15
 8007112:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	f023 0303 	bic.w	r3, r3, #3
 800711c:	f043 0201 	orr.w	r2, r3, #1
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	655a      	str	r2, [r3, #84]	; 0x54
 8007124:	e007      	b.n	8007136 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f043 0210 	orr.w	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007136:	7ffb      	ldrb	r3, [r7, #31]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3724      	adds	r7, #36	; 0x24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd90      	pop	{r4, r7, pc}
 8007140:	20000000 	.word	0x20000000
 8007144:	053e2d63 	.word	0x053e2d63
 8007148:	50040000 	.word	0x50040000
 800714c:	50040100 	.word	0x50040100
 8007150:	50040200 	.word	0x50040200
 8007154:	50040300 	.word	0x50040300
 8007158:	fff0c007 	.word	0xfff0c007

0800715c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b0b6      	sub	sp, #216	; 0xd8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007176:	2b01      	cmp	r3, #1
 8007178:	d101      	bne.n	800717e <HAL_ADC_ConfigChannel+0x22>
 800717a:	2302      	movs	r3, #2
 800717c:	e3c7      	b.n	800790e <HAL_ADC_ConfigChannel+0x7b2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fe69 	bl	8006e62 <LL_ADC_REG_IsConversionOngoing>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	f040 83a8 	bne.w	80078e8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	2b05      	cmp	r3, #5
 800719e:	d824      	bhi.n	80071ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	3b02      	subs	r3, #2
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d81b      	bhi.n	80071e2 <HAL_ADC_ConfigChannel+0x86>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_ADC_ConfigChannel+0x54>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071c1 	.word	0x080071c1
 80071b4:	080071c9 	.word	0x080071c9
 80071b8:	080071d1 	.word	0x080071d1
 80071bc:	080071d9 	.word	0x080071d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	220c      	movs	r2, #12
 80071c4:	605a      	str	r2, [r3, #4]
          break;
 80071c6:	e011      	b.n	80071ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2212      	movs	r2, #18
 80071cc:	605a      	str	r2, [r3, #4]
          break;
 80071ce:	e00d      	b.n	80071ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	2218      	movs	r2, #24
 80071d4:	605a      	str	r2, [r3, #4]
          break;
 80071d6:	e009      	b.n	80071ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071de:	605a      	str	r2, [r3, #4]
          break;
 80071e0:	e004      	b.n	80071ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2206      	movs	r2, #6
 80071e6:	605a      	str	r2, [r3, #4]
          break;
 80071e8:	e000      	b.n	80071ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80071ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	6859      	ldr	r1, [r3, #4]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	f7ff fd56 	bl	8006caa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff fe2d 	bl	8006e62 <LL_ADC_REG_IsConversionOngoing>
 8007208:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff fe39 	bl	8006e88 <LL_ADC_INJ_IsConversionOngoing>
 8007216:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800721a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800721e:	2b00      	cmp	r3, #0
 8007220:	f040 81a6 	bne.w	8007570 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007224:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 81a1 	bne.w	8007570 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	6819      	ldr	r1, [r3, #0]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	461a      	mov	r2, r3
 800723c:	f7ff fd61 	bl	8006d02 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	695a      	ldr	r2, [r3, #20]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	08db      	lsrs	r3, r3, #3
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	fa02 f303 	lsl.w	r3, r2, r3
 8007256:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b04      	cmp	r3, #4
 8007260:	d00a      	beq.n	8007278 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6919      	ldr	r1, [r3, #16]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007272:	f7ff fcc5 	bl	8006c00 <LL_ADC_SetOffset>
 8007276:	e17b      	b.n	8007570 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2100      	movs	r1, #0
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff fce2 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 8007284:	4603      	mov	r3, r0
 8007286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <HAL_ADC_ConfigChannel+0x148>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2100      	movs	r1, #0
 8007294:	4618      	mov	r0, r3
 8007296:	f7ff fcd7 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 800729a:	4603      	mov	r3, r0
 800729c:	0e9b      	lsrs	r3, r3, #26
 800729e:	f003 021f 	and.w	r2, r3, #31
 80072a2:	e01e      	b.n	80072e2 <HAL_ADC_ConfigChannel+0x186>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fccc 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072ba:	fa93 f3a3 	rbit	r3, r3
 80072be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80072c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80072ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80072d2:	2320      	movs	r3, #32
 80072d4:	e004      	b.n	80072e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80072d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d105      	bne.n	80072fa <HAL_ADC_ConfigChannel+0x19e>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	0e9b      	lsrs	r3, r3, #26
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	e018      	b.n	800732c <HAL_ADC_ConfigChannel+0x1d0>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007302:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007306:	fa93 f3a3 	rbit	r3, r3
 800730a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800730e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007312:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8007316:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800731e:	2320      	movs	r3, #32
 8007320:	e004      	b.n	800732c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8007322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007326:	fab3 f383 	clz	r3, r3
 800732a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800732c:	429a      	cmp	r2, r3
 800732e:	d106      	bne.n	800733e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fc9b 	bl	8006c74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2101      	movs	r1, #1
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fc7f 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 800734a:	4603      	mov	r3, r0
 800734c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10a      	bne.n	800736a <HAL_ADC_ConfigChannel+0x20e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2101      	movs	r1, #1
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fc74 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 8007360:	4603      	mov	r3, r0
 8007362:	0e9b      	lsrs	r3, r3, #26
 8007364:	f003 021f 	and.w	r2, r3, #31
 8007368:	e01e      	b.n	80073a8 <HAL_ADC_ConfigChannel+0x24c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2101      	movs	r1, #1
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fc69 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 8007376:	4603      	mov	r3, r0
 8007378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800737c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007380:	fa93 f3a3 	rbit	r3, r3
 8007384:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8007388:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800738c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8007390:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007394:	2b00      	cmp	r3, #0
 8007396:	d101      	bne.n	800739c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8007398:	2320      	movs	r3, #32
 800739a:	e004      	b.n	80073a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800739c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80073a0:	fab3 f383 	clz	r3, r3
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d105      	bne.n	80073c0 <HAL_ADC_ConfigChannel+0x264>
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	0e9b      	lsrs	r3, r3, #26
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	e018      	b.n	80073f2 <HAL_ADC_ConfigChannel+0x296>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073cc:	fa93 f3a3 	rbit	r3, r3
 80073d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80073d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80073d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80073dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80073e4:	2320      	movs	r3, #32
 80073e6:	e004      	b.n	80073f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80073e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073ec:	fab3 f383 	clz	r3, r3
 80073f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d106      	bne.n	8007404 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2200      	movs	r2, #0
 80073fc:	2101      	movs	r1, #1
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fc38 	bl	8006c74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2102      	movs	r1, #2
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fc1c 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 8007410:	4603      	mov	r3, r0
 8007412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <HAL_ADC_ConfigChannel+0x2d4>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fc11 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 8007426:	4603      	mov	r3, r0
 8007428:	0e9b      	lsrs	r3, r3, #26
 800742a:	f003 021f 	and.w	r2, r3, #31
 800742e:	e01e      	b.n	800746e <HAL_ADC_ConfigChannel+0x312>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2102      	movs	r1, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff fc06 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 800743c:	4603      	mov	r3, r0
 800743e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007446:	fa93 f3a3 	rbit	r3, r3
 800744a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800744e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8007456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800745e:	2320      	movs	r3, #32
 8007460:	e004      	b.n	800746c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8007462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007466:	fab3 f383 	clz	r3, r3
 800746a:	b2db      	uxtb	r3, r3
 800746c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <HAL_ADC_ConfigChannel+0x32a>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	0e9b      	lsrs	r3, r3, #26
 8007480:	f003 031f 	and.w	r3, r3, #31
 8007484:	e016      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x358>
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800748e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007492:	fa93 f3a3 	rbit	r3, r3
 8007496:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8007498:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800749a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800749e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80074a6:	2320      	movs	r3, #32
 80074a8:	e004      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80074aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074ae:	fab3 f383 	clz	r3, r3
 80074b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d106      	bne.n	80074c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2200      	movs	r2, #0
 80074be:	2102      	movs	r1, #2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fbd7 	bl	8006c74 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2103      	movs	r1, #3
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fbbb 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <HAL_ADC_ConfigChannel+0x396>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2103      	movs	r1, #3
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff fbb0 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 80074e8:	4603      	mov	r3, r0
 80074ea:	0e9b      	lsrs	r3, r3, #26
 80074ec:	f003 021f 	and.w	r2, r3, #31
 80074f0:	e017      	b.n	8007522 <HAL_ADC_ConfigChannel+0x3c6>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2103      	movs	r1, #3
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7ff fba5 	bl	8006c48 <LL_ADC_GetOffsetChannel>
 80074fe:	4603      	mov	r3, r0
 8007500:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007504:	fa93 f3a3 	rbit	r3, r3
 8007508:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800750a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800750c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800750e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8007514:	2320      	movs	r3, #32
 8007516:	e003      	b.n	8007520 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8007518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800751a:	fab3 f383 	clz	r3, r3
 800751e:	b2db      	uxtb	r3, r3
 8007520:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <HAL_ADC_ConfigChannel+0x3de>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	0e9b      	lsrs	r3, r3, #26
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	e011      	b.n	800755e <HAL_ADC_ConfigChannel+0x402>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007542:	fa93 f3a3 	rbit	r3, r3
 8007546:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8007548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800754a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800754c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d101      	bne.n	8007556 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8007552:	2320      	movs	r3, #32
 8007554:	e003      	b.n	800755e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8007556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007558:	fab3 f383 	clz	r3, r3
 800755c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800755e:	429a      	cmp	r2, r3
 8007560:	d106      	bne.n	8007570 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	2103      	movs	r1, #3
 800756a:	4618      	mov	r0, r3
 800756c:	f7ff fb82 	bl	8006c74 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fc61 	bl	8006e3c <LL_ADC_IsEnabled>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	f040 813f 	bne.w	8007800 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6819      	ldr	r1, [r3, #0]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	461a      	mov	r2, r3
 8007590:	f7ff fbe2 	bl	8006d58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	4a8e      	ldr	r2, [pc, #568]	; (80077d4 <HAL_ADC_ConfigChannel+0x678>)
 800759a:	4293      	cmp	r3, r2
 800759c:	f040 8130 	bne.w	8007800 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10b      	bne.n	80075c8 <HAL_ADC_ConfigChannel+0x46c>
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	0e9b      	lsrs	r3, r3, #26
 80075b6:	3301      	adds	r3, #1
 80075b8:	f003 031f 	and.w	r3, r3, #31
 80075bc:	2b09      	cmp	r3, #9
 80075be:	bf94      	ite	ls
 80075c0:	2301      	movls	r3, #1
 80075c2:	2300      	movhi	r3, #0
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	e019      	b.n	80075fc <HAL_ADC_ConfigChannel+0x4a0>
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d0:	fa93 f3a3 	rbit	r3, r3
 80075d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80075d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80075da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80075e0:	2320      	movs	r3, #32
 80075e2:	e003      	b.n	80075ec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80075e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075e6:	fab3 f383 	clz	r3, r3
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	3301      	adds	r3, #1
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	2b09      	cmp	r3, #9
 80075f4:	bf94      	ite	ls
 80075f6:	2301      	movls	r3, #1
 80075f8:	2300      	movhi	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d079      	beq.n	80076f4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007608:	2b00      	cmp	r3, #0
 800760a:	d107      	bne.n	800761c <HAL_ADC_ConfigChannel+0x4c0>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	0e9b      	lsrs	r3, r3, #26
 8007612:	3301      	adds	r3, #1
 8007614:	069b      	lsls	r3, r3, #26
 8007616:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800761a:	e015      	b.n	8007648 <HAL_ADC_ConfigChannel+0x4ec>
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007624:	fa93 f3a3 	rbit	r3, r3
 8007628:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800762a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800762c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800762e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8007634:	2320      	movs	r3, #32
 8007636:	e003      	b.n	8007640 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8007638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800763a:	fab3 f383 	clz	r3, r3
 800763e:	b2db      	uxtb	r3, r3
 8007640:	3301      	adds	r3, #1
 8007642:	069b      	lsls	r3, r3, #26
 8007644:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007650:	2b00      	cmp	r3, #0
 8007652:	d109      	bne.n	8007668 <HAL_ADC_ConfigChannel+0x50c>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	0e9b      	lsrs	r3, r3, #26
 800765a:	3301      	adds	r3, #1
 800765c:	f003 031f 	and.w	r3, r3, #31
 8007660:	2101      	movs	r1, #1
 8007662:	fa01 f303 	lsl.w	r3, r1, r3
 8007666:	e017      	b.n	8007698 <HAL_ADC_ConfigChannel+0x53c>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800766e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007670:	fa93 f3a3 	rbit	r3, r3
 8007674:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8007676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007678:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800767a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8007680:	2320      	movs	r3, #32
 8007682:	e003      	b.n	800768c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8007684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007686:	fab3 f383 	clz	r3, r3
 800768a:	b2db      	uxtb	r3, r3
 800768c:	3301      	adds	r3, #1
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	2101      	movs	r1, #1
 8007694:	fa01 f303 	lsl.w	r3, r1, r3
 8007698:	ea42 0103 	orr.w	r1, r2, r3
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <HAL_ADC_ConfigChannel+0x562>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	0e9b      	lsrs	r3, r3, #26
 80076ae:	3301      	adds	r3, #1
 80076b0:	f003 021f 	and.w	r2, r3, #31
 80076b4:	4613      	mov	r3, r2
 80076b6:	005b      	lsls	r3, r3, #1
 80076b8:	4413      	add	r3, r2
 80076ba:	051b      	lsls	r3, r3, #20
 80076bc:	e018      	b.n	80076f0 <HAL_ADC_ConfigChannel+0x594>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	fa93 f3a3 	rbit	r3, r3
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80076cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80076d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80076d6:	2320      	movs	r3, #32
 80076d8:	e003      	b.n	80076e2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80076da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076dc:	fab3 f383 	clz	r3, r3
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	3301      	adds	r3, #1
 80076e4:	f003 021f 	and.w	r2, r3, #31
 80076e8:	4613      	mov	r3, r2
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	4413      	add	r3, r2
 80076ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076f0:	430b      	orrs	r3, r1
 80076f2:	e080      	b.n	80077f6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d107      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x5b4>
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	0e9b      	lsrs	r3, r3, #26
 8007706:	3301      	adds	r3, #1
 8007708:	069b      	lsls	r3, r3, #26
 800770a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800770e:	e015      	b.n	800773c <HAL_ADC_ConfigChannel+0x5e0>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	fa93 f3a3 	rbit	r3, r3
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8007728:	2320      	movs	r3, #32
 800772a:	e003      	b.n	8007734 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	fab3 f383 	clz	r3, r3
 8007732:	b2db      	uxtb	r3, r3
 8007734:	3301      	adds	r3, #1
 8007736:	069b      	lsls	r3, r3, #26
 8007738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007744:	2b00      	cmp	r3, #0
 8007746:	d109      	bne.n	800775c <HAL_ADC_ConfigChannel+0x600>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	0e9b      	lsrs	r3, r3, #26
 800774e:	3301      	adds	r3, #1
 8007750:	f003 031f 	and.w	r3, r3, #31
 8007754:	2101      	movs	r1, #1
 8007756:	fa01 f303 	lsl.w	r3, r1, r3
 800775a:	e017      	b.n	800778c <HAL_ADC_ConfigChannel+0x630>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	fa93 f3a3 	rbit	r3, r3
 8007768:	61fb      	str	r3, [r7, #28]
  return result;
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8007774:	2320      	movs	r3, #32
 8007776:	e003      	b.n	8007780 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	fab3 f383 	clz	r3, r3
 800777e:	b2db      	uxtb	r3, r3
 8007780:	3301      	adds	r3, #1
 8007782:	f003 031f 	and.w	r3, r3, #31
 8007786:	2101      	movs	r1, #1
 8007788:	fa01 f303 	lsl.w	r3, r1, r3
 800778c:	ea42 0103 	orr.w	r1, r2, r3
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10d      	bne.n	80077b8 <HAL_ADC_ConfigChannel+0x65c>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	0e9b      	lsrs	r3, r3, #26
 80077a2:	3301      	adds	r3, #1
 80077a4:	f003 021f 	and.w	r2, r3, #31
 80077a8:	4613      	mov	r3, r2
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	4413      	add	r3, r2
 80077ae:	3b1e      	subs	r3, #30
 80077b0:	051b      	lsls	r3, r3, #20
 80077b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077b6:	e01d      	b.n	80077f4 <HAL_ADC_ConfigChannel+0x698>
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	fa93 f3a3 	rbit	r3, r3
 80077c4:	613b      	str	r3, [r7, #16]
  return result;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d103      	bne.n	80077d8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80077d0:	2320      	movs	r3, #32
 80077d2:	e005      	b.n	80077e0 <HAL_ADC_ConfigChannel+0x684>
 80077d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	fab3 f383 	clz	r3, r3
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	3301      	adds	r3, #1
 80077e2:	f003 021f 	and.w	r2, r3, #31
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	3b1e      	subs	r3, #30
 80077ee:	051b      	lsls	r3, r3, #20
 80077f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077f4:	430b      	orrs	r3, r1
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	6892      	ldr	r2, [r2, #8]
 80077fa:	4619      	mov	r1, r3
 80077fc:	f7ff fa81 	bl	8006d02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	4b44      	ldr	r3, [pc, #272]	; (8007918 <HAL_ADC_ConfigChannel+0x7bc>)
 8007806:	4013      	ands	r3, r2
 8007808:	2b00      	cmp	r3, #0
 800780a:	d07a      	beq.n	8007902 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800780c:	4843      	ldr	r0, [pc, #268]	; (800791c <HAL_ADC_ConfigChannel+0x7c0>)
 800780e:	f7ff f9e9 	bl	8006be4 <LL_ADC_GetCommonPathInternalCh>
 8007812:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a41      	ldr	r2, [pc, #260]	; (8007920 <HAL_ADC_ConfigChannel+0x7c4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d12c      	bne.n	800787a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007820:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d126      	bne.n	800787a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a3c      	ldr	r2, [pc, #240]	; (8007924 <HAL_ADC_ConfigChannel+0x7c8>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d004      	beq.n	8007840 <HAL_ADC_ConfigChannel+0x6e4>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a3b      	ldr	r2, [pc, #236]	; (8007928 <HAL_ADC_ConfigChannel+0x7cc>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d15d      	bne.n	80078fc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007848:	4619      	mov	r1, r3
 800784a:	4834      	ldr	r0, [pc, #208]	; (800791c <HAL_ADC_ConfigChannel+0x7c0>)
 800784c:	f7ff f9b7 	bl	8006bbe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007850:	4b36      	ldr	r3, [pc, #216]	; (800792c <HAL_ADC_ConfigChannel+0x7d0>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	099b      	lsrs	r3, r3, #6
 8007856:	4a36      	ldr	r2, [pc, #216]	; (8007930 <HAL_ADC_ConfigChannel+0x7d4>)
 8007858:	fba2 2303 	umull	r2, r3, r2, r3
 800785c:	099b      	lsrs	r3, r3, #6
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	4613      	mov	r3, r2
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800786a:	e002      	b.n	8007872 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3b01      	subs	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1f9      	bne.n	800786c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007878:	e040      	b.n	80078fc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <HAL_ADC_ConfigChannel+0x7d8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d118      	bne.n	80078b6 <HAL_ADC_ConfigChannel+0x75a>
 8007884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d112      	bne.n	80078b6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a23      	ldr	r2, [pc, #140]	; (8007924 <HAL_ADC_ConfigChannel+0x7c8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d004      	beq.n	80078a4 <HAL_ADC_ConfigChannel+0x748>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a22      	ldr	r2, [pc, #136]	; (8007928 <HAL_ADC_ConfigChannel+0x7cc>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d12d      	bne.n	8007900 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078ac:	4619      	mov	r1, r3
 80078ae:	481b      	ldr	r0, [pc, #108]	; (800791c <HAL_ADC_ConfigChannel+0x7c0>)
 80078b0:	f7ff f985 	bl	8006bbe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80078b4:	e024      	b.n	8007900 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1f      	ldr	r2, [pc, #124]	; (8007938 <HAL_ADC_ConfigChannel+0x7dc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d120      	bne.n	8007902 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80078c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d11a      	bne.n	8007902 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a14      	ldr	r2, [pc, #80]	; (8007924 <HAL_ADC_ConfigChannel+0x7c8>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d115      	bne.n	8007902 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80078da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80078de:	4619      	mov	r1, r3
 80078e0:	480e      	ldr	r0, [pc, #56]	; (800791c <HAL_ADC_ConfigChannel+0x7c0>)
 80078e2:	f7ff f96c 	bl	8006bbe <LL_ADC_SetCommonPathInternalCh>
 80078e6:	e00c      	b.n	8007902 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	f043 0220 	orr.w	r2, r3, #32
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80078fa:	e002      	b.n	8007902 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078fc:	bf00      	nop
 80078fe:	e000      	b.n	8007902 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007900:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800790a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800790e:	4618      	mov	r0, r3
 8007910:	37d8      	adds	r7, #216	; 0xd8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	80080000 	.word	0x80080000
 800791c:	50040300 	.word	0x50040300
 8007920:	c7520000 	.word	0xc7520000
 8007924:	50040000 	.word	0x50040000
 8007928:	50040200 	.word	0x50040200
 800792c:	20000000 	.word	0x20000000
 8007930:	053e2d63 	.word	0x053e2d63
 8007934:	cb840000 	.word	0xcb840000
 8007938:	80000001 	.word	0x80000001

0800793c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e0ed      	b.n	8007b2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fb fe02 	bl	8003564 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007970:	f7ff f8e2 	bl	8006b38 <HAL_GetTick>
 8007974:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007976:	e012      	b.n	800799e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007978:	f7ff f8de 	bl	8006b38 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b0a      	cmp	r3, #10
 8007984:	d90b      	bls.n	800799e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2205      	movs	r2, #5
 8007996:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e0c5      	b.n	8007b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0e5      	beq.n	8007978 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0202 	bic.w	r2, r2, #2
 80079ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079bc:	f7ff f8bc 	bl	8006b38 <HAL_GetTick>
 80079c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80079c2:	e012      	b.n	80079ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80079c4:	f7ff f8b8 	bl	8006b38 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	2b0a      	cmp	r3, #10
 80079d0:	d90b      	bls.n	80079ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2205      	movs	r2, #5
 80079e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e09f      	b.n	8007b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f003 0302 	and.w	r3, r3, #2
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1e5      	bne.n	80079c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	7e1b      	ldrb	r3, [r3, #24]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d108      	bne.n	8007a12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e007      	b.n	8007a22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	7e5b      	ldrb	r3, [r3, #25]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d108      	bne.n	8007a3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e007      	b.n	8007a4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7e9b      	ldrb	r3, [r3, #26]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d108      	bne.n	8007a66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f042 0220 	orr.w	r2, r2, #32
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e007      	b.n	8007a76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0220 	bic.w	r2, r2, #32
 8007a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	7edb      	ldrb	r3, [r3, #27]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d108      	bne.n	8007a90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0210 	bic.w	r2, r2, #16
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	e007      	b.n	8007aa0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0210 	orr.w	r2, r2, #16
 8007a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7f1b      	ldrb	r3, [r3, #28]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d108      	bne.n	8007aba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0208 	orr.w	r2, r2, #8
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e007      	b.n	8007aca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0208 	bic.w	r2, r2, #8
 8007ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	7f5b      	ldrb	r3, [r3, #29]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d108      	bne.n	8007ae4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0204 	orr.w	r2, r2, #4
 8007ae0:	601a      	str	r2, [r3, #0]
 8007ae2:	e007      	b.n	8007af4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0204 	bic.w	r2, r2, #4
 8007af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689a      	ldr	r2, [r3, #8]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	ea42 0103 	orr.w	r1, r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	1e5a      	subs	r2, r3, #1
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <LL_EXTI_EnableIT_0_31+0x20>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	4904      	ldr	r1, [pc, #16]	; (8007b54 <LL_EXTI_EnableIT_0_31+0x20>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	600b      	str	r3, [r1, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40010400 	.word	0x40010400

08007b58 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007b60:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <LL_EXTI_DisableIT_0_31+0x24>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	43db      	mvns	r3, r3
 8007b68:	4904      	ldr	r1, [pc, #16]	; (8007b7c <LL_EXTI_DisableIT_0_31+0x24>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	600b      	str	r3, [r1, #0]
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40010400 	.word	0x40010400

08007b80 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	4904      	ldr	r1, [pc, #16]	; (8007ba0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	604b      	str	r3, [r1, #4]

}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	40010400 	.word	0x40010400

08007ba4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007bac:	4b06      	ldr	r3, [pc, #24]	; (8007bc8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	43db      	mvns	r3, r3
 8007bb4:	4904      	ldr	r1, [pc, #16]	; (8007bc8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	604b      	str	r3, [r1, #4]
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	40010400 	.word	0x40010400

08007bcc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007bd6:	689a      	ldr	r2, [r3, #8]
 8007bd8:	4904      	ldr	r1, [pc, #16]	; (8007bec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	608b      	str	r3, [r1, #8]

}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr
 8007bec:	40010400 	.word	0x40010400

08007bf0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007bf8:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	4904      	ldr	r1, [pc, #16]	; (8007c14 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]

}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	40010400 	.word	0x40010400

08007c18 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	4904      	ldr	r1, [pc, #16]	; (8007c38 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	60cb      	str	r3, [r1, #12]
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	40010400 	.word	0x40010400

08007c3c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007c44:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	43db      	mvns	r3, r3
 8007c4c:	4904      	ldr	r1, [pc, #16]	; (8007c60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c4e:	4013      	ands	r3, r2
 8007c50:	60cb      	str	r3, [r1, #12]
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	40010400 	.word	0x40010400

08007c64 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007c6c:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6153      	str	r3, [r2, #20]
}
 8007c72:	bf00      	nop
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	40010400 	.word	0x40010400

08007c84 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b088      	sub	sp, #32
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e0d1      	b.n	8007e44 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cae:	d102      	bne.n	8007cb6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	77fb      	strb	r3, [r7, #31]
 8007cb4:	e0c6      	b.n	8007e44 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d115      	bne.n	8007cee <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cd0:	4b5f      	ldr	r3, [pc, #380]	; (8007e50 <HAL_COMP_Init+0x1cc>)
 8007cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd4:	4a5e      	ldr	r2, [pc, #376]	; (8007e50 <HAL_COMP_Init+0x1cc>)
 8007cd6:	f043 0301 	orr.w	r3, r3, #1
 8007cda:	6613      	str	r3, [r2, #96]	; 0x60
 8007cdc:	4b5c      	ldr	r3, [pc, #368]	; (8007e50 <HAL_COMP_Init+0x1cc>)
 8007cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	60bb      	str	r3, [r7, #8]
 8007ce6:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7fb fc7f 	bl	80035ec <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69db      	ldr	r3, [r3, #28]
 8007d08:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	4b4b      	ldr	r3, [pc, #300]	; (8007e54 <HAL_COMP_Init+0x1d0>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6812      	ldr	r2, [r2, #0]
 8007d2c:	6979      	ldr	r1, [r7, #20]
 8007d2e:	430b      	orrs	r3, r1
 8007d30:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d3a:	d106      	bne.n	8007d4a <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007d3c:	4b46      	ldr	r3, [pc, #280]	; (8007e58 <HAL_COMP_Init+0x1d4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a45      	ldr	r2, [pc, #276]	; (8007e58 <HAL_COMP_Init+0x1d4>)
 8007d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	e005      	b.n	8007d56 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8007d4a:	4b43      	ldr	r3, [pc, #268]	; (8007e58 <HAL_COMP_Init+0x1d4>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a42      	ldr	r2, [pc, #264]	; (8007e58 <HAL_COMP_Init+0x1d4>)
 8007d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d54:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d016      	beq.n	8007d92 <HAL_COMP_Init+0x10e>
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d113      	bne.n	8007d92 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007d6a:	4b3c      	ldr	r3, [pc, #240]	; (8007e5c <HAL_COMP_Init+0x1d8>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	099b      	lsrs	r3, r3, #6
 8007d70:	4a3b      	ldr	r2, [pc, #236]	; (8007e60 <HAL_COMP_Init+0x1dc>)
 8007d72:	fba2 2303 	umull	r2, r3, r2, r3
 8007d76:	099b      	lsrs	r3, r3, #6
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d84:	e002      	b.n	8007d8c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f9      	bne.n	8007d86 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a33      	ldr	r2, [pc, #204]	; (8007e64 <HAL_COMP_Init+0x1e0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d102      	bne.n	8007da2 <HAL_COMP_Init+0x11e>
 8007d9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007da0:	e001      	b.n	8007da6 <HAL_COMP_Init+0x122>
 8007da2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007da6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d037      	beq.n	8007e24 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	f003 0310 	and.w	r3, r3, #16
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d003      	beq.n	8007dc8 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007dc0:	6938      	ldr	r0, [r7, #16]
 8007dc2:	f7ff ff03 	bl	8007bcc <LL_EXTI_EnableRisingTrig_0_31>
 8007dc6:	e002      	b.n	8007dce <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007dc8:	6938      	ldr	r0, [r7, #16]
 8007dca:	f7ff ff11 	bl	8007bf0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8007dda:	6938      	ldr	r0, [r7, #16]
 8007ddc:	f7ff ff1c 	bl	8007c18 <LL_EXTI_EnableFallingTrig_0_31>
 8007de0:	e002      	b.n	8007de8 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007de2:	6938      	ldr	r0, [r7, #16]
 8007de4:	f7ff ff2a 	bl	8007c3c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007de8:	6938      	ldr	r0, [r7, #16]
 8007dea:	f7ff ff3b 	bl	8007c64 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8007dfa:	6938      	ldr	r0, [r7, #16]
 8007dfc:	f7ff fec0 	bl	8007b80 <LL_EXTI_EnableEvent_0_31>
 8007e00:	e002      	b.n	8007e08 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007e02:	6938      	ldr	r0, [r7, #16]
 8007e04:	f7ff fece 	bl	8007ba4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007e14:	6938      	ldr	r0, [r7, #16]
 8007e16:	f7ff fe8d 	bl	8007b34 <LL_EXTI_EnableIT_0_31>
 8007e1a:	e009      	b.n	8007e30 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007e1c:	6938      	ldr	r0, [r7, #16]
 8007e1e:	f7ff fe9b 	bl	8007b58 <LL_EXTI_DisableIT_0_31>
 8007e22:	e005      	b.n	8007e30 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007e24:	6938      	ldr	r0, [r7, #16]
 8007e26:	f7ff febd 	bl	8007ba4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8007e2a:	6938      	ldr	r0, [r7, #16]
 8007e2c:	f7ff fe94 	bl	8007b58 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3720      	adds	r7, #32
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40021000 	.word	0x40021000
 8007e54:	ff207d03 	.word	0xff207d03
 8007e58:	40010204 	.word	0x40010204
 8007e5c:	20000000 	.word	0x20000000
 8007e60:	053e2d63 	.word	0x053e2d63
 8007e64:	40010200 	.word	0x40010200

08007e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <__NVIC_SetPriorityGrouping+0x44>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e84:	4013      	ands	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e9a:	4a04      	ldr	r2, [pc, #16]	; (8007eac <__NVIC_SetPriorityGrouping+0x44>)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	60d3      	str	r3, [r2, #12]
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	e000ed00 	.word	0xe000ed00

08007eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007eb4:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	0a1b      	lsrs	r3, r3, #8
 8007eba:	f003 0307 	and.w	r3, r3, #7
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	e000ed00 	.word	0xe000ed00

08007ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	db0b      	blt.n	8007ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	f003 021f 	and.w	r2, r3, #31
 8007ee4:	4907      	ldr	r1, [pc, #28]	; (8007f04 <__NVIC_EnableIRQ+0x38>)
 8007ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eea:	095b      	lsrs	r3, r3, #5
 8007eec:	2001      	movs	r0, #1
 8007eee:	fa00 f202 	lsl.w	r2, r0, r2
 8007ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	e000e100 	.word	0xe000e100

08007f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	6039      	str	r1, [r7, #0]
 8007f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	db0a      	blt.n	8007f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	490c      	ldr	r1, [pc, #48]	; (8007f54 <__NVIC_SetPriority+0x4c>)
 8007f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f26:	0112      	lsls	r2, r2, #4
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f30:	e00a      	b.n	8007f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	4908      	ldr	r1, [pc, #32]	; (8007f58 <__NVIC_SetPriority+0x50>)
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	3b04      	subs	r3, #4
 8007f40:	0112      	lsls	r2, r2, #4
 8007f42:	b2d2      	uxtb	r2, r2
 8007f44:	440b      	add	r3, r1
 8007f46:	761a      	strb	r2, [r3, #24]
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	e000e100 	.word	0xe000e100
 8007f58:	e000ed00 	.word	0xe000ed00

08007f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b089      	sub	sp, #36	; 0x24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	f1c3 0307 	rsb	r3, r3, #7
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	bf28      	it	cs
 8007f7a:	2304      	movcs	r3, #4
 8007f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	3304      	adds	r3, #4
 8007f82:	2b06      	cmp	r3, #6
 8007f84:	d902      	bls.n	8007f8c <NVIC_EncodePriority+0x30>
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	3b03      	subs	r3, #3
 8007f8a:	e000      	b.n	8007f8e <NVIC_EncodePriority+0x32>
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f90:	f04f 32ff 	mov.w	r2, #4294967295
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	43da      	mvns	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	401a      	ands	r2, r3
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	fa01 f303 	lsl.w	r3, r1, r3
 8007fae:	43d9      	mvns	r1, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fb4:	4313      	orrs	r3, r2
         );
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3724      	adds	r7, #36	; 0x24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fd4:	d301      	bcc.n	8007fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e00f      	b.n	8007ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <SysTick_Config+0x40>)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fe2:	210f      	movs	r1, #15
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	f7ff ff8e 	bl	8007f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fec:	4b05      	ldr	r3, [pc, #20]	; (8008004 <SysTick_Config+0x40>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <SysTick_Config+0x40>)
 8007ff4:	2207      	movs	r2, #7
 8007ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	e000e010 	.word	0xe000e010

08008008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff ff29 	bl	8007e68 <__NVIC_SetPriorityGrouping>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b086      	sub	sp, #24
 8008022:	af00      	add	r7, sp, #0
 8008024:	4603      	mov	r3, r0
 8008026:	60b9      	str	r1, [r7, #8]
 8008028:	607a      	str	r2, [r7, #4]
 800802a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800802c:	2300      	movs	r3, #0
 800802e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008030:	f7ff ff3e 	bl	8007eb0 <__NVIC_GetPriorityGrouping>
 8008034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	6978      	ldr	r0, [r7, #20]
 800803c:	f7ff ff8e 	bl	8007f5c <NVIC_EncodePriority>
 8008040:	4602      	mov	r2, r0
 8008042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008046:	4611      	mov	r1, r2
 8008048:	4618      	mov	r0, r3
 800804a:	f7ff ff5d 	bl	8007f08 <__NVIC_SetPriority>
}
 800804e:	bf00      	nop
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	4603      	mov	r3, r0
 800805e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008064:	4618      	mov	r0, r3
 8008066:	f7ff ff31 	bl	8007ecc <__NVIC_EnableIRQ>
}
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7ff ffa2 	bl	8007fc4 <SysTick_Config>
 8008080:	4603      	mov	r3, r0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d008      	beq.n	80080b4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2204      	movs	r2, #4
 80080a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e022      	b.n	80080fa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 020e 	bic.w	r2, r2, #14
 80080c2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d8:	f003 021c 	and.w	r2, r3, #28
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	2101      	movs	r1, #1
 80080e2:	fa01 f202 	lsl.w	r2, r1, r2
 80080e6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b084      	sub	sp, #16
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d005      	beq.n	800812a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2204      	movs	r2, #4
 8008122:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	73fb      	strb	r3, [r7, #15]
 8008128:	e029      	b.n	800817e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f022 020e 	bic.w	r2, r2, #14
 8008138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814e:	f003 021c 	and.w	r2, r3, #28
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	2101      	movs	r1, #1
 8008158:	fa01 f202 	lsl.w	r2, r1, r2
 800815c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
    }
  }
  return status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008188:	b480      	push	{r7}
 800818a:	b087      	sub	sp, #28
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008196:	e17f      	b.n	8008498 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	2101      	movs	r1, #1
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	fa01 f303 	lsl.w	r3, r1, r3
 80081a4:	4013      	ands	r3, r2
 80081a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8171 	beq.w	8008492 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d005      	beq.n	80081c8 <HAL_GPIO_Init+0x40>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f003 0303 	and.w	r3, r3, #3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d130      	bne.n	800822a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	2203      	movs	r2, #3
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	43db      	mvns	r3, r3
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	4013      	ands	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	005b      	lsls	r3, r3, #1
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081fe:	2201      	movs	r2, #1
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	fa02 f303 	lsl.w	r3, r2, r3
 8008206:	43db      	mvns	r3, r3
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4013      	ands	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f003 0201 	and.w	r2, r3, #1
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	fa02 f303 	lsl.w	r3, r2, r3
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	2b03      	cmp	r3, #3
 8008234:	d118      	bne.n	8008268 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800823c:	2201      	movs	r2, #1
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	fa02 f303 	lsl.w	r3, r2, r3
 8008244:	43db      	mvns	r3, r3
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4013      	ands	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	08db      	lsrs	r3, r3, #3
 8008252:	f003 0201 	and.w	r2, r3, #1
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	fa02 f303 	lsl.w	r3, r2, r3
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	f003 0303 	and.w	r3, r3, #3
 8008270:	2b03      	cmp	r3, #3
 8008272:	d017      	beq.n	80082a4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	2203      	movs	r2, #3
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	43db      	mvns	r3, r3
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	4013      	ands	r3, r2
 800828a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	689a      	ldr	r2, [r3, #8]
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	005b      	lsls	r3, r3, #1
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	d123      	bne.n	80082f8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	08da      	lsrs	r2, r3, #3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3208      	adds	r2, #8
 80082b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	220f      	movs	r2, #15
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	43db      	mvns	r3, r3
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	4013      	ands	r3, r2
 80082d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	691a      	ldr	r2, [r3, #16]
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f003 0307 	and.w	r3, r3, #7
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	08da      	lsrs	r2, r3, #3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3208      	adds	r2, #8
 80082f2:	6939      	ldr	r1, [r7, #16]
 80082f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	2203      	movs	r2, #3
 8008304:	fa02 f303 	lsl.w	r3, r2, r3
 8008308:	43db      	mvns	r3, r3
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4013      	ands	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f003 0203 	and.w	r2, r3, #3
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	fa02 f303 	lsl.w	r3, r2, r3
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	693a      	ldr	r2, [r7, #16]
 800832a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 80ac 	beq.w	8008492 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800833a:	4b5f      	ldr	r3, [pc, #380]	; (80084b8 <HAL_GPIO_Init+0x330>)
 800833c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833e:	4a5e      	ldr	r2, [pc, #376]	; (80084b8 <HAL_GPIO_Init+0x330>)
 8008340:	f043 0301 	orr.w	r3, r3, #1
 8008344:	6613      	str	r3, [r2, #96]	; 0x60
 8008346:	4b5c      	ldr	r3, [pc, #368]	; (80084b8 <HAL_GPIO_Init+0x330>)
 8008348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834a:	f003 0301 	and.w	r3, r3, #1
 800834e:	60bb      	str	r3, [r7, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008352:	4a5a      	ldr	r2, [pc, #360]	; (80084bc <HAL_GPIO_Init+0x334>)
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	089b      	lsrs	r3, r3, #2
 8008358:	3302      	adds	r3, #2
 800835a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800835e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	220f      	movs	r2, #15
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	43db      	mvns	r3, r3
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	4013      	ands	r3, r2
 8008374:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800837c:	d025      	beq.n	80083ca <HAL_GPIO_Init+0x242>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a4f      	ldr	r2, [pc, #316]	; (80084c0 <HAL_GPIO_Init+0x338>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d01f      	beq.n	80083c6 <HAL_GPIO_Init+0x23e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a4e      	ldr	r2, [pc, #312]	; (80084c4 <HAL_GPIO_Init+0x33c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d019      	beq.n	80083c2 <HAL_GPIO_Init+0x23a>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a4d      	ldr	r2, [pc, #308]	; (80084c8 <HAL_GPIO_Init+0x340>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_GPIO_Init+0x236>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a4c      	ldr	r2, [pc, #304]	; (80084cc <HAL_GPIO_Init+0x344>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00d      	beq.n	80083ba <HAL_GPIO_Init+0x232>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a4b      	ldr	r2, [pc, #300]	; (80084d0 <HAL_GPIO_Init+0x348>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <HAL_GPIO_Init+0x22e>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a4a      	ldr	r2, [pc, #296]	; (80084d4 <HAL_GPIO_Init+0x34c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d101      	bne.n	80083b2 <HAL_GPIO_Init+0x22a>
 80083ae:	2306      	movs	r3, #6
 80083b0:	e00c      	b.n	80083cc <HAL_GPIO_Init+0x244>
 80083b2:	2307      	movs	r3, #7
 80083b4:	e00a      	b.n	80083cc <HAL_GPIO_Init+0x244>
 80083b6:	2305      	movs	r3, #5
 80083b8:	e008      	b.n	80083cc <HAL_GPIO_Init+0x244>
 80083ba:	2304      	movs	r3, #4
 80083bc:	e006      	b.n	80083cc <HAL_GPIO_Init+0x244>
 80083be:	2303      	movs	r3, #3
 80083c0:	e004      	b.n	80083cc <HAL_GPIO_Init+0x244>
 80083c2:	2302      	movs	r3, #2
 80083c4:	e002      	b.n	80083cc <HAL_GPIO_Init+0x244>
 80083c6:	2301      	movs	r3, #1
 80083c8:	e000      	b.n	80083cc <HAL_GPIO_Init+0x244>
 80083ca:	2300      	movs	r3, #0
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	f002 0203 	and.w	r2, r2, #3
 80083d2:	0092      	lsls	r2, r2, #2
 80083d4:	4093      	lsls	r3, r2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80083dc:	4937      	ldr	r1, [pc, #220]	; (80084bc <HAL_GPIO_Init+0x334>)
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	089b      	lsrs	r3, r3, #2
 80083e2:	3302      	adds	r3, #2
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083ea:	4b3b      	ldr	r3, [pc, #236]	; (80084d8 <HAL_GPIO_Init+0x350>)
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	43db      	mvns	r3, r3
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4013      	ands	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	4313      	orrs	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800840e:	4a32      	ldr	r2, [pc, #200]	; (80084d8 <HAL_GPIO_Init+0x350>)
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008414:	4b30      	ldr	r3, [pc, #192]	; (80084d8 <HAL_GPIO_Init+0x350>)
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	43db      	mvns	r3, r3
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	4013      	ands	r3, r2
 8008422:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4313      	orrs	r3, r2
 8008436:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008438:	4a27      	ldr	r2, [pc, #156]	; (80084d8 <HAL_GPIO_Init+0x350>)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800843e:	4b26      	ldr	r3, [pc, #152]	; (80084d8 <HAL_GPIO_Init+0x350>)
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	43db      	mvns	r3, r3
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4013      	ands	r3, r2
 800844c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d003      	beq.n	8008462 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008462:	4a1d      	ldr	r2, [pc, #116]	; (80084d8 <HAL_GPIO_Init+0x350>)
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008468:	4b1b      	ldr	r3, [pc, #108]	; (80084d8 <HAL_GPIO_Init+0x350>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	43db      	mvns	r3, r3
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4013      	ands	r3, r2
 8008476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4313      	orrs	r3, r2
 800848a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800848c:	4a12      	ldr	r2, [pc, #72]	; (80084d8 <HAL_GPIO_Init+0x350>)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	3301      	adds	r3, #1
 8008496:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	fa22 f303 	lsr.w	r3, r2, r3
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f47f ae78 	bne.w	8008198 <HAL_GPIO_Init+0x10>
  }
}
 80084a8:	bf00      	nop
 80084aa:	bf00      	nop
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40021000 	.word	0x40021000
 80084bc:	40010000 	.word	0x40010000
 80084c0:	48000400 	.word	0x48000400
 80084c4:	48000800 	.word	0x48000800
 80084c8:	48000c00 	.word	0x48000c00
 80084cc:	48001000 	.word	0x48001000
 80084d0:	48001400 	.word	0x48001400
 80084d4:	48001800 	.word	0x48001800
 80084d8:	40010400 	.word	0x40010400

080084dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80084e6:	2300      	movs	r3, #0
 80084e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80084ea:	e0cd      	b.n	8008688 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80084ec:	2201      	movs	r2, #1
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	fa02 f303 	lsl.w	r3, r2, r3
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	4013      	ands	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80c0 	beq.w	8008682 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008502:	4a68      	ldr	r2, [pc, #416]	; (80086a4 <HAL_GPIO_DeInit+0x1c8>)
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	089b      	lsrs	r3, r3, #2
 8008508:	3302      	adds	r3, #2
 800850a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800850e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	220f      	movs	r2, #15
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4013      	ands	r3, r2
 8008522:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800852a:	d025      	beq.n	8008578 <HAL_GPIO_DeInit+0x9c>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a5e      	ldr	r2, [pc, #376]	; (80086a8 <HAL_GPIO_DeInit+0x1cc>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d01f      	beq.n	8008574 <HAL_GPIO_DeInit+0x98>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a5d      	ldr	r2, [pc, #372]	; (80086ac <HAL_GPIO_DeInit+0x1d0>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d019      	beq.n	8008570 <HAL_GPIO_DeInit+0x94>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a5c      	ldr	r2, [pc, #368]	; (80086b0 <HAL_GPIO_DeInit+0x1d4>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d013      	beq.n	800856c <HAL_GPIO_DeInit+0x90>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a5b      	ldr	r2, [pc, #364]	; (80086b4 <HAL_GPIO_DeInit+0x1d8>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00d      	beq.n	8008568 <HAL_GPIO_DeInit+0x8c>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a5a      	ldr	r2, [pc, #360]	; (80086b8 <HAL_GPIO_DeInit+0x1dc>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d007      	beq.n	8008564 <HAL_GPIO_DeInit+0x88>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a59      	ldr	r2, [pc, #356]	; (80086bc <HAL_GPIO_DeInit+0x1e0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d101      	bne.n	8008560 <HAL_GPIO_DeInit+0x84>
 800855c:	2306      	movs	r3, #6
 800855e:	e00c      	b.n	800857a <HAL_GPIO_DeInit+0x9e>
 8008560:	2307      	movs	r3, #7
 8008562:	e00a      	b.n	800857a <HAL_GPIO_DeInit+0x9e>
 8008564:	2305      	movs	r3, #5
 8008566:	e008      	b.n	800857a <HAL_GPIO_DeInit+0x9e>
 8008568:	2304      	movs	r3, #4
 800856a:	e006      	b.n	800857a <HAL_GPIO_DeInit+0x9e>
 800856c:	2303      	movs	r3, #3
 800856e:	e004      	b.n	800857a <HAL_GPIO_DeInit+0x9e>
 8008570:	2302      	movs	r3, #2
 8008572:	e002      	b.n	800857a <HAL_GPIO_DeInit+0x9e>
 8008574:	2301      	movs	r3, #1
 8008576:	e000      	b.n	800857a <HAL_GPIO_DeInit+0x9e>
 8008578:	2300      	movs	r3, #0
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	f002 0203 	and.w	r2, r2, #3
 8008580:	0092      	lsls	r2, r2, #2
 8008582:	4093      	lsls	r3, r2
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	429a      	cmp	r2, r3
 8008588:	d132      	bne.n	80085f0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800858a:	4b4d      	ldr	r3, [pc, #308]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	43db      	mvns	r3, r3
 8008592:	494b      	ldr	r1, [pc, #300]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 8008594:	4013      	ands	r3, r2
 8008596:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8008598:	4b49      	ldr	r3, [pc, #292]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	43db      	mvns	r3, r3
 80085a0:	4947      	ldr	r1, [pc, #284]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 80085a2:	4013      	ands	r3, r2
 80085a4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80085a6:	4b46      	ldr	r3, [pc, #280]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 80085a8:	68da      	ldr	r2, [r3, #12]
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	43db      	mvns	r3, r3
 80085ae:	4944      	ldr	r1, [pc, #272]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 80085b0:	4013      	ands	r3, r2
 80085b2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80085b4:	4b42      	ldr	r3, [pc, #264]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 80085b6:	689a      	ldr	r2, [r3, #8]
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	43db      	mvns	r3, r3
 80085bc:	4940      	ldr	r1, [pc, #256]	; (80086c0 <HAL_GPIO_DeInit+0x1e4>)
 80085be:	4013      	ands	r3, r2
 80085c0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	220f      	movs	r2, #15
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80085d2:	4a34      	ldr	r2, [pc, #208]	; (80086a4 <HAL_GPIO_DeInit+0x1c8>)
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	089b      	lsrs	r3, r3, #2
 80085d8:	3302      	adds	r3, #2
 80085da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	43da      	mvns	r2, r3
 80085e2:	4830      	ldr	r0, [pc, #192]	; (80086a4 <HAL_GPIO_DeInit+0x1c8>)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	089b      	lsrs	r3, r3, #2
 80085e8:	400a      	ands	r2, r1
 80085ea:	3302      	adds	r3, #2
 80085ec:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	2103      	movs	r1, #3
 80085fa:	fa01 f303 	lsl.w	r3, r1, r3
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	08da      	lsrs	r2, r3, #3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3208      	adds	r2, #8
 800860c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	f003 0307 	and.w	r3, r3, #7
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	220f      	movs	r2, #15
 800861a:	fa02 f303 	lsl.w	r3, r2, r3
 800861e:	43db      	mvns	r3, r3
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	08d2      	lsrs	r2, r2, #3
 8008624:	4019      	ands	r1, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3208      	adds	r2, #8
 800862a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	2103      	movs	r1, #3
 8008638:	fa01 f303 	lsl.w	r3, r1, r3
 800863c:	43db      	mvns	r3, r3
 800863e:	401a      	ands	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	2101      	movs	r1, #1
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	fa01 f303 	lsl.w	r3, r1, r3
 8008650:	43db      	mvns	r3, r3
 8008652:	401a      	ands	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68da      	ldr	r2, [r3, #12]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	2103      	movs	r1, #3
 8008662:	fa01 f303 	lsl.w	r3, r1, r3
 8008666:	43db      	mvns	r3, r3
 8008668:	401a      	ands	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008672:	2101      	movs	r1, #1
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	fa01 f303 	lsl.w	r3, r1, r3
 800867a:	43db      	mvns	r3, r3
 800867c:	401a      	ands	r2, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	3301      	adds	r3, #1
 8008686:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	fa22 f303 	lsr.w	r3, r2, r3
 8008690:	2b00      	cmp	r3, #0
 8008692:	f47f af2b 	bne.w	80084ec <HAL_GPIO_DeInit+0x10>
  }
}
 8008696:	bf00      	nop
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40010000 	.word	0x40010000
 80086a8:	48000400 	.word	0x48000400
 80086ac:	48000800 	.word	0x48000800
 80086b0:	48000c00 	.word	0x48000c00
 80086b4:	48001000 	.word	0x48001000
 80086b8:	48001400 	.word	0x48001400
 80086bc:	48001800 	.word	0x48001800
 80086c0:	40010400 	.word	0x40010400

080086c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	807b      	strh	r3, [r7, #2]
 80086d0:	4613      	mov	r3, r2
 80086d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80086d4:	787b      	ldrb	r3, [r7, #1]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086da:	887a      	ldrh	r2, [r7, #2]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80086e0:	e002      	b.n	80086e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80086e8:	bf00      	nop
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	e081      	b.n	800880a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d106      	bne.n	8008720 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7fa ff9a 	bl	8003654 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2224      	movs	r2, #36	; 0x24
 8008724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0201 	bic.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008744:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008754:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d107      	bne.n	800876e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800876a:	609a      	str	r2, [r3, #8]
 800876c:	e006      	b.n	800877c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800877a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d104      	bne.n	800878e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800878c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6812      	ldr	r2, [r2, #0]
 8008798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800879c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	691a      	ldr	r2, [r3, #16]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	430a      	orrs	r2, r1
 80087ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	69d9      	ldr	r1, [r3, #28]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1a      	ldr	r2, [r3, #32]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0201 	orr.w	r2, r2, #1
 80087ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e021      	b.n	8008868 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2224      	movs	r2, #36	; 0x24
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0201 	bic.w	r2, r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7fa ff67 	bl	8003710 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af02      	add	r7, sp, #8
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	461a      	mov	r2, r3
 800887e:	4603      	mov	r3, r0
 8008880:	817b      	strh	r3, [r7, #10]
 8008882:	460b      	mov	r3, r1
 8008884:	813b      	strh	r3, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b20      	cmp	r3, #32
 8008894:	f040 80f9 	bne.w	8008a8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <HAL_I2C_Mem_Write+0x34>
 800889e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e0ed      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_I2C_Mem_Write+0x4e>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e0e6      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80088c6:	f7fe f937 	bl	8006b38 <HAL_GetTick>
 80088ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	2319      	movs	r3, #25
 80088d2:	2201      	movs	r2, #1
 80088d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fadd 	bl	8008e98 <I2C_WaitOnFlagUntilTimeout>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e0d1      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2221      	movs	r2, #33	; 0x21
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2240      	movs	r2, #64	; 0x40
 80088f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a3a      	ldr	r2, [r7, #32]
 8008902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008910:	88f8      	ldrh	r0, [r7, #6]
 8008912:	893a      	ldrh	r2, [r7, #8]
 8008914:	8979      	ldrh	r1, [r7, #10]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	4603      	mov	r3, r0
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f000 f9ed 	bl	8008d00 <I2C_RequestMemoryWrite>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e0a9      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800893c:	b29b      	uxth	r3, r3
 800893e:	2bff      	cmp	r3, #255	; 0xff
 8008940:	d90e      	bls.n	8008960 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	22ff      	movs	r2, #255	; 0xff
 8008946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800894c:	b2da      	uxtb	r2, r3
 800894e:	8979      	ldrh	r1, [r7, #10]
 8008950:	2300      	movs	r3, #0
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 fc45 	bl	80091e8 <I2C_TransferConfig>
 800895e:	e00f      	b.n	8008980 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800896e:	b2da      	uxtb	r2, r3
 8008970:	8979      	ldrh	r1, [r7, #10]
 8008972:	2300      	movs	r3, #0
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fc34 	bl	80091e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fac7 	bl	8008f18 <I2C_WaitOnTXISFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e07b      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008998:	781a      	ldrb	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	3b01      	subs	r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089bc:	3b01      	subs	r3, #1
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d034      	beq.n	8008a38 <HAL_I2C_Mem_Write+0x1c8>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d130      	bne.n	8008a38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089dc:	2200      	movs	r2, #0
 80089de:	2180      	movs	r1, #128	; 0x80
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 fa59 	bl	8008e98 <I2C_WaitOnFlagUntilTimeout>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e04d      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	2bff      	cmp	r3, #255	; 0xff
 80089f8:	d90e      	bls.n	8008a18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	22ff      	movs	r2, #255	; 0xff
 80089fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	8979      	ldrh	r1, [r7, #10]
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f000 fbe9 	bl	80091e8 <I2C_TransferConfig>
 8008a16:	e00f      	b.n	8008a38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	8979      	ldrh	r1, [r7, #10]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 fbd8 	bl	80091e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d19e      	bne.n	8008980 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 faa6 	bl	8008f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	e01a      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2220      	movs	r2, #32
 8008a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6859      	ldr	r1, [r3, #4]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <HAL_I2C_Mem_Write+0x224>)
 8008a6a:	400b      	ands	r3, r1
 8008a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e000      	b.n	8008a8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008a8a:	2302      	movs	r3, #2
  }
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	fe00e800 	.word	0xfe00e800

08008a98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af02      	add	r7, sp, #8
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	4608      	mov	r0, r1
 8008aa2:	4611      	mov	r1, r2
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	817b      	strh	r3, [r7, #10]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	813b      	strh	r3, [r7, #8]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	f040 80fd 	bne.w	8008cba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <HAL_I2C_Mem_Read+0x34>
 8008ac6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d105      	bne.n	8008ad8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ad2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0f1      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d101      	bne.n	8008ae6 <HAL_I2C_Mem_Read+0x4e>
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	e0ea      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008aee:	f7fe f823 	bl	8006b38 <HAL_GetTick>
 8008af2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	2319      	movs	r3, #25
 8008afa:	2201      	movs	r2, #1
 8008afc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b00:	68f8      	ldr	r0, [r7, #12]
 8008b02:	f000 f9c9 	bl	8008e98 <I2C_WaitOnFlagUntilTimeout>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e0d5      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2222      	movs	r2, #34	; 0x22
 8008b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2240      	movs	r2, #64	; 0x40
 8008b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6a3a      	ldr	r2, [r7, #32]
 8008b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008b38:	88f8      	ldrh	r0, [r7, #6]
 8008b3a:	893a      	ldrh	r2, [r7, #8]
 8008b3c:	8979      	ldrh	r1, [r7, #10]
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	4603      	mov	r3, r0
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f000 f92d 	bl	8008da8 <I2C_RequestMemoryRead>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d005      	beq.n	8008b60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e0ad      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	2bff      	cmp	r3, #255	; 0xff
 8008b68:	d90e      	bls.n	8008b88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	22ff      	movs	r2, #255	; 0xff
 8008b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	8979      	ldrh	r1, [r7, #10]
 8008b78:	4b52      	ldr	r3, [pc, #328]	; (8008cc4 <HAL_I2C_Mem_Read+0x22c>)
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fb31 	bl	80091e8 <I2C_TransferConfig>
 8008b86:	e00f      	b.n	8008ba8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b96:	b2da      	uxtb	r2, r3
 8008b98:	8979      	ldrh	r1, [r7, #10]
 8008b9a:	4b4a      	ldr	r3, [pc, #296]	; (8008cc4 <HAL_I2C_Mem_Read+0x22c>)
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	f000 fb20 	bl	80091e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bae:	2200      	movs	r2, #0
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 f970 	bl	8008e98 <I2C_WaitOnFlagUntilTimeout>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e07c      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bcc:	b2d2      	uxtb	r2, r2
 8008bce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bde:	3b01      	subs	r3, #1
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d034      	beq.n	8008c68 <HAL_I2C_Mem_Read+0x1d0>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d130      	bne.n	8008c68 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2180      	movs	r1, #128	; 0x80
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f941 	bl	8008e98 <I2C_WaitOnFlagUntilTimeout>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e04d      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2bff      	cmp	r3, #255	; 0xff
 8008c28:	d90e      	bls.n	8008c48 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	22ff      	movs	r2, #255	; 0xff
 8008c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	8979      	ldrh	r1, [r7, #10]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f000 fad1 	bl	80091e8 <I2C_TransferConfig>
 8008c46:	e00f      	b.n	8008c68 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	8979      	ldrh	r1, [r7, #10]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 fac0 	bl	80091e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d19a      	bne.n	8008ba8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c72:	697a      	ldr	r2, [r7, #20]
 8008c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f000 f98e 	bl	8008f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e01a      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2220      	movs	r2, #32
 8008c8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6859      	ldr	r1, [r3, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <HAL_I2C_Mem_Read+0x230>)
 8008c9a:	400b      	ands	r3, r1
 8008c9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e000      	b.n	8008cbc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008cba:	2302      	movs	r3, #2
  }
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	80002400 	.word	0x80002400
 8008cc8:	fe00e800 	.word	0xfe00e800

08008ccc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cda:	b2db      	uxtb	r3, r3
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	4608      	mov	r0, r1
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	4603      	mov	r3, r0
 8008d10:	817b      	strh	r3, [r7, #10]
 8008d12:	460b      	mov	r3, r1
 8008d14:	813b      	strh	r3, [r7, #8]
 8008d16:	4613      	mov	r3, r2
 8008d18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008d1a:	88fb      	ldrh	r3, [r7, #6]
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	8979      	ldrh	r1, [r7, #10]
 8008d20:	4b20      	ldr	r3, [pc, #128]	; (8008da4 <I2C_RequestMemoryWrite+0xa4>)
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d28:	68f8      	ldr	r0, [r7, #12]
 8008d2a:	f000 fa5d 	bl	80091e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d2e:	69fa      	ldr	r2, [r7, #28]
 8008d30:	69b9      	ldr	r1, [r7, #24]
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f000 f8f0 	bl	8008f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d001      	beq.n	8008d42 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e02c      	b.n	8008d9c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d105      	bne.n	8008d54 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d48:	893b      	ldrh	r3, [r7, #8]
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	629a      	str	r2, [r3, #40]	; 0x28
 8008d52:	e015      	b.n	8008d80 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008d54:	893b      	ldrh	r3, [r7, #8]
 8008d56:	0a1b      	lsrs	r3, r3, #8
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	69b9      	ldr	r1, [r7, #24]
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f8d6 	bl	8008f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e012      	b.n	8008d9c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008d76:	893b      	ldrh	r3, [r7, #8]
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	2200      	movs	r2, #0
 8008d88:	2180      	movs	r1, #128	; 0x80
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f884 	bl	8008e98 <I2C_WaitOnFlagUntilTimeout>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e000      	b.n	8008d9c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	80002000 	.word	0x80002000

08008da8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af02      	add	r7, sp, #8
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	4608      	mov	r0, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	461a      	mov	r2, r3
 8008db6:	4603      	mov	r3, r0
 8008db8:	817b      	strh	r3, [r7, #10]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	813b      	strh	r3, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	8979      	ldrh	r1, [r7, #10]
 8008dc8:	4b20      	ldr	r3, [pc, #128]	; (8008e4c <I2C_RequestMemoryRead+0xa4>)
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 fa0a 	bl	80091e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	69b9      	ldr	r1, [r7, #24]
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f89d 	bl	8008f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e02c      	b.n	8008e42 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008de8:	88fb      	ldrh	r3, [r7, #6]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d105      	bne.n	8008dfa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008dee:	893b      	ldrh	r3, [r7, #8]
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	629a      	str	r2, [r3, #40]	; 0x28
 8008df8:	e015      	b.n	8008e26 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008dfa:	893b      	ldrh	r3, [r7, #8]
 8008dfc:	0a1b      	lsrs	r3, r3, #8
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	69b9      	ldr	r1, [r7, #24]
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 f883 	bl	8008f18 <I2C_WaitOnTXISFlagUntilTimeout>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e012      	b.n	8008e42 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008e1c:	893b      	ldrh	r3, [r7, #8]
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2140      	movs	r1, #64	; 0x40
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f000 f831 	bl	8008e98 <I2C_WaitOnFlagUntilTimeout>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e000      	b.n	8008e42 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	80002000 	.word	0x80002000

08008e50 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b02      	cmp	r3, #2
 8008e64:	d103      	bne.n	8008e6e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d007      	beq.n	8008e8c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0201 	orr.w	r2, r2, #1
 8008e8a:	619a      	str	r2, [r3, #24]
  }
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ea8:	e022      	b.n	8008ef0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d01e      	beq.n	8008ef0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb2:	f7fd fe41 	bl	8006b38 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d302      	bcc.n	8008ec8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d113      	bne.n	8008ef0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ecc:	f043 0220 	orr.w	r2, r3, #32
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2220      	movs	r2, #32
 8008ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e00f      	b.n	8008f10 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	699a      	ldr	r2, [r3, #24]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	79fb      	ldrb	r3, [r7, #7]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d0cd      	beq.n	8008eaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f24:	e02c      	b.n	8008f80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	68b9      	ldr	r1, [r7, #8]
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f870 	bl	8009010 <I2C_IsErrorOccurred>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008f36:	2301      	movs	r3, #1
 8008f38:	e02a      	b.n	8008f90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d01e      	beq.n	8008f80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f42:	f7fd fdf9 	bl	8006b38 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d302      	bcc.n	8008f58 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d113      	bne.n	8008f80 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5c:	f043 0220 	orr.w	r2, r3, #32
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e007      	b.n	8008f90 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d1cb      	bne.n	8008f26 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008fa4:	e028      	b.n	8008ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	68b9      	ldr	r1, [r7, #8]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f830 	bl	8009010 <I2C_IsErrorOccurred>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e026      	b.n	8009008 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fba:	f7fd fdbd 	bl	8006b38 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d302      	bcc.n	8008fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d113      	bne.n	8008ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd4:	f043 0220 	orr.w	r2, r3, #32
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e007      	b.n	8009008 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b20      	cmp	r3, #32
 8009004:	d1cf      	bne.n	8008fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800901c:	2300      	movs	r3, #0
 800901e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	f003 0310 	and.w	r3, r3, #16
 8009038:	2b00      	cmp	r3, #0
 800903a:	d075      	beq.n	8009128 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2210      	movs	r2, #16
 8009042:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009044:	e056      	b.n	80090f4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d052      	beq.n	80090f4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800904e:	f7fd fd73 	bl	8006b38 <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	d302      	bcc.n	8009064 <I2C_IsErrorOccurred+0x54>
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d147      	bne.n	80090f4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800906e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009076:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009086:	d12e      	bne.n	80090e6 <I2C_IsErrorOccurred+0xd6>
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800908e:	d02a      	beq.n	80090e6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009090:	7cfb      	ldrb	r3, [r7, #19]
 8009092:	2b20      	cmp	r3, #32
 8009094:	d027      	beq.n	80090e6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80090a6:	f7fd fd47 	bl	8006b38 <HAL_GetTick>
 80090aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090ac:	e01b      	b.n	80090e6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80090ae:	f7fd fd43 	bl	8006b38 <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	2b19      	cmp	r3, #25
 80090ba:	d914      	bls.n	80090e6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c0:	f043 0220 	orr.w	r2, r3, #32
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2220      	movs	r2, #32
 80090cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b20      	cmp	r3, #32
 80090f2:	d1dc      	bne.n	80090ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b20      	cmp	r3, #32
 8009100:	d003      	beq.n	800910a <I2C_IsErrorOccurred+0xfa>
 8009102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009106:	2b00      	cmp	r3, #0
 8009108:	d09d      	beq.n	8009046 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800910a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800910e:	2b00      	cmp	r3, #0
 8009110:	d103      	bne.n	800911a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2220      	movs	r2, #32
 8009118:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	f043 0304 	orr.w	r3, r3, #4
 8009120:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00b      	beq.n	8009152 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	f043 0301 	orr.w	r3, r3, #1
 8009140:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800914a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00b      	beq.n	8009174 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800915c:	6a3b      	ldr	r3, [r7, #32]
 800915e:	f043 0308 	orr.w	r3, r3, #8
 8009162:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800916c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00b      	beq.n	8009196 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	f043 0302 	orr.w	r3, r3, #2
 8009184:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800918e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01c      	beq.n	80091d8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7ff fe56 	bl	8008e50 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6859      	ldr	r1, [r3, #4]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <I2C_IsErrorOccurred+0x1d4>)
 80091b0:	400b      	ands	r3, r1
 80091b2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	431a      	orrs	r2, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80091d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3728      	adds	r7, #40	; 0x28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	fe00e800 	.word	0xfe00e800

080091e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	607b      	str	r3, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	817b      	strh	r3, [r7, #10]
 80091f6:	4613      	mov	r3, r2
 80091f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80091fa:	897b      	ldrh	r3, [r7, #10]
 80091fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009200:	7a7b      	ldrb	r3, [r7, #9]
 8009202:	041b      	lsls	r3, r3, #16
 8009204:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009208:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	4313      	orrs	r3, r2
 8009212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009216:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	0d5b      	lsrs	r3, r3, #21
 8009222:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <I2C_TransferConfig+0x60>)
 8009228:	430b      	orrs	r3, r1
 800922a:	43db      	mvns	r3, r3
 800922c:	ea02 0103 	and.w	r1, r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800923a:	bf00      	nop
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr
 8009246:	bf00      	nop
 8009248:	03ff63ff 	.word	0x03ff63ff

0800924c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b20      	cmp	r3, #32
 8009260:	d138      	bne.n	80092d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009268:	2b01      	cmp	r3, #1
 800926a:	d101      	bne.n	8009270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800926c:	2302      	movs	r3, #2
 800926e:	e032      	b.n	80092d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2224      	movs	r2, #36	; 0x24
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800929e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6819      	ldr	r1, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	430a      	orrs	r2, r1
 80092ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0201 	orr.w	r2, r2, #1
 80092be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2220      	movs	r2, #32
 80092c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	e000      	b.n	80092d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092d4:	2302      	movs	r3, #2
  }
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d139      	bne.n	800936c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d101      	bne.n	8009306 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009302:	2302      	movs	r3, #2
 8009304:	e033      	b.n	800936e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2224      	movs	r2, #36	; 0x24
 8009312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f022 0201 	bic.w	r2, r2, #1
 8009324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009334:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	021b      	lsls	r3, r3, #8
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4313      	orrs	r3, r2
 800933e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0201 	orr.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2220      	movs	r2, #32
 800935c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	e000      	b.n	800936e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800936c:	2302      	movs	r3, #2
  }
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
	...

0800937c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009380:	4b04      	ldr	r3, [pc, #16]	; (8009394 <HAL_PWREx_GetVoltageRange+0x18>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009388:	4618      	mov	r0, r3
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	40007000 	.word	0x40007000

08009398 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a6:	d130      	bne.n	800940a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80093a8:	4b23      	ldr	r3, [pc, #140]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80093b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093b4:	d038      	beq.n	8009428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80093b6:	4b20      	ldr	r3, [pc, #128]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80093be:	4a1e      	ldr	r2, [pc, #120]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80093c6:	4b1d      	ldr	r3, [pc, #116]	; (800943c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2232      	movs	r2, #50	; 0x32
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
 80093d0:	4a1b      	ldr	r2, [pc, #108]	; (8009440 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80093d2:	fba2 2303 	umull	r2, r3, r2, r3
 80093d6:	0c9b      	lsrs	r3, r3, #18
 80093d8:	3301      	adds	r3, #1
 80093da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093dc:	e002      	b.n	80093e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80093e4:	4b14      	ldr	r3, [pc, #80]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80093ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093f0:	d102      	bne.n	80093f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f2      	bne.n	80093de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009404:	d110      	bne.n	8009428 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e00f      	b.n	800942a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800940a:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009416:	d007      	beq.n	8009428 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009418:	4b07      	ldr	r3, [pc, #28]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009420:	4a05      	ldr	r2, [pc, #20]	; (8009438 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009426:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40007000 	.word	0x40007000
 800943c:	20000000 	.word	0x20000000
 8009440:	431bde83 	.word	0x431bde83

08009444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e3ca      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009456:	4b97      	ldr	r3, [pc, #604]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 030c 	and.w	r3, r3, #12
 800945e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009460:	4b94      	ldr	r3, [pc, #592]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0310 	and.w	r3, r3, #16
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80e4 	beq.w	8009640 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d007      	beq.n	800948e <HAL_RCC_OscConfig+0x4a>
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b0c      	cmp	r3, #12
 8009482:	f040 808b 	bne.w	800959c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b01      	cmp	r3, #1
 800948a:	f040 8087 	bne.w	800959c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800948e:	4b89      	ldr	r3, [pc, #548]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b00      	cmp	r3, #0
 8009498:	d005      	beq.n	80094a6 <HAL_RCC_OscConfig+0x62>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e3a2      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1a      	ldr	r2, [r3, #32]
 80094aa:	4b82      	ldr	r3, [pc, #520]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d004      	beq.n	80094c0 <HAL_RCC_OscConfig+0x7c>
 80094b6:	4b7f      	ldr	r3, [pc, #508]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094be:	e005      	b.n	80094cc <HAL_RCC_OscConfig+0x88>
 80094c0:	4b7c      	ldr	r3, [pc, #496]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094c6:	091b      	lsrs	r3, r3, #4
 80094c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d223      	bcs.n	8009518 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 fd55 	bl	8009f84 <RCC_SetFlashLatencyFromMSIRange>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d001      	beq.n	80094e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e383      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80094e4:	4b73      	ldr	r3, [pc, #460]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a72      	ldr	r2, [pc, #456]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094ea:	f043 0308 	orr.w	r3, r3, #8
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	4b70      	ldr	r3, [pc, #448]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a1b      	ldr	r3, [r3, #32]
 80094fc:	496d      	ldr	r1, [pc, #436]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80094fe:	4313      	orrs	r3, r2
 8009500:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009502:	4b6c      	ldr	r3, [pc, #432]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	021b      	lsls	r3, r3, #8
 8009510:	4968      	ldr	r1, [pc, #416]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009512:	4313      	orrs	r3, r2
 8009514:	604b      	str	r3, [r1, #4]
 8009516:	e025      	b.n	8009564 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009518:	4b66      	ldr	r3, [pc, #408]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a65      	ldr	r2, [pc, #404]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800951e:	f043 0308 	orr.w	r3, r3, #8
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	4b63      	ldr	r3, [pc, #396]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a1b      	ldr	r3, [r3, #32]
 8009530:	4960      	ldr	r1, [pc, #384]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009532:	4313      	orrs	r3, r2
 8009534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009536:	4b5f      	ldr	r3, [pc, #380]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	021b      	lsls	r3, r3, #8
 8009544:	495b      	ldr	r1, [pc, #364]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009546:	4313      	orrs	r3, r2
 8009548:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d109      	bne.n	8009564 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a1b      	ldr	r3, [r3, #32]
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fd15 	bl	8009f84 <RCC_SetFlashLatencyFromMSIRange>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e343      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009564:	f000 fc4a 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 8009568:	4602      	mov	r2, r0
 800956a:	4b52      	ldr	r3, [pc, #328]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	091b      	lsrs	r3, r3, #4
 8009570:	f003 030f 	and.w	r3, r3, #15
 8009574:	4950      	ldr	r1, [pc, #320]	; (80096b8 <HAL_RCC_OscConfig+0x274>)
 8009576:	5ccb      	ldrb	r3, [r1, r3]
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	4a4e      	ldr	r2, [pc, #312]	; (80096bc <HAL_RCC_OscConfig+0x278>)
 8009582:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009584:	4b4e      	ldr	r3, [pc, #312]	; (80096c0 <HAL_RCC_OscConfig+0x27c>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd fa85 	bl	8006a98 <HAL_InitTick>
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d052      	beq.n	800963e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	e327      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d032      	beq.n	800960a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80095a4:	4b43      	ldr	r3, [pc, #268]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a42      	ldr	r2, [pc, #264]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80095b0:	f7fd fac2 	bl	8006b38 <HAL_GetTick>
 80095b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80095b6:	e008      	b.n	80095ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80095b8:	f7fd fabe 	bl	8006b38 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d901      	bls.n	80095ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e310      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80095ca:	4b3a      	ldr	r3, [pc, #232]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0f0      	beq.n	80095b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80095d6:	4b37      	ldr	r3, [pc, #220]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a36      	ldr	r2, [pc, #216]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095dc:	f043 0308 	orr.w	r3, r3, #8
 80095e0:	6013      	str	r3, [r2, #0]
 80095e2:	4b34      	ldr	r3, [pc, #208]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	4931      	ldr	r1, [pc, #196]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80095f4:	4b2f      	ldr	r3, [pc, #188]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	021b      	lsls	r3, r3, #8
 8009602:	492c      	ldr	r1, [pc, #176]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009604:	4313      	orrs	r3, r2
 8009606:	604b      	str	r3, [r1, #4]
 8009608:	e01a      	b.n	8009640 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800960a:	4b2a      	ldr	r3, [pc, #168]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a29      	ldr	r2, [pc, #164]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009616:	f7fd fa8f 	bl	8006b38 <HAL_GetTick>
 800961a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800961c:	e008      	b.n	8009630 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800961e:	f7fd fa8b 	bl	8006b38 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	2b02      	cmp	r3, #2
 800962a:	d901      	bls.n	8009630 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e2dd      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009630:	4b20      	ldr	r3, [pc, #128]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0302 	and.w	r3, r3, #2
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f0      	bne.n	800961e <HAL_RCC_OscConfig+0x1da>
 800963c:	e000      	b.n	8009640 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800963e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0301 	and.w	r3, r3, #1
 8009648:	2b00      	cmp	r3, #0
 800964a:	d074      	beq.n	8009736 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	2b08      	cmp	r3, #8
 8009650:	d005      	beq.n	800965e <HAL_RCC_OscConfig+0x21a>
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	2b0c      	cmp	r3, #12
 8009656:	d10e      	bne.n	8009676 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d10b      	bne.n	8009676 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800965e:	4b15      	ldr	r3, [pc, #84]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d064      	beq.n	8009734 <HAL_RCC_OscConfig+0x2f0>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d160      	bne.n	8009734 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e2ba      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800967e:	d106      	bne.n	800968e <HAL_RCC_OscConfig+0x24a>
 8009680:	4b0c      	ldr	r3, [pc, #48]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a0b      	ldr	r2, [pc, #44]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 8009686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800968a:	6013      	str	r3, [r2, #0]
 800968c:	e026      	b.n	80096dc <HAL_RCC_OscConfig+0x298>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009696:	d115      	bne.n	80096c4 <HAL_RCC_OscConfig+0x280>
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a05      	ldr	r2, [pc, #20]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 800969e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4b03      	ldr	r3, [pc, #12]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a02      	ldr	r2, [pc, #8]	; (80096b4 <HAL_RCC_OscConfig+0x270>)
 80096aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e014      	b.n	80096dc <HAL_RCC_OscConfig+0x298>
 80096b2:	bf00      	nop
 80096b4:	40021000 	.word	0x40021000
 80096b8:	080138cc 	.word	0x080138cc
 80096bc:	20000000 	.word	0x20000000
 80096c0:	20000004 	.word	0x20000004
 80096c4:	4ba0      	ldr	r3, [pc, #640]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a9f      	ldr	r2, [pc, #636]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	4b9d      	ldr	r3, [pc, #628]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a9c      	ldr	r2, [pc, #624]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80096d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d013      	beq.n	800970c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e4:	f7fd fa28 	bl	8006b38 <HAL_GetTick>
 80096e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096ea:	e008      	b.n	80096fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80096ec:	f7fd fa24 	bl	8006b38 <HAL_GetTick>
 80096f0:	4602      	mov	r2, r0
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	1ad3      	subs	r3, r2, r3
 80096f6:	2b64      	cmp	r3, #100	; 0x64
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e276      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096fe:	4b92      	ldr	r3, [pc, #584]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0f0      	beq.n	80096ec <HAL_RCC_OscConfig+0x2a8>
 800970a:	e014      	b.n	8009736 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800970c:	f7fd fa14 	bl	8006b38 <HAL_GetTick>
 8009710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009712:	e008      	b.n	8009726 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009714:	f7fd fa10 	bl	8006b38 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b64      	cmp	r3, #100	; 0x64
 8009720:	d901      	bls.n	8009726 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e262      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009726:	4b88      	ldr	r3, [pc, #544]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1f0      	bne.n	8009714 <HAL_RCC_OscConfig+0x2d0>
 8009732:	e000      	b.n	8009736 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0302 	and.w	r3, r3, #2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d060      	beq.n	8009804 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	2b04      	cmp	r3, #4
 8009746:	d005      	beq.n	8009754 <HAL_RCC_OscConfig+0x310>
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	2b0c      	cmp	r3, #12
 800974c:	d119      	bne.n	8009782 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d116      	bne.n	8009782 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009754:	4b7c      	ldr	r3, [pc, #496]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800975c:	2b00      	cmp	r3, #0
 800975e:	d005      	beq.n	800976c <HAL_RCC_OscConfig+0x328>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e23f      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800976c:	4b76      	ldr	r3, [pc, #472]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	061b      	lsls	r3, r3, #24
 800977a:	4973      	ldr	r1, [pc, #460]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800977c:	4313      	orrs	r3, r2
 800977e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009780:	e040      	b.n	8009804 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d023      	beq.n	80097d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800978a:	4b6f      	ldr	r3, [pc, #444]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a6e      	ldr	r2, [pc, #440]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009796:	f7fd f9cf 	bl	8006b38 <HAL_GetTick>
 800979a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800979c:	e008      	b.n	80097b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800979e:	f7fd f9cb 	bl	8006b38 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d901      	bls.n	80097b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e21d      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80097b0:	4b65      	ldr	r3, [pc, #404]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0f0      	beq.n	800979e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80097bc:	4b62      	ldr	r3, [pc, #392]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	061b      	lsls	r3, r3, #24
 80097ca:	495f      	ldr	r1, [pc, #380]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	604b      	str	r3, [r1, #4]
 80097d0:	e018      	b.n	8009804 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80097d2:	4b5d      	ldr	r3, [pc, #372]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a5c      	ldr	r2, [pc, #368]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097de:	f7fd f9ab 	bl	8006b38 <HAL_GetTick>
 80097e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097e4:	e008      	b.n	80097f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80097e6:	f7fd f9a7 	bl	8006b38 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e1f9      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80097f8:	4b53      	ldr	r3, [pc, #332]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1f0      	bne.n	80097e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 0308 	and.w	r3, r3, #8
 800980c:	2b00      	cmp	r3, #0
 800980e:	d03c      	beq.n	800988a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01c      	beq.n	8009852 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009818:	4b4b      	ldr	r3, [pc, #300]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800981a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800981e:	4a4a      	ldr	r2, [pc, #296]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009820:	f043 0301 	orr.w	r3, r3, #1
 8009824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009828:	f7fd f986 	bl	8006b38 <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009830:	f7fd f982 	bl	8006b38 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e1d4      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009842:	4b41      	ldr	r3, [pc, #260]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009848:	f003 0302 	and.w	r3, r3, #2
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0ef      	beq.n	8009830 <HAL_RCC_OscConfig+0x3ec>
 8009850:	e01b      	b.n	800988a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009852:	4b3d      	ldr	r3, [pc, #244]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009858:	4a3b      	ldr	r2, [pc, #236]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800985a:	f023 0301 	bic.w	r3, r3, #1
 800985e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009862:	f7fd f969 	bl	8006b38 <HAL_GetTick>
 8009866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009868:	e008      	b.n	800987c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800986a:	f7fd f965 	bl	8006b38 <HAL_GetTick>
 800986e:	4602      	mov	r2, r0
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	1ad3      	subs	r3, r2, r3
 8009874:	2b02      	cmp	r3, #2
 8009876:	d901      	bls.n	800987c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009878:	2303      	movs	r3, #3
 800987a:	e1b7      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800987c:	4b32      	ldr	r3, [pc, #200]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800987e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009882:	f003 0302 	and.w	r3, r3, #2
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1ef      	bne.n	800986a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80a6 	beq.w	80099e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009898:	2300      	movs	r3, #0
 800989a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800989c:	4b2a      	ldr	r3, [pc, #168]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800989e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10d      	bne.n	80098c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098a8:	4b27      	ldr	r3, [pc, #156]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80098aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ac:	4a26      	ldr	r2, [pc, #152]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80098ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098b2:	6593      	str	r3, [r2, #88]	; 0x58
 80098b4:	4b24      	ldr	r3, [pc, #144]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 80098b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098bc:	60bb      	str	r3, [r7, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098c0:	2301      	movs	r3, #1
 80098c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098c4:	4b21      	ldr	r3, [pc, #132]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d118      	bne.n	8009902 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098d0:	4b1e      	ldr	r3, [pc, #120]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a1d      	ldr	r2, [pc, #116]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80098dc:	f7fd f92c 	bl	8006b38 <HAL_GetTick>
 80098e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80098e4:	f7fd f928 	bl	8006b38 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e17a      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80098f6:	4b15      	ldr	r3, [pc, #84]	; (800994c <HAL_RCC_OscConfig+0x508>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0f0      	beq.n	80098e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d108      	bne.n	800991c <HAL_RCC_OscConfig+0x4d8>
 800990a:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800990c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009910:	4a0d      	ldr	r2, [pc, #52]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800991a:	e029      	b.n	8009970 <HAL_RCC_OscConfig+0x52c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	2b05      	cmp	r3, #5
 8009922:	d115      	bne.n	8009950 <HAL_RCC_OscConfig+0x50c>
 8009924:	4b08      	ldr	r3, [pc, #32]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800992a:	4a07      	ldr	r2, [pc, #28]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800992c:	f043 0304 	orr.w	r3, r3, #4
 8009930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009934:	4b04      	ldr	r3, [pc, #16]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 8009936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800993a:	4a03      	ldr	r2, [pc, #12]	; (8009948 <HAL_RCC_OscConfig+0x504>)
 800993c:	f043 0301 	orr.w	r3, r3, #1
 8009940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009944:	e014      	b.n	8009970 <HAL_RCC_OscConfig+0x52c>
 8009946:	bf00      	nop
 8009948:	40021000 	.word	0x40021000
 800994c:	40007000 	.word	0x40007000
 8009950:	4b9c      	ldr	r3, [pc, #624]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009956:	4a9b      	ldr	r2, [pc, #620]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009958:	f023 0301 	bic.w	r3, r3, #1
 800995c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009960:	4b98      	ldr	r3, [pc, #608]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009966:	4a97      	ldr	r2, [pc, #604]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009968:	f023 0304 	bic.w	r3, r3, #4
 800996c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d016      	beq.n	80099a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009978:	f7fd f8de 	bl	8006b38 <HAL_GetTick>
 800997c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800997e:	e00a      	b.n	8009996 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009980:	f7fd f8da 	bl	8006b38 <HAL_GetTick>
 8009984:	4602      	mov	r2, r0
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	1ad3      	subs	r3, r2, r3
 800998a:	f241 3288 	movw	r2, #5000	; 0x1388
 800998e:	4293      	cmp	r3, r2
 8009990:	d901      	bls.n	8009996 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e12a      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009996:	4b8b      	ldr	r3, [pc, #556]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d0ed      	beq.n	8009980 <HAL_RCC_OscConfig+0x53c>
 80099a4:	e015      	b.n	80099d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099a6:	f7fd f8c7 	bl	8006b38 <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099ac:	e00a      	b.n	80099c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099ae:	f7fd f8c3 	bl	8006b38 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80099bc:	4293      	cmp	r3, r2
 80099be:	d901      	bls.n	80099c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e113      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80099c4:	4b7f      	ldr	r3, [pc, #508]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ca:	f003 0302 	and.w	r3, r3, #2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1ed      	bne.n	80099ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099d2:	7ffb      	ldrb	r3, [r7, #31]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d105      	bne.n	80099e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099d8:	4b7a      	ldr	r3, [pc, #488]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099dc:	4a79      	ldr	r2, [pc, #484]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80fe 	beq.w	8009bea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	f040 80d0 	bne.w	8009b98 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80099f8:	4b72      	ldr	r3, [pc, #456]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f003 0203 	and.w	r2, r3, #3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d130      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a16:	3b01      	subs	r3, #1
 8009a18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d127      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d11f      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009a38:	2a07      	cmp	r2, #7
 8009a3a:	bf14      	ite	ne
 8009a3c:	2201      	movne	r2, #1
 8009a3e:	2200      	moveq	r2, #0
 8009a40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d113      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a50:	085b      	lsrs	r3, r3, #1
 8009a52:	3b01      	subs	r3, #1
 8009a54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d109      	bne.n	8009a6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	085b      	lsrs	r3, r3, #1
 8009a66:	3b01      	subs	r3, #1
 8009a68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d06e      	beq.n	8009b4c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	2b0c      	cmp	r3, #12
 8009a72:	d069      	beq.n	8009b48 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009a74:	4b53      	ldr	r3, [pc, #332]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8009a80:	4b50      	ldr	r3, [pc, #320]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0ad      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009a90:	4b4c      	ldr	r3, [pc, #304]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a4b      	ldr	r2, [pc, #300]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009a9c:	f7fd f84c 	bl	8006b38 <HAL_GetTick>
 8009aa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009aa2:	e008      	b.n	8009ab6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009aa4:	f7fd f848 	bl	8006b38 <HAL_GetTick>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	1ad3      	subs	r3, r2, r3
 8009aae:	2b02      	cmp	r3, #2
 8009ab0:	d901      	bls.n	8009ab6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e09a      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ab6:	4b43      	ldr	r3, [pc, #268]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1f0      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ac2:	4b40      	ldr	r3, [pc, #256]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ac4:	68da      	ldr	r2, [r3, #12]
 8009ac6:	4b40      	ldr	r3, [pc, #256]	; (8009bc8 <HAL_RCC_OscConfig+0x784>)
 8009ac8:	4013      	ands	r3, r2
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009ad2:	3a01      	subs	r2, #1
 8009ad4:	0112      	lsls	r2, r2, #4
 8009ad6:	4311      	orrs	r1, r2
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009adc:	0212      	lsls	r2, r2, #8
 8009ade:	4311      	orrs	r1, r2
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009ae4:	0852      	lsrs	r2, r2, #1
 8009ae6:	3a01      	subs	r2, #1
 8009ae8:	0552      	lsls	r2, r2, #21
 8009aea:	4311      	orrs	r1, r2
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009af0:	0852      	lsrs	r2, r2, #1
 8009af2:	3a01      	subs	r2, #1
 8009af4:	0652      	lsls	r2, r2, #25
 8009af6:	4311      	orrs	r1, r2
 8009af8:	687a      	ldr	r2, [r7, #4]
 8009afa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009afc:	0912      	lsrs	r2, r2, #4
 8009afe:	0452      	lsls	r2, r2, #17
 8009b00:	430a      	orrs	r2, r1
 8009b02:	4930      	ldr	r1, [pc, #192]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009b08:	4b2e      	ldr	r3, [pc, #184]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a2d      	ldr	r2, [pc, #180]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b12:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b14:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	4a2a      	ldr	r2, [pc, #168]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b1e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009b20:	f7fd f80a 	bl	8006b38 <HAL_GetTick>
 8009b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b26:	e008      	b.n	8009b3a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b28:	f7fd f806 	bl	8006b38 <HAL_GetTick>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d901      	bls.n	8009b3a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8009b36:	2303      	movs	r3, #3
 8009b38:	e058      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b3a:	4b22      	ldr	r3, [pc, #136]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0f0      	beq.n	8009b28 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b46:	e050      	b.n	8009bea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e04f      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b4c:	4b1d      	ldr	r3, [pc, #116]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d148      	bne.n	8009bea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009b58:	4b1a      	ldr	r3, [pc, #104]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009b64:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	4a16      	ldr	r2, [pc, #88]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b70:	f7fc ffe2 	bl	8006b38 <HAL_GetTick>
 8009b74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b76:	e008      	b.n	8009b8a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009b78:	f7fc ffde 	bl	8006b38 <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d901      	bls.n	8009b8a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8009b86:	2303      	movs	r3, #3
 8009b88:	e030      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0f0      	beq.n	8009b78 <HAL_RCC_OscConfig+0x734>
 8009b96:	e028      	b.n	8009bea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	2b0c      	cmp	r3, #12
 8009b9c:	d023      	beq.n	8009be6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <HAL_RCC_OscConfig+0x780>)
 8009ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009baa:	f7fc ffc5 	bl	8006b38 <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bb0:	e00c      	b.n	8009bcc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009bb2:	f7fc ffc1 	bl	8006b38 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d905      	bls.n	8009bcc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e013      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
 8009bc4:	40021000 	.word	0x40021000
 8009bc8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009bcc:	4b09      	ldr	r3, [pc, #36]	; (8009bf4 <HAL_RCC_OscConfig+0x7b0>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1ec      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8009bd8:	4b06      	ldr	r3, [pc, #24]	; (8009bf4 <HAL_RCC_OscConfig+0x7b0>)
 8009bda:	68da      	ldr	r2, [r3, #12]
 8009bdc:	4905      	ldr	r1, [pc, #20]	; (8009bf4 <HAL_RCC_OscConfig+0x7b0>)
 8009bde:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <HAL_RCC_OscConfig+0x7b4>)
 8009be0:	4013      	ands	r3, r2
 8009be2:	60cb      	str	r3, [r1, #12]
 8009be4:	e001      	b.n	8009bea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3720      	adds	r7, #32
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	40021000 	.word	0x40021000
 8009bf8:	feeefffc 	.word	0xfeeefffc

08009bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d101      	bne.n	8009c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e0e7      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009c10:	4b75      	ldr	r3, [pc, #468]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	683a      	ldr	r2, [r7, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d910      	bls.n	8009c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c1e:	4b72      	ldr	r3, [pc, #456]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f023 0207 	bic.w	r2, r3, #7
 8009c26:	4970      	ldr	r1, [pc, #448]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2e:	4b6e      	ldr	r3, [pc, #440]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0307 	and.w	r3, r3, #7
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d001      	beq.n	8009c40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e0cf      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f003 0302 	and.w	r3, r3, #2
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d010      	beq.n	8009c6e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689a      	ldr	r2, [r3, #8]
 8009c50:	4b66      	ldr	r3, [pc, #408]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d908      	bls.n	8009c6e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c5c:	4b63      	ldr	r3, [pc, #396]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	4960      	ldr	r1, [pc, #384]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d04c      	beq.n	8009d14 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	2b03      	cmp	r3, #3
 8009c80:	d107      	bne.n	8009c92 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009c82:	4b5a      	ldr	r3, [pc, #360]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d121      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e0a6      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d107      	bne.n	8009caa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c9a:	4b54      	ldr	r3, [pc, #336]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d115      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	e09a      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d107      	bne.n	8009cc2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009cb2:	4b4e      	ldr	r3, [pc, #312]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e08e      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009cc2:	4b4a      	ldr	r3, [pc, #296]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e086      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009cd2:	4b46      	ldr	r3, [pc, #280]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f023 0203 	bic.w	r2, r3, #3
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	4943      	ldr	r1, [pc, #268]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ce4:	f7fc ff28 	bl	8006b38 <HAL_GetTick>
 8009ce8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009cea:	e00a      	b.n	8009d02 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009cec:	f7fc ff24 	bl	8006b38 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d901      	bls.n	8009d02 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009cfe:	2303      	movs	r3, #3
 8009d00:	e06e      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009d02:	4b3a      	ldr	r3, [pc, #232]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f003 020c 	and.w	r2, r3, #12
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d1eb      	bne.n	8009cec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d010      	beq.n	8009d42 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	4b31      	ldr	r3, [pc, #196]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d208      	bcs.n	8009d42 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009d30:	4b2e      	ldr	r3, [pc, #184]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	492b      	ldr	r1, [pc, #172]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009d42:	4b29      	ldr	r3, [pc, #164]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d210      	bcs.n	8009d72 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009d50:	4b25      	ldr	r3, [pc, #148]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f023 0207 	bic.w	r2, r3, #7
 8009d58:	4923      	ldr	r1, [pc, #140]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009d60:	4b21      	ldr	r3, [pc, #132]	; (8009de8 <HAL_RCC_ClockConfig+0x1ec>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0307 	and.w	r3, r3, #7
 8009d68:	683a      	ldr	r2, [r7, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d001      	beq.n	8009d72 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e036      	b.n	8009de0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 0304 	and.w	r3, r3, #4
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d008      	beq.n	8009d90 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009d7e:	4b1b      	ldr	r3, [pc, #108]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	4918      	ldr	r1, [pc, #96]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d9c:	4b13      	ldr	r3, [pc, #76]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	691b      	ldr	r3, [r3, #16]
 8009da8:	00db      	lsls	r3, r3, #3
 8009daa:	4910      	ldr	r1, [pc, #64]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009dac:	4313      	orrs	r3, r2
 8009dae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009db0:	f000 f824 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 8009db4:	4602      	mov	r2, r0
 8009db6:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <HAL_RCC_ClockConfig+0x1f0>)
 8009db8:	689b      	ldr	r3, [r3, #8]
 8009dba:	091b      	lsrs	r3, r3, #4
 8009dbc:	f003 030f 	and.w	r3, r3, #15
 8009dc0:	490b      	ldr	r1, [pc, #44]	; (8009df0 <HAL_RCC_ClockConfig+0x1f4>)
 8009dc2:	5ccb      	ldrb	r3, [r1, r3]
 8009dc4:	f003 031f 	and.w	r3, r3, #31
 8009dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8009dcc:	4a09      	ldr	r2, [pc, #36]	; (8009df4 <HAL_RCC_ClockConfig+0x1f8>)
 8009dce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <HAL_RCC_ClockConfig+0x1fc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fc fe5f 	bl	8006a98 <HAL_InitTick>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	72fb      	strb	r3, [r7, #11]

  return status;
 8009dde:	7afb      	ldrb	r3, [r7, #11]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	40022000 	.word	0x40022000
 8009dec:	40021000 	.word	0x40021000
 8009df0:	080138cc 	.word	0x080138cc
 8009df4:	20000000 	.word	0x20000000
 8009df8:	20000004 	.word	0x20000004

08009dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b089      	sub	sp, #36	; 0x24
 8009e00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	61fb      	str	r3, [r7, #28]
 8009e06:	2300      	movs	r3, #0
 8009e08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e0a:	4b3e      	ldr	r3, [pc, #248]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	f003 030c 	and.w	r3, r3, #12
 8009e12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e14:	4b3b      	ldr	r3, [pc, #236]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	f003 0303 	and.w	r3, r3, #3
 8009e1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_RCC_GetSysClockFreq+0x34>
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b0c      	cmp	r3, #12
 8009e28:	d121      	bne.n	8009e6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d11e      	bne.n	8009e6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009e30:	4b34      	ldr	r3, [pc, #208]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0308 	and.w	r3, r3, #8
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d107      	bne.n	8009e4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009e3c:	4b31      	ldr	r3, [pc, #196]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e42:	0a1b      	lsrs	r3, r3, #8
 8009e44:	f003 030f 	and.w	r3, r3, #15
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	e005      	b.n	8009e58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009e4c:	4b2d      	ldr	r3, [pc, #180]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	091b      	lsrs	r3, r3, #4
 8009e52:	f003 030f 	and.w	r3, r3, #15
 8009e56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009e58:	4a2b      	ldr	r2, [pc, #172]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10d      	bne.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8009e6c:	e00a      	b.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	d102      	bne.n	8009e7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009e74:	4b25      	ldr	r3, [pc, #148]	; (8009f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	e004      	b.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b08      	cmp	r3, #8
 8009e7e:	d101      	bne.n	8009e84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009e80:	4b23      	ldr	r3, [pc, #140]	; (8009f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8009e82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b0c      	cmp	r3, #12
 8009e88:	d134      	bne.n	8009ef4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009e8a:	4b1e      	ldr	r3, [pc, #120]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	f003 0303 	and.w	r3, r3, #3
 8009e92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d003      	beq.n	8009ea2 <HAL_RCC_GetSysClockFreq+0xa6>
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d003      	beq.n	8009ea8 <HAL_RCC_GetSysClockFreq+0xac>
 8009ea0:	e005      	b.n	8009eae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8009ea2:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <HAL_RCC_GetSysClockFreq+0x110>)
 8009ea4:	617b      	str	r3, [r7, #20]
      break;
 8009ea6:	e005      	b.n	8009eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8009ea8:	4b19      	ldr	r3, [pc, #100]	; (8009f10 <HAL_RCC_GetSysClockFreq+0x114>)
 8009eaa:	617b      	str	r3, [r7, #20]
      break;
 8009eac:	e002      	b.n	8009eb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	617b      	str	r3, [r7, #20]
      break;
 8009eb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009eb4:	4b13      	ldr	r3, [pc, #76]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	091b      	lsrs	r3, r3, #4
 8009eba:	f003 0307 	and.w	r3, r3, #7
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009ec2:	4b10      	ldr	r3, [pc, #64]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	0a1b      	lsrs	r3, r3, #8
 8009ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	fb03 f202 	mul.w	r2, r3, r2
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ed8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009eda:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <HAL_RCC_GetSysClockFreq+0x108>)
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	0e5b      	lsrs	r3, r3, #25
 8009ee0:	f003 0303 	and.w	r3, r3, #3
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3724      	adds	r7, #36	; 0x24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop
 8009f04:	40021000 	.word	0x40021000
 8009f08:	080138e4 	.word	0x080138e4
 8009f0c:	00f42400 	.word	0x00f42400
 8009f10:	007a1200 	.word	0x007a1200

08009f14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f14:	b480      	push	{r7}
 8009f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f18:	4b03      	ldr	r3, [pc, #12]	; (8009f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	20000000 	.word	0x20000000

08009f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009f30:	f7ff fff0 	bl	8009f14 <HAL_RCC_GetHCLKFreq>
 8009f34:	4602      	mov	r2, r0
 8009f36:	4b06      	ldr	r3, [pc, #24]	; (8009f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	0a1b      	lsrs	r3, r3, #8
 8009f3c:	f003 0307 	and.w	r3, r3, #7
 8009f40:	4904      	ldr	r1, [pc, #16]	; (8009f54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009f42:	5ccb      	ldrb	r3, [r1, r3]
 8009f44:	f003 031f 	and.w	r3, r3, #31
 8009f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	40021000 	.word	0x40021000
 8009f54:	080138dc 	.word	0x080138dc

08009f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009f5c:	f7ff ffda 	bl	8009f14 <HAL_RCC_GetHCLKFreq>
 8009f60:	4602      	mov	r2, r0
 8009f62:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	0adb      	lsrs	r3, r3, #11
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	4904      	ldr	r1, [pc, #16]	; (8009f80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009f6e:	5ccb      	ldrb	r3, [r1, r3]
 8009f70:	f003 031f 	and.w	r3, r3, #31
 8009f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	40021000 	.word	0x40021000
 8009f80:	080138dc 	.word	0x080138dc

08009f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009f90:	4b2a      	ldr	r3, [pc, #168]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009f9c:	f7ff f9ee 	bl	800937c <HAL_PWREx_GetVoltageRange>
 8009fa0:	6178      	str	r0, [r7, #20]
 8009fa2:	e014      	b.n	8009fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009fa4:	4b25      	ldr	r3, [pc, #148]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa8:	4a24      	ldr	r2, [pc, #144]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fae:	6593      	str	r3, [r2, #88]	; 0x58
 8009fb0:	4b22      	ldr	r3, [pc, #136]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fb8:	60fb      	str	r3, [r7, #12]
 8009fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009fbc:	f7ff f9de 	bl	800937c <HAL_PWREx_GetVoltageRange>
 8009fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009fc2:	4b1e      	ldr	r3, [pc, #120]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fc6:	4a1d      	ldr	r2, [pc, #116]	; (800a03c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd4:	d10b      	bne.n	8009fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b80      	cmp	r3, #128	; 0x80
 8009fda:	d919      	bls.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2ba0      	cmp	r3, #160	; 0xa0
 8009fe0:	d902      	bls.n	8009fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009fe2:	2302      	movs	r3, #2
 8009fe4:	613b      	str	r3, [r7, #16]
 8009fe6:	e013      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009fe8:	2301      	movs	r3, #1
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	e010      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b80      	cmp	r3, #128	; 0x80
 8009ff2:	d902      	bls.n	8009ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	613b      	str	r3, [r7, #16]
 8009ff8:	e00a      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d102      	bne.n	800a006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a000:	2302      	movs	r3, #2
 800a002:	613b      	str	r3, [r7, #16]
 800a004:	e004      	b.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2b70      	cmp	r3, #112	; 0x70
 800a00a:	d101      	bne.n	800a010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a00c:	2301      	movs	r3, #1
 800a00e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a010:	4b0b      	ldr	r3, [pc, #44]	; (800a040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f023 0207 	bic.w	r2, r3, #7
 800a018:	4909      	ldr	r1, [pc, #36]	; (800a040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a020:	4b07      	ldr	r3, [pc, #28]	; (800a040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d001      	beq.n	800a032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e000      	b.n	800a034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	40021000 	.word	0x40021000
 800a040:	40022000 	.word	0x40022000

0800a044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a04c:	2300      	movs	r3, #0
 800a04e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a050:	2300      	movs	r3, #0
 800a052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d041      	beq.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a068:	d02a      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a06a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a06e:	d824      	bhi.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a074:	d008      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a07a:	d81e      	bhi.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d00a      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a084:	d010      	beq.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a086:	e018      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a088:	4b86      	ldr	r3, [pc, #536]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	4a85      	ldr	r2, [pc, #532]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a08e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a092:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a094:	e015      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3304      	adds	r3, #4
 800a09a:	2100      	movs	r1, #0
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fabb 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0a6:	e00c      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3320      	adds	r3, #32
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f000 fba6 	bl	800a800 <RCCEx_PLLSAI2_Config>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a0b8:	e003      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	74fb      	strb	r3, [r7, #19]
      break;
 800a0be:	e000      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a0c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c2:	7cfb      	ldrb	r3, [r7, #19]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d10b      	bne.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a0c8:	4b76      	ldr	r3, [pc, #472]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0d6:	4973      	ldr	r1, [pc, #460]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a0de:	e001      	b.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e0:	7cfb      	ldrb	r3, [r7, #19]
 800a0e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d041      	beq.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0f8:	d02a      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800a0fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a0fe:	d824      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a104:	d008      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a10a:	d81e      	bhi.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00a      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800a110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a114:	d010      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800a116:	e018      	b.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800a118:	4b62      	ldr	r3, [pc, #392]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	4a61      	ldr	r2, [pc, #388]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a11e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a122:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a124:	e015      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3304      	adds	r3, #4
 800a12a:	2100      	movs	r1, #0
 800a12c:	4618      	mov	r0, r3
 800a12e:	f000 fa73 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a132:	4603      	mov	r3, r0
 800a134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a136:	e00c      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3320      	adds	r3, #32
 800a13c:	2100      	movs	r1, #0
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 fb5e 	bl	800a800 <RCCEx_PLLSAI2_Config>
 800a144:	4603      	mov	r3, r0
 800a146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800a148:	e003      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	74fb      	strb	r3, [r7, #19]
      break;
 800a14e:	e000      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800a150:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a152:	7cfb      	ldrb	r3, [r7, #19]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10b      	bne.n	800a170 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a158:	4b52      	ldr	r3, [pc, #328]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a15a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a15e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a166:	494f      	ldr	r1, [pc, #316]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a16e:	e001      	b.n	800a174 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a170:	7cfb      	ldrb	r3, [r7, #19]
 800a172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 80a0 	beq.w	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a182:	2300      	movs	r3, #0
 800a184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a186:	4b47      	ldr	r3, [pc, #284]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a18a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d101      	bne.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800a192:	2301      	movs	r3, #1
 800a194:	e000      	b.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800a196:	2300      	movs	r3, #0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00d      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a19c:	4b41      	ldr	r3, [pc, #260]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a19e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1a0:	4a40      	ldr	r2, [pc, #256]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a6:	6593      	str	r3, [r2, #88]	; 0x58
 800a1a8:	4b3e      	ldr	r3, [pc, #248]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1b0:	60bb      	str	r3, [r7, #8]
 800a1b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1b8:	4b3b      	ldr	r3, [pc, #236]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a3a      	ldr	r2, [pc, #232]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a1be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1c4:	f7fc fcb8 	bl	8006b38 <HAL_GetTick>
 800a1c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a1ca:	e009      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1cc:	f7fc fcb4 	bl	8006b38 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d902      	bls.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	74fb      	strb	r3, [r7, #19]
        break;
 800a1de:	e005      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a1e0:	4b31      	ldr	r3, [pc, #196]	; (800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d0ef      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800a1ec:	7cfb      	ldrb	r3, [r7, #19]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d15c      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a1f2:	4b2c      	ldr	r3, [pc, #176]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d01f      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d019      	beq.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a210:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a21a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a21c:	4b21      	ldr	r3, [pc, #132]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a222:	4a20      	ldr	r2, [pc, #128]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a22c:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a232:	4a1c      	ldr	r2, [pc, #112]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a23c:	4a19      	ldr	r2, [pc, #100]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d016      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a24e:	f7fc fc73 	bl	8006b38 <HAL_GetTick>
 800a252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a254:	e00b      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a256:	f7fc fc6f 	bl	8006b38 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	f241 3288 	movw	r2, #5000	; 0x1388
 800a264:	4293      	cmp	r3, r2
 800a266:	d902      	bls.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800a268:	2303      	movs	r3, #3
 800a26a:	74fb      	strb	r3, [r7, #19]
            break;
 800a26c:	e006      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d0ec      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800a27c:	7cfb      	ldrb	r3, [r7, #19]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10c      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a282:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a292:	4904      	ldr	r1, [pc, #16]	; (800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800a294:	4313      	orrs	r3, r2
 800a296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a29a:	e009      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a29c:	7cfb      	ldrb	r3, [r7, #19]
 800a29e:	74bb      	strb	r3, [r7, #18]
 800a2a0:	e006      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800a2a2:	bf00      	nop
 800a2a4:	40021000 	.word	0x40021000
 800a2a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ac:	7cfb      	ldrb	r3, [r7, #19]
 800a2ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a2b0:	7c7b      	ldrb	r3, [r7, #17]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d105      	bne.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2b6:	4b9e      	ldr	r3, [pc, #632]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ba:	4a9d      	ldr	r2, [pc, #628]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00a      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a2ce:	4b98      	ldr	r3, [pc, #608]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2d4:	f023 0203 	bic.w	r2, r3, #3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	4994      	ldr	r1, [pc, #592]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d00a      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a2f0:	4b8f      	ldr	r3, [pc, #572]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2f6:	f023 020c 	bic.w	r2, r3, #12
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fe:	498c      	ldr	r1, [pc, #560]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a300:	4313      	orrs	r3, r2
 800a302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0304 	and.w	r3, r3, #4
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d00a      	beq.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a312:	4b87      	ldr	r3, [pc, #540]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a320:	4983      	ldr	r1, [pc, #524]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a322:	4313      	orrs	r3, r2
 800a324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0308 	and.w	r3, r3, #8
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a334:	4b7e      	ldr	r3, [pc, #504]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a33a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	497b      	ldr	r1, [pc, #492]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a344:	4313      	orrs	r3, r2
 800a346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0310 	and.w	r3, r3, #16
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a356:	4b76      	ldr	r3, [pc, #472]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a35c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a364:	4972      	ldr	r1, [pc, #456]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a366:	4313      	orrs	r3, r2
 800a368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0320 	and.w	r3, r3, #32
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a378:	4b6d      	ldr	r3, [pc, #436]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a37a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a37e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a386:	496a      	ldr	r1, [pc, #424]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a39a:	4b65      	ldr	r3, [pc, #404]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a39c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3a8:	4961      	ldr	r1, [pc, #388]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00a      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3bc:	4b5c      	ldr	r3, [pc, #368]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ca:	4959      	ldr	r1, [pc, #356]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00a      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a3de:	4b54      	ldr	r3, [pc, #336]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ec:	4950      	ldr	r1, [pc, #320]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d00a      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a400:	4b4b      	ldr	r3, [pc, #300]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a406:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40e:	4948      	ldr	r1, [pc, #288]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a410:	4313      	orrs	r3, r2
 800a412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00a      	beq.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a422:	4b43      	ldr	r3, [pc, #268]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a430:	493f      	ldr	r1, [pc, #252]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a432:	4313      	orrs	r3, r2
 800a434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a440:	2b00      	cmp	r3, #0
 800a442:	d028      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a444:	4b3a      	ldr	r3, [pc, #232]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a44a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a452:	4937      	ldr	r1, [pc, #220]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a454:	4313      	orrs	r3, r2
 800a456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a45e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a462:	d106      	bne.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a464:	4b32      	ldr	r3, [pc, #200]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	4a31      	ldr	r2, [pc, #196]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a46a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a46e:	60d3      	str	r3, [r2, #12]
 800a470:	e011      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a47a:	d10c      	bne.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	3304      	adds	r3, #4
 800a480:	2101      	movs	r1, #1
 800a482:	4618      	mov	r0, r3
 800a484:	f000 f8c8 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a488:	4603      	mov	r3, r0
 800a48a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a48c:	7cfb      	ldrb	r3, [r7, #19]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d001      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800a492:	7cfb      	ldrb	r3, [r7, #19]
 800a494:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d028      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800a4a2:	4b23      	ldr	r3, [pc, #140]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b0:	491f      	ldr	r1, [pc, #124]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4c0:	d106      	bne.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a4c2:	4b1b      	ldr	r3, [pc, #108]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	4a1a      	ldr	r2, [pc, #104]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a4c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4cc:	60d3      	str	r3, [r2, #12]
 800a4ce:	e011      	b.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4d8:	d10c      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	2101      	movs	r1, #1
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f899 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a4ea:	7cfb      	ldrb	r3, [r7, #19]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800a4f0:	7cfb      	ldrb	r3, [r7, #19]
 800a4f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d02b      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a500:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a50e:	4908      	ldr	r1, [pc, #32]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a510:	4313      	orrs	r3, r2
 800a512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a51a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a51e:	d109      	bne.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a520:	4b03      	ldr	r3, [pc, #12]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	4a02      	ldr	r2, [pc, #8]	; (800a530 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a52a:	60d3      	str	r3, [r2, #12]
 800a52c:	e014      	b.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800a52e:	bf00      	nop
 800a530:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a53c:	d10c      	bne.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3304      	adds	r3, #4
 800a542:	2101      	movs	r1, #1
 800a544:	4618      	mov	r0, r3
 800a546:	f000 f867 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a54a:	4603      	mov	r3, r0
 800a54c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a54e:	7cfb      	ldrb	r3, [r7, #19]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d001      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800a554:	7cfb      	ldrb	r3, [r7, #19]
 800a556:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d02f      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a564:	4b2b      	ldr	r3, [pc, #172]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a572:	4928      	ldr	r1, [pc, #160]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a574:	4313      	orrs	r3, r2
 800a576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a57e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a582:	d10d      	bne.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3304      	adds	r3, #4
 800a588:	2102      	movs	r1, #2
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 f844 	bl	800a618 <RCCEx_PLLSAI1_Config>
 800a590:	4603      	mov	r3, r0
 800a592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a594:	7cfb      	ldrb	r3, [r7, #19]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d014      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a59a:	7cfb      	ldrb	r3, [r7, #19]
 800a59c:	74bb      	strb	r3, [r7, #18]
 800a59e:	e011      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5a8:	d10c      	bne.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	3320      	adds	r3, #32
 800a5ae:	2102      	movs	r1, #2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 f925 	bl	800a800 <RCCEx_PLLSAI2_Config>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a5ba:	7cfb      	ldrb	r3, [r7, #19]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800a5c0:	7cfb      	ldrb	r3, [r7, #19]
 800a5c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5d0:	4b10      	ldr	r3, [pc, #64]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5de:	490d      	ldr	r1, [pc, #52]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d00b      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a5f2:	4b08      	ldr	r3, [pc, #32]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a602:	4904      	ldr	r1, [pc, #16]	; (800a614 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a604:	4313      	orrs	r3, r2
 800a606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a60a:	7cbb      	ldrb	r3, [r7, #18]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	40021000 	.word	0x40021000

0800a618 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a626:	4b75      	ldr	r3, [pc, #468]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d018      	beq.n	800a664 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a632:	4b72      	ldr	r3, [pc, #456]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	f003 0203 	and.w	r2, r3, #3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	429a      	cmp	r2, r3
 800a640:	d10d      	bne.n	800a65e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
       ||
 800a646:	2b00      	cmp	r3, #0
 800a648:	d009      	beq.n	800a65e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a64a:	4b6c      	ldr	r3, [pc, #432]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	091b      	lsrs	r3, r3, #4
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	1c5a      	adds	r2, r3, #1
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	685b      	ldr	r3, [r3, #4]
       ||
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d047      	beq.n	800a6ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	73fb      	strb	r3, [r7, #15]
 800a662:	e044      	b.n	800a6ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2b03      	cmp	r3, #3
 800a66a:	d018      	beq.n	800a69e <RCCEx_PLLSAI1_Config+0x86>
 800a66c:	2b03      	cmp	r3, #3
 800a66e:	d825      	bhi.n	800a6bc <RCCEx_PLLSAI1_Config+0xa4>
 800a670:	2b01      	cmp	r3, #1
 800a672:	d002      	beq.n	800a67a <RCCEx_PLLSAI1_Config+0x62>
 800a674:	2b02      	cmp	r3, #2
 800a676:	d009      	beq.n	800a68c <RCCEx_PLLSAI1_Config+0x74>
 800a678:	e020      	b.n	800a6bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a67a:	4b60      	ldr	r3, [pc, #384]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d11d      	bne.n	800a6c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a68a:	e01a      	b.n	800a6c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a68c:	4b5b      	ldr	r3, [pc, #364]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a694:	2b00      	cmp	r3, #0
 800a696:	d116      	bne.n	800a6c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a69c:	e013      	b.n	800a6c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a69e:	4b57      	ldr	r3, [pc, #348]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10f      	bne.n	800a6ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a6aa:	4b54      	ldr	r3, [pc, #336]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d109      	bne.n	800a6ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a6ba:	e006      	b.n	800a6ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c0:	e004      	b.n	800a6cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a6c2:	bf00      	nop
 800a6c4:	e002      	b.n	800a6cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a6c6:	bf00      	nop
 800a6c8:	e000      	b.n	800a6cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a6ca:	bf00      	nop
    }

    if(status == HAL_OK)
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10d      	bne.n	800a6ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a6d2:	4b4a      	ldr	r3, [pc, #296]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6819      	ldr	r1, [r3, #0]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	430b      	orrs	r3, r1
 800a6e8:	4944      	ldr	r1, [pc, #272]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a6ee:	7bfb      	ldrb	r3, [r7, #15]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d17d      	bne.n	800a7f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a6f4:	4b41      	ldr	r3, [pc, #260]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a40      	ldr	r2, [pc, #256]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a6fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a6fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a700:	f7fc fa1a 	bl	8006b38 <HAL_GetTick>
 800a704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a706:	e009      	b.n	800a71c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a708:	f7fc fa16 	bl	8006b38 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d902      	bls.n	800a71c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	73fb      	strb	r3, [r7, #15]
        break;
 800a71a:	e005      	b.n	800a728 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a71c:	4b37      	ldr	r3, [pc, #220]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1ef      	bne.n	800a708 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d160      	bne.n	800a7f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d111      	bne.n	800a758 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a734:	4b31      	ldr	r3, [pc, #196]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a73c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6892      	ldr	r2, [r2, #8]
 800a744:	0211      	lsls	r1, r2, #8
 800a746:	687a      	ldr	r2, [r7, #4]
 800a748:	68d2      	ldr	r2, [r2, #12]
 800a74a:	0912      	lsrs	r2, r2, #4
 800a74c:	0452      	lsls	r2, r2, #17
 800a74e:	430a      	orrs	r2, r1
 800a750:	492a      	ldr	r1, [pc, #168]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a752:	4313      	orrs	r3, r2
 800a754:	610b      	str	r3, [r1, #16]
 800a756:	e027      	b.n	800a7a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d112      	bne.n	800a784 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a75e:	4b27      	ldr	r3, [pc, #156]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a766:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6892      	ldr	r2, [r2, #8]
 800a76e:	0211      	lsls	r1, r2, #8
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	6912      	ldr	r2, [r2, #16]
 800a774:	0852      	lsrs	r2, r2, #1
 800a776:	3a01      	subs	r2, #1
 800a778:	0552      	lsls	r2, r2, #21
 800a77a:	430a      	orrs	r2, r1
 800a77c:	491f      	ldr	r1, [pc, #124]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a77e:	4313      	orrs	r3, r2
 800a780:	610b      	str	r3, [r1, #16]
 800a782:	e011      	b.n	800a7a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a784:	4b1d      	ldr	r3, [pc, #116]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a78c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6892      	ldr	r2, [r2, #8]
 800a794:	0211      	lsls	r1, r2, #8
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	6952      	ldr	r2, [r2, #20]
 800a79a:	0852      	lsrs	r2, r2, #1
 800a79c:	3a01      	subs	r2, #1
 800a79e:	0652      	lsls	r2, r2, #25
 800a7a0:	430a      	orrs	r2, r1
 800a7a2:	4916      	ldr	r1, [pc, #88]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a7a8:	4b14      	ldr	r3, [pc, #80]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a13      	ldr	r2, [pc, #76]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7b4:	f7fc f9c0 	bl	8006b38 <HAL_GetTick>
 800a7b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a7ba:	e009      	b.n	800a7d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a7bc:	f7fc f9bc 	bl	8006b38 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d902      	bls.n	800a7d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	73fb      	strb	r3, [r7, #15]
          break;
 800a7ce:	e005      	b.n	800a7dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d0ef      	beq.n	800a7bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800a7dc:	7bfb      	ldrb	r3, [r7, #15]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a7e2:	4b06      	ldr	r3, [pc, #24]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7e4:	691a      	ldr	r2, [r3, #16]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	4904      	ldr	r1, [pc, #16]	; (800a7fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	40021000 	.word	0x40021000

0800a800 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a80a:	2300      	movs	r3, #0
 800a80c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a80e:	4b6a      	ldr	r3, [pc, #424]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d018      	beq.n	800a84c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a81a:	4b67      	ldr	r3, [pc, #412]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f003 0203 	and.w	r2, r3, #3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d10d      	bne.n	800a846 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
       ||
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800a832:	4b61      	ldr	r3, [pc, #388]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	091b      	lsrs	r3, r3, #4
 800a838:	f003 0307 	and.w	r3, r3, #7
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
       ||
 800a842:	429a      	cmp	r2, r3
 800a844:	d047      	beq.n	800a8d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a846:	2301      	movs	r3, #1
 800a848:	73fb      	strb	r3, [r7, #15]
 800a84a:	e044      	b.n	800a8d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b03      	cmp	r3, #3
 800a852:	d018      	beq.n	800a886 <RCCEx_PLLSAI2_Config+0x86>
 800a854:	2b03      	cmp	r3, #3
 800a856:	d825      	bhi.n	800a8a4 <RCCEx_PLLSAI2_Config+0xa4>
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d002      	beq.n	800a862 <RCCEx_PLLSAI2_Config+0x62>
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d009      	beq.n	800a874 <RCCEx_PLLSAI2_Config+0x74>
 800a860:	e020      	b.n	800a8a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a862:	4b55      	ldr	r3, [pc, #340]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0302 	and.w	r3, r3, #2
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d11d      	bne.n	800a8aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a872:	e01a      	b.n	800a8aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a874:	4b50      	ldr	r3, [pc, #320]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d116      	bne.n	800a8ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a884:	e013      	b.n	800a8ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a886:	4b4c      	ldr	r3, [pc, #304]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10f      	bne.n	800a8b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a892:	4b49      	ldr	r3, [pc, #292]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d109      	bne.n	800a8b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a8a2:	e006      	b.n	800a8b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a8:	e004      	b.n	800a8b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a8aa:	bf00      	nop
 800a8ac:	e002      	b.n	800a8b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a8ae:	bf00      	nop
 800a8b0:	e000      	b.n	800a8b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800a8b2:	bf00      	nop
    }

    if(status == HAL_OK)
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10d      	bne.n	800a8d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a8ba:	4b3f      	ldr	r3, [pc, #252]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6819      	ldr	r1, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	4939      	ldr	r1, [pc, #228]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d167      	bne.n	800a9ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a8dc:	4b36      	ldr	r3, [pc, #216]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a35      	ldr	r2, [pc, #212]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a8e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8e8:	f7fc f926 	bl	8006b38 <HAL_GetTick>
 800a8ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a8ee:	e009      	b.n	800a904 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a8f0:	f7fc f922 	bl	8006b38 <HAL_GetTick>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d902      	bls.n	800a904 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	73fb      	strb	r3, [r7, #15]
        break;
 800a902:	e005      	b.n	800a910 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a904:	4b2c      	ldr	r3, [pc, #176]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1ef      	bne.n	800a8f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d14a      	bne.n	800a9ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d111      	bne.n	800a940 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a91c:	4b26      	ldr	r3, [pc, #152]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800a924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	6892      	ldr	r2, [r2, #8]
 800a92c:	0211      	lsls	r1, r2, #8
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	68d2      	ldr	r2, [r2, #12]
 800a932:	0912      	lsrs	r2, r2, #4
 800a934:	0452      	lsls	r2, r2, #17
 800a936:	430a      	orrs	r2, r1
 800a938:	491f      	ldr	r1, [pc, #124]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a93a:	4313      	orrs	r3, r2
 800a93c:	614b      	str	r3, [r1, #20]
 800a93e:	e011      	b.n	800a964 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a940:	4b1d      	ldr	r3, [pc, #116]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a942:	695b      	ldr	r3, [r3, #20]
 800a944:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a948:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a94c:	687a      	ldr	r2, [r7, #4]
 800a94e:	6892      	ldr	r2, [r2, #8]
 800a950:	0211      	lsls	r1, r2, #8
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	6912      	ldr	r2, [r2, #16]
 800a956:	0852      	lsrs	r2, r2, #1
 800a958:	3a01      	subs	r2, #1
 800a95a:	0652      	lsls	r2, r2, #25
 800a95c:	430a      	orrs	r2, r1
 800a95e:	4916      	ldr	r1, [pc, #88]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a960:	4313      	orrs	r3, r2
 800a962:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a964:	4b14      	ldr	r3, [pc, #80]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a13      	ldr	r2, [pc, #76]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a96a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a96e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a970:	f7fc f8e2 	bl	8006b38 <HAL_GetTick>
 800a974:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a976:	e009      	b.n	800a98c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a978:	f7fc f8de 	bl	8006b38 <HAL_GetTick>
 800a97c:	4602      	mov	r2, r0
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	2b02      	cmp	r3, #2
 800a984:	d902      	bls.n	800a98c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800a986:	2303      	movs	r3, #3
 800a988:	73fb      	strb	r3, [r7, #15]
          break;
 800a98a:	e005      	b.n	800a998 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a98c:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d0ef      	beq.n	800a978 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a99e:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9a0:	695a      	ldr	r2, [r3, #20]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	4904      	ldr	r1, [pc, #16]	; (800a9b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40021000 	.word	0x40021000

0800a9bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e095      	b.n	800aafa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d108      	bne.n	800a9e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9de:	d009      	beq.n	800a9f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	61da      	str	r2, [r3, #28]
 800a9e6:	e005      	b.n	800a9f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7f8 fea2 	bl	8003758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2202      	movs	r2, #2
 800aa18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa2a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa34:	d902      	bls.n	800aa3c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa36:	2300      	movs	r3, #0
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	e002      	b.n	800aa42 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa40:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800aa4a:	d007      	beq.n	800aa5c <HAL_SPI_Init+0xa0>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800aa54:	d002      	beq.n	800aa5c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	431a      	orrs	r2, r3
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	431a      	orrs	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa8a:	431a      	orrs	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa9e:	ea42 0103 	orr.w	r1, r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	0c1b      	lsrs	r3, r3, #16
 800aab8:	f003 0204 	and.w	r2, r3, #4
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac0:	f003 0310 	and.w	r3, r3, #16
 800aac4:	431a      	orrs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaca:	f003 0308 	and.w	r3, r3, #8
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800aad8:	ea42 0103 	orr.w	r1, r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	430a      	orrs	r2, r1
 800aae8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d102      	bne.n	800ab20 <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	73fb      	strb	r3, [r7, #15]
 800ab1e:	e061      	b.n	800abe4 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d106      	bne.n	800ab3a <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7f8 febf 	bl	80038b8 <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0220 	bic.w	r2, r2, #32
 800ab50:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f240 129f 	movw	r2, #415	; 0x19f
 800ab5a:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab62:	f023 0102 	bic.w	r1, r3, #2
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	625a      	str	r2, [r3, #36]	; 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d112      	bne.n	800aba0 <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 800ab7a:	4b1d      	ldr	r3, [pc, #116]	; (800abf0 <HAL_SWPMI_Init+0xec>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a1d      	ldr	r2, [pc, #116]	; (800abf4 <HAL_SWPMI_Init+0xf0>)
 800ab80:	fba2 2303 	umull	r2, r3, r2, r3
 800ab84:	0d1b      	lsrs	r3, r3, #20
 800ab86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab8a:	fb02 f303 	mul.w	r3, r2, r3
 800ab8e:	3396      	adds	r3, #150	; 0x96
 800ab90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ab92:	e002      	b.n	800ab9a <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f9      	bne.n	800ab94 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	6892      	ldr	r2, [r2, #8]
 800aba8:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f023 010f 	bic.w	r1, r3, #15
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68da      	ldr	r2, [r3, #12]
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	431a      	orrs	r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	430a      	orrs	r2, r1
 800abc4:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	639a      	str	r2, [r3, #56]	; 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2201      	movs	r2, #1
 800abd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f042 0220 	orr.w	r2, r2, #32
 800abe2:	601a      	str	r2, [r3, #0]
  }

  return status;
 800abe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000000 	.word	0x20000000
 800abf4:	431bde83 	.word	0x431bde83

0800abf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e049      	b.n	800ac9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d106      	bne.n	800ac24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7f8 feee 	bl	8003a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	3304      	adds	r3, #4
 800ac34:	4619      	mov	r1, r3
 800ac36:	4610      	mov	r0, r2
 800ac38:	f000 fb1a 	bl	800b270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2201      	movs	r2, #1
 800ac90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e049      	b.n	800ad4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d106      	bne.n	800acd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f841 	bl	800ad54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2202      	movs	r2, #2
 800acd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	3304      	adds	r3, #4
 800ace2:	4619      	mov	r1, r3
 800ace4:	4610      	mov	r0, r2
 800ace6:	f000 fac3 	bl	800b270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2201      	movs	r2, #1
 800acee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2201      	movs	r2, #1
 800acfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2201      	movs	r2, #1
 800ad06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3708      	adds	r7, #8
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	e097      	b.n	800aeac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d106      	bne.n	800ad96 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7f8 fdf1 	bl	8003978 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2202      	movs	r2, #2
 800ad9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	6812      	ldr	r2, [r2, #0]
 800ada8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800adac:	f023 0307 	bic.w	r3, r3, #7
 800adb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3304      	adds	r3, #4
 800adba:	4619      	mov	r1, r3
 800adbc:	4610      	mov	r0, r2
 800adbe:	f000 fa57 	bl	800b270 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	699b      	ldr	r3, [r3, #24]
 800add0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	689a      	ldr	r2, [r3, #8]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	021b      	lsls	r3, r3, #8
 800adfa:	4313      	orrs	r3, r2
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ae08:	f023 030c 	bic.w	r3, r3, #12
 800ae0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68da      	ldr	r2, [r3, #12]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	4313      	orrs	r3, r2
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	011a      	lsls	r2, r3, #4
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	6a1b      	ldr	r3, [r3, #32]
 800ae36:	031b      	lsls	r3, r3, #12
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	693a      	ldr	r2, [r7, #16]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ae46:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ae4e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	685a      	ldr	r2, [r3, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	011b      	lsls	r3, r3, #4
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2201      	movs	r2, #1
 800ae8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2201      	movs	r2, #1
 800ae9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2201      	movs	r2, #1
 800aea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3718      	adds	r7, #24
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d101      	bne.n	800aed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aece:	2302      	movs	r3, #2
 800aed0:	e0ff      	b.n	800b0d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b14      	cmp	r3, #20
 800aede:	f200 80f0 	bhi.w	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aee2:	a201      	add	r2, pc, #4	; (adr r2, 800aee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af3d 	.word	0x0800af3d
 800aeec:	0800b0c3 	.word	0x0800b0c3
 800aef0:	0800b0c3 	.word	0x0800b0c3
 800aef4:	0800b0c3 	.word	0x0800b0c3
 800aef8:	0800af7d 	.word	0x0800af7d
 800aefc:	0800b0c3 	.word	0x0800b0c3
 800af00:	0800b0c3 	.word	0x0800b0c3
 800af04:	0800b0c3 	.word	0x0800b0c3
 800af08:	0800afbf 	.word	0x0800afbf
 800af0c:	0800b0c3 	.word	0x0800b0c3
 800af10:	0800b0c3 	.word	0x0800b0c3
 800af14:	0800b0c3 	.word	0x0800b0c3
 800af18:	0800afff 	.word	0x0800afff
 800af1c:	0800b0c3 	.word	0x0800b0c3
 800af20:	0800b0c3 	.word	0x0800b0c3
 800af24:	0800b0c3 	.word	0x0800b0c3
 800af28:	0800b041 	.word	0x0800b041
 800af2c:	0800b0c3 	.word	0x0800b0c3
 800af30:	0800b0c3 	.word	0x0800b0c3
 800af34:	0800b0c3 	.word	0x0800b0c3
 800af38:	0800b081 	.word	0x0800b081
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fa2e 	bl	800b3a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699a      	ldr	r2, [r3, #24]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f042 0208 	orr.w	r2, r2, #8
 800af56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0204 	bic.w	r2, r2, #4
 800af66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6999      	ldr	r1, [r3, #24]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	691a      	ldr	r2, [r3, #16]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	619a      	str	r2, [r3, #24]
      break;
 800af7a:	e0a5      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fa9e 	bl	800b4c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	699a      	ldr	r2, [r3, #24]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699a      	ldr	r2, [r3, #24]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6999      	ldr	r1, [r3, #24]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	021a      	lsls	r2, r3, #8
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	619a      	str	r2, [r3, #24]
      break;
 800afbc:	e084      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68b9      	ldr	r1, [r7, #8]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fb07 	bl	800b5d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f042 0208 	orr.w	r2, r2, #8
 800afd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 0204 	bic.w	r2, r2, #4
 800afe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69d9      	ldr	r1, [r3, #28]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691a      	ldr	r2, [r3, #16]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	430a      	orrs	r2, r1
 800affa:	61da      	str	r2, [r3, #28]
      break;
 800affc:	e064      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68b9      	ldr	r1, [r7, #8]
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fb6f 	bl	800b6e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	69da      	ldr	r2, [r3, #28]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	69da      	ldr	r2, [r3, #28]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	69d9      	ldr	r1, [r3, #28]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	021a      	lsls	r2, r3, #8
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	61da      	str	r2, [r3, #28]
      break;
 800b03e:	e043      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fbb8 	bl	800b7bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 0208 	orr.w	r2, r2, #8
 800b05a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0204 	bic.w	r2, r2, #4
 800b06a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b07e:	e023      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68b9      	ldr	r1, [r7, #8]
 800b086:	4618      	mov	r0, r3
 800b088:	f000 fbfc 	bl	800b884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b09a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	021a      	lsls	r2, r3, #8
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b0c0:	e002      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop

0800b0dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d101      	bne.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1c>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e0b6      	b.n	800b266 <HAL_TIM_ConfigClockSource+0x18a>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b116:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b11a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b134:	d03e      	beq.n	800b1b4 <HAL_TIM_ConfigClockSource+0xd8>
 800b136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b13a:	f200 8087 	bhi.w	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b142:	f000 8086 	beq.w	800b252 <HAL_TIM_ConfigClockSource+0x176>
 800b146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b14a:	d87f      	bhi.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b14c:	2b70      	cmp	r3, #112	; 0x70
 800b14e:	d01a      	beq.n	800b186 <HAL_TIM_ConfigClockSource+0xaa>
 800b150:	2b70      	cmp	r3, #112	; 0x70
 800b152:	d87b      	bhi.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b154:	2b60      	cmp	r3, #96	; 0x60
 800b156:	d050      	beq.n	800b1fa <HAL_TIM_ConfigClockSource+0x11e>
 800b158:	2b60      	cmp	r3, #96	; 0x60
 800b15a:	d877      	bhi.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b15c:	2b50      	cmp	r3, #80	; 0x50
 800b15e:	d03c      	beq.n	800b1da <HAL_TIM_ConfigClockSource+0xfe>
 800b160:	2b50      	cmp	r3, #80	; 0x50
 800b162:	d873      	bhi.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b164:	2b40      	cmp	r3, #64	; 0x40
 800b166:	d058      	beq.n	800b21a <HAL_TIM_ConfigClockSource+0x13e>
 800b168:	2b40      	cmp	r3, #64	; 0x40
 800b16a:	d86f      	bhi.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b16c:	2b30      	cmp	r3, #48	; 0x30
 800b16e:	d064      	beq.n	800b23a <HAL_TIM_ConfigClockSource+0x15e>
 800b170:	2b30      	cmp	r3, #48	; 0x30
 800b172:	d86b      	bhi.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b174:	2b20      	cmp	r3, #32
 800b176:	d060      	beq.n	800b23a <HAL_TIM_ConfigClockSource+0x15e>
 800b178:	2b20      	cmp	r3, #32
 800b17a:	d867      	bhi.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d05c      	beq.n	800b23a <HAL_TIM_ConfigClockSource+0x15e>
 800b180:	2b10      	cmp	r3, #16
 800b182:	d05a      	beq.n	800b23a <HAL_TIM_ConfigClockSource+0x15e>
 800b184:	e062      	b.n	800b24c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6818      	ldr	r0, [r3, #0]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	6899      	ldr	r1, [r3, #8]
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	f000 fc55 	bl	800ba44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b1a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	609a      	str	r2, [r3, #8]
      break;
 800b1b2:	e04f      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6818      	ldr	r0, [r3, #0]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	6899      	ldr	r1, [r3, #8]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	68db      	ldr	r3, [r3, #12]
 800b1c4:	f000 fc3e 	bl	800ba44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	689a      	ldr	r2, [r3, #8]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b1d6:	609a      	str	r2, [r3, #8]
      break;
 800b1d8:	e03c      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6818      	ldr	r0, [r3, #0]
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	6859      	ldr	r1, [r3, #4]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	f000 fbb2 	bl	800b950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2150      	movs	r1, #80	; 0x50
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fc0b 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b1f8:	e02c      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	6859      	ldr	r1, [r3, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	461a      	mov	r2, r3
 800b208:	f000 fbd1 	bl	800b9ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2160      	movs	r1, #96	; 0x60
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fbfb 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b218:	e01c      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	6859      	ldr	r1, [r3, #4]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	461a      	mov	r2, r3
 800b228:	f000 fb92 	bl	800b950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2140      	movs	r1, #64	; 0x40
 800b232:	4618      	mov	r0, r3
 800b234:	f000 fbeb 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b238:	e00c      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4619      	mov	r1, r3
 800b244:	4610      	mov	r0, r2
 800b246:	f000 fbe2 	bl	800ba0e <TIM_ITRx_SetConfig>
      break;
 800b24a:	e003      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]
      break;
 800b250:	e000      	b.n	800b254 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800b252:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2201      	movs	r2, #1
 800b258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a40      	ldr	r2, [pc, #256]	; (800b384 <TIM_Base_SetConfig+0x114>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d013      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b28e:	d00f      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a3d      	ldr	r2, [pc, #244]	; (800b388 <TIM_Base_SetConfig+0x118>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d00b      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a3c      	ldr	r2, [pc, #240]	; (800b38c <TIM_Base_SetConfig+0x11c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d007      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a3b      	ldr	r2, [pc, #236]	; (800b390 <TIM_Base_SetConfig+0x120>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d003      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a3a      	ldr	r2, [pc, #232]	; (800b394 <TIM_Base_SetConfig+0x124>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d108      	bne.n	800b2c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a2f      	ldr	r2, [pc, #188]	; (800b384 <TIM_Base_SetConfig+0x114>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d01f      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2d0:	d01b      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a2c      	ldr	r2, [pc, #176]	; (800b388 <TIM_Base_SetConfig+0x118>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d017      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a2b      	ldr	r2, [pc, #172]	; (800b38c <TIM_Base_SetConfig+0x11c>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d013      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a2a      	ldr	r2, [pc, #168]	; (800b390 <TIM_Base_SetConfig+0x120>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d00f      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a29      	ldr	r2, [pc, #164]	; (800b394 <TIM_Base_SetConfig+0x124>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d00b      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a28      	ldr	r2, [pc, #160]	; (800b398 <TIM_Base_SetConfig+0x128>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d007      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a27      	ldr	r2, [pc, #156]	; (800b39c <TIM_Base_SetConfig+0x12c>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d003      	beq.n	800b30a <TIM_Base_SetConfig+0x9a>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a26      	ldr	r2, [pc, #152]	; (800b3a0 <TIM_Base_SetConfig+0x130>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d108      	bne.n	800b31c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	4313      	orrs	r3, r2
 800b31a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	4313      	orrs	r3, r2
 800b328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	689a      	ldr	r2, [r3, #8]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a10      	ldr	r2, [pc, #64]	; (800b384 <TIM_Base_SetConfig+0x114>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d00f      	beq.n	800b368 <TIM_Base_SetConfig+0xf8>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4a12      	ldr	r2, [pc, #72]	; (800b394 <TIM_Base_SetConfig+0x124>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d00b      	beq.n	800b368 <TIM_Base_SetConfig+0xf8>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	4a11      	ldr	r2, [pc, #68]	; (800b398 <TIM_Base_SetConfig+0x128>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d007      	beq.n	800b368 <TIM_Base_SetConfig+0xf8>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a10      	ldr	r2, [pc, #64]	; (800b39c <TIM_Base_SetConfig+0x12c>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d003      	beq.n	800b368 <TIM_Base_SetConfig+0xf8>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a0f      	ldr	r2, [pc, #60]	; (800b3a0 <TIM_Base_SetConfig+0x130>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d103      	bne.n	800b370 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	691a      	ldr	r2, [r3, #16]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	615a      	str	r2, [r3, #20]
}
 800b376:	bf00      	nop
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	40012c00 	.word	0x40012c00
 800b388:	40000400 	.word	0x40000400
 800b38c:	40000800 	.word	0x40000800
 800b390:	40000c00 	.word	0x40000c00
 800b394:	40013400 	.word	0x40013400
 800b398:	40014000 	.word	0x40014000
 800b39c:	40014400 	.word	0x40014400
 800b3a0:	40014800 	.word	0x40014800

0800b3a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	f023 0201 	bic.w	r2, r3, #1
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0303 	bic.w	r3, r3, #3
 800b3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f023 0302 	bic.w	r3, r3, #2
 800b3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a2c      	ldr	r2, [pc, #176]	; (800b4b0 <TIM_OC1_SetConfig+0x10c>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d00f      	beq.n	800b424 <TIM_OC1_SetConfig+0x80>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a2b      	ldr	r2, [pc, #172]	; (800b4b4 <TIM_OC1_SetConfig+0x110>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d00b      	beq.n	800b424 <TIM_OC1_SetConfig+0x80>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a2a      	ldr	r2, [pc, #168]	; (800b4b8 <TIM_OC1_SetConfig+0x114>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d007      	beq.n	800b424 <TIM_OC1_SetConfig+0x80>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a29      	ldr	r2, [pc, #164]	; (800b4bc <TIM_OC1_SetConfig+0x118>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d003      	beq.n	800b424 <TIM_OC1_SetConfig+0x80>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a28      	ldr	r2, [pc, #160]	; (800b4c0 <TIM_OC1_SetConfig+0x11c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d10c      	bne.n	800b43e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f023 0308 	bic.w	r3, r3, #8
 800b42a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	68db      	ldr	r3, [r3, #12]
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	4313      	orrs	r3, r2
 800b434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f023 0304 	bic.w	r3, r3, #4
 800b43c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a1b      	ldr	r2, [pc, #108]	; (800b4b0 <TIM_OC1_SetConfig+0x10c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d00f      	beq.n	800b466 <TIM_OC1_SetConfig+0xc2>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1a      	ldr	r2, [pc, #104]	; (800b4b4 <TIM_OC1_SetConfig+0x110>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d00b      	beq.n	800b466 <TIM_OC1_SetConfig+0xc2>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a19      	ldr	r2, [pc, #100]	; (800b4b8 <TIM_OC1_SetConfig+0x114>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d007      	beq.n	800b466 <TIM_OC1_SetConfig+0xc2>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <TIM_OC1_SetConfig+0x118>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d003      	beq.n	800b466 <TIM_OC1_SetConfig+0xc2>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a17      	ldr	r2, [pc, #92]	; (800b4c0 <TIM_OC1_SetConfig+0x11c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d111      	bne.n	800b48a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b46c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	695b      	ldr	r3, [r3, #20]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b496:	683b      	ldr	r3, [r7, #0]
 800b498:	685a      	ldr	r2, [r3, #4]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	697a      	ldr	r2, [r7, #20]
 800b4a2:	621a      	str	r2, [r3, #32]
}
 800b4a4:	bf00      	nop
 800b4a6:	371c      	adds	r7, #28
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	40012c00 	.word	0x40012c00
 800b4b4:	40013400 	.word	0x40013400
 800b4b8:	40014000 	.word	0x40014000
 800b4bc:	40014400 	.word	0x40014400
 800b4c0:	40014800 	.word	0x40014800

0800b4c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6a1b      	ldr	r3, [r3, #32]
 800b4d2:	f023 0210 	bic.w	r2, r3, #16
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f023 0320 	bic.w	r3, r3, #32
 800b512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	011b      	lsls	r3, r3, #4
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a28      	ldr	r2, [pc, #160]	; (800b5c4 <TIM_OC2_SetConfig+0x100>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d003      	beq.n	800b530 <TIM_OC2_SetConfig+0x6c>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a27      	ldr	r2, [pc, #156]	; (800b5c8 <TIM_OC2_SetConfig+0x104>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d10d      	bne.n	800b54c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	4313      	orrs	r3, r2
 800b542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b54a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <TIM_OC2_SetConfig+0x100>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d00f      	beq.n	800b574 <TIM_OC2_SetConfig+0xb0>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a1c      	ldr	r2, [pc, #112]	; (800b5c8 <TIM_OC2_SetConfig+0x104>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d00b      	beq.n	800b574 <TIM_OC2_SetConfig+0xb0>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a1b      	ldr	r2, [pc, #108]	; (800b5cc <TIM_OC2_SetConfig+0x108>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d007      	beq.n	800b574 <TIM_OC2_SetConfig+0xb0>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a1a      	ldr	r2, [pc, #104]	; (800b5d0 <TIM_OC2_SetConfig+0x10c>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d003      	beq.n	800b574 <TIM_OC2_SetConfig+0xb0>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a19      	ldr	r2, [pc, #100]	; (800b5d4 <TIM_OC2_SetConfig+0x110>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d113      	bne.n	800b59c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b57a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b582:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	695b      	ldr	r3, [r3, #20]
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	009b      	lsls	r3, r3, #2
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	4313      	orrs	r3, r2
 800b59a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	693a      	ldr	r2, [r7, #16]
 800b5a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	685a      	ldr	r2, [r3, #4]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	621a      	str	r2, [r3, #32]
}
 800b5b6:	bf00      	nop
 800b5b8:	371c      	adds	r7, #28
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr
 800b5c2:	bf00      	nop
 800b5c4:	40012c00 	.word	0x40012c00
 800b5c8:	40013400 	.word	0x40013400
 800b5cc:	40014000 	.word	0x40014000
 800b5d0:	40014400 	.word	0x40014400
 800b5d4:	40014800 	.word	0x40014800

0800b5d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f023 0303 	bic.w	r3, r3, #3
 800b612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	697a      	ldr	r2, [r7, #20]
 800b62e:	4313      	orrs	r3, r2
 800b630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a27      	ldr	r2, [pc, #156]	; (800b6d4 <TIM_OC3_SetConfig+0xfc>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d003      	beq.n	800b642 <TIM_OC3_SetConfig+0x6a>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	4a26      	ldr	r2, [pc, #152]	; (800b6d8 <TIM_OC3_SetConfig+0x100>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d10d      	bne.n	800b65e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b648:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	021b      	lsls	r3, r3, #8
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	4313      	orrs	r3, r2
 800b654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b65c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a1c      	ldr	r2, [pc, #112]	; (800b6d4 <TIM_OC3_SetConfig+0xfc>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d00f      	beq.n	800b686 <TIM_OC3_SetConfig+0xae>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a1b      	ldr	r2, [pc, #108]	; (800b6d8 <TIM_OC3_SetConfig+0x100>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d00b      	beq.n	800b686 <TIM_OC3_SetConfig+0xae>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a1a      	ldr	r2, [pc, #104]	; (800b6dc <TIM_OC3_SetConfig+0x104>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d007      	beq.n	800b686 <TIM_OC3_SetConfig+0xae>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <TIM_OC3_SetConfig+0x108>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d003      	beq.n	800b686 <TIM_OC3_SetConfig+0xae>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4a18      	ldr	r2, [pc, #96]	; (800b6e4 <TIM_OC3_SetConfig+0x10c>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d113      	bne.n	800b6ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b68c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	011b      	lsls	r3, r3, #4
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	699b      	ldr	r3, [r3, #24]
 800b6a6:	011b      	lsls	r3, r3, #4
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	4313      	orrs	r3, r2
 800b6ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68fa      	ldr	r2, [r7, #12]
 800b6b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	685a      	ldr	r2, [r3, #4]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	697a      	ldr	r2, [r7, #20]
 800b6c6:	621a      	str	r2, [r3, #32]
}
 800b6c8:	bf00      	nop
 800b6ca:	371c      	adds	r7, #28
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d2:	4770      	bx	lr
 800b6d4:	40012c00 	.word	0x40012c00
 800b6d8:	40013400 	.word	0x40013400
 800b6dc:	40014000 	.word	0x40014000
 800b6e0:	40014400 	.word	0x40014400
 800b6e4:	40014800 	.word	0x40014800

0800b6e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b087      	sub	sp, #28
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a1b      	ldr	r3, [r3, #32]
 800b6f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	69db      	ldr	r3, [r3, #28]
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b71a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	021b      	lsls	r3, r3, #8
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	031b      	lsls	r3, r3, #12
 800b73e:	693a      	ldr	r2, [r7, #16]
 800b740:	4313      	orrs	r3, r2
 800b742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a18      	ldr	r2, [pc, #96]	; (800b7a8 <TIM_OC4_SetConfig+0xc0>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d00f      	beq.n	800b76c <TIM_OC4_SetConfig+0x84>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a17      	ldr	r2, [pc, #92]	; (800b7ac <TIM_OC4_SetConfig+0xc4>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d00b      	beq.n	800b76c <TIM_OC4_SetConfig+0x84>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a16      	ldr	r2, [pc, #88]	; (800b7b0 <TIM_OC4_SetConfig+0xc8>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d007      	beq.n	800b76c <TIM_OC4_SetConfig+0x84>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a15      	ldr	r2, [pc, #84]	; (800b7b4 <TIM_OC4_SetConfig+0xcc>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d003      	beq.n	800b76c <TIM_OC4_SetConfig+0x84>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a14      	ldr	r2, [pc, #80]	; (800b7b8 <TIM_OC4_SetConfig+0xd0>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d109      	bne.n	800b780 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b772:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	019b      	lsls	r3, r3, #6
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	697a      	ldr	r2, [r7, #20]
 800b784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	685a      	ldr	r2, [r3, #4]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	693a      	ldr	r2, [r7, #16]
 800b798:	621a      	str	r2, [r3, #32]
}
 800b79a:	bf00      	nop
 800b79c:	371c      	adds	r7, #28
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	40012c00 	.word	0x40012c00
 800b7ac:	40013400 	.word	0x40013400
 800b7b0:	40014000 	.word	0x40014000
 800b7b4:	40014400 	.word	0x40014400
 800b7b8:	40014800 	.word	0x40014800

0800b7bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b800:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	041b      	lsls	r3, r3, #16
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	4a17      	ldr	r2, [pc, #92]	; (800b870 <TIM_OC5_SetConfig+0xb4>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d00f      	beq.n	800b836 <TIM_OC5_SetConfig+0x7a>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	4a16      	ldr	r2, [pc, #88]	; (800b874 <TIM_OC5_SetConfig+0xb8>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d00b      	beq.n	800b836 <TIM_OC5_SetConfig+0x7a>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	4a15      	ldr	r2, [pc, #84]	; (800b878 <TIM_OC5_SetConfig+0xbc>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d007      	beq.n	800b836 <TIM_OC5_SetConfig+0x7a>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	4a14      	ldr	r2, [pc, #80]	; (800b87c <TIM_OC5_SetConfig+0xc0>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d003      	beq.n	800b836 <TIM_OC5_SetConfig+0x7a>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a13      	ldr	r2, [pc, #76]	; (800b880 <TIM_OC5_SetConfig+0xc4>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d109      	bne.n	800b84a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b83c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	021b      	lsls	r3, r3, #8
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	4313      	orrs	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	685a      	ldr	r2, [r3, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	621a      	str	r2, [r3, #32]
}
 800b864:	bf00      	nop
 800b866:	371c      	adds	r7, #28
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	40012c00 	.word	0x40012c00
 800b874:	40013400 	.word	0x40013400
 800b878:	40014000 	.word	0x40014000
 800b87c:	40014400 	.word	0x40014400
 800b880:	40014800 	.word	0x40014800

0800b884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b884:	b480      	push	{r7}
 800b886:	b087      	sub	sp, #28
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	021b      	lsls	r3, r3, #8
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b8ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	689b      	ldr	r3, [r3, #8]
 800b8d0:	051b      	lsls	r3, r3, #20
 800b8d2:	693a      	ldr	r2, [r7, #16]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a18      	ldr	r2, [pc, #96]	; (800b93c <TIM_OC6_SetConfig+0xb8>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d00f      	beq.n	800b900 <TIM_OC6_SetConfig+0x7c>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	4a17      	ldr	r2, [pc, #92]	; (800b940 <TIM_OC6_SetConfig+0xbc>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d00b      	beq.n	800b900 <TIM_OC6_SetConfig+0x7c>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a16      	ldr	r2, [pc, #88]	; (800b944 <TIM_OC6_SetConfig+0xc0>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d007      	beq.n	800b900 <TIM_OC6_SetConfig+0x7c>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a15      	ldr	r2, [pc, #84]	; (800b948 <TIM_OC6_SetConfig+0xc4>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d003      	beq.n	800b900 <TIM_OC6_SetConfig+0x7c>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a14      	ldr	r2, [pc, #80]	; (800b94c <TIM_OC6_SetConfig+0xc8>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d109      	bne.n	800b914 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b906:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	695b      	ldr	r3, [r3, #20]
 800b90c:	029b      	lsls	r3, r3, #10
 800b90e:	697a      	ldr	r2, [r7, #20]
 800b910:	4313      	orrs	r3, r2
 800b912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	697a      	ldr	r2, [r7, #20]
 800b918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	621a      	str	r2, [r3, #32]
}
 800b92e:	bf00      	nop
 800b930:	371c      	adds	r7, #28
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	40012c00 	.word	0x40012c00
 800b940:	40013400 	.word	0x40013400
 800b944:	40014000 	.word	0x40014000
 800b948:	40014400 	.word	0x40014400
 800b94c:	40014800 	.word	0x40014800

0800b950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6a1b      	ldr	r3, [r3, #32]
 800b960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a1b      	ldr	r3, [r3, #32]
 800b966:	f023 0201 	bic.w	r2, r3, #1
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b97a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	011b      	lsls	r3, r3, #4
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	4313      	orrs	r3, r2
 800b984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	f023 030a 	bic.w	r3, r3, #10
 800b98c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	4313      	orrs	r3, r2
 800b994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	697a      	ldr	r2, [r7, #20]
 800b9a0:	621a      	str	r2, [r3, #32]
}
 800b9a2:	bf00      	nop
 800b9a4:	371c      	adds	r7, #28
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr

0800b9ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9ae:	b480      	push	{r7}
 800b9b0:	b087      	sub	sp, #28
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	60f8      	str	r0, [r7, #12]
 800b9b6:	60b9      	str	r1, [r7, #8]
 800b9b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	f023 0210 	bic.w	r2, r3, #16
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6a1b      	ldr	r3, [r3, #32]
 800b9d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	031b      	lsls	r3, r3, #12
 800b9de:	697a      	ldr	r2, [r7, #20]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b9ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	011b      	lsls	r3, r3, #4
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	697a      	ldr	r2, [r7, #20]
 800b9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	621a      	str	r2, [r3, #32]
}
 800ba02:	bf00      	nop
 800ba04:	371c      	adds	r7, #28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b085      	sub	sp, #20
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba26:	683a      	ldr	r2, [r7, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	f043 0307 	orr.w	r3, r3, #7
 800ba30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	609a      	str	r2, [r3, #8]
}
 800ba38:	bf00      	nop
 800ba3a:	3714      	adds	r7, #20
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b087      	sub	sp, #28
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	021a      	lsls	r2, r3, #8
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	431a      	orrs	r2, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	697a      	ldr	r2, [r7, #20]
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	697a      	ldr	r2, [r7, #20]
 800ba76:	609a      	str	r2, [r3, #8]
}
 800ba78:	bf00      	nop
 800ba7a:	371c      	adds	r7, #28
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d101      	bne.n	800ba9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	e068      	b.n	800bb6e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2202      	movs	r2, #2
 800baa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a2e      	ldr	r2, [pc, #184]	; (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d004      	beq.n	800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a2d      	ldr	r2, [pc, #180]	; (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d108      	bne.n	800bae2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bad6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	68fa      	ldr	r2, [r7, #12]
 800bade:	4313      	orrs	r3, r2
 800bae0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bae8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68fa      	ldr	r2, [r7, #12]
 800baf0:	4313      	orrs	r3, r2
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a1e      	ldr	r2, [pc, #120]	; (800bb7c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d01d      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb0e:	d018      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a1b      	ldr	r2, [pc, #108]	; (800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d013      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a1a      	ldr	r2, [pc, #104]	; (800bb88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d00e      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a18      	ldr	r2, [pc, #96]	; (800bb8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d009      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a13      	ldr	r2, [pc, #76]	; (800bb80 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d004      	beq.n	800bb42 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a14      	ldr	r2, [pc, #80]	; (800bb90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d10c      	bne.n	800bb5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68ba      	ldr	r2, [r7, #8]
 800bb5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2201      	movs	r2, #1
 800bb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb6c:	2300      	movs	r3, #0
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3714      	adds	r7, #20
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	40012c00 	.word	0x40012c00
 800bb80:	40013400 	.word	0x40013400
 800bb84:	40000400 	.word	0x40000400
 800bb88:	40000800 	.word	0x40000800
 800bb8c:	40000c00 	.word	0x40000c00
 800bb90:	40014000 	.word	0x40014000

0800bb94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d101      	bne.n	800bbb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bbac:	2302      	movs	r3, #2
 800bbae:	e065      	b.n	800bc7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4313      	orrs	r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	695b      	ldr	r3, [r3, #20]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc16:	4313      	orrs	r3, r2
 800bc18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	699b      	ldr	r3, [r3, #24]
 800bc24:	041b      	lsls	r3, r3, #16
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a16      	ldr	r2, [pc, #88]	; (800bc88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d004      	beq.n	800bc3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a14      	ldr	r2, [pc, #80]	; (800bc8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d115      	bne.n	800bc6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc48:	051b      	lsls	r3, r3, #20
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	69db      	ldr	r3, [r3, #28]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	6a1b      	ldr	r3, [r3, #32]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	40012c00 	.word	0x40012c00
 800bc8c:	40013400 	.word	0x40013400

0800bc90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e040      	b.n	800bd24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d106      	bne.n	800bcb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7f7 ff7c 	bl	8003bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2224      	movs	r2, #36	; 0x24
 800bcbc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f022 0201 	bic.w	r2, r2, #1
 800bccc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fbe8 	bl	800c4a4 <UART_SetConfig>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d101      	bne.n	800bcde <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e022      	b.n	800bd24 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d002      	beq.n	800bcec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 fe94 	bl	800ca14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	689a      	ldr	r2, [r3, #8]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f042 0201 	orr.w	r2, r2, #1
 800bd1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 ff1b 	bl	800cb58 <UART_CheckIdleState>
 800bd22:	4603      	mov	r3, r0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b08b      	sub	sp, #44	; 0x2c
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	4613      	mov	r3, r2
 800bd38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd3e:	2b20      	cmp	r3, #32
 800bd40:	d156      	bne.n	800bdf0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d002      	beq.n	800bd4e <HAL_UART_Transmit_IT+0x22>
 800bd48:	88fb      	ldrh	r3, [r7, #6]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e04f      	b.n	800bdf2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d101      	bne.n	800bd60 <HAL_UART_Transmit_IT+0x34>
 800bd5c:	2302      	movs	r3, #2
 800bd5e:	e048      	b.n	800bdf2 <HAL_UART_Transmit_IT+0xc6>
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	88fa      	ldrh	r2, [r7, #6]
 800bd72:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	88fa      	ldrh	r2, [r7, #6]
 800bd7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2221      	movs	r2, #33	; 0x21
 800bd90:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd9a:	d107      	bne.n	800bdac <HAL_UART_Transmit_IT+0x80>
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	691b      	ldr	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d103      	bne.n	800bdac <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4a16      	ldr	r2, [pc, #88]	; (800be00 <HAL_UART_Transmit_IT+0xd4>)
 800bda8:	669a      	str	r2, [r3, #104]	; 0x68
 800bdaa:	e002      	b.n	800bdb2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	4a15      	ldr	r2, [pc, #84]	; (800be04 <HAL_UART_Transmit_IT+0xd8>)
 800bdb0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	613b      	str	r3, [r7, #16]
   return(result);
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdce:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd8:	623b      	str	r3, [r7, #32]
 800bdda:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bddc:	69f9      	ldr	r1, [r7, #28]
 800bdde:	6a3a      	ldr	r2, [r7, #32]
 800bde0:	e841 2300 	strex	r3, r2, [r1]
 800bde4:	61bb      	str	r3, [r7, #24]
   return(result);
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1e6      	bne.n	800bdba <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	e000      	b.n	800bdf2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800bdf0:	2302      	movs	r3, #2
  }
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	372c      	adds	r7, #44	; 0x2c
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	0800d0b3 	.word	0x0800d0b3
 800be04:	0800cffb 	.word	0x0800cffb

0800be08 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	; 0x28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	4613      	mov	r3, r2
 800be14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be1a:	2b20      	cmp	r3, #32
 800be1c:	d142      	bne.n	800bea4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d002      	beq.n	800be2a <HAL_UART_Receive_IT+0x22>
 800be24:	88fb      	ldrh	r3, [r7, #6]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e03b      	b.n	800bea6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800be34:	2b01      	cmp	r3, #1
 800be36:	d101      	bne.n	800be3c <HAL_UART_Receive_IT+0x34>
 800be38:	2302      	movs	r3, #2
 800be3a:	e034      	b.n	800bea6 <HAL_UART_Receive_IT+0x9e>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4a18      	ldr	r2, [pc, #96]	; (800beb0 <HAL_UART_Receive_IT+0xa8>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d01f      	beq.n	800be94 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d018      	beq.n	800be94 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	e853 3f00 	ldrex	r3, [r3]
 800be6e:	613b      	str	r3, [r7, #16]
   return(result);
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be76:	627b      	str	r3, [r7, #36]	; 0x24
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	461a      	mov	r2, r3
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	623b      	str	r3, [r7, #32]
 800be82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be84:	69f9      	ldr	r1, [r7, #28]
 800be86:	6a3a      	ldr	r2, [r7, #32]
 800be88:	e841 2300 	strex	r3, r2, [r1]
 800be8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e6      	bne.n	800be62 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800be94:	88fb      	ldrh	r3, [r7, #6]
 800be96:	461a      	mov	r2, r3
 800be98:	68b9      	ldr	r1, [r7, #8]
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 ff6a 	bl	800cd74 <UART_Start_Receive_IT>
 800bea0:	4603      	mov	r3, r0
 800bea2:	e000      	b.n	800bea6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800bea4:	2302      	movs	r3, #2
  }
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3728      	adds	r7, #40	; 0x28
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	40008000 	.word	0x40008000

0800beb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b0ba      	sub	sp, #232	; 0xe8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800beda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bede:	f640 030f 	movw	r3, #2063	; 0x80f
 800bee2:	4013      	ands	r3, r2
 800bee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d115      	bne.n	800bf1c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00f      	beq.n	800bf1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800befc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf00:	f003 0320 	and.w	r3, r3, #32
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d009      	beq.n	800bf1c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f000 82a6 	beq.w	800c45e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	4798      	blx	r3
      }
      return;
 800bf1a:	e2a0      	b.n	800c45e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800bf1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 8117 	beq.w	800c154 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bf26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d106      	bne.n	800bf40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bf32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bf36:	4b85      	ldr	r3, [pc, #532]	; (800c14c <HAL_UART_IRQHandler+0x298>)
 800bf38:	4013      	ands	r3, r2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 810a 	beq.w	800c154 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bf40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d011      	beq.n	800bf70 <HAL_UART_IRQHandler+0xbc>
 800bf4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00b      	beq.n	800bf70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf66:	f043 0201 	orr.w	r2, r3, #1
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf74:	f003 0302 	and.w	r3, r3, #2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d011      	beq.n	800bfa0 <HAL_UART_IRQHandler+0xec>
 800bf7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf80:	f003 0301 	and.w	r3, r3, #1
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf96:	f043 0204 	orr.w	r2, r3, #4
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bfa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa4:	f003 0304 	and.w	r3, r3, #4
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d011      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x11c>
 800bfac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d00b      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2204      	movs	r2, #4
 800bfbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfc6:	f043 0202 	orr.w	r2, r3, #2
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bfd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfd4:	f003 0308 	and.w	r3, r3, #8
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d017      	beq.n	800c00c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bfdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfe0:	f003 0320 	and.w	r3, r3, #32
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d105      	bne.n	800bff4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bfe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00b      	beq.n	800c00c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2208      	movs	r2, #8
 800bffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c002:	f043 0208 	orr.w	r2, r3, #8
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c014:	2b00      	cmp	r3, #0
 800c016:	d012      	beq.n	800c03e <HAL_UART_IRQHandler+0x18a>
 800c018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c01c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00c      	beq.n	800c03e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c02c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c034:	f043 0220 	orr.w	r2, r3, #32
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 820c 	beq.w	800c462 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00d      	beq.n	800c072 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c05a:	f003 0320 	and.w	r3, r3, #32
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d007      	beq.n	800c072 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c066:	2b00      	cmp	r3, #0
 800c068:	d003      	beq.n	800c072 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c06e:	6878      	ldr	r0, [r7, #4]
 800c070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c078:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c086:	2b40      	cmp	r3, #64	; 0x40
 800c088:	d005      	beq.n	800c096 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c08a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c08e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c092:	2b00      	cmp	r3, #0
 800c094:	d04f      	beq.n	800c136 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 ff36 	bl	800cf08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a6:	2b40      	cmp	r3, #64	; 0x40
 800c0a8:	d141      	bne.n	800c12e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3308      	adds	r3, #8
 800c0b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c0c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c0c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c0d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c0da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c0e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c0e6:	e841 2300 	strex	r3, r2, [r1]
 800c0ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c0ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d1d9      	bne.n	800c0aa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d013      	beq.n	800c126 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c102:	4a13      	ldr	r2, [pc, #76]	; (800c150 <HAL_UART_IRQHandler+0x29c>)
 800c104:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fb fffb 	bl	8008106 <HAL_DMA_Abort_IT>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d017      	beq.n	800c146 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c120:	4610      	mov	r0, r2
 800c122:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c124:	e00f      	b.n	800c146 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f9a6 	bl	800c478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c12c:	e00b      	b.n	800c146 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 f9a2 	bl	800c478 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c134:	e007      	b.n	800c146 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 f99e 	bl	800c478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c144:	e18d      	b.n	800c462 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c146:	bf00      	nop
    return;
 800c148:	e18b      	b.n	800c462 <HAL_UART_IRQHandler+0x5ae>
 800c14a:	bf00      	nop
 800c14c:	04000120 	.word	0x04000120
 800c150:	0800cfcf 	.word	0x0800cfcf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c158:	2b01      	cmp	r3, #1
 800c15a:	f040 8146 	bne.w	800c3ea <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c162:	f003 0310 	and.w	r3, r3, #16
 800c166:	2b00      	cmp	r3, #0
 800c168:	f000 813f 	beq.w	800c3ea <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c170:	f003 0310 	and.w	r3, r3, #16
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 8138 	beq.w	800c3ea <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2210      	movs	r2, #16
 800c180:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c18c:	2b40      	cmp	r3, #64	; 0x40
 800c18e:	f040 80b4 	bne.w	800c2fa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c19e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	f000 815f 	beq.w	800c466 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c1ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	f080 8157 	bcs.w	800c466 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c1be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f003 0320 	and.w	r3, r3, #32
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	f040 8085 	bne.w	800c2de <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1e0:	e853 3f00 	ldrex	r3, [r3]
 800c1e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c1e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c1ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c202:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c206:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c20a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c20e:	e841 2300 	strex	r3, r2, [r1]
 800c212:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d1da      	bne.n	800c1d4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	3308      	adds	r3, #8
 800c224:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c22e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c230:	f023 0301 	bic.w	r3, r3, #1
 800c234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	3308      	adds	r3, #8
 800c23e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c242:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c246:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c248:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c24a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c24e:	e841 2300 	strex	r3, r2, [r1]
 800c252:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c256:	2b00      	cmp	r3, #0
 800c258:	d1e1      	bne.n	800c21e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	3308      	adds	r3, #8
 800c260:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c264:	e853 3f00 	ldrex	r3, [r3]
 800c268:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c26c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3308      	adds	r3, #8
 800c27a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c27e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c280:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c282:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c284:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c286:	e841 2300 	strex	r3, r2, [r1]
 800c28a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c28c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1e3      	bne.n	800c25a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2220      	movs	r2, #32
 800c296:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2a6:	e853 3f00 	ldrex	r3, [r3]
 800c2aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c2ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ae:	f023 0310 	bic.w	r3, r3, #16
 800c2b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2c0:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c2c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c2c8:	e841 2300 	strex	r3, r2, [r1]
 800c2cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e4      	bne.n	800c29e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fb fed6 	bl	800808a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c2ea:	b29b      	uxth	r3, r3
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f8ca 	bl	800c48c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2f8:	e0b5      	b.n	800c466 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c306:	b29b      	uxth	r3, r3
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c314:	b29b      	uxth	r3, r3
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 80a7 	beq.w	800c46a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c31c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 80a2 	beq.w	800c46a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32e:	e853 3f00 	ldrex	r3, [r3]
 800c332:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c336:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c33a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	461a      	mov	r2, r3
 800c344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c348:	647b      	str	r3, [r7, #68]	; 0x44
 800c34a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c34e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c350:	e841 2300 	strex	r3, r2, [r1]
 800c354:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d1e4      	bne.n	800c326 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	3308      	adds	r3, #8
 800c362:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	e853 3f00 	ldrex	r3, [r3]
 800c36a:	623b      	str	r3, [r7, #32]
   return(result);
 800c36c:	6a3b      	ldr	r3, [r7, #32]
 800c36e:	f023 0301 	bic.w	r3, r3, #1
 800c372:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3308      	adds	r3, #8
 800c37c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c380:	633a      	str	r2, [r7, #48]	; 0x30
 800c382:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e3      	bne.n	800c35c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	e853 3f00 	ldrex	r3, [r3]
 800c3b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f023 0310 	bic.w	r3, r3, #16
 800c3ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c3c8:	61fb      	str	r3, [r7, #28]
 800c3ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3cc:	69b9      	ldr	r1, [r7, #24]
 800c3ce:	69fa      	ldr	r2, [r7, #28]
 800c3d0:	e841 2300 	strex	r3, r2, [r1]
 800c3d4:	617b      	str	r3, [r7, #20]
   return(result);
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1e4      	bne.n	800c3a6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c3dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f852 	bl	800c48c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3e8:	e03f      	b.n	800c46a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00e      	beq.n	800c414 <HAL_UART_IRQHandler+0x560>
 800c3f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d008      	beq.n	800c414 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c40a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f001 f83a 	bl	800d486 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c412:	e02d      	b.n	800c470 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d00e      	beq.n	800c43e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d008      	beq.n	800c43e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c430:	2b00      	cmp	r3, #0
 800c432:	d01c      	beq.n	800c46e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	4798      	blx	r3
    }
    return;
 800c43c:	e017      	b.n	800c46e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c43e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d012      	beq.n	800c470 <HAL_UART_IRQHandler+0x5bc>
 800c44a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c44e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00c      	beq.n	800c470 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 fe8b 	bl	800d172 <UART_EndTransmit_IT>
    return;
 800c45c:	e008      	b.n	800c470 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c45e:	bf00      	nop
 800c460:	e006      	b.n	800c470 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c462:	bf00      	nop
 800c464:	e004      	b.n	800c470 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c466:	bf00      	nop
 800c468:	e002      	b.n	800c470 <HAL_UART_IRQHandler+0x5bc>
      return;
 800c46a:	bf00      	nop
 800c46c:	e000      	b.n	800c470 <HAL_UART_IRQHandler+0x5bc>
    return;
 800c46e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800c470:	37e8      	adds	r7, #232	; 0xe8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}
 800c476:	bf00      	nop

0800c478 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c480:	bf00      	nop
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4a8:	b08a      	sub	sp, #40	; 0x28
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	431a      	orrs	r2, r3
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	69db      	ldr	r3, [r3, #28]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	4ba4      	ldr	r3, [pc, #656]	; (800c764 <UART_SetConfig+0x2c0>)
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	6812      	ldr	r2, [r2, #0]
 800c4da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c4dc:	430b      	orrs	r3, r1
 800c4de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	68da      	ldr	r2, [r3, #12]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	4a99      	ldr	r2, [pc, #612]	; (800c768 <UART_SetConfig+0x2c4>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d004      	beq.n	800c510 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6a1b      	ldr	r3, [r3, #32]
 800c50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c50c:	4313      	orrs	r3, r2
 800c50e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c520:	430a      	orrs	r2, r1
 800c522:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a90      	ldr	r2, [pc, #576]	; (800c76c <UART_SetConfig+0x2c8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d126      	bne.n	800c57c <UART_SetConfig+0xd8>
 800c52e:	4b90      	ldr	r3, [pc, #576]	; (800c770 <UART_SetConfig+0x2cc>)
 800c530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c534:	f003 0303 	and.w	r3, r3, #3
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d81b      	bhi.n	800c574 <UART_SetConfig+0xd0>
 800c53c:	a201      	add	r2, pc, #4	; (adr r2, 800c544 <UART_SetConfig+0xa0>)
 800c53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c542:	bf00      	nop
 800c544:	0800c555 	.word	0x0800c555
 800c548:	0800c565 	.word	0x0800c565
 800c54c:	0800c55d 	.word	0x0800c55d
 800c550:	0800c56d 	.word	0x0800c56d
 800c554:	2301      	movs	r3, #1
 800c556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c55a:	e116      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c55c:	2302      	movs	r3, #2
 800c55e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c562:	e112      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c564:	2304      	movs	r3, #4
 800c566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c56a:	e10e      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c56c:	2308      	movs	r3, #8
 800c56e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c572:	e10a      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c574:	2310      	movs	r3, #16
 800c576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c57a:	e106      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a7c      	ldr	r2, [pc, #496]	; (800c774 <UART_SetConfig+0x2d0>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d138      	bne.n	800c5f8 <UART_SetConfig+0x154>
 800c586:	4b7a      	ldr	r3, [pc, #488]	; (800c770 <UART_SetConfig+0x2cc>)
 800c588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c58c:	f003 030c 	and.w	r3, r3, #12
 800c590:	2b0c      	cmp	r3, #12
 800c592:	d82d      	bhi.n	800c5f0 <UART_SetConfig+0x14c>
 800c594:	a201      	add	r2, pc, #4	; (adr r2, 800c59c <UART_SetConfig+0xf8>)
 800c596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c59a:	bf00      	nop
 800c59c:	0800c5d1 	.word	0x0800c5d1
 800c5a0:	0800c5f1 	.word	0x0800c5f1
 800c5a4:	0800c5f1 	.word	0x0800c5f1
 800c5a8:	0800c5f1 	.word	0x0800c5f1
 800c5ac:	0800c5e1 	.word	0x0800c5e1
 800c5b0:	0800c5f1 	.word	0x0800c5f1
 800c5b4:	0800c5f1 	.word	0x0800c5f1
 800c5b8:	0800c5f1 	.word	0x0800c5f1
 800c5bc:	0800c5d9 	.word	0x0800c5d9
 800c5c0:	0800c5f1 	.word	0x0800c5f1
 800c5c4:	0800c5f1 	.word	0x0800c5f1
 800c5c8:	0800c5f1 	.word	0x0800c5f1
 800c5cc:	0800c5e9 	.word	0x0800c5e9
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5d6:	e0d8      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c5d8:	2302      	movs	r3, #2
 800c5da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5de:	e0d4      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c5e0:	2304      	movs	r3, #4
 800c5e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5e6:	e0d0      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c5e8:	2308      	movs	r3, #8
 800c5ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5ee:	e0cc      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c5f0:	2310      	movs	r3, #16
 800c5f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c5f6:	e0c8      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a5e      	ldr	r2, [pc, #376]	; (800c778 <UART_SetConfig+0x2d4>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d125      	bne.n	800c64e <UART_SetConfig+0x1aa>
 800c602:	4b5b      	ldr	r3, [pc, #364]	; (800c770 <UART_SetConfig+0x2cc>)
 800c604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c608:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c60c:	2b30      	cmp	r3, #48	; 0x30
 800c60e:	d016      	beq.n	800c63e <UART_SetConfig+0x19a>
 800c610:	2b30      	cmp	r3, #48	; 0x30
 800c612:	d818      	bhi.n	800c646 <UART_SetConfig+0x1a2>
 800c614:	2b20      	cmp	r3, #32
 800c616:	d00a      	beq.n	800c62e <UART_SetConfig+0x18a>
 800c618:	2b20      	cmp	r3, #32
 800c61a:	d814      	bhi.n	800c646 <UART_SetConfig+0x1a2>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <UART_SetConfig+0x182>
 800c620:	2b10      	cmp	r3, #16
 800c622:	d008      	beq.n	800c636 <UART_SetConfig+0x192>
 800c624:	e00f      	b.n	800c646 <UART_SetConfig+0x1a2>
 800c626:	2300      	movs	r3, #0
 800c628:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c62c:	e0ad      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c62e:	2302      	movs	r3, #2
 800c630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c634:	e0a9      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c636:	2304      	movs	r3, #4
 800c638:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c63c:	e0a5      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c63e:	2308      	movs	r3, #8
 800c640:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c644:	e0a1      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c646:	2310      	movs	r3, #16
 800c648:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c64c:	e09d      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a4a      	ldr	r2, [pc, #296]	; (800c77c <UART_SetConfig+0x2d8>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d125      	bne.n	800c6a4 <UART_SetConfig+0x200>
 800c658:	4b45      	ldr	r3, [pc, #276]	; (800c770 <UART_SetConfig+0x2cc>)
 800c65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c65e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c662:	2bc0      	cmp	r3, #192	; 0xc0
 800c664:	d016      	beq.n	800c694 <UART_SetConfig+0x1f0>
 800c666:	2bc0      	cmp	r3, #192	; 0xc0
 800c668:	d818      	bhi.n	800c69c <UART_SetConfig+0x1f8>
 800c66a:	2b80      	cmp	r3, #128	; 0x80
 800c66c:	d00a      	beq.n	800c684 <UART_SetConfig+0x1e0>
 800c66e:	2b80      	cmp	r3, #128	; 0x80
 800c670:	d814      	bhi.n	800c69c <UART_SetConfig+0x1f8>
 800c672:	2b00      	cmp	r3, #0
 800c674:	d002      	beq.n	800c67c <UART_SetConfig+0x1d8>
 800c676:	2b40      	cmp	r3, #64	; 0x40
 800c678:	d008      	beq.n	800c68c <UART_SetConfig+0x1e8>
 800c67a:	e00f      	b.n	800c69c <UART_SetConfig+0x1f8>
 800c67c:	2300      	movs	r3, #0
 800c67e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c682:	e082      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c684:	2302      	movs	r3, #2
 800c686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c68a:	e07e      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c68c:	2304      	movs	r3, #4
 800c68e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c692:	e07a      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c694:	2308      	movs	r3, #8
 800c696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c69a:	e076      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c69c:	2310      	movs	r3, #16
 800c69e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6a2:	e072      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a35      	ldr	r2, [pc, #212]	; (800c780 <UART_SetConfig+0x2dc>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d12a      	bne.n	800c704 <UART_SetConfig+0x260>
 800c6ae:	4b30      	ldr	r3, [pc, #192]	; (800c770 <UART_SetConfig+0x2cc>)
 800c6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c6b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6bc:	d01a      	beq.n	800c6f4 <UART_SetConfig+0x250>
 800c6be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6c2:	d81b      	bhi.n	800c6fc <UART_SetConfig+0x258>
 800c6c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6c8:	d00c      	beq.n	800c6e4 <UART_SetConfig+0x240>
 800c6ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6ce:	d815      	bhi.n	800c6fc <UART_SetConfig+0x258>
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d003      	beq.n	800c6dc <UART_SetConfig+0x238>
 800c6d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6d8:	d008      	beq.n	800c6ec <UART_SetConfig+0x248>
 800c6da:	e00f      	b.n	800c6fc <UART_SetConfig+0x258>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6e2:	e052      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6ea:	e04e      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c6ec:	2304      	movs	r3, #4
 800c6ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6f2:	e04a      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c6f4:	2308      	movs	r3, #8
 800c6f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c6fa:	e046      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c6fc:	2310      	movs	r3, #16
 800c6fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c702:	e042      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a17      	ldr	r2, [pc, #92]	; (800c768 <UART_SetConfig+0x2c4>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d13a      	bne.n	800c784 <UART_SetConfig+0x2e0>
 800c70e:	4b18      	ldr	r3, [pc, #96]	; (800c770 <UART_SetConfig+0x2cc>)
 800c710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c714:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c718:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c71c:	d01a      	beq.n	800c754 <UART_SetConfig+0x2b0>
 800c71e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c722:	d81b      	bhi.n	800c75c <UART_SetConfig+0x2b8>
 800c724:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c728:	d00c      	beq.n	800c744 <UART_SetConfig+0x2a0>
 800c72a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c72e:	d815      	bhi.n	800c75c <UART_SetConfig+0x2b8>
 800c730:	2b00      	cmp	r3, #0
 800c732:	d003      	beq.n	800c73c <UART_SetConfig+0x298>
 800c734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c738:	d008      	beq.n	800c74c <UART_SetConfig+0x2a8>
 800c73a:	e00f      	b.n	800c75c <UART_SetConfig+0x2b8>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c742:	e022      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c744:	2302      	movs	r3, #2
 800c746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c74a:	e01e      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c74c:	2304      	movs	r3, #4
 800c74e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c752:	e01a      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c754:	2308      	movs	r3, #8
 800c756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c75a:	e016      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c75c:	2310      	movs	r3, #16
 800c75e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c762:	e012      	b.n	800c78a <UART_SetConfig+0x2e6>
 800c764:	efff69f3 	.word	0xefff69f3
 800c768:	40008000 	.word	0x40008000
 800c76c:	40013800 	.word	0x40013800
 800c770:	40021000 	.word	0x40021000
 800c774:	40004400 	.word	0x40004400
 800c778:	40004800 	.word	0x40004800
 800c77c:	40004c00 	.word	0x40004c00
 800c780:	40005000 	.word	0x40005000
 800c784:	2310      	movs	r3, #16
 800c786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a9f      	ldr	r2, [pc, #636]	; (800ca0c <UART_SetConfig+0x568>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d17a      	bne.n	800c88a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c794:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c798:	2b08      	cmp	r3, #8
 800c79a:	d824      	bhi.n	800c7e6 <UART_SetConfig+0x342>
 800c79c:	a201      	add	r2, pc, #4	; (adr r2, 800c7a4 <UART_SetConfig+0x300>)
 800c79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a2:	bf00      	nop
 800c7a4:	0800c7c9 	.word	0x0800c7c9
 800c7a8:	0800c7e7 	.word	0x0800c7e7
 800c7ac:	0800c7d1 	.word	0x0800c7d1
 800c7b0:	0800c7e7 	.word	0x0800c7e7
 800c7b4:	0800c7d7 	.word	0x0800c7d7
 800c7b8:	0800c7e7 	.word	0x0800c7e7
 800c7bc:	0800c7e7 	.word	0x0800c7e7
 800c7c0:	0800c7e7 	.word	0x0800c7e7
 800c7c4:	0800c7df 	.word	0x0800c7df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7c8:	f7fd fbb0 	bl	8009f2c <HAL_RCC_GetPCLK1Freq>
 800c7cc:	61f8      	str	r0, [r7, #28]
        break;
 800c7ce:	e010      	b.n	800c7f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7d0:	4b8f      	ldr	r3, [pc, #572]	; (800ca10 <UART_SetConfig+0x56c>)
 800c7d2:	61fb      	str	r3, [r7, #28]
        break;
 800c7d4:	e00d      	b.n	800c7f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7d6:	f7fd fb11 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800c7da:	61f8      	str	r0, [r7, #28]
        break;
 800c7dc:	e009      	b.n	800c7f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7e2:	61fb      	str	r3, [r7, #28]
        break;
 800c7e4:	e005      	b.n	800c7f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c7f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f000 80fb 	beq.w	800c9f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	685a      	ldr	r2, [r3, #4]
 800c7fe:	4613      	mov	r3, r2
 800c800:	005b      	lsls	r3, r3, #1
 800c802:	4413      	add	r3, r2
 800c804:	69fa      	ldr	r2, [r7, #28]
 800c806:	429a      	cmp	r2, r3
 800c808:	d305      	bcc.n	800c816 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800c810:	69fa      	ldr	r2, [r7, #28]
 800c812:	429a      	cmp	r2, r3
 800c814:	d903      	bls.n	800c81e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800c816:	2301      	movs	r3, #1
 800c818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c81c:	e0e8      	b.n	800c9f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	2200      	movs	r2, #0
 800c822:	461c      	mov	r4, r3
 800c824:	4615      	mov	r5, r2
 800c826:	f04f 0200 	mov.w	r2, #0
 800c82a:	f04f 0300 	mov.w	r3, #0
 800c82e:	022b      	lsls	r3, r5, #8
 800c830:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800c834:	0222      	lsls	r2, r4, #8
 800c836:	68f9      	ldr	r1, [r7, #12]
 800c838:	6849      	ldr	r1, [r1, #4]
 800c83a:	0849      	lsrs	r1, r1, #1
 800c83c:	2000      	movs	r0, #0
 800c83e:	4688      	mov	r8, r1
 800c840:	4681      	mov	r9, r0
 800c842:	eb12 0a08 	adds.w	sl, r2, r8
 800c846:	eb43 0b09 	adc.w	fp, r3, r9
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	603b      	str	r3, [r7, #0]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c858:	4650      	mov	r0, sl
 800c85a:	4659      	mov	r1, fp
 800c85c:	f7f4 fa24 	bl	8000ca8 <__aeabi_uldivmod>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	4613      	mov	r3, r2
 800c866:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c86e:	d308      	bcc.n	800c882 <UART_SetConfig+0x3de>
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c876:	d204      	bcs.n	800c882 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	69ba      	ldr	r2, [r7, #24]
 800c87e:	60da      	str	r2, [r3, #12]
 800c880:	e0b6      	b.n	800c9f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c888:	e0b2      	b.n	800c9f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c892:	d15e      	bne.n	800c952 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800c894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c898:	2b08      	cmp	r3, #8
 800c89a:	d828      	bhi.n	800c8ee <UART_SetConfig+0x44a>
 800c89c:	a201      	add	r2, pc, #4	; (adr r2, 800c8a4 <UART_SetConfig+0x400>)
 800c89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a2:	bf00      	nop
 800c8a4:	0800c8c9 	.word	0x0800c8c9
 800c8a8:	0800c8d1 	.word	0x0800c8d1
 800c8ac:	0800c8d9 	.word	0x0800c8d9
 800c8b0:	0800c8ef 	.word	0x0800c8ef
 800c8b4:	0800c8df 	.word	0x0800c8df
 800c8b8:	0800c8ef 	.word	0x0800c8ef
 800c8bc:	0800c8ef 	.word	0x0800c8ef
 800c8c0:	0800c8ef 	.word	0x0800c8ef
 800c8c4:	0800c8e7 	.word	0x0800c8e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8c8:	f7fd fb30 	bl	8009f2c <HAL_RCC_GetPCLK1Freq>
 800c8cc:	61f8      	str	r0, [r7, #28]
        break;
 800c8ce:	e014      	b.n	800c8fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8d0:	f7fd fb42 	bl	8009f58 <HAL_RCC_GetPCLK2Freq>
 800c8d4:	61f8      	str	r0, [r7, #28]
        break;
 800c8d6:	e010      	b.n	800c8fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c8d8:	4b4d      	ldr	r3, [pc, #308]	; (800ca10 <UART_SetConfig+0x56c>)
 800c8da:	61fb      	str	r3, [r7, #28]
        break;
 800c8dc:	e00d      	b.n	800c8fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c8de:	f7fd fa8d 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800c8e2:	61f8      	str	r0, [r7, #28]
        break;
 800c8e4:	e009      	b.n	800c8fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8ea:	61fb      	str	r3, [r7, #28]
        break;
 800c8ec:	e005      	b.n	800c8fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c8f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d077      	beq.n	800c9f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	005a      	lsls	r2, r3, #1
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	085b      	lsrs	r3, r3, #1
 800c90a:	441a      	add	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	fbb2 f3f3 	udiv	r3, r2, r3
 800c914:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	2b0f      	cmp	r3, #15
 800c91a:	d916      	bls.n	800c94a <UART_SetConfig+0x4a6>
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c922:	d212      	bcs.n	800c94a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	b29b      	uxth	r3, r3
 800c928:	f023 030f 	bic.w	r3, r3, #15
 800c92c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	085b      	lsrs	r3, r3, #1
 800c932:	b29b      	uxth	r3, r3
 800c934:	f003 0307 	and.w	r3, r3, #7
 800c938:	b29a      	uxth	r2, r3
 800c93a:	8afb      	ldrh	r3, [r7, #22]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	8afa      	ldrh	r2, [r7, #22]
 800c946:	60da      	str	r2, [r3, #12]
 800c948:	e052      	b.n	800c9f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c94a:	2301      	movs	r3, #1
 800c94c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800c950:	e04e      	b.n	800c9f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c956:	2b08      	cmp	r3, #8
 800c958:	d827      	bhi.n	800c9aa <UART_SetConfig+0x506>
 800c95a:	a201      	add	r2, pc, #4	; (adr r2, 800c960 <UART_SetConfig+0x4bc>)
 800c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c960:	0800c985 	.word	0x0800c985
 800c964:	0800c98d 	.word	0x0800c98d
 800c968:	0800c995 	.word	0x0800c995
 800c96c:	0800c9ab 	.word	0x0800c9ab
 800c970:	0800c99b 	.word	0x0800c99b
 800c974:	0800c9ab 	.word	0x0800c9ab
 800c978:	0800c9ab 	.word	0x0800c9ab
 800c97c:	0800c9ab 	.word	0x0800c9ab
 800c980:	0800c9a3 	.word	0x0800c9a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c984:	f7fd fad2 	bl	8009f2c <HAL_RCC_GetPCLK1Freq>
 800c988:	61f8      	str	r0, [r7, #28]
        break;
 800c98a:	e014      	b.n	800c9b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c98c:	f7fd fae4 	bl	8009f58 <HAL_RCC_GetPCLK2Freq>
 800c990:	61f8      	str	r0, [r7, #28]
        break;
 800c992:	e010      	b.n	800c9b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c994:	4b1e      	ldr	r3, [pc, #120]	; (800ca10 <UART_SetConfig+0x56c>)
 800c996:	61fb      	str	r3, [r7, #28]
        break;
 800c998:	e00d      	b.n	800c9b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c99a:	f7fd fa2f 	bl	8009dfc <HAL_RCC_GetSysClockFreq>
 800c99e:	61f8      	str	r0, [r7, #28]
        break;
 800c9a0:	e009      	b.n	800c9b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c9a6:	61fb      	str	r3, [r7, #28]
        break;
 800c9a8:	e005      	b.n	800c9b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800c9b4:	bf00      	nop
    }

    if (pclk != 0U)
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d019      	beq.n	800c9f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	085a      	lsrs	r2, r3, #1
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	441a      	add	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	2b0f      	cmp	r3, #15
 800c9d4:	d909      	bls.n	800c9ea <UART_SetConfig+0x546>
 800c9d6:	69bb      	ldr	r3, [r7, #24]
 800c9d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9dc:	d205      	bcs.n	800c9ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	b29a      	uxth	r2, r3
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60da      	str	r2, [r3, #12]
 800c9e8:	e002      	b.n	800c9f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c9fc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3728      	adds	r7, #40	; 0x28
 800ca04:	46bd      	mov	sp, r7
 800ca06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca0a:	bf00      	nop
 800ca0c:	40008000 	.word	0x40008000
 800ca10:	00f42400 	.word	0x00f42400

0800ca14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b083      	sub	sp, #12
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00a      	beq.n	800ca3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	430a      	orrs	r2, r1
 800ca3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca42:	f003 0302 	and.w	r3, r3, #2
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00a      	beq.n	800ca60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	430a      	orrs	r2, r1
 800ca5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	f003 0304 	and.w	r3, r3, #4
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d00a      	beq.n	800ca82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	430a      	orrs	r2, r1
 800ca80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca86:	f003 0308 	and.w	r3, r3, #8
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00a      	beq.n	800caa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	430a      	orrs	r2, r1
 800caa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa8:	f003 0310 	and.w	r3, r3, #16
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00a      	beq.n	800cac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	430a      	orrs	r2, r1
 800cac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caca:	f003 0320 	and.w	r3, r3, #32
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d00a      	beq.n	800cae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	689b      	ldr	r3, [r3, #8]
 800cad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	430a      	orrs	r2, r1
 800cae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d01a      	beq.n	800cb2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	430a      	orrs	r2, r1
 800cb08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb12:	d10a      	bne.n	800cb2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	430a      	orrs	r2, r1
 800cb28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d00a      	beq.n	800cb4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	430a      	orrs	r2, r1
 800cb4a:	605a      	str	r2, [r3, #4]
  }
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af02      	add	r7, sp, #8
 800cb5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cb68:	f7f9 ffe6 	bl	8006b38 <HAL_GetTick>
 800cb6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0308 	and.w	r3, r3, #8
 800cb78:	2b08      	cmp	r3, #8
 800cb7a:	d10e      	bne.n	800cb9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cb7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 f82d 	bl	800cbea <UART_WaitOnFlagUntilTimeout>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e023      	b.n	800cbe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b04      	cmp	r3, #4
 800cba6:	d10e      	bne.n	800cbc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cbac:	9300      	str	r3, [sp, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f817 	bl	800cbea <UART_WaitOnFlagUntilTimeout>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	e00d      	b.n	800cbe2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2220      	movs	r2, #32
 800cbca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2220      	movs	r2, #32
 800cbd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800cbe0:	2300      	movs	r3, #0
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cbea:	b580      	push	{r7, lr}
 800cbec:	b09c      	sub	sp, #112	; 0x70
 800cbee:	af00      	add	r7, sp, #0
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	603b      	str	r3, [r7, #0]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cbfa:	e0a5      	b.n	800cd48 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cbfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc02:	f000 80a1 	beq.w	800cd48 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc06:	f7f9 ff97 	bl	8006b38 <HAL_GetTick>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	1ad3      	subs	r3, r2, r3
 800cc10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d302      	bcc.n	800cc1c <UART_WaitOnFlagUntilTimeout+0x32>
 800cc16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d13e      	bne.n	800cc9a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc24:	e853 3f00 	ldrex	r3, [r3]
 800cc28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cc2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cc30:	667b      	str	r3, [r7, #100]	; 0x64
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	461a      	mov	r2, r3
 800cc38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc42:	e841 2300 	strex	r3, r2, [r1]
 800cc46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cc48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1e6      	bne.n	800cc1c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3308      	adds	r3, #8
 800cc54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc58:	e853 3f00 	ldrex	r3, [r3]
 800cc5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc60:	f023 0301 	bic.w	r3, r3, #1
 800cc64:	663b      	str	r3, [r7, #96]	; 0x60
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	3308      	adds	r3, #8
 800cc6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc6e:	64ba      	str	r2, [r7, #72]	; 0x48
 800cc70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cc74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc76:	e841 2300 	strex	r3, r2, [r1]
 800cc7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cc7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1e5      	bne.n	800cc4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2220      	movs	r2, #32
 800cc86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2200      	movs	r2, #0
 800cc92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e067      	b.n	800cd6a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f003 0304 	and.w	r3, r3, #4
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d04f      	beq.n	800cd48 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ccb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccb6:	d147      	bne.n	800cd48 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccc0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	e853 3f00 	ldrex	r3, [r3]
 800ccce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ccd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ccd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cce0:	637b      	str	r3, [r7, #52]	; 0x34
 800cce2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cce8:	e841 2300 	strex	r3, r2, [r1]
 800ccec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1e6      	bne.n	800ccc2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	e853 3f00 	ldrex	r3, [r3]
 800cd02:	613b      	str	r3, [r7, #16]
   return(result);
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f023 0301 	bic.w	r3, r3, #1
 800cd0a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	3308      	adds	r3, #8
 800cd12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd14:	623a      	str	r2, [r7, #32]
 800cd16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd18:	69f9      	ldr	r1, [r7, #28]
 800cd1a:	6a3a      	ldr	r2, [r7, #32]
 800cd1c:	e841 2300 	strex	r3, r2, [r1]
 800cd20:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1e5      	bne.n	800ccf4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2220      	movs	r2, #32
 800cd32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2220      	movs	r2, #32
 800cd38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800cd44:	2303      	movs	r3, #3
 800cd46:	e010      	b.n	800cd6a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	69da      	ldr	r2, [r3, #28]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	4013      	ands	r3, r2
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	bf0c      	ite	eq
 800cd58:	2301      	moveq	r3, #1
 800cd5a:	2300      	movne	r3, #0
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	461a      	mov	r2, r3
 800cd60:	79fb      	ldrb	r3, [r7, #7]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	f43f af4a 	beq.w	800cbfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3770      	adds	r7, #112	; 0x70
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
	...

0800cd74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b097      	sub	sp, #92	; 0x5c
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	88fa      	ldrh	r2, [r7, #6]
 800cd8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	88fa      	ldrh	r2, [r7, #6]
 800cd94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cda6:	d10e      	bne.n	800cdc6 <UART_Start_Receive_IT+0x52>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	691b      	ldr	r3, [r3, #16]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d105      	bne.n	800cdbc <UART_Start_Receive_IT+0x48>
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cdb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cdba:	e02d      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	22ff      	movs	r2, #255	; 0xff
 800cdc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cdc4:	e028      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d10d      	bne.n	800cdea <UART_Start_Receive_IT+0x76>
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d104      	bne.n	800cde0 <UART_Start_Receive_IT+0x6c>
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	22ff      	movs	r2, #255	; 0xff
 800cdda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cdde:	e01b      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	227f      	movs	r2, #127	; 0x7f
 800cde4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cde8:	e016      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cdf2:	d10d      	bne.n	800ce10 <UART_Start_Receive_IT+0x9c>
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d104      	bne.n	800ce06 <UART_Start_Receive_IT+0x92>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	227f      	movs	r2, #127	; 0x7f
 800ce00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce04:	e008      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	223f      	movs	r2, #63	; 0x3f
 800ce0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ce0e:	e003      	b.n	800ce18 <UART_Start_Receive_IT+0xa4>
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	2222      	movs	r2, #34	; 0x22
 800ce24:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	3308      	adds	r3, #8
 800ce2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce30:	e853 3f00 	ldrex	r3, [r3]
 800ce34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce38:	f043 0301 	orr.w	r3, r3, #1
 800ce3c:	657b      	str	r3, [r7, #84]	; 0x54
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3308      	adds	r3, #8
 800ce44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce46:	64ba      	str	r2, [r7, #72]	; 0x48
 800ce48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ce4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ce4e:	e841 2300 	strex	r3, r2, [r1]
 800ce52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ce54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1e5      	bne.n	800ce26 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce62:	d107      	bne.n	800ce74 <UART_Start_Receive_IT+0x100>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d103      	bne.n	800ce74 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	4a24      	ldr	r2, [pc, #144]	; (800cf00 <UART_Start_Receive_IT+0x18c>)
 800ce70:	665a      	str	r2, [r3, #100]	; 0x64
 800ce72:	e002      	b.n	800ce7a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	4a23      	ldr	r2, [pc, #140]	; (800cf04 <UART_Start_Receive_IT+0x190>)
 800ce78:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d019      	beq.n	800cebe <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce92:	e853 3f00 	ldrex	r3, [r3]
 800ce96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ce9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	461a      	mov	r2, r3
 800cea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea8:	637b      	str	r3, [r7, #52]	; 0x34
 800ceaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ceae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceb0:	e841 2300 	strex	r3, r2, [r1]
 800ceb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1e6      	bne.n	800ce8a <UART_Start_Receive_IT+0x116>
 800cebc:	e018      	b.n	800cef0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	e853 3f00 	ldrex	r3, [r3]
 800ceca:	613b      	str	r3, [r7, #16]
   return(result);
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	f043 0320 	orr.w	r3, r3, #32
 800ced2:	653b      	str	r3, [r7, #80]	; 0x50
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	461a      	mov	r2, r3
 800ceda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cedc:	623b      	str	r3, [r7, #32]
 800cede:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee0:	69f9      	ldr	r1, [r7, #28]
 800cee2:	6a3a      	ldr	r2, [r7, #32]
 800cee4:	e841 2300 	strex	r3, r2, [r1]
 800cee8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d1e6      	bne.n	800cebe <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800cef0:	2300      	movs	r3, #0
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	375c      	adds	r7, #92	; 0x5c
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	0800d327 	.word	0x0800d327
 800cf04:	0800d1c7 	.word	0x0800d1c7

0800cf08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b095      	sub	sp, #84	; 0x54
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf18:	e853 3f00 	ldrex	r3, [r3]
 800cf1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	461a      	mov	r2, r3
 800cf2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf2e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf36:	e841 2300 	strex	r3, r2, [r1]
 800cf3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1e6      	bne.n	800cf10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	3308      	adds	r3, #8
 800cf48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4a:	6a3b      	ldr	r3, [r7, #32]
 800cf4c:	e853 3f00 	ldrex	r3, [r3]
 800cf50:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf52:	69fb      	ldr	r3, [r7, #28]
 800cf54:	f023 0301 	bic.w	r3, r3, #1
 800cf58:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf6a:	e841 2300 	strex	r3, r2, [r1]
 800cf6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e5      	bne.n	800cf42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d118      	bne.n	800cfb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	e853 3f00 	ldrex	r3, [r3]
 800cf8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	f023 0310 	bic.w	r3, r3, #16
 800cf92:	647b      	str	r3, [r7, #68]	; 0x44
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	461a      	mov	r2, r3
 800cf9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf9c:	61bb      	str	r3, [r7, #24]
 800cf9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa0:	6979      	ldr	r1, [r7, #20]
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	e841 2300 	strex	r3, r2, [r1]
 800cfa8:	613b      	str	r3, [r7, #16]
   return(result);
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1e6      	bne.n	800cf7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	665a      	str	r2, [r3, #100]	; 0x64
}
 800cfc2:	bf00      	nop
 800cfc4:	3754      	adds	r7, #84	; 0x54
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr

0800cfce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b084      	sub	sp, #16
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f7ff fa43 	bl	800c478 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cff2:	bf00      	nop
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cffa:	b480      	push	{r7}
 800cffc:	b08f      	sub	sp, #60	; 0x3c
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d006:	2b21      	cmp	r3, #33	; 0x21
 800d008:	d14d      	bne.n	800d0a6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d010:	b29b      	uxth	r3, r3
 800d012:	2b00      	cmp	r3, #0
 800d014:	d132      	bne.n	800d07c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	e853 3f00 	ldrex	r3, [r3]
 800d022:	61fb      	str	r3, [r7, #28]
   return(result);
 800d024:	69fb      	ldr	r3, [r7, #28]
 800d026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d02a:	637b      	str	r3, [r7, #52]	; 0x34
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	461a      	mov	r2, r3
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d034:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d036:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d03c:	e841 2300 	strex	r3, r2, [r1]
 800d040:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	2b00      	cmp	r3, #0
 800d046:	d1e6      	bne.n	800d016 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	e853 3f00 	ldrex	r3, [r3]
 800d054:	60bb      	str	r3, [r7, #8]
   return(result);
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d05c:	633b      	str	r3, [r7, #48]	; 0x30
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d066:	61bb      	str	r3, [r7, #24]
 800d068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06a:	6979      	ldr	r1, [r7, #20]
 800d06c:	69ba      	ldr	r2, [r7, #24]
 800d06e:	e841 2300 	strex	r3, r2, [r1]
 800d072:	613b      	str	r3, [r7, #16]
   return(result);
 800d074:	693b      	ldr	r3, [r7, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1e6      	bne.n	800d048 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d07a:	e014      	b.n	800d0a6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d080:	781a      	ldrb	r2, [r3, #0]
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	b292      	uxth	r2, r2
 800d088:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d08e:	1c5a      	adds	r2, r3, #1
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	3b01      	subs	r3, #1
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d0a6:	bf00      	nop
 800d0a8:	373c      	adds	r7, #60	; 0x3c
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr

0800d0b2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d0b2:	b480      	push	{r7}
 800d0b4:	b091      	sub	sp, #68	; 0x44
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0be:	2b21      	cmp	r3, #33	; 0x21
 800d0c0:	d151      	bne.n	800d166 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d132      	bne.n	800d134 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	e853 3f00 	ldrex	r3, [r3]
 800d0da:	623b      	str	r3, [r7, #32]
   return(result);
 800d0dc:	6a3b      	ldr	r3, [r7, #32]
 800d0de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0e2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ec:	633b      	str	r3, [r7, #48]	; 0x30
 800d0ee:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f4:	e841 2300 	strex	r3, r2, [r1]
 800d0f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1e6      	bne.n	800d0ce <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	e853 3f00 	ldrex	r3, [r3]
 800d10c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d114:	637b      	str	r3, [r7, #52]	; 0x34
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11e:	61fb      	str	r3, [r7, #28]
 800d120:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	69b9      	ldr	r1, [r7, #24]
 800d124:	69fa      	ldr	r2, [r7, #28]
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	617b      	str	r3, [r7, #20]
   return(result);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e6      	bne.n	800d100 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d132:	e018      	b.n	800d166 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d138:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13c:	881a      	ldrh	r2, [r3, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d146:	b292      	uxth	r2, r2
 800d148:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d14e:	1c9a      	adds	r2, r3, #2
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	3b01      	subs	r3, #1
 800d15e:	b29a      	uxth	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d166:	bf00      	nop
 800d168:	3744      	adds	r7, #68	; 0x44
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr

0800d172 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d172:	b580      	push	{r7, lr}
 800d174:	b088      	sub	sp, #32
 800d176:	af00      	add	r7, sp, #0
 800d178:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	e853 3f00 	ldrex	r3, [r3]
 800d186:	60bb      	str	r3, [r7, #8]
   return(result);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d18e:	61fb      	str	r3, [r7, #28]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	461a      	mov	r2, r3
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	61bb      	str	r3, [r7, #24]
 800d19a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19c:	6979      	ldr	r1, [r7, #20]
 800d19e:	69ba      	ldr	r2, [r7, #24]
 800d1a0:	e841 2300 	strex	r3, r2, [r1]
 800d1a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1e6      	bne.n	800d17a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2220      	movs	r2, #32
 800d1b0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7f3 ff8b 	bl	80010d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1be:	bf00      	nop
 800d1c0:	3720      	adds	r7, #32
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b096      	sub	sp, #88	; 0x58
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1dc:	2b22      	cmp	r3, #34	; 0x22
 800d1de:	f040 8094 	bne.w	800d30a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d1e8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d1ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d1f0:	b2d9      	uxtb	r1, r3
 800d1f2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d1f6:	b2da      	uxtb	r2, r3
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1fc:	400a      	ands	r2, r1
 800d1fe:	b2d2      	uxtb	r2, r2
 800d200:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d206:	1c5a      	adds	r2, r3, #1
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d212:	b29b      	uxth	r3, r3
 800d214:	3b01      	subs	r3, #1
 800d216:	b29a      	uxth	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d224:	b29b      	uxth	r3, r3
 800d226:	2b00      	cmp	r3, #0
 800d228:	d179      	bne.n	800d31e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d232:	e853 3f00 	ldrex	r3, [r3]
 800d236:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d23a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d23e:	653b      	str	r3, [r7, #80]	; 0x50
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	461a      	mov	r2, r3
 800d246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d248:	647b      	str	r3, [r7, #68]	; 0x44
 800d24a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d24e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d250:	e841 2300 	strex	r3, r2, [r1]
 800d254:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1e6      	bne.n	800d22a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3308      	adds	r3, #8
 800d262:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	e853 3f00 	ldrex	r3, [r3]
 800d26a:	623b      	str	r3, [r7, #32]
   return(result);
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	f023 0301 	bic.w	r3, r3, #1
 800d272:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	3308      	adds	r3, #8
 800d27a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d27c:	633a      	str	r2, [r7, #48]	; 0x30
 800d27e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d280:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d284:	e841 2300 	strex	r3, r2, [r1]
 800d288:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e5      	bne.n	800d25c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2220      	movs	r2, #32
 800d294:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2200      	movs	r2, #0
 800d29a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d12e      	bne.n	800d302 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	e853 3f00 	ldrex	r3, [r3]
 800d2b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f023 0310 	bic.w	r3, r3, #16
 800d2be:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2c8:	61fb      	str	r3, [r7, #28]
 800d2ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2cc:	69b9      	ldr	r1, [r7, #24]
 800d2ce:	69fa      	ldr	r2, [r7, #28]
 800d2d0:	e841 2300 	strex	r3, r2, [r1]
 800d2d4:	617b      	str	r3, [r7, #20]
   return(result);
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1e6      	bne.n	800d2aa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	69db      	ldr	r3, [r3, #28]
 800d2e2:	f003 0310 	and.w	r3, r3, #16
 800d2e6:	2b10      	cmp	r3, #16
 800d2e8:	d103      	bne.n	800d2f2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2210      	movs	r2, #16
 800d2f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff f8c6 	bl	800c48c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d300:	e00d      	b.n	800d31e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7f3 fef0 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 800d308:	e009      	b.n	800d31e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	8b1b      	ldrh	r3, [r3, #24]
 800d310:	b29a      	uxth	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0208 	orr.w	r2, r2, #8
 800d31a:	b292      	uxth	r2, r2
 800d31c:	831a      	strh	r2, [r3, #24]
}
 800d31e:	bf00      	nop
 800d320:	3758      	adds	r7, #88	; 0x58
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}

0800d326 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d326:	b580      	push	{r7, lr}
 800d328:	b096      	sub	sp, #88	; 0x58
 800d32a:	af00      	add	r7, sp, #0
 800d32c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d334:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d33c:	2b22      	cmp	r3, #34	; 0x22
 800d33e:	f040 8094 	bne.w	800d46a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d348:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d350:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d352:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d356:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d35a:	4013      	ands	r3, r2
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d360:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d366:	1c9a      	adds	r2, r3, #2
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d372:	b29b      	uxth	r3, r3
 800d374:	3b01      	subs	r3, #1
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d384:	b29b      	uxth	r3, r3
 800d386:	2b00      	cmp	r3, #0
 800d388:	d179      	bne.n	800d47e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d392:	e853 3f00 	ldrex	r3, [r3]
 800d396:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d39e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a8:	643b      	str	r3, [r7, #64]	; 0x40
 800d3aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d3ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3b0:	e841 2300 	strex	r3, r2, [r1]
 800d3b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1e6      	bne.n	800d38a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	e853 3f00 	ldrex	r3, [r3]
 800d3ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	f023 0301 	bic.w	r3, r3, #1
 800d3d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	3308      	adds	r3, #8
 800d3da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d3de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e5      	bne.n	800d3bc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2220      	movs	r2, #32
 800d3f4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d400:	2b01      	cmp	r3, #1
 800d402:	d12e      	bne.n	800d462 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	e853 3f00 	ldrex	r3, [r3]
 800d416:	60bb      	str	r3, [r7, #8]
   return(result);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f023 0310 	bic.w	r3, r3, #16
 800d41e:	647b      	str	r3, [r7, #68]	; 0x44
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	461a      	mov	r2, r3
 800d426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d428:	61bb      	str	r3, [r7, #24]
 800d42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42c:	6979      	ldr	r1, [r7, #20]
 800d42e:	69ba      	ldr	r2, [r7, #24]
 800d430:	e841 2300 	strex	r3, r2, [r1]
 800d434:	613b      	str	r3, [r7, #16]
   return(result);
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d1e6      	bne.n	800d40a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	69db      	ldr	r3, [r3, #28]
 800d442:	f003 0310 	and.w	r3, r3, #16
 800d446:	2b10      	cmp	r3, #16
 800d448:	d103      	bne.n	800d452 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2210      	movs	r2, #16
 800d450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f7ff f816 	bl	800c48c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d460:	e00d      	b.n	800d47e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f7f3 fe40 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 800d468:	e009      	b.n	800d47e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	8b1b      	ldrh	r3, [r3, #24]
 800d470:	b29a      	uxth	r2, r3
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f042 0208 	orr.w	r2, r2, #8
 800d47a:	b292      	uxth	r2, r2
 800d47c:	831a      	strh	r2, [r3, #24]
}
 800d47e:	bf00      	nop
 800d480:	3758      	adds	r7, #88	; 0x58
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d486:	b480      	push	{r7}
 800d488:	b083      	sub	sp, #12
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d48e:	bf00      	nop
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d49a:	b480      	push	{r7}
 800d49c:	b085      	sub	sp, #20
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d4a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4ac:	2b84      	cmp	r3, #132	; 0x84
 800d4ae:	d005      	beq.n	800d4bc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d4b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	3303      	adds	r3, #3
 800d4ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d4ce:	f000 ff37 	bl	800e340 <vTaskStartScheduler>
  
  return osOK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4da:	b089      	sub	sp, #36	; 0x24
 800d4dc:	af04      	add	r7, sp, #16
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d020      	beq.n	800d52c <osThreadCreate+0x54>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	699b      	ldr	r3, [r3, #24]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d01c      	beq.n	800d52c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685c      	ldr	r4, [r3, #4]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681d      	ldr	r5, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	691e      	ldr	r6, [r3, #16]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d504:	4618      	mov	r0, r3
 800d506:	f7ff ffc8 	bl	800d49a <makeFreeRtosPriority>
 800d50a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d514:	9202      	str	r2, [sp, #8]
 800d516:	9301      	str	r3, [sp, #4]
 800d518:	9100      	str	r1, [sp, #0]
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	4632      	mov	r2, r6
 800d51e:	4629      	mov	r1, r5
 800d520:	4620      	mov	r0, r4
 800d522:	f000 fcc7 	bl	800deb4 <xTaskCreateStatic>
 800d526:	4603      	mov	r3, r0
 800d528:	60fb      	str	r3, [r7, #12]
 800d52a:	e01c      	b.n	800d566 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685c      	ldr	r4, [r3, #4]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d538:	b29e      	uxth	r6, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff ffaa 	bl	800d49a <makeFreeRtosPriority>
 800d546:	4602      	mov	r2, r0
 800d548:	f107 030c 	add.w	r3, r7, #12
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	9200      	str	r2, [sp, #0]
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	4632      	mov	r2, r6
 800d554:	4629      	mov	r1, r5
 800d556:	4620      	mov	r0, r4
 800d558:	f000 fd09 	bl	800df6e <xTaskCreate>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d001      	beq.n	800d566 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d562:	2300      	movs	r3, #0
 800d564:	e000      	b.n	800d568 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d566:	68fb      	ldr	r3, [r7, #12]
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3714      	adds	r7, #20
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d570 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <osDelay+0x16>
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	e000      	b.n	800d588 <osDelay+0x18>
 800d586:	2301      	movs	r3, #1
 800d588:	4618      	mov	r0, r3
 800d58a:	f000 fea5 	bl	800e2d8 <vTaskDelay>
  
  return osOK;
 800d58e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d590:	4618      	mov	r0, r3
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f103 0208 	add.w	r2, r3, #8
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f103 0208 	add.w	r2, r3, #8
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f103 0208 	add.w	r2, r3, #8
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d5cc:	bf00      	nop
 800d5ce:	370c      	adds	r7, #12
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr

0800d5d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b083      	sub	sp, #12
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b085      	sub	sp, #20
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	689a      	ldr	r2, [r3, #8]
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	683a      	ldr	r2, [r7, #0]
 800d61c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	1c5a      	adds	r2, r3, #1
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	601a      	str	r2, [r3, #0]
}
 800d62e:	bf00      	nop
 800d630:	3714      	adds	r7, #20
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr

0800d63a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d63a:	b480      	push	{r7}
 800d63c:	b085      	sub	sp, #20
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
 800d642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d650:	d103      	bne.n	800d65a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	691b      	ldr	r3, [r3, #16]
 800d656:	60fb      	str	r3, [r7, #12]
 800d658:	e00c      	b.n	800d674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	3308      	adds	r3, #8
 800d65e:	60fb      	str	r3, [r7, #12]
 800d660:	e002      	b.n	800d668 <vListInsert+0x2e>
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	60fb      	str	r3, [r7, #12]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	429a      	cmp	r2, r3
 800d672:	d2f6      	bcs.n	800d662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	685a      	ldr	r2, [r3, #4]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	685b      	ldr	r3, [r3, #4]
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	68fa      	ldr	r2, [r7, #12]
 800d688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	683a      	ldr	r2, [r7, #0]
 800d68e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d690:	683b      	ldr	r3, [r7, #0]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	1c5a      	adds	r2, r3, #1
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	601a      	str	r2, [r3, #0]
}
 800d6a0:	bf00      	nop
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	6892      	ldr	r2, [r2, #8]
 800d6c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	6852      	ldr	r2, [r2, #4]
 800d6cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d103      	bne.n	800d6e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	689a      	ldr	r2, [r3, #8]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	1e5a      	subs	r2, r3, #1
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	681b      	ldr	r3, [r3, #0]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3714      	adds	r7, #20
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10a      	bne.n	800d72a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d72a:	f001 fc4b 	bl	800efc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d736:	68f9      	ldr	r1, [r7, #12]
 800d738:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d73a:	fb01 f303 	mul.w	r3, r1, r3
 800d73e:	441a      	add	r2, r3
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2200      	movs	r2, #0
 800d748:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681a      	ldr	r2, [r3, #0]
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d75a:	3b01      	subs	r3, #1
 800d75c:	68f9      	ldr	r1, [r7, #12]
 800d75e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d760:	fb01 f303 	mul.w	r3, r1, r3
 800d764:	441a      	add	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	22ff      	movs	r2, #255	; 0xff
 800d76e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	22ff      	movs	r2, #255	; 0xff
 800d776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d114      	bne.n	800d7aa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	691b      	ldr	r3, [r3, #16]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d01a      	beq.n	800d7be <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	3310      	adds	r3, #16
 800d78c:	4618      	mov	r0, r3
 800d78e:	f001 f829 	bl	800e7e4 <xTaskRemoveFromEventList>
 800d792:	4603      	mov	r3, r0
 800d794:	2b00      	cmp	r3, #0
 800d796:	d012      	beq.n	800d7be <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d798:	4b0c      	ldr	r3, [pc, #48]	; (800d7cc <xQueueGenericReset+0xcc>)
 800d79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d79e:	601a      	str	r2, [r3, #0]
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	f3bf 8f6f 	isb	sy
 800d7a8:	e009      	b.n	800d7be <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3310      	adds	r3, #16
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff fef2 	bl	800d598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	3324      	adds	r3, #36	; 0x24
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f7ff feed 	bl	800d598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d7be:	f001 fc31 	bl	800f024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d7c2:	2301      	movs	r3, #1
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	e000ed04 	.word	0xe000ed04

0800d7d0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08a      	sub	sp, #40	; 0x28
 800d7d4:	af02      	add	r7, sp, #8
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	4613      	mov	r3, r2
 800d7dc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10a      	bne.n	800d7fa <xQueueGenericCreate+0x2a>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	613b      	str	r3, [r7, #16]
}
 800d7f6:	bf00      	nop
 800d7f8:	e7fe      	b.n	800d7f8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	68ba      	ldr	r2, [r7, #8]
 800d7fe:	fb02 f303 	mul.w	r3, r2, r3
 800d802:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	3348      	adds	r3, #72	; 0x48
 800d808:	4618      	mov	r0, r3
 800d80a:	f001 fcbd 	bl	800f188 <pvPortMalloc>
 800d80e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d011      	beq.n	800d83a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	3348      	adds	r3, #72	; 0x48
 800d81e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d828:	79fa      	ldrb	r2, [r7, #7]
 800d82a:	69bb      	ldr	r3, [r7, #24]
 800d82c:	9300      	str	r3, [sp, #0]
 800d82e:	4613      	mov	r3, r2
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	68b9      	ldr	r1, [r7, #8]
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f000 f805 	bl	800d844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d83a:	69bb      	ldr	r3, [r7, #24]
	}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3720      	adds	r7, #32
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	607a      	str	r2, [r7, #4]
 800d850:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d103      	bne.n	800d860 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	69ba      	ldr	r2, [r7, #24]
 800d85c:	601a      	str	r2, [r3, #0]
 800d85e:	e002      	b.n	800d866 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	68fa      	ldr	r2, [r7, #12]
 800d86a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	68ba      	ldr	r2, [r7, #8]
 800d870:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d872:	2101      	movs	r1, #1
 800d874:	69b8      	ldr	r0, [r7, #24]
 800d876:	f7ff ff43 	bl	800d700 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d87a:	bf00      	nop
 800d87c:	3710      	adds	r7, #16
 800d87e:	46bd      	mov	sp, r7
 800d880:	bd80      	pop	{r7, pc}
	...

0800d884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b08e      	sub	sp, #56	; 0x38
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
 800d890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d892:	2300      	movs	r3, #0
 800d894:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d10a      	bne.n	800d8b6 <xQueueGenericSend+0x32>
	__asm volatile
 800d8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8a4:	f383 8811 	msr	BASEPRI, r3
 800d8a8:	f3bf 8f6f 	isb	sy
 800d8ac:	f3bf 8f4f 	dsb	sy
 800d8b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d8b2:	bf00      	nop
 800d8b4:	e7fe      	b.n	800d8b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d103      	bne.n	800d8c4 <xQueueGenericSend+0x40>
 800d8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d101      	bne.n	800d8c8 <xQueueGenericSend+0x44>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e000      	b.n	800d8ca <xQueueGenericSend+0x46>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10a      	bne.n	800d8e4 <xQueueGenericSend+0x60>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	2b02      	cmp	r3, #2
 800d8e8:	d103      	bne.n	800d8f2 <xQueueGenericSend+0x6e>
 800d8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d101      	bne.n	800d8f6 <xQueueGenericSend+0x72>
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e000      	b.n	800d8f8 <xQueueGenericSend+0x74>
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10a      	bne.n	800d912 <xQueueGenericSend+0x8e>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	623b      	str	r3, [r7, #32]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d912:	f001 f923 	bl	800eb5c <xTaskGetSchedulerState>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d102      	bne.n	800d922 <xQueueGenericSend+0x9e>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <xQueueGenericSend+0xa2>
 800d922:	2301      	movs	r3, #1
 800d924:	e000      	b.n	800d928 <xQueueGenericSend+0xa4>
 800d926:	2300      	movs	r3, #0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d10a      	bne.n	800d942 <xQueueGenericSend+0xbe>
	__asm volatile
 800d92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d930:	f383 8811 	msr	BASEPRI, r3
 800d934:	f3bf 8f6f 	isb	sy
 800d938:	f3bf 8f4f 	dsb	sy
 800d93c:	61fb      	str	r3, [r7, #28]
}
 800d93e:	bf00      	nop
 800d940:	e7fe      	b.n	800d940 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d942:	f001 fb3f 	bl	800efc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d94e:	429a      	cmp	r2, r3
 800d950:	d302      	bcc.n	800d958 <xQueueGenericSend+0xd4>
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	2b02      	cmp	r3, #2
 800d956:	d129      	bne.n	800d9ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	68b9      	ldr	r1, [r7, #8]
 800d95c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d95e:	f000 f96f 	bl	800dc40 <prvCopyDataToQueue>
 800d962:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d010      	beq.n	800d98e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d96e:	3324      	adds	r3, #36	; 0x24
 800d970:	4618      	mov	r0, r3
 800d972:	f000 ff37 	bl	800e7e4 <xTaskRemoveFromEventList>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d013      	beq.n	800d9a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d97c:	4b3f      	ldr	r3, [pc, #252]	; (800da7c <xQueueGenericSend+0x1f8>)
 800d97e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d982:	601a      	str	r2, [r3, #0]
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	e00a      	b.n	800d9a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d990:	2b00      	cmp	r3, #0
 800d992:	d007      	beq.n	800d9a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d994:	4b39      	ldr	r3, [pc, #228]	; (800da7c <xQueueGenericSend+0x1f8>)
 800d996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d9a4:	f001 fb3e 	bl	800f024 <vPortExitCritical>
				return pdPASS;
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e063      	b.n	800da74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d103      	bne.n	800d9ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9b2:	f001 fb37 	bl	800f024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e05c      	b.n	800da74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d106      	bne.n	800d9ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9c0:	f107 0314 	add.w	r3, r7, #20
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f000 ff6f 	bl	800e8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9ce:	f001 fb29 	bl	800f024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9d2:	f000 fd15 	bl	800e400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9d6:	f001 faf5 	bl	800efc4 <vPortEnterCritical>
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9e0:	b25b      	sxtb	r3, r3
 800d9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e6:	d103      	bne.n	800d9f0 <xQueueGenericSend+0x16c>
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9f6:	b25b      	sxtb	r3, r3
 800d9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fc:	d103      	bne.n	800da06 <xQueueGenericSend+0x182>
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da00:	2200      	movs	r2, #0
 800da02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da06:	f001 fb0d 	bl	800f024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da0a:	1d3a      	adds	r2, r7, #4
 800da0c:	f107 0314 	add.w	r3, r7, #20
 800da10:	4611      	mov	r1, r2
 800da12:	4618      	mov	r0, r3
 800da14:	f000 ff5e 	bl	800e8d4 <xTaskCheckForTimeOut>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d124      	bne.n	800da68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da20:	f000 fa06 	bl	800de30 <prvIsQueueFull>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d018      	beq.n	800da5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	3310      	adds	r3, #16
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	4611      	mov	r1, r2
 800da32:	4618      	mov	r0, r3
 800da34:	f000 feb2 	bl	800e79c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800da38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da3a:	f000 f991 	bl	800dd60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800da3e:	f000 fced 	bl	800e41c <xTaskResumeAll>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	f47f af7c 	bne.w	800d942 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800da4a:	4b0c      	ldr	r3, [pc, #48]	; (800da7c <xQueueGenericSend+0x1f8>)
 800da4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da50:	601a      	str	r2, [r3, #0]
 800da52:	f3bf 8f4f 	dsb	sy
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	e772      	b.n	800d942 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800da5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da5e:	f000 f97f 	bl	800dd60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da62:	f000 fcdb 	bl	800e41c <xTaskResumeAll>
 800da66:	e76c      	b.n	800d942 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800da68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da6a:	f000 f979 	bl	800dd60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da6e:	f000 fcd5 	bl	800e41c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800da72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800da74:	4618      	mov	r0, r3
 800da76:	3738      	adds	r7, #56	; 0x38
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	e000ed04 	.word	0xe000ed04

0800da80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08c      	sub	sp, #48	; 0x30
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800da8c:	2300      	movs	r3, #0
 800da8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10a      	bne.n	800dab0 <xQueueReceive+0x30>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	623b      	str	r3, [r7, #32]
}
 800daac:	bf00      	nop
 800daae:	e7fe      	b.n	800daae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dab0:	68bb      	ldr	r3, [r7, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d103      	bne.n	800dabe <xQueueReceive+0x3e>
 800dab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d101      	bne.n	800dac2 <xQueueReceive+0x42>
 800dabe:	2301      	movs	r3, #1
 800dac0:	e000      	b.n	800dac4 <xQueueReceive+0x44>
 800dac2:	2300      	movs	r3, #0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d10a      	bne.n	800dade <xQueueReceive+0x5e>
	__asm volatile
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	61fb      	str	r3, [r7, #28]
}
 800dada:	bf00      	nop
 800dadc:	e7fe      	b.n	800dadc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dade:	f001 f83d 	bl	800eb5c <xTaskGetSchedulerState>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d102      	bne.n	800daee <xQueueReceive+0x6e>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <xQueueReceive+0x72>
 800daee:	2301      	movs	r3, #1
 800daf0:	e000      	b.n	800daf4 <xQueueReceive+0x74>
 800daf2:	2300      	movs	r3, #0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10a      	bne.n	800db0e <xQueueReceive+0x8e>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafc:	f383 8811 	msr	BASEPRI, r3
 800db00:	f3bf 8f6f 	isb	sy
 800db04:	f3bf 8f4f 	dsb	sy
 800db08:	61bb      	str	r3, [r7, #24]
}
 800db0a:	bf00      	nop
 800db0c:	e7fe      	b.n	800db0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db0e:	f001 fa59 	bl	800efc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d01f      	beq.n	800db5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db1e:	68b9      	ldr	r1, [r7, #8]
 800db20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db22:	f000 f8f7 	bl	800dd14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db28:	1e5a      	subs	r2, r3, #1
 800db2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00f      	beq.n	800db56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db38:	3310      	adds	r3, #16
 800db3a:	4618      	mov	r0, r3
 800db3c:	f000 fe52 	bl	800e7e4 <xTaskRemoveFromEventList>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d007      	beq.n	800db56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db46:	4b3d      	ldr	r3, [pc, #244]	; (800dc3c <xQueueReceive+0x1bc>)
 800db48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db4c:	601a      	str	r2, [r3, #0]
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db56:	f001 fa65 	bl	800f024 <vPortExitCritical>
				return pdPASS;
 800db5a:	2301      	movs	r3, #1
 800db5c:	e069      	b.n	800dc32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d103      	bne.n	800db6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db64:	f001 fa5e 	bl	800f024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db68:	2300      	movs	r3, #0
 800db6a:	e062      	b.n	800dc32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db72:	f107 0310 	add.w	r3, r7, #16
 800db76:	4618      	mov	r0, r3
 800db78:	f000 fe96 	bl	800e8a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db7c:	2301      	movs	r3, #1
 800db7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db80:	f001 fa50 	bl	800f024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db84:	f000 fc3c 	bl	800e400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db88:	f001 fa1c 	bl	800efc4 <vPortEnterCritical>
 800db8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800db92:	b25b      	sxtb	r3, r3
 800db94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db98:	d103      	bne.n	800dba2 <xQueueReceive+0x122>
 800db9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dba8:	b25b      	sxtb	r3, r3
 800dbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbae:	d103      	bne.n	800dbb8 <xQueueReceive+0x138>
 800dbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbb8:	f001 fa34 	bl	800f024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbbc:	1d3a      	adds	r2, r7, #4
 800dbbe:	f107 0310 	add.w	r3, r7, #16
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f000 fe85 	bl	800e8d4 <xTaskCheckForTimeOut>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d123      	bne.n	800dc18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbd2:	f000 f917 	bl	800de04 <prvIsQueueEmpty>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d017      	beq.n	800dc0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbde:	3324      	adds	r3, #36	; 0x24
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	4611      	mov	r1, r2
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f000 fdd9 	bl	800e79c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dbec:	f000 f8b8 	bl	800dd60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbf0:	f000 fc14 	bl	800e41c <xTaskResumeAll>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d189      	bne.n	800db0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dbfa:	4b10      	ldr	r3, [pc, #64]	; (800dc3c <xQueueReceive+0x1bc>)
 800dbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc00:	601a      	str	r2, [r3, #0]
 800dc02:	f3bf 8f4f 	dsb	sy
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	e780      	b.n	800db0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc0e:	f000 f8a7 	bl	800dd60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc12:	f000 fc03 	bl	800e41c <xTaskResumeAll>
 800dc16:	e77a      	b.n	800db0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dc18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc1a:	f000 f8a1 	bl	800dd60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc1e:	f000 fbfd 	bl	800e41c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc24:	f000 f8ee 	bl	800de04 <prvIsQueueEmpty>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f43f af6f 	beq.w	800db0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3730      	adds	r7, #48	; 0x30
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	e000ed04 	.word	0xe000ed04

0800dc40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10d      	bne.n	800dc7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d14d      	bne.n	800dd02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	689b      	ldr	r3, [r3, #8]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 ff94 	bl	800eb98 <xTaskPriorityDisinherit>
 800dc70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2200      	movs	r2, #0
 800dc76:	609a      	str	r2, [r3, #8]
 800dc78:	e043      	b.n	800dd02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d119      	bne.n	800dcb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6858      	ldr	r0, [r3, #4]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc88:	461a      	mov	r2, r3
 800dc8a:	68b9      	ldr	r1, [r7, #8]
 800dc8c:	f001 fc90 	bl	800f5b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc98:	441a      	add	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	685a      	ldr	r2, [r3, #4]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d32b      	bcc.n	800dd02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	605a      	str	r2, [r3, #4]
 800dcb2:	e026      	b.n	800dd02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	68d8      	ldr	r0, [r3, #12]
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	68b9      	ldr	r1, [r7, #8]
 800dcc0:	f001 fc76 	bl	800f5b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	68da      	ldr	r2, [r3, #12]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dccc:	425b      	negs	r3, r3
 800dcce:	441a      	add	r2, r3
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	68da      	ldr	r2, [r3, #12]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d207      	bcs.n	800dcf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	689a      	ldr	r2, [r3, #8]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dce8:	425b      	negs	r3, r3
 800dcea:	441a      	add	r2, r3
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b02      	cmp	r3, #2
 800dcf4:	d105      	bne.n	800dd02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	1c5a      	adds	r2, r3, #1
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800dd0a:	697b      	ldr	r3, [r7, #20]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d018      	beq.n	800dd58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68da      	ldr	r2, [r3, #12]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2e:	441a      	add	r2, r3
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d303      	bcc.n	800dd48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	68d9      	ldr	r1, [r3, #12]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd50:	461a      	mov	r2, r3
 800dd52:	6838      	ldr	r0, [r7, #0]
 800dd54:	f001 fc2c 	bl	800f5b0 <memcpy>
	}
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b084      	sub	sp, #16
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd68:	f001 f92c 	bl	800efc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd74:	e011      	b.n	800dd9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d012      	beq.n	800dda4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	3324      	adds	r3, #36	; 0x24
 800dd82:	4618      	mov	r0, r3
 800dd84:	f000 fd2e 	bl	800e7e4 <xTaskRemoveFromEventList>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd8e:	f000 fe03 	bl	800e998 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd92:	7bfb      	ldrb	r3, [r7, #15]
 800dd94:	3b01      	subs	r3, #1
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	dce9      	bgt.n	800dd76 <prvUnlockQueue+0x16>
 800dda2:	e000      	b.n	800dda6 <prvUnlockQueue+0x46>
					break;
 800dda4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	22ff      	movs	r2, #255	; 0xff
 800ddaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ddae:	f001 f939 	bl	800f024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ddb2:	f001 f907 	bl	800efc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ddbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddbe:	e011      	b.n	800dde4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d012      	beq.n	800ddee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3310      	adds	r3, #16
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f000 fd09 	bl	800e7e4 <xTaskRemoveFromEventList>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d001      	beq.n	800dddc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddd8:	f000 fdde 	bl	800e998 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dddc:	7bbb      	ldrb	r3, [r7, #14]
 800ddde:	3b01      	subs	r3, #1
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dde4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	dce9      	bgt.n	800ddc0 <prvUnlockQueue+0x60>
 800ddec:	e000      	b.n	800ddf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ddee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	22ff      	movs	r2, #255	; 0xff
 800ddf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ddf8:	f001 f914 	bl	800f024 <vPortExitCritical>
}
 800ddfc:	bf00      	nop
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de0c:	f001 f8da 	bl	800efc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de14:	2b00      	cmp	r3, #0
 800de16:	d102      	bne.n	800de1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de18:	2301      	movs	r3, #1
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	e001      	b.n	800de22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de22:	f001 f8ff 	bl	800f024 <vPortExitCritical>

	return xReturn;
 800de26:	68fb      	ldr	r3, [r7, #12]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de38:	f001 f8c4 	bl	800efc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de44:	429a      	cmp	r2, r3
 800de46:	d102      	bne.n	800de4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de48:	2301      	movs	r3, #1
 800de4a:	60fb      	str	r3, [r7, #12]
 800de4c:	e001      	b.n	800de52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de52:	f001 f8e7 	bl	800f024 <vPortExitCritical>

	return xReturn;
 800de56:	68fb      	ldr	r3, [r7, #12]
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3710      	adds	r7, #16
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de60:	b480      	push	{r7}
 800de62:	b085      	sub	sp, #20
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de6a:	2300      	movs	r3, #0
 800de6c:	60fb      	str	r3, [r7, #12]
 800de6e:	e014      	b.n	800de9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de70:	4a0f      	ldr	r2, [pc, #60]	; (800deb0 <vQueueAddToRegistry+0x50>)
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10b      	bne.n	800de94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de7c:	490c      	ldr	r1, [pc, #48]	; (800deb0 <vQueueAddToRegistry+0x50>)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de86:	4a0a      	ldr	r2, [pc, #40]	; (800deb0 <vQueueAddToRegistry+0x50>)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	00db      	lsls	r3, r3, #3
 800de8c:	4413      	add	r3, r2
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de92:	e006      	b.n	800dea2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	3301      	adds	r3, #1
 800de98:	60fb      	str	r3, [r7, #12]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2b07      	cmp	r3, #7
 800de9e:	d9e7      	bls.n	800de70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dea0:	bf00      	nop
 800dea2:	bf00      	nop
 800dea4:	3714      	adds	r7, #20
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	20000e9c 	.word	0x20000e9c

0800deb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b08e      	sub	sp, #56	; 0x38
 800deb8:	af04      	add	r7, sp, #16
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10a      	bne.n	800dede <xTaskCreateStatic+0x2a>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800decc:	f383 8811 	msr	BASEPRI, r3
 800ded0:	f3bf 8f6f 	isb	sy
 800ded4:	f3bf 8f4f 	dsb	sy
 800ded8:	623b      	str	r3, [r7, #32]
}
 800deda:	bf00      	nop
 800dedc:	e7fe      	b.n	800dedc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10a      	bne.n	800defa <xTaskCreateStatic+0x46>
	__asm volatile
 800dee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee8:	f383 8811 	msr	BASEPRI, r3
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f3bf 8f4f 	dsb	sy
 800def4:	61fb      	str	r3, [r7, #28]
}
 800def6:	bf00      	nop
 800def8:	e7fe      	b.n	800def8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800defa:	2354      	movs	r3, #84	; 0x54
 800defc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	2b54      	cmp	r3, #84	; 0x54
 800df02:	d00a      	beq.n	800df1a <xTaskCreateStatic+0x66>
	__asm volatile
 800df04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df08:	f383 8811 	msr	BASEPRI, r3
 800df0c:	f3bf 8f6f 	isb	sy
 800df10:	f3bf 8f4f 	dsb	sy
 800df14:	61bb      	str	r3, [r7, #24]
}
 800df16:	bf00      	nop
 800df18:	e7fe      	b.n	800df18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d01e      	beq.n	800df60 <xTaskCreateStatic+0xac>
 800df22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df24:	2b00      	cmp	r3, #0
 800df26:	d01b      	beq.n	800df60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df34:	2202      	movs	r2, #2
 800df36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df3a:	2300      	movs	r3, #0
 800df3c:	9303      	str	r3, [sp, #12]
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	9302      	str	r3, [sp, #8]
 800df42:	f107 0314 	add.w	r3, r7, #20
 800df46:	9301      	str	r3, [sp, #4]
 800df48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	68b9      	ldr	r1, [r7, #8]
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f000 f850 	bl	800dff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df5a:	f000 f8d5 	bl	800e108 <prvAddNewTaskToReadyList>
 800df5e:	e001      	b.n	800df64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df64:	697b      	ldr	r3, [r7, #20]
	}
 800df66:	4618      	mov	r0, r3
 800df68:	3728      	adds	r7, #40	; 0x28
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b08c      	sub	sp, #48	; 0x30
 800df72:	af04      	add	r7, sp, #16
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	603b      	str	r3, [r7, #0]
 800df7a:	4613      	mov	r3, r2
 800df7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df7e:	88fb      	ldrh	r3, [r7, #6]
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4618      	mov	r0, r3
 800df84:	f001 f900 	bl	800f188 <pvPortMalloc>
 800df88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df90:	2054      	movs	r0, #84	; 0x54
 800df92:	f001 f8f9 	bl	800f188 <pvPortMalloc>
 800df96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d003      	beq.n	800dfa6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	697a      	ldr	r2, [r7, #20]
 800dfa2:	631a      	str	r2, [r3, #48]	; 0x30
 800dfa4:	e005      	b.n	800dfb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dfa6:	6978      	ldr	r0, [r7, #20]
 800dfa8:	f001 f9ba 	bl	800f320 <vPortFree>
 800dfac:	e001      	b.n	800dfb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d017      	beq.n	800dfe8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfc0:	88fa      	ldrh	r2, [r7, #6]
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	9303      	str	r3, [sp, #12]
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	9302      	str	r3, [sp, #8]
 800dfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfcc:	9301      	str	r3, [sp, #4]
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	9300      	str	r3, [sp, #0]
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	68b9      	ldr	r1, [r7, #8]
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f000 f80e 	bl	800dff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfdc:	69f8      	ldr	r0, [r7, #28]
 800dfde:	f000 f893 	bl	800e108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	61bb      	str	r3, [r7, #24]
 800dfe6:	e002      	b.n	800dfee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfee:	69bb      	ldr	r3, [r7, #24]
	}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3720      	adds	r7, #32
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b088      	sub	sp, #32
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	60b9      	str	r1, [r7, #8]
 800e002:	607a      	str	r2, [r7, #4]
 800e004:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e010:	3b01      	subs	r3, #1
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	4413      	add	r3, r2
 800e016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	f023 0307 	bic.w	r3, r3, #7
 800e01e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	f003 0307 	and.w	r3, r3, #7
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00a      	beq.n	800e040 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e02e:	f383 8811 	msr	BASEPRI, r3
 800e032:	f3bf 8f6f 	isb	sy
 800e036:	f3bf 8f4f 	dsb	sy
 800e03a:	617b      	str	r3, [r7, #20]
}
 800e03c:	bf00      	nop
 800e03e:	e7fe      	b.n	800e03e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d01f      	beq.n	800e086 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e046:	2300      	movs	r3, #0
 800e048:	61fb      	str	r3, [r7, #28]
 800e04a:	e012      	b.n	800e072 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	4413      	add	r3, r2
 800e052:	7819      	ldrb	r1, [r3, #0]
 800e054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e056:	69fb      	ldr	r3, [r7, #28]
 800e058:	4413      	add	r3, r2
 800e05a:	3334      	adds	r3, #52	; 0x34
 800e05c:	460a      	mov	r2, r1
 800e05e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	4413      	add	r3, r2
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d006      	beq.n	800e07a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	3301      	adds	r3, #1
 800e070:	61fb      	str	r3, [r7, #28]
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	2b0f      	cmp	r3, #15
 800e076:	d9e9      	bls.n	800e04c <prvInitialiseNewTask+0x54>
 800e078:	e000      	b.n	800e07c <prvInitialiseNewTask+0x84>
			{
				break;
 800e07a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e084:	e003      	b.n	800e08e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e090:	2b06      	cmp	r3, #6
 800e092:	d901      	bls.n	800e098 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e094:	2306      	movs	r3, #6
 800e096:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e09c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0a2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7ff fa92 	bl	800d5d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b6:	3318      	adds	r3, #24
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7ff fa8d 	bl	800d5d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0c2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c6:	f1c3 0207 	rsb	r2, r3, #7
 800e0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0cc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0d2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e0e2:	683a      	ldr	r2, [r7, #0]
 800e0e4:	68f9      	ldr	r1, [r7, #12]
 800e0e6:	69b8      	ldr	r0, [r7, #24]
 800e0e8:	f000 fe42 	bl	800ed70 <pxPortInitialiseStack>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d002      	beq.n	800e0fe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e0fe:	bf00      	nop
 800e100:	3720      	adds	r7, #32
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e110:	f000 ff58 	bl	800efc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e114:	4b2a      	ldr	r3, [pc, #168]	; (800e1c0 <prvAddNewTaskToReadyList+0xb8>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3301      	adds	r3, #1
 800e11a:	4a29      	ldr	r2, [pc, #164]	; (800e1c0 <prvAddNewTaskToReadyList+0xb8>)
 800e11c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e11e:	4b29      	ldr	r3, [pc, #164]	; (800e1c4 <prvAddNewTaskToReadyList+0xbc>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d109      	bne.n	800e13a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e126:	4a27      	ldr	r2, [pc, #156]	; (800e1c4 <prvAddNewTaskToReadyList+0xbc>)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e12c:	4b24      	ldr	r3, [pc, #144]	; (800e1c0 <prvAddNewTaskToReadyList+0xb8>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	2b01      	cmp	r3, #1
 800e132:	d110      	bne.n	800e156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e134:	f000 fc54 	bl	800e9e0 <prvInitialiseTaskLists>
 800e138:	e00d      	b.n	800e156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e13a:	4b23      	ldr	r3, [pc, #140]	; (800e1c8 <prvAddNewTaskToReadyList+0xc0>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d109      	bne.n	800e156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e142:	4b20      	ldr	r3, [pc, #128]	; (800e1c4 <prvAddNewTaskToReadyList+0xbc>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d802      	bhi.n	800e156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e150:	4a1c      	ldr	r2, [pc, #112]	; (800e1c4 <prvAddNewTaskToReadyList+0xbc>)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e156:	4b1d      	ldr	r3, [pc, #116]	; (800e1cc <prvAddNewTaskToReadyList+0xc4>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3301      	adds	r3, #1
 800e15c:	4a1b      	ldr	r2, [pc, #108]	; (800e1cc <prvAddNewTaskToReadyList+0xc4>)
 800e15e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e164:	2201      	movs	r2, #1
 800e166:	409a      	lsls	r2, r3
 800e168:	4b19      	ldr	r3, [pc, #100]	; (800e1d0 <prvAddNewTaskToReadyList+0xc8>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	4313      	orrs	r3, r2
 800e16e:	4a18      	ldr	r2, [pc, #96]	; (800e1d0 <prvAddNewTaskToReadyList+0xc8>)
 800e170:	6013      	str	r3, [r2, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e176:	4613      	mov	r3, r2
 800e178:	009b      	lsls	r3, r3, #2
 800e17a:	4413      	add	r3, r2
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4a15      	ldr	r2, [pc, #84]	; (800e1d4 <prvAddNewTaskToReadyList+0xcc>)
 800e180:	441a      	add	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	3304      	adds	r3, #4
 800e186:	4619      	mov	r1, r3
 800e188:	4610      	mov	r0, r2
 800e18a:	f7ff fa32 	bl	800d5f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e18e:	f000 ff49 	bl	800f024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e192:	4b0d      	ldr	r3, [pc, #52]	; (800e1c8 <prvAddNewTaskToReadyList+0xc0>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00e      	beq.n	800e1b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e19a:	4b0a      	ldr	r3, [pc, #40]	; (800e1c4 <prvAddNewTaskToReadyList+0xbc>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d207      	bcs.n	800e1b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1a8:	4b0b      	ldr	r3, [pc, #44]	; (800e1d8 <prvAddNewTaskToReadyList+0xd0>)
 800e1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ae:	601a      	str	r2, [r3, #0]
 800e1b0:	f3bf 8f4f 	dsb	sy
 800e1b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	20000fdc 	.word	0x20000fdc
 800e1c4:	20000edc 	.word	0x20000edc
 800e1c8:	20000fe8 	.word	0x20000fe8
 800e1cc:	20000ff8 	.word	0x20000ff8
 800e1d0:	20000fe4 	.word	0x20000fe4
 800e1d4:	20000ee0 	.word	0x20000ee0
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b08a      	sub	sp, #40	; 0x28
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10a      	bne.n	800e206 <vTaskDelayUntil+0x2a>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	617b      	str	r3, [r7, #20]
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10a      	bne.n	800e222 <vTaskDelayUntil+0x46>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	613b      	str	r3, [r7, #16]
}
 800e21e:	bf00      	nop
 800e220:	e7fe      	b.n	800e220 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e222:	4b2a      	ldr	r3, [pc, #168]	; (800e2cc <vTaskDelayUntil+0xf0>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d00a      	beq.n	800e240 <vTaskDelayUntil+0x64>
	__asm volatile
 800e22a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e22e:	f383 8811 	msr	BASEPRI, r3
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	f3bf 8f4f 	dsb	sy
 800e23a:	60fb      	str	r3, [r7, #12]
}
 800e23c:	bf00      	nop
 800e23e:	e7fe      	b.n	800e23e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e240:	f000 f8de 	bl	800e400 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e244:	4b22      	ldr	r3, [pc, #136]	; (800e2d0 <vTaskDelayUntil+0xf4>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	4413      	add	r3, r2
 800e252:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	6a3a      	ldr	r2, [r7, #32]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d20b      	bcs.n	800e276 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	69fa      	ldr	r2, [r7, #28]
 800e264:	429a      	cmp	r2, r3
 800e266:	d211      	bcs.n	800e28c <vTaskDelayUntil+0xb0>
 800e268:	69fa      	ldr	r2, [r7, #28]
 800e26a:	6a3b      	ldr	r3, [r7, #32]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d90d      	bls.n	800e28c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e270:	2301      	movs	r3, #1
 800e272:	627b      	str	r3, [r7, #36]	; 0x24
 800e274:	e00a      	b.n	800e28c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	69fa      	ldr	r2, [r7, #28]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d303      	bcc.n	800e288 <vTaskDelayUntil+0xac>
 800e280:	69fa      	ldr	r2, [r7, #28]
 800e282:	6a3b      	ldr	r3, [r7, #32]
 800e284:	429a      	cmp	r2, r3
 800e286:	d901      	bls.n	800e28c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e288:	2301      	movs	r3, #1
 800e28a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	69fa      	ldr	r2, [r7, #28]
 800e290:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e294:	2b00      	cmp	r3, #0
 800e296:	d006      	beq.n	800e2a6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e298:	69fa      	ldr	r2, [r7, #28]
 800e29a:	6a3b      	ldr	r3, [r7, #32]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	2100      	movs	r1, #0
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 fcff 	bl	800eca4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e2a6:	f000 f8b9 	bl	800e41c <xTaskResumeAll>
 800e2aa:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d107      	bne.n	800e2c2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e2b2:	4b08      	ldr	r3, [pc, #32]	; (800e2d4 <vTaskDelayUntil+0xf8>)
 800e2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2c2:	bf00      	nop
 800e2c4:	3728      	adds	r7, #40	; 0x28
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20001004 	.word	0x20001004
 800e2d0:	20000fe0 	.word	0x20000fe0
 800e2d4:	e000ed04 	.word	0xe000ed04

0800e2d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d017      	beq.n	800e31a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2ea:	4b13      	ldr	r3, [pc, #76]	; (800e338 <vTaskDelay+0x60>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00a      	beq.n	800e308 <vTaskDelay+0x30>
	__asm volatile
 800e2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f6:	f383 8811 	msr	BASEPRI, r3
 800e2fa:	f3bf 8f6f 	isb	sy
 800e2fe:	f3bf 8f4f 	dsb	sy
 800e302:	60bb      	str	r3, [r7, #8]
}
 800e304:	bf00      	nop
 800e306:	e7fe      	b.n	800e306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e308:	f000 f87a 	bl	800e400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e30c:	2100      	movs	r1, #0
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fcc8 	bl	800eca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e314:	f000 f882 	bl	800e41c <xTaskResumeAll>
 800e318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d107      	bne.n	800e330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e320:	4b06      	ldr	r3, [pc, #24]	; (800e33c <vTaskDelay+0x64>)
 800e322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e326:	601a      	str	r2, [r3, #0]
 800e328:	f3bf 8f4f 	dsb	sy
 800e32c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e330:	bf00      	nop
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	20001004 	.word	0x20001004
 800e33c:	e000ed04 	.word	0xe000ed04

0800e340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b08a      	sub	sp, #40	; 0x28
 800e344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e346:	2300      	movs	r3, #0
 800e348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e34e:	463a      	mov	r2, r7
 800e350:	1d39      	adds	r1, r7, #4
 800e352:	f107 0308 	add.w	r3, r7, #8
 800e356:	4618      	mov	r0, r3
 800e358:	f7f4 fa7c 	bl	8002854 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	9202      	str	r2, [sp, #8]
 800e364:	9301      	str	r3, [sp, #4]
 800e366:	2300      	movs	r3, #0
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	2300      	movs	r3, #0
 800e36c:	460a      	mov	r2, r1
 800e36e:	491e      	ldr	r1, [pc, #120]	; (800e3e8 <vTaskStartScheduler+0xa8>)
 800e370:	481e      	ldr	r0, [pc, #120]	; (800e3ec <vTaskStartScheduler+0xac>)
 800e372:	f7ff fd9f 	bl	800deb4 <xTaskCreateStatic>
 800e376:	4603      	mov	r3, r0
 800e378:	4a1d      	ldr	r2, [pc, #116]	; (800e3f0 <vTaskStartScheduler+0xb0>)
 800e37a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e37c:	4b1c      	ldr	r3, [pc, #112]	; (800e3f0 <vTaskStartScheduler+0xb0>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d002      	beq.n	800e38a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e384:	2301      	movs	r3, #1
 800e386:	617b      	str	r3, [r7, #20]
 800e388:	e001      	b.n	800e38e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e38a:	2300      	movs	r3, #0
 800e38c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d116      	bne.n	800e3c2 <vTaskStartScheduler+0x82>
	__asm volatile
 800e394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e398:	f383 8811 	msr	BASEPRI, r3
 800e39c:	f3bf 8f6f 	isb	sy
 800e3a0:	f3bf 8f4f 	dsb	sy
 800e3a4:	613b      	str	r3, [r7, #16]
}
 800e3a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e3a8:	4b12      	ldr	r3, [pc, #72]	; (800e3f4 <vTaskStartScheduler+0xb4>)
 800e3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e3b0:	4b11      	ldr	r3, [pc, #68]	; (800e3f8 <vTaskStartScheduler+0xb8>)
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e3b6:	4b11      	ldr	r3, [pc, #68]	; (800e3fc <vTaskStartScheduler+0xbc>)
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3bc:	f000 fd60 	bl	800ee80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3c0:	e00e      	b.n	800e3e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3c2:	697b      	ldr	r3, [r7, #20]
 800e3c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c8:	d10a      	bne.n	800e3e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	60fb      	str	r3, [r7, #12]
}
 800e3dc:	bf00      	nop
 800e3de:	e7fe      	b.n	800e3de <vTaskStartScheduler+0x9e>
}
 800e3e0:	bf00      	nop
 800e3e2:	3718      	adds	r7, #24
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	080137b8 	.word	0x080137b8
 800e3ec:	0800e9b1 	.word	0x0800e9b1
 800e3f0:	20001000 	.word	0x20001000
 800e3f4:	20000ffc 	.word	0x20000ffc
 800e3f8:	20000fe8 	.word	0x20000fe8
 800e3fc:	20000fe0 	.word	0x20000fe0

0800e400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e400:	b480      	push	{r7}
 800e402:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e404:	4b04      	ldr	r3, [pc, #16]	; (800e418 <vTaskSuspendAll+0x18>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3301      	adds	r3, #1
 800e40a:	4a03      	ldr	r2, [pc, #12]	; (800e418 <vTaskSuspendAll+0x18>)
 800e40c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e40e:	bf00      	nop
 800e410:	46bd      	mov	sp, r7
 800e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e416:	4770      	bx	lr
 800e418:	20001004 	.word	0x20001004

0800e41c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e422:	2300      	movs	r3, #0
 800e424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e426:	2300      	movs	r3, #0
 800e428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e42a:	4b41      	ldr	r3, [pc, #260]	; (800e530 <xTaskResumeAll+0x114>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d10a      	bne.n	800e448 <xTaskResumeAll+0x2c>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	603b      	str	r3, [r7, #0]
}
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e448:	f000 fdbc 	bl	800efc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e44c:	4b38      	ldr	r3, [pc, #224]	; (800e530 <xTaskResumeAll+0x114>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3b01      	subs	r3, #1
 800e452:	4a37      	ldr	r2, [pc, #220]	; (800e530 <xTaskResumeAll+0x114>)
 800e454:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e456:	4b36      	ldr	r3, [pc, #216]	; (800e530 <xTaskResumeAll+0x114>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d161      	bne.n	800e522 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e45e:	4b35      	ldr	r3, [pc, #212]	; (800e534 <xTaskResumeAll+0x118>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d05d      	beq.n	800e522 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e466:	e02e      	b.n	800e4c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e468:	4b33      	ldr	r3, [pc, #204]	; (800e538 <xTaskResumeAll+0x11c>)
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	3318      	adds	r3, #24
 800e474:	4618      	mov	r0, r3
 800e476:	f7ff f919 	bl	800d6ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3304      	adds	r3, #4
 800e47e:	4618      	mov	r0, r3
 800e480:	f7ff f914 	bl	800d6ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e488:	2201      	movs	r2, #1
 800e48a:	409a      	lsls	r2, r3
 800e48c:	4b2b      	ldr	r3, [pc, #172]	; (800e53c <xTaskResumeAll+0x120>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4313      	orrs	r3, r2
 800e492:	4a2a      	ldr	r2, [pc, #168]	; (800e53c <xTaskResumeAll+0x120>)
 800e494:	6013      	str	r3, [r2, #0]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4a27      	ldr	r2, [pc, #156]	; (800e540 <xTaskResumeAll+0x124>)
 800e4a4:	441a      	add	r2, r3
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	3304      	adds	r3, #4
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	4610      	mov	r0, r2
 800e4ae:	f7ff f8a0 	bl	800d5f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4b6:	4b23      	ldr	r3, [pc, #140]	; (800e544 <xTaskResumeAll+0x128>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d302      	bcc.n	800e4c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e4c0:	4b21      	ldr	r3, [pc, #132]	; (800e548 <xTaskResumeAll+0x12c>)
 800e4c2:	2201      	movs	r2, #1
 800e4c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4c6:	4b1c      	ldr	r3, [pc, #112]	; (800e538 <xTaskResumeAll+0x11c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1cc      	bne.n	800e468 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4d4:	f000 fb22 	bl	800eb1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4d8:	4b1c      	ldr	r3, [pc, #112]	; (800e54c <xTaskResumeAll+0x130>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d010      	beq.n	800e506 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4e4:	f000 f846 	bl	800e574 <xTaskIncrementTick>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d002      	beq.n	800e4f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e4ee:	4b16      	ldr	r3, [pc, #88]	; (800e548 <xTaskResumeAll+0x12c>)
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3b01      	subs	r3, #1
 800e4f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f1      	bne.n	800e4e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e500:	4b12      	ldr	r3, [pc, #72]	; (800e54c <xTaskResumeAll+0x130>)
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e506:	4b10      	ldr	r3, [pc, #64]	; (800e548 <xTaskResumeAll+0x12c>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d009      	beq.n	800e522 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e50e:	2301      	movs	r3, #1
 800e510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e512:	4b0f      	ldr	r3, [pc, #60]	; (800e550 <xTaskResumeAll+0x134>)
 800e514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e518:	601a      	str	r2, [r3, #0]
 800e51a:	f3bf 8f4f 	dsb	sy
 800e51e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e522:	f000 fd7f 	bl	800f024 <vPortExitCritical>

	return xAlreadyYielded;
 800e526:	68bb      	ldr	r3, [r7, #8]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	20001004 	.word	0x20001004
 800e534:	20000fdc 	.word	0x20000fdc
 800e538:	20000f9c 	.word	0x20000f9c
 800e53c:	20000fe4 	.word	0x20000fe4
 800e540:	20000ee0 	.word	0x20000ee0
 800e544:	20000edc 	.word	0x20000edc
 800e548:	20000ff0 	.word	0x20000ff0
 800e54c:	20000fec 	.word	0x20000fec
 800e550:	e000ed04 	.word	0xe000ed04

0800e554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e55a:	4b05      	ldr	r3, [pc, #20]	; (800e570 <xTaskGetTickCount+0x1c>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e560:	687b      	ldr	r3, [r7, #4]
}
 800e562:	4618      	mov	r0, r3
 800e564:	370c      	adds	r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	20000fe0 	.word	0x20000fe0

0800e574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e57a:	2300      	movs	r3, #0
 800e57c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e57e:	4b4e      	ldr	r3, [pc, #312]	; (800e6b8 <xTaskIncrementTick+0x144>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	f040 808e 	bne.w	800e6a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e588:	4b4c      	ldr	r3, [pc, #304]	; (800e6bc <xTaskIncrementTick+0x148>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3301      	adds	r3, #1
 800e58e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e590:	4a4a      	ldr	r2, [pc, #296]	; (800e6bc <xTaskIncrementTick+0x148>)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d120      	bne.n	800e5de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e59c:	4b48      	ldr	r3, [pc, #288]	; (800e6c0 <xTaskIncrementTick+0x14c>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <xTaskIncrementTick+0x48>
	__asm volatile
 800e5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5aa:	f383 8811 	msr	BASEPRI, r3
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f3bf 8f4f 	dsb	sy
 800e5b6:	603b      	str	r3, [r7, #0]
}
 800e5b8:	bf00      	nop
 800e5ba:	e7fe      	b.n	800e5ba <xTaskIncrementTick+0x46>
 800e5bc:	4b40      	ldr	r3, [pc, #256]	; (800e6c0 <xTaskIncrementTick+0x14c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	60fb      	str	r3, [r7, #12]
 800e5c2:	4b40      	ldr	r3, [pc, #256]	; (800e6c4 <xTaskIncrementTick+0x150>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a3e      	ldr	r2, [pc, #248]	; (800e6c0 <xTaskIncrementTick+0x14c>)
 800e5c8:	6013      	str	r3, [r2, #0]
 800e5ca:	4a3e      	ldr	r2, [pc, #248]	; (800e6c4 <xTaskIncrementTick+0x150>)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6013      	str	r3, [r2, #0]
 800e5d0:	4b3d      	ldr	r3, [pc, #244]	; (800e6c8 <xTaskIncrementTick+0x154>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	4a3c      	ldr	r2, [pc, #240]	; (800e6c8 <xTaskIncrementTick+0x154>)
 800e5d8:	6013      	str	r3, [r2, #0]
 800e5da:	f000 fa9f 	bl	800eb1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5de:	4b3b      	ldr	r3, [pc, #236]	; (800e6cc <xTaskIncrementTick+0x158>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d348      	bcc.n	800e67a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5e8:	4b35      	ldr	r3, [pc, #212]	; (800e6c0 <xTaskIncrementTick+0x14c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d104      	bne.n	800e5fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f2:	4b36      	ldr	r3, [pc, #216]	; (800e6cc <xTaskIncrementTick+0x158>)
 800e5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f8:	601a      	str	r2, [r3, #0]
					break;
 800e5fa:	e03e      	b.n	800e67a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5fc:	4b30      	ldr	r3, [pc, #192]	; (800e6c0 <xTaskIncrementTick+0x14c>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	429a      	cmp	r2, r3
 800e612:	d203      	bcs.n	800e61c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e614:	4a2d      	ldr	r2, [pc, #180]	; (800e6cc <xTaskIncrementTick+0x158>)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e61a:	e02e      	b.n	800e67a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	3304      	adds	r3, #4
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff f843 	bl	800d6ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d004      	beq.n	800e638 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	3318      	adds	r3, #24
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff f83a 	bl	800d6ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63c:	2201      	movs	r2, #1
 800e63e:	409a      	lsls	r2, r3
 800e640:	4b23      	ldr	r3, [pc, #140]	; (800e6d0 <xTaskIncrementTick+0x15c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4313      	orrs	r3, r2
 800e646:	4a22      	ldr	r2, [pc, #136]	; (800e6d0 <xTaskIncrementTick+0x15c>)
 800e648:	6013      	str	r3, [r2, #0]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e64e:	4613      	mov	r3, r2
 800e650:	009b      	lsls	r3, r3, #2
 800e652:	4413      	add	r3, r2
 800e654:	009b      	lsls	r3, r3, #2
 800e656:	4a1f      	ldr	r2, [pc, #124]	; (800e6d4 <xTaskIncrementTick+0x160>)
 800e658:	441a      	add	r2, r3
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	3304      	adds	r3, #4
 800e65e:	4619      	mov	r1, r3
 800e660:	4610      	mov	r0, r2
 800e662:	f7fe ffc6 	bl	800d5f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e66a:	4b1b      	ldr	r3, [pc, #108]	; (800e6d8 <xTaskIncrementTick+0x164>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e670:	429a      	cmp	r2, r3
 800e672:	d3b9      	bcc.n	800e5e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e674:	2301      	movs	r3, #1
 800e676:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e678:	e7b6      	b.n	800e5e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e67a:	4b17      	ldr	r3, [pc, #92]	; (800e6d8 <xTaskIncrementTick+0x164>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e680:	4914      	ldr	r1, [pc, #80]	; (800e6d4 <xTaskIncrementTick+0x160>)
 800e682:	4613      	mov	r3, r2
 800e684:	009b      	lsls	r3, r3, #2
 800e686:	4413      	add	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	440b      	add	r3, r1
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d901      	bls.n	800e696 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e692:	2301      	movs	r3, #1
 800e694:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e696:	4b11      	ldr	r3, [pc, #68]	; (800e6dc <xTaskIncrementTick+0x168>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d007      	beq.n	800e6ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	617b      	str	r3, [r7, #20]
 800e6a2:	e004      	b.n	800e6ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e6a4:	4b0e      	ldr	r3, [pc, #56]	; (800e6e0 <xTaskIncrementTick+0x16c>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	4a0d      	ldr	r2, [pc, #52]	; (800e6e0 <xTaskIncrementTick+0x16c>)
 800e6ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e6ae:	697b      	ldr	r3, [r7, #20]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	20001004 	.word	0x20001004
 800e6bc:	20000fe0 	.word	0x20000fe0
 800e6c0:	20000f94 	.word	0x20000f94
 800e6c4:	20000f98 	.word	0x20000f98
 800e6c8:	20000ff4 	.word	0x20000ff4
 800e6cc:	20000ffc 	.word	0x20000ffc
 800e6d0:	20000fe4 	.word	0x20000fe4
 800e6d4:	20000ee0 	.word	0x20000ee0
 800e6d8:	20000edc 	.word	0x20000edc
 800e6dc:	20000ff0 	.word	0x20000ff0
 800e6e0:	20000fec 	.word	0x20000fec

0800e6e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b087      	sub	sp, #28
 800e6e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6ea:	4b27      	ldr	r3, [pc, #156]	; (800e788 <vTaskSwitchContext+0xa4>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6f2:	4b26      	ldr	r3, [pc, #152]	; (800e78c <vTaskSwitchContext+0xa8>)
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6f8:	e03f      	b.n	800e77a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e6fa:	4b24      	ldr	r3, [pc, #144]	; (800e78c <vTaskSwitchContext+0xa8>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e700:	4b23      	ldr	r3, [pc, #140]	; (800e790 <vTaskSwitchContext+0xac>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	fab3 f383 	clz	r3, r3
 800e70c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e70e:	7afb      	ldrb	r3, [r7, #11]
 800e710:	f1c3 031f 	rsb	r3, r3, #31
 800e714:	617b      	str	r3, [r7, #20]
 800e716:	491f      	ldr	r1, [pc, #124]	; (800e794 <vTaskSwitchContext+0xb0>)
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	4613      	mov	r3, r2
 800e71c:	009b      	lsls	r3, r3, #2
 800e71e:	4413      	add	r3, r2
 800e720:	009b      	lsls	r3, r3, #2
 800e722:	440b      	add	r3, r1
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10a      	bne.n	800e740 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	607b      	str	r3, [r7, #4]
}
 800e73c:	bf00      	nop
 800e73e:	e7fe      	b.n	800e73e <vTaskSwitchContext+0x5a>
 800e740:	697a      	ldr	r2, [r7, #20]
 800e742:	4613      	mov	r3, r2
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	4413      	add	r3, r2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4a12      	ldr	r2, [pc, #72]	; (800e794 <vTaskSwitchContext+0xb0>)
 800e74c:	4413      	add	r3, r2
 800e74e:	613b      	str	r3, [r7, #16]
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	685a      	ldr	r2, [r3, #4]
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	605a      	str	r2, [r3, #4]
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	685a      	ldr	r2, [r3, #4]
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	3308      	adds	r3, #8
 800e762:	429a      	cmp	r2, r3
 800e764:	d104      	bne.n	800e770 <vTaskSwitchContext+0x8c>
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	685a      	ldr	r2, [r3, #4]
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	605a      	str	r2, [r3, #4]
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	4a08      	ldr	r2, [pc, #32]	; (800e798 <vTaskSwitchContext+0xb4>)
 800e778:	6013      	str	r3, [r2, #0]
}
 800e77a:	bf00      	nop
 800e77c:	371c      	adds	r7, #28
 800e77e:	46bd      	mov	sp, r7
 800e780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e784:	4770      	bx	lr
 800e786:	bf00      	nop
 800e788:	20001004 	.word	0x20001004
 800e78c:	20000ff0 	.word	0x20000ff0
 800e790:	20000fe4 	.word	0x20000fe4
 800e794:	20000ee0 	.word	0x20000ee0
 800e798:	20000edc 	.word	0x20000edc

0800e79c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b084      	sub	sp, #16
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10a      	bne.n	800e7c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	f383 8811 	msr	BASEPRI, r3
 800e7b4:	f3bf 8f6f 	isb	sy
 800e7b8:	f3bf 8f4f 	dsb	sy
 800e7bc:	60fb      	str	r3, [r7, #12]
}
 800e7be:	bf00      	nop
 800e7c0:	e7fe      	b.n	800e7c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7c2:	4b07      	ldr	r3, [pc, #28]	; (800e7e0 <vTaskPlaceOnEventList+0x44>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3318      	adds	r3, #24
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	6878      	ldr	r0, [r7, #4]
 800e7cc:	f7fe ff35 	bl	800d63a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7d0:	2101      	movs	r1, #1
 800e7d2:	6838      	ldr	r0, [r7, #0]
 800e7d4:	f000 fa66 	bl	800eca4 <prvAddCurrentTaskToDelayedList>
}
 800e7d8:	bf00      	nop
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20000edc 	.word	0x20000edc

0800e7e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b086      	sub	sp, #24
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10a      	bne.n	800e810 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7fe:	f383 8811 	msr	BASEPRI, r3
 800e802:	f3bf 8f6f 	isb	sy
 800e806:	f3bf 8f4f 	dsb	sy
 800e80a:	60fb      	str	r3, [r7, #12]
}
 800e80c:	bf00      	nop
 800e80e:	e7fe      	b.n	800e80e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	3318      	adds	r3, #24
 800e814:	4618      	mov	r0, r3
 800e816:	f7fe ff49 	bl	800d6ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e81a:	4b1d      	ldr	r3, [pc, #116]	; (800e890 <xTaskRemoveFromEventList+0xac>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d11c      	bne.n	800e85c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	3304      	adds	r3, #4
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe ff40 	bl	800d6ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e830:	2201      	movs	r2, #1
 800e832:	409a      	lsls	r2, r3
 800e834:	4b17      	ldr	r3, [pc, #92]	; (800e894 <xTaskRemoveFromEventList+0xb0>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4313      	orrs	r3, r2
 800e83a:	4a16      	ldr	r2, [pc, #88]	; (800e894 <xTaskRemoveFromEventList+0xb0>)
 800e83c:	6013      	str	r3, [r2, #0]
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e842:	4613      	mov	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	4413      	add	r3, r2
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	4a13      	ldr	r2, [pc, #76]	; (800e898 <xTaskRemoveFromEventList+0xb4>)
 800e84c:	441a      	add	r2, r3
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	3304      	adds	r3, #4
 800e852:	4619      	mov	r1, r3
 800e854:	4610      	mov	r0, r2
 800e856:	f7fe fecc 	bl	800d5f2 <vListInsertEnd>
 800e85a:	e005      	b.n	800e868 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e85c:	693b      	ldr	r3, [r7, #16]
 800e85e:	3318      	adds	r3, #24
 800e860:	4619      	mov	r1, r3
 800e862:	480e      	ldr	r0, [pc, #56]	; (800e89c <xTaskRemoveFromEventList+0xb8>)
 800e864:	f7fe fec5 	bl	800d5f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e86c:	4b0c      	ldr	r3, [pc, #48]	; (800e8a0 <xTaskRemoveFromEventList+0xbc>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e872:	429a      	cmp	r2, r3
 800e874:	d905      	bls.n	800e882 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e876:	2301      	movs	r3, #1
 800e878:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e87a:	4b0a      	ldr	r3, [pc, #40]	; (800e8a4 <xTaskRemoveFromEventList+0xc0>)
 800e87c:	2201      	movs	r2, #1
 800e87e:	601a      	str	r2, [r3, #0]
 800e880:	e001      	b.n	800e886 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e882:	2300      	movs	r3, #0
 800e884:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e886:	697b      	ldr	r3, [r7, #20]
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	20001004 	.word	0x20001004
 800e894:	20000fe4 	.word	0x20000fe4
 800e898:	20000ee0 	.word	0x20000ee0
 800e89c:	20000f9c 	.word	0x20000f9c
 800e8a0:	20000edc 	.word	0x20000edc
 800e8a4:	20000ff0 	.word	0x20000ff0

0800e8a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e8b0:	4b06      	ldr	r3, [pc, #24]	; (800e8cc <vTaskInternalSetTimeOutState+0x24>)
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e8b8:	4b05      	ldr	r3, [pc, #20]	; (800e8d0 <vTaskInternalSetTimeOutState+0x28>)
 800e8ba:	681a      	ldr	r2, [r3, #0]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	605a      	str	r2, [r3, #4]
}
 800e8c0:	bf00      	nop
 800e8c2:	370c      	adds	r7, #12
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	20000ff4 	.word	0x20000ff4
 800e8d0:	20000fe0 	.word	0x20000fe0

0800e8d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b088      	sub	sp, #32
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d10a      	bne.n	800e8fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e8:	f383 8811 	msr	BASEPRI, r3
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f3bf 8f4f 	dsb	sy
 800e8f4:	613b      	str	r3, [r7, #16]
}
 800e8f6:	bf00      	nop
 800e8f8:	e7fe      	b.n	800e8f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d10a      	bne.n	800e916 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	60fb      	str	r3, [r7, #12]
}
 800e912:	bf00      	nop
 800e914:	e7fe      	b.n	800e914 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e916:	f000 fb55 	bl	800efc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e91a:	4b1d      	ldr	r3, [pc, #116]	; (800e990 <xTaskCheckForTimeOut+0xbc>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	69ba      	ldr	r2, [r7, #24]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e92a:	683b      	ldr	r3, [r7, #0]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e932:	d102      	bne.n	800e93a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e934:	2300      	movs	r3, #0
 800e936:	61fb      	str	r3, [r7, #28]
 800e938:	e023      	b.n	800e982 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	4b15      	ldr	r3, [pc, #84]	; (800e994 <xTaskCheckForTimeOut+0xc0>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	429a      	cmp	r2, r3
 800e944:	d007      	beq.n	800e956 <xTaskCheckForTimeOut+0x82>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	69ba      	ldr	r2, [r7, #24]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d302      	bcc.n	800e956 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e950:	2301      	movs	r3, #1
 800e952:	61fb      	str	r3, [r7, #28]
 800e954:	e015      	b.n	800e982 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	697a      	ldr	r2, [r7, #20]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d20b      	bcs.n	800e978 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	1ad2      	subs	r2, r2, r3
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7ff ff9b 	bl	800e8a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e972:	2300      	movs	r3, #0
 800e974:	61fb      	str	r3, [r7, #28]
 800e976:	e004      	b.n	800e982 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2200      	movs	r2, #0
 800e97c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e97e:	2301      	movs	r3, #1
 800e980:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e982:	f000 fb4f 	bl	800f024 <vPortExitCritical>

	return xReturn;
 800e986:	69fb      	ldr	r3, [r7, #28]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3720      	adds	r7, #32
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	20000fe0 	.word	0x20000fe0
 800e994:	20000ff4 	.word	0x20000ff4

0800e998 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e998:	b480      	push	{r7}
 800e99a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e99c:	4b03      	ldr	r3, [pc, #12]	; (800e9ac <vTaskMissedYield+0x14>)
 800e99e:	2201      	movs	r2, #1
 800e9a0:	601a      	str	r2, [r3, #0]
}
 800e9a2:	bf00      	nop
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr
 800e9ac:	20000ff0 	.word	0x20000ff0

0800e9b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b082      	sub	sp, #8
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e9b8:	f000 f852 	bl	800ea60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e9bc:	4b06      	ldr	r3, [pc, #24]	; (800e9d8 <prvIdleTask+0x28>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d9f9      	bls.n	800e9b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e9c4:	4b05      	ldr	r3, [pc, #20]	; (800e9dc <prvIdleTask+0x2c>)
 800e9c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e9ca:	601a      	str	r2, [r3, #0]
 800e9cc:	f3bf 8f4f 	dsb	sy
 800e9d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e9d4:	e7f0      	b.n	800e9b8 <prvIdleTask+0x8>
 800e9d6:	bf00      	nop
 800e9d8:	20000ee0 	.word	0x20000ee0
 800e9dc:	e000ed04 	.word	0xe000ed04

0800e9e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	607b      	str	r3, [r7, #4]
 800e9ea:	e00c      	b.n	800ea06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e9ec:	687a      	ldr	r2, [r7, #4]
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	009b      	lsls	r3, r3, #2
 800e9f2:	4413      	add	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4a12      	ldr	r2, [pc, #72]	; (800ea40 <prvInitialiseTaskLists+0x60>)
 800e9f8:	4413      	add	r3, r2
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fe fdcc 	bl	800d598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	3301      	adds	r3, #1
 800ea04:	607b      	str	r3, [r7, #4]
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b06      	cmp	r3, #6
 800ea0a:	d9ef      	bls.n	800e9ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea0c:	480d      	ldr	r0, [pc, #52]	; (800ea44 <prvInitialiseTaskLists+0x64>)
 800ea0e:	f7fe fdc3 	bl	800d598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea12:	480d      	ldr	r0, [pc, #52]	; (800ea48 <prvInitialiseTaskLists+0x68>)
 800ea14:	f7fe fdc0 	bl	800d598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea18:	480c      	ldr	r0, [pc, #48]	; (800ea4c <prvInitialiseTaskLists+0x6c>)
 800ea1a:	f7fe fdbd 	bl	800d598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea1e:	480c      	ldr	r0, [pc, #48]	; (800ea50 <prvInitialiseTaskLists+0x70>)
 800ea20:	f7fe fdba 	bl	800d598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea24:	480b      	ldr	r0, [pc, #44]	; (800ea54 <prvInitialiseTaskLists+0x74>)
 800ea26:	f7fe fdb7 	bl	800d598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea2a:	4b0b      	ldr	r3, [pc, #44]	; (800ea58 <prvInitialiseTaskLists+0x78>)
 800ea2c:	4a05      	ldr	r2, [pc, #20]	; (800ea44 <prvInitialiseTaskLists+0x64>)
 800ea2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea30:	4b0a      	ldr	r3, [pc, #40]	; (800ea5c <prvInitialiseTaskLists+0x7c>)
 800ea32:	4a05      	ldr	r2, [pc, #20]	; (800ea48 <prvInitialiseTaskLists+0x68>)
 800ea34:	601a      	str	r2, [r3, #0]
}
 800ea36:	bf00      	nop
 800ea38:	3708      	adds	r7, #8
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bd80      	pop	{r7, pc}
 800ea3e:	bf00      	nop
 800ea40:	20000ee0 	.word	0x20000ee0
 800ea44:	20000f6c 	.word	0x20000f6c
 800ea48:	20000f80 	.word	0x20000f80
 800ea4c:	20000f9c 	.word	0x20000f9c
 800ea50:	20000fb0 	.word	0x20000fb0
 800ea54:	20000fc8 	.word	0x20000fc8
 800ea58:	20000f94 	.word	0x20000f94
 800ea5c:	20000f98 	.word	0x20000f98

0800ea60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea66:	e019      	b.n	800ea9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ea68:	f000 faac 	bl	800efc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea6c:	4b10      	ldr	r3, [pc, #64]	; (800eab0 <prvCheckTasksWaitingTermination+0x50>)
 800ea6e:	68db      	ldr	r3, [r3, #12]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7fe fe17 	bl	800d6ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea7e:	4b0d      	ldr	r3, [pc, #52]	; (800eab4 <prvCheckTasksWaitingTermination+0x54>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	3b01      	subs	r3, #1
 800ea84:	4a0b      	ldr	r2, [pc, #44]	; (800eab4 <prvCheckTasksWaitingTermination+0x54>)
 800ea86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea88:	4b0b      	ldr	r3, [pc, #44]	; (800eab8 <prvCheckTasksWaitingTermination+0x58>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	4a0a      	ldr	r2, [pc, #40]	; (800eab8 <prvCheckTasksWaitingTermination+0x58>)
 800ea90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea92:	f000 fac7 	bl	800f024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 f810 	bl	800eabc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea9c:	4b06      	ldr	r3, [pc, #24]	; (800eab8 <prvCheckTasksWaitingTermination+0x58>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d1e1      	bne.n	800ea68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20000fb0 	.word	0x20000fb0
 800eab4:	20000fdc 	.word	0x20000fdc
 800eab8:	20000fc4 	.word	0x20000fc4

0800eabc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d108      	bne.n	800eae0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ead2:	4618      	mov	r0, r3
 800ead4:	f000 fc24 	bl	800f320 <vPortFree>
				vPortFree( pxTCB );
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 fc21 	bl	800f320 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eade:	e018      	b.n	800eb12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eae6:	2b01      	cmp	r3, #1
 800eae8:	d103      	bne.n	800eaf2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fc18 	bl	800f320 <vPortFree>
	}
 800eaf0:	e00f      	b.n	800eb12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d00a      	beq.n	800eb12 <prvDeleteTCB+0x56>
	__asm volatile
 800eafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	60fb      	str	r3, [r7, #12]
}
 800eb0e:	bf00      	nop
 800eb10:	e7fe      	b.n	800eb10 <prvDeleteTCB+0x54>
	}
 800eb12:	bf00      	nop
 800eb14:	3710      	adds	r7, #16
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
	...

0800eb1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb22:	4b0c      	ldr	r3, [pc, #48]	; (800eb54 <prvResetNextTaskUnblockTime+0x38>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d104      	bne.n	800eb36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb2c:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <prvResetNextTaskUnblockTime+0x3c>)
 800eb2e:	f04f 32ff 	mov.w	r2, #4294967295
 800eb32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eb34:	e008      	b.n	800eb48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb36:	4b07      	ldr	r3, [pc, #28]	; (800eb54 <prvResetNextTaskUnblockTime+0x38>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	68db      	ldr	r3, [r3, #12]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	4a04      	ldr	r2, [pc, #16]	; (800eb58 <prvResetNextTaskUnblockTime+0x3c>)
 800eb46:	6013      	str	r3, [r2, #0]
}
 800eb48:	bf00      	nop
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	20000f94 	.word	0x20000f94
 800eb58:	20000ffc 	.word	0x20000ffc

0800eb5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb62:	4b0b      	ldr	r3, [pc, #44]	; (800eb90 <xTaskGetSchedulerState+0x34>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d102      	bne.n	800eb70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	607b      	str	r3, [r7, #4]
 800eb6e:	e008      	b.n	800eb82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb70:	4b08      	ldr	r3, [pc, #32]	; (800eb94 <xTaskGetSchedulerState+0x38>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d102      	bne.n	800eb7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb78:	2302      	movs	r3, #2
 800eb7a:	607b      	str	r3, [r7, #4]
 800eb7c:	e001      	b.n	800eb82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb82:	687b      	ldr	r3, [r7, #4]
	}
 800eb84:	4618      	mov	r0, r3
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr
 800eb90:	20000fe8 	.word	0x20000fe8
 800eb94:	20001004 	.word	0x20001004

0800eb98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800eba4:	2300      	movs	r3, #0
 800eba6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d06e      	beq.n	800ec8c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ebae:	4b3a      	ldr	r3, [pc, #232]	; (800ec98 <xTaskPriorityDisinherit+0x100>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d00a      	beq.n	800ebce <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ebb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	60fb      	str	r3, [r7, #12]
}
 800ebca:	bf00      	nop
 800ebcc:	e7fe      	b.n	800ebcc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10a      	bne.n	800ebec <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ebd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebda:	f383 8811 	msr	BASEPRI, r3
 800ebde:	f3bf 8f6f 	isb	sy
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	60bb      	str	r3, [r7, #8]
}
 800ebe8:	bf00      	nop
 800ebea:	e7fe      	b.n	800ebea <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebf0:	1e5a      	subs	r2, r3, #1
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d044      	beq.n	800ec8c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec02:	693b      	ldr	r3, [r7, #16]
 800ec04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d140      	bne.n	800ec8c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe fd4c 	bl	800d6ac <uxListRemove>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d115      	bne.n	800ec46 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec1e:	491f      	ldr	r1, [pc, #124]	; (800ec9c <xTaskPriorityDisinherit+0x104>)
 800ec20:	4613      	mov	r3, r2
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	4413      	add	r3, r2
 800ec26:	009b      	lsls	r3, r3, #2
 800ec28:	440b      	add	r3, r1
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d10a      	bne.n	800ec46 <xTaskPriorityDisinherit+0xae>
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec34:	2201      	movs	r2, #1
 800ec36:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3a:	43da      	mvns	r2, r3
 800ec3c:	4b18      	ldr	r3, [pc, #96]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4013      	ands	r3, r2
 800ec42:	4a17      	ldr	r2, [pc, #92]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec52:	f1c3 0207 	rsb	r2, r3, #7
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5e:	2201      	movs	r2, #1
 800ec60:	409a      	lsls	r2, r3
 800ec62:	4b0f      	ldr	r3, [pc, #60]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4313      	orrs	r3, r2
 800ec68:	4a0d      	ldr	r2, [pc, #52]	; (800eca0 <xTaskPriorityDisinherit+0x108>)
 800ec6a:	6013      	str	r3, [r2, #0]
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec70:	4613      	mov	r3, r2
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	4413      	add	r3, r2
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	4a08      	ldr	r2, [pc, #32]	; (800ec9c <xTaskPriorityDisinherit+0x104>)
 800ec7a:	441a      	add	r2, r3
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	3304      	adds	r3, #4
 800ec80:	4619      	mov	r1, r3
 800ec82:	4610      	mov	r0, r2
 800ec84:	f7fe fcb5 	bl	800d5f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec8c:	697b      	ldr	r3, [r7, #20]
	}
 800ec8e:	4618      	mov	r0, r3
 800ec90:	3718      	adds	r7, #24
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	20000edc 	.word	0x20000edc
 800ec9c:	20000ee0 	.word	0x20000ee0
 800eca0:	20000fe4 	.word	0x20000fe4

0800eca4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ecae:	4b29      	ldr	r3, [pc, #164]	; (800ed54 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ecb4:	4b28      	ldr	r3, [pc, #160]	; (800ed58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	3304      	adds	r3, #4
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7fe fcf6 	bl	800d6ac <uxListRemove>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10b      	bne.n	800ecde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ecc6:	4b24      	ldr	r3, [pc, #144]	; (800ed58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eccc:	2201      	movs	r2, #1
 800ecce:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd2:	43da      	mvns	r2, r3
 800ecd4:	4b21      	ldr	r3, [pc, #132]	; (800ed5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	4013      	ands	r3, r2
 800ecda:	4a20      	ldr	r2, [pc, #128]	; (800ed5c <prvAddCurrentTaskToDelayedList+0xb8>)
 800ecdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece4:	d10a      	bne.n	800ecfc <prvAddCurrentTaskToDelayedList+0x58>
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d007      	beq.n	800ecfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ecec:	4b1a      	ldr	r3, [pc, #104]	; (800ed58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	3304      	adds	r3, #4
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	481a      	ldr	r0, [pc, #104]	; (800ed60 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ecf6:	f7fe fc7c 	bl	800d5f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ecfa:	e026      	b.n	800ed4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ecfc:	68fa      	ldr	r2, [r7, #12]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4413      	add	r3, r2
 800ed02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ed04:	4b14      	ldr	r3, [pc, #80]	; (800ed58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	68ba      	ldr	r2, [r7, #8]
 800ed0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d209      	bcs.n	800ed28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed14:	4b13      	ldr	r3, [pc, #76]	; (800ed64 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	4b0f      	ldr	r3, [pc, #60]	; (800ed58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	3304      	adds	r3, #4
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4610      	mov	r0, r2
 800ed22:	f7fe fc8a 	bl	800d63a <vListInsert>
}
 800ed26:	e010      	b.n	800ed4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ed28:	4b0f      	ldr	r3, [pc, #60]	; (800ed68 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	4b0a      	ldr	r3, [pc, #40]	; (800ed58 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3304      	adds	r3, #4
 800ed32:	4619      	mov	r1, r3
 800ed34:	4610      	mov	r0, r2
 800ed36:	f7fe fc80 	bl	800d63a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ed3a:	4b0c      	ldr	r3, [pc, #48]	; (800ed6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68ba      	ldr	r2, [r7, #8]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d202      	bcs.n	800ed4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ed44:	4a09      	ldr	r2, [pc, #36]	; (800ed6c <prvAddCurrentTaskToDelayedList+0xc8>)
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	6013      	str	r3, [r2, #0]
}
 800ed4a:	bf00      	nop
 800ed4c:	3710      	adds	r7, #16
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	bd80      	pop	{r7, pc}
 800ed52:	bf00      	nop
 800ed54:	20000fe0 	.word	0x20000fe0
 800ed58:	20000edc 	.word	0x20000edc
 800ed5c:	20000fe4 	.word	0x20000fe4
 800ed60:	20000fc8 	.word	0x20000fc8
 800ed64:	20000f98 	.word	0x20000f98
 800ed68:	20000f94 	.word	0x20000f94
 800ed6c:	20000ffc 	.word	0x20000ffc

0800ed70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	3b04      	subs	r3, #4
 800ed80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ed88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3b04      	subs	r3, #4
 800ed8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	f023 0201 	bic.w	r2, r3, #1
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	3b04      	subs	r3, #4
 800ed9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eda0:	4a0c      	ldr	r2, [pc, #48]	; (800edd4 <pxPortInitialiseStack+0x64>)
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	3b14      	subs	r3, #20
 800edaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	3b04      	subs	r3, #4
 800edb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f06f 0202 	mvn.w	r2, #2
 800edbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	3b20      	subs	r3, #32
 800edc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800edc6:	68fb      	ldr	r3, [r7, #12]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3714      	adds	r7, #20
 800edcc:	46bd      	mov	sp, r7
 800edce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd2:	4770      	bx	lr
 800edd4:	0800edd9 	.word	0x0800edd9

0800edd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800edd8:	b480      	push	{r7}
 800edda:	b085      	sub	sp, #20
 800eddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800edde:	2300      	movs	r3, #0
 800ede0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ede2:	4b12      	ldr	r3, [pc, #72]	; (800ee2c <prvTaskExitError+0x54>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edea:	d00a      	beq.n	800ee02 <prvTaskExitError+0x2a>
	__asm volatile
 800edec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf0:	f383 8811 	msr	BASEPRI, r3
 800edf4:	f3bf 8f6f 	isb	sy
 800edf8:	f3bf 8f4f 	dsb	sy
 800edfc:	60fb      	str	r3, [r7, #12]
}
 800edfe:	bf00      	nop
 800ee00:	e7fe      	b.n	800ee00 <prvTaskExitError+0x28>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	60bb      	str	r3, [r7, #8]
}
 800ee14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ee16:	bf00      	nop
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d0fc      	beq.n	800ee18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ee1e:	bf00      	nop
 800ee20:	bf00      	nop
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	2000000c 	.word	0x2000000c

0800ee30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ee30:	4b07      	ldr	r3, [pc, #28]	; (800ee50 <pxCurrentTCBConst2>)
 800ee32:	6819      	ldr	r1, [r3, #0]
 800ee34:	6808      	ldr	r0, [r1, #0]
 800ee36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3a:	f380 8809 	msr	PSP, r0
 800ee3e:	f3bf 8f6f 	isb	sy
 800ee42:	f04f 0000 	mov.w	r0, #0
 800ee46:	f380 8811 	msr	BASEPRI, r0
 800ee4a:	4770      	bx	lr
 800ee4c:	f3af 8000 	nop.w

0800ee50 <pxCurrentTCBConst2>:
 800ee50:	20000edc 	.word	0x20000edc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ee54:	bf00      	nop
 800ee56:	bf00      	nop

0800ee58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ee58:	4808      	ldr	r0, [pc, #32]	; (800ee7c <prvPortStartFirstTask+0x24>)
 800ee5a:	6800      	ldr	r0, [r0, #0]
 800ee5c:	6800      	ldr	r0, [r0, #0]
 800ee5e:	f380 8808 	msr	MSP, r0
 800ee62:	f04f 0000 	mov.w	r0, #0
 800ee66:	f380 8814 	msr	CONTROL, r0
 800ee6a:	b662      	cpsie	i
 800ee6c:	b661      	cpsie	f
 800ee6e:	f3bf 8f4f 	dsb	sy
 800ee72:	f3bf 8f6f 	isb	sy
 800ee76:	df00      	svc	0
 800ee78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ee7a:	bf00      	nop
 800ee7c:	e000ed08 	.word	0xe000ed08

0800ee80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ee86:	4b46      	ldr	r3, [pc, #280]	; (800efa0 <xPortStartScheduler+0x120>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a46      	ldr	r2, [pc, #280]	; (800efa4 <xPortStartScheduler+0x124>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d10a      	bne.n	800eea6 <xPortStartScheduler+0x26>
	__asm volatile
 800ee90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee94:	f383 8811 	msr	BASEPRI, r3
 800ee98:	f3bf 8f6f 	isb	sy
 800ee9c:	f3bf 8f4f 	dsb	sy
 800eea0:	613b      	str	r3, [r7, #16]
}
 800eea2:	bf00      	nop
 800eea4:	e7fe      	b.n	800eea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eea6:	4b3e      	ldr	r3, [pc, #248]	; (800efa0 <xPortStartScheduler+0x120>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a3f      	ldr	r2, [pc, #252]	; (800efa8 <xPortStartScheduler+0x128>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d10a      	bne.n	800eec6 <xPortStartScheduler+0x46>
	__asm volatile
 800eeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeb4:	f383 8811 	msr	BASEPRI, r3
 800eeb8:	f3bf 8f6f 	isb	sy
 800eebc:	f3bf 8f4f 	dsb	sy
 800eec0:	60fb      	str	r3, [r7, #12]
}
 800eec2:	bf00      	nop
 800eec4:	e7fe      	b.n	800eec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eec6:	4b39      	ldr	r3, [pc, #228]	; (800efac <xPortStartScheduler+0x12c>)
 800eec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eeca:	697b      	ldr	r3, [r7, #20]
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	22ff      	movs	r2, #255	; 0xff
 800eed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eee0:	78fb      	ldrb	r3, [r7, #3]
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	4b31      	ldr	r3, [pc, #196]	; (800efb0 <xPortStartScheduler+0x130>)
 800eeec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eeee:	4b31      	ldr	r3, [pc, #196]	; (800efb4 <xPortStartScheduler+0x134>)
 800eef0:	2207      	movs	r2, #7
 800eef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eef4:	e009      	b.n	800ef0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eef6:	4b2f      	ldr	r3, [pc, #188]	; (800efb4 <xPortStartScheduler+0x134>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	3b01      	subs	r3, #1
 800eefc:	4a2d      	ldr	r2, [pc, #180]	; (800efb4 <xPortStartScheduler+0x134>)
 800eefe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ef00:	78fb      	ldrb	r3, [r7, #3]
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	005b      	lsls	r3, r3, #1
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ef0a:	78fb      	ldrb	r3, [r7, #3]
 800ef0c:	b2db      	uxtb	r3, r3
 800ef0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef12:	2b80      	cmp	r3, #128	; 0x80
 800ef14:	d0ef      	beq.n	800eef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ef16:	4b27      	ldr	r3, [pc, #156]	; (800efb4 <xPortStartScheduler+0x134>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f1c3 0307 	rsb	r3, r3, #7
 800ef1e:	2b04      	cmp	r3, #4
 800ef20:	d00a      	beq.n	800ef38 <xPortStartScheduler+0xb8>
	__asm volatile
 800ef22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef26:	f383 8811 	msr	BASEPRI, r3
 800ef2a:	f3bf 8f6f 	isb	sy
 800ef2e:	f3bf 8f4f 	dsb	sy
 800ef32:	60bb      	str	r3, [r7, #8]
}
 800ef34:	bf00      	nop
 800ef36:	e7fe      	b.n	800ef36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ef38:	4b1e      	ldr	r3, [pc, #120]	; (800efb4 <xPortStartScheduler+0x134>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	021b      	lsls	r3, r3, #8
 800ef3e:	4a1d      	ldr	r2, [pc, #116]	; (800efb4 <xPortStartScheduler+0x134>)
 800ef40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ef42:	4b1c      	ldr	r3, [pc, #112]	; (800efb4 <xPortStartScheduler+0x134>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ef4a:	4a1a      	ldr	r2, [pc, #104]	; (800efb4 <xPortStartScheduler+0x134>)
 800ef4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ef56:	4b18      	ldr	r3, [pc, #96]	; (800efb8 <xPortStartScheduler+0x138>)
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	4a17      	ldr	r2, [pc, #92]	; (800efb8 <xPortStartScheduler+0x138>)
 800ef5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ef60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ef62:	4b15      	ldr	r3, [pc, #84]	; (800efb8 <xPortStartScheduler+0x138>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	4a14      	ldr	r2, [pc, #80]	; (800efb8 <xPortStartScheduler+0x138>)
 800ef68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ef6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ef6e:	f000 f8dd 	bl	800f12c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ef72:	4b12      	ldr	r3, [pc, #72]	; (800efbc <xPortStartScheduler+0x13c>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ef78:	f000 f8fc 	bl	800f174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ef7c:	4b10      	ldr	r3, [pc, #64]	; (800efc0 <xPortStartScheduler+0x140>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	4a0f      	ldr	r2, [pc, #60]	; (800efc0 <xPortStartScheduler+0x140>)
 800ef82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ef86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ef88:	f7ff ff66 	bl	800ee58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ef8c:	f7ff fbaa 	bl	800e6e4 <vTaskSwitchContext>
	prvTaskExitError();
 800ef90:	f7ff ff22 	bl	800edd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ef94:	2300      	movs	r3, #0
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3718      	adds	r7, #24
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
 800ef9e:	bf00      	nop
 800efa0:	e000ed00 	.word	0xe000ed00
 800efa4:	410fc271 	.word	0x410fc271
 800efa8:	410fc270 	.word	0x410fc270
 800efac:	e000e400 	.word	0xe000e400
 800efb0:	20001008 	.word	0x20001008
 800efb4:	2000100c 	.word	0x2000100c
 800efb8:	e000ed20 	.word	0xe000ed20
 800efbc:	2000000c 	.word	0x2000000c
 800efc0:	e000ef34 	.word	0xe000ef34

0800efc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800efc4:	b480      	push	{r7}
 800efc6:	b083      	sub	sp, #12
 800efc8:	af00      	add	r7, sp, #0
	__asm volatile
 800efca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efce:	f383 8811 	msr	BASEPRI, r3
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	607b      	str	r3, [r7, #4]
}
 800efdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800efde:	4b0f      	ldr	r3, [pc, #60]	; (800f01c <vPortEnterCritical+0x58>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	3301      	adds	r3, #1
 800efe4:	4a0d      	ldr	r2, [pc, #52]	; (800f01c <vPortEnterCritical+0x58>)
 800efe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800efe8:	4b0c      	ldr	r3, [pc, #48]	; (800f01c <vPortEnterCritical+0x58>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b01      	cmp	r3, #1
 800efee:	d10f      	bne.n	800f010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eff0:	4b0b      	ldr	r3, [pc, #44]	; (800f020 <vPortEnterCritical+0x5c>)
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00a      	beq.n	800f010 <vPortEnterCritical+0x4c>
	__asm volatile
 800effa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	603b      	str	r3, [r7, #0]
}
 800f00c:	bf00      	nop
 800f00e:	e7fe      	b.n	800f00e <vPortEnterCritical+0x4a>
	}
}
 800f010:	bf00      	nop
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	2000000c 	.word	0x2000000c
 800f020:	e000ed04 	.word	0xe000ed04

0800f024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f02a:	4b12      	ldr	r3, [pc, #72]	; (800f074 <vPortExitCritical+0x50>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d10a      	bne.n	800f048 <vPortExitCritical+0x24>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	607b      	str	r3, [r7, #4]
}
 800f044:	bf00      	nop
 800f046:	e7fe      	b.n	800f046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f048:	4b0a      	ldr	r3, [pc, #40]	; (800f074 <vPortExitCritical+0x50>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	3b01      	subs	r3, #1
 800f04e:	4a09      	ldr	r2, [pc, #36]	; (800f074 <vPortExitCritical+0x50>)
 800f050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f052:	4b08      	ldr	r3, [pc, #32]	; (800f074 <vPortExitCritical+0x50>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d105      	bne.n	800f066 <vPortExitCritical+0x42>
 800f05a:	2300      	movs	r3, #0
 800f05c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f066:	bf00      	nop
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	2000000c 	.word	0x2000000c
	...

0800f080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f080:	f3ef 8009 	mrs	r0, PSP
 800f084:	f3bf 8f6f 	isb	sy
 800f088:	4b15      	ldr	r3, [pc, #84]	; (800f0e0 <pxCurrentTCBConst>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	f01e 0f10 	tst.w	lr, #16
 800f090:	bf08      	it	eq
 800f092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09a:	6010      	str	r0, [r2, #0]
 800f09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f0a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f0a4:	f380 8811 	msr	BASEPRI, r0
 800f0a8:	f3bf 8f4f 	dsb	sy
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f7ff fb18 	bl	800e6e4 <vTaskSwitchContext>
 800f0b4:	f04f 0000 	mov.w	r0, #0
 800f0b8:	f380 8811 	msr	BASEPRI, r0
 800f0bc:	bc09      	pop	{r0, r3}
 800f0be:	6819      	ldr	r1, [r3, #0]
 800f0c0:	6808      	ldr	r0, [r1, #0]
 800f0c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c6:	f01e 0f10 	tst.w	lr, #16
 800f0ca:	bf08      	it	eq
 800f0cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f0d0:	f380 8809 	msr	PSP, r0
 800f0d4:	f3bf 8f6f 	isb	sy
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	f3af 8000 	nop.w

0800f0e0 <pxCurrentTCBConst>:
 800f0e0:	20000edc 	.word	0x20000edc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f0e4:	bf00      	nop
 800f0e6:	bf00      	nop

0800f0e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f2:	f383 8811 	msr	BASEPRI, r3
 800f0f6:	f3bf 8f6f 	isb	sy
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	607b      	str	r3, [r7, #4]
}
 800f100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f102:	f7ff fa37 	bl	800e574 <xTaskIncrementTick>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f10c:	4b06      	ldr	r3, [pc, #24]	; (800f128 <xPortSysTickHandler+0x40>)
 800f10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	2300      	movs	r3, #0
 800f116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	f383 8811 	msr	BASEPRI, r3
}
 800f11e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f120:	bf00      	nop
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	e000ed04 	.word	0xe000ed04

0800f12c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f12c:	b480      	push	{r7}
 800f12e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f130:	4b0b      	ldr	r3, [pc, #44]	; (800f160 <vPortSetupTimerInterrupt+0x34>)
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f136:	4b0b      	ldr	r3, [pc, #44]	; (800f164 <vPortSetupTimerInterrupt+0x38>)
 800f138:	2200      	movs	r2, #0
 800f13a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f13c:	4b0a      	ldr	r3, [pc, #40]	; (800f168 <vPortSetupTimerInterrupt+0x3c>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a0a      	ldr	r2, [pc, #40]	; (800f16c <vPortSetupTimerInterrupt+0x40>)
 800f142:	fba2 2303 	umull	r2, r3, r2, r3
 800f146:	099b      	lsrs	r3, r3, #6
 800f148:	4a09      	ldr	r2, [pc, #36]	; (800f170 <vPortSetupTimerInterrupt+0x44>)
 800f14a:	3b01      	subs	r3, #1
 800f14c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f14e:	4b04      	ldr	r3, [pc, #16]	; (800f160 <vPortSetupTimerInterrupt+0x34>)
 800f150:	2207      	movs	r2, #7
 800f152:	601a      	str	r2, [r3, #0]
}
 800f154:	bf00      	nop
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	e000e010 	.word	0xe000e010
 800f164:	e000e018 	.word	0xe000e018
 800f168:	20000000 	.word	0x20000000
 800f16c:	10624dd3 	.word	0x10624dd3
 800f170:	e000e014 	.word	0xe000e014

0800f174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f184 <vPortEnableVFP+0x10>
 800f178:	6801      	ldr	r1, [r0, #0]
 800f17a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f17e:	6001      	str	r1, [r0, #0]
 800f180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f182:	bf00      	nop
 800f184:	e000ed88 	.word	0xe000ed88

0800f188 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b08a      	sub	sp, #40	; 0x28
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f190:	2300      	movs	r3, #0
 800f192:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f194:	f7ff f934 	bl	800e400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f198:	4b5b      	ldr	r3, [pc, #364]	; (800f308 <pvPortMalloc+0x180>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d101      	bne.n	800f1a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f1a0:	f000 f920 	bl	800f3e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f1a4:	4b59      	ldr	r3, [pc, #356]	; (800f30c <pvPortMalloc+0x184>)
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4013      	ands	r3, r2
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	f040 8093 	bne.w	800f2d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d01d      	beq.n	800f1f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f1b8:	2208      	movs	r2, #8
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4413      	add	r3, r2
 800f1be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f003 0307 	and.w	r3, r3, #7
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d014      	beq.n	800f1f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f023 0307 	bic.w	r3, r3, #7
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	f003 0307 	and.w	r3, r3, #7
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00a      	beq.n	800f1f4 <pvPortMalloc+0x6c>
	__asm volatile
 800f1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1e2:	f383 8811 	msr	BASEPRI, r3
 800f1e6:	f3bf 8f6f 	isb	sy
 800f1ea:	f3bf 8f4f 	dsb	sy
 800f1ee:	617b      	str	r3, [r7, #20]
}
 800f1f0:	bf00      	nop
 800f1f2:	e7fe      	b.n	800f1f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d06e      	beq.n	800f2d8 <pvPortMalloc+0x150>
 800f1fa:	4b45      	ldr	r3, [pc, #276]	; (800f310 <pvPortMalloc+0x188>)
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	429a      	cmp	r2, r3
 800f202:	d869      	bhi.n	800f2d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f204:	4b43      	ldr	r3, [pc, #268]	; (800f314 <pvPortMalloc+0x18c>)
 800f206:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f208:	4b42      	ldr	r3, [pc, #264]	; (800f314 <pvPortMalloc+0x18c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f20e:	e004      	b.n	800f21a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f212:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	429a      	cmp	r2, r3
 800f222:	d903      	bls.n	800f22c <pvPortMalloc+0xa4>
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1f1      	bne.n	800f210 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f22c:	4b36      	ldr	r3, [pc, #216]	; (800f308 <pvPortMalloc+0x180>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f232:	429a      	cmp	r2, r3
 800f234:	d050      	beq.n	800f2d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	2208      	movs	r2, #8
 800f23c:	4413      	add	r3, r2
 800f23e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f242:	681a      	ldr	r2, [r3, #0]
 800f244:	6a3b      	ldr	r3, [r7, #32]
 800f246:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	1ad2      	subs	r2, r2, r3
 800f250:	2308      	movs	r3, #8
 800f252:	005b      	lsls	r3, r3, #1
 800f254:	429a      	cmp	r2, r3
 800f256:	d91f      	bls.n	800f298 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	4413      	add	r3, r2
 800f25e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	f003 0307 	and.w	r3, r3, #7
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00a      	beq.n	800f280 <pvPortMalloc+0xf8>
	__asm volatile
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	f383 8811 	msr	BASEPRI, r3
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	f3bf 8f4f 	dsb	sy
 800f27a:	613b      	str	r3, [r7, #16]
}
 800f27c:	bf00      	nop
 800f27e:	e7fe      	b.n	800f27e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f282:	685a      	ldr	r2, [r3, #4]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	1ad2      	subs	r2, r2, r3
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f292:	69b8      	ldr	r0, [r7, #24]
 800f294:	f000 f908 	bl	800f4a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f298:	4b1d      	ldr	r3, [pc, #116]	; (800f310 <pvPortMalloc+0x188>)
 800f29a:	681a      	ldr	r2, [r3, #0]
 800f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	4a1b      	ldr	r2, [pc, #108]	; (800f310 <pvPortMalloc+0x188>)
 800f2a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f2a6:	4b1a      	ldr	r3, [pc, #104]	; (800f310 <pvPortMalloc+0x188>)
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	4b1b      	ldr	r3, [pc, #108]	; (800f318 <pvPortMalloc+0x190>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d203      	bcs.n	800f2ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f2b2:	4b17      	ldr	r3, [pc, #92]	; (800f310 <pvPortMalloc+0x188>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a18      	ldr	r2, [pc, #96]	; (800f318 <pvPortMalloc+0x190>)
 800f2b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2bc:	685a      	ldr	r2, [r3, #4]
 800f2be:	4b13      	ldr	r3, [pc, #76]	; (800f30c <pvPortMalloc+0x184>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	431a      	orrs	r2, r3
 800f2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f2ce:	4b13      	ldr	r3, [pc, #76]	; (800f31c <pvPortMalloc+0x194>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	3301      	adds	r3, #1
 800f2d4:	4a11      	ldr	r2, [pc, #68]	; (800f31c <pvPortMalloc+0x194>)
 800f2d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f2d8:	f7ff f8a0 	bl	800e41c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	f003 0307 	and.w	r3, r3, #7
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00a      	beq.n	800f2fc <pvPortMalloc+0x174>
	__asm volatile
 800f2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ea:	f383 8811 	msr	BASEPRI, r3
 800f2ee:	f3bf 8f6f 	isb	sy
 800f2f2:	f3bf 8f4f 	dsb	sy
 800f2f6:	60fb      	str	r3, [r7, #12]
}
 800f2f8:	bf00      	nop
 800f2fa:	e7fe      	b.n	800f2fa <pvPortMalloc+0x172>
	return pvReturn;
 800f2fc:	69fb      	ldr	r3, [r7, #28]
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3728      	adds	r7, #40	; 0x28
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
 800f306:	bf00      	nop
 800f308:	20002788 	.word	0x20002788
 800f30c:	2000279c 	.word	0x2000279c
 800f310:	2000278c 	.word	0x2000278c
 800f314:	20002780 	.word	0x20002780
 800f318:	20002790 	.word	0x20002790
 800f31c:	20002794 	.word	0x20002794

0800f320 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d04d      	beq.n	800f3ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f332:	2308      	movs	r3, #8
 800f334:	425b      	negs	r3, r3
 800f336:	697a      	ldr	r2, [r7, #20]
 800f338:	4413      	add	r3, r2
 800f33a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f340:	693b      	ldr	r3, [r7, #16]
 800f342:	685a      	ldr	r2, [r3, #4]
 800f344:	4b24      	ldr	r3, [pc, #144]	; (800f3d8 <vPortFree+0xb8>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4013      	ands	r3, r2
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d10a      	bne.n	800f364 <vPortFree+0x44>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	60fb      	str	r3, [r7, #12]
}
 800f360:	bf00      	nop
 800f362:	e7fe      	b.n	800f362 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d00a      	beq.n	800f382 <vPortFree+0x62>
	__asm volatile
 800f36c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f370:	f383 8811 	msr	BASEPRI, r3
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	f3bf 8f4f 	dsb	sy
 800f37c:	60bb      	str	r3, [r7, #8]
}
 800f37e:	bf00      	nop
 800f380:	e7fe      	b.n	800f380 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	685a      	ldr	r2, [r3, #4]
 800f386:	4b14      	ldr	r3, [pc, #80]	; (800f3d8 <vPortFree+0xb8>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	4013      	ands	r3, r2
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d01e      	beq.n	800f3ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d11a      	bne.n	800f3ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f398:	693b      	ldr	r3, [r7, #16]
 800f39a:	685a      	ldr	r2, [r3, #4]
 800f39c:	4b0e      	ldr	r3, [pc, #56]	; (800f3d8 <vPortFree+0xb8>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	43db      	mvns	r3, r3
 800f3a2:	401a      	ands	r2, r3
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f3a8:	f7ff f82a 	bl	800e400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	685a      	ldr	r2, [r3, #4]
 800f3b0:	4b0a      	ldr	r3, [pc, #40]	; (800f3dc <vPortFree+0xbc>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	4a09      	ldr	r2, [pc, #36]	; (800f3dc <vPortFree+0xbc>)
 800f3b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f3ba:	6938      	ldr	r0, [r7, #16]
 800f3bc:	f000 f874 	bl	800f4a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f3c0:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <vPortFree+0xc0>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	3301      	adds	r3, #1
 800f3c6:	4a06      	ldr	r2, [pc, #24]	; (800f3e0 <vPortFree+0xc0>)
 800f3c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f3ca:	f7ff f827 	bl	800e41c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f3ce:	bf00      	nop
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	2000279c 	.word	0x2000279c
 800f3dc:	2000278c 	.word	0x2000278c
 800f3e0:	20002798 	.word	0x20002798

0800f3e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b085      	sub	sp, #20
 800f3e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f3ea:	f241 7370 	movw	r3, #6000	; 0x1770
 800f3ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f3f0:	4b27      	ldr	r3, [pc, #156]	; (800f490 <prvHeapInit+0xac>)
 800f3f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f003 0307 	and.w	r3, r3, #7
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d00c      	beq.n	800f418 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	3307      	adds	r3, #7
 800f402:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f023 0307 	bic.w	r3, r3, #7
 800f40a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f40c:	68ba      	ldr	r2, [r7, #8]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	4a1f      	ldr	r2, [pc, #124]	; (800f490 <prvHeapInit+0xac>)
 800f414:	4413      	add	r3, r2
 800f416:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f41c:	4a1d      	ldr	r2, [pc, #116]	; (800f494 <prvHeapInit+0xb0>)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f422:	4b1c      	ldr	r3, [pc, #112]	; (800f494 <prvHeapInit+0xb0>)
 800f424:	2200      	movs	r2, #0
 800f426:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	68ba      	ldr	r2, [r7, #8]
 800f42c:	4413      	add	r3, r2
 800f42e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f430:	2208      	movs	r2, #8
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	1a9b      	subs	r3, r3, r2
 800f436:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f023 0307 	bic.w	r3, r3, #7
 800f43e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	4a15      	ldr	r2, [pc, #84]	; (800f498 <prvHeapInit+0xb4>)
 800f444:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f446:	4b14      	ldr	r3, [pc, #80]	; (800f498 <prvHeapInit+0xb4>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	2200      	movs	r2, #0
 800f44c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f44e:	4b12      	ldr	r3, [pc, #72]	; (800f498 <prvHeapInit+0xb4>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	1ad2      	subs	r2, r2, r3
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f464:	4b0c      	ldr	r3, [pc, #48]	; (800f498 <prvHeapInit+0xb4>)
 800f466:	681a      	ldr	r2, [r3, #0]
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	4a0a      	ldr	r2, [pc, #40]	; (800f49c <prvHeapInit+0xb8>)
 800f472:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <prvHeapInit+0xbc>)
 800f47a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f47c:	4b09      	ldr	r3, [pc, #36]	; (800f4a4 <prvHeapInit+0xc0>)
 800f47e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f482:	601a      	str	r2, [r3, #0]
}
 800f484:	bf00      	nop
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	20001010 	.word	0x20001010
 800f494:	20002780 	.word	0x20002780
 800f498:	20002788 	.word	0x20002788
 800f49c:	20002790 	.word	0x20002790
 800f4a0:	2000278c 	.word	0x2000278c
 800f4a4:	2000279c 	.word	0x2000279c

0800f4a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b085      	sub	sp, #20
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f4b0:	4b28      	ldr	r3, [pc, #160]	; (800f554 <prvInsertBlockIntoFreeList+0xac>)
 800f4b2:	60fb      	str	r3, [r7, #12]
 800f4b4:	e002      	b.n	800f4bc <prvInsertBlockIntoFreeList+0x14>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d8f7      	bhi.n	800f4b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	68ba      	ldr	r2, [r7, #8]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d108      	bne.n	800f4ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	685a      	ldr	r2, [r3, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	441a      	add	r2, r3
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	68ba      	ldr	r2, [r7, #8]
 800f4f4:	441a      	add	r2, r3
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d118      	bne.n	800f530 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681a      	ldr	r2, [r3, #0]
 800f502:	4b15      	ldr	r3, [pc, #84]	; (800f558 <prvInsertBlockIntoFreeList+0xb0>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	429a      	cmp	r2, r3
 800f508:	d00d      	beq.n	800f526 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	441a      	add	r2, r3
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	e008      	b.n	800f538 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f526:	4b0c      	ldr	r3, [pc, #48]	; (800f558 <prvInsertBlockIntoFreeList+0xb0>)
 800f528:	681a      	ldr	r2, [r3, #0]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	601a      	str	r2, [r3, #0]
 800f52e:	e003      	b.n	800f538 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d002      	beq.n	800f546 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f546:	bf00      	nop
 800f548:	3714      	adds	r7, #20
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	20002780 	.word	0x20002780
 800f558:	20002788 	.word	0x20002788

0800f55c <__errno>:
 800f55c:	4b01      	ldr	r3, [pc, #4]	; (800f564 <__errno+0x8>)
 800f55e:	6818      	ldr	r0, [r3, #0]
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	20000010 	.word	0x20000010

0800f568 <__libc_init_array>:
 800f568:	b570      	push	{r4, r5, r6, lr}
 800f56a:	4d0d      	ldr	r5, [pc, #52]	; (800f5a0 <__libc_init_array+0x38>)
 800f56c:	4c0d      	ldr	r4, [pc, #52]	; (800f5a4 <__libc_init_array+0x3c>)
 800f56e:	1b64      	subs	r4, r4, r5
 800f570:	10a4      	asrs	r4, r4, #2
 800f572:	2600      	movs	r6, #0
 800f574:	42a6      	cmp	r6, r4
 800f576:	d109      	bne.n	800f58c <__libc_init_array+0x24>
 800f578:	4d0b      	ldr	r5, [pc, #44]	; (800f5a8 <__libc_init_array+0x40>)
 800f57a:	4c0c      	ldr	r4, [pc, #48]	; (800f5ac <__libc_init_array+0x44>)
 800f57c:	f004 f89c 	bl	80136b8 <_init>
 800f580:	1b64      	subs	r4, r4, r5
 800f582:	10a4      	asrs	r4, r4, #2
 800f584:	2600      	movs	r6, #0
 800f586:	42a6      	cmp	r6, r4
 800f588:	d105      	bne.n	800f596 <__libc_init_array+0x2e>
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f590:	4798      	blx	r3
 800f592:	3601      	adds	r6, #1
 800f594:	e7ee      	b.n	800f574 <__libc_init_array+0xc>
 800f596:	f855 3b04 	ldr.w	r3, [r5], #4
 800f59a:	4798      	blx	r3
 800f59c:	3601      	adds	r6, #1
 800f59e:	e7f2      	b.n	800f586 <__libc_init_array+0x1e>
 800f5a0:	08013d78 	.word	0x08013d78
 800f5a4:	08013d78 	.word	0x08013d78
 800f5a8:	08013d78 	.word	0x08013d78
 800f5ac:	08013d7c 	.word	0x08013d7c

0800f5b0 <memcpy>:
 800f5b0:	440a      	add	r2, r1
 800f5b2:	4291      	cmp	r1, r2
 800f5b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f5b8:	d100      	bne.n	800f5bc <memcpy+0xc>
 800f5ba:	4770      	bx	lr
 800f5bc:	b510      	push	{r4, lr}
 800f5be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5c6:	4291      	cmp	r1, r2
 800f5c8:	d1f9      	bne.n	800f5be <memcpy+0xe>
 800f5ca:	bd10      	pop	{r4, pc}

0800f5cc <memset>:
 800f5cc:	4402      	add	r2, r0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d100      	bne.n	800f5d6 <memset+0xa>
 800f5d4:	4770      	bx	lr
 800f5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f5da:	e7f9      	b.n	800f5d0 <memset+0x4>

0800f5dc <_scanf_float>:
 800f5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e0:	b087      	sub	sp, #28
 800f5e2:	4617      	mov	r7, r2
 800f5e4:	9303      	str	r3, [sp, #12]
 800f5e6:	688b      	ldr	r3, [r1, #8]
 800f5e8:	1e5a      	subs	r2, r3, #1
 800f5ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f5ee:	bf83      	ittte	hi
 800f5f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f5f4:	195b      	addhi	r3, r3, r5
 800f5f6:	9302      	strhi	r3, [sp, #8]
 800f5f8:	2300      	movls	r3, #0
 800f5fa:	bf86      	itte	hi
 800f5fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f600:	608b      	strhi	r3, [r1, #8]
 800f602:	9302      	strls	r3, [sp, #8]
 800f604:	680b      	ldr	r3, [r1, #0]
 800f606:	468b      	mov	fp, r1
 800f608:	2500      	movs	r5, #0
 800f60a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f60e:	f84b 3b1c 	str.w	r3, [fp], #28
 800f612:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f616:	4680      	mov	r8, r0
 800f618:	460c      	mov	r4, r1
 800f61a:	465e      	mov	r6, fp
 800f61c:	46aa      	mov	sl, r5
 800f61e:	46a9      	mov	r9, r5
 800f620:	9501      	str	r5, [sp, #4]
 800f622:	68a2      	ldr	r2, [r4, #8]
 800f624:	b152      	cbz	r2, 800f63c <_scanf_float+0x60>
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	781b      	ldrb	r3, [r3, #0]
 800f62a:	2b4e      	cmp	r3, #78	; 0x4e
 800f62c:	d864      	bhi.n	800f6f8 <_scanf_float+0x11c>
 800f62e:	2b40      	cmp	r3, #64	; 0x40
 800f630:	d83c      	bhi.n	800f6ac <_scanf_float+0xd0>
 800f632:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f636:	b2c8      	uxtb	r0, r1
 800f638:	280e      	cmp	r0, #14
 800f63a:	d93a      	bls.n	800f6b2 <_scanf_float+0xd6>
 800f63c:	f1b9 0f00 	cmp.w	r9, #0
 800f640:	d003      	beq.n	800f64a <_scanf_float+0x6e>
 800f642:	6823      	ldr	r3, [r4, #0]
 800f644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f648:	6023      	str	r3, [r4, #0]
 800f64a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f64e:	f1ba 0f01 	cmp.w	sl, #1
 800f652:	f200 8113 	bhi.w	800f87c <_scanf_float+0x2a0>
 800f656:	455e      	cmp	r6, fp
 800f658:	f200 8105 	bhi.w	800f866 <_scanf_float+0x28a>
 800f65c:	2501      	movs	r5, #1
 800f65e:	4628      	mov	r0, r5
 800f660:	b007      	add	sp, #28
 800f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f666:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f66a:	2a0d      	cmp	r2, #13
 800f66c:	d8e6      	bhi.n	800f63c <_scanf_float+0x60>
 800f66e:	a101      	add	r1, pc, #4	; (adr r1, 800f674 <_scanf_float+0x98>)
 800f670:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f674:	0800f7b3 	.word	0x0800f7b3
 800f678:	0800f63d 	.word	0x0800f63d
 800f67c:	0800f63d 	.word	0x0800f63d
 800f680:	0800f63d 	.word	0x0800f63d
 800f684:	0800f813 	.word	0x0800f813
 800f688:	0800f7eb 	.word	0x0800f7eb
 800f68c:	0800f63d 	.word	0x0800f63d
 800f690:	0800f63d 	.word	0x0800f63d
 800f694:	0800f7c1 	.word	0x0800f7c1
 800f698:	0800f63d 	.word	0x0800f63d
 800f69c:	0800f63d 	.word	0x0800f63d
 800f6a0:	0800f63d 	.word	0x0800f63d
 800f6a4:	0800f63d 	.word	0x0800f63d
 800f6a8:	0800f779 	.word	0x0800f779
 800f6ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f6b0:	e7db      	b.n	800f66a <_scanf_float+0x8e>
 800f6b2:	290e      	cmp	r1, #14
 800f6b4:	d8c2      	bhi.n	800f63c <_scanf_float+0x60>
 800f6b6:	a001      	add	r0, pc, #4	; (adr r0, 800f6bc <_scanf_float+0xe0>)
 800f6b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f6bc:	0800f76b 	.word	0x0800f76b
 800f6c0:	0800f63d 	.word	0x0800f63d
 800f6c4:	0800f76b 	.word	0x0800f76b
 800f6c8:	0800f7ff 	.word	0x0800f7ff
 800f6cc:	0800f63d 	.word	0x0800f63d
 800f6d0:	0800f719 	.word	0x0800f719
 800f6d4:	0800f755 	.word	0x0800f755
 800f6d8:	0800f755 	.word	0x0800f755
 800f6dc:	0800f755 	.word	0x0800f755
 800f6e0:	0800f755 	.word	0x0800f755
 800f6e4:	0800f755 	.word	0x0800f755
 800f6e8:	0800f755 	.word	0x0800f755
 800f6ec:	0800f755 	.word	0x0800f755
 800f6f0:	0800f755 	.word	0x0800f755
 800f6f4:	0800f755 	.word	0x0800f755
 800f6f8:	2b6e      	cmp	r3, #110	; 0x6e
 800f6fa:	d809      	bhi.n	800f710 <_scanf_float+0x134>
 800f6fc:	2b60      	cmp	r3, #96	; 0x60
 800f6fe:	d8b2      	bhi.n	800f666 <_scanf_float+0x8a>
 800f700:	2b54      	cmp	r3, #84	; 0x54
 800f702:	d077      	beq.n	800f7f4 <_scanf_float+0x218>
 800f704:	2b59      	cmp	r3, #89	; 0x59
 800f706:	d199      	bne.n	800f63c <_scanf_float+0x60>
 800f708:	2d07      	cmp	r5, #7
 800f70a:	d197      	bne.n	800f63c <_scanf_float+0x60>
 800f70c:	2508      	movs	r5, #8
 800f70e:	e029      	b.n	800f764 <_scanf_float+0x188>
 800f710:	2b74      	cmp	r3, #116	; 0x74
 800f712:	d06f      	beq.n	800f7f4 <_scanf_float+0x218>
 800f714:	2b79      	cmp	r3, #121	; 0x79
 800f716:	e7f6      	b.n	800f706 <_scanf_float+0x12a>
 800f718:	6821      	ldr	r1, [r4, #0]
 800f71a:	05c8      	lsls	r0, r1, #23
 800f71c:	d51a      	bpl.n	800f754 <_scanf_float+0x178>
 800f71e:	9b02      	ldr	r3, [sp, #8]
 800f720:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f724:	6021      	str	r1, [r4, #0]
 800f726:	f109 0901 	add.w	r9, r9, #1
 800f72a:	b11b      	cbz	r3, 800f734 <_scanf_float+0x158>
 800f72c:	3b01      	subs	r3, #1
 800f72e:	3201      	adds	r2, #1
 800f730:	9302      	str	r3, [sp, #8]
 800f732:	60a2      	str	r2, [r4, #8]
 800f734:	68a3      	ldr	r3, [r4, #8]
 800f736:	3b01      	subs	r3, #1
 800f738:	60a3      	str	r3, [r4, #8]
 800f73a:	6923      	ldr	r3, [r4, #16]
 800f73c:	3301      	adds	r3, #1
 800f73e:	6123      	str	r3, [r4, #16]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	3b01      	subs	r3, #1
 800f744:	2b00      	cmp	r3, #0
 800f746:	607b      	str	r3, [r7, #4]
 800f748:	f340 8084 	ble.w	800f854 <_scanf_float+0x278>
 800f74c:	683b      	ldr	r3, [r7, #0]
 800f74e:	3301      	adds	r3, #1
 800f750:	603b      	str	r3, [r7, #0]
 800f752:	e766      	b.n	800f622 <_scanf_float+0x46>
 800f754:	eb1a 0f05 	cmn.w	sl, r5
 800f758:	f47f af70 	bne.w	800f63c <_scanf_float+0x60>
 800f75c:	6822      	ldr	r2, [r4, #0]
 800f75e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f762:	6022      	str	r2, [r4, #0]
 800f764:	f806 3b01 	strb.w	r3, [r6], #1
 800f768:	e7e4      	b.n	800f734 <_scanf_float+0x158>
 800f76a:	6822      	ldr	r2, [r4, #0]
 800f76c:	0610      	lsls	r0, r2, #24
 800f76e:	f57f af65 	bpl.w	800f63c <_scanf_float+0x60>
 800f772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f776:	e7f4      	b.n	800f762 <_scanf_float+0x186>
 800f778:	f1ba 0f00 	cmp.w	sl, #0
 800f77c:	d10e      	bne.n	800f79c <_scanf_float+0x1c0>
 800f77e:	f1b9 0f00 	cmp.w	r9, #0
 800f782:	d10e      	bne.n	800f7a2 <_scanf_float+0x1c6>
 800f784:	6822      	ldr	r2, [r4, #0]
 800f786:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f78a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f78e:	d108      	bne.n	800f7a2 <_scanf_float+0x1c6>
 800f790:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f794:	6022      	str	r2, [r4, #0]
 800f796:	f04f 0a01 	mov.w	sl, #1
 800f79a:	e7e3      	b.n	800f764 <_scanf_float+0x188>
 800f79c:	f1ba 0f02 	cmp.w	sl, #2
 800f7a0:	d055      	beq.n	800f84e <_scanf_float+0x272>
 800f7a2:	2d01      	cmp	r5, #1
 800f7a4:	d002      	beq.n	800f7ac <_scanf_float+0x1d0>
 800f7a6:	2d04      	cmp	r5, #4
 800f7a8:	f47f af48 	bne.w	800f63c <_scanf_float+0x60>
 800f7ac:	3501      	adds	r5, #1
 800f7ae:	b2ed      	uxtb	r5, r5
 800f7b0:	e7d8      	b.n	800f764 <_scanf_float+0x188>
 800f7b2:	f1ba 0f01 	cmp.w	sl, #1
 800f7b6:	f47f af41 	bne.w	800f63c <_scanf_float+0x60>
 800f7ba:	f04f 0a02 	mov.w	sl, #2
 800f7be:	e7d1      	b.n	800f764 <_scanf_float+0x188>
 800f7c0:	b97d      	cbnz	r5, 800f7e2 <_scanf_float+0x206>
 800f7c2:	f1b9 0f00 	cmp.w	r9, #0
 800f7c6:	f47f af3c 	bne.w	800f642 <_scanf_float+0x66>
 800f7ca:	6822      	ldr	r2, [r4, #0]
 800f7cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f7d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f7d4:	f47f af39 	bne.w	800f64a <_scanf_float+0x6e>
 800f7d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f7dc:	6022      	str	r2, [r4, #0]
 800f7de:	2501      	movs	r5, #1
 800f7e0:	e7c0      	b.n	800f764 <_scanf_float+0x188>
 800f7e2:	2d03      	cmp	r5, #3
 800f7e4:	d0e2      	beq.n	800f7ac <_scanf_float+0x1d0>
 800f7e6:	2d05      	cmp	r5, #5
 800f7e8:	e7de      	b.n	800f7a8 <_scanf_float+0x1cc>
 800f7ea:	2d02      	cmp	r5, #2
 800f7ec:	f47f af26 	bne.w	800f63c <_scanf_float+0x60>
 800f7f0:	2503      	movs	r5, #3
 800f7f2:	e7b7      	b.n	800f764 <_scanf_float+0x188>
 800f7f4:	2d06      	cmp	r5, #6
 800f7f6:	f47f af21 	bne.w	800f63c <_scanf_float+0x60>
 800f7fa:	2507      	movs	r5, #7
 800f7fc:	e7b2      	b.n	800f764 <_scanf_float+0x188>
 800f7fe:	6822      	ldr	r2, [r4, #0]
 800f800:	0591      	lsls	r1, r2, #22
 800f802:	f57f af1b 	bpl.w	800f63c <_scanf_float+0x60>
 800f806:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f80a:	6022      	str	r2, [r4, #0]
 800f80c:	f8cd 9004 	str.w	r9, [sp, #4]
 800f810:	e7a8      	b.n	800f764 <_scanf_float+0x188>
 800f812:	6822      	ldr	r2, [r4, #0]
 800f814:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f818:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f81c:	d006      	beq.n	800f82c <_scanf_float+0x250>
 800f81e:	0550      	lsls	r0, r2, #21
 800f820:	f57f af0c 	bpl.w	800f63c <_scanf_float+0x60>
 800f824:	f1b9 0f00 	cmp.w	r9, #0
 800f828:	f43f af0f 	beq.w	800f64a <_scanf_float+0x6e>
 800f82c:	0591      	lsls	r1, r2, #22
 800f82e:	bf58      	it	pl
 800f830:	9901      	ldrpl	r1, [sp, #4]
 800f832:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f836:	bf58      	it	pl
 800f838:	eba9 0101 	subpl.w	r1, r9, r1
 800f83c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f840:	bf58      	it	pl
 800f842:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f846:	6022      	str	r2, [r4, #0]
 800f848:	f04f 0900 	mov.w	r9, #0
 800f84c:	e78a      	b.n	800f764 <_scanf_float+0x188>
 800f84e:	f04f 0a03 	mov.w	sl, #3
 800f852:	e787      	b.n	800f764 <_scanf_float+0x188>
 800f854:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f858:	4639      	mov	r1, r7
 800f85a:	4640      	mov	r0, r8
 800f85c:	4798      	blx	r3
 800f85e:	2800      	cmp	r0, #0
 800f860:	f43f aedf 	beq.w	800f622 <_scanf_float+0x46>
 800f864:	e6ea      	b.n	800f63c <_scanf_float+0x60>
 800f866:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f86a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f86e:	463a      	mov	r2, r7
 800f870:	4640      	mov	r0, r8
 800f872:	4798      	blx	r3
 800f874:	6923      	ldr	r3, [r4, #16]
 800f876:	3b01      	subs	r3, #1
 800f878:	6123      	str	r3, [r4, #16]
 800f87a:	e6ec      	b.n	800f656 <_scanf_float+0x7a>
 800f87c:	1e6b      	subs	r3, r5, #1
 800f87e:	2b06      	cmp	r3, #6
 800f880:	d825      	bhi.n	800f8ce <_scanf_float+0x2f2>
 800f882:	2d02      	cmp	r5, #2
 800f884:	d836      	bhi.n	800f8f4 <_scanf_float+0x318>
 800f886:	455e      	cmp	r6, fp
 800f888:	f67f aee8 	bls.w	800f65c <_scanf_float+0x80>
 800f88c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f890:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f894:	463a      	mov	r2, r7
 800f896:	4640      	mov	r0, r8
 800f898:	4798      	blx	r3
 800f89a:	6923      	ldr	r3, [r4, #16]
 800f89c:	3b01      	subs	r3, #1
 800f89e:	6123      	str	r3, [r4, #16]
 800f8a0:	e7f1      	b.n	800f886 <_scanf_float+0x2aa>
 800f8a2:	9802      	ldr	r0, [sp, #8]
 800f8a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f8ac:	9002      	str	r0, [sp, #8]
 800f8ae:	463a      	mov	r2, r7
 800f8b0:	4640      	mov	r0, r8
 800f8b2:	4798      	blx	r3
 800f8b4:	6923      	ldr	r3, [r4, #16]
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	6123      	str	r3, [r4, #16]
 800f8ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8be:	fa5f fa8a 	uxtb.w	sl, sl
 800f8c2:	f1ba 0f02 	cmp.w	sl, #2
 800f8c6:	d1ec      	bne.n	800f8a2 <_scanf_float+0x2c6>
 800f8c8:	3d03      	subs	r5, #3
 800f8ca:	b2ed      	uxtb	r5, r5
 800f8cc:	1b76      	subs	r6, r6, r5
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	05da      	lsls	r2, r3, #23
 800f8d2:	d52f      	bpl.n	800f934 <_scanf_float+0x358>
 800f8d4:	055b      	lsls	r3, r3, #21
 800f8d6:	d510      	bpl.n	800f8fa <_scanf_float+0x31e>
 800f8d8:	455e      	cmp	r6, fp
 800f8da:	f67f aebf 	bls.w	800f65c <_scanf_float+0x80>
 800f8de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f8e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f8e6:	463a      	mov	r2, r7
 800f8e8:	4640      	mov	r0, r8
 800f8ea:	4798      	blx	r3
 800f8ec:	6923      	ldr	r3, [r4, #16]
 800f8ee:	3b01      	subs	r3, #1
 800f8f0:	6123      	str	r3, [r4, #16]
 800f8f2:	e7f1      	b.n	800f8d8 <_scanf_float+0x2fc>
 800f8f4:	46aa      	mov	sl, r5
 800f8f6:	9602      	str	r6, [sp, #8]
 800f8f8:	e7df      	b.n	800f8ba <_scanf_float+0x2de>
 800f8fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f8fe:	6923      	ldr	r3, [r4, #16]
 800f900:	2965      	cmp	r1, #101	; 0x65
 800f902:	f103 33ff 	add.w	r3, r3, #4294967295
 800f906:	f106 35ff 	add.w	r5, r6, #4294967295
 800f90a:	6123      	str	r3, [r4, #16]
 800f90c:	d00c      	beq.n	800f928 <_scanf_float+0x34c>
 800f90e:	2945      	cmp	r1, #69	; 0x45
 800f910:	d00a      	beq.n	800f928 <_scanf_float+0x34c>
 800f912:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f916:	463a      	mov	r2, r7
 800f918:	4640      	mov	r0, r8
 800f91a:	4798      	blx	r3
 800f91c:	6923      	ldr	r3, [r4, #16]
 800f91e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f922:	3b01      	subs	r3, #1
 800f924:	1eb5      	subs	r5, r6, #2
 800f926:	6123      	str	r3, [r4, #16]
 800f928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f92c:	463a      	mov	r2, r7
 800f92e:	4640      	mov	r0, r8
 800f930:	4798      	blx	r3
 800f932:	462e      	mov	r6, r5
 800f934:	6825      	ldr	r5, [r4, #0]
 800f936:	f015 0510 	ands.w	r5, r5, #16
 800f93a:	d159      	bne.n	800f9f0 <_scanf_float+0x414>
 800f93c:	7035      	strb	r5, [r6, #0]
 800f93e:	6823      	ldr	r3, [r4, #0]
 800f940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f948:	d11b      	bne.n	800f982 <_scanf_float+0x3a6>
 800f94a:	9b01      	ldr	r3, [sp, #4]
 800f94c:	454b      	cmp	r3, r9
 800f94e:	eba3 0209 	sub.w	r2, r3, r9
 800f952:	d123      	bne.n	800f99c <_scanf_float+0x3c0>
 800f954:	2200      	movs	r2, #0
 800f956:	4659      	mov	r1, fp
 800f958:	4640      	mov	r0, r8
 800f95a:	f000 ffc7 	bl	80108ec <_strtod_r>
 800f95e:	6822      	ldr	r2, [r4, #0]
 800f960:	9b03      	ldr	r3, [sp, #12]
 800f962:	f012 0f02 	tst.w	r2, #2
 800f966:	ec57 6b10 	vmov	r6, r7, d0
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	d021      	beq.n	800f9b2 <_scanf_float+0x3d6>
 800f96e:	9903      	ldr	r1, [sp, #12]
 800f970:	1d1a      	adds	r2, r3, #4
 800f972:	600a      	str	r2, [r1, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	e9c3 6700 	strd	r6, r7, [r3]
 800f97a:	68e3      	ldr	r3, [r4, #12]
 800f97c:	3301      	adds	r3, #1
 800f97e:	60e3      	str	r3, [r4, #12]
 800f980:	e66d      	b.n	800f65e <_scanf_float+0x82>
 800f982:	9b04      	ldr	r3, [sp, #16]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d0e5      	beq.n	800f954 <_scanf_float+0x378>
 800f988:	9905      	ldr	r1, [sp, #20]
 800f98a:	230a      	movs	r3, #10
 800f98c:	462a      	mov	r2, r5
 800f98e:	3101      	adds	r1, #1
 800f990:	4640      	mov	r0, r8
 800f992:	f001 f833 	bl	80109fc <_strtol_r>
 800f996:	9b04      	ldr	r3, [sp, #16]
 800f998:	9e05      	ldr	r6, [sp, #20]
 800f99a:	1ac2      	subs	r2, r0, r3
 800f99c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f9a0:	429e      	cmp	r6, r3
 800f9a2:	bf28      	it	cs
 800f9a4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f9a8:	4912      	ldr	r1, [pc, #72]	; (800f9f4 <_scanf_float+0x418>)
 800f9aa:	4630      	mov	r0, r6
 800f9ac:	f000 f8d6 	bl	800fb5c <siprintf>
 800f9b0:	e7d0      	b.n	800f954 <_scanf_float+0x378>
 800f9b2:	9903      	ldr	r1, [sp, #12]
 800f9b4:	f012 0f04 	tst.w	r2, #4
 800f9b8:	f103 0204 	add.w	r2, r3, #4
 800f9bc:	600a      	str	r2, [r1, #0]
 800f9be:	d1d9      	bne.n	800f974 <_scanf_float+0x398>
 800f9c0:	f8d3 8000 	ldr.w	r8, [r3]
 800f9c4:	ee10 2a10 	vmov	r2, s0
 800f9c8:	ee10 0a10 	vmov	r0, s0
 800f9cc:	463b      	mov	r3, r7
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	f7f1 f8bc 	bl	8000b4c <__aeabi_dcmpun>
 800f9d4:	b128      	cbz	r0, 800f9e2 <_scanf_float+0x406>
 800f9d6:	4808      	ldr	r0, [pc, #32]	; (800f9f8 <_scanf_float+0x41c>)
 800f9d8:	f000 f886 	bl	800fae8 <nanf>
 800f9dc:	ed88 0a00 	vstr	s0, [r8]
 800f9e0:	e7cb      	b.n	800f97a <_scanf_float+0x39e>
 800f9e2:	4630      	mov	r0, r6
 800f9e4:	4639      	mov	r1, r7
 800f9e6:	f7f1 f90f 	bl	8000c08 <__aeabi_d2f>
 800f9ea:	f8c8 0000 	str.w	r0, [r8]
 800f9ee:	e7c4      	b.n	800f97a <_scanf_float+0x39e>
 800f9f0:	2500      	movs	r5, #0
 800f9f2:	e634      	b.n	800f65e <_scanf_float+0x82>
 800f9f4:	08013918 	.word	0x08013918
 800f9f8:	08013d6d 	.word	0x08013d6d

0800f9fc <_puts_r>:
 800f9fc:	b570      	push	{r4, r5, r6, lr}
 800f9fe:	460e      	mov	r6, r1
 800fa00:	4605      	mov	r5, r0
 800fa02:	b118      	cbz	r0, 800fa0c <_puts_r+0x10>
 800fa04:	6983      	ldr	r3, [r0, #24]
 800fa06:	b90b      	cbnz	r3, 800fa0c <_puts_r+0x10>
 800fa08:	f001 f9f6 	bl	8010df8 <__sinit>
 800fa0c:	69ab      	ldr	r3, [r5, #24]
 800fa0e:	68ac      	ldr	r4, [r5, #8]
 800fa10:	b913      	cbnz	r3, 800fa18 <_puts_r+0x1c>
 800fa12:	4628      	mov	r0, r5
 800fa14:	f001 f9f0 	bl	8010df8 <__sinit>
 800fa18:	4b2c      	ldr	r3, [pc, #176]	; (800facc <_puts_r+0xd0>)
 800fa1a:	429c      	cmp	r4, r3
 800fa1c:	d120      	bne.n	800fa60 <_puts_r+0x64>
 800fa1e:	686c      	ldr	r4, [r5, #4]
 800fa20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa22:	07db      	lsls	r3, r3, #31
 800fa24:	d405      	bmi.n	800fa32 <_puts_r+0x36>
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	0598      	lsls	r0, r3, #22
 800fa2a:	d402      	bmi.n	800fa32 <_puts_r+0x36>
 800fa2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa2e:	f001 fdf0 	bl	8011612 <__retarget_lock_acquire_recursive>
 800fa32:	89a3      	ldrh	r3, [r4, #12]
 800fa34:	0719      	lsls	r1, r3, #28
 800fa36:	d51d      	bpl.n	800fa74 <_puts_r+0x78>
 800fa38:	6923      	ldr	r3, [r4, #16]
 800fa3a:	b1db      	cbz	r3, 800fa74 <_puts_r+0x78>
 800fa3c:	3e01      	subs	r6, #1
 800fa3e:	68a3      	ldr	r3, [r4, #8]
 800fa40:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fa44:	3b01      	subs	r3, #1
 800fa46:	60a3      	str	r3, [r4, #8]
 800fa48:	bb39      	cbnz	r1, 800fa9a <_puts_r+0x9e>
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	da38      	bge.n	800fac0 <_puts_r+0xc4>
 800fa4e:	4622      	mov	r2, r4
 800fa50:	210a      	movs	r1, #10
 800fa52:	4628      	mov	r0, r5
 800fa54:	f000 ffd4 	bl	8010a00 <__swbuf_r>
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d011      	beq.n	800fa80 <_puts_r+0x84>
 800fa5c:	250a      	movs	r5, #10
 800fa5e:	e011      	b.n	800fa84 <_puts_r+0x88>
 800fa60:	4b1b      	ldr	r3, [pc, #108]	; (800fad0 <_puts_r+0xd4>)
 800fa62:	429c      	cmp	r4, r3
 800fa64:	d101      	bne.n	800fa6a <_puts_r+0x6e>
 800fa66:	68ac      	ldr	r4, [r5, #8]
 800fa68:	e7da      	b.n	800fa20 <_puts_r+0x24>
 800fa6a:	4b1a      	ldr	r3, [pc, #104]	; (800fad4 <_puts_r+0xd8>)
 800fa6c:	429c      	cmp	r4, r3
 800fa6e:	bf08      	it	eq
 800fa70:	68ec      	ldreq	r4, [r5, #12]
 800fa72:	e7d5      	b.n	800fa20 <_puts_r+0x24>
 800fa74:	4621      	mov	r1, r4
 800fa76:	4628      	mov	r0, r5
 800fa78:	f001 f826 	bl	8010ac8 <__swsetup_r>
 800fa7c:	2800      	cmp	r0, #0
 800fa7e:	d0dd      	beq.n	800fa3c <_puts_r+0x40>
 800fa80:	f04f 35ff 	mov.w	r5, #4294967295
 800fa84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa86:	07da      	lsls	r2, r3, #31
 800fa88:	d405      	bmi.n	800fa96 <_puts_r+0x9a>
 800fa8a:	89a3      	ldrh	r3, [r4, #12]
 800fa8c:	059b      	lsls	r3, r3, #22
 800fa8e:	d402      	bmi.n	800fa96 <_puts_r+0x9a>
 800fa90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa92:	f001 fdbf 	bl	8011614 <__retarget_lock_release_recursive>
 800fa96:	4628      	mov	r0, r5
 800fa98:	bd70      	pop	{r4, r5, r6, pc}
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	da04      	bge.n	800faa8 <_puts_r+0xac>
 800fa9e:	69a2      	ldr	r2, [r4, #24]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	dc06      	bgt.n	800fab2 <_puts_r+0xb6>
 800faa4:	290a      	cmp	r1, #10
 800faa6:	d004      	beq.n	800fab2 <_puts_r+0xb6>
 800faa8:	6823      	ldr	r3, [r4, #0]
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	6022      	str	r2, [r4, #0]
 800faae:	7019      	strb	r1, [r3, #0]
 800fab0:	e7c5      	b.n	800fa3e <_puts_r+0x42>
 800fab2:	4622      	mov	r2, r4
 800fab4:	4628      	mov	r0, r5
 800fab6:	f000 ffa3 	bl	8010a00 <__swbuf_r>
 800faba:	3001      	adds	r0, #1
 800fabc:	d1bf      	bne.n	800fa3e <_puts_r+0x42>
 800fabe:	e7df      	b.n	800fa80 <_puts_r+0x84>
 800fac0:	6823      	ldr	r3, [r4, #0]
 800fac2:	250a      	movs	r5, #10
 800fac4:	1c5a      	adds	r2, r3, #1
 800fac6:	6022      	str	r2, [r4, #0]
 800fac8:	701d      	strb	r5, [r3, #0]
 800faca:	e7db      	b.n	800fa84 <_puts_r+0x88>
 800facc:	08013aa4 	.word	0x08013aa4
 800fad0:	08013ac4 	.word	0x08013ac4
 800fad4:	08013a84 	.word	0x08013a84

0800fad8 <puts>:
 800fad8:	4b02      	ldr	r3, [pc, #8]	; (800fae4 <puts+0xc>)
 800fada:	4601      	mov	r1, r0
 800fadc:	6818      	ldr	r0, [r3, #0]
 800fade:	f7ff bf8d 	b.w	800f9fc <_puts_r>
 800fae2:	bf00      	nop
 800fae4:	20000010 	.word	0x20000010

0800fae8 <nanf>:
 800fae8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800faf0 <nanf+0x8>
 800faec:	4770      	bx	lr
 800faee:	bf00      	nop
 800faf0:	7fc00000 	.word	0x7fc00000

0800faf4 <sniprintf>:
 800faf4:	b40c      	push	{r2, r3}
 800faf6:	b530      	push	{r4, r5, lr}
 800faf8:	4b17      	ldr	r3, [pc, #92]	; (800fb58 <sniprintf+0x64>)
 800fafa:	1e0c      	subs	r4, r1, #0
 800fafc:	681d      	ldr	r5, [r3, #0]
 800fafe:	b09d      	sub	sp, #116	; 0x74
 800fb00:	da08      	bge.n	800fb14 <sniprintf+0x20>
 800fb02:	238b      	movs	r3, #139	; 0x8b
 800fb04:	602b      	str	r3, [r5, #0]
 800fb06:	f04f 30ff 	mov.w	r0, #4294967295
 800fb0a:	b01d      	add	sp, #116	; 0x74
 800fb0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb10:	b002      	add	sp, #8
 800fb12:	4770      	bx	lr
 800fb14:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fb18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fb1c:	bf14      	ite	ne
 800fb1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fb22:	4623      	moveq	r3, r4
 800fb24:	9304      	str	r3, [sp, #16]
 800fb26:	9307      	str	r3, [sp, #28]
 800fb28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb2c:	9002      	str	r0, [sp, #8]
 800fb2e:	9006      	str	r0, [sp, #24]
 800fb30:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fb34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fb36:	ab21      	add	r3, sp, #132	; 0x84
 800fb38:	a902      	add	r1, sp, #8
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	9301      	str	r3, [sp, #4]
 800fb3e:	f002 fc09 	bl	8012354 <_svfiprintf_r>
 800fb42:	1c43      	adds	r3, r0, #1
 800fb44:	bfbc      	itt	lt
 800fb46:	238b      	movlt	r3, #139	; 0x8b
 800fb48:	602b      	strlt	r3, [r5, #0]
 800fb4a:	2c00      	cmp	r4, #0
 800fb4c:	d0dd      	beq.n	800fb0a <sniprintf+0x16>
 800fb4e:	9b02      	ldr	r3, [sp, #8]
 800fb50:	2200      	movs	r2, #0
 800fb52:	701a      	strb	r2, [r3, #0]
 800fb54:	e7d9      	b.n	800fb0a <sniprintf+0x16>
 800fb56:	bf00      	nop
 800fb58:	20000010 	.word	0x20000010

0800fb5c <siprintf>:
 800fb5c:	b40e      	push	{r1, r2, r3}
 800fb5e:	b500      	push	{lr}
 800fb60:	b09c      	sub	sp, #112	; 0x70
 800fb62:	ab1d      	add	r3, sp, #116	; 0x74
 800fb64:	9002      	str	r0, [sp, #8]
 800fb66:	9006      	str	r0, [sp, #24]
 800fb68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fb6c:	4809      	ldr	r0, [pc, #36]	; (800fb94 <siprintf+0x38>)
 800fb6e:	9107      	str	r1, [sp, #28]
 800fb70:	9104      	str	r1, [sp, #16]
 800fb72:	4909      	ldr	r1, [pc, #36]	; (800fb98 <siprintf+0x3c>)
 800fb74:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb78:	9105      	str	r1, [sp, #20]
 800fb7a:	6800      	ldr	r0, [r0, #0]
 800fb7c:	9301      	str	r3, [sp, #4]
 800fb7e:	a902      	add	r1, sp, #8
 800fb80:	f002 fbe8 	bl	8012354 <_svfiprintf_r>
 800fb84:	9b02      	ldr	r3, [sp, #8]
 800fb86:	2200      	movs	r2, #0
 800fb88:	701a      	strb	r2, [r3, #0]
 800fb8a:	b01c      	add	sp, #112	; 0x70
 800fb8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb90:	b003      	add	sp, #12
 800fb92:	4770      	bx	lr
 800fb94:	20000010 	.word	0x20000010
 800fb98:	ffff0208 	.word	0xffff0208

0800fb9c <siscanf>:
 800fb9c:	b40e      	push	{r1, r2, r3}
 800fb9e:	b510      	push	{r4, lr}
 800fba0:	b09f      	sub	sp, #124	; 0x7c
 800fba2:	ac21      	add	r4, sp, #132	; 0x84
 800fba4:	f44f 7101 	mov.w	r1, #516	; 0x204
 800fba8:	f854 2b04 	ldr.w	r2, [r4], #4
 800fbac:	9201      	str	r2, [sp, #4]
 800fbae:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fbb2:	9004      	str	r0, [sp, #16]
 800fbb4:	9008      	str	r0, [sp, #32]
 800fbb6:	f7f0 fb15 	bl	80001e4 <strlen>
 800fbba:	4b0c      	ldr	r3, [pc, #48]	; (800fbec <siscanf+0x50>)
 800fbbc:	9005      	str	r0, [sp, #20]
 800fbbe:	9009      	str	r0, [sp, #36]	; 0x24
 800fbc0:	930d      	str	r3, [sp, #52]	; 0x34
 800fbc2:	480b      	ldr	r0, [pc, #44]	; (800fbf0 <siscanf+0x54>)
 800fbc4:	9a01      	ldr	r2, [sp, #4]
 800fbc6:	6800      	ldr	r0, [r0, #0]
 800fbc8:	9403      	str	r4, [sp, #12]
 800fbca:	2300      	movs	r3, #0
 800fbcc:	9311      	str	r3, [sp, #68]	; 0x44
 800fbce:	9316      	str	r3, [sp, #88]	; 0x58
 800fbd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbd4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800fbd8:	a904      	add	r1, sp, #16
 800fbda:	4623      	mov	r3, r4
 800fbdc:	f002 fd14 	bl	8012608 <__ssvfiscanf_r>
 800fbe0:	b01f      	add	sp, #124	; 0x7c
 800fbe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbe6:	b003      	add	sp, #12
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	0800fc17 	.word	0x0800fc17
 800fbf0:	20000010 	.word	0x20000010

0800fbf4 <__sread>:
 800fbf4:	b510      	push	{r4, lr}
 800fbf6:	460c      	mov	r4, r1
 800fbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbfc:	f003 f962 	bl	8012ec4 <_read_r>
 800fc00:	2800      	cmp	r0, #0
 800fc02:	bfab      	itete	ge
 800fc04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc06:	89a3      	ldrhlt	r3, [r4, #12]
 800fc08:	181b      	addge	r3, r3, r0
 800fc0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc0e:	bfac      	ite	ge
 800fc10:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc12:	81a3      	strhlt	r3, [r4, #12]
 800fc14:	bd10      	pop	{r4, pc}

0800fc16 <__seofread>:
 800fc16:	2000      	movs	r0, #0
 800fc18:	4770      	bx	lr

0800fc1a <__swrite>:
 800fc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1e:	461f      	mov	r7, r3
 800fc20:	898b      	ldrh	r3, [r1, #12]
 800fc22:	05db      	lsls	r3, r3, #23
 800fc24:	4605      	mov	r5, r0
 800fc26:	460c      	mov	r4, r1
 800fc28:	4616      	mov	r6, r2
 800fc2a:	d505      	bpl.n	800fc38 <__swrite+0x1e>
 800fc2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc30:	2302      	movs	r3, #2
 800fc32:	2200      	movs	r2, #0
 800fc34:	f001 fcf0 	bl	8011618 <_lseek_r>
 800fc38:	89a3      	ldrh	r3, [r4, #12]
 800fc3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc42:	81a3      	strh	r3, [r4, #12]
 800fc44:	4632      	mov	r2, r6
 800fc46:	463b      	mov	r3, r7
 800fc48:	4628      	mov	r0, r5
 800fc4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4e:	f000 bf29 	b.w	8010aa4 <_write_r>

0800fc52 <__sseek>:
 800fc52:	b510      	push	{r4, lr}
 800fc54:	460c      	mov	r4, r1
 800fc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc5a:	f001 fcdd 	bl	8011618 <_lseek_r>
 800fc5e:	1c43      	adds	r3, r0, #1
 800fc60:	89a3      	ldrh	r3, [r4, #12]
 800fc62:	bf15      	itete	ne
 800fc64:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc6e:	81a3      	strheq	r3, [r4, #12]
 800fc70:	bf18      	it	ne
 800fc72:	81a3      	strhne	r3, [r4, #12]
 800fc74:	bd10      	pop	{r4, pc}

0800fc76 <__sclose>:
 800fc76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc7a:	f000 bf93 	b.w	8010ba4 <_close_r>

0800fc7e <strncmp>:
 800fc7e:	b510      	push	{r4, lr}
 800fc80:	b17a      	cbz	r2, 800fca2 <strncmp+0x24>
 800fc82:	4603      	mov	r3, r0
 800fc84:	3901      	subs	r1, #1
 800fc86:	1884      	adds	r4, r0, r2
 800fc88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fc8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fc90:	4290      	cmp	r0, r2
 800fc92:	d101      	bne.n	800fc98 <strncmp+0x1a>
 800fc94:	42a3      	cmp	r3, r4
 800fc96:	d101      	bne.n	800fc9c <strncmp+0x1e>
 800fc98:	1a80      	subs	r0, r0, r2
 800fc9a:	bd10      	pop	{r4, pc}
 800fc9c:	2800      	cmp	r0, #0
 800fc9e:	d1f3      	bne.n	800fc88 <strncmp+0xa>
 800fca0:	e7fa      	b.n	800fc98 <strncmp+0x1a>
 800fca2:	4610      	mov	r0, r2
 800fca4:	e7f9      	b.n	800fc9a <strncmp+0x1c>

0800fca6 <sulp>:
 800fca6:	b570      	push	{r4, r5, r6, lr}
 800fca8:	4604      	mov	r4, r0
 800fcaa:	460d      	mov	r5, r1
 800fcac:	ec45 4b10 	vmov	d0, r4, r5
 800fcb0:	4616      	mov	r6, r2
 800fcb2:	f002 f8ad 	bl	8011e10 <__ulp>
 800fcb6:	ec51 0b10 	vmov	r0, r1, d0
 800fcba:	b17e      	cbz	r6, 800fcdc <sulp+0x36>
 800fcbc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800fcc0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	dd09      	ble.n	800fcdc <sulp+0x36>
 800fcc8:	051b      	lsls	r3, r3, #20
 800fcca:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800fcce:	2400      	movs	r4, #0
 800fcd0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800fcd4:	4622      	mov	r2, r4
 800fcd6:	462b      	mov	r3, r5
 800fcd8:	f7f0 fc9e 	bl	8000618 <__aeabi_dmul>
 800fcdc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fce0 <_strtod_l>:
 800fce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce4:	ed2d 8b02 	vpush	{d8}
 800fce8:	b09d      	sub	sp, #116	; 0x74
 800fcea:	461f      	mov	r7, r3
 800fcec:	2300      	movs	r3, #0
 800fcee:	9318      	str	r3, [sp, #96]	; 0x60
 800fcf0:	4ba2      	ldr	r3, [pc, #648]	; (800ff7c <_strtod_l+0x29c>)
 800fcf2:	9213      	str	r2, [sp, #76]	; 0x4c
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	9305      	str	r3, [sp, #20]
 800fcf8:	4604      	mov	r4, r0
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	4688      	mov	r8, r1
 800fcfe:	f7f0 fa71 	bl	80001e4 <strlen>
 800fd02:	f04f 0a00 	mov.w	sl, #0
 800fd06:	4605      	mov	r5, r0
 800fd08:	f04f 0b00 	mov.w	fp, #0
 800fd0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fd10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fd12:	781a      	ldrb	r2, [r3, #0]
 800fd14:	2a2b      	cmp	r2, #43	; 0x2b
 800fd16:	d04e      	beq.n	800fdb6 <_strtod_l+0xd6>
 800fd18:	d83b      	bhi.n	800fd92 <_strtod_l+0xb2>
 800fd1a:	2a0d      	cmp	r2, #13
 800fd1c:	d834      	bhi.n	800fd88 <_strtod_l+0xa8>
 800fd1e:	2a08      	cmp	r2, #8
 800fd20:	d834      	bhi.n	800fd8c <_strtod_l+0xac>
 800fd22:	2a00      	cmp	r2, #0
 800fd24:	d03e      	beq.n	800fda4 <_strtod_l+0xc4>
 800fd26:	2300      	movs	r3, #0
 800fd28:	930a      	str	r3, [sp, #40]	; 0x28
 800fd2a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800fd2c:	7833      	ldrb	r3, [r6, #0]
 800fd2e:	2b30      	cmp	r3, #48	; 0x30
 800fd30:	f040 80b0 	bne.w	800fe94 <_strtod_l+0x1b4>
 800fd34:	7873      	ldrb	r3, [r6, #1]
 800fd36:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fd3a:	2b58      	cmp	r3, #88	; 0x58
 800fd3c:	d168      	bne.n	800fe10 <_strtod_l+0x130>
 800fd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd40:	9301      	str	r3, [sp, #4]
 800fd42:	ab18      	add	r3, sp, #96	; 0x60
 800fd44:	9702      	str	r7, [sp, #8]
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	4a8d      	ldr	r2, [pc, #564]	; (800ff80 <_strtod_l+0x2a0>)
 800fd4a:	ab19      	add	r3, sp, #100	; 0x64
 800fd4c:	a917      	add	r1, sp, #92	; 0x5c
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f001 f956 	bl	8011000 <__gethex>
 800fd54:	f010 0707 	ands.w	r7, r0, #7
 800fd58:	4605      	mov	r5, r0
 800fd5a:	d005      	beq.n	800fd68 <_strtod_l+0x88>
 800fd5c:	2f06      	cmp	r7, #6
 800fd5e:	d12c      	bne.n	800fdba <_strtod_l+0xda>
 800fd60:	3601      	adds	r6, #1
 800fd62:	2300      	movs	r3, #0
 800fd64:	9617      	str	r6, [sp, #92]	; 0x5c
 800fd66:	930a      	str	r3, [sp, #40]	; 0x28
 800fd68:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	f040 8590 	bne.w	8010890 <_strtod_l+0xbb0>
 800fd70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd72:	b1eb      	cbz	r3, 800fdb0 <_strtod_l+0xd0>
 800fd74:	4652      	mov	r2, sl
 800fd76:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fd7a:	ec43 2b10 	vmov	d0, r2, r3
 800fd7e:	b01d      	add	sp, #116	; 0x74
 800fd80:	ecbd 8b02 	vpop	{d8}
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd88:	2a20      	cmp	r2, #32
 800fd8a:	d1cc      	bne.n	800fd26 <_strtod_l+0x46>
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	9317      	str	r3, [sp, #92]	; 0x5c
 800fd90:	e7be      	b.n	800fd10 <_strtod_l+0x30>
 800fd92:	2a2d      	cmp	r2, #45	; 0x2d
 800fd94:	d1c7      	bne.n	800fd26 <_strtod_l+0x46>
 800fd96:	2201      	movs	r2, #1
 800fd98:	920a      	str	r2, [sp, #40]	; 0x28
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800fd9e:	785b      	ldrb	r3, [r3, #1]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1c2      	bne.n	800fd2a <_strtod_l+0x4a>
 800fda4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fda6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f040 856e 	bne.w	801088c <_strtod_l+0xbac>
 800fdb0:	4652      	mov	r2, sl
 800fdb2:	465b      	mov	r3, fp
 800fdb4:	e7e1      	b.n	800fd7a <_strtod_l+0x9a>
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	e7ee      	b.n	800fd98 <_strtod_l+0xb8>
 800fdba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fdbc:	b13a      	cbz	r2, 800fdce <_strtod_l+0xee>
 800fdbe:	2135      	movs	r1, #53	; 0x35
 800fdc0:	a81a      	add	r0, sp, #104	; 0x68
 800fdc2:	f002 f930 	bl	8012026 <__copybits>
 800fdc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fdc8:	4620      	mov	r0, r4
 800fdca:	f001 fcef 	bl	80117ac <_Bfree>
 800fdce:	3f01      	subs	r7, #1
 800fdd0:	2f04      	cmp	r7, #4
 800fdd2:	d806      	bhi.n	800fde2 <_strtod_l+0x102>
 800fdd4:	e8df f007 	tbb	[pc, r7]
 800fdd8:	1714030a 	.word	0x1714030a
 800fddc:	0a          	.byte	0x0a
 800fddd:	00          	.byte	0x00
 800fdde:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800fde2:	0728      	lsls	r0, r5, #28
 800fde4:	d5c0      	bpl.n	800fd68 <_strtod_l+0x88>
 800fde6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fdea:	e7bd      	b.n	800fd68 <_strtod_l+0x88>
 800fdec:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800fdf0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800fdf2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fdf6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fdfa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fdfe:	e7f0      	b.n	800fde2 <_strtod_l+0x102>
 800fe00:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ff84 <_strtod_l+0x2a4>
 800fe04:	e7ed      	b.n	800fde2 <_strtod_l+0x102>
 800fe06:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fe0a:	f04f 3aff 	mov.w	sl, #4294967295
 800fe0e:	e7e8      	b.n	800fde2 <_strtod_l+0x102>
 800fe10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe12:	1c5a      	adds	r2, r3, #1
 800fe14:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe16:	785b      	ldrb	r3, [r3, #1]
 800fe18:	2b30      	cmp	r3, #48	; 0x30
 800fe1a:	d0f9      	beq.n	800fe10 <_strtod_l+0x130>
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d0a3      	beq.n	800fd68 <_strtod_l+0x88>
 800fe20:	2301      	movs	r3, #1
 800fe22:	f04f 0900 	mov.w	r9, #0
 800fe26:	9304      	str	r3, [sp, #16]
 800fe28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fe2a:	9308      	str	r3, [sp, #32]
 800fe2c:	f8cd 901c 	str.w	r9, [sp, #28]
 800fe30:	464f      	mov	r7, r9
 800fe32:	220a      	movs	r2, #10
 800fe34:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fe36:	7806      	ldrb	r6, [r0, #0]
 800fe38:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fe3c:	b2d9      	uxtb	r1, r3
 800fe3e:	2909      	cmp	r1, #9
 800fe40:	d92a      	bls.n	800fe98 <_strtod_l+0x1b8>
 800fe42:	9905      	ldr	r1, [sp, #20]
 800fe44:	462a      	mov	r2, r5
 800fe46:	f7ff ff1a 	bl	800fc7e <strncmp>
 800fe4a:	b398      	cbz	r0, 800feb4 <_strtod_l+0x1d4>
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	4632      	mov	r2, r6
 800fe50:	463d      	mov	r5, r7
 800fe52:	9005      	str	r0, [sp, #20]
 800fe54:	4603      	mov	r3, r0
 800fe56:	2a65      	cmp	r2, #101	; 0x65
 800fe58:	d001      	beq.n	800fe5e <_strtod_l+0x17e>
 800fe5a:	2a45      	cmp	r2, #69	; 0x45
 800fe5c:	d118      	bne.n	800fe90 <_strtod_l+0x1b0>
 800fe5e:	b91d      	cbnz	r5, 800fe68 <_strtod_l+0x188>
 800fe60:	9a04      	ldr	r2, [sp, #16]
 800fe62:	4302      	orrs	r2, r0
 800fe64:	d09e      	beq.n	800fda4 <_strtod_l+0xc4>
 800fe66:	2500      	movs	r5, #0
 800fe68:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800fe6c:	f108 0201 	add.w	r2, r8, #1
 800fe70:	9217      	str	r2, [sp, #92]	; 0x5c
 800fe72:	f898 2001 	ldrb.w	r2, [r8, #1]
 800fe76:	2a2b      	cmp	r2, #43	; 0x2b
 800fe78:	d075      	beq.n	800ff66 <_strtod_l+0x286>
 800fe7a:	2a2d      	cmp	r2, #45	; 0x2d
 800fe7c:	d07b      	beq.n	800ff76 <_strtod_l+0x296>
 800fe7e:	f04f 0c00 	mov.w	ip, #0
 800fe82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800fe86:	2909      	cmp	r1, #9
 800fe88:	f240 8082 	bls.w	800ff90 <_strtod_l+0x2b0>
 800fe8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800fe90:	2600      	movs	r6, #0
 800fe92:	e09d      	b.n	800ffd0 <_strtod_l+0x2f0>
 800fe94:	2300      	movs	r3, #0
 800fe96:	e7c4      	b.n	800fe22 <_strtod_l+0x142>
 800fe98:	2f08      	cmp	r7, #8
 800fe9a:	bfd8      	it	le
 800fe9c:	9907      	ldrle	r1, [sp, #28]
 800fe9e:	f100 0001 	add.w	r0, r0, #1
 800fea2:	bfda      	itte	le
 800fea4:	fb02 3301 	mlale	r3, r2, r1, r3
 800fea8:	9307      	strle	r3, [sp, #28]
 800feaa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800feae:	3701      	adds	r7, #1
 800feb0:	9017      	str	r0, [sp, #92]	; 0x5c
 800feb2:	e7bf      	b.n	800fe34 <_strtod_l+0x154>
 800feb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800feb6:	195a      	adds	r2, r3, r5
 800feb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800feba:	5d5a      	ldrb	r2, [r3, r5]
 800febc:	2f00      	cmp	r7, #0
 800febe:	d037      	beq.n	800ff30 <_strtod_l+0x250>
 800fec0:	9005      	str	r0, [sp, #20]
 800fec2:	463d      	mov	r5, r7
 800fec4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800fec8:	2b09      	cmp	r3, #9
 800feca:	d912      	bls.n	800fef2 <_strtod_l+0x212>
 800fecc:	2301      	movs	r3, #1
 800fece:	e7c2      	b.n	800fe56 <_strtod_l+0x176>
 800fed0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fed2:	1c5a      	adds	r2, r3, #1
 800fed4:	9217      	str	r2, [sp, #92]	; 0x5c
 800fed6:	785a      	ldrb	r2, [r3, #1]
 800fed8:	3001      	adds	r0, #1
 800feda:	2a30      	cmp	r2, #48	; 0x30
 800fedc:	d0f8      	beq.n	800fed0 <_strtod_l+0x1f0>
 800fede:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800fee2:	2b08      	cmp	r3, #8
 800fee4:	f200 84d9 	bhi.w	801089a <_strtod_l+0xbba>
 800fee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800feea:	9005      	str	r0, [sp, #20]
 800feec:	2000      	movs	r0, #0
 800feee:	9308      	str	r3, [sp, #32]
 800fef0:	4605      	mov	r5, r0
 800fef2:	3a30      	subs	r2, #48	; 0x30
 800fef4:	f100 0301 	add.w	r3, r0, #1
 800fef8:	d014      	beq.n	800ff24 <_strtod_l+0x244>
 800fefa:	9905      	ldr	r1, [sp, #20]
 800fefc:	4419      	add	r1, r3
 800fefe:	9105      	str	r1, [sp, #20]
 800ff00:	462b      	mov	r3, r5
 800ff02:	eb00 0e05 	add.w	lr, r0, r5
 800ff06:	210a      	movs	r1, #10
 800ff08:	4573      	cmp	r3, lr
 800ff0a:	d113      	bne.n	800ff34 <_strtod_l+0x254>
 800ff0c:	182b      	adds	r3, r5, r0
 800ff0e:	2b08      	cmp	r3, #8
 800ff10:	f105 0501 	add.w	r5, r5, #1
 800ff14:	4405      	add	r5, r0
 800ff16:	dc1c      	bgt.n	800ff52 <_strtod_l+0x272>
 800ff18:	9907      	ldr	r1, [sp, #28]
 800ff1a:	230a      	movs	r3, #10
 800ff1c:	fb03 2301 	mla	r3, r3, r1, r2
 800ff20:	9307      	str	r3, [sp, #28]
 800ff22:	2300      	movs	r3, #0
 800ff24:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff26:	1c51      	adds	r1, r2, #1
 800ff28:	9117      	str	r1, [sp, #92]	; 0x5c
 800ff2a:	7852      	ldrb	r2, [r2, #1]
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	e7c9      	b.n	800fec4 <_strtod_l+0x1e4>
 800ff30:	4638      	mov	r0, r7
 800ff32:	e7d2      	b.n	800feda <_strtod_l+0x1fa>
 800ff34:	2b08      	cmp	r3, #8
 800ff36:	dc04      	bgt.n	800ff42 <_strtod_l+0x262>
 800ff38:	9e07      	ldr	r6, [sp, #28]
 800ff3a:	434e      	muls	r6, r1
 800ff3c:	9607      	str	r6, [sp, #28]
 800ff3e:	3301      	adds	r3, #1
 800ff40:	e7e2      	b.n	800ff08 <_strtod_l+0x228>
 800ff42:	f103 0c01 	add.w	ip, r3, #1
 800ff46:	f1bc 0f10 	cmp.w	ip, #16
 800ff4a:	bfd8      	it	le
 800ff4c:	fb01 f909 	mulle.w	r9, r1, r9
 800ff50:	e7f5      	b.n	800ff3e <_strtod_l+0x25e>
 800ff52:	2d10      	cmp	r5, #16
 800ff54:	bfdc      	itt	le
 800ff56:	230a      	movle	r3, #10
 800ff58:	fb03 2909 	mlale	r9, r3, r9, r2
 800ff5c:	e7e1      	b.n	800ff22 <_strtod_l+0x242>
 800ff5e:	2300      	movs	r3, #0
 800ff60:	9305      	str	r3, [sp, #20]
 800ff62:	2301      	movs	r3, #1
 800ff64:	e77c      	b.n	800fe60 <_strtod_l+0x180>
 800ff66:	f04f 0c00 	mov.w	ip, #0
 800ff6a:	f108 0202 	add.w	r2, r8, #2
 800ff6e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ff70:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ff74:	e785      	b.n	800fe82 <_strtod_l+0x1a2>
 800ff76:	f04f 0c01 	mov.w	ip, #1
 800ff7a:	e7f6      	b.n	800ff6a <_strtod_l+0x28a>
 800ff7c:	08013b5c 	.word	0x08013b5c
 800ff80:	0801392c 	.word	0x0801392c
 800ff84:	7ff00000 	.word	0x7ff00000
 800ff88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff8a:	1c51      	adds	r1, r2, #1
 800ff8c:	9117      	str	r1, [sp, #92]	; 0x5c
 800ff8e:	7852      	ldrb	r2, [r2, #1]
 800ff90:	2a30      	cmp	r2, #48	; 0x30
 800ff92:	d0f9      	beq.n	800ff88 <_strtod_l+0x2a8>
 800ff94:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ff98:	2908      	cmp	r1, #8
 800ff9a:	f63f af79 	bhi.w	800fe90 <_strtod_l+0x1b0>
 800ff9e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ffa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ffa4:	9206      	str	r2, [sp, #24]
 800ffa6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ffa8:	1c51      	adds	r1, r2, #1
 800ffaa:	9117      	str	r1, [sp, #92]	; 0x5c
 800ffac:	7852      	ldrb	r2, [r2, #1]
 800ffae:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ffb2:	2e09      	cmp	r6, #9
 800ffb4:	d937      	bls.n	8010026 <_strtod_l+0x346>
 800ffb6:	9e06      	ldr	r6, [sp, #24]
 800ffb8:	1b89      	subs	r1, r1, r6
 800ffba:	2908      	cmp	r1, #8
 800ffbc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ffc0:	dc02      	bgt.n	800ffc8 <_strtod_l+0x2e8>
 800ffc2:	4576      	cmp	r6, lr
 800ffc4:	bfa8      	it	ge
 800ffc6:	4676      	movge	r6, lr
 800ffc8:	f1bc 0f00 	cmp.w	ip, #0
 800ffcc:	d000      	beq.n	800ffd0 <_strtod_l+0x2f0>
 800ffce:	4276      	negs	r6, r6
 800ffd0:	2d00      	cmp	r5, #0
 800ffd2:	d14d      	bne.n	8010070 <_strtod_l+0x390>
 800ffd4:	9904      	ldr	r1, [sp, #16]
 800ffd6:	4301      	orrs	r1, r0
 800ffd8:	f47f aec6 	bne.w	800fd68 <_strtod_l+0x88>
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f47f aee1 	bne.w	800fda4 <_strtod_l+0xc4>
 800ffe2:	2a69      	cmp	r2, #105	; 0x69
 800ffe4:	d027      	beq.n	8010036 <_strtod_l+0x356>
 800ffe6:	dc24      	bgt.n	8010032 <_strtod_l+0x352>
 800ffe8:	2a49      	cmp	r2, #73	; 0x49
 800ffea:	d024      	beq.n	8010036 <_strtod_l+0x356>
 800ffec:	2a4e      	cmp	r2, #78	; 0x4e
 800ffee:	f47f aed9 	bne.w	800fda4 <_strtod_l+0xc4>
 800fff2:	499f      	ldr	r1, [pc, #636]	; (8010270 <_strtod_l+0x590>)
 800fff4:	a817      	add	r0, sp, #92	; 0x5c
 800fff6:	f001 fa5b 	bl	80114b0 <__match>
 800fffa:	2800      	cmp	r0, #0
 800fffc:	f43f aed2 	beq.w	800fda4 <_strtod_l+0xc4>
 8010000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010002:	781b      	ldrb	r3, [r3, #0]
 8010004:	2b28      	cmp	r3, #40	; 0x28
 8010006:	d12d      	bne.n	8010064 <_strtod_l+0x384>
 8010008:	499a      	ldr	r1, [pc, #616]	; (8010274 <_strtod_l+0x594>)
 801000a:	aa1a      	add	r2, sp, #104	; 0x68
 801000c:	a817      	add	r0, sp, #92	; 0x5c
 801000e:	f001 fa63 	bl	80114d8 <__hexnan>
 8010012:	2805      	cmp	r0, #5
 8010014:	d126      	bne.n	8010064 <_strtod_l+0x384>
 8010016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010018:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801001c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010020:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010024:	e6a0      	b.n	800fd68 <_strtod_l+0x88>
 8010026:	210a      	movs	r1, #10
 8010028:	fb01 2e0e 	mla	lr, r1, lr, r2
 801002c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010030:	e7b9      	b.n	800ffa6 <_strtod_l+0x2c6>
 8010032:	2a6e      	cmp	r2, #110	; 0x6e
 8010034:	e7db      	b.n	800ffee <_strtod_l+0x30e>
 8010036:	4990      	ldr	r1, [pc, #576]	; (8010278 <_strtod_l+0x598>)
 8010038:	a817      	add	r0, sp, #92	; 0x5c
 801003a:	f001 fa39 	bl	80114b0 <__match>
 801003e:	2800      	cmp	r0, #0
 8010040:	f43f aeb0 	beq.w	800fda4 <_strtod_l+0xc4>
 8010044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010046:	498d      	ldr	r1, [pc, #564]	; (801027c <_strtod_l+0x59c>)
 8010048:	3b01      	subs	r3, #1
 801004a:	a817      	add	r0, sp, #92	; 0x5c
 801004c:	9317      	str	r3, [sp, #92]	; 0x5c
 801004e:	f001 fa2f 	bl	80114b0 <__match>
 8010052:	b910      	cbnz	r0, 801005a <_strtod_l+0x37a>
 8010054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010056:	3301      	adds	r3, #1
 8010058:	9317      	str	r3, [sp, #92]	; 0x5c
 801005a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801028c <_strtod_l+0x5ac>
 801005e:	f04f 0a00 	mov.w	sl, #0
 8010062:	e681      	b.n	800fd68 <_strtod_l+0x88>
 8010064:	4886      	ldr	r0, [pc, #536]	; (8010280 <_strtod_l+0x5a0>)
 8010066:	f002 ff3f 	bl	8012ee8 <nan>
 801006a:	ec5b ab10 	vmov	sl, fp, d0
 801006e:	e67b      	b.n	800fd68 <_strtod_l+0x88>
 8010070:	9b05      	ldr	r3, [sp, #20]
 8010072:	9807      	ldr	r0, [sp, #28]
 8010074:	1af3      	subs	r3, r6, r3
 8010076:	2f00      	cmp	r7, #0
 8010078:	bf08      	it	eq
 801007a:	462f      	moveq	r7, r5
 801007c:	2d10      	cmp	r5, #16
 801007e:	9306      	str	r3, [sp, #24]
 8010080:	46a8      	mov	r8, r5
 8010082:	bfa8      	it	ge
 8010084:	f04f 0810 	movge.w	r8, #16
 8010088:	f7f0 fa4c 	bl	8000524 <__aeabi_ui2d>
 801008c:	2d09      	cmp	r5, #9
 801008e:	4682      	mov	sl, r0
 8010090:	468b      	mov	fp, r1
 8010092:	dd13      	ble.n	80100bc <_strtod_l+0x3dc>
 8010094:	4b7b      	ldr	r3, [pc, #492]	; (8010284 <_strtod_l+0x5a4>)
 8010096:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801009a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801009e:	f7f0 fabb 	bl	8000618 <__aeabi_dmul>
 80100a2:	4682      	mov	sl, r0
 80100a4:	4648      	mov	r0, r9
 80100a6:	468b      	mov	fp, r1
 80100a8:	f7f0 fa3c 	bl	8000524 <__aeabi_ui2d>
 80100ac:	4602      	mov	r2, r0
 80100ae:	460b      	mov	r3, r1
 80100b0:	4650      	mov	r0, sl
 80100b2:	4659      	mov	r1, fp
 80100b4:	f7f0 f8fa 	bl	80002ac <__adddf3>
 80100b8:	4682      	mov	sl, r0
 80100ba:	468b      	mov	fp, r1
 80100bc:	2d0f      	cmp	r5, #15
 80100be:	dc38      	bgt.n	8010132 <_strtod_l+0x452>
 80100c0:	9b06      	ldr	r3, [sp, #24]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f43f ae50 	beq.w	800fd68 <_strtod_l+0x88>
 80100c8:	dd24      	ble.n	8010114 <_strtod_l+0x434>
 80100ca:	2b16      	cmp	r3, #22
 80100cc:	dc0b      	bgt.n	80100e6 <_strtod_l+0x406>
 80100ce:	496d      	ldr	r1, [pc, #436]	; (8010284 <_strtod_l+0x5a4>)
 80100d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80100d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100d8:	4652      	mov	r2, sl
 80100da:	465b      	mov	r3, fp
 80100dc:	f7f0 fa9c 	bl	8000618 <__aeabi_dmul>
 80100e0:	4682      	mov	sl, r0
 80100e2:	468b      	mov	fp, r1
 80100e4:	e640      	b.n	800fd68 <_strtod_l+0x88>
 80100e6:	9a06      	ldr	r2, [sp, #24]
 80100e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80100ec:	4293      	cmp	r3, r2
 80100ee:	db20      	blt.n	8010132 <_strtod_l+0x452>
 80100f0:	4c64      	ldr	r4, [pc, #400]	; (8010284 <_strtod_l+0x5a4>)
 80100f2:	f1c5 050f 	rsb	r5, r5, #15
 80100f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80100fa:	4652      	mov	r2, sl
 80100fc:	465b      	mov	r3, fp
 80100fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010102:	f7f0 fa89 	bl	8000618 <__aeabi_dmul>
 8010106:	9b06      	ldr	r3, [sp, #24]
 8010108:	1b5d      	subs	r5, r3, r5
 801010a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801010e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010112:	e7e3      	b.n	80100dc <_strtod_l+0x3fc>
 8010114:	9b06      	ldr	r3, [sp, #24]
 8010116:	3316      	adds	r3, #22
 8010118:	db0b      	blt.n	8010132 <_strtod_l+0x452>
 801011a:	9b05      	ldr	r3, [sp, #20]
 801011c:	1b9e      	subs	r6, r3, r6
 801011e:	4b59      	ldr	r3, [pc, #356]	; (8010284 <_strtod_l+0x5a4>)
 8010120:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010124:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010128:	4650      	mov	r0, sl
 801012a:	4659      	mov	r1, fp
 801012c:	f7f0 fb9e 	bl	800086c <__aeabi_ddiv>
 8010130:	e7d6      	b.n	80100e0 <_strtod_l+0x400>
 8010132:	9b06      	ldr	r3, [sp, #24]
 8010134:	eba5 0808 	sub.w	r8, r5, r8
 8010138:	4498      	add	r8, r3
 801013a:	f1b8 0f00 	cmp.w	r8, #0
 801013e:	dd74      	ble.n	801022a <_strtod_l+0x54a>
 8010140:	f018 030f 	ands.w	r3, r8, #15
 8010144:	d00a      	beq.n	801015c <_strtod_l+0x47c>
 8010146:	494f      	ldr	r1, [pc, #316]	; (8010284 <_strtod_l+0x5a4>)
 8010148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801014c:	4652      	mov	r2, sl
 801014e:	465b      	mov	r3, fp
 8010150:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010154:	f7f0 fa60 	bl	8000618 <__aeabi_dmul>
 8010158:	4682      	mov	sl, r0
 801015a:	468b      	mov	fp, r1
 801015c:	f038 080f 	bics.w	r8, r8, #15
 8010160:	d04f      	beq.n	8010202 <_strtod_l+0x522>
 8010162:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010166:	dd22      	ble.n	80101ae <_strtod_l+0x4ce>
 8010168:	2500      	movs	r5, #0
 801016a:	462e      	mov	r6, r5
 801016c:	9507      	str	r5, [sp, #28]
 801016e:	9505      	str	r5, [sp, #20]
 8010170:	2322      	movs	r3, #34	; 0x22
 8010172:	f8df b118 	ldr.w	fp, [pc, #280]	; 801028c <_strtod_l+0x5ac>
 8010176:	6023      	str	r3, [r4, #0]
 8010178:	f04f 0a00 	mov.w	sl, #0
 801017c:	9b07      	ldr	r3, [sp, #28]
 801017e:	2b00      	cmp	r3, #0
 8010180:	f43f adf2 	beq.w	800fd68 <_strtod_l+0x88>
 8010184:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010186:	4620      	mov	r0, r4
 8010188:	f001 fb10 	bl	80117ac <_Bfree>
 801018c:	9905      	ldr	r1, [sp, #20]
 801018e:	4620      	mov	r0, r4
 8010190:	f001 fb0c 	bl	80117ac <_Bfree>
 8010194:	4631      	mov	r1, r6
 8010196:	4620      	mov	r0, r4
 8010198:	f001 fb08 	bl	80117ac <_Bfree>
 801019c:	9907      	ldr	r1, [sp, #28]
 801019e:	4620      	mov	r0, r4
 80101a0:	f001 fb04 	bl	80117ac <_Bfree>
 80101a4:	4629      	mov	r1, r5
 80101a6:	4620      	mov	r0, r4
 80101a8:	f001 fb00 	bl	80117ac <_Bfree>
 80101ac:	e5dc      	b.n	800fd68 <_strtod_l+0x88>
 80101ae:	4b36      	ldr	r3, [pc, #216]	; (8010288 <_strtod_l+0x5a8>)
 80101b0:	9304      	str	r3, [sp, #16]
 80101b2:	2300      	movs	r3, #0
 80101b4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80101b8:	4650      	mov	r0, sl
 80101ba:	4659      	mov	r1, fp
 80101bc:	4699      	mov	r9, r3
 80101be:	f1b8 0f01 	cmp.w	r8, #1
 80101c2:	dc21      	bgt.n	8010208 <_strtod_l+0x528>
 80101c4:	b10b      	cbz	r3, 80101ca <_strtod_l+0x4ea>
 80101c6:	4682      	mov	sl, r0
 80101c8:	468b      	mov	fp, r1
 80101ca:	4b2f      	ldr	r3, [pc, #188]	; (8010288 <_strtod_l+0x5a8>)
 80101cc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80101d0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80101d4:	4652      	mov	r2, sl
 80101d6:	465b      	mov	r3, fp
 80101d8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80101dc:	f7f0 fa1c 	bl	8000618 <__aeabi_dmul>
 80101e0:	4b2a      	ldr	r3, [pc, #168]	; (801028c <_strtod_l+0x5ac>)
 80101e2:	460a      	mov	r2, r1
 80101e4:	400b      	ands	r3, r1
 80101e6:	492a      	ldr	r1, [pc, #168]	; (8010290 <_strtod_l+0x5b0>)
 80101e8:	428b      	cmp	r3, r1
 80101ea:	4682      	mov	sl, r0
 80101ec:	d8bc      	bhi.n	8010168 <_strtod_l+0x488>
 80101ee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80101f2:	428b      	cmp	r3, r1
 80101f4:	bf86      	itte	hi
 80101f6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010294 <_strtod_l+0x5b4>
 80101fa:	f04f 3aff 	movhi.w	sl, #4294967295
 80101fe:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010202:	2300      	movs	r3, #0
 8010204:	9304      	str	r3, [sp, #16]
 8010206:	e084      	b.n	8010312 <_strtod_l+0x632>
 8010208:	f018 0f01 	tst.w	r8, #1
 801020c:	d005      	beq.n	801021a <_strtod_l+0x53a>
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010214:	f7f0 fa00 	bl	8000618 <__aeabi_dmul>
 8010218:	2301      	movs	r3, #1
 801021a:	9a04      	ldr	r2, [sp, #16]
 801021c:	3208      	adds	r2, #8
 801021e:	f109 0901 	add.w	r9, r9, #1
 8010222:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010226:	9204      	str	r2, [sp, #16]
 8010228:	e7c9      	b.n	80101be <_strtod_l+0x4de>
 801022a:	d0ea      	beq.n	8010202 <_strtod_l+0x522>
 801022c:	f1c8 0800 	rsb	r8, r8, #0
 8010230:	f018 020f 	ands.w	r2, r8, #15
 8010234:	d00a      	beq.n	801024c <_strtod_l+0x56c>
 8010236:	4b13      	ldr	r3, [pc, #76]	; (8010284 <_strtod_l+0x5a4>)
 8010238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801023c:	4650      	mov	r0, sl
 801023e:	4659      	mov	r1, fp
 8010240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010244:	f7f0 fb12 	bl	800086c <__aeabi_ddiv>
 8010248:	4682      	mov	sl, r0
 801024a:	468b      	mov	fp, r1
 801024c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010250:	d0d7      	beq.n	8010202 <_strtod_l+0x522>
 8010252:	f1b8 0f1f 	cmp.w	r8, #31
 8010256:	dd1f      	ble.n	8010298 <_strtod_l+0x5b8>
 8010258:	2500      	movs	r5, #0
 801025a:	462e      	mov	r6, r5
 801025c:	9507      	str	r5, [sp, #28]
 801025e:	9505      	str	r5, [sp, #20]
 8010260:	2322      	movs	r3, #34	; 0x22
 8010262:	f04f 0a00 	mov.w	sl, #0
 8010266:	f04f 0b00 	mov.w	fp, #0
 801026a:	6023      	str	r3, [r4, #0]
 801026c:	e786      	b.n	801017c <_strtod_l+0x49c>
 801026e:	bf00      	nop
 8010270:	08013926 	.word	0x08013926
 8010274:	08013940 	.word	0x08013940
 8010278:	0801391d 	.word	0x0801391d
 801027c:	08013920 	.word	0x08013920
 8010280:	08013d6d 	.word	0x08013d6d
 8010284:	08013c10 	.word	0x08013c10
 8010288:	08013be8 	.word	0x08013be8
 801028c:	7ff00000 	.word	0x7ff00000
 8010290:	7ca00000 	.word	0x7ca00000
 8010294:	7fefffff 	.word	0x7fefffff
 8010298:	f018 0310 	ands.w	r3, r8, #16
 801029c:	bf18      	it	ne
 801029e:	236a      	movne	r3, #106	; 0x6a
 80102a0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010650 <_strtod_l+0x970>
 80102a4:	9304      	str	r3, [sp, #16]
 80102a6:	4650      	mov	r0, sl
 80102a8:	4659      	mov	r1, fp
 80102aa:	2300      	movs	r3, #0
 80102ac:	f018 0f01 	tst.w	r8, #1
 80102b0:	d004      	beq.n	80102bc <_strtod_l+0x5dc>
 80102b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80102b6:	f7f0 f9af 	bl	8000618 <__aeabi_dmul>
 80102ba:	2301      	movs	r3, #1
 80102bc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80102c0:	f109 0908 	add.w	r9, r9, #8
 80102c4:	d1f2      	bne.n	80102ac <_strtod_l+0x5cc>
 80102c6:	b10b      	cbz	r3, 80102cc <_strtod_l+0x5ec>
 80102c8:	4682      	mov	sl, r0
 80102ca:	468b      	mov	fp, r1
 80102cc:	9b04      	ldr	r3, [sp, #16]
 80102ce:	b1c3      	cbz	r3, 8010302 <_strtod_l+0x622>
 80102d0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80102d4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80102d8:	2b00      	cmp	r3, #0
 80102da:	4659      	mov	r1, fp
 80102dc:	dd11      	ble.n	8010302 <_strtod_l+0x622>
 80102de:	2b1f      	cmp	r3, #31
 80102e0:	f340 8124 	ble.w	801052c <_strtod_l+0x84c>
 80102e4:	2b34      	cmp	r3, #52	; 0x34
 80102e6:	bfde      	ittt	le
 80102e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80102ec:	f04f 33ff 	movle.w	r3, #4294967295
 80102f0:	fa03 f202 	lslle.w	r2, r3, r2
 80102f4:	f04f 0a00 	mov.w	sl, #0
 80102f8:	bfcc      	ite	gt
 80102fa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80102fe:	ea02 0b01 	andle.w	fp, r2, r1
 8010302:	2200      	movs	r2, #0
 8010304:	2300      	movs	r3, #0
 8010306:	4650      	mov	r0, sl
 8010308:	4659      	mov	r1, fp
 801030a:	f7f0 fbed 	bl	8000ae8 <__aeabi_dcmpeq>
 801030e:	2800      	cmp	r0, #0
 8010310:	d1a2      	bne.n	8010258 <_strtod_l+0x578>
 8010312:	9b07      	ldr	r3, [sp, #28]
 8010314:	9300      	str	r3, [sp, #0]
 8010316:	9908      	ldr	r1, [sp, #32]
 8010318:	462b      	mov	r3, r5
 801031a:	463a      	mov	r2, r7
 801031c:	4620      	mov	r0, r4
 801031e:	f001 faad 	bl	801187c <__s2b>
 8010322:	9007      	str	r0, [sp, #28]
 8010324:	2800      	cmp	r0, #0
 8010326:	f43f af1f 	beq.w	8010168 <_strtod_l+0x488>
 801032a:	9b05      	ldr	r3, [sp, #20]
 801032c:	1b9e      	subs	r6, r3, r6
 801032e:	9b06      	ldr	r3, [sp, #24]
 8010330:	2b00      	cmp	r3, #0
 8010332:	bfb4      	ite	lt
 8010334:	4633      	movlt	r3, r6
 8010336:	2300      	movge	r3, #0
 8010338:	930c      	str	r3, [sp, #48]	; 0x30
 801033a:	9b06      	ldr	r3, [sp, #24]
 801033c:	2500      	movs	r5, #0
 801033e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010342:	9312      	str	r3, [sp, #72]	; 0x48
 8010344:	462e      	mov	r6, r5
 8010346:	9b07      	ldr	r3, [sp, #28]
 8010348:	4620      	mov	r0, r4
 801034a:	6859      	ldr	r1, [r3, #4]
 801034c:	f001 f9ee 	bl	801172c <_Balloc>
 8010350:	9005      	str	r0, [sp, #20]
 8010352:	2800      	cmp	r0, #0
 8010354:	f43f af0c 	beq.w	8010170 <_strtod_l+0x490>
 8010358:	9b07      	ldr	r3, [sp, #28]
 801035a:	691a      	ldr	r2, [r3, #16]
 801035c:	3202      	adds	r2, #2
 801035e:	f103 010c 	add.w	r1, r3, #12
 8010362:	0092      	lsls	r2, r2, #2
 8010364:	300c      	adds	r0, #12
 8010366:	f7ff f923 	bl	800f5b0 <memcpy>
 801036a:	ec4b ab10 	vmov	d0, sl, fp
 801036e:	aa1a      	add	r2, sp, #104	; 0x68
 8010370:	a919      	add	r1, sp, #100	; 0x64
 8010372:	4620      	mov	r0, r4
 8010374:	f001 fdc8 	bl	8011f08 <__d2b>
 8010378:	ec4b ab18 	vmov	d8, sl, fp
 801037c:	9018      	str	r0, [sp, #96]	; 0x60
 801037e:	2800      	cmp	r0, #0
 8010380:	f43f aef6 	beq.w	8010170 <_strtod_l+0x490>
 8010384:	2101      	movs	r1, #1
 8010386:	4620      	mov	r0, r4
 8010388:	f001 fb12 	bl	80119b0 <__i2b>
 801038c:	4606      	mov	r6, r0
 801038e:	2800      	cmp	r0, #0
 8010390:	f43f aeee 	beq.w	8010170 <_strtod_l+0x490>
 8010394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010396:	9904      	ldr	r1, [sp, #16]
 8010398:	2b00      	cmp	r3, #0
 801039a:	bfab      	itete	ge
 801039c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801039e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80103a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80103a2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80103a6:	bfac      	ite	ge
 80103a8:	eb03 0902 	addge.w	r9, r3, r2
 80103ac:	1ad7      	sublt	r7, r2, r3
 80103ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80103b0:	eba3 0801 	sub.w	r8, r3, r1
 80103b4:	4490      	add	r8, r2
 80103b6:	4ba1      	ldr	r3, [pc, #644]	; (801063c <_strtod_l+0x95c>)
 80103b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80103bc:	4598      	cmp	r8, r3
 80103be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80103c2:	f280 80c7 	bge.w	8010554 <_strtod_l+0x874>
 80103c6:	eba3 0308 	sub.w	r3, r3, r8
 80103ca:	2b1f      	cmp	r3, #31
 80103cc:	eba2 0203 	sub.w	r2, r2, r3
 80103d0:	f04f 0101 	mov.w	r1, #1
 80103d4:	f300 80b1 	bgt.w	801053a <_strtod_l+0x85a>
 80103d8:	fa01 f303 	lsl.w	r3, r1, r3
 80103dc:	930d      	str	r3, [sp, #52]	; 0x34
 80103de:	2300      	movs	r3, #0
 80103e0:	9308      	str	r3, [sp, #32]
 80103e2:	eb09 0802 	add.w	r8, r9, r2
 80103e6:	9b04      	ldr	r3, [sp, #16]
 80103e8:	45c1      	cmp	r9, r8
 80103ea:	4417      	add	r7, r2
 80103ec:	441f      	add	r7, r3
 80103ee:	464b      	mov	r3, r9
 80103f0:	bfa8      	it	ge
 80103f2:	4643      	movge	r3, r8
 80103f4:	42bb      	cmp	r3, r7
 80103f6:	bfa8      	it	ge
 80103f8:	463b      	movge	r3, r7
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	bfc2      	ittt	gt
 80103fe:	eba8 0803 	subgt.w	r8, r8, r3
 8010402:	1aff      	subgt	r7, r7, r3
 8010404:	eba9 0903 	subgt.w	r9, r9, r3
 8010408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801040a:	2b00      	cmp	r3, #0
 801040c:	dd17      	ble.n	801043e <_strtod_l+0x75e>
 801040e:	4631      	mov	r1, r6
 8010410:	461a      	mov	r2, r3
 8010412:	4620      	mov	r0, r4
 8010414:	f001 fb8c 	bl	8011b30 <__pow5mult>
 8010418:	4606      	mov	r6, r0
 801041a:	2800      	cmp	r0, #0
 801041c:	f43f aea8 	beq.w	8010170 <_strtod_l+0x490>
 8010420:	4601      	mov	r1, r0
 8010422:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010424:	4620      	mov	r0, r4
 8010426:	f001 fad9 	bl	80119dc <__multiply>
 801042a:	900b      	str	r0, [sp, #44]	; 0x2c
 801042c:	2800      	cmp	r0, #0
 801042e:	f43f ae9f 	beq.w	8010170 <_strtod_l+0x490>
 8010432:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010434:	4620      	mov	r0, r4
 8010436:	f001 f9b9 	bl	80117ac <_Bfree>
 801043a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801043c:	9318      	str	r3, [sp, #96]	; 0x60
 801043e:	f1b8 0f00 	cmp.w	r8, #0
 8010442:	f300 808c 	bgt.w	801055e <_strtod_l+0x87e>
 8010446:	9b06      	ldr	r3, [sp, #24]
 8010448:	2b00      	cmp	r3, #0
 801044a:	dd08      	ble.n	801045e <_strtod_l+0x77e>
 801044c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801044e:	9905      	ldr	r1, [sp, #20]
 8010450:	4620      	mov	r0, r4
 8010452:	f001 fb6d 	bl	8011b30 <__pow5mult>
 8010456:	9005      	str	r0, [sp, #20]
 8010458:	2800      	cmp	r0, #0
 801045a:	f43f ae89 	beq.w	8010170 <_strtod_l+0x490>
 801045e:	2f00      	cmp	r7, #0
 8010460:	dd08      	ble.n	8010474 <_strtod_l+0x794>
 8010462:	9905      	ldr	r1, [sp, #20]
 8010464:	463a      	mov	r2, r7
 8010466:	4620      	mov	r0, r4
 8010468:	f001 fbbc 	bl	8011be4 <__lshift>
 801046c:	9005      	str	r0, [sp, #20]
 801046e:	2800      	cmp	r0, #0
 8010470:	f43f ae7e 	beq.w	8010170 <_strtod_l+0x490>
 8010474:	f1b9 0f00 	cmp.w	r9, #0
 8010478:	dd08      	ble.n	801048c <_strtod_l+0x7ac>
 801047a:	4631      	mov	r1, r6
 801047c:	464a      	mov	r2, r9
 801047e:	4620      	mov	r0, r4
 8010480:	f001 fbb0 	bl	8011be4 <__lshift>
 8010484:	4606      	mov	r6, r0
 8010486:	2800      	cmp	r0, #0
 8010488:	f43f ae72 	beq.w	8010170 <_strtod_l+0x490>
 801048c:	9a05      	ldr	r2, [sp, #20]
 801048e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010490:	4620      	mov	r0, r4
 8010492:	f001 fc33 	bl	8011cfc <__mdiff>
 8010496:	4605      	mov	r5, r0
 8010498:	2800      	cmp	r0, #0
 801049a:	f43f ae69 	beq.w	8010170 <_strtod_l+0x490>
 801049e:	68c3      	ldr	r3, [r0, #12]
 80104a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80104a2:	2300      	movs	r3, #0
 80104a4:	60c3      	str	r3, [r0, #12]
 80104a6:	4631      	mov	r1, r6
 80104a8:	f001 fc0c 	bl	8011cc4 <__mcmp>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	da60      	bge.n	8010572 <_strtod_l+0x892>
 80104b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104b2:	ea53 030a 	orrs.w	r3, r3, sl
 80104b6:	f040 8082 	bne.w	80105be <_strtod_l+0x8de>
 80104ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d17d      	bne.n	80105be <_strtod_l+0x8de>
 80104c2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80104c6:	0d1b      	lsrs	r3, r3, #20
 80104c8:	051b      	lsls	r3, r3, #20
 80104ca:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80104ce:	d976      	bls.n	80105be <_strtod_l+0x8de>
 80104d0:	696b      	ldr	r3, [r5, #20]
 80104d2:	b913      	cbnz	r3, 80104da <_strtod_l+0x7fa>
 80104d4:	692b      	ldr	r3, [r5, #16]
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	dd71      	ble.n	80105be <_strtod_l+0x8de>
 80104da:	4629      	mov	r1, r5
 80104dc:	2201      	movs	r2, #1
 80104de:	4620      	mov	r0, r4
 80104e0:	f001 fb80 	bl	8011be4 <__lshift>
 80104e4:	4631      	mov	r1, r6
 80104e6:	4605      	mov	r5, r0
 80104e8:	f001 fbec 	bl	8011cc4 <__mcmp>
 80104ec:	2800      	cmp	r0, #0
 80104ee:	dd66      	ble.n	80105be <_strtod_l+0x8de>
 80104f0:	9904      	ldr	r1, [sp, #16]
 80104f2:	4a53      	ldr	r2, [pc, #332]	; (8010640 <_strtod_l+0x960>)
 80104f4:	465b      	mov	r3, fp
 80104f6:	2900      	cmp	r1, #0
 80104f8:	f000 8081 	beq.w	80105fe <_strtod_l+0x91e>
 80104fc:	ea02 010b 	and.w	r1, r2, fp
 8010500:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010504:	dc7b      	bgt.n	80105fe <_strtod_l+0x91e>
 8010506:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801050a:	f77f aea9 	ble.w	8010260 <_strtod_l+0x580>
 801050e:	4b4d      	ldr	r3, [pc, #308]	; (8010644 <_strtod_l+0x964>)
 8010510:	4650      	mov	r0, sl
 8010512:	4659      	mov	r1, fp
 8010514:	2200      	movs	r2, #0
 8010516:	f7f0 f87f 	bl	8000618 <__aeabi_dmul>
 801051a:	460b      	mov	r3, r1
 801051c:	4303      	orrs	r3, r0
 801051e:	bf08      	it	eq
 8010520:	2322      	moveq	r3, #34	; 0x22
 8010522:	4682      	mov	sl, r0
 8010524:	468b      	mov	fp, r1
 8010526:	bf08      	it	eq
 8010528:	6023      	streq	r3, [r4, #0]
 801052a:	e62b      	b.n	8010184 <_strtod_l+0x4a4>
 801052c:	f04f 32ff 	mov.w	r2, #4294967295
 8010530:	fa02 f303 	lsl.w	r3, r2, r3
 8010534:	ea03 0a0a 	and.w	sl, r3, sl
 8010538:	e6e3      	b.n	8010302 <_strtod_l+0x622>
 801053a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801053e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010542:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010546:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801054a:	fa01 f308 	lsl.w	r3, r1, r8
 801054e:	9308      	str	r3, [sp, #32]
 8010550:	910d      	str	r1, [sp, #52]	; 0x34
 8010552:	e746      	b.n	80103e2 <_strtod_l+0x702>
 8010554:	2300      	movs	r3, #0
 8010556:	9308      	str	r3, [sp, #32]
 8010558:	2301      	movs	r3, #1
 801055a:	930d      	str	r3, [sp, #52]	; 0x34
 801055c:	e741      	b.n	80103e2 <_strtod_l+0x702>
 801055e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010560:	4642      	mov	r2, r8
 8010562:	4620      	mov	r0, r4
 8010564:	f001 fb3e 	bl	8011be4 <__lshift>
 8010568:	9018      	str	r0, [sp, #96]	; 0x60
 801056a:	2800      	cmp	r0, #0
 801056c:	f47f af6b 	bne.w	8010446 <_strtod_l+0x766>
 8010570:	e5fe      	b.n	8010170 <_strtod_l+0x490>
 8010572:	465f      	mov	r7, fp
 8010574:	d16e      	bne.n	8010654 <_strtod_l+0x974>
 8010576:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010578:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801057c:	b342      	cbz	r2, 80105d0 <_strtod_l+0x8f0>
 801057e:	4a32      	ldr	r2, [pc, #200]	; (8010648 <_strtod_l+0x968>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d128      	bne.n	80105d6 <_strtod_l+0x8f6>
 8010584:	9b04      	ldr	r3, [sp, #16]
 8010586:	4651      	mov	r1, sl
 8010588:	b1eb      	cbz	r3, 80105c6 <_strtod_l+0x8e6>
 801058a:	4b2d      	ldr	r3, [pc, #180]	; (8010640 <_strtod_l+0x960>)
 801058c:	403b      	ands	r3, r7
 801058e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010592:	f04f 32ff 	mov.w	r2, #4294967295
 8010596:	d819      	bhi.n	80105cc <_strtod_l+0x8ec>
 8010598:	0d1b      	lsrs	r3, r3, #20
 801059a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801059e:	fa02 f303 	lsl.w	r3, r2, r3
 80105a2:	4299      	cmp	r1, r3
 80105a4:	d117      	bne.n	80105d6 <_strtod_l+0x8f6>
 80105a6:	4b29      	ldr	r3, [pc, #164]	; (801064c <_strtod_l+0x96c>)
 80105a8:	429f      	cmp	r7, r3
 80105aa:	d102      	bne.n	80105b2 <_strtod_l+0x8d2>
 80105ac:	3101      	adds	r1, #1
 80105ae:	f43f addf 	beq.w	8010170 <_strtod_l+0x490>
 80105b2:	4b23      	ldr	r3, [pc, #140]	; (8010640 <_strtod_l+0x960>)
 80105b4:	403b      	ands	r3, r7
 80105b6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80105ba:	f04f 0a00 	mov.w	sl, #0
 80105be:	9b04      	ldr	r3, [sp, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1a4      	bne.n	801050e <_strtod_l+0x82e>
 80105c4:	e5de      	b.n	8010184 <_strtod_l+0x4a4>
 80105c6:	f04f 33ff 	mov.w	r3, #4294967295
 80105ca:	e7ea      	b.n	80105a2 <_strtod_l+0x8c2>
 80105cc:	4613      	mov	r3, r2
 80105ce:	e7e8      	b.n	80105a2 <_strtod_l+0x8c2>
 80105d0:	ea53 030a 	orrs.w	r3, r3, sl
 80105d4:	d08c      	beq.n	80104f0 <_strtod_l+0x810>
 80105d6:	9b08      	ldr	r3, [sp, #32]
 80105d8:	b1db      	cbz	r3, 8010612 <_strtod_l+0x932>
 80105da:	423b      	tst	r3, r7
 80105dc:	d0ef      	beq.n	80105be <_strtod_l+0x8de>
 80105de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105e0:	9a04      	ldr	r2, [sp, #16]
 80105e2:	4650      	mov	r0, sl
 80105e4:	4659      	mov	r1, fp
 80105e6:	b1c3      	cbz	r3, 801061a <_strtod_l+0x93a>
 80105e8:	f7ff fb5d 	bl	800fca6 <sulp>
 80105ec:	4602      	mov	r2, r0
 80105ee:	460b      	mov	r3, r1
 80105f0:	ec51 0b18 	vmov	r0, r1, d8
 80105f4:	f7ef fe5a 	bl	80002ac <__adddf3>
 80105f8:	4682      	mov	sl, r0
 80105fa:	468b      	mov	fp, r1
 80105fc:	e7df      	b.n	80105be <_strtod_l+0x8de>
 80105fe:	4013      	ands	r3, r2
 8010600:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010604:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010608:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801060c:	f04f 3aff 	mov.w	sl, #4294967295
 8010610:	e7d5      	b.n	80105be <_strtod_l+0x8de>
 8010612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010614:	ea13 0f0a 	tst.w	r3, sl
 8010618:	e7e0      	b.n	80105dc <_strtod_l+0x8fc>
 801061a:	f7ff fb44 	bl	800fca6 <sulp>
 801061e:	4602      	mov	r2, r0
 8010620:	460b      	mov	r3, r1
 8010622:	ec51 0b18 	vmov	r0, r1, d8
 8010626:	f7ef fe3f 	bl	80002a8 <__aeabi_dsub>
 801062a:	2200      	movs	r2, #0
 801062c:	2300      	movs	r3, #0
 801062e:	4682      	mov	sl, r0
 8010630:	468b      	mov	fp, r1
 8010632:	f7f0 fa59 	bl	8000ae8 <__aeabi_dcmpeq>
 8010636:	2800      	cmp	r0, #0
 8010638:	d0c1      	beq.n	80105be <_strtod_l+0x8de>
 801063a:	e611      	b.n	8010260 <_strtod_l+0x580>
 801063c:	fffffc02 	.word	0xfffffc02
 8010640:	7ff00000 	.word	0x7ff00000
 8010644:	39500000 	.word	0x39500000
 8010648:	000fffff 	.word	0x000fffff
 801064c:	7fefffff 	.word	0x7fefffff
 8010650:	08013958 	.word	0x08013958
 8010654:	4631      	mov	r1, r6
 8010656:	4628      	mov	r0, r5
 8010658:	f001 fcb2 	bl	8011fc0 <__ratio>
 801065c:	ec59 8b10 	vmov	r8, r9, d0
 8010660:	ee10 0a10 	vmov	r0, s0
 8010664:	2200      	movs	r2, #0
 8010666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801066a:	4649      	mov	r1, r9
 801066c:	f7f0 fa50 	bl	8000b10 <__aeabi_dcmple>
 8010670:	2800      	cmp	r0, #0
 8010672:	d07a      	beq.n	801076a <_strtod_l+0xa8a>
 8010674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010676:	2b00      	cmp	r3, #0
 8010678:	d04a      	beq.n	8010710 <_strtod_l+0xa30>
 801067a:	4b95      	ldr	r3, [pc, #596]	; (80108d0 <_strtod_l+0xbf0>)
 801067c:	2200      	movs	r2, #0
 801067e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010682:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80108d0 <_strtod_l+0xbf0>
 8010686:	f04f 0800 	mov.w	r8, #0
 801068a:	4b92      	ldr	r3, [pc, #584]	; (80108d4 <_strtod_l+0xbf4>)
 801068c:	403b      	ands	r3, r7
 801068e:	930d      	str	r3, [sp, #52]	; 0x34
 8010690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010692:	4b91      	ldr	r3, [pc, #580]	; (80108d8 <_strtod_l+0xbf8>)
 8010694:	429a      	cmp	r2, r3
 8010696:	f040 80b0 	bne.w	80107fa <_strtod_l+0xb1a>
 801069a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801069e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80106a2:	ec4b ab10 	vmov	d0, sl, fp
 80106a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80106aa:	f001 fbb1 	bl	8011e10 <__ulp>
 80106ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80106b2:	ec53 2b10 	vmov	r2, r3, d0
 80106b6:	f7ef ffaf 	bl	8000618 <__aeabi_dmul>
 80106ba:	4652      	mov	r2, sl
 80106bc:	465b      	mov	r3, fp
 80106be:	f7ef fdf5 	bl	80002ac <__adddf3>
 80106c2:	460b      	mov	r3, r1
 80106c4:	4983      	ldr	r1, [pc, #524]	; (80108d4 <_strtod_l+0xbf4>)
 80106c6:	4a85      	ldr	r2, [pc, #532]	; (80108dc <_strtod_l+0xbfc>)
 80106c8:	4019      	ands	r1, r3
 80106ca:	4291      	cmp	r1, r2
 80106cc:	4682      	mov	sl, r0
 80106ce:	d960      	bls.n	8010792 <_strtod_l+0xab2>
 80106d0:	ee18 3a90 	vmov	r3, s17
 80106d4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80106d8:	4293      	cmp	r3, r2
 80106da:	d104      	bne.n	80106e6 <_strtod_l+0xa06>
 80106dc:	ee18 3a10 	vmov	r3, s16
 80106e0:	3301      	adds	r3, #1
 80106e2:	f43f ad45 	beq.w	8010170 <_strtod_l+0x490>
 80106e6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80108e8 <_strtod_l+0xc08>
 80106ea:	f04f 3aff 	mov.w	sl, #4294967295
 80106ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80106f0:	4620      	mov	r0, r4
 80106f2:	f001 f85b 	bl	80117ac <_Bfree>
 80106f6:	9905      	ldr	r1, [sp, #20]
 80106f8:	4620      	mov	r0, r4
 80106fa:	f001 f857 	bl	80117ac <_Bfree>
 80106fe:	4631      	mov	r1, r6
 8010700:	4620      	mov	r0, r4
 8010702:	f001 f853 	bl	80117ac <_Bfree>
 8010706:	4629      	mov	r1, r5
 8010708:	4620      	mov	r0, r4
 801070a:	f001 f84f 	bl	80117ac <_Bfree>
 801070e:	e61a      	b.n	8010346 <_strtod_l+0x666>
 8010710:	f1ba 0f00 	cmp.w	sl, #0
 8010714:	d11b      	bne.n	801074e <_strtod_l+0xa6e>
 8010716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801071a:	b9f3      	cbnz	r3, 801075a <_strtod_l+0xa7a>
 801071c:	4b6c      	ldr	r3, [pc, #432]	; (80108d0 <_strtod_l+0xbf0>)
 801071e:	2200      	movs	r2, #0
 8010720:	4640      	mov	r0, r8
 8010722:	4649      	mov	r1, r9
 8010724:	f7f0 f9ea 	bl	8000afc <__aeabi_dcmplt>
 8010728:	b9d0      	cbnz	r0, 8010760 <_strtod_l+0xa80>
 801072a:	4640      	mov	r0, r8
 801072c:	4649      	mov	r1, r9
 801072e:	4b6c      	ldr	r3, [pc, #432]	; (80108e0 <_strtod_l+0xc00>)
 8010730:	2200      	movs	r2, #0
 8010732:	f7ef ff71 	bl	8000618 <__aeabi_dmul>
 8010736:	4680      	mov	r8, r0
 8010738:	4689      	mov	r9, r1
 801073a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801073e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010742:	9315      	str	r3, [sp, #84]	; 0x54
 8010744:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801074c:	e79d      	b.n	801068a <_strtod_l+0x9aa>
 801074e:	f1ba 0f01 	cmp.w	sl, #1
 8010752:	d102      	bne.n	801075a <_strtod_l+0xa7a>
 8010754:	2f00      	cmp	r7, #0
 8010756:	f43f ad83 	beq.w	8010260 <_strtod_l+0x580>
 801075a:	4b62      	ldr	r3, [pc, #392]	; (80108e4 <_strtod_l+0xc04>)
 801075c:	2200      	movs	r2, #0
 801075e:	e78e      	b.n	801067e <_strtod_l+0x99e>
 8010760:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80108e0 <_strtod_l+0xc00>
 8010764:	f04f 0800 	mov.w	r8, #0
 8010768:	e7e7      	b.n	801073a <_strtod_l+0xa5a>
 801076a:	4b5d      	ldr	r3, [pc, #372]	; (80108e0 <_strtod_l+0xc00>)
 801076c:	4640      	mov	r0, r8
 801076e:	4649      	mov	r1, r9
 8010770:	2200      	movs	r2, #0
 8010772:	f7ef ff51 	bl	8000618 <__aeabi_dmul>
 8010776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010778:	4680      	mov	r8, r0
 801077a:	4689      	mov	r9, r1
 801077c:	b933      	cbnz	r3, 801078c <_strtod_l+0xaac>
 801077e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010782:	900e      	str	r0, [sp, #56]	; 0x38
 8010784:	930f      	str	r3, [sp, #60]	; 0x3c
 8010786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801078a:	e7dd      	b.n	8010748 <_strtod_l+0xa68>
 801078c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010790:	e7f9      	b.n	8010786 <_strtod_l+0xaa6>
 8010792:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010796:	9b04      	ldr	r3, [sp, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d1a8      	bne.n	80106ee <_strtod_l+0xa0e>
 801079c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80107a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80107a2:	0d1b      	lsrs	r3, r3, #20
 80107a4:	051b      	lsls	r3, r3, #20
 80107a6:	429a      	cmp	r2, r3
 80107a8:	d1a1      	bne.n	80106ee <_strtod_l+0xa0e>
 80107aa:	4640      	mov	r0, r8
 80107ac:	4649      	mov	r1, r9
 80107ae:	f7f0 fa93 	bl	8000cd8 <__aeabi_d2lz>
 80107b2:	f7ef ff03 	bl	80005bc <__aeabi_l2d>
 80107b6:	4602      	mov	r2, r0
 80107b8:	460b      	mov	r3, r1
 80107ba:	4640      	mov	r0, r8
 80107bc:	4649      	mov	r1, r9
 80107be:	f7ef fd73 	bl	80002a8 <__aeabi_dsub>
 80107c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80107c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80107c8:	ea43 030a 	orr.w	r3, r3, sl
 80107cc:	4313      	orrs	r3, r2
 80107ce:	4680      	mov	r8, r0
 80107d0:	4689      	mov	r9, r1
 80107d2:	d055      	beq.n	8010880 <_strtod_l+0xba0>
 80107d4:	a336      	add	r3, pc, #216	; (adr r3, 80108b0 <_strtod_l+0xbd0>)
 80107d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107da:	f7f0 f98f 	bl	8000afc <__aeabi_dcmplt>
 80107de:	2800      	cmp	r0, #0
 80107e0:	f47f acd0 	bne.w	8010184 <_strtod_l+0x4a4>
 80107e4:	a334      	add	r3, pc, #208	; (adr r3, 80108b8 <_strtod_l+0xbd8>)
 80107e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ea:	4640      	mov	r0, r8
 80107ec:	4649      	mov	r1, r9
 80107ee:	f7f0 f9a3 	bl	8000b38 <__aeabi_dcmpgt>
 80107f2:	2800      	cmp	r0, #0
 80107f4:	f43f af7b 	beq.w	80106ee <_strtod_l+0xa0e>
 80107f8:	e4c4      	b.n	8010184 <_strtod_l+0x4a4>
 80107fa:	9b04      	ldr	r3, [sp, #16]
 80107fc:	b333      	cbz	r3, 801084c <_strtod_l+0xb6c>
 80107fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010800:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010804:	d822      	bhi.n	801084c <_strtod_l+0xb6c>
 8010806:	a32e      	add	r3, pc, #184	; (adr r3, 80108c0 <_strtod_l+0xbe0>)
 8010808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080c:	4640      	mov	r0, r8
 801080e:	4649      	mov	r1, r9
 8010810:	f7f0 f97e 	bl	8000b10 <__aeabi_dcmple>
 8010814:	b1a0      	cbz	r0, 8010840 <_strtod_l+0xb60>
 8010816:	4649      	mov	r1, r9
 8010818:	4640      	mov	r0, r8
 801081a:	f7f0 f9d5 	bl	8000bc8 <__aeabi_d2uiz>
 801081e:	2801      	cmp	r0, #1
 8010820:	bf38      	it	cc
 8010822:	2001      	movcc	r0, #1
 8010824:	f7ef fe7e 	bl	8000524 <__aeabi_ui2d>
 8010828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801082a:	4680      	mov	r8, r0
 801082c:	4689      	mov	r9, r1
 801082e:	bb23      	cbnz	r3, 801087a <_strtod_l+0xb9a>
 8010830:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010834:	9010      	str	r0, [sp, #64]	; 0x40
 8010836:	9311      	str	r3, [sp, #68]	; 0x44
 8010838:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801083c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010844:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010848:	1a9b      	subs	r3, r3, r2
 801084a:	9309      	str	r3, [sp, #36]	; 0x24
 801084c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010850:	eeb0 0a48 	vmov.f32	s0, s16
 8010854:	eef0 0a68 	vmov.f32	s1, s17
 8010858:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801085c:	f001 fad8 	bl	8011e10 <__ulp>
 8010860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010864:	ec53 2b10 	vmov	r2, r3, d0
 8010868:	f7ef fed6 	bl	8000618 <__aeabi_dmul>
 801086c:	ec53 2b18 	vmov	r2, r3, d8
 8010870:	f7ef fd1c 	bl	80002ac <__adddf3>
 8010874:	4682      	mov	sl, r0
 8010876:	468b      	mov	fp, r1
 8010878:	e78d      	b.n	8010796 <_strtod_l+0xab6>
 801087a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801087e:	e7db      	b.n	8010838 <_strtod_l+0xb58>
 8010880:	a311      	add	r3, pc, #68	; (adr r3, 80108c8 <_strtod_l+0xbe8>)
 8010882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010886:	f7f0 f939 	bl	8000afc <__aeabi_dcmplt>
 801088a:	e7b2      	b.n	80107f2 <_strtod_l+0xb12>
 801088c:	2300      	movs	r3, #0
 801088e:	930a      	str	r3, [sp, #40]	; 0x28
 8010890:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010892:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010894:	6013      	str	r3, [r2, #0]
 8010896:	f7ff ba6b 	b.w	800fd70 <_strtod_l+0x90>
 801089a:	2a65      	cmp	r2, #101	; 0x65
 801089c:	f43f ab5f 	beq.w	800ff5e <_strtod_l+0x27e>
 80108a0:	2a45      	cmp	r2, #69	; 0x45
 80108a2:	f43f ab5c 	beq.w	800ff5e <_strtod_l+0x27e>
 80108a6:	2301      	movs	r3, #1
 80108a8:	f7ff bb94 	b.w	800ffd4 <_strtod_l+0x2f4>
 80108ac:	f3af 8000 	nop.w
 80108b0:	94a03595 	.word	0x94a03595
 80108b4:	3fdfffff 	.word	0x3fdfffff
 80108b8:	35afe535 	.word	0x35afe535
 80108bc:	3fe00000 	.word	0x3fe00000
 80108c0:	ffc00000 	.word	0xffc00000
 80108c4:	41dfffff 	.word	0x41dfffff
 80108c8:	94a03595 	.word	0x94a03595
 80108cc:	3fcfffff 	.word	0x3fcfffff
 80108d0:	3ff00000 	.word	0x3ff00000
 80108d4:	7ff00000 	.word	0x7ff00000
 80108d8:	7fe00000 	.word	0x7fe00000
 80108dc:	7c9fffff 	.word	0x7c9fffff
 80108e0:	3fe00000 	.word	0x3fe00000
 80108e4:	bff00000 	.word	0xbff00000
 80108e8:	7fefffff 	.word	0x7fefffff

080108ec <_strtod_r>:
 80108ec:	4b01      	ldr	r3, [pc, #4]	; (80108f4 <_strtod_r+0x8>)
 80108ee:	f7ff b9f7 	b.w	800fce0 <_strtod_l>
 80108f2:	bf00      	nop
 80108f4:	20000078 	.word	0x20000078

080108f8 <_strtol_l.constprop.0>:
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108fe:	d001      	beq.n	8010904 <_strtol_l.constprop.0+0xc>
 8010900:	2b24      	cmp	r3, #36	; 0x24
 8010902:	d906      	bls.n	8010912 <_strtol_l.constprop.0+0x1a>
 8010904:	f7fe fe2a 	bl	800f55c <__errno>
 8010908:	2316      	movs	r3, #22
 801090a:	6003      	str	r3, [r0, #0]
 801090c:	2000      	movs	r0, #0
 801090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010912:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80109f8 <_strtol_l.constprop.0+0x100>
 8010916:	460d      	mov	r5, r1
 8010918:	462e      	mov	r6, r5
 801091a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801091e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010922:	f017 0708 	ands.w	r7, r7, #8
 8010926:	d1f7      	bne.n	8010918 <_strtol_l.constprop.0+0x20>
 8010928:	2c2d      	cmp	r4, #45	; 0x2d
 801092a:	d132      	bne.n	8010992 <_strtol_l.constprop.0+0x9a>
 801092c:	782c      	ldrb	r4, [r5, #0]
 801092e:	2701      	movs	r7, #1
 8010930:	1cb5      	adds	r5, r6, #2
 8010932:	2b00      	cmp	r3, #0
 8010934:	d05b      	beq.n	80109ee <_strtol_l.constprop.0+0xf6>
 8010936:	2b10      	cmp	r3, #16
 8010938:	d109      	bne.n	801094e <_strtol_l.constprop.0+0x56>
 801093a:	2c30      	cmp	r4, #48	; 0x30
 801093c:	d107      	bne.n	801094e <_strtol_l.constprop.0+0x56>
 801093e:	782c      	ldrb	r4, [r5, #0]
 8010940:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010944:	2c58      	cmp	r4, #88	; 0x58
 8010946:	d14d      	bne.n	80109e4 <_strtol_l.constprop.0+0xec>
 8010948:	786c      	ldrb	r4, [r5, #1]
 801094a:	2310      	movs	r3, #16
 801094c:	3502      	adds	r5, #2
 801094e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010952:	f108 38ff 	add.w	r8, r8, #4294967295
 8010956:	f04f 0c00 	mov.w	ip, #0
 801095a:	fbb8 f9f3 	udiv	r9, r8, r3
 801095e:	4666      	mov	r6, ip
 8010960:	fb03 8a19 	mls	sl, r3, r9, r8
 8010964:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010968:	f1be 0f09 	cmp.w	lr, #9
 801096c:	d816      	bhi.n	801099c <_strtol_l.constprop.0+0xa4>
 801096e:	4674      	mov	r4, lr
 8010970:	42a3      	cmp	r3, r4
 8010972:	dd24      	ble.n	80109be <_strtol_l.constprop.0+0xc6>
 8010974:	f1bc 0f00 	cmp.w	ip, #0
 8010978:	db1e      	blt.n	80109b8 <_strtol_l.constprop.0+0xc0>
 801097a:	45b1      	cmp	r9, r6
 801097c:	d31c      	bcc.n	80109b8 <_strtol_l.constprop.0+0xc0>
 801097e:	d101      	bne.n	8010984 <_strtol_l.constprop.0+0x8c>
 8010980:	45a2      	cmp	sl, r4
 8010982:	db19      	blt.n	80109b8 <_strtol_l.constprop.0+0xc0>
 8010984:	fb06 4603 	mla	r6, r6, r3, r4
 8010988:	f04f 0c01 	mov.w	ip, #1
 801098c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010990:	e7e8      	b.n	8010964 <_strtol_l.constprop.0+0x6c>
 8010992:	2c2b      	cmp	r4, #43	; 0x2b
 8010994:	bf04      	itt	eq
 8010996:	782c      	ldrbeq	r4, [r5, #0]
 8010998:	1cb5      	addeq	r5, r6, #2
 801099a:	e7ca      	b.n	8010932 <_strtol_l.constprop.0+0x3a>
 801099c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80109a0:	f1be 0f19 	cmp.w	lr, #25
 80109a4:	d801      	bhi.n	80109aa <_strtol_l.constprop.0+0xb2>
 80109a6:	3c37      	subs	r4, #55	; 0x37
 80109a8:	e7e2      	b.n	8010970 <_strtol_l.constprop.0+0x78>
 80109aa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80109ae:	f1be 0f19 	cmp.w	lr, #25
 80109b2:	d804      	bhi.n	80109be <_strtol_l.constprop.0+0xc6>
 80109b4:	3c57      	subs	r4, #87	; 0x57
 80109b6:	e7db      	b.n	8010970 <_strtol_l.constprop.0+0x78>
 80109b8:	f04f 3cff 	mov.w	ip, #4294967295
 80109bc:	e7e6      	b.n	801098c <_strtol_l.constprop.0+0x94>
 80109be:	f1bc 0f00 	cmp.w	ip, #0
 80109c2:	da05      	bge.n	80109d0 <_strtol_l.constprop.0+0xd8>
 80109c4:	2322      	movs	r3, #34	; 0x22
 80109c6:	6003      	str	r3, [r0, #0]
 80109c8:	4646      	mov	r6, r8
 80109ca:	b942      	cbnz	r2, 80109de <_strtol_l.constprop.0+0xe6>
 80109cc:	4630      	mov	r0, r6
 80109ce:	e79e      	b.n	801090e <_strtol_l.constprop.0+0x16>
 80109d0:	b107      	cbz	r7, 80109d4 <_strtol_l.constprop.0+0xdc>
 80109d2:	4276      	negs	r6, r6
 80109d4:	2a00      	cmp	r2, #0
 80109d6:	d0f9      	beq.n	80109cc <_strtol_l.constprop.0+0xd4>
 80109d8:	f1bc 0f00 	cmp.w	ip, #0
 80109dc:	d000      	beq.n	80109e0 <_strtol_l.constprop.0+0xe8>
 80109de:	1e69      	subs	r1, r5, #1
 80109e0:	6011      	str	r1, [r2, #0]
 80109e2:	e7f3      	b.n	80109cc <_strtol_l.constprop.0+0xd4>
 80109e4:	2430      	movs	r4, #48	; 0x30
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1b1      	bne.n	801094e <_strtol_l.constprop.0+0x56>
 80109ea:	2308      	movs	r3, #8
 80109ec:	e7af      	b.n	801094e <_strtol_l.constprop.0+0x56>
 80109ee:	2c30      	cmp	r4, #48	; 0x30
 80109f0:	d0a5      	beq.n	801093e <_strtol_l.constprop.0+0x46>
 80109f2:	230a      	movs	r3, #10
 80109f4:	e7ab      	b.n	801094e <_strtol_l.constprop.0+0x56>
 80109f6:	bf00      	nop
 80109f8:	08013981 	.word	0x08013981

080109fc <_strtol_r>:
 80109fc:	f7ff bf7c 	b.w	80108f8 <_strtol_l.constprop.0>

08010a00 <__swbuf_r>:
 8010a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a02:	460e      	mov	r6, r1
 8010a04:	4614      	mov	r4, r2
 8010a06:	4605      	mov	r5, r0
 8010a08:	b118      	cbz	r0, 8010a12 <__swbuf_r+0x12>
 8010a0a:	6983      	ldr	r3, [r0, #24]
 8010a0c:	b90b      	cbnz	r3, 8010a12 <__swbuf_r+0x12>
 8010a0e:	f000 f9f3 	bl	8010df8 <__sinit>
 8010a12:	4b21      	ldr	r3, [pc, #132]	; (8010a98 <__swbuf_r+0x98>)
 8010a14:	429c      	cmp	r4, r3
 8010a16:	d12b      	bne.n	8010a70 <__swbuf_r+0x70>
 8010a18:	686c      	ldr	r4, [r5, #4]
 8010a1a:	69a3      	ldr	r3, [r4, #24]
 8010a1c:	60a3      	str	r3, [r4, #8]
 8010a1e:	89a3      	ldrh	r3, [r4, #12]
 8010a20:	071a      	lsls	r2, r3, #28
 8010a22:	d52f      	bpl.n	8010a84 <__swbuf_r+0x84>
 8010a24:	6923      	ldr	r3, [r4, #16]
 8010a26:	b36b      	cbz	r3, 8010a84 <__swbuf_r+0x84>
 8010a28:	6923      	ldr	r3, [r4, #16]
 8010a2a:	6820      	ldr	r0, [r4, #0]
 8010a2c:	1ac0      	subs	r0, r0, r3
 8010a2e:	6963      	ldr	r3, [r4, #20]
 8010a30:	b2f6      	uxtb	r6, r6
 8010a32:	4283      	cmp	r3, r0
 8010a34:	4637      	mov	r7, r6
 8010a36:	dc04      	bgt.n	8010a42 <__swbuf_r+0x42>
 8010a38:	4621      	mov	r1, r4
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f000 f948 	bl	8010cd0 <_fflush_r>
 8010a40:	bb30      	cbnz	r0, 8010a90 <__swbuf_r+0x90>
 8010a42:	68a3      	ldr	r3, [r4, #8]
 8010a44:	3b01      	subs	r3, #1
 8010a46:	60a3      	str	r3, [r4, #8]
 8010a48:	6823      	ldr	r3, [r4, #0]
 8010a4a:	1c5a      	adds	r2, r3, #1
 8010a4c:	6022      	str	r2, [r4, #0]
 8010a4e:	701e      	strb	r6, [r3, #0]
 8010a50:	6963      	ldr	r3, [r4, #20]
 8010a52:	3001      	adds	r0, #1
 8010a54:	4283      	cmp	r3, r0
 8010a56:	d004      	beq.n	8010a62 <__swbuf_r+0x62>
 8010a58:	89a3      	ldrh	r3, [r4, #12]
 8010a5a:	07db      	lsls	r3, r3, #31
 8010a5c:	d506      	bpl.n	8010a6c <__swbuf_r+0x6c>
 8010a5e:	2e0a      	cmp	r6, #10
 8010a60:	d104      	bne.n	8010a6c <__swbuf_r+0x6c>
 8010a62:	4621      	mov	r1, r4
 8010a64:	4628      	mov	r0, r5
 8010a66:	f000 f933 	bl	8010cd0 <_fflush_r>
 8010a6a:	b988      	cbnz	r0, 8010a90 <__swbuf_r+0x90>
 8010a6c:	4638      	mov	r0, r7
 8010a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a70:	4b0a      	ldr	r3, [pc, #40]	; (8010a9c <__swbuf_r+0x9c>)
 8010a72:	429c      	cmp	r4, r3
 8010a74:	d101      	bne.n	8010a7a <__swbuf_r+0x7a>
 8010a76:	68ac      	ldr	r4, [r5, #8]
 8010a78:	e7cf      	b.n	8010a1a <__swbuf_r+0x1a>
 8010a7a:	4b09      	ldr	r3, [pc, #36]	; (8010aa0 <__swbuf_r+0xa0>)
 8010a7c:	429c      	cmp	r4, r3
 8010a7e:	bf08      	it	eq
 8010a80:	68ec      	ldreq	r4, [r5, #12]
 8010a82:	e7ca      	b.n	8010a1a <__swbuf_r+0x1a>
 8010a84:	4621      	mov	r1, r4
 8010a86:	4628      	mov	r0, r5
 8010a88:	f000 f81e 	bl	8010ac8 <__swsetup_r>
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d0cb      	beq.n	8010a28 <__swbuf_r+0x28>
 8010a90:	f04f 37ff 	mov.w	r7, #4294967295
 8010a94:	e7ea      	b.n	8010a6c <__swbuf_r+0x6c>
 8010a96:	bf00      	nop
 8010a98:	08013aa4 	.word	0x08013aa4
 8010a9c:	08013ac4 	.word	0x08013ac4
 8010aa0:	08013a84 	.word	0x08013a84

08010aa4 <_write_r>:
 8010aa4:	b538      	push	{r3, r4, r5, lr}
 8010aa6:	4d07      	ldr	r5, [pc, #28]	; (8010ac4 <_write_r+0x20>)
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	4608      	mov	r0, r1
 8010aac:	4611      	mov	r1, r2
 8010aae:	2200      	movs	r2, #0
 8010ab0:	602a      	str	r2, [r5, #0]
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	f7f3 fc59 	bl	800436a <_write>
 8010ab8:	1c43      	adds	r3, r0, #1
 8010aba:	d102      	bne.n	8010ac2 <_write_r+0x1e>
 8010abc:	682b      	ldr	r3, [r5, #0]
 8010abe:	b103      	cbz	r3, 8010ac2 <_write_r+0x1e>
 8010ac0:	6023      	str	r3, [r4, #0]
 8010ac2:	bd38      	pop	{r3, r4, r5, pc}
 8010ac4:	200027ac 	.word	0x200027ac

08010ac8 <__swsetup_r>:
 8010ac8:	4b32      	ldr	r3, [pc, #200]	; (8010b94 <__swsetup_r+0xcc>)
 8010aca:	b570      	push	{r4, r5, r6, lr}
 8010acc:	681d      	ldr	r5, [r3, #0]
 8010ace:	4606      	mov	r6, r0
 8010ad0:	460c      	mov	r4, r1
 8010ad2:	b125      	cbz	r5, 8010ade <__swsetup_r+0x16>
 8010ad4:	69ab      	ldr	r3, [r5, #24]
 8010ad6:	b913      	cbnz	r3, 8010ade <__swsetup_r+0x16>
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f000 f98d 	bl	8010df8 <__sinit>
 8010ade:	4b2e      	ldr	r3, [pc, #184]	; (8010b98 <__swsetup_r+0xd0>)
 8010ae0:	429c      	cmp	r4, r3
 8010ae2:	d10f      	bne.n	8010b04 <__swsetup_r+0x3c>
 8010ae4:	686c      	ldr	r4, [r5, #4]
 8010ae6:	89a3      	ldrh	r3, [r4, #12]
 8010ae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010aec:	0719      	lsls	r1, r3, #28
 8010aee:	d42c      	bmi.n	8010b4a <__swsetup_r+0x82>
 8010af0:	06dd      	lsls	r5, r3, #27
 8010af2:	d411      	bmi.n	8010b18 <__swsetup_r+0x50>
 8010af4:	2309      	movs	r3, #9
 8010af6:	6033      	str	r3, [r6, #0]
 8010af8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010afc:	81a3      	strh	r3, [r4, #12]
 8010afe:	f04f 30ff 	mov.w	r0, #4294967295
 8010b02:	e03e      	b.n	8010b82 <__swsetup_r+0xba>
 8010b04:	4b25      	ldr	r3, [pc, #148]	; (8010b9c <__swsetup_r+0xd4>)
 8010b06:	429c      	cmp	r4, r3
 8010b08:	d101      	bne.n	8010b0e <__swsetup_r+0x46>
 8010b0a:	68ac      	ldr	r4, [r5, #8]
 8010b0c:	e7eb      	b.n	8010ae6 <__swsetup_r+0x1e>
 8010b0e:	4b24      	ldr	r3, [pc, #144]	; (8010ba0 <__swsetup_r+0xd8>)
 8010b10:	429c      	cmp	r4, r3
 8010b12:	bf08      	it	eq
 8010b14:	68ec      	ldreq	r4, [r5, #12]
 8010b16:	e7e6      	b.n	8010ae6 <__swsetup_r+0x1e>
 8010b18:	0758      	lsls	r0, r3, #29
 8010b1a:	d512      	bpl.n	8010b42 <__swsetup_r+0x7a>
 8010b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b1e:	b141      	cbz	r1, 8010b32 <__swsetup_r+0x6a>
 8010b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b24:	4299      	cmp	r1, r3
 8010b26:	d002      	beq.n	8010b2e <__swsetup_r+0x66>
 8010b28:	4630      	mov	r0, r6
 8010b2a:	f001 fad7 	bl	80120dc <_free_r>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	6363      	str	r3, [r4, #52]	; 0x34
 8010b32:	89a3      	ldrh	r3, [r4, #12]
 8010b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b38:	81a3      	strh	r3, [r4, #12]
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	6063      	str	r3, [r4, #4]
 8010b3e:	6923      	ldr	r3, [r4, #16]
 8010b40:	6023      	str	r3, [r4, #0]
 8010b42:	89a3      	ldrh	r3, [r4, #12]
 8010b44:	f043 0308 	orr.w	r3, r3, #8
 8010b48:	81a3      	strh	r3, [r4, #12]
 8010b4a:	6923      	ldr	r3, [r4, #16]
 8010b4c:	b94b      	cbnz	r3, 8010b62 <__swsetup_r+0x9a>
 8010b4e:	89a3      	ldrh	r3, [r4, #12]
 8010b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b58:	d003      	beq.n	8010b62 <__swsetup_r+0x9a>
 8010b5a:	4621      	mov	r1, r4
 8010b5c:	4630      	mov	r0, r6
 8010b5e:	f000 fd93 	bl	8011688 <__smakebuf_r>
 8010b62:	89a0      	ldrh	r0, [r4, #12]
 8010b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b68:	f010 0301 	ands.w	r3, r0, #1
 8010b6c:	d00a      	beq.n	8010b84 <__swsetup_r+0xbc>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	60a3      	str	r3, [r4, #8]
 8010b72:	6963      	ldr	r3, [r4, #20]
 8010b74:	425b      	negs	r3, r3
 8010b76:	61a3      	str	r3, [r4, #24]
 8010b78:	6923      	ldr	r3, [r4, #16]
 8010b7a:	b943      	cbnz	r3, 8010b8e <__swsetup_r+0xc6>
 8010b7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010b80:	d1ba      	bne.n	8010af8 <__swsetup_r+0x30>
 8010b82:	bd70      	pop	{r4, r5, r6, pc}
 8010b84:	0781      	lsls	r1, r0, #30
 8010b86:	bf58      	it	pl
 8010b88:	6963      	ldrpl	r3, [r4, #20]
 8010b8a:	60a3      	str	r3, [r4, #8]
 8010b8c:	e7f4      	b.n	8010b78 <__swsetup_r+0xb0>
 8010b8e:	2000      	movs	r0, #0
 8010b90:	e7f7      	b.n	8010b82 <__swsetup_r+0xba>
 8010b92:	bf00      	nop
 8010b94:	20000010 	.word	0x20000010
 8010b98:	08013aa4 	.word	0x08013aa4
 8010b9c:	08013ac4 	.word	0x08013ac4
 8010ba0:	08013a84 	.word	0x08013a84

08010ba4 <_close_r>:
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	4d06      	ldr	r5, [pc, #24]	; (8010bc0 <_close_r+0x1c>)
 8010ba8:	2300      	movs	r3, #0
 8010baa:	4604      	mov	r4, r0
 8010bac:	4608      	mov	r0, r1
 8010bae:	602b      	str	r3, [r5, #0]
 8010bb0:	f7f3 fbf7 	bl	80043a2 <_close>
 8010bb4:	1c43      	adds	r3, r0, #1
 8010bb6:	d102      	bne.n	8010bbe <_close_r+0x1a>
 8010bb8:	682b      	ldr	r3, [r5, #0]
 8010bba:	b103      	cbz	r3, 8010bbe <_close_r+0x1a>
 8010bbc:	6023      	str	r3, [r4, #0]
 8010bbe:	bd38      	pop	{r3, r4, r5, pc}
 8010bc0:	200027ac 	.word	0x200027ac

08010bc4 <__sflush_r>:
 8010bc4:	898a      	ldrh	r2, [r1, #12]
 8010bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bca:	4605      	mov	r5, r0
 8010bcc:	0710      	lsls	r0, r2, #28
 8010bce:	460c      	mov	r4, r1
 8010bd0:	d458      	bmi.n	8010c84 <__sflush_r+0xc0>
 8010bd2:	684b      	ldr	r3, [r1, #4]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	dc05      	bgt.n	8010be4 <__sflush_r+0x20>
 8010bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	dc02      	bgt.n	8010be4 <__sflush_r+0x20>
 8010bde:	2000      	movs	r0, #0
 8010be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010be6:	2e00      	cmp	r6, #0
 8010be8:	d0f9      	beq.n	8010bde <__sflush_r+0x1a>
 8010bea:	2300      	movs	r3, #0
 8010bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010bf0:	682f      	ldr	r7, [r5, #0]
 8010bf2:	602b      	str	r3, [r5, #0]
 8010bf4:	d032      	beq.n	8010c5c <__sflush_r+0x98>
 8010bf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010bf8:	89a3      	ldrh	r3, [r4, #12]
 8010bfa:	075a      	lsls	r2, r3, #29
 8010bfc:	d505      	bpl.n	8010c0a <__sflush_r+0x46>
 8010bfe:	6863      	ldr	r3, [r4, #4]
 8010c00:	1ac0      	subs	r0, r0, r3
 8010c02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c04:	b10b      	cbz	r3, 8010c0a <__sflush_r+0x46>
 8010c06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c08:	1ac0      	subs	r0, r0, r3
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	4602      	mov	r2, r0
 8010c0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c10:	6a21      	ldr	r1, [r4, #32]
 8010c12:	4628      	mov	r0, r5
 8010c14:	47b0      	blx	r6
 8010c16:	1c43      	adds	r3, r0, #1
 8010c18:	89a3      	ldrh	r3, [r4, #12]
 8010c1a:	d106      	bne.n	8010c2a <__sflush_r+0x66>
 8010c1c:	6829      	ldr	r1, [r5, #0]
 8010c1e:	291d      	cmp	r1, #29
 8010c20:	d82c      	bhi.n	8010c7c <__sflush_r+0xb8>
 8010c22:	4a2a      	ldr	r2, [pc, #168]	; (8010ccc <__sflush_r+0x108>)
 8010c24:	40ca      	lsrs	r2, r1
 8010c26:	07d6      	lsls	r6, r2, #31
 8010c28:	d528      	bpl.n	8010c7c <__sflush_r+0xb8>
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	6062      	str	r2, [r4, #4]
 8010c2e:	04d9      	lsls	r1, r3, #19
 8010c30:	6922      	ldr	r2, [r4, #16]
 8010c32:	6022      	str	r2, [r4, #0]
 8010c34:	d504      	bpl.n	8010c40 <__sflush_r+0x7c>
 8010c36:	1c42      	adds	r2, r0, #1
 8010c38:	d101      	bne.n	8010c3e <__sflush_r+0x7a>
 8010c3a:	682b      	ldr	r3, [r5, #0]
 8010c3c:	b903      	cbnz	r3, 8010c40 <__sflush_r+0x7c>
 8010c3e:	6560      	str	r0, [r4, #84]	; 0x54
 8010c40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c42:	602f      	str	r7, [r5, #0]
 8010c44:	2900      	cmp	r1, #0
 8010c46:	d0ca      	beq.n	8010bde <__sflush_r+0x1a>
 8010c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c4c:	4299      	cmp	r1, r3
 8010c4e:	d002      	beq.n	8010c56 <__sflush_r+0x92>
 8010c50:	4628      	mov	r0, r5
 8010c52:	f001 fa43 	bl	80120dc <_free_r>
 8010c56:	2000      	movs	r0, #0
 8010c58:	6360      	str	r0, [r4, #52]	; 0x34
 8010c5a:	e7c1      	b.n	8010be0 <__sflush_r+0x1c>
 8010c5c:	6a21      	ldr	r1, [r4, #32]
 8010c5e:	2301      	movs	r3, #1
 8010c60:	4628      	mov	r0, r5
 8010c62:	47b0      	blx	r6
 8010c64:	1c41      	adds	r1, r0, #1
 8010c66:	d1c7      	bne.n	8010bf8 <__sflush_r+0x34>
 8010c68:	682b      	ldr	r3, [r5, #0]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d0c4      	beq.n	8010bf8 <__sflush_r+0x34>
 8010c6e:	2b1d      	cmp	r3, #29
 8010c70:	d001      	beq.n	8010c76 <__sflush_r+0xb2>
 8010c72:	2b16      	cmp	r3, #22
 8010c74:	d101      	bne.n	8010c7a <__sflush_r+0xb6>
 8010c76:	602f      	str	r7, [r5, #0]
 8010c78:	e7b1      	b.n	8010bde <__sflush_r+0x1a>
 8010c7a:	89a3      	ldrh	r3, [r4, #12]
 8010c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c80:	81a3      	strh	r3, [r4, #12]
 8010c82:	e7ad      	b.n	8010be0 <__sflush_r+0x1c>
 8010c84:	690f      	ldr	r7, [r1, #16]
 8010c86:	2f00      	cmp	r7, #0
 8010c88:	d0a9      	beq.n	8010bde <__sflush_r+0x1a>
 8010c8a:	0793      	lsls	r3, r2, #30
 8010c8c:	680e      	ldr	r6, [r1, #0]
 8010c8e:	bf08      	it	eq
 8010c90:	694b      	ldreq	r3, [r1, #20]
 8010c92:	600f      	str	r7, [r1, #0]
 8010c94:	bf18      	it	ne
 8010c96:	2300      	movne	r3, #0
 8010c98:	eba6 0807 	sub.w	r8, r6, r7
 8010c9c:	608b      	str	r3, [r1, #8]
 8010c9e:	f1b8 0f00 	cmp.w	r8, #0
 8010ca2:	dd9c      	ble.n	8010bde <__sflush_r+0x1a>
 8010ca4:	6a21      	ldr	r1, [r4, #32]
 8010ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ca8:	4643      	mov	r3, r8
 8010caa:	463a      	mov	r2, r7
 8010cac:	4628      	mov	r0, r5
 8010cae:	47b0      	blx	r6
 8010cb0:	2800      	cmp	r0, #0
 8010cb2:	dc06      	bgt.n	8010cc2 <__sflush_r+0xfe>
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cba:	81a3      	strh	r3, [r4, #12]
 8010cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010cc0:	e78e      	b.n	8010be0 <__sflush_r+0x1c>
 8010cc2:	4407      	add	r7, r0
 8010cc4:	eba8 0800 	sub.w	r8, r8, r0
 8010cc8:	e7e9      	b.n	8010c9e <__sflush_r+0xda>
 8010cca:	bf00      	nop
 8010ccc:	20400001 	.word	0x20400001

08010cd0 <_fflush_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	690b      	ldr	r3, [r1, #16]
 8010cd4:	4605      	mov	r5, r0
 8010cd6:	460c      	mov	r4, r1
 8010cd8:	b913      	cbnz	r3, 8010ce0 <_fflush_r+0x10>
 8010cda:	2500      	movs	r5, #0
 8010cdc:	4628      	mov	r0, r5
 8010cde:	bd38      	pop	{r3, r4, r5, pc}
 8010ce0:	b118      	cbz	r0, 8010cea <_fflush_r+0x1a>
 8010ce2:	6983      	ldr	r3, [r0, #24]
 8010ce4:	b90b      	cbnz	r3, 8010cea <_fflush_r+0x1a>
 8010ce6:	f000 f887 	bl	8010df8 <__sinit>
 8010cea:	4b14      	ldr	r3, [pc, #80]	; (8010d3c <_fflush_r+0x6c>)
 8010cec:	429c      	cmp	r4, r3
 8010cee:	d11b      	bne.n	8010d28 <_fflush_r+0x58>
 8010cf0:	686c      	ldr	r4, [r5, #4]
 8010cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d0ef      	beq.n	8010cda <_fflush_r+0xa>
 8010cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010cfc:	07d0      	lsls	r0, r2, #31
 8010cfe:	d404      	bmi.n	8010d0a <_fflush_r+0x3a>
 8010d00:	0599      	lsls	r1, r3, #22
 8010d02:	d402      	bmi.n	8010d0a <_fflush_r+0x3a>
 8010d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d06:	f000 fc84 	bl	8011612 <__retarget_lock_acquire_recursive>
 8010d0a:	4628      	mov	r0, r5
 8010d0c:	4621      	mov	r1, r4
 8010d0e:	f7ff ff59 	bl	8010bc4 <__sflush_r>
 8010d12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d14:	07da      	lsls	r2, r3, #31
 8010d16:	4605      	mov	r5, r0
 8010d18:	d4e0      	bmi.n	8010cdc <_fflush_r+0xc>
 8010d1a:	89a3      	ldrh	r3, [r4, #12]
 8010d1c:	059b      	lsls	r3, r3, #22
 8010d1e:	d4dd      	bmi.n	8010cdc <_fflush_r+0xc>
 8010d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d22:	f000 fc77 	bl	8011614 <__retarget_lock_release_recursive>
 8010d26:	e7d9      	b.n	8010cdc <_fflush_r+0xc>
 8010d28:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <_fflush_r+0x70>)
 8010d2a:	429c      	cmp	r4, r3
 8010d2c:	d101      	bne.n	8010d32 <_fflush_r+0x62>
 8010d2e:	68ac      	ldr	r4, [r5, #8]
 8010d30:	e7df      	b.n	8010cf2 <_fflush_r+0x22>
 8010d32:	4b04      	ldr	r3, [pc, #16]	; (8010d44 <_fflush_r+0x74>)
 8010d34:	429c      	cmp	r4, r3
 8010d36:	bf08      	it	eq
 8010d38:	68ec      	ldreq	r4, [r5, #12]
 8010d3a:	e7da      	b.n	8010cf2 <_fflush_r+0x22>
 8010d3c:	08013aa4 	.word	0x08013aa4
 8010d40:	08013ac4 	.word	0x08013ac4
 8010d44:	08013a84 	.word	0x08013a84

08010d48 <std>:
 8010d48:	2300      	movs	r3, #0
 8010d4a:	b510      	push	{r4, lr}
 8010d4c:	4604      	mov	r4, r0
 8010d4e:	e9c0 3300 	strd	r3, r3, [r0]
 8010d52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d56:	6083      	str	r3, [r0, #8]
 8010d58:	8181      	strh	r1, [r0, #12]
 8010d5a:	6643      	str	r3, [r0, #100]	; 0x64
 8010d5c:	81c2      	strh	r2, [r0, #14]
 8010d5e:	6183      	str	r3, [r0, #24]
 8010d60:	4619      	mov	r1, r3
 8010d62:	2208      	movs	r2, #8
 8010d64:	305c      	adds	r0, #92	; 0x5c
 8010d66:	f7fe fc31 	bl	800f5cc <memset>
 8010d6a:	4b05      	ldr	r3, [pc, #20]	; (8010d80 <std+0x38>)
 8010d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d6e:	4b05      	ldr	r3, [pc, #20]	; (8010d84 <std+0x3c>)
 8010d70:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d72:	4b05      	ldr	r3, [pc, #20]	; (8010d88 <std+0x40>)
 8010d74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d76:	4b05      	ldr	r3, [pc, #20]	; (8010d8c <std+0x44>)
 8010d78:	6224      	str	r4, [r4, #32]
 8010d7a:	6323      	str	r3, [r4, #48]	; 0x30
 8010d7c:	bd10      	pop	{r4, pc}
 8010d7e:	bf00      	nop
 8010d80:	0800fbf5 	.word	0x0800fbf5
 8010d84:	0800fc1b 	.word	0x0800fc1b
 8010d88:	0800fc53 	.word	0x0800fc53
 8010d8c:	0800fc77 	.word	0x0800fc77

08010d90 <_cleanup_r>:
 8010d90:	4901      	ldr	r1, [pc, #4]	; (8010d98 <_cleanup_r+0x8>)
 8010d92:	f000 b8af 	b.w	8010ef4 <_fwalk_reent>
 8010d96:	bf00      	nop
 8010d98:	08010cd1 	.word	0x08010cd1

08010d9c <__sfmoreglue>:
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	2268      	movs	r2, #104	; 0x68
 8010da0:	1e4d      	subs	r5, r1, #1
 8010da2:	4355      	muls	r5, r2
 8010da4:	460e      	mov	r6, r1
 8010da6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010daa:	f001 fa03 	bl	80121b4 <_malloc_r>
 8010dae:	4604      	mov	r4, r0
 8010db0:	b140      	cbz	r0, 8010dc4 <__sfmoreglue+0x28>
 8010db2:	2100      	movs	r1, #0
 8010db4:	e9c0 1600 	strd	r1, r6, [r0]
 8010db8:	300c      	adds	r0, #12
 8010dba:	60a0      	str	r0, [r4, #8]
 8010dbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010dc0:	f7fe fc04 	bl	800f5cc <memset>
 8010dc4:	4620      	mov	r0, r4
 8010dc6:	bd70      	pop	{r4, r5, r6, pc}

08010dc8 <__sfp_lock_acquire>:
 8010dc8:	4801      	ldr	r0, [pc, #4]	; (8010dd0 <__sfp_lock_acquire+0x8>)
 8010dca:	f000 bc22 	b.w	8011612 <__retarget_lock_acquire_recursive>
 8010dce:	bf00      	nop
 8010dd0:	200027a1 	.word	0x200027a1

08010dd4 <__sfp_lock_release>:
 8010dd4:	4801      	ldr	r0, [pc, #4]	; (8010ddc <__sfp_lock_release+0x8>)
 8010dd6:	f000 bc1d 	b.w	8011614 <__retarget_lock_release_recursive>
 8010dda:	bf00      	nop
 8010ddc:	200027a1 	.word	0x200027a1

08010de0 <__sinit_lock_acquire>:
 8010de0:	4801      	ldr	r0, [pc, #4]	; (8010de8 <__sinit_lock_acquire+0x8>)
 8010de2:	f000 bc16 	b.w	8011612 <__retarget_lock_acquire_recursive>
 8010de6:	bf00      	nop
 8010de8:	200027a2 	.word	0x200027a2

08010dec <__sinit_lock_release>:
 8010dec:	4801      	ldr	r0, [pc, #4]	; (8010df4 <__sinit_lock_release+0x8>)
 8010dee:	f000 bc11 	b.w	8011614 <__retarget_lock_release_recursive>
 8010df2:	bf00      	nop
 8010df4:	200027a2 	.word	0x200027a2

08010df8 <__sinit>:
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	4604      	mov	r4, r0
 8010dfc:	f7ff fff0 	bl	8010de0 <__sinit_lock_acquire>
 8010e00:	69a3      	ldr	r3, [r4, #24]
 8010e02:	b11b      	cbz	r3, 8010e0c <__sinit+0x14>
 8010e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e08:	f7ff bff0 	b.w	8010dec <__sinit_lock_release>
 8010e0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010e10:	6523      	str	r3, [r4, #80]	; 0x50
 8010e12:	4b13      	ldr	r3, [pc, #76]	; (8010e60 <__sinit+0x68>)
 8010e14:	4a13      	ldr	r2, [pc, #76]	; (8010e64 <__sinit+0x6c>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	62a2      	str	r2, [r4, #40]	; 0x28
 8010e1a:	42a3      	cmp	r3, r4
 8010e1c:	bf04      	itt	eq
 8010e1e:	2301      	moveq	r3, #1
 8010e20:	61a3      	streq	r3, [r4, #24]
 8010e22:	4620      	mov	r0, r4
 8010e24:	f000 f820 	bl	8010e68 <__sfp>
 8010e28:	6060      	str	r0, [r4, #4]
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f000 f81c 	bl	8010e68 <__sfp>
 8010e30:	60a0      	str	r0, [r4, #8]
 8010e32:	4620      	mov	r0, r4
 8010e34:	f000 f818 	bl	8010e68 <__sfp>
 8010e38:	2200      	movs	r2, #0
 8010e3a:	60e0      	str	r0, [r4, #12]
 8010e3c:	2104      	movs	r1, #4
 8010e3e:	6860      	ldr	r0, [r4, #4]
 8010e40:	f7ff ff82 	bl	8010d48 <std>
 8010e44:	68a0      	ldr	r0, [r4, #8]
 8010e46:	2201      	movs	r2, #1
 8010e48:	2109      	movs	r1, #9
 8010e4a:	f7ff ff7d 	bl	8010d48 <std>
 8010e4e:	68e0      	ldr	r0, [r4, #12]
 8010e50:	2202      	movs	r2, #2
 8010e52:	2112      	movs	r1, #18
 8010e54:	f7ff ff78 	bl	8010d48 <std>
 8010e58:	2301      	movs	r3, #1
 8010e5a:	61a3      	str	r3, [r4, #24]
 8010e5c:	e7d2      	b.n	8010e04 <__sinit+0xc>
 8010e5e:	bf00      	nop
 8010e60:	08013914 	.word	0x08013914
 8010e64:	08010d91 	.word	0x08010d91

08010e68 <__sfp>:
 8010e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6a:	4607      	mov	r7, r0
 8010e6c:	f7ff ffac 	bl	8010dc8 <__sfp_lock_acquire>
 8010e70:	4b1e      	ldr	r3, [pc, #120]	; (8010eec <__sfp+0x84>)
 8010e72:	681e      	ldr	r6, [r3, #0]
 8010e74:	69b3      	ldr	r3, [r6, #24]
 8010e76:	b913      	cbnz	r3, 8010e7e <__sfp+0x16>
 8010e78:	4630      	mov	r0, r6
 8010e7a:	f7ff ffbd 	bl	8010df8 <__sinit>
 8010e7e:	3648      	adds	r6, #72	; 0x48
 8010e80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	d503      	bpl.n	8010e90 <__sfp+0x28>
 8010e88:	6833      	ldr	r3, [r6, #0]
 8010e8a:	b30b      	cbz	r3, 8010ed0 <__sfp+0x68>
 8010e8c:	6836      	ldr	r6, [r6, #0]
 8010e8e:	e7f7      	b.n	8010e80 <__sfp+0x18>
 8010e90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010e94:	b9d5      	cbnz	r5, 8010ecc <__sfp+0x64>
 8010e96:	4b16      	ldr	r3, [pc, #88]	; (8010ef0 <__sfp+0x88>)
 8010e98:	60e3      	str	r3, [r4, #12]
 8010e9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010e9e:	6665      	str	r5, [r4, #100]	; 0x64
 8010ea0:	f000 fbb6 	bl	8011610 <__retarget_lock_init_recursive>
 8010ea4:	f7ff ff96 	bl	8010dd4 <__sfp_lock_release>
 8010ea8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010eac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010eb0:	6025      	str	r5, [r4, #0]
 8010eb2:	61a5      	str	r5, [r4, #24]
 8010eb4:	2208      	movs	r2, #8
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010ebc:	f7fe fb86 	bl	800f5cc <memset>
 8010ec0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ec4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010ec8:	4620      	mov	r0, r4
 8010eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ecc:	3468      	adds	r4, #104	; 0x68
 8010ece:	e7d9      	b.n	8010e84 <__sfp+0x1c>
 8010ed0:	2104      	movs	r1, #4
 8010ed2:	4638      	mov	r0, r7
 8010ed4:	f7ff ff62 	bl	8010d9c <__sfmoreglue>
 8010ed8:	4604      	mov	r4, r0
 8010eda:	6030      	str	r0, [r6, #0]
 8010edc:	2800      	cmp	r0, #0
 8010ede:	d1d5      	bne.n	8010e8c <__sfp+0x24>
 8010ee0:	f7ff ff78 	bl	8010dd4 <__sfp_lock_release>
 8010ee4:	230c      	movs	r3, #12
 8010ee6:	603b      	str	r3, [r7, #0]
 8010ee8:	e7ee      	b.n	8010ec8 <__sfp+0x60>
 8010eea:	bf00      	nop
 8010eec:	08013914 	.word	0x08013914
 8010ef0:	ffff0001 	.word	0xffff0001

08010ef4 <_fwalk_reent>:
 8010ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ef8:	4606      	mov	r6, r0
 8010efa:	4688      	mov	r8, r1
 8010efc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010f00:	2700      	movs	r7, #0
 8010f02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f06:	f1b9 0901 	subs.w	r9, r9, #1
 8010f0a:	d505      	bpl.n	8010f18 <_fwalk_reent+0x24>
 8010f0c:	6824      	ldr	r4, [r4, #0]
 8010f0e:	2c00      	cmp	r4, #0
 8010f10:	d1f7      	bne.n	8010f02 <_fwalk_reent+0xe>
 8010f12:	4638      	mov	r0, r7
 8010f14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f18:	89ab      	ldrh	r3, [r5, #12]
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d907      	bls.n	8010f2e <_fwalk_reent+0x3a>
 8010f1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f22:	3301      	adds	r3, #1
 8010f24:	d003      	beq.n	8010f2e <_fwalk_reent+0x3a>
 8010f26:	4629      	mov	r1, r5
 8010f28:	4630      	mov	r0, r6
 8010f2a:	47c0      	blx	r8
 8010f2c:	4307      	orrs	r7, r0
 8010f2e:	3568      	adds	r5, #104	; 0x68
 8010f30:	e7e9      	b.n	8010f06 <_fwalk_reent+0x12>

08010f32 <rshift>:
 8010f32:	6903      	ldr	r3, [r0, #16]
 8010f34:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f3c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010f40:	f100 0414 	add.w	r4, r0, #20
 8010f44:	dd45      	ble.n	8010fd2 <rshift+0xa0>
 8010f46:	f011 011f 	ands.w	r1, r1, #31
 8010f4a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010f4e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010f52:	d10c      	bne.n	8010f6e <rshift+0x3c>
 8010f54:	f100 0710 	add.w	r7, r0, #16
 8010f58:	4629      	mov	r1, r5
 8010f5a:	42b1      	cmp	r1, r6
 8010f5c:	d334      	bcc.n	8010fc8 <rshift+0x96>
 8010f5e:	1a9b      	subs	r3, r3, r2
 8010f60:	009b      	lsls	r3, r3, #2
 8010f62:	1eea      	subs	r2, r5, #3
 8010f64:	4296      	cmp	r6, r2
 8010f66:	bf38      	it	cc
 8010f68:	2300      	movcc	r3, #0
 8010f6a:	4423      	add	r3, r4
 8010f6c:	e015      	b.n	8010f9a <rshift+0x68>
 8010f6e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010f72:	f1c1 0820 	rsb	r8, r1, #32
 8010f76:	40cf      	lsrs	r7, r1
 8010f78:	f105 0e04 	add.w	lr, r5, #4
 8010f7c:	46a1      	mov	r9, r4
 8010f7e:	4576      	cmp	r6, lr
 8010f80:	46f4      	mov	ip, lr
 8010f82:	d815      	bhi.n	8010fb0 <rshift+0x7e>
 8010f84:	1a9a      	subs	r2, r3, r2
 8010f86:	0092      	lsls	r2, r2, #2
 8010f88:	3a04      	subs	r2, #4
 8010f8a:	3501      	adds	r5, #1
 8010f8c:	42ae      	cmp	r6, r5
 8010f8e:	bf38      	it	cc
 8010f90:	2200      	movcc	r2, #0
 8010f92:	18a3      	adds	r3, r4, r2
 8010f94:	50a7      	str	r7, [r4, r2]
 8010f96:	b107      	cbz	r7, 8010f9a <rshift+0x68>
 8010f98:	3304      	adds	r3, #4
 8010f9a:	1b1a      	subs	r2, r3, r4
 8010f9c:	42a3      	cmp	r3, r4
 8010f9e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010fa2:	bf08      	it	eq
 8010fa4:	2300      	moveq	r3, #0
 8010fa6:	6102      	str	r2, [r0, #16]
 8010fa8:	bf08      	it	eq
 8010faa:	6143      	streq	r3, [r0, #20]
 8010fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fb0:	f8dc c000 	ldr.w	ip, [ip]
 8010fb4:	fa0c fc08 	lsl.w	ip, ip, r8
 8010fb8:	ea4c 0707 	orr.w	r7, ip, r7
 8010fbc:	f849 7b04 	str.w	r7, [r9], #4
 8010fc0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010fc4:	40cf      	lsrs	r7, r1
 8010fc6:	e7da      	b.n	8010f7e <rshift+0x4c>
 8010fc8:	f851 cb04 	ldr.w	ip, [r1], #4
 8010fcc:	f847 cf04 	str.w	ip, [r7, #4]!
 8010fd0:	e7c3      	b.n	8010f5a <rshift+0x28>
 8010fd2:	4623      	mov	r3, r4
 8010fd4:	e7e1      	b.n	8010f9a <rshift+0x68>

08010fd6 <__hexdig_fun>:
 8010fd6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010fda:	2b09      	cmp	r3, #9
 8010fdc:	d802      	bhi.n	8010fe4 <__hexdig_fun+0xe>
 8010fde:	3820      	subs	r0, #32
 8010fe0:	b2c0      	uxtb	r0, r0
 8010fe2:	4770      	bx	lr
 8010fe4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010fe8:	2b05      	cmp	r3, #5
 8010fea:	d801      	bhi.n	8010ff0 <__hexdig_fun+0x1a>
 8010fec:	3847      	subs	r0, #71	; 0x47
 8010fee:	e7f7      	b.n	8010fe0 <__hexdig_fun+0xa>
 8010ff0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010ff4:	2b05      	cmp	r3, #5
 8010ff6:	d801      	bhi.n	8010ffc <__hexdig_fun+0x26>
 8010ff8:	3827      	subs	r0, #39	; 0x27
 8010ffa:	e7f1      	b.n	8010fe0 <__hexdig_fun+0xa>
 8010ffc:	2000      	movs	r0, #0
 8010ffe:	4770      	bx	lr

08011000 <__gethex>:
 8011000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011004:	ed2d 8b02 	vpush	{d8}
 8011008:	b089      	sub	sp, #36	; 0x24
 801100a:	ee08 0a10 	vmov	s16, r0
 801100e:	9304      	str	r3, [sp, #16]
 8011010:	4bb4      	ldr	r3, [pc, #720]	; (80112e4 <__gethex+0x2e4>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	9301      	str	r3, [sp, #4]
 8011016:	4618      	mov	r0, r3
 8011018:	468b      	mov	fp, r1
 801101a:	4690      	mov	r8, r2
 801101c:	f7ef f8e2 	bl	80001e4 <strlen>
 8011020:	9b01      	ldr	r3, [sp, #4]
 8011022:	f8db 2000 	ldr.w	r2, [fp]
 8011026:	4403      	add	r3, r0
 8011028:	4682      	mov	sl, r0
 801102a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801102e:	9305      	str	r3, [sp, #20]
 8011030:	1c93      	adds	r3, r2, #2
 8011032:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011036:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801103a:	32fe      	adds	r2, #254	; 0xfe
 801103c:	18d1      	adds	r1, r2, r3
 801103e:	461f      	mov	r7, r3
 8011040:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011044:	9100      	str	r1, [sp, #0]
 8011046:	2830      	cmp	r0, #48	; 0x30
 8011048:	d0f8      	beq.n	801103c <__gethex+0x3c>
 801104a:	f7ff ffc4 	bl	8010fd6 <__hexdig_fun>
 801104e:	4604      	mov	r4, r0
 8011050:	2800      	cmp	r0, #0
 8011052:	d13a      	bne.n	80110ca <__gethex+0xca>
 8011054:	9901      	ldr	r1, [sp, #4]
 8011056:	4652      	mov	r2, sl
 8011058:	4638      	mov	r0, r7
 801105a:	f7fe fe10 	bl	800fc7e <strncmp>
 801105e:	4605      	mov	r5, r0
 8011060:	2800      	cmp	r0, #0
 8011062:	d168      	bne.n	8011136 <__gethex+0x136>
 8011064:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011068:	eb07 060a 	add.w	r6, r7, sl
 801106c:	f7ff ffb3 	bl	8010fd6 <__hexdig_fun>
 8011070:	2800      	cmp	r0, #0
 8011072:	d062      	beq.n	801113a <__gethex+0x13a>
 8011074:	4633      	mov	r3, r6
 8011076:	7818      	ldrb	r0, [r3, #0]
 8011078:	2830      	cmp	r0, #48	; 0x30
 801107a:	461f      	mov	r7, r3
 801107c:	f103 0301 	add.w	r3, r3, #1
 8011080:	d0f9      	beq.n	8011076 <__gethex+0x76>
 8011082:	f7ff ffa8 	bl	8010fd6 <__hexdig_fun>
 8011086:	2301      	movs	r3, #1
 8011088:	fab0 f480 	clz	r4, r0
 801108c:	0964      	lsrs	r4, r4, #5
 801108e:	4635      	mov	r5, r6
 8011090:	9300      	str	r3, [sp, #0]
 8011092:	463a      	mov	r2, r7
 8011094:	4616      	mov	r6, r2
 8011096:	3201      	adds	r2, #1
 8011098:	7830      	ldrb	r0, [r6, #0]
 801109a:	f7ff ff9c 	bl	8010fd6 <__hexdig_fun>
 801109e:	2800      	cmp	r0, #0
 80110a0:	d1f8      	bne.n	8011094 <__gethex+0x94>
 80110a2:	9901      	ldr	r1, [sp, #4]
 80110a4:	4652      	mov	r2, sl
 80110a6:	4630      	mov	r0, r6
 80110a8:	f7fe fde9 	bl	800fc7e <strncmp>
 80110ac:	b980      	cbnz	r0, 80110d0 <__gethex+0xd0>
 80110ae:	b94d      	cbnz	r5, 80110c4 <__gethex+0xc4>
 80110b0:	eb06 050a 	add.w	r5, r6, sl
 80110b4:	462a      	mov	r2, r5
 80110b6:	4616      	mov	r6, r2
 80110b8:	3201      	adds	r2, #1
 80110ba:	7830      	ldrb	r0, [r6, #0]
 80110bc:	f7ff ff8b 	bl	8010fd6 <__hexdig_fun>
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d1f8      	bne.n	80110b6 <__gethex+0xb6>
 80110c4:	1bad      	subs	r5, r5, r6
 80110c6:	00ad      	lsls	r5, r5, #2
 80110c8:	e004      	b.n	80110d4 <__gethex+0xd4>
 80110ca:	2400      	movs	r4, #0
 80110cc:	4625      	mov	r5, r4
 80110ce:	e7e0      	b.n	8011092 <__gethex+0x92>
 80110d0:	2d00      	cmp	r5, #0
 80110d2:	d1f7      	bne.n	80110c4 <__gethex+0xc4>
 80110d4:	7833      	ldrb	r3, [r6, #0]
 80110d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80110da:	2b50      	cmp	r3, #80	; 0x50
 80110dc:	d13b      	bne.n	8011156 <__gethex+0x156>
 80110de:	7873      	ldrb	r3, [r6, #1]
 80110e0:	2b2b      	cmp	r3, #43	; 0x2b
 80110e2:	d02c      	beq.n	801113e <__gethex+0x13e>
 80110e4:	2b2d      	cmp	r3, #45	; 0x2d
 80110e6:	d02e      	beq.n	8011146 <__gethex+0x146>
 80110e8:	1c71      	adds	r1, r6, #1
 80110ea:	f04f 0900 	mov.w	r9, #0
 80110ee:	7808      	ldrb	r0, [r1, #0]
 80110f0:	f7ff ff71 	bl	8010fd6 <__hexdig_fun>
 80110f4:	1e43      	subs	r3, r0, #1
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	2b18      	cmp	r3, #24
 80110fa:	d82c      	bhi.n	8011156 <__gethex+0x156>
 80110fc:	f1a0 0210 	sub.w	r2, r0, #16
 8011100:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011104:	f7ff ff67 	bl	8010fd6 <__hexdig_fun>
 8011108:	1e43      	subs	r3, r0, #1
 801110a:	b2db      	uxtb	r3, r3
 801110c:	2b18      	cmp	r3, #24
 801110e:	d91d      	bls.n	801114c <__gethex+0x14c>
 8011110:	f1b9 0f00 	cmp.w	r9, #0
 8011114:	d000      	beq.n	8011118 <__gethex+0x118>
 8011116:	4252      	negs	r2, r2
 8011118:	4415      	add	r5, r2
 801111a:	f8cb 1000 	str.w	r1, [fp]
 801111e:	b1e4      	cbz	r4, 801115a <__gethex+0x15a>
 8011120:	9b00      	ldr	r3, [sp, #0]
 8011122:	2b00      	cmp	r3, #0
 8011124:	bf14      	ite	ne
 8011126:	2700      	movne	r7, #0
 8011128:	2706      	moveq	r7, #6
 801112a:	4638      	mov	r0, r7
 801112c:	b009      	add	sp, #36	; 0x24
 801112e:	ecbd 8b02 	vpop	{d8}
 8011132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011136:	463e      	mov	r6, r7
 8011138:	4625      	mov	r5, r4
 801113a:	2401      	movs	r4, #1
 801113c:	e7ca      	b.n	80110d4 <__gethex+0xd4>
 801113e:	f04f 0900 	mov.w	r9, #0
 8011142:	1cb1      	adds	r1, r6, #2
 8011144:	e7d3      	b.n	80110ee <__gethex+0xee>
 8011146:	f04f 0901 	mov.w	r9, #1
 801114a:	e7fa      	b.n	8011142 <__gethex+0x142>
 801114c:	230a      	movs	r3, #10
 801114e:	fb03 0202 	mla	r2, r3, r2, r0
 8011152:	3a10      	subs	r2, #16
 8011154:	e7d4      	b.n	8011100 <__gethex+0x100>
 8011156:	4631      	mov	r1, r6
 8011158:	e7df      	b.n	801111a <__gethex+0x11a>
 801115a:	1bf3      	subs	r3, r6, r7
 801115c:	3b01      	subs	r3, #1
 801115e:	4621      	mov	r1, r4
 8011160:	2b07      	cmp	r3, #7
 8011162:	dc0b      	bgt.n	801117c <__gethex+0x17c>
 8011164:	ee18 0a10 	vmov	r0, s16
 8011168:	f000 fae0 	bl	801172c <_Balloc>
 801116c:	4604      	mov	r4, r0
 801116e:	b940      	cbnz	r0, 8011182 <__gethex+0x182>
 8011170:	4b5d      	ldr	r3, [pc, #372]	; (80112e8 <__gethex+0x2e8>)
 8011172:	4602      	mov	r2, r0
 8011174:	21de      	movs	r1, #222	; 0xde
 8011176:	485d      	ldr	r0, [pc, #372]	; (80112ec <__gethex+0x2ec>)
 8011178:	f001 ffc2 	bl	8013100 <__assert_func>
 801117c:	3101      	adds	r1, #1
 801117e:	105b      	asrs	r3, r3, #1
 8011180:	e7ee      	b.n	8011160 <__gethex+0x160>
 8011182:	f100 0914 	add.w	r9, r0, #20
 8011186:	f04f 0b00 	mov.w	fp, #0
 801118a:	f1ca 0301 	rsb	r3, sl, #1
 801118e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011192:	f8cd b000 	str.w	fp, [sp]
 8011196:	9306      	str	r3, [sp, #24]
 8011198:	42b7      	cmp	r7, r6
 801119a:	d340      	bcc.n	801121e <__gethex+0x21e>
 801119c:	9802      	ldr	r0, [sp, #8]
 801119e:	9b00      	ldr	r3, [sp, #0]
 80111a0:	f840 3b04 	str.w	r3, [r0], #4
 80111a4:	eba0 0009 	sub.w	r0, r0, r9
 80111a8:	1080      	asrs	r0, r0, #2
 80111aa:	0146      	lsls	r6, r0, #5
 80111ac:	6120      	str	r0, [r4, #16]
 80111ae:	4618      	mov	r0, r3
 80111b0:	f000 fbae 	bl	8011910 <__hi0bits>
 80111b4:	1a30      	subs	r0, r6, r0
 80111b6:	f8d8 6000 	ldr.w	r6, [r8]
 80111ba:	42b0      	cmp	r0, r6
 80111bc:	dd63      	ble.n	8011286 <__gethex+0x286>
 80111be:	1b87      	subs	r7, r0, r6
 80111c0:	4639      	mov	r1, r7
 80111c2:	4620      	mov	r0, r4
 80111c4:	f000 ff52 	bl	801206c <__any_on>
 80111c8:	4682      	mov	sl, r0
 80111ca:	b1a8      	cbz	r0, 80111f8 <__gethex+0x1f8>
 80111cc:	1e7b      	subs	r3, r7, #1
 80111ce:	1159      	asrs	r1, r3, #5
 80111d0:	f003 021f 	and.w	r2, r3, #31
 80111d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80111d8:	f04f 0a01 	mov.w	sl, #1
 80111dc:	fa0a f202 	lsl.w	r2, sl, r2
 80111e0:	420a      	tst	r2, r1
 80111e2:	d009      	beq.n	80111f8 <__gethex+0x1f8>
 80111e4:	4553      	cmp	r3, sl
 80111e6:	dd05      	ble.n	80111f4 <__gethex+0x1f4>
 80111e8:	1eb9      	subs	r1, r7, #2
 80111ea:	4620      	mov	r0, r4
 80111ec:	f000 ff3e 	bl	801206c <__any_on>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d145      	bne.n	8011280 <__gethex+0x280>
 80111f4:	f04f 0a02 	mov.w	sl, #2
 80111f8:	4639      	mov	r1, r7
 80111fa:	4620      	mov	r0, r4
 80111fc:	f7ff fe99 	bl	8010f32 <rshift>
 8011200:	443d      	add	r5, r7
 8011202:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011206:	42ab      	cmp	r3, r5
 8011208:	da4c      	bge.n	80112a4 <__gethex+0x2a4>
 801120a:	ee18 0a10 	vmov	r0, s16
 801120e:	4621      	mov	r1, r4
 8011210:	f000 facc 	bl	80117ac <_Bfree>
 8011214:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011216:	2300      	movs	r3, #0
 8011218:	6013      	str	r3, [r2, #0]
 801121a:	27a3      	movs	r7, #163	; 0xa3
 801121c:	e785      	b.n	801112a <__gethex+0x12a>
 801121e:	1e73      	subs	r3, r6, #1
 8011220:	9a05      	ldr	r2, [sp, #20]
 8011222:	9303      	str	r3, [sp, #12]
 8011224:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011228:	4293      	cmp	r3, r2
 801122a:	d019      	beq.n	8011260 <__gethex+0x260>
 801122c:	f1bb 0f20 	cmp.w	fp, #32
 8011230:	d107      	bne.n	8011242 <__gethex+0x242>
 8011232:	9b02      	ldr	r3, [sp, #8]
 8011234:	9a00      	ldr	r2, [sp, #0]
 8011236:	f843 2b04 	str.w	r2, [r3], #4
 801123a:	9302      	str	r3, [sp, #8]
 801123c:	2300      	movs	r3, #0
 801123e:	9300      	str	r3, [sp, #0]
 8011240:	469b      	mov	fp, r3
 8011242:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011246:	f7ff fec6 	bl	8010fd6 <__hexdig_fun>
 801124a:	9b00      	ldr	r3, [sp, #0]
 801124c:	f000 000f 	and.w	r0, r0, #15
 8011250:	fa00 f00b 	lsl.w	r0, r0, fp
 8011254:	4303      	orrs	r3, r0
 8011256:	9300      	str	r3, [sp, #0]
 8011258:	f10b 0b04 	add.w	fp, fp, #4
 801125c:	9b03      	ldr	r3, [sp, #12]
 801125e:	e00d      	b.n	801127c <__gethex+0x27c>
 8011260:	9b03      	ldr	r3, [sp, #12]
 8011262:	9a06      	ldr	r2, [sp, #24]
 8011264:	4413      	add	r3, r2
 8011266:	42bb      	cmp	r3, r7
 8011268:	d3e0      	bcc.n	801122c <__gethex+0x22c>
 801126a:	4618      	mov	r0, r3
 801126c:	9901      	ldr	r1, [sp, #4]
 801126e:	9307      	str	r3, [sp, #28]
 8011270:	4652      	mov	r2, sl
 8011272:	f7fe fd04 	bl	800fc7e <strncmp>
 8011276:	9b07      	ldr	r3, [sp, #28]
 8011278:	2800      	cmp	r0, #0
 801127a:	d1d7      	bne.n	801122c <__gethex+0x22c>
 801127c:	461e      	mov	r6, r3
 801127e:	e78b      	b.n	8011198 <__gethex+0x198>
 8011280:	f04f 0a03 	mov.w	sl, #3
 8011284:	e7b8      	b.n	80111f8 <__gethex+0x1f8>
 8011286:	da0a      	bge.n	801129e <__gethex+0x29e>
 8011288:	1a37      	subs	r7, r6, r0
 801128a:	4621      	mov	r1, r4
 801128c:	ee18 0a10 	vmov	r0, s16
 8011290:	463a      	mov	r2, r7
 8011292:	f000 fca7 	bl	8011be4 <__lshift>
 8011296:	1bed      	subs	r5, r5, r7
 8011298:	4604      	mov	r4, r0
 801129a:	f100 0914 	add.w	r9, r0, #20
 801129e:	f04f 0a00 	mov.w	sl, #0
 80112a2:	e7ae      	b.n	8011202 <__gethex+0x202>
 80112a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80112a8:	42a8      	cmp	r0, r5
 80112aa:	dd72      	ble.n	8011392 <__gethex+0x392>
 80112ac:	1b45      	subs	r5, r0, r5
 80112ae:	42ae      	cmp	r6, r5
 80112b0:	dc36      	bgt.n	8011320 <__gethex+0x320>
 80112b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80112b6:	2b02      	cmp	r3, #2
 80112b8:	d02a      	beq.n	8011310 <__gethex+0x310>
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d02c      	beq.n	8011318 <__gethex+0x318>
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d11c      	bne.n	80112fc <__gethex+0x2fc>
 80112c2:	42ae      	cmp	r6, r5
 80112c4:	d11a      	bne.n	80112fc <__gethex+0x2fc>
 80112c6:	2e01      	cmp	r6, #1
 80112c8:	d112      	bne.n	80112f0 <__gethex+0x2f0>
 80112ca:	9a04      	ldr	r2, [sp, #16]
 80112cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80112d0:	6013      	str	r3, [r2, #0]
 80112d2:	2301      	movs	r3, #1
 80112d4:	6123      	str	r3, [r4, #16]
 80112d6:	f8c9 3000 	str.w	r3, [r9]
 80112da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80112dc:	2762      	movs	r7, #98	; 0x62
 80112de:	601c      	str	r4, [r3, #0]
 80112e0:	e723      	b.n	801112a <__gethex+0x12a>
 80112e2:	bf00      	nop
 80112e4:	08013b5c 	.word	0x08013b5c
 80112e8:	08013ae4 	.word	0x08013ae4
 80112ec:	08013af5 	.word	0x08013af5
 80112f0:	1e71      	subs	r1, r6, #1
 80112f2:	4620      	mov	r0, r4
 80112f4:	f000 feba 	bl	801206c <__any_on>
 80112f8:	2800      	cmp	r0, #0
 80112fa:	d1e6      	bne.n	80112ca <__gethex+0x2ca>
 80112fc:	ee18 0a10 	vmov	r0, s16
 8011300:	4621      	mov	r1, r4
 8011302:	f000 fa53 	bl	80117ac <_Bfree>
 8011306:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011308:	2300      	movs	r3, #0
 801130a:	6013      	str	r3, [r2, #0]
 801130c:	2750      	movs	r7, #80	; 0x50
 801130e:	e70c      	b.n	801112a <__gethex+0x12a>
 8011310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1f2      	bne.n	80112fc <__gethex+0x2fc>
 8011316:	e7d8      	b.n	80112ca <__gethex+0x2ca>
 8011318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801131a:	2b00      	cmp	r3, #0
 801131c:	d1d5      	bne.n	80112ca <__gethex+0x2ca>
 801131e:	e7ed      	b.n	80112fc <__gethex+0x2fc>
 8011320:	1e6f      	subs	r7, r5, #1
 8011322:	f1ba 0f00 	cmp.w	sl, #0
 8011326:	d131      	bne.n	801138c <__gethex+0x38c>
 8011328:	b127      	cbz	r7, 8011334 <__gethex+0x334>
 801132a:	4639      	mov	r1, r7
 801132c:	4620      	mov	r0, r4
 801132e:	f000 fe9d 	bl	801206c <__any_on>
 8011332:	4682      	mov	sl, r0
 8011334:	117b      	asrs	r3, r7, #5
 8011336:	2101      	movs	r1, #1
 8011338:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801133c:	f007 071f 	and.w	r7, r7, #31
 8011340:	fa01 f707 	lsl.w	r7, r1, r7
 8011344:	421f      	tst	r7, r3
 8011346:	4629      	mov	r1, r5
 8011348:	4620      	mov	r0, r4
 801134a:	bf18      	it	ne
 801134c:	f04a 0a02 	orrne.w	sl, sl, #2
 8011350:	1b76      	subs	r6, r6, r5
 8011352:	f7ff fdee 	bl	8010f32 <rshift>
 8011356:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801135a:	2702      	movs	r7, #2
 801135c:	f1ba 0f00 	cmp.w	sl, #0
 8011360:	d048      	beq.n	80113f4 <__gethex+0x3f4>
 8011362:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011366:	2b02      	cmp	r3, #2
 8011368:	d015      	beq.n	8011396 <__gethex+0x396>
 801136a:	2b03      	cmp	r3, #3
 801136c:	d017      	beq.n	801139e <__gethex+0x39e>
 801136e:	2b01      	cmp	r3, #1
 8011370:	d109      	bne.n	8011386 <__gethex+0x386>
 8011372:	f01a 0f02 	tst.w	sl, #2
 8011376:	d006      	beq.n	8011386 <__gethex+0x386>
 8011378:	f8d9 0000 	ldr.w	r0, [r9]
 801137c:	ea4a 0a00 	orr.w	sl, sl, r0
 8011380:	f01a 0f01 	tst.w	sl, #1
 8011384:	d10e      	bne.n	80113a4 <__gethex+0x3a4>
 8011386:	f047 0710 	orr.w	r7, r7, #16
 801138a:	e033      	b.n	80113f4 <__gethex+0x3f4>
 801138c:	f04f 0a01 	mov.w	sl, #1
 8011390:	e7d0      	b.n	8011334 <__gethex+0x334>
 8011392:	2701      	movs	r7, #1
 8011394:	e7e2      	b.n	801135c <__gethex+0x35c>
 8011396:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011398:	f1c3 0301 	rsb	r3, r3, #1
 801139c:	9315      	str	r3, [sp, #84]	; 0x54
 801139e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d0f0      	beq.n	8011386 <__gethex+0x386>
 80113a4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80113a8:	f104 0314 	add.w	r3, r4, #20
 80113ac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80113b0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80113b4:	f04f 0c00 	mov.w	ip, #0
 80113b8:	4618      	mov	r0, r3
 80113ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80113be:	f1b2 3fff 	cmp.w	r2, #4294967295
 80113c2:	d01c      	beq.n	80113fe <__gethex+0x3fe>
 80113c4:	3201      	adds	r2, #1
 80113c6:	6002      	str	r2, [r0, #0]
 80113c8:	2f02      	cmp	r7, #2
 80113ca:	f104 0314 	add.w	r3, r4, #20
 80113ce:	d13f      	bne.n	8011450 <__gethex+0x450>
 80113d0:	f8d8 2000 	ldr.w	r2, [r8]
 80113d4:	3a01      	subs	r2, #1
 80113d6:	42b2      	cmp	r2, r6
 80113d8:	d10a      	bne.n	80113f0 <__gethex+0x3f0>
 80113da:	1171      	asrs	r1, r6, #5
 80113dc:	2201      	movs	r2, #1
 80113de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80113e2:	f006 061f 	and.w	r6, r6, #31
 80113e6:	fa02 f606 	lsl.w	r6, r2, r6
 80113ea:	421e      	tst	r6, r3
 80113ec:	bf18      	it	ne
 80113ee:	4617      	movne	r7, r2
 80113f0:	f047 0720 	orr.w	r7, r7, #32
 80113f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80113f6:	601c      	str	r4, [r3, #0]
 80113f8:	9b04      	ldr	r3, [sp, #16]
 80113fa:	601d      	str	r5, [r3, #0]
 80113fc:	e695      	b.n	801112a <__gethex+0x12a>
 80113fe:	4299      	cmp	r1, r3
 8011400:	f843 cc04 	str.w	ip, [r3, #-4]
 8011404:	d8d8      	bhi.n	80113b8 <__gethex+0x3b8>
 8011406:	68a3      	ldr	r3, [r4, #8]
 8011408:	459b      	cmp	fp, r3
 801140a:	db19      	blt.n	8011440 <__gethex+0x440>
 801140c:	6861      	ldr	r1, [r4, #4]
 801140e:	ee18 0a10 	vmov	r0, s16
 8011412:	3101      	adds	r1, #1
 8011414:	f000 f98a 	bl	801172c <_Balloc>
 8011418:	4681      	mov	r9, r0
 801141a:	b918      	cbnz	r0, 8011424 <__gethex+0x424>
 801141c:	4b1a      	ldr	r3, [pc, #104]	; (8011488 <__gethex+0x488>)
 801141e:	4602      	mov	r2, r0
 8011420:	2184      	movs	r1, #132	; 0x84
 8011422:	e6a8      	b.n	8011176 <__gethex+0x176>
 8011424:	6922      	ldr	r2, [r4, #16]
 8011426:	3202      	adds	r2, #2
 8011428:	f104 010c 	add.w	r1, r4, #12
 801142c:	0092      	lsls	r2, r2, #2
 801142e:	300c      	adds	r0, #12
 8011430:	f7fe f8be 	bl	800f5b0 <memcpy>
 8011434:	4621      	mov	r1, r4
 8011436:	ee18 0a10 	vmov	r0, s16
 801143a:	f000 f9b7 	bl	80117ac <_Bfree>
 801143e:	464c      	mov	r4, r9
 8011440:	6923      	ldr	r3, [r4, #16]
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011448:	6122      	str	r2, [r4, #16]
 801144a:	2201      	movs	r2, #1
 801144c:	615a      	str	r2, [r3, #20]
 801144e:	e7bb      	b.n	80113c8 <__gethex+0x3c8>
 8011450:	6922      	ldr	r2, [r4, #16]
 8011452:	455a      	cmp	r2, fp
 8011454:	dd0b      	ble.n	801146e <__gethex+0x46e>
 8011456:	2101      	movs	r1, #1
 8011458:	4620      	mov	r0, r4
 801145a:	f7ff fd6a 	bl	8010f32 <rshift>
 801145e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011462:	3501      	adds	r5, #1
 8011464:	42ab      	cmp	r3, r5
 8011466:	f6ff aed0 	blt.w	801120a <__gethex+0x20a>
 801146a:	2701      	movs	r7, #1
 801146c:	e7c0      	b.n	80113f0 <__gethex+0x3f0>
 801146e:	f016 061f 	ands.w	r6, r6, #31
 8011472:	d0fa      	beq.n	801146a <__gethex+0x46a>
 8011474:	4453      	add	r3, sl
 8011476:	f1c6 0620 	rsb	r6, r6, #32
 801147a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801147e:	f000 fa47 	bl	8011910 <__hi0bits>
 8011482:	42b0      	cmp	r0, r6
 8011484:	dbe7      	blt.n	8011456 <__gethex+0x456>
 8011486:	e7f0      	b.n	801146a <__gethex+0x46a>
 8011488:	08013ae4 	.word	0x08013ae4

0801148c <L_shift>:
 801148c:	f1c2 0208 	rsb	r2, r2, #8
 8011490:	0092      	lsls	r2, r2, #2
 8011492:	b570      	push	{r4, r5, r6, lr}
 8011494:	f1c2 0620 	rsb	r6, r2, #32
 8011498:	6843      	ldr	r3, [r0, #4]
 801149a:	6804      	ldr	r4, [r0, #0]
 801149c:	fa03 f506 	lsl.w	r5, r3, r6
 80114a0:	432c      	orrs	r4, r5
 80114a2:	40d3      	lsrs	r3, r2
 80114a4:	6004      	str	r4, [r0, #0]
 80114a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80114aa:	4288      	cmp	r0, r1
 80114ac:	d3f4      	bcc.n	8011498 <L_shift+0xc>
 80114ae:	bd70      	pop	{r4, r5, r6, pc}

080114b0 <__match>:
 80114b0:	b530      	push	{r4, r5, lr}
 80114b2:	6803      	ldr	r3, [r0, #0]
 80114b4:	3301      	adds	r3, #1
 80114b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114ba:	b914      	cbnz	r4, 80114c2 <__match+0x12>
 80114bc:	6003      	str	r3, [r0, #0]
 80114be:	2001      	movs	r0, #1
 80114c0:	bd30      	pop	{r4, r5, pc}
 80114c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80114c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80114ca:	2d19      	cmp	r5, #25
 80114cc:	bf98      	it	ls
 80114ce:	3220      	addls	r2, #32
 80114d0:	42a2      	cmp	r2, r4
 80114d2:	d0f0      	beq.n	80114b6 <__match+0x6>
 80114d4:	2000      	movs	r0, #0
 80114d6:	e7f3      	b.n	80114c0 <__match+0x10>

080114d8 <__hexnan>:
 80114d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114dc:	680b      	ldr	r3, [r1, #0]
 80114de:	115e      	asrs	r6, r3, #5
 80114e0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80114e4:	f013 031f 	ands.w	r3, r3, #31
 80114e8:	b087      	sub	sp, #28
 80114ea:	bf18      	it	ne
 80114ec:	3604      	addne	r6, #4
 80114ee:	2500      	movs	r5, #0
 80114f0:	1f37      	subs	r7, r6, #4
 80114f2:	4690      	mov	r8, r2
 80114f4:	6802      	ldr	r2, [r0, #0]
 80114f6:	9301      	str	r3, [sp, #4]
 80114f8:	4682      	mov	sl, r0
 80114fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80114fe:	46b9      	mov	r9, r7
 8011500:	463c      	mov	r4, r7
 8011502:	9502      	str	r5, [sp, #8]
 8011504:	46ab      	mov	fp, r5
 8011506:	7851      	ldrb	r1, [r2, #1]
 8011508:	1c53      	adds	r3, r2, #1
 801150a:	9303      	str	r3, [sp, #12]
 801150c:	b341      	cbz	r1, 8011560 <__hexnan+0x88>
 801150e:	4608      	mov	r0, r1
 8011510:	9205      	str	r2, [sp, #20]
 8011512:	9104      	str	r1, [sp, #16]
 8011514:	f7ff fd5f 	bl	8010fd6 <__hexdig_fun>
 8011518:	2800      	cmp	r0, #0
 801151a:	d14f      	bne.n	80115bc <__hexnan+0xe4>
 801151c:	9904      	ldr	r1, [sp, #16]
 801151e:	9a05      	ldr	r2, [sp, #20]
 8011520:	2920      	cmp	r1, #32
 8011522:	d818      	bhi.n	8011556 <__hexnan+0x7e>
 8011524:	9b02      	ldr	r3, [sp, #8]
 8011526:	459b      	cmp	fp, r3
 8011528:	dd13      	ble.n	8011552 <__hexnan+0x7a>
 801152a:	454c      	cmp	r4, r9
 801152c:	d206      	bcs.n	801153c <__hexnan+0x64>
 801152e:	2d07      	cmp	r5, #7
 8011530:	dc04      	bgt.n	801153c <__hexnan+0x64>
 8011532:	462a      	mov	r2, r5
 8011534:	4649      	mov	r1, r9
 8011536:	4620      	mov	r0, r4
 8011538:	f7ff ffa8 	bl	801148c <L_shift>
 801153c:	4544      	cmp	r4, r8
 801153e:	d950      	bls.n	80115e2 <__hexnan+0x10a>
 8011540:	2300      	movs	r3, #0
 8011542:	f1a4 0904 	sub.w	r9, r4, #4
 8011546:	f844 3c04 	str.w	r3, [r4, #-4]
 801154a:	f8cd b008 	str.w	fp, [sp, #8]
 801154e:	464c      	mov	r4, r9
 8011550:	461d      	mov	r5, r3
 8011552:	9a03      	ldr	r2, [sp, #12]
 8011554:	e7d7      	b.n	8011506 <__hexnan+0x2e>
 8011556:	2929      	cmp	r1, #41	; 0x29
 8011558:	d156      	bne.n	8011608 <__hexnan+0x130>
 801155a:	3202      	adds	r2, #2
 801155c:	f8ca 2000 	str.w	r2, [sl]
 8011560:	f1bb 0f00 	cmp.w	fp, #0
 8011564:	d050      	beq.n	8011608 <__hexnan+0x130>
 8011566:	454c      	cmp	r4, r9
 8011568:	d206      	bcs.n	8011578 <__hexnan+0xa0>
 801156a:	2d07      	cmp	r5, #7
 801156c:	dc04      	bgt.n	8011578 <__hexnan+0xa0>
 801156e:	462a      	mov	r2, r5
 8011570:	4649      	mov	r1, r9
 8011572:	4620      	mov	r0, r4
 8011574:	f7ff ff8a 	bl	801148c <L_shift>
 8011578:	4544      	cmp	r4, r8
 801157a:	d934      	bls.n	80115e6 <__hexnan+0x10e>
 801157c:	f1a8 0204 	sub.w	r2, r8, #4
 8011580:	4623      	mov	r3, r4
 8011582:	f853 1b04 	ldr.w	r1, [r3], #4
 8011586:	f842 1f04 	str.w	r1, [r2, #4]!
 801158a:	429f      	cmp	r7, r3
 801158c:	d2f9      	bcs.n	8011582 <__hexnan+0xaa>
 801158e:	1b3b      	subs	r3, r7, r4
 8011590:	f023 0303 	bic.w	r3, r3, #3
 8011594:	3304      	adds	r3, #4
 8011596:	3401      	adds	r4, #1
 8011598:	3e03      	subs	r6, #3
 801159a:	42b4      	cmp	r4, r6
 801159c:	bf88      	it	hi
 801159e:	2304      	movhi	r3, #4
 80115a0:	4443      	add	r3, r8
 80115a2:	2200      	movs	r2, #0
 80115a4:	f843 2b04 	str.w	r2, [r3], #4
 80115a8:	429f      	cmp	r7, r3
 80115aa:	d2fb      	bcs.n	80115a4 <__hexnan+0xcc>
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	b91b      	cbnz	r3, 80115b8 <__hexnan+0xe0>
 80115b0:	4547      	cmp	r7, r8
 80115b2:	d127      	bne.n	8011604 <__hexnan+0x12c>
 80115b4:	2301      	movs	r3, #1
 80115b6:	603b      	str	r3, [r7, #0]
 80115b8:	2005      	movs	r0, #5
 80115ba:	e026      	b.n	801160a <__hexnan+0x132>
 80115bc:	3501      	adds	r5, #1
 80115be:	2d08      	cmp	r5, #8
 80115c0:	f10b 0b01 	add.w	fp, fp, #1
 80115c4:	dd06      	ble.n	80115d4 <__hexnan+0xfc>
 80115c6:	4544      	cmp	r4, r8
 80115c8:	d9c3      	bls.n	8011552 <__hexnan+0x7a>
 80115ca:	2300      	movs	r3, #0
 80115cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80115d0:	2501      	movs	r5, #1
 80115d2:	3c04      	subs	r4, #4
 80115d4:	6822      	ldr	r2, [r4, #0]
 80115d6:	f000 000f 	and.w	r0, r0, #15
 80115da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80115de:	6022      	str	r2, [r4, #0]
 80115e0:	e7b7      	b.n	8011552 <__hexnan+0x7a>
 80115e2:	2508      	movs	r5, #8
 80115e4:	e7b5      	b.n	8011552 <__hexnan+0x7a>
 80115e6:	9b01      	ldr	r3, [sp, #4]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d0df      	beq.n	80115ac <__hexnan+0xd4>
 80115ec:	f04f 32ff 	mov.w	r2, #4294967295
 80115f0:	f1c3 0320 	rsb	r3, r3, #32
 80115f4:	fa22 f303 	lsr.w	r3, r2, r3
 80115f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80115fc:	401a      	ands	r2, r3
 80115fe:	f846 2c04 	str.w	r2, [r6, #-4]
 8011602:	e7d3      	b.n	80115ac <__hexnan+0xd4>
 8011604:	3f04      	subs	r7, #4
 8011606:	e7d1      	b.n	80115ac <__hexnan+0xd4>
 8011608:	2004      	movs	r0, #4
 801160a:	b007      	add	sp, #28
 801160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011610 <__retarget_lock_init_recursive>:
 8011610:	4770      	bx	lr

08011612 <__retarget_lock_acquire_recursive>:
 8011612:	4770      	bx	lr

08011614 <__retarget_lock_release_recursive>:
 8011614:	4770      	bx	lr
	...

08011618 <_lseek_r>:
 8011618:	b538      	push	{r3, r4, r5, lr}
 801161a:	4d07      	ldr	r5, [pc, #28]	; (8011638 <_lseek_r+0x20>)
 801161c:	4604      	mov	r4, r0
 801161e:	4608      	mov	r0, r1
 8011620:	4611      	mov	r1, r2
 8011622:	2200      	movs	r2, #0
 8011624:	602a      	str	r2, [r5, #0]
 8011626:	461a      	mov	r2, r3
 8011628:	f7f2 fee2 	bl	80043f0 <_lseek>
 801162c:	1c43      	adds	r3, r0, #1
 801162e:	d102      	bne.n	8011636 <_lseek_r+0x1e>
 8011630:	682b      	ldr	r3, [r5, #0]
 8011632:	b103      	cbz	r3, 8011636 <_lseek_r+0x1e>
 8011634:	6023      	str	r3, [r4, #0]
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	200027ac 	.word	0x200027ac

0801163c <__swhatbuf_r>:
 801163c:	b570      	push	{r4, r5, r6, lr}
 801163e:	460e      	mov	r6, r1
 8011640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011644:	2900      	cmp	r1, #0
 8011646:	b096      	sub	sp, #88	; 0x58
 8011648:	4614      	mov	r4, r2
 801164a:	461d      	mov	r5, r3
 801164c:	da08      	bge.n	8011660 <__swhatbuf_r+0x24>
 801164e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011652:	2200      	movs	r2, #0
 8011654:	602a      	str	r2, [r5, #0]
 8011656:	061a      	lsls	r2, r3, #24
 8011658:	d410      	bmi.n	801167c <__swhatbuf_r+0x40>
 801165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801165e:	e00e      	b.n	801167e <__swhatbuf_r+0x42>
 8011660:	466a      	mov	r2, sp
 8011662:	f001 fd7d 	bl	8013160 <_fstat_r>
 8011666:	2800      	cmp	r0, #0
 8011668:	dbf1      	blt.n	801164e <__swhatbuf_r+0x12>
 801166a:	9a01      	ldr	r2, [sp, #4]
 801166c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011670:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011674:	425a      	negs	r2, r3
 8011676:	415a      	adcs	r2, r3
 8011678:	602a      	str	r2, [r5, #0]
 801167a:	e7ee      	b.n	801165a <__swhatbuf_r+0x1e>
 801167c:	2340      	movs	r3, #64	; 0x40
 801167e:	2000      	movs	r0, #0
 8011680:	6023      	str	r3, [r4, #0]
 8011682:	b016      	add	sp, #88	; 0x58
 8011684:	bd70      	pop	{r4, r5, r6, pc}
	...

08011688 <__smakebuf_r>:
 8011688:	898b      	ldrh	r3, [r1, #12]
 801168a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801168c:	079d      	lsls	r5, r3, #30
 801168e:	4606      	mov	r6, r0
 8011690:	460c      	mov	r4, r1
 8011692:	d507      	bpl.n	80116a4 <__smakebuf_r+0x1c>
 8011694:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011698:	6023      	str	r3, [r4, #0]
 801169a:	6123      	str	r3, [r4, #16]
 801169c:	2301      	movs	r3, #1
 801169e:	6163      	str	r3, [r4, #20]
 80116a0:	b002      	add	sp, #8
 80116a2:	bd70      	pop	{r4, r5, r6, pc}
 80116a4:	ab01      	add	r3, sp, #4
 80116a6:	466a      	mov	r2, sp
 80116a8:	f7ff ffc8 	bl	801163c <__swhatbuf_r>
 80116ac:	9900      	ldr	r1, [sp, #0]
 80116ae:	4605      	mov	r5, r0
 80116b0:	4630      	mov	r0, r6
 80116b2:	f000 fd7f 	bl	80121b4 <_malloc_r>
 80116b6:	b948      	cbnz	r0, 80116cc <__smakebuf_r+0x44>
 80116b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116bc:	059a      	lsls	r2, r3, #22
 80116be:	d4ef      	bmi.n	80116a0 <__smakebuf_r+0x18>
 80116c0:	f023 0303 	bic.w	r3, r3, #3
 80116c4:	f043 0302 	orr.w	r3, r3, #2
 80116c8:	81a3      	strh	r3, [r4, #12]
 80116ca:	e7e3      	b.n	8011694 <__smakebuf_r+0xc>
 80116cc:	4b0d      	ldr	r3, [pc, #52]	; (8011704 <__smakebuf_r+0x7c>)
 80116ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80116d0:	89a3      	ldrh	r3, [r4, #12]
 80116d2:	6020      	str	r0, [r4, #0]
 80116d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116d8:	81a3      	strh	r3, [r4, #12]
 80116da:	9b00      	ldr	r3, [sp, #0]
 80116dc:	6163      	str	r3, [r4, #20]
 80116de:	9b01      	ldr	r3, [sp, #4]
 80116e0:	6120      	str	r0, [r4, #16]
 80116e2:	b15b      	cbz	r3, 80116fc <__smakebuf_r+0x74>
 80116e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80116e8:	4630      	mov	r0, r6
 80116ea:	f001 fd4b 	bl	8013184 <_isatty_r>
 80116ee:	b128      	cbz	r0, 80116fc <__smakebuf_r+0x74>
 80116f0:	89a3      	ldrh	r3, [r4, #12]
 80116f2:	f023 0303 	bic.w	r3, r3, #3
 80116f6:	f043 0301 	orr.w	r3, r3, #1
 80116fa:	81a3      	strh	r3, [r4, #12]
 80116fc:	89a0      	ldrh	r0, [r4, #12]
 80116fe:	4305      	orrs	r5, r0
 8011700:	81a5      	strh	r5, [r4, #12]
 8011702:	e7cd      	b.n	80116a0 <__smakebuf_r+0x18>
 8011704:	08010d91 	.word	0x08010d91

08011708 <__ascii_mbtowc>:
 8011708:	b082      	sub	sp, #8
 801170a:	b901      	cbnz	r1, 801170e <__ascii_mbtowc+0x6>
 801170c:	a901      	add	r1, sp, #4
 801170e:	b142      	cbz	r2, 8011722 <__ascii_mbtowc+0x1a>
 8011710:	b14b      	cbz	r3, 8011726 <__ascii_mbtowc+0x1e>
 8011712:	7813      	ldrb	r3, [r2, #0]
 8011714:	600b      	str	r3, [r1, #0]
 8011716:	7812      	ldrb	r2, [r2, #0]
 8011718:	1e10      	subs	r0, r2, #0
 801171a:	bf18      	it	ne
 801171c:	2001      	movne	r0, #1
 801171e:	b002      	add	sp, #8
 8011720:	4770      	bx	lr
 8011722:	4610      	mov	r0, r2
 8011724:	e7fb      	b.n	801171e <__ascii_mbtowc+0x16>
 8011726:	f06f 0001 	mvn.w	r0, #1
 801172a:	e7f8      	b.n	801171e <__ascii_mbtowc+0x16>

0801172c <_Balloc>:
 801172c:	b570      	push	{r4, r5, r6, lr}
 801172e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011730:	4604      	mov	r4, r0
 8011732:	460d      	mov	r5, r1
 8011734:	b976      	cbnz	r6, 8011754 <_Balloc+0x28>
 8011736:	2010      	movs	r0, #16
 8011738:	f001 fd34 	bl	80131a4 <malloc>
 801173c:	4602      	mov	r2, r0
 801173e:	6260      	str	r0, [r4, #36]	; 0x24
 8011740:	b920      	cbnz	r0, 801174c <_Balloc+0x20>
 8011742:	4b18      	ldr	r3, [pc, #96]	; (80117a4 <_Balloc+0x78>)
 8011744:	4818      	ldr	r0, [pc, #96]	; (80117a8 <_Balloc+0x7c>)
 8011746:	2166      	movs	r1, #102	; 0x66
 8011748:	f001 fcda 	bl	8013100 <__assert_func>
 801174c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011750:	6006      	str	r6, [r0, #0]
 8011752:	60c6      	str	r6, [r0, #12]
 8011754:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011756:	68f3      	ldr	r3, [r6, #12]
 8011758:	b183      	cbz	r3, 801177c <_Balloc+0x50>
 801175a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011762:	b9b8      	cbnz	r0, 8011794 <_Balloc+0x68>
 8011764:	2101      	movs	r1, #1
 8011766:	fa01 f605 	lsl.w	r6, r1, r5
 801176a:	1d72      	adds	r2, r6, #5
 801176c:	0092      	lsls	r2, r2, #2
 801176e:	4620      	mov	r0, r4
 8011770:	f000 fc9d 	bl	80120ae <_calloc_r>
 8011774:	b160      	cbz	r0, 8011790 <_Balloc+0x64>
 8011776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801177a:	e00e      	b.n	801179a <_Balloc+0x6e>
 801177c:	2221      	movs	r2, #33	; 0x21
 801177e:	2104      	movs	r1, #4
 8011780:	4620      	mov	r0, r4
 8011782:	f000 fc94 	bl	80120ae <_calloc_r>
 8011786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011788:	60f0      	str	r0, [r6, #12]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1e4      	bne.n	801175a <_Balloc+0x2e>
 8011790:	2000      	movs	r0, #0
 8011792:	bd70      	pop	{r4, r5, r6, pc}
 8011794:	6802      	ldr	r2, [r0, #0]
 8011796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801179a:	2300      	movs	r3, #0
 801179c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80117a0:	e7f7      	b.n	8011792 <_Balloc+0x66>
 80117a2:	bf00      	nop
 80117a4:	08013b70 	.word	0x08013b70
 80117a8:	08013b87 	.word	0x08013b87

080117ac <_Bfree>:
 80117ac:	b570      	push	{r4, r5, r6, lr}
 80117ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80117b0:	4605      	mov	r5, r0
 80117b2:	460c      	mov	r4, r1
 80117b4:	b976      	cbnz	r6, 80117d4 <_Bfree+0x28>
 80117b6:	2010      	movs	r0, #16
 80117b8:	f001 fcf4 	bl	80131a4 <malloc>
 80117bc:	4602      	mov	r2, r0
 80117be:	6268      	str	r0, [r5, #36]	; 0x24
 80117c0:	b920      	cbnz	r0, 80117cc <_Bfree+0x20>
 80117c2:	4b09      	ldr	r3, [pc, #36]	; (80117e8 <_Bfree+0x3c>)
 80117c4:	4809      	ldr	r0, [pc, #36]	; (80117ec <_Bfree+0x40>)
 80117c6:	218a      	movs	r1, #138	; 0x8a
 80117c8:	f001 fc9a 	bl	8013100 <__assert_func>
 80117cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80117d0:	6006      	str	r6, [r0, #0]
 80117d2:	60c6      	str	r6, [r0, #12]
 80117d4:	b13c      	cbz	r4, 80117e6 <_Bfree+0x3a>
 80117d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80117d8:	6862      	ldr	r2, [r4, #4]
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80117e0:	6021      	str	r1, [r4, #0]
 80117e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80117e6:	bd70      	pop	{r4, r5, r6, pc}
 80117e8:	08013b70 	.word	0x08013b70
 80117ec:	08013b87 	.word	0x08013b87

080117f0 <__multadd>:
 80117f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f4:	690d      	ldr	r5, [r1, #16]
 80117f6:	4607      	mov	r7, r0
 80117f8:	460c      	mov	r4, r1
 80117fa:	461e      	mov	r6, r3
 80117fc:	f101 0c14 	add.w	ip, r1, #20
 8011800:	2000      	movs	r0, #0
 8011802:	f8dc 3000 	ldr.w	r3, [ip]
 8011806:	b299      	uxth	r1, r3
 8011808:	fb02 6101 	mla	r1, r2, r1, r6
 801180c:	0c1e      	lsrs	r6, r3, #16
 801180e:	0c0b      	lsrs	r3, r1, #16
 8011810:	fb02 3306 	mla	r3, r2, r6, r3
 8011814:	b289      	uxth	r1, r1
 8011816:	3001      	adds	r0, #1
 8011818:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801181c:	4285      	cmp	r5, r0
 801181e:	f84c 1b04 	str.w	r1, [ip], #4
 8011822:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011826:	dcec      	bgt.n	8011802 <__multadd+0x12>
 8011828:	b30e      	cbz	r6, 801186e <__multadd+0x7e>
 801182a:	68a3      	ldr	r3, [r4, #8]
 801182c:	42ab      	cmp	r3, r5
 801182e:	dc19      	bgt.n	8011864 <__multadd+0x74>
 8011830:	6861      	ldr	r1, [r4, #4]
 8011832:	4638      	mov	r0, r7
 8011834:	3101      	adds	r1, #1
 8011836:	f7ff ff79 	bl	801172c <_Balloc>
 801183a:	4680      	mov	r8, r0
 801183c:	b928      	cbnz	r0, 801184a <__multadd+0x5a>
 801183e:	4602      	mov	r2, r0
 8011840:	4b0c      	ldr	r3, [pc, #48]	; (8011874 <__multadd+0x84>)
 8011842:	480d      	ldr	r0, [pc, #52]	; (8011878 <__multadd+0x88>)
 8011844:	21b5      	movs	r1, #181	; 0xb5
 8011846:	f001 fc5b 	bl	8013100 <__assert_func>
 801184a:	6922      	ldr	r2, [r4, #16]
 801184c:	3202      	adds	r2, #2
 801184e:	f104 010c 	add.w	r1, r4, #12
 8011852:	0092      	lsls	r2, r2, #2
 8011854:	300c      	adds	r0, #12
 8011856:	f7fd feab 	bl	800f5b0 <memcpy>
 801185a:	4621      	mov	r1, r4
 801185c:	4638      	mov	r0, r7
 801185e:	f7ff ffa5 	bl	80117ac <_Bfree>
 8011862:	4644      	mov	r4, r8
 8011864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011868:	3501      	adds	r5, #1
 801186a:	615e      	str	r6, [r3, #20]
 801186c:	6125      	str	r5, [r4, #16]
 801186e:	4620      	mov	r0, r4
 8011870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011874:	08013ae4 	.word	0x08013ae4
 8011878:	08013b87 	.word	0x08013b87

0801187c <__s2b>:
 801187c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011880:	460c      	mov	r4, r1
 8011882:	4615      	mov	r5, r2
 8011884:	461f      	mov	r7, r3
 8011886:	2209      	movs	r2, #9
 8011888:	3308      	adds	r3, #8
 801188a:	4606      	mov	r6, r0
 801188c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011890:	2100      	movs	r1, #0
 8011892:	2201      	movs	r2, #1
 8011894:	429a      	cmp	r2, r3
 8011896:	db09      	blt.n	80118ac <__s2b+0x30>
 8011898:	4630      	mov	r0, r6
 801189a:	f7ff ff47 	bl	801172c <_Balloc>
 801189e:	b940      	cbnz	r0, 80118b2 <__s2b+0x36>
 80118a0:	4602      	mov	r2, r0
 80118a2:	4b19      	ldr	r3, [pc, #100]	; (8011908 <__s2b+0x8c>)
 80118a4:	4819      	ldr	r0, [pc, #100]	; (801190c <__s2b+0x90>)
 80118a6:	21ce      	movs	r1, #206	; 0xce
 80118a8:	f001 fc2a 	bl	8013100 <__assert_func>
 80118ac:	0052      	lsls	r2, r2, #1
 80118ae:	3101      	adds	r1, #1
 80118b0:	e7f0      	b.n	8011894 <__s2b+0x18>
 80118b2:	9b08      	ldr	r3, [sp, #32]
 80118b4:	6143      	str	r3, [r0, #20]
 80118b6:	2d09      	cmp	r5, #9
 80118b8:	f04f 0301 	mov.w	r3, #1
 80118bc:	6103      	str	r3, [r0, #16]
 80118be:	dd16      	ble.n	80118ee <__s2b+0x72>
 80118c0:	f104 0909 	add.w	r9, r4, #9
 80118c4:	46c8      	mov	r8, r9
 80118c6:	442c      	add	r4, r5
 80118c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80118cc:	4601      	mov	r1, r0
 80118ce:	3b30      	subs	r3, #48	; 0x30
 80118d0:	220a      	movs	r2, #10
 80118d2:	4630      	mov	r0, r6
 80118d4:	f7ff ff8c 	bl	80117f0 <__multadd>
 80118d8:	45a0      	cmp	r8, r4
 80118da:	d1f5      	bne.n	80118c8 <__s2b+0x4c>
 80118dc:	f1a5 0408 	sub.w	r4, r5, #8
 80118e0:	444c      	add	r4, r9
 80118e2:	1b2d      	subs	r5, r5, r4
 80118e4:	1963      	adds	r3, r4, r5
 80118e6:	42bb      	cmp	r3, r7
 80118e8:	db04      	blt.n	80118f4 <__s2b+0x78>
 80118ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118ee:	340a      	adds	r4, #10
 80118f0:	2509      	movs	r5, #9
 80118f2:	e7f6      	b.n	80118e2 <__s2b+0x66>
 80118f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80118f8:	4601      	mov	r1, r0
 80118fa:	3b30      	subs	r3, #48	; 0x30
 80118fc:	220a      	movs	r2, #10
 80118fe:	4630      	mov	r0, r6
 8011900:	f7ff ff76 	bl	80117f0 <__multadd>
 8011904:	e7ee      	b.n	80118e4 <__s2b+0x68>
 8011906:	bf00      	nop
 8011908:	08013ae4 	.word	0x08013ae4
 801190c:	08013b87 	.word	0x08013b87

08011910 <__hi0bits>:
 8011910:	0c03      	lsrs	r3, r0, #16
 8011912:	041b      	lsls	r3, r3, #16
 8011914:	b9d3      	cbnz	r3, 801194c <__hi0bits+0x3c>
 8011916:	0400      	lsls	r0, r0, #16
 8011918:	2310      	movs	r3, #16
 801191a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801191e:	bf04      	itt	eq
 8011920:	0200      	lsleq	r0, r0, #8
 8011922:	3308      	addeq	r3, #8
 8011924:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011928:	bf04      	itt	eq
 801192a:	0100      	lsleq	r0, r0, #4
 801192c:	3304      	addeq	r3, #4
 801192e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011932:	bf04      	itt	eq
 8011934:	0080      	lsleq	r0, r0, #2
 8011936:	3302      	addeq	r3, #2
 8011938:	2800      	cmp	r0, #0
 801193a:	db05      	blt.n	8011948 <__hi0bits+0x38>
 801193c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011940:	f103 0301 	add.w	r3, r3, #1
 8011944:	bf08      	it	eq
 8011946:	2320      	moveq	r3, #32
 8011948:	4618      	mov	r0, r3
 801194a:	4770      	bx	lr
 801194c:	2300      	movs	r3, #0
 801194e:	e7e4      	b.n	801191a <__hi0bits+0xa>

08011950 <__lo0bits>:
 8011950:	6803      	ldr	r3, [r0, #0]
 8011952:	f013 0207 	ands.w	r2, r3, #7
 8011956:	4601      	mov	r1, r0
 8011958:	d00b      	beq.n	8011972 <__lo0bits+0x22>
 801195a:	07da      	lsls	r2, r3, #31
 801195c:	d423      	bmi.n	80119a6 <__lo0bits+0x56>
 801195e:	0798      	lsls	r0, r3, #30
 8011960:	bf49      	itett	mi
 8011962:	085b      	lsrmi	r3, r3, #1
 8011964:	089b      	lsrpl	r3, r3, #2
 8011966:	2001      	movmi	r0, #1
 8011968:	600b      	strmi	r3, [r1, #0]
 801196a:	bf5c      	itt	pl
 801196c:	600b      	strpl	r3, [r1, #0]
 801196e:	2002      	movpl	r0, #2
 8011970:	4770      	bx	lr
 8011972:	b298      	uxth	r0, r3
 8011974:	b9a8      	cbnz	r0, 80119a2 <__lo0bits+0x52>
 8011976:	0c1b      	lsrs	r3, r3, #16
 8011978:	2010      	movs	r0, #16
 801197a:	b2da      	uxtb	r2, r3
 801197c:	b90a      	cbnz	r2, 8011982 <__lo0bits+0x32>
 801197e:	3008      	adds	r0, #8
 8011980:	0a1b      	lsrs	r3, r3, #8
 8011982:	071a      	lsls	r2, r3, #28
 8011984:	bf04      	itt	eq
 8011986:	091b      	lsreq	r3, r3, #4
 8011988:	3004      	addeq	r0, #4
 801198a:	079a      	lsls	r2, r3, #30
 801198c:	bf04      	itt	eq
 801198e:	089b      	lsreq	r3, r3, #2
 8011990:	3002      	addeq	r0, #2
 8011992:	07da      	lsls	r2, r3, #31
 8011994:	d403      	bmi.n	801199e <__lo0bits+0x4e>
 8011996:	085b      	lsrs	r3, r3, #1
 8011998:	f100 0001 	add.w	r0, r0, #1
 801199c:	d005      	beq.n	80119aa <__lo0bits+0x5a>
 801199e:	600b      	str	r3, [r1, #0]
 80119a0:	4770      	bx	lr
 80119a2:	4610      	mov	r0, r2
 80119a4:	e7e9      	b.n	801197a <__lo0bits+0x2a>
 80119a6:	2000      	movs	r0, #0
 80119a8:	4770      	bx	lr
 80119aa:	2020      	movs	r0, #32
 80119ac:	4770      	bx	lr
	...

080119b0 <__i2b>:
 80119b0:	b510      	push	{r4, lr}
 80119b2:	460c      	mov	r4, r1
 80119b4:	2101      	movs	r1, #1
 80119b6:	f7ff feb9 	bl	801172c <_Balloc>
 80119ba:	4602      	mov	r2, r0
 80119bc:	b928      	cbnz	r0, 80119ca <__i2b+0x1a>
 80119be:	4b05      	ldr	r3, [pc, #20]	; (80119d4 <__i2b+0x24>)
 80119c0:	4805      	ldr	r0, [pc, #20]	; (80119d8 <__i2b+0x28>)
 80119c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80119c6:	f001 fb9b 	bl	8013100 <__assert_func>
 80119ca:	2301      	movs	r3, #1
 80119cc:	6144      	str	r4, [r0, #20]
 80119ce:	6103      	str	r3, [r0, #16]
 80119d0:	bd10      	pop	{r4, pc}
 80119d2:	bf00      	nop
 80119d4:	08013ae4 	.word	0x08013ae4
 80119d8:	08013b87 	.word	0x08013b87

080119dc <__multiply>:
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e0:	4691      	mov	r9, r2
 80119e2:	690a      	ldr	r2, [r1, #16]
 80119e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	bfb8      	it	lt
 80119ec:	460b      	movlt	r3, r1
 80119ee:	460c      	mov	r4, r1
 80119f0:	bfbc      	itt	lt
 80119f2:	464c      	movlt	r4, r9
 80119f4:	4699      	movlt	r9, r3
 80119f6:	6927      	ldr	r7, [r4, #16]
 80119f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80119fc:	68a3      	ldr	r3, [r4, #8]
 80119fe:	6861      	ldr	r1, [r4, #4]
 8011a00:	eb07 060a 	add.w	r6, r7, sl
 8011a04:	42b3      	cmp	r3, r6
 8011a06:	b085      	sub	sp, #20
 8011a08:	bfb8      	it	lt
 8011a0a:	3101      	addlt	r1, #1
 8011a0c:	f7ff fe8e 	bl	801172c <_Balloc>
 8011a10:	b930      	cbnz	r0, 8011a20 <__multiply+0x44>
 8011a12:	4602      	mov	r2, r0
 8011a14:	4b44      	ldr	r3, [pc, #272]	; (8011b28 <__multiply+0x14c>)
 8011a16:	4845      	ldr	r0, [pc, #276]	; (8011b2c <__multiply+0x150>)
 8011a18:	f240 115d 	movw	r1, #349	; 0x15d
 8011a1c:	f001 fb70 	bl	8013100 <__assert_func>
 8011a20:	f100 0514 	add.w	r5, r0, #20
 8011a24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011a28:	462b      	mov	r3, r5
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	4543      	cmp	r3, r8
 8011a2e:	d321      	bcc.n	8011a74 <__multiply+0x98>
 8011a30:	f104 0314 	add.w	r3, r4, #20
 8011a34:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011a38:	f109 0314 	add.w	r3, r9, #20
 8011a3c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011a40:	9202      	str	r2, [sp, #8]
 8011a42:	1b3a      	subs	r2, r7, r4
 8011a44:	3a15      	subs	r2, #21
 8011a46:	f022 0203 	bic.w	r2, r2, #3
 8011a4a:	3204      	adds	r2, #4
 8011a4c:	f104 0115 	add.w	r1, r4, #21
 8011a50:	428f      	cmp	r7, r1
 8011a52:	bf38      	it	cc
 8011a54:	2204      	movcc	r2, #4
 8011a56:	9201      	str	r2, [sp, #4]
 8011a58:	9a02      	ldr	r2, [sp, #8]
 8011a5a:	9303      	str	r3, [sp, #12]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d80c      	bhi.n	8011a7a <__multiply+0x9e>
 8011a60:	2e00      	cmp	r6, #0
 8011a62:	dd03      	ble.n	8011a6c <__multiply+0x90>
 8011a64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d05a      	beq.n	8011b22 <__multiply+0x146>
 8011a6c:	6106      	str	r6, [r0, #16]
 8011a6e:	b005      	add	sp, #20
 8011a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a74:	f843 2b04 	str.w	r2, [r3], #4
 8011a78:	e7d8      	b.n	8011a2c <__multiply+0x50>
 8011a7a:	f8b3 a000 	ldrh.w	sl, [r3]
 8011a7e:	f1ba 0f00 	cmp.w	sl, #0
 8011a82:	d024      	beq.n	8011ace <__multiply+0xf2>
 8011a84:	f104 0e14 	add.w	lr, r4, #20
 8011a88:	46a9      	mov	r9, r5
 8011a8a:	f04f 0c00 	mov.w	ip, #0
 8011a8e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8011a92:	f8d9 1000 	ldr.w	r1, [r9]
 8011a96:	fa1f fb82 	uxth.w	fp, r2
 8011a9a:	b289      	uxth	r1, r1
 8011a9c:	fb0a 110b 	mla	r1, sl, fp, r1
 8011aa0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011aa4:	f8d9 2000 	ldr.w	r2, [r9]
 8011aa8:	4461      	add	r1, ip
 8011aaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011aae:	fb0a c20b 	mla	r2, sl, fp, ip
 8011ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011ab6:	b289      	uxth	r1, r1
 8011ab8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011abc:	4577      	cmp	r7, lr
 8011abe:	f849 1b04 	str.w	r1, [r9], #4
 8011ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011ac6:	d8e2      	bhi.n	8011a8e <__multiply+0xb2>
 8011ac8:	9a01      	ldr	r2, [sp, #4]
 8011aca:	f845 c002 	str.w	ip, [r5, r2]
 8011ace:	9a03      	ldr	r2, [sp, #12]
 8011ad0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	f1b9 0f00 	cmp.w	r9, #0
 8011ada:	d020      	beq.n	8011b1e <__multiply+0x142>
 8011adc:	6829      	ldr	r1, [r5, #0]
 8011ade:	f104 0c14 	add.w	ip, r4, #20
 8011ae2:	46ae      	mov	lr, r5
 8011ae4:	f04f 0a00 	mov.w	sl, #0
 8011ae8:	f8bc b000 	ldrh.w	fp, [ip]
 8011aec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011af0:	fb09 220b 	mla	r2, r9, fp, r2
 8011af4:	4492      	add	sl, r2
 8011af6:	b289      	uxth	r1, r1
 8011af8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011afc:	f84e 1b04 	str.w	r1, [lr], #4
 8011b00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011b04:	f8be 1000 	ldrh.w	r1, [lr]
 8011b08:	0c12      	lsrs	r2, r2, #16
 8011b0a:	fb09 1102 	mla	r1, r9, r2, r1
 8011b0e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011b12:	4567      	cmp	r7, ip
 8011b14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011b18:	d8e6      	bhi.n	8011ae8 <__multiply+0x10c>
 8011b1a:	9a01      	ldr	r2, [sp, #4]
 8011b1c:	50a9      	str	r1, [r5, r2]
 8011b1e:	3504      	adds	r5, #4
 8011b20:	e79a      	b.n	8011a58 <__multiply+0x7c>
 8011b22:	3e01      	subs	r6, #1
 8011b24:	e79c      	b.n	8011a60 <__multiply+0x84>
 8011b26:	bf00      	nop
 8011b28:	08013ae4 	.word	0x08013ae4
 8011b2c:	08013b87 	.word	0x08013b87

08011b30 <__pow5mult>:
 8011b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b34:	4615      	mov	r5, r2
 8011b36:	f012 0203 	ands.w	r2, r2, #3
 8011b3a:	4606      	mov	r6, r0
 8011b3c:	460f      	mov	r7, r1
 8011b3e:	d007      	beq.n	8011b50 <__pow5mult+0x20>
 8011b40:	4c25      	ldr	r4, [pc, #148]	; (8011bd8 <__pow5mult+0xa8>)
 8011b42:	3a01      	subs	r2, #1
 8011b44:	2300      	movs	r3, #0
 8011b46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011b4a:	f7ff fe51 	bl	80117f0 <__multadd>
 8011b4e:	4607      	mov	r7, r0
 8011b50:	10ad      	asrs	r5, r5, #2
 8011b52:	d03d      	beq.n	8011bd0 <__pow5mult+0xa0>
 8011b54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011b56:	b97c      	cbnz	r4, 8011b78 <__pow5mult+0x48>
 8011b58:	2010      	movs	r0, #16
 8011b5a:	f001 fb23 	bl	80131a4 <malloc>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	6270      	str	r0, [r6, #36]	; 0x24
 8011b62:	b928      	cbnz	r0, 8011b70 <__pow5mult+0x40>
 8011b64:	4b1d      	ldr	r3, [pc, #116]	; (8011bdc <__pow5mult+0xac>)
 8011b66:	481e      	ldr	r0, [pc, #120]	; (8011be0 <__pow5mult+0xb0>)
 8011b68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011b6c:	f001 fac8 	bl	8013100 <__assert_func>
 8011b70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011b74:	6004      	str	r4, [r0, #0]
 8011b76:	60c4      	str	r4, [r0, #12]
 8011b78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011b7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011b80:	b94c      	cbnz	r4, 8011b96 <__pow5mult+0x66>
 8011b82:	f240 2171 	movw	r1, #625	; 0x271
 8011b86:	4630      	mov	r0, r6
 8011b88:	f7ff ff12 	bl	80119b0 <__i2b>
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011b92:	4604      	mov	r4, r0
 8011b94:	6003      	str	r3, [r0, #0]
 8011b96:	f04f 0900 	mov.w	r9, #0
 8011b9a:	07eb      	lsls	r3, r5, #31
 8011b9c:	d50a      	bpl.n	8011bb4 <__pow5mult+0x84>
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	4622      	mov	r2, r4
 8011ba2:	4630      	mov	r0, r6
 8011ba4:	f7ff ff1a 	bl	80119dc <__multiply>
 8011ba8:	4639      	mov	r1, r7
 8011baa:	4680      	mov	r8, r0
 8011bac:	4630      	mov	r0, r6
 8011bae:	f7ff fdfd 	bl	80117ac <_Bfree>
 8011bb2:	4647      	mov	r7, r8
 8011bb4:	106d      	asrs	r5, r5, #1
 8011bb6:	d00b      	beq.n	8011bd0 <__pow5mult+0xa0>
 8011bb8:	6820      	ldr	r0, [r4, #0]
 8011bba:	b938      	cbnz	r0, 8011bcc <__pow5mult+0x9c>
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	4621      	mov	r1, r4
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	f7ff ff0b 	bl	80119dc <__multiply>
 8011bc6:	6020      	str	r0, [r4, #0]
 8011bc8:	f8c0 9000 	str.w	r9, [r0]
 8011bcc:	4604      	mov	r4, r0
 8011bce:	e7e4      	b.n	8011b9a <__pow5mult+0x6a>
 8011bd0:	4638      	mov	r0, r7
 8011bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bd6:	bf00      	nop
 8011bd8:	08013cd8 	.word	0x08013cd8
 8011bdc:	08013b70 	.word	0x08013b70
 8011be0:	08013b87 	.word	0x08013b87

08011be4 <__lshift>:
 8011be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011be8:	460c      	mov	r4, r1
 8011bea:	6849      	ldr	r1, [r1, #4]
 8011bec:	6923      	ldr	r3, [r4, #16]
 8011bee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011bf2:	68a3      	ldr	r3, [r4, #8]
 8011bf4:	4607      	mov	r7, r0
 8011bf6:	4691      	mov	r9, r2
 8011bf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011bfc:	f108 0601 	add.w	r6, r8, #1
 8011c00:	42b3      	cmp	r3, r6
 8011c02:	db0b      	blt.n	8011c1c <__lshift+0x38>
 8011c04:	4638      	mov	r0, r7
 8011c06:	f7ff fd91 	bl	801172c <_Balloc>
 8011c0a:	4605      	mov	r5, r0
 8011c0c:	b948      	cbnz	r0, 8011c22 <__lshift+0x3e>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	4b2a      	ldr	r3, [pc, #168]	; (8011cbc <__lshift+0xd8>)
 8011c12:	482b      	ldr	r0, [pc, #172]	; (8011cc0 <__lshift+0xdc>)
 8011c14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011c18:	f001 fa72 	bl	8013100 <__assert_func>
 8011c1c:	3101      	adds	r1, #1
 8011c1e:	005b      	lsls	r3, r3, #1
 8011c20:	e7ee      	b.n	8011c00 <__lshift+0x1c>
 8011c22:	2300      	movs	r3, #0
 8011c24:	f100 0114 	add.w	r1, r0, #20
 8011c28:	f100 0210 	add.w	r2, r0, #16
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	4553      	cmp	r3, sl
 8011c30:	db37      	blt.n	8011ca2 <__lshift+0xbe>
 8011c32:	6920      	ldr	r0, [r4, #16]
 8011c34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011c38:	f104 0314 	add.w	r3, r4, #20
 8011c3c:	f019 091f 	ands.w	r9, r9, #31
 8011c40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011c44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011c48:	d02f      	beq.n	8011caa <__lshift+0xc6>
 8011c4a:	f1c9 0e20 	rsb	lr, r9, #32
 8011c4e:	468a      	mov	sl, r1
 8011c50:	f04f 0c00 	mov.w	ip, #0
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	fa02 f209 	lsl.w	r2, r2, r9
 8011c5a:	ea42 020c 	orr.w	r2, r2, ip
 8011c5e:	f84a 2b04 	str.w	r2, [sl], #4
 8011c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c66:	4298      	cmp	r0, r3
 8011c68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011c6c:	d8f2      	bhi.n	8011c54 <__lshift+0x70>
 8011c6e:	1b03      	subs	r3, r0, r4
 8011c70:	3b15      	subs	r3, #21
 8011c72:	f023 0303 	bic.w	r3, r3, #3
 8011c76:	3304      	adds	r3, #4
 8011c78:	f104 0215 	add.w	r2, r4, #21
 8011c7c:	4290      	cmp	r0, r2
 8011c7e:	bf38      	it	cc
 8011c80:	2304      	movcc	r3, #4
 8011c82:	f841 c003 	str.w	ip, [r1, r3]
 8011c86:	f1bc 0f00 	cmp.w	ip, #0
 8011c8a:	d001      	beq.n	8011c90 <__lshift+0xac>
 8011c8c:	f108 0602 	add.w	r6, r8, #2
 8011c90:	3e01      	subs	r6, #1
 8011c92:	4638      	mov	r0, r7
 8011c94:	612e      	str	r6, [r5, #16]
 8011c96:	4621      	mov	r1, r4
 8011c98:	f7ff fd88 	bl	80117ac <_Bfree>
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca2:	f842 0f04 	str.w	r0, [r2, #4]!
 8011ca6:	3301      	adds	r3, #1
 8011ca8:	e7c1      	b.n	8011c2e <__lshift+0x4a>
 8011caa:	3904      	subs	r1, #4
 8011cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8011cb4:	4298      	cmp	r0, r3
 8011cb6:	d8f9      	bhi.n	8011cac <__lshift+0xc8>
 8011cb8:	e7ea      	b.n	8011c90 <__lshift+0xac>
 8011cba:	bf00      	nop
 8011cbc:	08013ae4 	.word	0x08013ae4
 8011cc0:	08013b87 	.word	0x08013b87

08011cc4 <__mcmp>:
 8011cc4:	b530      	push	{r4, r5, lr}
 8011cc6:	6902      	ldr	r2, [r0, #16]
 8011cc8:	690c      	ldr	r4, [r1, #16]
 8011cca:	1b12      	subs	r2, r2, r4
 8011ccc:	d10e      	bne.n	8011cec <__mcmp+0x28>
 8011cce:	f100 0314 	add.w	r3, r0, #20
 8011cd2:	3114      	adds	r1, #20
 8011cd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011cd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011cdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011ce0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ce4:	42a5      	cmp	r5, r4
 8011ce6:	d003      	beq.n	8011cf0 <__mcmp+0x2c>
 8011ce8:	d305      	bcc.n	8011cf6 <__mcmp+0x32>
 8011cea:	2201      	movs	r2, #1
 8011cec:	4610      	mov	r0, r2
 8011cee:	bd30      	pop	{r4, r5, pc}
 8011cf0:	4283      	cmp	r3, r0
 8011cf2:	d3f3      	bcc.n	8011cdc <__mcmp+0x18>
 8011cf4:	e7fa      	b.n	8011cec <__mcmp+0x28>
 8011cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cfa:	e7f7      	b.n	8011cec <__mcmp+0x28>

08011cfc <__mdiff>:
 8011cfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	460c      	mov	r4, r1
 8011d02:	4606      	mov	r6, r0
 8011d04:	4611      	mov	r1, r2
 8011d06:	4620      	mov	r0, r4
 8011d08:	4690      	mov	r8, r2
 8011d0a:	f7ff ffdb 	bl	8011cc4 <__mcmp>
 8011d0e:	1e05      	subs	r5, r0, #0
 8011d10:	d110      	bne.n	8011d34 <__mdiff+0x38>
 8011d12:	4629      	mov	r1, r5
 8011d14:	4630      	mov	r0, r6
 8011d16:	f7ff fd09 	bl	801172c <_Balloc>
 8011d1a:	b930      	cbnz	r0, 8011d2a <__mdiff+0x2e>
 8011d1c:	4b3a      	ldr	r3, [pc, #232]	; (8011e08 <__mdiff+0x10c>)
 8011d1e:	4602      	mov	r2, r0
 8011d20:	f240 2132 	movw	r1, #562	; 0x232
 8011d24:	4839      	ldr	r0, [pc, #228]	; (8011e0c <__mdiff+0x110>)
 8011d26:	f001 f9eb 	bl	8013100 <__assert_func>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011d30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d34:	bfa4      	itt	ge
 8011d36:	4643      	movge	r3, r8
 8011d38:	46a0      	movge	r8, r4
 8011d3a:	4630      	mov	r0, r6
 8011d3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011d40:	bfa6      	itte	ge
 8011d42:	461c      	movge	r4, r3
 8011d44:	2500      	movge	r5, #0
 8011d46:	2501      	movlt	r5, #1
 8011d48:	f7ff fcf0 	bl	801172c <_Balloc>
 8011d4c:	b920      	cbnz	r0, 8011d58 <__mdiff+0x5c>
 8011d4e:	4b2e      	ldr	r3, [pc, #184]	; (8011e08 <__mdiff+0x10c>)
 8011d50:	4602      	mov	r2, r0
 8011d52:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011d56:	e7e5      	b.n	8011d24 <__mdiff+0x28>
 8011d58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011d5c:	6926      	ldr	r6, [r4, #16]
 8011d5e:	60c5      	str	r5, [r0, #12]
 8011d60:	f104 0914 	add.w	r9, r4, #20
 8011d64:	f108 0514 	add.w	r5, r8, #20
 8011d68:	f100 0e14 	add.w	lr, r0, #20
 8011d6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011d70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011d74:	f108 0210 	add.w	r2, r8, #16
 8011d78:	46f2      	mov	sl, lr
 8011d7a:	2100      	movs	r1, #0
 8011d7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011d80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011d84:	fa1f f883 	uxth.w	r8, r3
 8011d88:	fa11 f18b 	uxtah	r1, r1, fp
 8011d8c:	0c1b      	lsrs	r3, r3, #16
 8011d8e:	eba1 0808 	sub.w	r8, r1, r8
 8011d92:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011d96:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011d9a:	fa1f f888 	uxth.w	r8, r8
 8011d9e:	1419      	asrs	r1, r3, #16
 8011da0:	454e      	cmp	r6, r9
 8011da2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011da6:	f84a 3b04 	str.w	r3, [sl], #4
 8011daa:	d8e7      	bhi.n	8011d7c <__mdiff+0x80>
 8011dac:	1b33      	subs	r3, r6, r4
 8011dae:	3b15      	subs	r3, #21
 8011db0:	f023 0303 	bic.w	r3, r3, #3
 8011db4:	3304      	adds	r3, #4
 8011db6:	3415      	adds	r4, #21
 8011db8:	42a6      	cmp	r6, r4
 8011dba:	bf38      	it	cc
 8011dbc:	2304      	movcc	r3, #4
 8011dbe:	441d      	add	r5, r3
 8011dc0:	4473      	add	r3, lr
 8011dc2:	469e      	mov	lr, r3
 8011dc4:	462e      	mov	r6, r5
 8011dc6:	4566      	cmp	r6, ip
 8011dc8:	d30e      	bcc.n	8011de8 <__mdiff+0xec>
 8011dca:	f10c 0203 	add.w	r2, ip, #3
 8011dce:	1b52      	subs	r2, r2, r5
 8011dd0:	f022 0203 	bic.w	r2, r2, #3
 8011dd4:	3d03      	subs	r5, #3
 8011dd6:	45ac      	cmp	ip, r5
 8011dd8:	bf38      	it	cc
 8011dda:	2200      	movcc	r2, #0
 8011ddc:	441a      	add	r2, r3
 8011dde:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011de2:	b17b      	cbz	r3, 8011e04 <__mdiff+0x108>
 8011de4:	6107      	str	r7, [r0, #16]
 8011de6:	e7a3      	b.n	8011d30 <__mdiff+0x34>
 8011de8:	f856 8b04 	ldr.w	r8, [r6], #4
 8011dec:	fa11 f288 	uxtah	r2, r1, r8
 8011df0:	1414      	asrs	r4, r2, #16
 8011df2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011df6:	b292      	uxth	r2, r2
 8011df8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011dfc:	f84e 2b04 	str.w	r2, [lr], #4
 8011e00:	1421      	asrs	r1, r4, #16
 8011e02:	e7e0      	b.n	8011dc6 <__mdiff+0xca>
 8011e04:	3f01      	subs	r7, #1
 8011e06:	e7ea      	b.n	8011dde <__mdiff+0xe2>
 8011e08:	08013ae4 	.word	0x08013ae4
 8011e0c:	08013b87 	.word	0x08013b87

08011e10 <__ulp>:
 8011e10:	b082      	sub	sp, #8
 8011e12:	ed8d 0b00 	vstr	d0, [sp]
 8011e16:	9b01      	ldr	r3, [sp, #4]
 8011e18:	4912      	ldr	r1, [pc, #72]	; (8011e64 <__ulp+0x54>)
 8011e1a:	4019      	ands	r1, r3
 8011e1c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011e20:	2900      	cmp	r1, #0
 8011e22:	dd05      	ble.n	8011e30 <__ulp+0x20>
 8011e24:	2200      	movs	r2, #0
 8011e26:	460b      	mov	r3, r1
 8011e28:	ec43 2b10 	vmov	d0, r2, r3
 8011e2c:	b002      	add	sp, #8
 8011e2e:	4770      	bx	lr
 8011e30:	4249      	negs	r1, r1
 8011e32:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011e36:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011e3a:	f04f 0200 	mov.w	r2, #0
 8011e3e:	f04f 0300 	mov.w	r3, #0
 8011e42:	da04      	bge.n	8011e4e <__ulp+0x3e>
 8011e44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011e48:	fa41 f300 	asr.w	r3, r1, r0
 8011e4c:	e7ec      	b.n	8011e28 <__ulp+0x18>
 8011e4e:	f1a0 0114 	sub.w	r1, r0, #20
 8011e52:	291e      	cmp	r1, #30
 8011e54:	bfda      	itte	le
 8011e56:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011e5a:	fa20 f101 	lsrle.w	r1, r0, r1
 8011e5e:	2101      	movgt	r1, #1
 8011e60:	460a      	mov	r2, r1
 8011e62:	e7e1      	b.n	8011e28 <__ulp+0x18>
 8011e64:	7ff00000 	.word	0x7ff00000

08011e68 <__b2d>:
 8011e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e6a:	6905      	ldr	r5, [r0, #16]
 8011e6c:	f100 0714 	add.w	r7, r0, #20
 8011e70:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011e74:	1f2e      	subs	r6, r5, #4
 8011e76:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011e7a:	4620      	mov	r0, r4
 8011e7c:	f7ff fd48 	bl	8011910 <__hi0bits>
 8011e80:	f1c0 0320 	rsb	r3, r0, #32
 8011e84:	280a      	cmp	r0, #10
 8011e86:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011f04 <__b2d+0x9c>
 8011e8a:	600b      	str	r3, [r1, #0]
 8011e8c:	dc14      	bgt.n	8011eb8 <__b2d+0x50>
 8011e8e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011e92:	fa24 f10e 	lsr.w	r1, r4, lr
 8011e96:	42b7      	cmp	r7, r6
 8011e98:	ea41 030c 	orr.w	r3, r1, ip
 8011e9c:	bf34      	ite	cc
 8011e9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011ea2:	2100      	movcs	r1, #0
 8011ea4:	3015      	adds	r0, #21
 8011ea6:	fa04 f000 	lsl.w	r0, r4, r0
 8011eaa:	fa21 f10e 	lsr.w	r1, r1, lr
 8011eae:	ea40 0201 	orr.w	r2, r0, r1
 8011eb2:	ec43 2b10 	vmov	d0, r2, r3
 8011eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011eb8:	42b7      	cmp	r7, r6
 8011eba:	bf3a      	itte	cc
 8011ebc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011ec0:	f1a5 0608 	subcc.w	r6, r5, #8
 8011ec4:	2100      	movcs	r1, #0
 8011ec6:	380b      	subs	r0, #11
 8011ec8:	d017      	beq.n	8011efa <__b2d+0x92>
 8011eca:	f1c0 0c20 	rsb	ip, r0, #32
 8011ece:	fa04 f500 	lsl.w	r5, r4, r0
 8011ed2:	42be      	cmp	r6, r7
 8011ed4:	fa21 f40c 	lsr.w	r4, r1, ip
 8011ed8:	ea45 0504 	orr.w	r5, r5, r4
 8011edc:	bf8c      	ite	hi
 8011ede:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011ee2:	2400      	movls	r4, #0
 8011ee4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011ee8:	fa01 f000 	lsl.w	r0, r1, r0
 8011eec:	fa24 f40c 	lsr.w	r4, r4, ip
 8011ef0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011ef4:	ea40 0204 	orr.w	r2, r0, r4
 8011ef8:	e7db      	b.n	8011eb2 <__b2d+0x4a>
 8011efa:	ea44 030c 	orr.w	r3, r4, ip
 8011efe:	460a      	mov	r2, r1
 8011f00:	e7d7      	b.n	8011eb2 <__b2d+0x4a>
 8011f02:	bf00      	nop
 8011f04:	3ff00000 	.word	0x3ff00000

08011f08 <__d2b>:
 8011f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	4689      	mov	r9, r1
 8011f0e:	2101      	movs	r1, #1
 8011f10:	ec57 6b10 	vmov	r6, r7, d0
 8011f14:	4690      	mov	r8, r2
 8011f16:	f7ff fc09 	bl	801172c <_Balloc>
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	b930      	cbnz	r0, 8011f2c <__d2b+0x24>
 8011f1e:	4602      	mov	r2, r0
 8011f20:	4b25      	ldr	r3, [pc, #148]	; (8011fb8 <__d2b+0xb0>)
 8011f22:	4826      	ldr	r0, [pc, #152]	; (8011fbc <__d2b+0xb4>)
 8011f24:	f240 310a 	movw	r1, #778	; 0x30a
 8011f28:	f001 f8ea 	bl	8013100 <__assert_func>
 8011f2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011f30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011f34:	bb35      	cbnz	r5, 8011f84 <__d2b+0x7c>
 8011f36:	2e00      	cmp	r6, #0
 8011f38:	9301      	str	r3, [sp, #4]
 8011f3a:	d028      	beq.n	8011f8e <__d2b+0x86>
 8011f3c:	4668      	mov	r0, sp
 8011f3e:	9600      	str	r6, [sp, #0]
 8011f40:	f7ff fd06 	bl	8011950 <__lo0bits>
 8011f44:	9900      	ldr	r1, [sp, #0]
 8011f46:	b300      	cbz	r0, 8011f8a <__d2b+0x82>
 8011f48:	9a01      	ldr	r2, [sp, #4]
 8011f4a:	f1c0 0320 	rsb	r3, r0, #32
 8011f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8011f52:	430b      	orrs	r3, r1
 8011f54:	40c2      	lsrs	r2, r0
 8011f56:	6163      	str	r3, [r4, #20]
 8011f58:	9201      	str	r2, [sp, #4]
 8011f5a:	9b01      	ldr	r3, [sp, #4]
 8011f5c:	61a3      	str	r3, [r4, #24]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	bf14      	ite	ne
 8011f62:	2202      	movne	r2, #2
 8011f64:	2201      	moveq	r2, #1
 8011f66:	6122      	str	r2, [r4, #16]
 8011f68:	b1d5      	cbz	r5, 8011fa0 <__d2b+0x98>
 8011f6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011f6e:	4405      	add	r5, r0
 8011f70:	f8c9 5000 	str.w	r5, [r9]
 8011f74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011f78:	f8c8 0000 	str.w	r0, [r8]
 8011f7c:	4620      	mov	r0, r4
 8011f7e:	b003      	add	sp, #12
 8011f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011f88:	e7d5      	b.n	8011f36 <__d2b+0x2e>
 8011f8a:	6161      	str	r1, [r4, #20]
 8011f8c:	e7e5      	b.n	8011f5a <__d2b+0x52>
 8011f8e:	a801      	add	r0, sp, #4
 8011f90:	f7ff fcde 	bl	8011950 <__lo0bits>
 8011f94:	9b01      	ldr	r3, [sp, #4]
 8011f96:	6163      	str	r3, [r4, #20]
 8011f98:	2201      	movs	r2, #1
 8011f9a:	6122      	str	r2, [r4, #16]
 8011f9c:	3020      	adds	r0, #32
 8011f9e:	e7e3      	b.n	8011f68 <__d2b+0x60>
 8011fa0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011fa4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011fa8:	f8c9 0000 	str.w	r0, [r9]
 8011fac:	6918      	ldr	r0, [r3, #16]
 8011fae:	f7ff fcaf 	bl	8011910 <__hi0bits>
 8011fb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011fb6:	e7df      	b.n	8011f78 <__d2b+0x70>
 8011fb8:	08013ae4 	.word	0x08013ae4
 8011fbc:	08013b87 	.word	0x08013b87

08011fc0 <__ratio>:
 8011fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fc4:	4688      	mov	r8, r1
 8011fc6:	4669      	mov	r1, sp
 8011fc8:	4681      	mov	r9, r0
 8011fca:	f7ff ff4d 	bl	8011e68 <__b2d>
 8011fce:	a901      	add	r1, sp, #4
 8011fd0:	4640      	mov	r0, r8
 8011fd2:	ec55 4b10 	vmov	r4, r5, d0
 8011fd6:	f7ff ff47 	bl	8011e68 <__b2d>
 8011fda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011fde:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011fe2:	eba3 0c02 	sub.w	ip, r3, r2
 8011fe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011fea:	1a9b      	subs	r3, r3, r2
 8011fec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011ff0:	ec51 0b10 	vmov	r0, r1, d0
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	bfd6      	itet	le
 8011ff8:	460a      	movle	r2, r1
 8011ffa:	462a      	movgt	r2, r5
 8011ffc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012000:	468b      	mov	fp, r1
 8012002:	462f      	mov	r7, r5
 8012004:	bfd4      	ite	le
 8012006:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801200a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801200e:	4620      	mov	r0, r4
 8012010:	ee10 2a10 	vmov	r2, s0
 8012014:	465b      	mov	r3, fp
 8012016:	4639      	mov	r1, r7
 8012018:	f7ee fc28 	bl	800086c <__aeabi_ddiv>
 801201c:	ec41 0b10 	vmov	d0, r0, r1
 8012020:	b003      	add	sp, #12
 8012022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012026 <__copybits>:
 8012026:	3901      	subs	r1, #1
 8012028:	b570      	push	{r4, r5, r6, lr}
 801202a:	1149      	asrs	r1, r1, #5
 801202c:	6914      	ldr	r4, [r2, #16]
 801202e:	3101      	adds	r1, #1
 8012030:	f102 0314 	add.w	r3, r2, #20
 8012034:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012038:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801203c:	1f05      	subs	r5, r0, #4
 801203e:	42a3      	cmp	r3, r4
 8012040:	d30c      	bcc.n	801205c <__copybits+0x36>
 8012042:	1aa3      	subs	r3, r4, r2
 8012044:	3b11      	subs	r3, #17
 8012046:	f023 0303 	bic.w	r3, r3, #3
 801204a:	3211      	adds	r2, #17
 801204c:	42a2      	cmp	r2, r4
 801204e:	bf88      	it	hi
 8012050:	2300      	movhi	r3, #0
 8012052:	4418      	add	r0, r3
 8012054:	2300      	movs	r3, #0
 8012056:	4288      	cmp	r0, r1
 8012058:	d305      	bcc.n	8012066 <__copybits+0x40>
 801205a:	bd70      	pop	{r4, r5, r6, pc}
 801205c:	f853 6b04 	ldr.w	r6, [r3], #4
 8012060:	f845 6f04 	str.w	r6, [r5, #4]!
 8012064:	e7eb      	b.n	801203e <__copybits+0x18>
 8012066:	f840 3b04 	str.w	r3, [r0], #4
 801206a:	e7f4      	b.n	8012056 <__copybits+0x30>

0801206c <__any_on>:
 801206c:	f100 0214 	add.w	r2, r0, #20
 8012070:	6900      	ldr	r0, [r0, #16]
 8012072:	114b      	asrs	r3, r1, #5
 8012074:	4298      	cmp	r0, r3
 8012076:	b510      	push	{r4, lr}
 8012078:	db11      	blt.n	801209e <__any_on+0x32>
 801207a:	dd0a      	ble.n	8012092 <__any_on+0x26>
 801207c:	f011 011f 	ands.w	r1, r1, #31
 8012080:	d007      	beq.n	8012092 <__any_on+0x26>
 8012082:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012086:	fa24 f001 	lsr.w	r0, r4, r1
 801208a:	fa00 f101 	lsl.w	r1, r0, r1
 801208e:	428c      	cmp	r4, r1
 8012090:	d10b      	bne.n	80120aa <__any_on+0x3e>
 8012092:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012096:	4293      	cmp	r3, r2
 8012098:	d803      	bhi.n	80120a2 <__any_on+0x36>
 801209a:	2000      	movs	r0, #0
 801209c:	bd10      	pop	{r4, pc}
 801209e:	4603      	mov	r3, r0
 80120a0:	e7f7      	b.n	8012092 <__any_on+0x26>
 80120a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80120a6:	2900      	cmp	r1, #0
 80120a8:	d0f5      	beq.n	8012096 <__any_on+0x2a>
 80120aa:	2001      	movs	r0, #1
 80120ac:	e7f6      	b.n	801209c <__any_on+0x30>

080120ae <_calloc_r>:
 80120ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120b0:	fba1 2402 	umull	r2, r4, r1, r2
 80120b4:	b94c      	cbnz	r4, 80120ca <_calloc_r+0x1c>
 80120b6:	4611      	mov	r1, r2
 80120b8:	9201      	str	r2, [sp, #4]
 80120ba:	f000 f87b 	bl	80121b4 <_malloc_r>
 80120be:	9a01      	ldr	r2, [sp, #4]
 80120c0:	4605      	mov	r5, r0
 80120c2:	b930      	cbnz	r0, 80120d2 <_calloc_r+0x24>
 80120c4:	4628      	mov	r0, r5
 80120c6:	b003      	add	sp, #12
 80120c8:	bd30      	pop	{r4, r5, pc}
 80120ca:	220c      	movs	r2, #12
 80120cc:	6002      	str	r2, [r0, #0]
 80120ce:	2500      	movs	r5, #0
 80120d0:	e7f8      	b.n	80120c4 <_calloc_r+0x16>
 80120d2:	4621      	mov	r1, r4
 80120d4:	f7fd fa7a 	bl	800f5cc <memset>
 80120d8:	e7f4      	b.n	80120c4 <_calloc_r+0x16>
	...

080120dc <_free_r>:
 80120dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80120de:	2900      	cmp	r1, #0
 80120e0:	d044      	beq.n	801216c <_free_r+0x90>
 80120e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120e6:	9001      	str	r0, [sp, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	f1a1 0404 	sub.w	r4, r1, #4
 80120ee:	bfb8      	it	lt
 80120f0:	18e4      	addlt	r4, r4, r3
 80120f2:	f001 f879 	bl	80131e8 <__malloc_lock>
 80120f6:	4a1e      	ldr	r2, [pc, #120]	; (8012170 <_free_r+0x94>)
 80120f8:	9801      	ldr	r0, [sp, #4]
 80120fa:	6813      	ldr	r3, [r2, #0]
 80120fc:	b933      	cbnz	r3, 801210c <_free_r+0x30>
 80120fe:	6063      	str	r3, [r4, #4]
 8012100:	6014      	str	r4, [r2, #0]
 8012102:	b003      	add	sp, #12
 8012104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012108:	f001 b874 	b.w	80131f4 <__malloc_unlock>
 801210c:	42a3      	cmp	r3, r4
 801210e:	d908      	bls.n	8012122 <_free_r+0x46>
 8012110:	6825      	ldr	r5, [r4, #0]
 8012112:	1961      	adds	r1, r4, r5
 8012114:	428b      	cmp	r3, r1
 8012116:	bf01      	itttt	eq
 8012118:	6819      	ldreq	r1, [r3, #0]
 801211a:	685b      	ldreq	r3, [r3, #4]
 801211c:	1949      	addeq	r1, r1, r5
 801211e:	6021      	streq	r1, [r4, #0]
 8012120:	e7ed      	b.n	80120fe <_free_r+0x22>
 8012122:	461a      	mov	r2, r3
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	b10b      	cbz	r3, 801212c <_free_r+0x50>
 8012128:	42a3      	cmp	r3, r4
 801212a:	d9fa      	bls.n	8012122 <_free_r+0x46>
 801212c:	6811      	ldr	r1, [r2, #0]
 801212e:	1855      	adds	r5, r2, r1
 8012130:	42a5      	cmp	r5, r4
 8012132:	d10b      	bne.n	801214c <_free_r+0x70>
 8012134:	6824      	ldr	r4, [r4, #0]
 8012136:	4421      	add	r1, r4
 8012138:	1854      	adds	r4, r2, r1
 801213a:	42a3      	cmp	r3, r4
 801213c:	6011      	str	r1, [r2, #0]
 801213e:	d1e0      	bne.n	8012102 <_free_r+0x26>
 8012140:	681c      	ldr	r4, [r3, #0]
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	6053      	str	r3, [r2, #4]
 8012146:	4421      	add	r1, r4
 8012148:	6011      	str	r1, [r2, #0]
 801214a:	e7da      	b.n	8012102 <_free_r+0x26>
 801214c:	d902      	bls.n	8012154 <_free_r+0x78>
 801214e:	230c      	movs	r3, #12
 8012150:	6003      	str	r3, [r0, #0]
 8012152:	e7d6      	b.n	8012102 <_free_r+0x26>
 8012154:	6825      	ldr	r5, [r4, #0]
 8012156:	1961      	adds	r1, r4, r5
 8012158:	428b      	cmp	r3, r1
 801215a:	bf04      	itt	eq
 801215c:	6819      	ldreq	r1, [r3, #0]
 801215e:	685b      	ldreq	r3, [r3, #4]
 8012160:	6063      	str	r3, [r4, #4]
 8012162:	bf04      	itt	eq
 8012164:	1949      	addeq	r1, r1, r5
 8012166:	6021      	streq	r1, [r4, #0]
 8012168:	6054      	str	r4, [r2, #4]
 801216a:	e7ca      	b.n	8012102 <_free_r+0x26>
 801216c:	b003      	add	sp, #12
 801216e:	bd30      	pop	{r4, r5, pc}
 8012170:	200027a4 	.word	0x200027a4

08012174 <sbrk_aligned>:
 8012174:	b570      	push	{r4, r5, r6, lr}
 8012176:	4e0e      	ldr	r6, [pc, #56]	; (80121b0 <sbrk_aligned+0x3c>)
 8012178:	460c      	mov	r4, r1
 801217a:	6831      	ldr	r1, [r6, #0]
 801217c:	4605      	mov	r5, r0
 801217e:	b911      	cbnz	r1, 8012186 <sbrk_aligned+0x12>
 8012180:	f000 feba 	bl	8012ef8 <_sbrk_r>
 8012184:	6030      	str	r0, [r6, #0]
 8012186:	4621      	mov	r1, r4
 8012188:	4628      	mov	r0, r5
 801218a:	f000 feb5 	bl	8012ef8 <_sbrk_r>
 801218e:	1c43      	adds	r3, r0, #1
 8012190:	d00a      	beq.n	80121a8 <sbrk_aligned+0x34>
 8012192:	1cc4      	adds	r4, r0, #3
 8012194:	f024 0403 	bic.w	r4, r4, #3
 8012198:	42a0      	cmp	r0, r4
 801219a:	d007      	beq.n	80121ac <sbrk_aligned+0x38>
 801219c:	1a21      	subs	r1, r4, r0
 801219e:	4628      	mov	r0, r5
 80121a0:	f000 feaa 	bl	8012ef8 <_sbrk_r>
 80121a4:	3001      	adds	r0, #1
 80121a6:	d101      	bne.n	80121ac <sbrk_aligned+0x38>
 80121a8:	f04f 34ff 	mov.w	r4, #4294967295
 80121ac:	4620      	mov	r0, r4
 80121ae:	bd70      	pop	{r4, r5, r6, pc}
 80121b0:	200027a8 	.word	0x200027a8

080121b4 <_malloc_r>:
 80121b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121b8:	1ccd      	adds	r5, r1, #3
 80121ba:	f025 0503 	bic.w	r5, r5, #3
 80121be:	3508      	adds	r5, #8
 80121c0:	2d0c      	cmp	r5, #12
 80121c2:	bf38      	it	cc
 80121c4:	250c      	movcc	r5, #12
 80121c6:	2d00      	cmp	r5, #0
 80121c8:	4607      	mov	r7, r0
 80121ca:	db01      	blt.n	80121d0 <_malloc_r+0x1c>
 80121cc:	42a9      	cmp	r1, r5
 80121ce:	d905      	bls.n	80121dc <_malloc_r+0x28>
 80121d0:	230c      	movs	r3, #12
 80121d2:	603b      	str	r3, [r7, #0]
 80121d4:	2600      	movs	r6, #0
 80121d6:	4630      	mov	r0, r6
 80121d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121dc:	4e2e      	ldr	r6, [pc, #184]	; (8012298 <_malloc_r+0xe4>)
 80121de:	f001 f803 	bl	80131e8 <__malloc_lock>
 80121e2:	6833      	ldr	r3, [r6, #0]
 80121e4:	461c      	mov	r4, r3
 80121e6:	bb34      	cbnz	r4, 8012236 <_malloc_r+0x82>
 80121e8:	4629      	mov	r1, r5
 80121ea:	4638      	mov	r0, r7
 80121ec:	f7ff ffc2 	bl	8012174 <sbrk_aligned>
 80121f0:	1c43      	adds	r3, r0, #1
 80121f2:	4604      	mov	r4, r0
 80121f4:	d14d      	bne.n	8012292 <_malloc_r+0xde>
 80121f6:	6834      	ldr	r4, [r6, #0]
 80121f8:	4626      	mov	r6, r4
 80121fa:	2e00      	cmp	r6, #0
 80121fc:	d140      	bne.n	8012280 <_malloc_r+0xcc>
 80121fe:	6823      	ldr	r3, [r4, #0]
 8012200:	4631      	mov	r1, r6
 8012202:	4638      	mov	r0, r7
 8012204:	eb04 0803 	add.w	r8, r4, r3
 8012208:	f000 fe76 	bl	8012ef8 <_sbrk_r>
 801220c:	4580      	cmp	r8, r0
 801220e:	d13a      	bne.n	8012286 <_malloc_r+0xd2>
 8012210:	6821      	ldr	r1, [r4, #0]
 8012212:	3503      	adds	r5, #3
 8012214:	1a6d      	subs	r5, r5, r1
 8012216:	f025 0503 	bic.w	r5, r5, #3
 801221a:	3508      	adds	r5, #8
 801221c:	2d0c      	cmp	r5, #12
 801221e:	bf38      	it	cc
 8012220:	250c      	movcc	r5, #12
 8012222:	4629      	mov	r1, r5
 8012224:	4638      	mov	r0, r7
 8012226:	f7ff ffa5 	bl	8012174 <sbrk_aligned>
 801222a:	3001      	adds	r0, #1
 801222c:	d02b      	beq.n	8012286 <_malloc_r+0xd2>
 801222e:	6823      	ldr	r3, [r4, #0]
 8012230:	442b      	add	r3, r5
 8012232:	6023      	str	r3, [r4, #0]
 8012234:	e00e      	b.n	8012254 <_malloc_r+0xa0>
 8012236:	6822      	ldr	r2, [r4, #0]
 8012238:	1b52      	subs	r2, r2, r5
 801223a:	d41e      	bmi.n	801227a <_malloc_r+0xc6>
 801223c:	2a0b      	cmp	r2, #11
 801223e:	d916      	bls.n	801226e <_malloc_r+0xba>
 8012240:	1961      	adds	r1, r4, r5
 8012242:	42a3      	cmp	r3, r4
 8012244:	6025      	str	r5, [r4, #0]
 8012246:	bf18      	it	ne
 8012248:	6059      	strne	r1, [r3, #4]
 801224a:	6863      	ldr	r3, [r4, #4]
 801224c:	bf08      	it	eq
 801224e:	6031      	streq	r1, [r6, #0]
 8012250:	5162      	str	r2, [r4, r5]
 8012252:	604b      	str	r3, [r1, #4]
 8012254:	4638      	mov	r0, r7
 8012256:	f104 060b 	add.w	r6, r4, #11
 801225a:	f000 ffcb 	bl	80131f4 <__malloc_unlock>
 801225e:	f026 0607 	bic.w	r6, r6, #7
 8012262:	1d23      	adds	r3, r4, #4
 8012264:	1af2      	subs	r2, r6, r3
 8012266:	d0b6      	beq.n	80121d6 <_malloc_r+0x22>
 8012268:	1b9b      	subs	r3, r3, r6
 801226a:	50a3      	str	r3, [r4, r2]
 801226c:	e7b3      	b.n	80121d6 <_malloc_r+0x22>
 801226e:	6862      	ldr	r2, [r4, #4]
 8012270:	42a3      	cmp	r3, r4
 8012272:	bf0c      	ite	eq
 8012274:	6032      	streq	r2, [r6, #0]
 8012276:	605a      	strne	r2, [r3, #4]
 8012278:	e7ec      	b.n	8012254 <_malloc_r+0xa0>
 801227a:	4623      	mov	r3, r4
 801227c:	6864      	ldr	r4, [r4, #4]
 801227e:	e7b2      	b.n	80121e6 <_malloc_r+0x32>
 8012280:	4634      	mov	r4, r6
 8012282:	6876      	ldr	r6, [r6, #4]
 8012284:	e7b9      	b.n	80121fa <_malloc_r+0x46>
 8012286:	230c      	movs	r3, #12
 8012288:	603b      	str	r3, [r7, #0]
 801228a:	4638      	mov	r0, r7
 801228c:	f000 ffb2 	bl	80131f4 <__malloc_unlock>
 8012290:	e7a1      	b.n	80121d6 <_malloc_r+0x22>
 8012292:	6025      	str	r5, [r4, #0]
 8012294:	e7de      	b.n	8012254 <_malloc_r+0xa0>
 8012296:	bf00      	nop
 8012298:	200027a4 	.word	0x200027a4

0801229c <__ssputs_r>:
 801229c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122a0:	688e      	ldr	r6, [r1, #8]
 80122a2:	429e      	cmp	r6, r3
 80122a4:	4682      	mov	sl, r0
 80122a6:	460c      	mov	r4, r1
 80122a8:	4690      	mov	r8, r2
 80122aa:	461f      	mov	r7, r3
 80122ac:	d838      	bhi.n	8012320 <__ssputs_r+0x84>
 80122ae:	898a      	ldrh	r2, [r1, #12]
 80122b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80122b4:	d032      	beq.n	801231c <__ssputs_r+0x80>
 80122b6:	6825      	ldr	r5, [r4, #0]
 80122b8:	6909      	ldr	r1, [r1, #16]
 80122ba:	eba5 0901 	sub.w	r9, r5, r1
 80122be:	6965      	ldr	r5, [r4, #20]
 80122c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80122c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80122c8:	3301      	adds	r3, #1
 80122ca:	444b      	add	r3, r9
 80122cc:	106d      	asrs	r5, r5, #1
 80122ce:	429d      	cmp	r5, r3
 80122d0:	bf38      	it	cc
 80122d2:	461d      	movcc	r5, r3
 80122d4:	0553      	lsls	r3, r2, #21
 80122d6:	d531      	bpl.n	801233c <__ssputs_r+0xa0>
 80122d8:	4629      	mov	r1, r5
 80122da:	f7ff ff6b 	bl	80121b4 <_malloc_r>
 80122de:	4606      	mov	r6, r0
 80122e0:	b950      	cbnz	r0, 80122f8 <__ssputs_r+0x5c>
 80122e2:	230c      	movs	r3, #12
 80122e4:	f8ca 3000 	str.w	r3, [sl]
 80122e8:	89a3      	ldrh	r3, [r4, #12]
 80122ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122ee:	81a3      	strh	r3, [r4, #12]
 80122f0:	f04f 30ff 	mov.w	r0, #4294967295
 80122f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122f8:	6921      	ldr	r1, [r4, #16]
 80122fa:	464a      	mov	r2, r9
 80122fc:	f7fd f958 	bl	800f5b0 <memcpy>
 8012300:	89a3      	ldrh	r3, [r4, #12]
 8012302:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801230a:	81a3      	strh	r3, [r4, #12]
 801230c:	6126      	str	r6, [r4, #16]
 801230e:	6165      	str	r5, [r4, #20]
 8012310:	444e      	add	r6, r9
 8012312:	eba5 0509 	sub.w	r5, r5, r9
 8012316:	6026      	str	r6, [r4, #0]
 8012318:	60a5      	str	r5, [r4, #8]
 801231a:	463e      	mov	r6, r7
 801231c:	42be      	cmp	r6, r7
 801231e:	d900      	bls.n	8012322 <__ssputs_r+0x86>
 8012320:	463e      	mov	r6, r7
 8012322:	6820      	ldr	r0, [r4, #0]
 8012324:	4632      	mov	r2, r6
 8012326:	4641      	mov	r1, r8
 8012328:	f000 ff44 	bl	80131b4 <memmove>
 801232c:	68a3      	ldr	r3, [r4, #8]
 801232e:	1b9b      	subs	r3, r3, r6
 8012330:	60a3      	str	r3, [r4, #8]
 8012332:	6823      	ldr	r3, [r4, #0]
 8012334:	4433      	add	r3, r6
 8012336:	6023      	str	r3, [r4, #0]
 8012338:	2000      	movs	r0, #0
 801233a:	e7db      	b.n	80122f4 <__ssputs_r+0x58>
 801233c:	462a      	mov	r2, r5
 801233e:	f000 ff5f 	bl	8013200 <_realloc_r>
 8012342:	4606      	mov	r6, r0
 8012344:	2800      	cmp	r0, #0
 8012346:	d1e1      	bne.n	801230c <__ssputs_r+0x70>
 8012348:	6921      	ldr	r1, [r4, #16]
 801234a:	4650      	mov	r0, sl
 801234c:	f7ff fec6 	bl	80120dc <_free_r>
 8012350:	e7c7      	b.n	80122e2 <__ssputs_r+0x46>
	...

08012354 <_svfiprintf_r>:
 8012354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012358:	4698      	mov	r8, r3
 801235a:	898b      	ldrh	r3, [r1, #12]
 801235c:	061b      	lsls	r3, r3, #24
 801235e:	b09d      	sub	sp, #116	; 0x74
 8012360:	4607      	mov	r7, r0
 8012362:	460d      	mov	r5, r1
 8012364:	4614      	mov	r4, r2
 8012366:	d50e      	bpl.n	8012386 <_svfiprintf_r+0x32>
 8012368:	690b      	ldr	r3, [r1, #16]
 801236a:	b963      	cbnz	r3, 8012386 <_svfiprintf_r+0x32>
 801236c:	2140      	movs	r1, #64	; 0x40
 801236e:	f7ff ff21 	bl	80121b4 <_malloc_r>
 8012372:	6028      	str	r0, [r5, #0]
 8012374:	6128      	str	r0, [r5, #16]
 8012376:	b920      	cbnz	r0, 8012382 <_svfiprintf_r+0x2e>
 8012378:	230c      	movs	r3, #12
 801237a:	603b      	str	r3, [r7, #0]
 801237c:	f04f 30ff 	mov.w	r0, #4294967295
 8012380:	e0d1      	b.n	8012526 <_svfiprintf_r+0x1d2>
 8012382:	2340      	movs	r3, #64	; 0x40
 8012384:	616b      	str	r3, [r5, #20]
 8012386:	2300      	movs	r3, #0
 8012388:	9309      	str	r3, [sp, #36]	; 0x24
 801238a:	2320      	movs	r3, #32
 801238c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012390:	f8cd 800c 	str.w	r8, [sp, #12]
 8012394:	2330      	movs	r3, #48	; 0x30
 8012396:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012540 <_svfiprintf_r+0x1ec>
 801239a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801239e:	f04f 0901 	mov.w	r9, #1
 80123a2:	4623      	mov	r3, r4
 80123a4:	469a      	mov	sl, r3
 80123a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123aa:	b10a      	cbz	r2, 80123b0 <_svfiprintf_r+0x5c>
 80123ac:	2a25      	cmp	r2, #37	; 0x25
 80123ae:	d1f9      	bne.n	80123a4 <_svfiprintf_r+0x50>
 80123b0:	ebba 0b04 	subs.w	fp, sl, r4
 80123b4:	d00b      	beq.n	80123ce <_svfiprintf_r+0x7a>
 80123b6:	465b      	mov	r3, fp
 80123b8:	4622      	mov	r2, r4
 80123ba:	4629      	mov	r1, r5
 80123bc:	4638      	mov	r0, r7
 80123be:	f7ff ff6d 	bl	801229c <__ssputs_r>
 80123c2:	3001      	adds	r0, #1
 80123c4:	f000 80aa 	beq.w	801251c <_svfiprintf_r+0x1c8>
 80123c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80123ca:	445a      	add	r2, fp
 80123cc:	9209      	str	r2, [sp, #36]	; 0x24
 80123ce:	f89a 3000 	ldrb.w	r3, [sl]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	f000 80a2 	beq.w	801251c <_svfiprintf_r+0x1c8>
 80123d8:	2300      	movs	r3, #0
 80123da:	f04f 32ff 	mov.w	r2, #4294967295
 80123de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123e2:	f10a 0a01 	add.w	sl, sl, #1
 80123e6:	9304      	str	r3, [sp, #16]
 80123e8:	9307      	str	r3, [sp, #28]
 80123ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80123ee:	931a      	str	r3, [sp, #104]	; 0x68
 80123f0:	4654      	mov	r4, sl
 80123f2:	2205      	movs	r2, #5
 80123f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123f8:	4851      	ldr	r0, [pc, #324]	; (8012540 <_svfiprintf_r+0x1ec>)
 80123fa:	f7ed ff01 	bl	8000200 <memchr>
 80123fe:	9a04      	ldr	r2, [sp, #16]
 8012400:	b9d8      	cbnz	r0, 801243a <_svfiprintf_r+0xe6>
 8012402:	06d0      	lsls	r0, r2, #27
 8012404:	bf44      	itt	mi
 8012406:	2320      	movmi	r3, #32
 8012408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801240c:	0711      	lsls	r1, r2, #28
 801240e:	bf44      	itt	mi
 8012410:	232b      	movmi	r3, #43	; 0x2b
 8012412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012416:	f89a 3000 	ldrb.w	r3, [sl]
 801241a:	2b2a      	cmp	r3, #42	; 0x2a
 801241c:	d015      	beq.n	801244a <_svfiprintf_r+0xf6>
 801241e:	9a07      	ldr	r2, [sp, #28]
 8012420:	4654      	mov	r4, sl
 8012422:	2000      	movs	r0, #0
 8012424:	f04f 0c0a 	mov.w	ip, #10
 8012428:	4621      	mov	r1, r4
 801242a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801242e:	3b30      	subs	r3, #48	; 0x30
 8012430:	2b09      	cmp	r3, #9
 8012432:	d94e      	bls.n	80124d2 <_svfiprintf_r+0x17e>
 8012434:	b1b0      	cbz	r0, 8012464 <_svfiprintf_r+0x110>
 8012436:	9207      	str	r2, [sp, #28]
 8012438:	e014      	b.n	8012464 <_svfiprintf_r+0x110>
 801243a:	eba0 0308 	sub.w	r3, r0, r8
 801243e:	fa09 f303 	lsl.w	r3, r9, r3
 8012442:	4313      	orrs	r3, r2
 8012444:	9304      	str	r3, [sp, #16]
 8012446:	46a2      	mov	sl, r4
 8012448:	e7d2      	b.n	80123f0 <_svfiprintf_r+0x9c>
 801244a:	9b03      	ldr	r3, [sp, #12]
 801244c:	1d19      	adds	r1, r3, #4
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	9103      	str	r1, [sp, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	bfbb      	ittet	lt
 8012456:	425b      	neglt	r3, r3
 8012458:	f042 0202 	orrlt.w	r2, r2, #2
 801245c:	9307      	strge	r3, [sp, #28]
 801245e:	9307      	strlt	r3, [sp, #28]
 8012460:	bfb8      	it	lt
 8012462:	9204      	strlt	r2, [sp, #16]
 8012464:	7823      	ldrb	r3, [r4, #0]
 8012466:	2b2e      	cmp	r3, #46	; 0x2e
 8012468:	d10c      	bne.n	8012484 <_svfiprintf_r+0x130>
 801246a:	7863      	ldrb	r3, [r4, #1]
 801246c:	2b2a      	cmp	r3, #42	; 0x2a
 801246e:	d135      	bne.n	80124dc <_svfiprintf_r+0x188>
 8012470:	9b03      	ldr	r3, [sp, #12]
 8012472:	1d1a      	adds	r2, r3, #4
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	9203      	str	r2, [sp, #12]
 8012478:	2b00      	cmp	r3, #0
 801247a:	bfb8      	it	lt
 801247c:	f04f 33ff 	movlt.w	r3, #4294967295
 8012480:	3402      	adds	r4, #2
 8012482:	9305      	str	r3, [sp, #20]
 8012484:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012550 <_svfiprintf_r+0x1fc>
 8012488:	7821      	ldrb	r1, [r4, #0]
 801248a:	2203      	movs	r2, #3
 801248c:	4650      	mov	r0, sl
 801248e:	f7ed feb7 	bl	8000200 <memchr>
 8012492:	b140      	cbz	r0, 80124a6 <_svfiprintf_r+0x152>
 8012494:	2340      	movs	r3, #64	; 0x40
 8012496:	eba0 000a 	sub.w	r0, r0, sl
 801249a:	fa03 f000 	lsl.w	r0, r3, r0
 801249e:	9b04      	ldr	r3, [sp, #16]
 80124a0:	4303      	orrs	r3, r0
 80124a2:	3401      	adds	r4, #1
 80124a4:	9304      	str	r3, [sp, #16]
 80124a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124aa:	4826      	ldr	r0, [pc, #152]	; (8012544 <_svfiprintf_r+0x1f0>)
 80124ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80124b0:	2206      	movs	r2, #6
 80124b2:	f7ed fea5 	bl	8000200 <memchr>
 80124b6:	2800      	cmp	r0, #0
 80124b8:	d038      	beq.n	801252c <_svfiprintf_r+0x1d8>
 80124ba:	4b23      	ldr	r3, [pc, #140]	; (8012548 <_svfiprintf_r+0x1f4>)
 80124bc:	bb1b      	cbnz	r3, 8012506 <_svfiprintf_r+0x1b2>
 80124be:	9b03      	ldr	r3, [sp, #12]
 80124c0:	3307      	adds	r3, #7
 80124c2:	f023 0307 	bic.w	r3, r3, #7
 80124c6:	3308      	adds	r3, #8
 80124c8:	9303      	str	r3, [sp, #12]
 80124ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124cc:	4433      	add	r3, r6
 80124ce:	9309      	str	r3, [sp, #36]	; 0x24
 80124d0:	e767      	b.n	80123a2 <_svfiprintf_r+0x4e>
 80124d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80124d6:	460c      	mov	r4, r1
 80124d8:	2001      	movs	r0, #1
 80124da:	e7a5      	b.n	8012428 <_svfiprintf_r+0xd4>
 80124dc:	2300      	movs	r3, #0
 80124de:	3401      	adds	r4, #1
 80124e0:	9305      	str	r3, [sp, #20]
 80124e2:	4619      	mov	r1, r3
 80124e4:	f04f 0c0a 	mov.w	ip, #10
 80124e8:	4620      	mov	r0, r4
 80124ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124ee:	3a30      	subs	r2, #48	; 0x30
 80124f0:	2a09      	cmp	r2, #9
 80124f2:	d903      	bls.n	80124fc <_svfiprintf_r+0x1a8>
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d0c5      	beq.n	8012484 <_svfiprintf_r+0x130>
 80124f8:	9105      	str	r1, [sp, #20]
 80124fa:	e7c3      	b.n	8012484 <_svfiprintf_r+0x130>
 80124fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8012500:	4604      	mov	r4, r0
 8012502:	2301      	movs	r3, #1
 8012504:	e7f0      	b.n	80124e8 <_svfiprintf_r+0x194>
 8012506:	ab03      	add	r3, sp, #12
 8012508:	9300      	str	r3, [sp, #0]
 801250a:	462a      	mov	r2, r5
 801250c:	4b0f      	ldr	r3, [pc, #60]	; (801254c <_svfiprintf_r+0x1f8>)
 801250e:	a904      	add	r1, sp, #16
 8012510:	4638      	mov	r0, r7
 8012512:	f3af 8000 	nop.w
 8012516:	1c42      	adds	r2, r0, #1
 8012518:	4606      	mov	r6, r0
 801251a:	d1d6      	bne.n	80124ca <_svfiprintf_r+0x176>
 801251c:	89ab      	ldrh	r3, [r5, #12]
 801251e:	065b      	lsls	r3, r3, #25
 8012520:	f53f af2c 	bmi.w	801237c <_svfiprintf_r+0x28>
 8012524:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012526:	b01d      	add	sp, #116	; 0x74
 8012528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801252c:	ab03      	add	r3, sp, #12
 801252e:	9300      	str	r3, [sp, #0]
 8012530:	462a      	mov	r2, r5
 8012532:	4b06      	ldr	r3, [pc, #24]	; (801254c <_svfiprintf_r+0x1f8>)
 8012534:	a904      	add	r1, sp, #16
 8012536:	4638      	mov	r0, r7
 8012538:	f000 fa4c 	bl	80129d4 <_printf_i>
 801253c:	e7eb      	b.n	8012516 <_svfiprintf_r+0x1c2>
 801253e:	bf00      	nop
 8012540:	08013ce4 	.word	0x08013ce4
 8012544:	08013cee 	.word	0x08013cee
 8012548:	00000000 	.word	0x00000000
 801254c:	0801229d 	.word	0x0801229d
 8012550:	08013cea 	.word	0x08013cea

08012554 <_sungetc_r>:
 8012554:	b538      	push	{r3, r4, r5, lr}
 8012556:	1c4b      	adds	r3, r1, #1
 8012558:	4614      	mov	r4, r2
 801255a:	d103      	bne.n	8012564 <_sungetc_r+0x10>
 801255c:	f04f 35ff 	mov.w	r5, #4294967295
 8012560:	4628      	mov	r0, r5
 8012562:	bd38      	pop	{r3, r4, r5, pc}
 8012564:	8993      	ldrh	r3, [r2, #12]
 8012566:	f023 0320 	bic.w	r3, r3, #32
 801256a:	8193      	strh	r3, [r2, #12]
 801256c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801256e:	6852      	ldr	r2, [r2, #4]
 8012570:	b2cd      	uxtb	r5, r1
 8012572:	b18b      	cbz	r3, 8012598 <_sungetc_r+0x44>
 8012574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012576:	4293      	cmp	r3, r2
 8012578:	dd08      	ble.n	801258c <_sungetc_r+0x38>
 801257a:	6823      	ldr	r3, [r4, #0]
 801257c:	1e5a      	subs	r2, r3, #1
 801257e:	6022      	str	r2, [r4, #0]
 8012580:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012584:	6863      	ldr	r3, [r4, #4]
 8012586:	3301      	adds	r3, #1
 8012588:	6063      	str	r3, [r4, #4]
 801258a:	e7e9      	b.n	8012560 <_sungetc_r+0xc>
 801258c:	4621      	mov	r1, r4
 801258e:	f000 fd6f 	bl	8013070 <__submore>
 8012592:	2800      	cmp	r0, #0
 8012594:	d0f1      	beq.n	801257a <_sungetc_r+0x26>
 8012596:	e7e1      	b.n	801255c <_sungetc_r+0x8>
 8012598:	6921      	ldr	r1, [r4, #16]
 801259a:	6823      	ldr	r3, [r4, #0]
 801259c:	b151      	cbz	r1, 80125b4 <_sungetc_r+0x60>
 801259e:	4299      	cmp	r1, r3
 80125a0:	d208      	bcs.n	80125b4 <_sungetc_r+0x60>
 80125a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80125a6:	42a9      	cmp	r1, r5
 80125a8:	d104      	bne.n	80125b4 <_sungetc_r+0x60>
 80125aa:	3b01      	subs	r3, #1
 80125ac:	3201      	adds	r2, #1
 80125ae:	6023      	str	r3, [r4, #0]
 80125b0:	6062      	str	r2, [r4, #4]
 80125b2:	e7d5      	b.n	8012560 <_sungetc_r+0xc>
 80125b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80125b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125bc:	6363      	str	r3, [r4, #52]	; 0x34
 80125be:	2303      	movs	r3, #3
 80125c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80125c2:	4623      	mov	r3, r4
 80125c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80125c8:	6023      	str	r3, [r4, #0]
 80125ca:	2301      	movs	r3, #1
 80125cc:	e7dc      	b.n	8012588 <_sungetc_r+0x34>

080125ce <__ssrefill_r>:
 80125ce:	b510      	push	{r4, lr}
 80125d0:	460c      	mov	r4, r1
 80125d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80125d4:	b169      	cbz	r1, 80125f2 <__ssrefill_r+0x24>
 80125d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125da:	4299      	cmp	r1, r3
 80125dc:	d001      	beq.n	80125e2 <__ssrefill_r+0x14>
 80125de:	f7ff fd7d 	bl	80120dc <_free_r>
 80125e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125e4:	6063      	str	r3, [r4, #4]
 80125e6:	2000      	movs	r0, #0
 80125e8:	6360      	str	r0, [r4, #52]	; 0x34
 80125ea:	b113      	cbz	r3, 80125f2 <__ssrefill_r+0x24>
 80125ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80125ee:	6023      	str	r3, [r4, #0]
 80125f0:	bd10      	pop	{r4, pc}
 80125f2:	6923      	ldr	r3, [r4, #16]
 80125f4:	6023      	str	r3, [r4, #0]
 80125f6:	2300      	movs	r3, #0
 80125f8:	6063      	str	r3, [r4, #4]
 80125fa:	89a3      	ldrh	r3, [r4, #12]
 80125fc:	f043 0320 	orr.w	r3, r3, #32
 8012600:	81a3      	strh	r3, [r4, #12]
 8012602:	f04f 30ff 	mov.w	r0, #4294967295
 8012606:	e7f3      	b.n	80125f0 <__ssrefill_r+0x22>

08012608 <__ssvfiscanf_r>:
 8012608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801260c:	460c      	mov	r4, r1
 801260e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012612:	2100      	movs	r1, #0
 8012614:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012618:	49a6      	ldr	r1, [pc, #664]	; (80128b4 <__ssvfiscanf_r+0x2ac>)
 801261a:	91a0      	str	r1, [sp, #640]	; 0x280
 801261c:	f10d 0804 	add.w	r8, sp, #4
 8012620:	49a5      	ldr	r1, [pc, #660]	; (80128b8 <__ssvfiscanf_r+0x2b0>)
 8012622:	4fa6      	ldr	r7, [pc, #664]	; (80128bc <__ssvfiscanf_r+0x2b4>)
 8012624:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80128c0 <__ssvfiscanf_r+0x2b8>
 8012628:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801262c:	4606      	mov	r6, r0
 801262e:	91a1      	str	r1, [sp, #644]	; 0x284
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	7813      	ldrb	r3, [r2, #0]
 8012634:	2b00      	cmp	r3, #0
 8012636:	f000 815a 	beq.w	80128ee <__ssvfiscanf_r+0x2e6>
 801263a:	5dd9      	ldrb	r1, [r3, r7]
 801263c:	f011 0108 	ands.w	r1, r1, #8
 8012640:	f102 0501 	add.w	r5, r2, #1
 8012644:	d019      	beq.n	801267a <__ssvfiscanf_r+0x72>
 8012646:	6863      	ldr	r3, [r4, #4]
 8012648:	2b00      	cmp	r3, #0
 801264a:	dd0f      	ble.n	801266c <__ssvfiscanf_r+0x64>
 801264c:	6823      	ldr	r3, [r4, #0]
 801264e:	781a      	ldrb	r2, [r3, #0]
 8012650:	5cba      	ldrb	r2, [r7, r2]
 8012652:	0712      	lsls	r2, r2, #28
 8012654:	d401      	bmi.n	801265a <__ssvfiscanf_r+0x52>
 8012656:	462a      	mov	r2, r5
 8012658:	e7eb      	b.n	8012632 <__ssvfiscanf_r+0x2a>
 801265a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801265c:	3201      	adds	r2, #1
 801265e:	9245      	str	r2, [sp, #276]	; 0x114
 8012660:	6862      	ldr	r2, [r4, #4]
 8012662:	3301      	adds	r3, #1
 8012664:	3a01      	subs	r2, #1
 8012666:	6062      	str	r2, [r4, #4]
 8012668:	6023      	str	r3, [r4, #0]
 801266a:	e7ec      	b.n	8012646 <__ssvfiscanf_r+0x3e>
 801266c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801266e:	4621      	mov	r1, r4
 8012670:	4630      	mov	r0, r6
 8012672:	4798      	blx	r3
 8012674:	2800      	cmp	r0, #0
 8012676:	d0e9      	beq.n	801264c <__ssvfiscanf_r+0x44>
 8012678:	e7ed      	b.n	8012656 <__ssvfiscanf_r+0x4e>
 801267a:	2b25      	cmp	r3, #37	; 0x25
 801267c:	d012      	beq.n	80126a4 <__ssvfiscanf_r+0x9c>
 801267e:	469a      	mov	sl, r3
 8012680:	6863      	ldr	r3, [r4, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	f340 8091 	ble.w	80127aa <__ssvfiscanf_r+0x1a2>
 8012688:	6822      	ldr	r2, [r4, #0]
 801268a:	7813      	ldrb	r3, [r2, #0]
 801268c:	4553      	cmp	r3, sl
 801268e:	f040 812e 	bne.w	80128ee <__ssvfiscanf_r+0x2e6>
 8012692:	6863      	ldr	r3, [r4, #4]
 8012694:	3b01      	subs	r3, #1
 8012696:	6063      	str	r3, [r4, #4]
 8012698:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801269a:	3201      	adds	r2, #1
 801269c:	3301      	adds	r3, #1
 801269e:	6022      	str	r2, [r4, #0]
 80126a0:	9345      	str	r3, [sp, #276]	; 0x114
 80126a2:	e7d8      	b.n	8012656 <__ssvfiscanf_r+0x4e>
 80126a4:	9141      	str	r1, [sp, #260]	; 0x104
 80126a6:	9143      	str	r1, [sp, #268]	; 0x10c
 80126a8:	7853      	ldrb	r3, [r2, #1]
 80126aa:	2b2a      	cmp	r3, #42	; 0x2a
 80126ac:	bf02      	ittt	eq
 80126ae:	2310      	moveq	r3, #16
 80126b0:	1c95      	addeq	r5, r2, #2
 80126b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80126b4:	220a      	movs	r2, #10
 80126b6:	46aa      	mov	sl, r5
 80126b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80126bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80126c0:	2b09      	cmp	r3, #9
 80126c2:	d91d      	bls.n	8012700 <__ssvfiscanf_r+0xf8>
 80126c4:	487e      	ldr	r0, [pc, #504]	; (80128c0 <__ssvfiscanf_r+0x2b8>)
 80126c6:	2203      	movs	r2, #3
 80126c8:	f7ed fd9a 	bl	8000200 <memchr>
 80126cc:	b140      	cbz	r0, 80126e0 <__ssvfiscanf_r+0xd8>
 80126ce:	2301      	movs	r3, #1
 80126d0:	eba0 0009 	sub.w	r0, r0, r9
 80126d4:	fa03 f000 	lsl.w	r0, r3, r0
 80126d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80126da:	4318      	orrs	r0, r3
 80126dc:	9041      	str	r0, [sp, #260]	; 0x104
 80126de:	4655      	mov	r5, sl
 80126e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80126e4:	2b78      	cmp	r3, #120	; 0x78
 80126e6:	d806      	bhi.n	80126f6 <__ssvfiscanf_r+0xee>
 80126e8:	2b57      	cmp	r3, #87	; 0x57
 80126ea:	d810      	bhi.n	801270e <__ssvfiscanf_r+0x106>
 80126ec:	2b25      	cmp	r3, #37	; 0x25
 80126ee:	d0c6      	beq.n	801267e <__ssvfiscanf_r+0x76>
 80126f0:	d856      	bhi.n	80127a0 <__ssvfiscanf_r+0x198>
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d064      	beq.n	80127c0 <__ssvfiscanf_r+0x1b8>
 80126f6:	2303      	movs	r3, #3
 80126f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80126fa:	230a      	movs	r3, #10
 80126fc:	9342      	str	r3, [sp, #264]	; 0x108
 80126fe:	e071      	b.n	80127e4 <__ssvfiscanf_r+0x1dc>
 8012700:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012702:	fb02 1103 	mla	r1, r2, r3, r1
 8012706:	3930      	subs	r1, #48	; 0x30
 8012708:	9143      	str	r1, [sp, #268]	; 0x10c
 801270a:	4655      	mov	r5, sl
 801270c:	e7d3      	b.n	80126b6 <__ssvfiscanf_r+0xae>
 801270e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012712:	2a20      	cmp	r2, #32
 8012714:	d8ef      	bhi.n	80126f6 <__ssvfiscanf_r+0xee>
 8012716:	a101      	add	r1, pc, #4	; (adr r1, 801271c <__ssvfiscanf_r+0x114>)
 8012718:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801271c:	080127cf 	.word	0x080127cf
 8012720:	080126f7 	.word	0x080126f7
 8012724:	080126f7 	.word	0x080126f7
 8012728:	0801282d 	.word	0x0801282d
 801272c:	080126f7 	.word	0x080126f7
 8012730:	080126f7 	.word	0x080126f7
 8012734:	080126f7 	.word	0x080126f7
 8012738:	080126f7 	.word	0x080126f7
 801273c:	080126f7 	.word	0x080126f7
 8012740:	080126f7 	.word	0x080126f7
 8012744:	080126f7 	.word	0x080126f7
 8012748:	08012843 	.word	0x08012843
 801274c:	08012819 	.word	0x08012819
 8012750:	080127a7 	.word	0x080127a7
 8012754:	080127a7 	.word	0x080127a7
 8012758:	080127a7 	.word	0x080127a7
 801275c:	080126f7 	.word	0x080126f7
 8012760:	0801281d 	.word	0x0801281d
 8012764:	080126f7 	.word	0x080126f7
 8012768:	080126f7 	.word	0x080126f7
 801276c:	080126f7 	.word	0x080126f7
 8012770:	080126f7 	.word	0x080126f7
 8012774:	08012853 	.word	0x08012853
 8012778:	08012825 	.word	0x08012825
 801277c:	080127c7 	.word	0x080127c7
 8012780:	080126f7 	.word	0x080126f7
 8012784:	080126f7 	.word	0x080126f7
 8012788:	0801284f 	.word	0x0801284f
 801278c:	080126f7 	.word	0x080126f7
 8012790:	08012819 	.word	0x08012819
 8012794:	080126f7 	.word	0x080126f7
 8012798:	080126f7 	.word	0x080126f7
 801279c:	080127cf 	.word	0x080127cf
 80127a0:	3b45      	subs	r3, #69	; 0x45
 80127a2:	2b02      	cmp	r3, #2
 80127a4:	d8a7      	bhi.n	80126f6 <__ssvfiscanf_r+0xee>
 80127a6:	2305      	movs	r3, #5
 80127a8:	e01b      	b.n	80127e2 <__ssvfiscanf_r+0x1da>
 80127aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80127ac:	4621      	mov	r1, r4
 80127ae:	4630      	mov	r0, r6
 80127b0:	4798      	blx	r3
 80127b2:	2800      	cmp	r0, #0
 80127b4:	f43f af68 	beq.w	8012688 <__ssvfiscanf_r+0x80>
 80127b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80127ba:	2800      	cmp	r0, #0
 80127bc:	f040 808d 	bne.w	80128da <__ssvfiscanf_r+0x2d2>
 80127c0:	f04f 30ff 	mov.w	r0, #4294967295
 80127c4:	e08f      	b.n	80128e6 <__ssvfiscanf_r+0x2de>
 80127c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80127c8:	f042 0220 	orr.w	r2, r2, #32
 80127cc:	9241      	str	r2, [sp, #260]	; 0x104
 80127ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80127d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80127d4:	9241      	str	r2, [sp, #260]	; 0x104
 80127d6:	2210      	movs	r2, #16
 80127d8:	2b6f      	cmp	r3, #111	; 0x6f
 80127da:	9242      	str	r2, [sp, #264]	; 0x108
 80127dc:	bf34      	ite	cc
 80127de:	2303      	movcc	r3, #3
 80127e0:	2304      	movcs	r3, #4
 80127e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80127e4:	6863      	ldr	r3, [r4, #4]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	dd42      	ble.n	8012870 <__ssvfiscanf_r+0x268>
 80127ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80127ec:	0659      	lsls	r1, r3, #25
 80127ee:	d404      	bmi.n	80127fa <__ssvfiscanf_r+0x1f2>
 80127f0:	6823      	ldr	r3, [r4, #0]
 80127f2:	781a      	ldrb	r2, [r3, #0]
 80127f4:	5cba      	ldrb	r2, [r7, r2]
 80127f6:	0712      	lsls	r2, r2, #28
 80127f8:	d441      	bmi.n	801287e <__ssvfiscanf_r+0x276>
 80127fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80127fc:	2b02      	cmp	r3, #2
 80127fe:	dc50      	bgt.n	80128a2 <__ssvfiscanf_r+0x29a>
 8012800:	466b      	mov	r3, sp
 8012802:	4622      	mov	r2, r4
 8012804:	a941      	add	r1, sp, #260	; 0x104
 8012806:	4630      	mov	r0, r6
 8012808:	f000 fa0a 	bl	8012c20 <_scanf_chars>
 801280c:	2801      	cmp	r0, #1
 801280e:	d06e      	beq.n	80128ee <__ssvfiscanf_r+0x2e6>
 8012810:	2802      	cmp	r0, #2
 8012812:	f47f af20 	bne.w	8012656 <__ssvfiscanf_r+0x4e>
 8012816:	e7cf      	b.n	80127b8 <__ssvfiscanf_r+0x1b0>
 8012818:	220a      	movs	r2, #10
 801281a:	e7dd      	b.n	80127d8 <__ssvfiscanf_r+0x1d0>
 801281c:	2300      	movs	r3, #0
 801281e:	9342      	str	r3, [sp, #264]	; 0x108
 8012820:	2303      	movs	r3, #3
 8012822:	e7de      	b.n	80127e2 <__ssvfiscanf_r+0x1da>
 8012824:	2308      	movs	r3, #8
 8012826:	9342      	str	r3, [sp, #264]	; 0x108
 8012828:	2304      	movs	r3, #4
 801282a:	e7da      	b.n	80127e2 <__ssvfiscanf_r+0x1da>
 801282c:	4629      	mov	r1, r5
 801282e:	4640      	mov	r0, r8
 8012830:	f000 fb72 	bl	8012f18 <__sccl>
 8012834:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801283a:	9341      	str	r3, [sp, #260]	; 0x104
 801283c:	4605      	mov	r5, r0
 801283e:	2301      	movs	r3, #1
 8012840:	e7cf      	b.n	80127e2 <__ssvfiscanf_r+0x1da>
 8012842:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012848:	9341      	str	r3, [sp, #260]	; 0x104
 801284a:	2300      	movs	r3, #0
 801284c:	e7c9      	b.n	80127e2 <__ssvfiscanf_r+0x1da>
 801284e:	2302      	movs	r3, #2
 8012850:	e7c7      	b.n	80127e2 <__ssvfiscanf_r+0x1da>
 8012852:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012854:	06c3      	lsls	r3, r0, #27
 8012856:	f53f aefe 	bmi.w	8012656 <__ssvfiscanf_r+0x4e>
 801285a:	9b00      	ldr	r3, [sp, #0]
 801285c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801285e:	1d19      	adds	r1, r3, #4
 8012860:	9100      	str	r1, [sp, #0]
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	f010 0f01 	tst.w	r0, #1
 8012868:	bf14      	ite	ne
 801286a:	801a      	strhne	r2, [r3, #0]
 801286c:	601a      	streq	r2, [r3, #0]
 801286e:	e6f2      	b.n	8012656 <__ssvfiscanf_r+0x4e>
 8012870:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012872:	4621      	mov	r1, r4
 8012874:	4630      	mov	r0, r6
 8012876:	4798      	blx	r3
 8012878:	2800      	cmp	r0, #0
 801287a:	d0b6      	beq.n	80127ea <__ssvfiscanf_r+0x1e2>
 801287c:	e79c      	b.n	80127b8 <__ssvfiscanf_r+0x1b0>
 801287e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012880:	3201      	adds	r2, #1
 8012882:	9245      	str	r2, [sp, #276]	; 0x114
 8012884:	6862      	ldr	r2, [r4, #4]
 8012886:	3a01      	subs	r2, #1
 8012888:	2a00      	cmp	r2, #0
 801288a:	6062      	str	r2, [r4, #4]
 801288c:	dd02      	ble.n	8012894 <__ssvfiscanf_r+0x28c>
 801288e:	3301      	adds	r3, #1
 8012890:	6023      	str	r3, [r4, #0]
 8012892:	e7ad      	b.n	80127f0 <__ssvfiscanf_r+0x1e8>
 8012894:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012896:	4621      	mov	r1, r4
 8012898:	4630      	mov	r0, r6
 801289a:	4798      	blx	r3
 801289c:	2800      	cmp	r0, #0
 801289e:	d0a7      	beq.n	80127f0 <__ssvfiscanf_r+0x1e8>
 80128a0:	e78a      	b.n	80127b8 <__ssvfiscanf_r+0x1b0>
 80128a2:	2b04      	cmp	r3, #4
 80128a4:	dc0e      	bgt.n	80128c4 <__ssvfiscanf_r+0x2bc>
 80128a6:	466b      	mov	r3, sp
 80128a8:	4622      	mov	r2, r4
 80128aa:	a941      	add	r1, sp, #260	; 0x104
 80128ac:	4630      	mov	r0, r6
 80128ae:	f000 fa11 	bl	8012cd4 <_scanf_i>
 80128b2:	e7ab      	b.n	801280c <__ssvfiscanf_r+0x204>
 80128b4:	08012555 	.word	0x08012555
 80128b8:	080125cf 	.word	0x080125cf
 80128bc:	08013981 	.word	0x08013981
 80128c0:	08013cea 	.word	0x08013cea
 80128c4:	4b0b      	ldr	r3, [pc, #44]	; (80128f4 <__ssvfiscanf_r+0x2ec>)
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	f43f aec5 	beq.w	8012656 <__ssvfiscanf_r+0x4e>
 80128cc:	466b      	mov	r3, sp
 80128ce:	4622      	mov	r2, r4
 80128d0:	a941      	add	r1, sp, #260	; 0x104
 80128d2:	4630      	mov	r0, r6
 80128d4:	f7fc fe82 	bl	800f5dc <_scanf_float>
 80128d8:	e798      	b.n	801280c <__ssvfiscanf_r+0x204>
 80128da:	89a3      	ldrh	r3, [r4, #12]
 80128dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80128e0:	bf18      	it	ne
 80128e2:	f04f 30ff 	movne.w	r0, #4294967295
 80128e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80128ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80128f0:	e7f9      	b.n	80128e6 <__ssvfiscanf_r+0x2de>
 80128f2:	bf00      	nop
 80128f4:	0800f5dd 	.word	0x0800f5dd

080128f8 <_printf_common>:
 80128f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128fc:	4616      	mov	r6, r2
 80128fe:	4699      	mov	r9, r3
 8012900:	688a      	ldr	r2, [r1, #8]
 8012902:	690b      	ldr	r3, [r1, #16]
 8012904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012908:	4293      	cmp	r3, r2
 801290a:	bfb8      	it	lt
 801290c:	4613      	movlt	r3, r2
 801290e:	6033      	str	r3, [r6, #0]
 8012910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012914:	4607      	mov	r7, r0
 8012916:	460c      	mov	r4, r1
 8012918:	b10a      	cbz	r2, 801291e <_printf_common+0x26>
 801291a:	3301      	adds	r3, #1
 801291c:	6033      	str	r3, [r6, #0]
 801291e:	6823      	ldr	r3, [r4, #0]
 8012920:	0699      	lsls	r1, r3, #26
 8012922:	bf42      	ittt	mi
 8012924:	6833      	ldrmi	r3, [r6, #0]
 8012926:	3302      	addmi	r3, #2
 8012928:	6033      	strmi	r3, [r6, #0]
 801292a:	6825      	ldr	r5, [r4, #0]
 801292c:	f015 0506 	ands.w	r5, r5, #6
 8012930:	d106      	bne.n	8012940 <_printf_common+0x48>
 8012932:	f104 0a19 	add.w	sl, r4, #25
 8012936:	68e3      	ldr	r3, [r4, #12]
 8012938:	6832      	ldr	r2, [r6, #0]
 801293a:	1a9b      	subs	r3, r3, r2
 801293c:	42ab      	cmp	r3, r5
 801293e:	dc26      	bgt.n	801298e <_printf_common+0x96>
 8012940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012944:	1e13      	subs	r3, r2, #0
 8012946:	6822      	ldr	r2, [r4, #0]
 8012948:	bf18      	it	ne
 801294a:	2301      	movne	r3, #1
 801294c:	0692      	lsls	r2, r2, #26
 801294e:	d42b      	bmi.n	80129a8 <_printf_common+0xb0>
 8012950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012954:	4649      	mov	r1, r9
 8012956:	4638      	mov	r0, r7
 8012958:	47c0      	blx	r8
 801295a:	3001      	adds	r0, #1
 801295c:	d01e      	beq.n	801299c <_printf_common+0xa4>
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	68e5      	ldr	r5, [r4, #12]
 8012962:	6832      	ldr	r2, [r6, #0]
 8012964:	f003 0306 	and.w	r3, r3, #6
 8012968:	2b04      	cmp	r3, #4
 801296a:	bf08      	it	eq
 801296c:	1aad      	subeq	r5, r5, r2
 801296e:	68a3      	ldr	r3, [r4, #8]
 8012970:	6922      	ldr	r2, [r4, #16]
 8012972:	bf0c      	ite	eq
 8012974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012978:	2500      	movne	r5, #0
 801297a:	4293      	cmp	r3, r2
 801297c:	bfc4      	itt	gt
 801297e:	1a9b      	subgt	r3, r3, r2
 8012980:	18ed      	addgt	r5, r5, r3
 8012982:	2600      	movs	r6, #0
 8012984:	341a      	adds	r4, #26
 8012986:	42b5      	cmp	r5, r6
 8012988:	d11a      	bne.n	80129c0 <_printf_common+0xc8>
 801298a:	2000      	movs	r0, #0
 801298c:	e008      	b.n	80129a0 <_printf_common+0xa8>
 801298e:	2301      	movs	r3, #1
 8012990:	4652      	mov	r2, sl
 8012992:	4649      	mov	r1, r9
 8012994:	4638      	mov	r0, r7
 8012996:	47c0      	blx	r8
 8012998:	3001      	adds	r0, #1
 801299a:	d103      	bne.n	80129a4 <_printf_common+0xac>
 801299c:	f04f 30ff 	mov.w	r0, #4294967295
 80129a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129a4:	3501      	adds	r5, #1
 80129a6:	e7c6      	b.n	8012936 <_printf_common+0x3e>
 80129a8:	18e1      	adds	r1, r4, r3
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	2030      	movs	r0, #48	; 0x30
 80129ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80129b2:	4422      	add	r2, r4
 80129b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80129b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80129bc:	3302      	adds	r3, #2
 80129be:	e7c7      	b.n	8012950 <_printf_common+0x58>
 80129c0:	2301      	movs	r3, #1
 80129c2:	4622      	mov	r2, r4
 80129c4:	4649      	mov	r1, r9
 80129c6:	4638      	mov	r0, r7
 80129c8:	47c0      	blx	r8
 80129ca:	3001      	adds	r0, #1
 80129cc:	d0e6      	beq.n	801299c <_printf_common+0xa4>
 80129ce:	3601      	adds	r6, #1
 80129d0:	e7d9      	b.n	8012986 <_printf_common+0x8e>
	...

080129d4 <_printf_i>:
 80129d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80129d8:	7e0f      	ldrb	r7, [r1, #24]
 80129da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80129dc:	2f78      	cmp	r7, #120	; 0x78
 80129de:	4691      	mov	r9, r2
 80129e0:	4680      	mov	r8, r0
 80129e2:	460c      	mov	r4, r1
 80129e4:	469a      	mov	sl, r3
 80129e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80129ea:	d807      	bhi.n	80129fc <_printf_i+0x28>
 80129ec:	2f62      	cmp	r7, #98	; 0x62
 80129ee:	d80a      	bhi.n	8012a06 <_printf_i+0x32>
 80129f0:	2f00      	cmp	r7, #0
 80129f2:	f000 80d8 	beq.w	8012ba6 <_printf_i+0x1d2>
 80129f6:	2f58      	cmp	r7, #88	; 0x58
 80129f8:	f000 80a3 	beq.w	8012b42 <_printf_i+0x16e>
 80129fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012a04:	e03a      	b.n	8012a7c <_printf_i+0xa8>
 8012a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012a0a:	2b15      	cmp	r3, #21
 8012a0c:	d8f6      	bhi.n	80129fc <_printf_i+0x28>
 8012a0e:	a101      	add	r1, pc, #4	; (adr r1, 8012a14 <_printf_i+0x40>)
 8012a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a14:	08012a6d 	.word	0x08012a6d
 8012a18:	08012a81 	.word	0x08012a81
 8012a1c:	080129fd 	.word	0x080129fd
 8012a20:	080129fd 	.word	0x080129fd
 8012a24:	080129fd 	.word	0x080129fd
 8012a28:	080129fd 	.word	0x080129fd
 8012a2c:	08012a81 	.word	0x08012a81
 8012a30:	080129fd 	.word	0x080129fd
 8012a34:	080129fd 	.word	0x080129fd
 8012a38:	080129fd 	.word	0x080129fd
 8012a3c:	080129fd 	.word	0x080129fd
 8012a40:	08012b8d 	.word	0x08012b8d
 8012a44:	08012ab1 	.word	0x08012ab1
 8012a48:	08012b6f 	.word	0x08012b6f
 8012a4c:	080129fd 	.word	0x080129fd
 8012a50:	080129fd 	.word	0x080129fd
 8012a54:	08012baf 	.word	0x08012baf
 8012a58:	080129fd 	.word	0x080129fd
 8012a5c:	08012ab1 	.word	0x08012ab1
 8012a60:	080129fd 	.word	0x080129fd
 8012a64:	080129fd 	.word	0x080129fd
 8012a68:	08012b77 	.word	0x08012b77
 8012a6c:	682b      	ldr	r3, [r5, #0]
 8012a6e:	1d1a      	adds	r2, r3, #4
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	602a      	str	r2, [r5, #0]
 8012a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e0a3      	b.n	8012bc8 <_printf_i+0x1f4>
 8012a80:	6820      	ldr	r0, [r4, #0]
 8012a82:	6829      	ldr	r1, [r5, #0]
 8012a84:	0606      	lsls	r6, r0, #24
 8012a86:	f101 0304 	add.w	r3, r1, #4
 8012a8a:	d50a      	bpl.n	8012aa2 <_printf_i+0xce>
 8012a8c:	680e      	ldr	r6, [r1, #0]
 8012a8e:	602b      	str	r3, [r5, #0]
 8012a90:	2e00      	cmp	r6, #0
 8012a92:	da03      	bge.n	8012a9c <_printf_i+0xc8>
 8012a94:	232d      	movs	r3, #45	; 0x2d
 8012a96:	4276      	negs	r6, r6
 8012a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a9c:	485e      	ldr	r0, [pc, #376]	; (8012c18 <_printf_i+0x244>)
 8012a9e:	230a      	movs	r3, #10
 8012aa0:	e019      	b.n	8012ad6 <_printf_i+0x102>
 8012aa2:	680e      	ldr	r6, [r1, #0]
 8012aa4:	602b      	str	r3, [r5, #0]
 8012aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012aaa:	bf18      	it	ne
 8012aac:	b236      	sxthne	r6, r6
 8012aae:	e7ef      	b.n	8012a90 <_printf_i+0xbc>
 8012ab0:	682b      	ldr	r3, [r5, #0]
 8012ab2:	6820      	ldr	r0, [r4, #0]
 8012ab4:	1d19      	adds	r1, r3, #4
 8012ab6:	6029      	str	r1, [r5, #0]
 8012ab8:	0601      	lsls	r1, r0, #24
 8012aba:	d501      	bpl.n	8012ac0 <_printf_i+0xec>
 8012abc:	681e      	ldr	r6, [r3, #0]
 8012abe:	e002      	b.n	8012ac6 <_printf_i+0xf2>
 8012ac0:	0646      	lsls	r6, r0, #25
 8012ac2:	d5fb      	bpl.n	8012abc <_printf_i+0xe8>
 8012ac4:	881e      	ldrh	r6, [r3, #0]
 8012ac6:	4854      	ldr	r0, [pc, #336]	; (8012c18 <_printf_i+0x244>)
 8012ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8012aca:	bf0c      	ite	eq
 8012acc:	2308      	moveq	r3, #8
 8012ace:	230a      	movne	r3, #10
 8012ad0:	2100      	movs	r1, #0
 8012ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ad6:	6865      	ldr	r5, [r4, #4]
 8012ad8:	60a5      	str	r5, [r4, #8]
 8012ada:	2d00      	cmp	r5, #0
 8012adc:	bfa2      	ittt	ge
 8012ade:	6821      	ldrge	r1, [r4, #0]
 8012ae0:	f021 0104 	bicge.w	r1, r1, #4
 8012ae4:	6021      	strge	r1, [r4, #0]
 8012ae6:	b90e      	cbnz	r6, 8012aec <_printf_i+0x118>
 8012ae8:	2d00      	cmp	r5, #0
 8012aea:	d04d      	beq.n	8012b88 <_printf_i+0x1b4>
 8012aec:	4615      	mov	r5, r2
 8012aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8012af2:	fb03 6711 	mls	r7, r3, r1, r6
 8012af6:	5dc7      	ldrb	r7, [r0, r7]
 8012af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012afc:	4637      	mov	r7, r6
 8012afe:	42bb      	cmp	r3, r7
 8012b00:	460e      	mov	r6, r1
 8012b02:	d9f4      	bls.n	8012aee <_printf_i+0x11a>
 8012b04:	2b08      	cmp	r3, #8
 8012b06:	d10b      	bne.n	8012b20 <_printf_i+0x14c>
 8012b08:	6823      	ldr	r3, [r4, #0]
 8012b0a:	07de      	lsls	r6, r3, #31
 8012b0c:	d508      	bpl.n	8012b20 <_printf_i+0x14c>
 8012b0e:	6923      	ldr	r3, [r4, #16]
 8012b10:	6861      	ldr	r1, [r4, #4]
 8012b12:	4299      	cmp	r1, r3
 8012b14:	bfde      	ittt	le
 8012b16:	2330      	movle	r3, #48	; 0x30
 8012b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b20:	1b52      	subs	r2, r2, r5
 8012b22:	6122      	str	r2, [r4, #16]
 8012b24:	f8cd a000 	str.w	sl, [sp]
 8012b28:	464b      	mov	r3, r9
 8012b2a:	aa03      	add	r2, sp, #12
 8012b2c:	4621      	mov	r1, r4
 8012b2e:	4640      	mov	r0, r8
 8012b30:	f7ff fee2 	bl	80128f8 <_printf_common>
 8012b34:	3001      	adds	r0, #1
 8012b36:	d14c      	bne.n	8012bd2 <_printf_i+0x1fe>
 8012b38:	f04f 30ff 	mov.w	r0, #4294967295
 8012b3c:	b004      	add	sp, #16
 8012b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b42:	4835      	ldr	r0, [pc, #212]	; (8012c18 <_printf_i+0x244>)
 8012b44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b48:	6829      	ldr	r1, [r5, #0]
 8012b4a:	6823      	ldr	r3, [r4, #0]
 8012b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b50:	6029      	str	r1, [r5, #0]
 8012b52:	061d      	lsls	r5, r3, #24
 8012b54:	d514      	bpl.n	8012b80 <_printf_i+0x1ac>
 8012b56:	07df      	lsls	r7, r3, #31
 8012b58:	bf44      	itt	mi
 8012b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8012b5e:	6023      	strmi	r3, [r4, #0]
 8012b60:	b91e      	cbnz	r6, 8012b6a <_printf_i+0x196>
 8012b62:	6823      	ldr	r3, [r4, #0]
 8012b64:	f023 0320 	bic.w	r3, r3, #32
 8012b68:	6023      	str	r3, [r4, #0]
 8012b6a:	2310      	movs	r3, #16
 8012b6c:	e7b0      	b.n	8012ad0 <_printf_i+0xfc>
 8012b6e:	6823      	ldr	r3, [r4, #0]
 8012b70:	f043 0320 	orr.w	r3, r3, #32
 8012b74:	6023      	str	r3, [r4, #0]
 8012b76:	2378      	movs	r3, #120	; 0x78
 8012b78:	4828      	ldr	r0, [pc, #160]	; (8012c1c <_printf_i+0x248>)
 8012b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b7e:	e7e3      	b.n	8012b48 <_printf_i+0x174>
 8012b80:	0659      	lsls	r1, r3, #25
 8012b82:	bf48      	it	mi
 8012b84:	b2b6      	uxthmi	r6, r6
 8012b86:	e7e6      	b.n	8012b56 <_printf_i+0x182>
 8012b88:	4615      	mov	r5, r2
 8012b8a:	e7bb      	b.n	8012b04 <_printf_i+0x130>
 8012b8c:	682b      	ldr	r3, [r5, #0]
 8012b8e:	6826      	ldr	r6, [r4, #0]
 8012b90:	6961      	ldr	r1, [r4, #20]
 8012b92:	1d18      	adds	r0, r3, #4
 8012b94:	6028      	str	r0, [r5, #0]
 8012b96:	0635      	lsls	r5, r6, #24
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	d501      	bpl.n	8012ba0 <_printf_i+0x1cc>
 8012b9c:	6019      	str	r1, [r3, #0]
 8012b9e:	e002      	b.n	8012ba6 <_printf_i+0x1d2>
 8012ba0:	0670      	lsls	r0, r6, #25
 8012ba2:	d5fb      	bpl.n	8012b9c <_printf_i+0x1c8>
 8012ba4:	8019      	strh	r1, [r3, #0]
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	6123      	str	r3, [r4, #16]
 8012baa:	4615      	mov	r5, r2
 8012bac:	e7ba      	b.n	8012b24 <_printf_i+0x150>
 8012bae:	682b      	ldr	r3, [r5, #0]
 8012bb0:	1d1a      	adds	r2, r3, #4
 8012bb2:	602a      	str	r2, [r5, #0]
 8012bb4:	681d      	ldr	r5, [r3, #0]
 8012bb6:	6862      	ldr	r2, [r4, #4]
 8012bb8:	2100      	movs	r1, #0
 8012bba:	4628      	mov	r0, r5
 8012bbc:	f7ed fb20 	bl	8000200 <memchr>
 8012bc0:	b108      	cbz	r0, 8012bc6 <_printf_i+0x1f2>
 8012bc2:	1b40      	subs	r0, r0, r5
 8012bc4:	6060      	str	r0, [r4, #4]
 8012bc6:	6863      	ldr	r3, [r4, #4]
 8012bc8:	6123      	str	r3, [r4, #16]
 8012bca:	2300      	movs	r3, #0
 8012bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012bd0:	e7a8      	b.n	8012b24 <_printf_i+0x150>
 8012bd2:	6923      	ldr	r3, [r4, #16]
 8012bd4:	462a      	mov	r2, r5
 8012bd6:	4649      	mov	r1, r9
 8012bd8:	4640      	mov	r0, r8
 8012bda:	47d0      	blx	sl
 8012bdc:	3001      	adds	r0, #1
 8012bde:	d0ab      	beq.n	8012b38 <_printf_i+0x164>
 8012be0:	6823      	ldr	r3, [r4, #0]
 8012be2:	079b      	lsls	r3, r3, #30
 8012be4:	d413      	bmi.n	8012c0e <_printf_i+0x23a>
 8012be6:	68e0      	ldr	r0, [r4, #12]
 8012be8:	9b03      	ldr	r3, [sp, #12]
 8012bea:	4298      	cmp	r0, r3
 8012bec:	bfb8      	it	lt
 8012bee:	4618      	movlt	r0, r3
 8012bf0:	e7a4      	b.n	8012b3c <_printf_i+0x168>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	4632      	mov	r2, r6
 8012bf6:	4649      	mov	r1, r9
 8012bf8:	4640      	mov	r0, r8
 8012bfa:	47d0      	blx	sl
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	d09b      	beq.n	8012b38 <_printf_i+0x164>
 8012c00:	3501      	adds	r5, #1
 8012c02:	68e3      	ldr	r3, [r4, #12]
 8012c04:	9903      	ldr	r1, [sp, #12]
 8012c06:	1a5b      	subs	r3, r3, r1
 8012c08:	42ab      	cmp	r3, r5
 8012c0a:	dcf2      	bgt.n	8012bf2 <_printf_i+0x21e>
 8012c0c:	e7eb      	b.n	8012be6 <_printf_i+0x212>
 8012c0e:	2500      	movs	r5, #0
 8012c10:	f104 0619 	add.w	r6, r4, #25
 8012c14:	e7f5      	b.n	8012c02 <_printf_i+0x22e>
 8012c16:	bf00      	nop
 8012c18:	08013cf5 	.word	0x08013cf5
 8012c1c:	08013d06 	.word	0x08013d06

08012c20 <_scanf_chars>:
 8012c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c24:	4615      	mov	r5, r2
 8012c26:	688a      	ldr	r2, [r1, #8]
 8012c28:	4680      	mov	r8, r0
 8012c2a:	460c      	mov	r4, r1
 8012c2c:	b932      	cbnz	r2, 8012c3c <_scanf_chars+0x1c>
 8012c2e:	698a      	ldr	r2, [r1, #24]
 8012c30:	2a00      	cmp	r2, #0
 8012c32:	bf0c      	ite	eq
 8012c34:	2201      	moveq	r2, #1
 8012c36:	f04f 32ff 	movne.w	r2, #4294967295
 8012c3a:	608a      	str	r2, [r1, #8]
 8012c3c:	6822      	ldr	r2, [r4, #0]
 8012c3e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8012cd0 <_scanf_chars+0xb0>
 8012c42:	06d1      	lsls	r1, r2, #27
 8012c44:	bf5f      	itttt	pl
 8012c46:	681a      	ldrpl	r2, [r3, #0]
 8012c48:	1d11      	addpl	r1, r2, #4
 8012c4a:	6019      	strpl	r1, [r3, #0]
 8012c4c:	6816      	ldrpl	r6, [r2, #0]
 8012c4e:	2700      	movs	r7, #0
 8012c50:	69a0      	ldr	r0, [r4, #24]
 8012c52:	b188      	cbz	r0, 8012c78 <_scanf_chars+0x58>
 8012c54:	2801      	cmp	r0, #1
 8012c56:	d107      	bne.n	8012c68 <_scanf_chars+0x48>
 8012c58:	682a      	ldr	r2, [r5, #0]
 8012c5a:	7811      	ldrb	r1, [r2, #0]
 8012c5c:	6962      	ldr	r2, [r4, #20]
 8012c5e:	5c52      	ldrb	r2, [r2, r1]
 8012c60:	b952      	cbnz	r2, 8012c78 <_scanf_chars+0x58>
 8012c62:	2f00      	cmp	r7, #0
 8012c64:	d031      	beq.n	8012cca <_scanf_chars+0xaa>
 8012c66:	e022      	b.n	8012cae <_scanf_chars+0x8e>
 8012c68:	2802      	cmp	r0, #2
 8012c6a:	d120      	bne.n	8012cae <_scanf_chars+0x8e>
 8012c6c:	682b      	ldr	r3, [r5, #0]
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	f813 3009 	ldrb.w	r3, [r3, r9]
 8012c74:	071b      	lsls	r3, r3, #28
 8012c76:	d41a      	bmi.n	8012cae <_scanf_chars+0x8e>
 8012c78:	6823      	ldr	r3, [r4, #0]
 8012c7a:	06da      	lsls	r2, r3, #27
 8012c7c:	bf5e      	ittt	pl
 8012c7e:	682b      	ldrpl	r3, [r5, #0]
 8012c80:	781b      	ldrbpl	r3, [r3, #0]
 8012c82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012c86:	682a      	ldr	r2, [r5, #0]
 8012c88:	686b      	ldr	r3, [r5, #4]
 8012c8a:	3201      	adds	r2, #1
 8012c8c:	602a      	str	r2, [r5, #0]
 8012c8e:	68a2      	ldr	r2, [r4, #8]
 8012c90:	3b01      	subs	r3, #1
 8012c92:	3a01      	subs	r2, #1
 8012c94:	606b      	str	r3, [r5, #4]
 8012c96:	3701      	adds	r7, #1
 8012c98:	60a2      	str	r2, [r4, #8]
 8012c9a:	b142      	cbz	r2, 8012cae <_scanf_chars+0x8e>
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	dcd7      	bgt.n	8012c50 <_scanf_chars+0x30>
 8012ca0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012ca4:	4629      	mov	r1, r5
 8012ca6:	4640      	mov	r0, r8
 8012ca8:	4798      	blx	r3
 8012caa:	2800      	cmp	r0, #0
 8012cac:	d0d0      	beq.n	8012c50 <_scanf_chars+0x30>
 8012cae:	6823      	ldr	r3, [r4, #0]
 8012cb0:	f013 0310 	ands.w	r3, r3, #16
 8012cb4:	d105      	bne.n	8012cc2 <_scanf_chars+0xa2>
 8012cb6:	68e2      	ldr	r2, [r4, #12]
 8012cb8:	3201      	adds	r2, #1
 8012cba:	60e2      	str	r2, [r4, #12]
 8012cbc:	69a2      	ldr	r2, [r4, #24]
 8012cbe:	b102      	cbz	r2, 8012cc2 <_scanf_chars+0xa2>
 8012cc0:	7033      	strb	r3, [r6, #0]
 8012cc2:	6923      	ldr	r3, [r4, #16]
 8012cc4:	443b      	add	r3, r7
 8012cc6:	6123      	str	r3, [r4, #16]
 8012cc8:	2000      	movs	r0, #0
 8012cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cce:	bf00      	nop
 8012cd0:	08013981 	.word	0x08013981

08012cd4 <_scanf_i>:
 8012cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd8:	4698      	mov	r8, r3
 8012cda:	4b76      	ldr	r3, [pc, #472]	; (8012eb4 <_scanf_i+0x1e0>)
 8012cdc:	460c      	mov	r4, r1
 8012cde:	4682      	mov	sl, r0
 8012ce0:	4616      	mov	r6, r2
 8012ce2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ce6:	b087      	sub	sp, #28
 8012ce8:	ab03      	add	r3, sp, #12
 8012cea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012cee:	4b72      	ldr	r3, [pc, #456]	; (8012eb8 <_scanf_i+0x1e4>)
 8012cf0:	69a1      	ldr	r1, [r4, #24]
 8012cf2:	4a72      	ldr	r2, [pc, #456]	; (8012ebc <_scanf_i+0x1e8>)
 8012cf4:	2903      	cmp	r1, #3
 8012cf6:	bf18      	it	ne
 8012cf8:	461a      	movne	r2, r3
 8012cfa:	68a3      	ldr	r3, [r4, #8]
 8012cfc:	9201      	str	r2, [sp, #4]
 8012cfe:	1e5a      	subs	r2, r3, #1
 8012d00:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012d04:	bf88      	it	hi
 8012d06:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012d0a:	4627      	mov	r7, r4
 8012d0c:	bf82      	ittt	hi
 8012d0e:	eb03 0905 	addhi.w	r9, r3, r5
 8012d12:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012d16:	60a3      	strhi	r3, [r4, #8]
 8012d18:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012d1c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012d20:	bf98      	it	ls
 8012d22:	f04f 0900 	movls.w	r9, #0
 8012d26:	6023      	str	r3, [r4, #0]
 8012d28:	463d      	mov	r5, r7
 8012d2a:	f04f 0b00 	mov.w	fp, #0
 8012d2e:	6831      	ldr	r1, [r6, #0]
 8012d30:	ab03      	add	r3, sp, #12
 8012d32:	7809      	ldrb	r1, [r1, #0]
 8012d34:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012d38:	2202      	movs	r2, #2
 8012d3a:	f7ed fa61 	bl	8000200 <memchr>
 8012d3e:	b328      	cbz	r0, 8012d8c <_scanf_i+0xb8>
 8012d40:	f1bb 0f01 	cmp.w	fp, #1
 8012d44:	d159      	bne.n	8012dfa <_scanf_i+0x126>
 8012d46:	6862      	ldr	r2, [r4, #4]
 8012d48:	b92a      	cbnz	r2, 8012d56 <_scanf_i+0x82>
 8012d4a:	6822      	ldr	r2, [r4, #0]
 8012d4c:	2308      	movs	r3, #8
 8012d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012d52:	6063      	str	r3, [r4, #4]
 8012d54:	6022      	str	r2, [r4, #0]
 8012d56:	6822      	ldr	r2, [r4, #0]
 8012d58:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012d5c:	6022      	str	r2, [r4, #0]
 8012d5e:	68a2      	ldr	r2, [r4, #8]
 8012d60:	1e51      	subs	r1, r2, #1
 8012d62:	60a1      	str	r1, [r4, #8]
 8012d64:	b192      	cbz	r2, 8012d8c <_scanf_i+0xb8>
 8012d66:	6832      	ldr	r2, [r6, #0]
 8012d68:	1c51      	adds	r1, r2, #1
 8012d6a:	6031      	str	r1, [r6, #0]
 8012d6c:	7812      	ldrb	r2, [r2, #0]
 8012d6e:	f805 2b01 	strb.w	r2, [r5], #1
 8012d72:	6872      	ldr	r2, [r6, #4]
 8012d74:	3a01      	subs	r2, #1
 8012d76:	2a00      	cmp	r2, #0
 8012d78:	6072      	str	r2, [r6, #4]
 8012d7a:	dc07      	bgt.n	8012d8c <_scanf_i+0xb8>
 8012d7c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8012d80:	4631      	mov	r1, r6
 8012d82:	4650      	mov	r0, sl
 8012d84:	4790      	blx	r2
 8012d86:	2800      	cmp	r0, #0
 8012d88:	f040 8085 	bne.w	8012e96 <_scanf_i+0x1c2>
 8012d8c:	f10b 0b01 	add.w	fp, fp, #1
 8012d90:	f1bb 0f03 	cmp.w	fp, #3
 8012d94:	d1cb      	bne.n	8012d2e <_scanf_i+0x5a>
 8012d96:	6863      	ldr	r3, [r4, #4]
 8012d98:	b90b      	cbnz	r3, 8012d9e <_scanf_i+0xca>
 8012d9a:	230a      	movs	r3, #10
 8012d9c:	6063      	str	r3, [r4, #4]
 8012d9e:	6863      	ldr	r3, [r4, #4]
 8012da0:	4947      	ldr	r1, [pc, #284]	; (8012ec0 <_scanf_i+0x1ec>)
 8012da2:	6960      	ldr	r0, [r4, #20]
 8012da4:	1ac9      	subs	r1, r1, r3
 8012da6:	f000 f8b7 	bl	8012f18 <__sccl>
 8012daa:	f04f 0b00 	mov.w	fp, #0
 8012dae:	68a3      	ldr	r3, [r4, #8]
 8012db0:	6822      	ldr	r2, [r4, #0]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d03d      	beq.n	8012e32 <_scanf_i+0x15e>
 8012db6:	6831      	ldr	r1, [r6, #0]
 8012db8:	6960      	ldr	r0, [r4, #20]
 8012dba:	f891 c000 	ldrb.w	ip, [r1]
 8012dbe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012dc2:	2800      	cmp	r0, #0
 8012dc4:	d035      	beq.n	8012e32 <_scanf_i+0x15e>
 8012dc6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8012dca:	d124      	bne.n	8012e16 <_scanf_i+0x142>
 8012dcc:	0510      	lsls	r0, r2, #20
 8012dce:	d522      	bpl.n	8012e16 <_scanf_i+0x142>
 8012dd0:	f10b 0b01 	add.w	fp, fp, #1
 8012dd4:	f1b9 0f00 	cmp.w	r9, #0
 8012dd8:	d003      	beq.n	8012de2 <_scanf_i+0x10e>
 8012dda:	3301      	adds	r3, #1
 8012ddc:	f109 39ff 	add.w	r9, r9, #4294967295
 8012de0:	60a3      	str	r3, [r4, #8]
 8012de2:	6873      	ldr	r3, [r6, #4]
 8012de4:	3b01      	subs	r3, #1
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	6073      	str	r3, [r6, #4]
 8012dea:	dd1b      	ble.n	8012e24 <_scanf_i+0x150>
 8012dec:	6833      	ldr	r3, [r6, #0]
 8012dee:	3301      	adds	r3, #1
 8012df0:	6033      	str	r3, [r6, #0]
 8012df2:	68a3      	ldr	r3, [r4, #8]
 8012df4:	3b01      	subs	r3, #1
 8012df6:	60a3      	str	r3, [r4, #8]
 8012df8:	e7d9      	b.n	8012dae <_scanf_i+0xda>
 8012dfa:	f1bb 0f02 	cmp.w	fp, #2
 8012dfe:	d1ae      	bne.n	8012d5e <_scanf_i+0x8a>
 8012e00:	6822      	ldr	r2, [r4, #0]
 8012e02:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012e06:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012e0a:	d1bf      	bne.n	8012d8c <_scanf_i+0xb8>
 8012e0c:	2310      	movs	r3, #16
 8012e0e:	6063      	str	r3, [r4, #4]
 8012e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012e14:	e7a2      	b.n	8012d5c <_scanf_i+0x88>
 8012e16:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012e1a:	6022      	str	r2, [r4, #0]
 8012e1c:	780b      	ldrb	r3, [r1, #0]
 8012e1e:	f805 3b01 	strb.w	r3, [r5], #1
 8012e22:	e7de      	b.n	8012de2 <_scanf_i+0x10e>
 8012e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012e28:	4631      	mov	r1, r6
 8012e2a:	4650      	mov	r0, sl
 8012e2c:	4798      	blx	r3
 8012e2e:	2800      	cmp	r0, #0
 8012e30:	d0df      	beq.n	8012df2 <_scanf_i+0x11e>
 8012e32:	6823      	ldr	r3, [r4, #0]
 8012e34:	05db      	lsls	r3, r3, #23
 8012e36:	d50d      	bpl.n	8012e54 <_scanf_i+0x180>
 8012e38:	42bd      	cmp	r5, r7
 8012e3a:	d909      	bls.n	8012e50 <_scanf_i+0x17c>
 8012e3c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012e40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012e44:	4632      	mov	r2, r6
 8012e46:	4650      	mov	r0, sl
 8012e48:	4798      	blx	r3
 8012e4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8012e4e:	464d      	mov	r5, r9
 8012e50:	42bd      	cmp	r5, r7
 8012e52:	d02d      	beq.n	8012eb0 <_scanf_i+0x1dc>
 8012e54:	6822      	ldr	r2, [r4, #0]
 8012e56:	f012 0210 	ands.w	r2, r2, #16
 8012e5a:	d113      	bne.n	8012e84 <_scanf_i+0x1b0>
 8012e5c:	702a      	strb	r2, [r5, #0]
 8012e5e:	6863      	ldr	r3, [r4, #4]
 8012e60:	9e01      	ldr	r6, [sp, #4]
 8012e62:	4639      	mov	r1, r7
 8012e64:	4650      	mov	r0, sl
 8012e66:	47b0      	blx	r6
 8012e68:	6821      	ldr	r1, [r4, #0]
 8012e6a:	f8d8 3000 	ldr.w	r3, [r8]
 8012e6e:	f011 0f20 	tst.w	r1, #32
 8012e72:	d013      	beq.n	8012e9c <_scanf_i+0x1c8>
 8012e74:	1d1a      	adds	r2, r3, #4
 8012e76:	f8c8 2000 	str.w	r2, [r8]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	6018      	str	r0, [r3, #0]
 8012e7e:	68e3      	ldr	r3, [r4, #12]
 8012e80:	3301      	adds	r3, #1
 8012e82:	60e3      	str	r3, [r4, #12]
 8012e84:	1bed      	subs	r5, r5, r7
 8012e86:	44ab      	add	fp, r5
 8012e88:	6925      	ldr	r5, [r4, #16]
 8012e8a:	445d      	add	r5, fp
 8012e8c:	6125      	str	r5, [r4, #16]
 8012e8e:	2000      	movs	r0, #0
 8012e90:	b007      	add	sp, #28
 8012e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e96:	f04f 0b00 	mov.w	fp, #0
 8012e9a:	e7ca      	b.n	8012e32 <_scanf_i+0x15e>
 8012e9c:	1d1a      	adds	r2, r3, #4
 8012e9e:	f8c8 2000 	str.w	r2, [r8]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f011 0f01 	tst.w	r1, #1
 8012ea8:	bf14      	ite	ne
 8012eaa:	8018      	strhne	r0, [r3, #0]
 8012eac:	6018      	streq	r0, [r3, #0]
 8012eae:	e7e6      	b.n	8012e7e <_scanf_i+0x1aa>
 8012eb0:	2001      	movs	r0, #1
 8012eb2:	e7ed      	b.n	8012e90 <_scanf_i+0x1bc>
 8012eb4:	080137c0 	.word	0x080137c0
 8012eb8:	0801306d 	.word	0x0801306d
 8012ebc:	080109fd 	.word	0x080109fd
 8012ec0:	08013d30 	.word	0x08013d30

08012ec4 <_read_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4d07      	ldr	r5, [pc, #28]	; (8012ee4 <_read_r+0x20>)
 8012ec8:	4604      	mov	r4, r0
 8012eca:	4608      	mov	r0, r1
 8012ecc:	4611      	mov	r1, r2
 8012ece:	2200      	movs	r2, #0
 8012ed0:	602a      	str	r2, [r5, #0]
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	f7f1 fa2c 	bl	8004330 <_read>
 8012ed8:	1c43      	adds	r3, r0, #1
 8012eda:	d102      	bne.n	8012ee2 <_read_r+0x1e>
 8012edc:	682b      	ldr	r3, [r5, #0]
 8012ede:	b103      	cbz	r3, 8012ee2 <_read_r+0x1e>
 8012ee0:	6023      	str	r3, [r4, #0]
 8012ee2:	bd38      	pop	{r3, r4, r5, pc}
 8012ee4:	200027ac 	.word	0x200027ac

08012ee8 <nan>:
 8012ee8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ef0 <nan+0x8>
 8012eec:	4770      	bx	lr
 8012eee:	bf00      	nop
 8012ef0:	00000000 	.word	0x00000000
 8012ef4:	7ff80000 	.word	0x7ff80000

08012ef8 <_sbrk_r>:
 8012ef8:	b538      	push	{r3, r4, r5, lr}
 8012efa:	4d06      	ldr	r5, [pc, #24]	; (8012f14 <_sbrk_r+0x1c>)
 8012efc:	2300      	movs	r3, #0
 8012efe:	4604      	mov	r4, r0
 8012f00:	4608      	mov	r0, r1
 8012f02:	602b      	str	r3, [r5, #0]
 8012f04:	f7f1 fa82 	bl	800440c <_sbrk>
 8012f08:	1c43      	adds	r3, r0, #1
 8012f0a:	d102      	bne.n	8012f12 <_sbrk_r+0x1a>
 8012f0c:	682b      	ldr	r3, [r5, #0]
 8012f0e:	b103      	cbz	r3, 8012f12 <_sbrk_r+0x1a>
 8012f10:	6023      	str	r3, [r4, #0]
 8012f12:	bd38      	pop	{r3, r4, r5, pc}
 8012f14:	200027ac 	.word	0x200027ac

08012f18 <__sccl>:
 8012f18:	b570      	push	{r4, r5, r6, lr}
 8012f1a:	780b      	ldrb	r3, [r1, #0]
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	2b5e      	cmp	r3, #94	; 0x5e
 8012f20:	bf0b      	itete	eq
 8012f22:	784b      	ldrbeq	r3, [r1, #1]
 8012f24:	1c48      	addne	r0, r1, #1
 8012f26:	1c88      	addeq	r0, r1, #2
 8012f28:	2200      	movne	r2, #0
 8012f2a:	bf08      	it	eq
 8012f2c:	2201      	moveq	r2, #1
 8012f2e:	1e61      	subs	r1, r4, #1
 8012f30:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8012f34:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012f38:	42a9      	cmp	r1, r5
 8012f3a:	d1fb      	bne.n	8012f34 <__sccl+0x1c>
 8012f3c:	b90b      	cbnz	r3, 8012f42 <__sccl+0x2a>
 8012f3e:	3801      	subs	r0, #1
 8012f40:	bd70      	pop	{r4, r5, r6, pc}
 8012f42:	f082 0201 	eor.w	r2, r2, #1
 8012f46:	54e2      	strb	r2, [r4, r3]
 8012f48:	4605      	mov	r5, r0
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012f50:	292d      	cmp	r1, #45	; 0x2d
 8012f52:	d006      	beq.n	8012f62 <__sccl+0x4a>
 8012f54:	295d      	cmp	r1, #93	; 0x5d
 8012f56:	d0f3      	beq.n	8012f40 <__sccl+0x28>
 8012f58:	b909      	cbnz	r1, 8012f5e <__sccl+0x46>
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	e7f0      	b.n	8012f40 <__sccl+0x28>
 8012f5e:	460b      	mov	r3, r1
 8012f60:	e7f1      	b.n	8012f46 <__sccl+0x2e>
 8012f62:	786e      	ldrb	r6, [r5, #1]
 8012f64:	2e5d      	cmp	r6, #93	; 0x5d
 8012f66:	d0fa      	beq.n	8012f5e <__sccl+0x46>
 8012f68:	42b3      	cmp	r3, r6
 8012f6a:	dcf8      	bgt.n	8012f5e <__sccl+0x46>
 8012f6c:	3502      	adds	r5, #2
 8012f6e:	4619      	mov	r1, r3
 8012f70:	3101      	adds	r1, #1
 8012f72:	428e      	cmp	r6, r1
 8012f74:	5462      	strb	r2, [r4, r1]
 8012f76:	dcfb      	bgt.n	8012f70 <__sccl+0x58>
 8012f78:	1af1      	subs	r1, r6, r3
 8012f7a:	3901      	subs	r1, #1
 8012f7c:	1c58      	adds	r0, r3, #1
 8012f7e:	42b3      	cmp	r3, r6
 8012f80:	bfa8      	it	ge
 8012f82:	2100      	movge	r1, #0
 8012f84:	1843      	adds	r3, r0, r1
 8012f86:	e7e0      	b.n	8012f4a <__sccl+0x32>

08012f88 <_strtoul_l.constprop.0>:
 8012f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012f8c:	4f36      	ldr	r7, [pc, #216]	; (8013068 <_strtoul_l.constprop.0+0xe0>)
 8012f8e:	4686      	mov	lr, r0
 8012f90:	460d      	mov	r5, r1
 8012f92:	4628      	mov	r0, r5
 8012f94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f98:	5de6      	ldrb	r6, [r4, r7]
 8012f9a:	f016 0608 	ands.w	r6, r6, #8
 8012f9e:	d1f8      	bne.n	8012f92 <_strtoul_l.constprop.0+0xa>
 8012fa0:	2c2d      	cmp	r4, #45	; 0x2d
 8012fa2:	d12f      	bne.n	8013004 <_strtoul_l.constprop.0+0x7c>
 8012fa4:	782c      	ldrb	r4, [r5, #0]
 8012fa6:	2601      	movs	r6, #1
 8012fa8:	1c85      	adds	r5, r0, #2
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d057      	beq.n	801305e <_strtoul_l.constprop.0+0xd6>
 8012fae:	2b10      	cmp	r3, #16
 8012fb0:	d109      	bne.n	8012fc6 <_strtoul_l.constprop.0+0x3e>
 8012fb2:	2c30      	cmp	r4, #48	; 0x30
 8012fb4:	d107      	bne.n	8012fc6 <_strtoul_l.constprop.0+0x3e>
 8012fb6:	7828      	ldrb	r0, [r5, #0]
 8012fb8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012fbc:	2858      	cmp	r0, #88	; 0x58
 8012fbe:	d149      	bne.n	8013054 <_strtoul_l.constprop.0+0xcc>
 8012fc0:	786c      	ldrb	r4, [r5, #1]
 8012fc2:	2310      	movs	r3, #16
 8012fc4:	3502      	adds	r5, #2
 8012fc6:	f04f 38ff 	mov.w	r8, #4294967295
 8012fca:	2700      	movs	r7, #0
 8012fcc:	fbb8 f8f3 	udiv	r8, r8, r3
 8012fd0:	fb03 f908 	mul.w	r9, r3, r8
 8012fd4:	ea6f 0909 	mvn.w	r9, r9
 8012fd8:	4638      	mov	r0, r7
 8012fda:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012fde:	f1bc 0f09 	cmp.w	ip, #9
 8012fe2:	d814      	bhi.n	801300e <_strtoul_l.constprop.0+0x86>
 8012fe4:	4664      	mov	r4, ip
 8012fe6:	42a3      	cmp	r3, r4
 8012fe8:	dd22      	ble.n	8013030 <_strtoul_l.constprop.0+0xa8>
 8012fea:	2f00      	cmp	r7, #0
 8012fec:	db1d      	blt.n	801302a <_strtoul_l.constprop.0+0xa2>
 8012fee:	4580      	cmp	r8, r0
 8012ff0:	d31b      	bcc.n	801302a <_strtoul_l.constprop.0+0xa2>
 8012ff2:	d101      	bne.n	8012ff8 <_strtoul_l.constprop.0+0x70>
 8012ff4:	45a1      	cmp	r9, r4
 8012ff6:	db18      	blt.n	801302a <_strtoul_l.constprop.0+0xa2>
 8012ff8:	fb00 4003 	mla	r0, r0, r3, r4
 8012ffc:	2701      	movs	r7, #1
 8012ffe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013002:	e7ea      	b.n	8012fda <_strtoul_l.constprop.0+0x52>
 8013004:	2c2b      	cmp	r4, #43	; 0x2b
 8013006:	bf04      	itt	eq
 8013008:	782c      	ldrbeq	r4, [r5, #0]
 801300a:	1c85      	addeq	r5, r0, #2
 801300c:	e7cd      	b.n	8012faa <_strtoul_l.constprop.0+0x22>
 801300e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013012:	f1bc 0f19 	cmp.w	ip, #25
 8013016:	d801      	bhi.n	801301c <_strtoul_l.constprop.0+0x94>
 8013018:	3c37      	subs	r4, #55	; 0x37
 801301a:	e7e4      	b.n	8012fe6 <_strtoul_l.constprop.0+0x5e>
 801301c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013020:	f1bc 0f19 	cmp.w	ip, #25
 8013024:	d804      	bhi.n	8013030 <_strtoul_l.constprop.0+0xa8>
 8013026:	3c57      	subs	r4, #87	; 0x57
 8013028:	e7dd      	b.n	8012fe6 <_strtoul_l.constprop.0+0x5e>
 801302a:	f04f 37ff 	mov.w	r7, #4294967295
 801302e:	e7e6      	b.n	8012ffe <_strtoul_l.constprop.0+0x76>
 8013030:	2f00      	cmp	r7, #0
 8013032:	da07      	bge.n	8013044 <_strtoul_l.constprop.0+0xbc>
 8013034:	2322      	movs	r3, #34	; 0x22
 8013036:	f8ce 3000 	str.w	r3, [lr]
 801303a:	f04f 30ff 	mov.w	r0, #4294967295
 801303e:	b932      	cbnz	r2, 801304e <_strtoul_l.constprop.0+0xc6>
 8013040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013044:	b106      	cbz	r6, 8013048 <_strtoul_l.constprop.0+0xc0>
 8013046:	4240      	negs	r0, r0
 8013048:	2a00      	cmp	r2, #0
 801304a:	d0f9      	beq.n	8013040 <_strtoul_l.constprop.0+0xb8>
 801304c:	b107      	cbz	r7, 8013050 <_strtoul_l.constprop.0+0xc8>
 801304e:	1e69      	subs	r1, r5, #1
 8013050:	6011      	str	r1, [r2, #0]
 8013052:	e7f5      	b.n	8013040 <_strtoul_l.constprop.0+0xb8>
 8013054:	2430      	movs	r4, #48	; 0x30
 8013056:	2b00      	cmp	r3, #0
 8013058:	d1b5      	bne.n	8012fc6 <_strtoul_l.constprop.0+0x3e>
 801305a:	2308      	movs	r3, #8
 801305c:	e7b3      	b.n	8012fc6 <_strtoul_l.constprop.0+0x3e>
 801305e:	2c30      	cmp	r4, #48	; 0x30
 8013060:	d0a9      	beq.n	8012fb6 <_strtoul_l.constprop.0+0x2e>
 8013062:	230a      	movs	r3, #10
 8013064:	e7af      	b.n	8012fc6 <_strtoul_l.constprop.0+0x3e>
 8013066:	bf00      	nop
 8013068:	08013981 	.word	0x08013981

0801306c <_strtoul_r>:
 801306c:	f7ff bf8c 	b.w	8012f88 <_strtoul_l.constprop.0>

08013070 <__submore>:
 8013070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013074:	460c      	mov	r4, r1
 8013076:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801307c:	4299      	cmp	r1, r3
 801307e:	d11d      	bne.n	80130bc <__submore+0x4c>
 8013080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013084:	f7ff f896 	bl	80121b4 <_malloc_r>
 8013088:	b918      	cbnz	r0, 8013092 <__submore+0x22>
 801308a:	f04f 30ff 	mov.w	r0, #4294967295
 801308e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013096:	63a3      	str	r3, [r4, #56]	; 0x38
 8013098:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801309c:	6360      	str	r0, [r4, #52]	; 0x34
 801309e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80130a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80130a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80130aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80130ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80130b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80130b6:	6020      	str	r0, [r4, #0]
 80130b8:	2000      	movs	r0, #0
 80130ba:	e7e8      	b.n	801308e <__submore+0x1e>
 80130bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80130be:	0077      	lsls	r7, r6, #1
 80130c0:	463a      	mov	r2, r7
 80130c2:	f000 f89d 	bl	8013200 <_realloc_r>
 80130c6:	4605      	mov	r5, r0
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d0de      	beq.n	801308a <__submore+0x1a>
 80130cc:	eb00 0806 	add.w	r8, r0, r6
 80130d0:	4601      	mov	r1, r0
 80130d2:	4632      	mov	r2, r6
 80130d4:	4640      	mov	r0, r8
 80130d6:	f7fc fa6b 	bl	800f5b0 <memcpy>
 80130da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80130de:	f8c4 8000 	str.w	r8, [r4]
 80130e2:	e7e9      	b.n	80130b8 <__submore+0x48>

080130e4 <__ascii_wctomb>:
 80130e4:	b149      	cbz	r1, 80130fa <__ascii_wctomb+0x16>
 80130e6:	2aff      	cmp	r2, #255	; 0xff
 80130e8:	bf85      	ittet	hi
 80130ea:	238a      	movhi	r3, #138	; 0x8a
 80130ec:	6003      	strhi	r3, [r0, #0]
 80130ee:	700a      	strbls	r2, [r1, #0]
 80130f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80130f4:	bf98      	it	ls
 80130f6:	2001      	movls	r0, #1
 80130f8:	4770      	bx	lr
 80130fa:	4608      	mov	r0, r1
 80130fc:	4770      	bx	lr
	...

08013100 <__assert_func>:
 8013100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013102:	4614      	mov	r4, r2
 8013104:	461a      	mov	r2, r3
 8013106:	4b09      	ldr	r3, [pc, #36]	; (801312c <__assert_func+0x2c>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4605      	mov	r5, r0
 801310c:	68d8      	ldr	r0, [r3, #12]
 801310e:	b14c      	cbz	r4, 8013124 <__assert_func+0x24>
 8013110:	4b07      	ldr	r3, [pc, #28]	; (8013130 <__assert_func+0x30>)
 8013112:	9100      	str	r1, [sp, #0]
 8013114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013118:	4906      	ldr	r1, [pc, #24]	; (8013134 <__assert_func+0x34>)
 801311a:	462b      	mov	r3, r5
 801311c:	f000 f80e 	bl	801313c <fiprintf>
 8013120:	f000 f9f6 	bl	8013510 <abort>
 8013124:	4b04      	ldr	r3, [pc, #16]	; (8013138 <__assert_func+0x38>)
 8013126:	461c      	mov	r4, r3
 8013128:	e7f3      	b.n	8013112 <__assert_func+0x12>
 801312a:	bf00      	nop
 801312c:	20000010 	.word	0x20000010
 8013130:	08013d32 	.word	0x08013d32
 8013134:	08013d3f 	.word	0x08013d3f
 8013138:	08013d6d 	.word	0x08013d6d

0801313c <fiprintf>:
 801313c:	b40e      	push	{r1, r2, r3}
 801313e:	b503      	push	{r0, r1, lr}
 8013140:	4601      	mov	r1, r0
 8013142:	ab03      	add	r3, sp, #12
 8013144:	4805      	ldr	r0, [pc, #20]	; (801315c <fiprintf+0x20>)
 8013146:	f853 2b04 	ldr.w	r2, [r3], #4
 801314a:	6800      	ldr	r0, [r0, #0]
 801314c:	9301      	str	r3, [sp, #4]
 801314e:	f000 f8af 	bl	80132b0 <_vfiprintf_r>
 8013152:	b002      	add	sp, #8
 8013154:	f85d eb04 	ldr.w	lr, [sp], #4
 8013158:	b003      	add	sp, #12
 801315a:	4770      	bx	lr
 801315c:	20000010 	.word	0x20000010

08013160 <_fstat_r>:
 8013160:	b538      	push	{r3, r4, r5, lr}
 8013162:	4d07      	ldr	r5, [pc, #28]	; (8013180 <_fstat_r+0x20>)
 8013164:	2300      	movs	r3, #0
 8013166:	4604      	mov	r4, r0
 8013168:	4608      	mov	r0, r1
 801316a:	4611      	mov	r1, r2
 801316c:	602b      	str	r3, [r5, #0]
 801316e:	f7f1 f924 	bl	80043ba <_fstat>
 8013172:	1c43      	adds	r3, r0, #1
 8013174:	d102      	bne.n	801317c <_fstat_r+0x1c>
 8013176:	682b      	ldr	r3, [r5, #0]
 8013178:	b103      	cbz	r3, 801317c <_fstat_r+0x1c>
 801317a:	6023      	str	r3, [r4, #0]
 801317c:	bd38      	pop	{r3, r4, r5, pc}
 801317e:	bf00      	nop
 8013180:	200027ac 	.word	0x200027ac

08013184 <_isatty_r>:
 8013184:	b538      	push	{r3, r4, r5, lr}
 8013186:	4d06      	ldr	r5, [pc, #24]	; (80131a0 <_isatty_r+0x1c>)
 8013188:	2300      	movs	r3, #0
 801318a:	4604      	mov	r4, r0
 801318c:	4608      	mov	r0, r1
 801318e:	602b      	str	r3, [r5, #0]
 8013190:	f7f1 f923 	bl	80043da <_isatty>
 8013194:	1c43      	adds	r3, r0, #1
 8013196:	d102      	bne.n	801319e <_isatty_r+0x1a>
 8013198:	682b      	ldr	r3, [r5, #0]
 801319a:	b103      	cbz	r3, 801319e <_isatty_r+0x1a>
 801319c:	6023      	str	r3, [r4, #0]
 801319e:	bd38      	pop	{r3, r4, r5, pc}
 80131a0:	200027ac 	.word	0x200027ac

080131a4 <malloc>:
 80131a4:	4b02      	ldr	r3, [pc, #8]	; (80131b0 <malloc+0xc>)
 80131a6:	4601      	mov	r1, r0
 80131a8:	6818      	ldr	r0, [r3, #0]
 80131aa:	f7ff b803 	b.w	80121b4 <_malloc_r>
 80131ae:	bf00      	nop
 80131b0:	20000010 	.word	0x20000010

080131b4 <memmove>:
 80131b4:	4288      	cmp	r0, r1
 80131b6:	b510      	push	{r4, lr}
 80131b8:	eb01 0402 	add.w	r4, r1, r2
 80131bc:	d902      	bls.n	80131c4 <memmove+0x10>
 80131be:	4284      	cmp	r4, r0
 80131c0:	4623      	mov	r3, r4
 80131c2:	d807      	bhi.n	80131d4 <memmove+0x20>
 80131c4:	1e43      	subs	r3, r0, #1
 80131c6:	42a1      	cmp	r1, r4
 80131c8:	d008      	beq.n	80131dc <memmove+0x28>
 80131ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80131d2:	e7f8      	b.n	80131c6 <memmove+0x12>
 80131d4:	4402      	add	r2, r0
 80131d6:	4601      	mov	r1, r0
 80131d8:	428a      	cmp	r2, r1
 80131da:	d100      	bne.n	80131de <memmove+0x2a>
 80131dc:	bd10      	pop	{r4, pc}
 80131de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80131e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80131e6:	e7f7      	b.n	80131d8 <memmove+0x24>

080131e8 <__malloc_lock>:
 80131e8:	4801      	ldr	r0, [pc, #4]	; (80131f0 <__malloc_lock+0x8>)
 80131ea:	f7fe ba12 	b.w	8011612 <__retarget_lock_acquire_recursive>
 80131ee:	bf00      	nop
 80131f0:	200027a0 	.word	0x200027a0

080131f4 <__malloc_unlock>:
 80131f4:	4801      	ldr	r0, [pc, #4]	; (80131fc <__malloc_unlock+0x8>)
 80131f6:	f7fe ba0d 	b.w	8011614 <__retarget_lock_release_recursive>
 80131fa:	bf00      	nop
 80131fc:	200027a0 	.word	0x200027a0

08013200 <_realloc_r>:
 8013200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013204:	4680      	mov	r8, r0
 8013206:	4614      	mov	r4, r2
 8013208:	460e      	mov	r6, r1
 801320a:	b921      	cbnz	r1, 8013216 <_realloc_r+0x16>
 801320c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013210:	4611      	mov	r1, r2
 8013212:	f7fe bfcf 	b.w	80121b4 <_malloc_r>
 8013216:	b92a      	cbnz	r2, 8013224 <_realloc_r+0x24>
 8013218:	f7fe ff60 	bl	80120dc <_free_r>
 801321c:	4625      	mov	r5, r4
 801321e:	4628      	mov	r0, r5
 8013220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013224:	f000 f97b 	bl	801351e <_malloc_usable_size_r>
 8013228:	4284      	cmp	r4, r0
 801322a:	4607      	mov	r7, r0
 801322c:	d802      	bhi.n	8013234 <_realloc_r+0x34>
 801322e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013232:	d812      	bhi.n	801325a <_realloc_r+0x5a>
 8013234:	4621      	mov	r1, r4
 8013236:	4640      	mov	r0, r8
 8013238:	f7fe ffbc 	bl	80121b4 <_malloc_r>
 801323c:	4605      	mov	r5, r0
 801323e:	2800      	cmp	r0, #0
 8013240:	d0ed      	beq.n	801321e <_realloc_r+0x1e>
 8013242:	42bc      	cmp	r4, r7
 8013244:	4622      	mov	r2, r4
 8013246:	4631      	mov	r1, r6
 8013248:	bf28      	it	cs
 801324a:	463a      	movcs	r2, r7
 801324c:	f7fc f9b0 	bl	800f5b0 <memcpy>
 8013250:	4631      	mov	r1, r6
 8013252:	4640      	mov	r0, r8
 8013254:	f7fe ff42 	bl	80120dc <_free_r>
 8013258:	e7e1      	b.n	801321e <_realloc_r+0x1e>
 801325a:	4635      	mov	r5, r6
 801325c:	e7df      	b.n	801321e <_realloc_r+0x1e>

0801325e <__sfputc_r>:
 801325e:	6893      	ldr	r3, [r2, #8]
 8013260:	3b01      	subs	r3, #1
 8013262:	2b00      	cmp	r3, #0
 8013264:	b410      	push	{r4}
 8013266:	6093      	str	r3, [r2, #8]
 8013268:	da08      	bge.n	801327c <__sfputc_r+0x1e>
 801326a:	6994      	ldr	r4, [r2, #24]
 801326c:	42a3      	cmp	r3, r4
 801326e:	db01      	blt.n	8013274 <__sfputc_r+0x16>
 8013270:	290a      	cmp	r1, #10
 8013272:	d103      	bne.n	801327c <__sfputc_r+0x1e>
 8013274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013278:	f7fd bbc2 	b.w	8010a00 <__swbuf_r>
 801327c:	6813      	ldr	r3, [r2, #0]
 801327e:	1c58      	adds	r0, r3, #1
 8013280:	6010      	str	r0, [r2, #0]
 8013282:	7019      	strb	r1, [r3, #0]
 8013284:	4608      	mov	r0, r1
 8013286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801328a:	4770      	bx	lr

0801328c <__sfputs_r>:
 801328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801328e:	4606      	mov	r6, r0
 8013290:	460f      	mov	r7, r1
 8013292:	4614      	mov	r4, r2
 8013294:	18d5      	adds	r5, r2, r3
 8013296:	42ac      	cmp	r4, r5
 8013298:	d101      	bne.n	801329e <__sfputs_r+0x12>
 801329a:	2000      	movs	r0, #0
 801329c:	e007      	b.n	80132ae <__sfputs_r+0x22>
 801329e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a2:	463a      	mov	r2, r7
 80132a4:	4630      	mov	r0, r6
 80132a6:	f7ff ffda 	bl	801325e <__sfputc_r>
 80132aa:	1c43      	adds	r3, r0, #1
 80132ac:	d1f3      	bne.n	8013296 <__sfputs_r+0xa>
 80132ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132b0 <_vfiprintf_r>:
 80132b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b4:	460d      	mov	r5, r1
 80132b6:	b09d      	sub	sp, #116	; 0x74
 80132b8:	4614      	mov	r4, r2
 80132ba:	4698      	mov	r8, r3
 80132bc:	4606      	mov	r6, r0
 80132be:	b118      	cbz	r0, 80132c8 <_vfiprintf_r+0x18>
 80132c0:	6983      	ldr	r3, [r0, #24]
 80132c2:	b90b      	cbnz	r3, 80132c8 <_vfiprintf_r+0x18>
 80132c4:	f7fd fd98 	bl	8010df8 <__sinit>
 80132c8:	4b89      	ldr	r3, [pc, #548]	; (80134f0 <_vfiprintf_r+0x240>)
 80132ca:	429d      	cmp	r5, r3
 80132cc:	d11b      	bne.n	8013306 <_vfiprintf_r+0x56>
 80132ce:	6875      	ldr	r5, [r6, #4]
 80132d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132d2:	07d9      	lsls	r1, r3, #31
 80132d4:	d405      	bmi.n	80132e2 <_vfiprintf_r+0x32>
 80132d6:	89ab      	ldrh	r3, [r5, #12]
 80132d8:	059a      	lsls	r2, r3, #22
 80132da:	d402      	bmi.n	80132e2 <_vfiprintf_r+0x32>
 80132dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132de:	f7fe f998 	bl	8011612 <__retarget_lock_acquire_recursive>
 80132e2:	89ab      	ldrh	r3, [r5, #12]
 80132e4:	071b      	lsls	r3, r3, #28
 80132e6:	d501      	bpl.n	80132ec <_vfiprintf_r+0x3c>
 80132e8:	692b      	ldr	r3, [r5, #16]
 80132ea:	b9eb      	cbnz	r3, 8013328 <_vfiprintf_r+0x78>
 80132ec:	4629      	mov	r1, r5
 80132ee:	4630      	mov	r0, r6
 80132f0:	f7fd fbea 	bl	8010ac8 <__swsetup_r>
 80132f4:	b1c0      	cbz	r0, 8013328 <_vfiprintf_r+0x78>
 80132f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132f8:	07dc      	lsls	r4, r3, #31
 80132fa:	d50e      	bpl.n	801331a <_vfiprintf_r+0x6a>
 80132fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013300:	b01d      	add	sp, #116	; 0x74
 8013302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013306:	4b7b      	ldr	r3, [pc, #492]	; (80134f4 <_vfiprintf_r+0x244>)
 8013308:	429d      	cmp	r5, r3
 801330a:	d101      	bne.n	8013310 <_vfiprintf_r+0x60>
 801330c:	68b5      	ldr	r5, [r6, #8]
 801330e:	e7df      	b.n	80132d0 <_vfiprintf_r+0x20>
 8013310:	4b79      	ldr	r3, [pc, #484]	; (80134f8 <_vfiprintf_r+0x248>)
 8013312:	429d      	cmp	r5, r3
 8013314:	bf08      	it	eq
 8013316:	68f5      	ldreq	r5, [r6, #12]
 8013318:	e7da      	b.n	80132d0 <_vfiprintf_r+0x20>
 801331a:	89ab      	ldrh	r3, [r5, #12]
 801331c:	0598      	lsls	r0, r3, #22
 801331e:	d4ed      	bmi.n	80132fc <_vfiprintf_r+0x4c>
 8013320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013322:	f7fe f977 	bl	8011614 <__retarget_lock_release_recursive>
 8013326:	e7e9      	b.n	80132fc <_vfiprintf_r+0x4c>
 8013328:	2300      	movs	r3, #0
 801332a:	9309      	str	r3, [sp, #36]	; 0x24
 801332c:	2320      	movs	r3, #32
 801332e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013332:	f8cd 800c 	str.w	r8, [sp, #12]
 8013336:	2330      	movs	r3, #48	; 0x30
 8013338:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80134fc <_vfiprintf_r+0x24c>
 801333c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013340:	f04f 0901 	mov.w	r9, #1
 8013344:	4623      	mov	r3, r4
 8013346:	469a      	mov	sl, r3
 8013348:	f813 2b01 	ldrb.w	r2, [r3], #1
 801334c:	b10a      	cbz	r2, 8013352 <_vfiprintf_r+0xa2>
 801334e:	2a25      	cmp	r2, #37	; 0x25
 8013350:	d1f9      	bne.n	8013346 <_vfiprintf_r+0x96>
 8013352:	ebba 0b04 	subs.w	fp, sl, r4
 8013356:	d00b      	beq.n	8013370 <_vfiprintf_r+0xc0>
 8013358:	465b      	mov	r3, fp
 801335a:	4622      	mov	r2, r4
 801335c:	4629      	mov	r1, r5
 801335e:	4630      	mov	r0, r6
 8013360:	f7ff ff94 	bl	801328c <__sfputs_r>
 8013364:	3001      	adds	r0, #1
 8013366:	f000 80aa 	beq.w	80134be <_vfiprintf_r+0x20e>
 801336a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801336c:	445a      	add	r2, fp
 801336e:	9209      	str	r2, [sp, #36]	; 0x24
 8013370:	f89a 3000 	ldrb.w	r3, [sl]
 8013374:	2b00      	cmp	r3, #0
 8013376:	f000 80a2 	beq.w	80134be <_vfiprintf_r+0x20e>
 801337a:	2300      	movs	r3, #0
 801337c:	f04f 32ff 	mov.w	r2, #4294967295
 8013380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013384:	f10a 0a01 	add.w	sl, sl, #1
 8013388:	9304      	str	r3, [sp, #16]
 801338a:	9307      	str	r3, [sp, #28]
 801338c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013390:	931a      	str	r3, [sp, #104]	; 0x68
 8013392:	4654      	mov	r4, sl
 8013394:	2205      	movs	r2, #5
 8013396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801339a:	4858      	ldr	r0, [pc, #352]	; (80134fc <_vfiprintf_r+0x24c>)
 801339c:	f7ec ff30 	bl	8000200 <memchr>
 80133a0:	9a04      	ldr	r2, [sp, #16]
 80133a2:	b9d8      	cbnz	r0, 80133dc <_vfiprintf_r+0x12c>
 80133a4:	06d1      	lsls	r1, r2, #27
 80133a6:	bf44      	itt	mi
 80133a8:	2320      	movmi	r3, #32
 80133aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133ae:	0713      	lsls	r3, r2, #28
 80133b0:	bf44      	itt	mi
 80133b2:	232b      	movmi	r3, #43	; 0x2b
 80133b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133b8:	f89a 3000 	ldrb.w	r3, [sl]
 80133bc:	2b2a      	cmp	r3, #42	; 0x2a
 80133be:	d015      	beq.n	80133ec <_vfiprintf_r+0x13c>
 80133c0:	9a07      	ldr	r2, [sp, #28]
 80133c2:	4654      	mov	r4, sl
 80133c4:	2000      	movs	r0, #0
 80133c6:	f04f 0c0a 	mov.w	ip, #10
 80133ca:	4621      	mov	r1, r4
 80133cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133d0:	3b30      	subs	r3, #48	; 0x30
 80133d2:	2b09      	cmp	r3, #9
 80133d4:	d94e      	bls.n	8013474 <_vfiprintf_r+0x1c4>
 80133d6:	b1b0      	cbz	r0, 8013406 <_vfiprintf_r+0x156>
 80133d8:	9207      	str	r2, [sp, #28]
 80133da:	e014      	b.n	8013406 <_vfiprintf_r+0x156>
 80133dc:	eba0 0308 	sub.w	r3, r0, r8
 80133e0:	fa09 f303 	lsl.w	r3, r9, r3
 80133e4:	4313      	orrs	r3, r2
 80133e6:	9304      	str	r3, [sp, #16]
 80133e8:	46a2      	mov	sl, r4
 80133ea:	e7d2      	b.n	8013392 <_vfiprintf_r+0xe2>
 80133ec:	9b03      	ldr	r3, [sp, #12]
 80133ee:	1d19      	adds	r1, r3, #4
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	9103      	str	r1, [sp, #12]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	bfbb      	ittet	lt
 80133f8:	425b      	neglt	r3, r3
 80133fa:	f042 0202 	orrlt.w	r2, r2, #2
 80133fe:	9307      	strge	r3, [sp, #28]
 8013400:	9307      	strlt	r3, [sp, #28]
 8013402:	bfb8      	it	lt
 8013404:	9204      	strlt	r2, [sp, #16]
 8013406:	7823      	ldrb	r3, [r4, #0]
 8013408:	2b2e      	cmp	r3, #46	; 0x2e
 801340a:	d10c      	bne.n	8013426 <_vfiprintf_r+0x176>
 801340c:	7863      	ldrb	r3, [r4, #1]
 801340e:	2b2a      	cmp	r3, #42	; 0x2a
 8013410:	d135      	bne.n	801347e <_vfiprintf_r+0x1ce>
 8013412:	9b03      	ldr	r3, [sp, #12]
 8013414:	1d1a      	adds	r2, r3, #4
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	9203      	str	r2, [sp, #12]
 801341a:	2b00      	cmp	r3, #0
 801341c:	bfb8      	it	lt
 801341e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013422:	3402      	adds	r4, #2
 8013424:	9305      	str	r3, [sp, #20]
 8013426:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801350c <_vfiprintf_r+0x25c>
 801342a:	7821      	ldrb	r1, [r4, #0]
 801342c:	2203      	movs	r2, #3
 801342e:	4650      	mov	r0, sl
 8013430:	f7ec fee6 	bl	8000200 <memchr>
 8013434:	b140      	cbz	r0, 8013448 <_vfiprintf_r+0x198>
 8013436:	2340      	movs	r3, #64	; 0x40
 8013438:	eba0 000a 	sub.w	r0, r0, sl
 801343c:	fa03 f000 	lsl.w	r0, r3, r0
 8013440:	9b04      	ldr	r3, [sp, #16]
 8013442:	4303      	orrs	r3, r0
 8013444:	3401      	adds	r4, #1
 8013446:	9304      	str	r3, [sp, #16]
 8013448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801344c:	482c      	ldr	r0, [pc, #176]	; (8013500 <_vfiprintf_r+0x250>)
 801344e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013452:	2206      	movs	r2, #6
 8013454:	f7ec fed4 	bl	8000200 <memchr>
 8013458:	2800      	cmp	r0, #0
 801345a:	d03f      	beq.n	80134dc <_vfiprintf_r+0x22c>
 801345c:	4b29      	ldr	r3, [pc, #164]	; (8013504 <_vfiprintf_r+0x254>)
 801345e:	bb1b      	cbnz	r3, 80134a8 <_vfiprintf_r+0x1f8>
 8013460:	9b03      	ldr	r3, [sp, #12]
 8013462:	3307      	adds	r3, #7
 8013464:	f023 0307 	bic.w	r3, r3, #7
 8013468:	3308      	adds	r3, #8
 801346a:	9303      	str	r3, [sp, #12]
 801346c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801346e:	443b      	add	r3, r7
 8013470:	9309      	str	r3, [sp, #36]	; 0x24
 8013472:	e767      	b.n	8013344 <_vfiprintf_r+0x94>
 8013474:	fb0c 3202 	mla	r2, ip, r2, r3
 8013478:	460c      	mov	r4, r1
 801347a:	2001      	movs	r0, #1
 801347c:	e7a5      	b.n	80133ca <_vfiprintf_r+0x11a>
 801347e:	2300      	movs	r3, #0
 8013480:	3401      	adds	r4, #1
 8013482:	9305      	str	r3, [sp, #20]
 8013484:	4619      	mov	r1, r3
 8013486:	f04f 0c0a 	mov.w	ip, #10
 801348a:	4620      	mov	r0, r4
 801348c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013490:	3a30      	subs	r2, #48	; 0x30
 8013492:	2a09      	cmp	r2, #9
 8013494:	d903      	bls.n	801349e <_vfiprintf_r+0x1ee>
 8013496:	2b00      	cmp	r3, #0
 8013498:	d0c5      	beq.n	8013426 <_vfiprintf_r+0x176>
 801349a:	9105      	str	r1, [sp, #20]
 801349c:	e7c3      	b.n	8013426 <_vfiprintf_r+0x176>
 801349e:	fb0c 2101 	mla	r1, ip, r1, r2
 80134a2:	4604      	mov	r4, r0
 80134a4:	2301      	movs	r3, #1
 80134a6:	e7f0      	b.n	801348a <_vfiprintf_r+0x1da>
 80134a8:	ab03      	add	r3, sp, #12
 80134aa:	9300      	str	r3, [sp, #0]
 80134ac:	462a      	mov	r2, r5
 80134ae:	4b16      	ldr	r3, [pc, #88]	; (8013508 <_vfiprintf_r+0x258>)
 80134b0:	a904      	add	r1, sp, #16
 80134b2:	4630      	mov	r0, r6
 80134b4:	f3af 8000 	nop.w
 80134b8:	4607      	mov	r7, r0
 80134ba:	1c78      	adds	r0, r7, #1
 80134bc:	d1d6      	bne.n	801346c <_vfiprintf_r+0x1bc>
 80134be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134c0:	07d9      	lsls	r1, r3, #31
 80134c2:	d405      	bmi.n	80134d0 <_vfiprintf_r+0x220>
 80134c4:	89ab      	ldrh	r3, [r5, #12]
 80134c6:	059a      	lsls	r2, r3, #22
 80134c8:	d402      	bmi.n	80134d0 <_vfiprintf_r+0x220>
 80134ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134cc:	f7fe f8a2 	bl	8011614 <__retarget_lock_release_recursive>
 80134d0:	89ab      	ldrh	r3, [r5, #12]
 80134d2:	065b      	lsls	r3, r3, #25
 80134d4:	f53f af12 	bmi.w	80132fc <_vfiprintf_r+0x4c>
 80134d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134da:	e711      	b.n	8013300 <_vfiprintf_r+0x50>
 80134dc:	ab03      	add	r3, sp, #12
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	462a      	mov	r2, r5
 80134e2:	4b09      	ldr	r3, [pc, #36]	; (8013508 <_vfiprintf_r+0x258>)
 80134e4:	a904      	add	r1, sp, #16
 80134e6:	4630      	mov	r0, r6
 80134e8:	f7ff fa74 	bl	80129d4 <_printf_i>
 80134ec:	e7e4      	b.n	80134b8 <_vfiprintf_r+0x208>
 80134ee:	bf00      	nop
 80134f0:	08013aa4 	.word	0x08013aa4
 80134f4:	08013ac4 	.word	0x08013ac4
 80134f8:	08013a84 	.word	0x08013a84
 80134fc:	08013ce4 	.word	0x08013ce4
 8013500:	08013cee 	.word	0x08013cee
 8013504:	00000000 	.word	0x00000000
 8013508:	0801328d 	.word	0x0801328d
 801350c:	08013cea 	.word	0x08013cea

08013510 <abort>:
 8013510:	b508      	push	{r3, lr}
 8013512:	2006      	movs	r0, #6
 8013514:	f000 f834 	bl	8013580 <raise>
 8013518:	2001      	movs	r0, #1
 801351a:	f7f0 feff 	bl	800431c <_exit>

0801351e <_malloc_usable_size_r>:
 801351e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013522:	1f18      	subs	r0, r3, #4
 8013524:	2b00      	cmp	r3, #0
 8013526:	bfbc      	itt	lt
 8013528:	580b      	ldrlt	r3, [r1, r0]
 801352a:	18c0      	addlt	r0, r0, r3
 801352c:	4770      	bx	lr

0801352e <_raise_r>:
 801352e:	291f      	cmp	r1, #31
 8013530:	b538      	push	{r3, r4, r5, lr}
 8013532:	4604      	mov	r4, r0
 8013534:	460d      	mov	r5, r1
 8013536:	d904      	bls.n	8013542 <_raise_r+0x14>
 8013538:	2316      	movs	r3, #22
 801353a:	6003      	str	r3, [r0, #0]
 801353c:	f04f 30ff 	mov.w	r0, #4294967295
 8013540:	bd38      	pop	{r3, r4, r5, pc}
 8013542:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013544:	b112      	cbz	r2, 801354c <_raise_r+0x1e>
 8013546:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801354a:	b94b      	cbnz	r3, 8013560 <_raise_r+0x32>
 801354c:	4620      	mov	r0, r4
 801354e:	f000 f831 	bl	80135b4 <_getpid_r>
 8013552:	462a      	mov	r2, r5
 8013554:	4601      	mov	r1, r0
 8013556:	4620      	mov	r0, r4
 8013558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801355c:	f000 b818 	b.w	8013590 <_kill_r>
 8013560:	2b01      	cmp	r3, #1
 8013562:	d00a      	beq.n	801357a <_raise_r+0x4c>
 8013564:	1c59      	adds	r1, r3, #1
 8013566:	d103      	bne.n	8013570 <_raise_r+0x42>
 8013568:	2316      	movs	r3, #22
 801356a:	6003      	str	r3, [r0, #0]
 801356c:	2001      	movs	r0, #1
 801356e:	e7e7      	b.n	8013540 <_raise_r+0x12>
 8013570:	2400      	movs	r4, #0
 8013572:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013576:	4628      	mov	r0, r5
 8013578:	4798      	blx	r3
 801357a:	2000      	movs	r0, #0
 801357c:	e7e0      	b.n	8013540 <_raise_r+0x12>
	...

08013580 <raise>:
 8013580:	4b02      	ldr	r3, [pc, #8]	; (801358c <raise+0xc>)
 8013582:	4601      	mov	r1, r0
 8013584:	6818      	ldr	r0, [r3, #0]
 8013586:	f7ff bfd2 	b.w	801352e <_raise_r>
 801358a:	bf00      	nop
 801358c:	20000010 	.word	0x20000010

08013590 <_kill_r>:
 8013590:	b538      	push	{r3, r4, r5, lr}
 8013592:	4d07      	ldr	r5, [pc, #28]	; (80135b0 <_kill_r+0x20>)
 8013594:	2300      	movs	r3, #0
 8013596:	4604      	mov	r4, r0
 8013598:	4608      	mov	r0, r1
 801359a:	4611      	mov	r1, r2
 801359c:	602b      	str	r3, [r5, #0]
 801359e:	f7f0 fead 	bl	80042fc <_kill>
 80135a2:	1c43      	adds	r3, r0, #1
 80135a4:	d102      	bne.n	80135ac <_kill_r+0x1c>
 80135a6:	682b      	ldr	r3, [r5, #0]
 80135a8:	b103      	cbz	r3, 80135ac <_kill_r+0x1c>
 80135aa:	6023      	str	r3, [r4, #0]
 80135ac:	bd38      	pop	{r3, r4, r5, pc}
 80135ae:	bf00      	nop
 80135b0:	200027ac 	.word	0x200027ac

080135b4 <_getpid_r>:
 80135b4:	f7f0 be9a 	b.w	80042ec <_getpid>

080135b8 <floor>:
 80135b8:	ec51 0b10 	vmov	r0, r1, d0
 80135bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80135c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80135c8:	2e13      	cmp	r6, #19
 80135ca:	ee10 5a10 	vmov	r5, s0
 80135ce:	ee10 8a10 	vmov	r8, s0
 80135d2:	460c      	mov	r4, r1
 80135d4:	dc32      	bgt.n	801363c <floor+0x84>
 80135d6:	2e00      	cmp	r6, #0
 80135d8:	da14      	bge.n	8013604 <floor+0x4c>
 80135da:	a333      	add	r3, pc, #204	; (adr r3, 80136a8 <floor+0xf0>)
 80135dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e0:	f7ec fe64 	bl	80002ac <__adddf3>
 80135e4:	2200      	movs	r2, #0
 80135e6:	2300      	movs	r3, #0
 80135e8:	f7ed faa6 	bl	8000b38 <__aeabi_dcmpgt>
 80135ec:	b138      	cbz	r0, 80135fe <floor+0x46>
 80135ee:	2c00      	cmp	r4, #0
 80135f0:	da57      	bge.n	80136a2 <floor+0xea>
 80135f2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80135f6:	431d      	orrs	r5, r3
 80135f8:	d001      	beq.n	80135fe <floor+0x46>
 80135fa:	4c2d      	ldr	r4, [pc, #180]	; (80136b0 <floor+0xf8>)
 80135fc:	2500      	movs	r5, #0
 80135fe:	4621      	mov	r1, r4
 8013600:	4628      	mov	r0, r5
 8013602:	e025      	b.n	8013650 <floor+0x98>
 8013604:	4f2b      	ldr	r7, [pc, #172]	; (80136b4 <floor+0xfc>)
 8013606:	4137      	asrs	r7, r6
 8013608:	ea01 0307 	and.w	r3, r1, r7
 801360c:	4303      	orrs	r3, r0
 801360e:	d01f      	beq.n	8013650 <floor+0x98>
 8013610:	a325      	add	r3, pc, #148	; (adr r3, 80136a8 <floor+0xf0>)
 8013612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013616:	f7ec fe49 	bl	80002ac <__adddf3>
 801361a:	2200      	movs	r2, #0
 801361c:	2300      	movs	r3, #0
 801361e:	f7ed fa8b 	bl	8000b38 <__aeabi_dcmpgt>
 8013622:	2800      	cmp	r0, #0
 8013624:	d0eb      	beq.n	80135fe <floor+0x46>
 8013626:	2c00      	cmp	r4, #0
 8013628:	bfbe      	ittt	lt
 801362a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801362e:	fa43 f606 	asrlt.w	r6, r3, r6
 8013632:	19a4      	addlt	r4, r4, r6
 8013634:	ea24 0407 	bic.w	r4, r4, r7
 8013638:	2500      	movs	r5, #0
 801363a:	e7e0      	b.n	80135fe <floor+0x46>
 801363c:	2e33      	cmp	r6, #51	; 0x33
 801363e:	dd0b      	ble.n	8013658 <floor+0xa0>
 8013640:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013644:	d104      	bne.n	8013650 <floor+0x98>
 8013646:	ee10 2a10 	vmov	r2, s0
 801364a:	460b      	mov	r3, r1
 801364c:	f7ec fe2e 	bl	80002ac <__adddf3>
 8013650:	ec41 0b10 	vmov	d0, r0, r1
 8013654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013658:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801365c:	f04f 33ff 	mov.w	r3, #4294967295
 8013660:	fa23 f707 	lsr.w	r7, r3, r7
 8013664:	4207      	tst	r7, r0
 8013666:	d0f3      	beq.n	8013650 <floor+0x98>
 8013668:	a30f      	add	r3, pc, #60	; (adr r3, 80136a8 <floor+0xf0>)
 801366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366e:	f7ec fe1d 	bl	80002ac <__adddf3>
 8013672:	2200      	movs	r2, #0
 8013674:	2300      	movs	r3, #0
 8013676:	f7ed fa5f 	bl	8000b38 <__aeabi_dcmpgt>
 801367a:	2800      	cmp	r0, #0
 801367c:	d0bf      	beq.n	80135fe <floor+0x46>
 801367e:	2c00      	cmp	r4, #0
 8013680:	da02      	bge.n	8013688 <floor+0xd0>
 8013682:	2e14      	cmp	r6, #20
 8013684:	d103      	bne.n	801368e <floor+0xd6>
 8013686:	3401      	adds	r4, #1
 8013688:	ea25 0507 	bic.w	r5, r5, r7
 801368c:	e7b7      	b.n	80135fe <floor+0x46>
 801368e:	2301      	movs	r3, #1
 8013690:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013694:	fa03 f606 	lsl.w	r6, r3, r6
 8013698:	4435      	add	r5, r6
 801369a:	4545      	cmp	r5, r8
 801369c:	bf38      	it	cc
 801369e:	18e4      	addcc	r4, r4, r3
 80136a0:	e7f2      	b.n	8013688 <floor+0xd0>
 80136a2:	2500      	movs	r5, #0
 80136a4:	462c      	mov	r4, r5
 80136a6:	e7aa      	b.n	80135fe <floor+0x46>
 80136a8:	8800759c 	.word	0x8800759c
 80136ac:	7e37e43c 	.word	0x7e37e43c
 80136b0:	bff00000 	.word	0xbff00000
 80136b4:	000fffff 	.word	0x000fffff

080136b8 <_init>:
 80136b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136ba:	bf00      	nop
 80136bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136be:	bc08      	pop	{r3}
 80136c0:	469e      	mov	lr, r3
 80136c2:	4770      	bx	lr

080136c4 <_fini>:
 80136c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136c6:	bf00      	nop
 80136c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136ca:	bc08      	pop	{r3}
 80136cc:	469e      	mov	lr, r3
 80136ce:	4770      	bx	lr
