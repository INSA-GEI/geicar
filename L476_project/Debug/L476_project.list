
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  08011928  08011928  00021928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f1c  08011f1c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011f1c  08011f1c  00021f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f24  08011f24  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f24  08011f24  00021f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011f28  08011f28  00021f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011f2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002684  200001e8  08012110  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000286c  08012110  0003286c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040549  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f15  00000000  00000000  0007075d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003970  00000000  00000000  00076678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000036e8  00000000  00000000  00079fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000309f7  00000000  00000000  0007d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000330ca  00000000  00000000  000ae0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128c62  00000000  00000000  000e1191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00209df3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010d20  00000000  00000000  00209e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801190c 	.word	0x0801190c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801190c 	.word	0x0801190c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <GLOBVAR_Init+0xac>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <GLOBVAR_Init+0xb0>)
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <GLOBVAR_Init+0xb4>)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 8000ffa:	491c      	ldr	r1, [pc, #112]	; (800106c <GLOBVAR_Init+0xc4>)
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 8001008:	4918      	ldr	r1, [pc, #96]	; (800106c <GLOBVAR_Init+0xc4>)
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 8001016:	4915      	ldr	r1, [pc, #84]	; (800106c <GLOBVAR_Init+0xc4>)
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c1 2302 	strd	r2, r3, [r1, #8]

	messages[0]=0;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	messages[1]=0;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <GLOBVAR_Init+0xc8>)
 800102c:	2200      	movs	r2, #0
 800102e:	705a      	strb	r2, [r3, #1]
	messages[2]=0;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	709a      	strb	r2, [r3, #2]
	messages[3]=0;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001038:	2200      	movs	r2, #0
 800103a:	70da      	strb	r2, [r3, #3]
	messages[4]=0;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <GLOBVAR_Init+0xc8>)
 800103e:	2200      	movs	r2, #0
 8001040:	711a      	strb	r2, [r3, #4]
	messages[5]=0;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001044:	2200      	movs	r2, #0
 8001046:	715a      	strb	r2, [r3, #5]

}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000228 	.word	0x20000228
 8001058:	2000022c 	.word	0x2000022c
 800105c:	20000230 	.word	0x20000230
 8001060:	20000204 	.word	0x20000204
 8001064:	20000210 	.word	0x20000210
 8001068:	2000021c 	.word	0x2000021c
 800106c:	20000370 	.word	0x20000370
 8001070:	20000234 	.word	0x20000234

08001074 <IMU_init>:




void IMU_init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 8001078:	4b57      	ldr	r3, [pc, #348]	; (80011d8 <IMU_init+0x164>)
 800107a:	22bf      	movs	r2, #191	; 0xbf
 800107c:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <IMU_init+0x164>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001084:	4b54      	ldr	r3, [pc, #336]	; (80011d8 <IMU_init+0x164>)
 8001086:	4a55      	ldr	r2, [pc, #340]	; (80011dc <IMU_init+0x168>)
 8001088:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <IMU_init+0x164>)
 800108c:	4a54      	ldr	r2, [pc, #336]	; (80011e0 <IMU_init+0x16c>)
 800108e:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001090:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <IMU_init+0x164>)
 8001092:	4a54      	ldr	r2, [pc, #336]	; (80011e4 <IMU_init+0x170>)
 8001094:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001096:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <IMU_init+0x164>)
 8001098:	4a53      	ldr	r2, [pc, #332]	; (80011e8 <IMU_init+0x174>)
 800109a:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800109c:	4b4e      	ldr	r3, [pc, #312]	; (80011d8 <IMU_init+0x164>)
 800109e:	4a53      	ldr	r2, [pc, #332]	; (80011ec <IMU_init+0x178>)
 80010a0:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 80010a2:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <IMU_init+0x164>)
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <IMU_init+0x17c>)
 80010a6:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 80010a8:	494b      	ldr	r1, [pc, #300]	; (80011d8 <IMU_init+0x164>)
 80010aa:	4852      	ldr	r0, [pc, #328]	; (80011f4 <IMU_init+0x180>)
 80010ac:	f002 f978 	bl	80033a0 <HTS221_RegisterBusIO>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <IMU_init+0x44>
		while(1);
 80010b6:	e7fe      	b.n	80010b6 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 80010b8:	484e      	ldr	r0, [pc, #312]	; (80011f4 <IMU_init+0x180>)
 80010ba:	f002 f9bb 	bl	8003434 <HTS221_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d000      	beq.n	80010c6 <IMU_init+0x52>
		while (1);
 80010c4:	e7fe      	b.n	80010c4 <IMU_init+0x50>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <IMU_init+0x184>)
 80010c8:	2233      	movs	r2, #51	; 0x33
 80010ca:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 80010cc:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <IMU_init+0x184>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <IMU_init+0x184>)
 80010d4:	4a41      	ldr	r2, [pc, #260]	; (80011dc <IMU_init+0x168>)
 80010d6:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80010d8:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <IMU_init+0x184>)
 80010da:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <IMU_init+0x16c>)
 80010dc:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <IMU_init+0x184>)
 80010e0:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <IMU_init+0x170>)
 80010e2:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80010e4:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <IMU_init+0x184>)
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <IMU_init+0x174>)
 80010e8:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <IMU_init+0x184>)
 80010ec:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <IMU_init+0x178>)
 80010ee:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <IMU_init+0x184>)
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <IMU_init+0x17c>)
 80010f4:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 80010f6:	4940      	ldr	r1, [pc, #256]	; (80011f8 <IMU_init+0x184>)
 80010f8:	4840      	ldr	r0, [pc, #256]	; (80011fc <IMU_init+0x188>)
 80010fa:	f003 f8fb 	bl	80042f4 <LSM303AGR_ACC_RegisterBusIO>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d000      	beq.n	8001106 <IMU_init+0x92>
		while(1);
 8001104:	e7fe      	b.n	8001104 <IMU_init+0x90>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <IMU_init+0x184>)
 8001108:	223d      	movs	r2, #61	; 0x3d
 800110a:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 800110c:	493a      	ldr	r1, [pc, #232]	; (80011f8 <IMU_init+0x184>)
 800110e:	483c      	ldr	r0, [pc, #240]	; (8001200 <IMU_init+0x18c>)
 8001110:	f003 fae0 	bl	80046d4 <LSM303AGR_MAG_RegisterBusIO>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d000      	beq.n	800111c <IMU_init+0xa8>
		while(1);
 800111a:	e7fe      	b.n	800111a <IMU_init+0xa6>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 800111c:	4837      	ldr	r0, [pc, #220]	; (80011fc <IMU_init+0x188>)
 800111e:	f003 f953 	bl	80043c8 <LSM303AGR_ACC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d000      	beq.n	800112a <IMU_init+0xb6>
		while (1);
 8001128:	e7fe      	b.n	8001128 <IMU_init+0xb4>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 800112a:	4835      	ldr	r0, [pc, #212]	; (8001200 <IMU_init+0x18c>)
 800112c:	f003 fb36 	bl	800479c <LSM303AGR_MAG_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d000      	beq.n	8001138 <IMU_init+0xc4>
		while (1);
 8001136:	e7fe      	b.n	8001136 <IMU_init+0xc2>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <IMU_init+0x190>)
 800113a:	22d7      	movs	r2, #215	; 0xd7
 800113c:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <IMU_init+0x190>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <IMU_init+0x190>)
 8001146:	4a25      	ldr	r2, [pc, #148]	; (80011dc <IMU_init+0x168>)
 8001148:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <IMU_init+0x190>)
 800114c:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <IMU_init+0x16c>)
 800114e:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <IMU_init+0x190>)
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <IMU_init+0x170>)
 8001154:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <IMU_init+0x190>)
 8001158:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <IMU_init+0x174>)
 800115a:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <IMU_init+0x190>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <IMU_init+0x178>)
 8001160:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <IMU_init+0x190>)
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <IMU_init+0x17c>)
 8001166:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 8001168:	4926      	ldr	r1, [pc, #152]	; (8001204 <IMU_init+0x190>)
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <IMU_init+0x194>)
 800116c:	f003 fff0 	bl	8005150 <LSM6DSL_RegisterBusIO>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d000      	beq.n	8001178 <IMU_init+0x104>
		while(1);
 8001176:	e7fe      	b.n	8001176 <IMU_init+0x102>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 8001178:	4823      	ldr	r0, [pc, #140]	; (8001208 <IMU_init+0x194>)
 800117a:	f004 f853 	bl	8005224 <LSM6DSL_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d000      	beq.n	8001186 <IMU_init+0x112>
		while (1);
 8001184:	e7fe      	b.n	8001184 <IMU_init+0x110>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <IMU_init+0x198>)
 8001188:	22bb      	movs	r2, #187	; 0xbb
 800118a:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <IMU_init+0x198>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <IMU_init+0x198>)
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <IMU_init+0x168>)
 8001196:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <IMU_init+0x198>)
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <IMU_init+0x16c>)
 800119c:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <IMU_init+0x198>)
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <IMU_init+0x170>)
 80011a2:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <IMU_init+0x198>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <IMU_init+0x174>)
 80011a8:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <IMU_init+0x198>)
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <IMU_init+0x178>)
 80011ae:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <IMU_init+0x198>)
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <IMU_init+0x17c>)
 80011b4:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 80011b6:	4915      	ldr	r1, [pc, #84]	; (800120c <IMU_init+0x198>)
 80011b8:	4815      	ldr	r0, [pc, #84]	; (8001210 <IMU_init+0x19c>)
 80011ba:	f002 fd9f 	bl	8003cfc <LPS22HB_RegisterBusIO>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d000      	beq.n	80011c6 <IMU_init+0x152>
		while(1);
 80011c4:	e7fe      	b.n	80011c4 <IMU_init+0x150>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <IMU_init+0x19c>)
 80011c8:	f002 fe02 	bl	8003dd0 <LPS22HB_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d000      	beq.n	80011d4 <IMU_init+0x160>
		while (1);
 80011d2:	e7fe      	b.n	80011d2 <IMU_init+0x15e>
	}



}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000388 	.word	0x20000388
 80011dc:	08002e89 	.word	0x08002e89
 80011e0:	08002f05 	.word	0x08002f05
 80011e4:	08002fb9 	.word	0x08002fb9
 80011e8:	08002f55 	.word	0x08002f55
 80011ec:	080059e9 	.word	0x080059e9
 80011f0:	08005a01 	.word	0x08005a01
 80011f4:	200003a8 	.word	0x200003a8
 80011f8:	200003dc 	.word	0x200003dc
 80011fc:	200003fc 	.word	0x200003fc
 8001200:	20000430 	.word	0x20000430
 8001204:	20000464 	.word	0x20000464
 8001208:	20000484 	.word	0x20000484
 800120c:	200004bc 	.word	0x200004bc
 8001210:	200004dc 	.word	0x200004dc

08001214 <IMU_enable>:

void IMU_enable(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <IMU_enable+0x6c>)
 800121a:	f002 f926 	bl	800346a <HTS221_HUM_Enable>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d000      	beq.n	8001226 <IMU_enable+0x12>
		while (1);
 8001224:	e7fe      	b.n	8001224 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <IMU_enable+0x6c>)
 8001228:	f002 f9cc 	bl	80035c4 <HTS221_TEMP_Enable>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d000      	beq.n	8001234 <IMU_enable+0x20>
		while (1);
 8001232:	e7fe      	b.n	8001232 <IMU_enable+0x1e>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <IMU_enable+0x70>)
 8001236:	f003 f908 	bl	800444a <LSM303AGR_ACC_Enable>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d000      	beq.n	8001242 <IMU_enable+0x2e>
		while (1);
 8001240:	e7fe      	b.n	8001240 <IMU_enable+0x2c>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <IMU_enable+0x74>)
 8001244:	f003 fae7 	bl	8004816 <LSM303AGR_MAG_Enable>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d000      	beq.n	8001250 <IMU_enable+0x3c>
		while (1);
 800124e:	e7fe      	b.n	800124e <IMU_enable+0x3a>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <IMU_enable+0x78>)
 8001252:	f004 f850 	bl	80052f6 <LSM6DSL_ACC_Enable>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d000      	beq.n	800125e <IMU_enable+0x4a>
		while (1);
 800125c:	e7fe      	b.n	800125c <IMU_enable+0x48>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <IMU_enable+0x78>)
 8001260:	f004 f86d 	bl	800533e <LSM6DSL_GYRO_Enable>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d000      	beq.n	800126c <IMU_enable+0x58>
		while (1);
 800126a:	e7fe      	b.n	800126a <IMU_enable+0x56>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <IMU_enable+0x7c>)
 800126e:	f002 fdca 	bl	8003e06 <LPS22HB_PRESS_Enable>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d000      	beq.n	800127a <IMU_enable+0x66>
		while (1);
 8001278:	e7fe      	b.n	8001278 <IMU_enable+0x64>
	}
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003a8 	.word	0x200003a8
 8001284:	200003fc 	.word	0x200003fc
 8001288:	20000430 	.word	0x20000430
 800128c:	20000484 	.word	0x20000484
 8001290:	200004dc 	.word	0x200004dc

08001294 <IMU_GetData>:

void IMU_GetData(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af02      	add	r7, sp, #8

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 800129a:	494c      	ldr	r1, [pc, #304]	; (80013cc <IMU_GetData+0x138>)
 800129c:	484c      	ldr	r0, [pc, #304]	; (80013d0 <IMU_GetData+0x13c>)
 800129e:	f002 f909 	bl	80034b4 <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 80012a2:	494c      	ldr	r1, [pc, #304]	; (80013d4 <IMU_GetData+0x140>)
 80012a4:	484a      	ldr	r0, [pc, #296]	; (80013d0 <IMU_GetData+0x13c>)
 80012a6:	f002 f9b2 	bl	800360e <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 80012aa:	494b      	ldr	r1, [pc, #300]	; (80013d8 <IMU_GetData+0x144>)
 80012ac:	484b      	ldr	r0, [pc, #300]	; (80013dc <IMU_GetData+0x148>)
 80012ae:	f003 f9a1 	bl	80045f4 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 80012b2:	494b      	ldr	r1, [pc, #300]	; (80013e0 <IMU_GetData+0x14c>)
 80012b4:	484b      	ldr	r0, [pc, #300]	; (80013e4 <IMU_GetData+0x150>)
 80012b6:	f003 fade 	bl	8004876 <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 80012ba:	494b      	ldr	r1, [pc, #300]	; (80013e8 <IMU_GetData+0x154>)
 80012bc:	484b      	ldr	r0, [pc, #300]	; (80013ec <IMU_GetData+0x158>)
 80012be:	f002 fdc6 	bl	8003e4e <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 80012c2:	494b      	ldr	r1, [pc, #300]	; (80013f0 <IMU_GetData+0x15c>)
 80012c4:	484b      	ldr	r0, [pc, #300]	; (80013f4 <IMU_GetData+0x160>)
 80012c6:	f004 f8b1 	bl	800542c <LSM6DSL_GYRO_GetAxes>

	 snprintf((char*)message_temp,35,"temperature = %d\r\n",(int)current_temperature_degC);
 80012ca:	4b42      	ldr	r3, [pc, #264]	; (80013d4 <IMU_GetData+0x140>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d4:	ee17 3a90 	vmov	r3, s15
 80012d8:	4a47      	ldr	r2, [pc, #284]	; (80013f8 <IMU_GetData+0x164>)
 80012da:	2123      	movs	r1, #35	; 0x23
 80012dc:	4847      	ldr	r0, [pc, #284]	; (80013fc <IMU_GetData+0x168>)
 80012de:	f00d f9e9 	bl	800e6b4 <sniprintf>
	 MESSAGE_SendMailbox(IMU_Mailbox, MSG_ID_IMU_TEMP, IMU_Mailbox,message_temp);
 80012e2:	4b47      	ldr	r3, [pc, #284]	; (8001400 <IMU_GetData+0x16c>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <IMU_GetData+0x16c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b44      	ldr	r3, [pc, #272]	; (80013fc <IMU_GetData+0x168>)
 80012ec:	2120      	movs	r1, #32
 80012ee:	f000 f8c1 	bl	8001474 <MESSAGE_SendMailbox>
	 snprintf((char*)message_hum,35,"humidite = %d\r\n",(int)current_humidity_perc);
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <IMU_GetData+0x138>)
 80012f4:	edd3 7a00 	vldr	s15, [r3]
 80012f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fc:	ee17 3a90 	vmov	r3, s15
 8001300:	4a40      	ldr	r2, [pc, #256]	; (8001404 <IMU_GetData+0x170>)
 8001302:	2123      	movs	r1, #35	; 0x23
 8001304:	4840      	ldr	r0, [pc, #256]	; (8001408 <IMU_GetData+0x174>)
 8001306:	f00d f9d5 	bl	800e6b4 <sniprintf>
	 MESSAGE_SendMailbox(IMU_Mailbox, MSG_ID_IMU_HUM, IMU_Mailbox,message_hum);
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <IMU_GetData+0x16c>)
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <IMU_GetData+0x16c>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b3d      	ldr	r3, [pc, #244]	; (8001408 <IMU_GetData+0x174>)
 8001314:	2121      	movs	r1, #33	; 0x21
 8001316:	f000 f8ad 	bl	8001474 <MESSAGE_SendMailbox>
	 snprintf((char*)message_press,35,"pression = %d\r\n",(int)current_pressure_hPa);
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <IMU_GetData+0x154>)
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001324:	ee17 3a90 	vmov	r3, s15
 8001328:	4a38      	ldr	r2, [pc, #224]	; (800140c <IMU_GetData+0x178>)
 800132a:	2123      	movs	r1, #35	; 0x23
 800132c:	4838      	ldr	r0, [pc, #224]	; (8001410 <IMU_GetData+0x17c>)
 800132e:	f00d f9c1 	bl	800e6b4 <sniprintf>
	 MESSAGE_SendMailbox(IMU_Mailbox, MSG_ID_IMU_PRESS, IMU_Mailbox,message_press);
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <IMU_GetData+0x16c>)
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	4b32      	ldr	r3, [pc, #200]	; (8001400 <IMU_GetData+0x16c>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <IMU_GetData+0x17c>)
 800133c:	2125      	movs	r1, #37	; 0x25
 800133e:	f000 f899 	bl	8001474 <MESSAGE_SendMailbox>
	 snprintf((char*)message_acc1,50,"accelerometre : x =%d y=%d z=%d\r\n", (int)current_acceleration_mg.x, (int)current_acceleration_mg.y, (int)current_acceleration_mg.z);
 8001342:	4b25      	ldr	r3, [pc, #148]	; (80013d8 <IMU_GetData+0x144>)
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <IMU_GetData+0x144>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4a23      	ldr	r2, [pc, #140]	; (80013d8 <IMU_GetData+0x144>)
 800134c:	6892      	ldr	r2, [r2, #8]
 800134e:	9201      	str	r2, [sp, #4]
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	460b      	mov	r3, r1
 8001354:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <IMU_GetData+0x180>)
 8001356:	2132      	movs	r1, #50	; 0x32
 8001358:	482f      	ldr	r0, [pc, #188]	; (8001418 <IMU_GetData+0x184>)
 800135a:	f00d f9ab 	bl	800e6b4 <sniprintf>
	 MESSAGE_SendMailbox(IMU_Mailbox, MSG_ID_IMU_ACC, IMU_Mailbox,message_acc1);
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <IMU_GetData+0x16c>)
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	4b27      	ldr	r3, [pc, #156]	; (8001400 <IMU_GetData+0x16c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b2c      	ldr	r3, [pc, #176]	; (8001418 <IMU_GetData+0x184>)
 8001368:	2124      	movs	r1, #36	; 0x24
 800136a:	f000 f883 	bl	8001474 <MESSAGE_SendMailbox>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <IMU_GetData+0x15c>)
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <IMU_GetData+0x15c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <IMU_GetData+0x15c>)
 8001378:	6892      	ldr	r2, [r2, #8]
 800137a:	9201      	str	r2, [sp, #4]
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	460b      	mov	r3, r1
 8001380:	4a26      	ldr	r2, [pc, #152]	; (800141c <IMU_GetData+0x188>)
 8001382:	2132      	movs	r1, #50	; 0x32
 8001384:	4826      	ldr	r0, [pc, #152]	; (8001420 <IMU_GetData+0x18c>)
 8001386:	f00d f995 	bl	800e6b4 <sniprintf>
	 MESSAGE_SendMailbox(IMU_Mailbox, MSG_ID_IMU_GYR, IMU_Mailbox,message_gyro);
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <IMU_GetData+0x16c>)
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <IMU_GetData+0x16c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <IMU_GetData+0x18c>)
 8001394:	2122      	movs	r1, #34	; 0x22
 8001396:	f000 f86d 	bl	8001474 <MESSAGE_SendMailbox>
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <IMU_GetData+0x14c>)
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <IMU_GetData+0x14c>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <IMU_GetData+0x14c>)
 80013a4:	6892      	ldr	r2, [r2, #8]
 80013a6:	9201      	str	r2, [sp, #4]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	460b      	mov	r3, r1
 80013ac:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <IMU_GetData+0x190>)
 80013ae:	2132      	movs	r1, #50	; 0x32
 80013b0:	481d      	ldr	r0, [pc, #116]	; (8001428 <IMU_GetData+0x194>)
 80013b2:	f00d f97f 	bl	800e6b4 <sniprintf>
	 MESSAGE_SendMailbox(IMU_Mailbox, MSG_ID_IMU_MAG, IMU_Mailbox,message_mag);
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <IMU_GetData+0x16c>)
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <IMU_GetData+0x16c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <IMU_GetData+0x194>)
 80013c0:	2123      	movs	r1, #35	; 0x23
 80013c2:	f000 f857 	bl	8001474 <MESSAGE_SendMailbox>



	//HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));

}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000230 	.word	0x20000230
 80013d0:	200003a8 	.word	0x200003a8
 80013d4:	2000022c 	.word	0x2000022c
 80013d8:	20000204 	.word	0x20000204
 80013dc:	200003fc 	.word	0x200003fc
 80013e0:	2000021c 	.word	0x2000021c
 80013e4:	20000430 	.word	0x20000430
 80013e8:	20000228 	.word	0x20000228
 80013ec:	200004dc 	.word	0x200004dc
 80013f0:	20000210 	.word	0x20000210
 80013f4:	20000484 	.word	0x20000484
 80013f8:	08011928 	.word	0x08011928
 80013fc:	200002b0 	.word	0x200002b0
 8001400:	20000510 	.word	0x20000510
 8001404:	0801193c 	.word	0x0801193c
 8001408:	2000028c 	.word	0x2000028c
 800140c:	0801194c 	.word	0x0801194c
 8001410:	20000268 	.word	0x20000268
 8001414:	0801195c 	.word	0x0801195c
 8001418:	200002d4 	.word	0x200002d4
 800141c:	08011980 	.word	0x08011980
 8001420:	20000308 	.word	0x20000308
 8001424:	080119a0 	.word	0x080119a0
 8001428:	2000033c 	.word	0x2000033c

0800142c <MESSAGE_ReadMailboxNoDelay>:
 *
 * @remark This function is non blocking.
 * If mailbox is empty when calling the function, a message structure is still returned with \ref MSG_ID_NO_MESSAGE
 * in message id field
 */
MESSAGE_Typedef MESSAGE_ReadMailboxNoDelay(QueueHandle_t mbx) {
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	MESSAGE_Typedef msg= {0};
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	605a      	str	r2, [r3, #4]
 8001440:	609a      	str	r2, [r3, #8]

	if (!xQueueReceive(mbx, &msg, 0))  // Pas de message dans la mailbox
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	6838      	ldr	r0, [r7, #0]
 800144c:	f00b f9ae 	bl	800c7ac <xQueueReceive>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <MESSAGE_ReadMailboxNoDelay+0x2e>
		msg.id=MSG_ID_NO_MESSAGE;
 8001456:	2300      	movs	r3, #0
 8001458:	81bb      	strh	r3, [r7, #12]

	return msg;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	461c      	mov	r4, r3
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001466:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
	...

08001474 <MESSAGE_SendMailbox>:
 * @return None
 *
 * @remark This function is non blocking.
 * If mailbox is full when calling the function, error will be ignored silently
 */
void MESSAGE_SendMailbox(QueueHandle_t mbx_dest, uint16_t id, QueueHandle_t mbx_sender, void *data){
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	460b      	mov	r3, r1
 8001482:	817b      	strh	r3, [r7, #10]
	MESSAGE_Typedef msg;

	msg.id=id;
 8001484:	897b      	ldrh	r3, [r7, #10]
 8001486:	82bb      	strh	r3, [r7, #20]
	msg.sender = &mbx_sender;
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	61bb      	str	r3, [r7, #24]
	msg.data=data;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	61fb      	str	r3, [r7, #28]

	if (!xQueueSend(mbx_dest, &msg, 0)) { // envoi sans attendre
 8001490:	f107 0114 	add.w	r1, r7, #20
 8001494:	2300      	movs	r3, #0
 8001496:	2200      	movs	r2, #0
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f00b f889 	bl	800c5b0 <xQueueGenericSend>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <MESSAGE_SendMailbox+0x36>
		printf("Failed to send data, Queue full.\r\n");
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <MESSAGE_SendMailbox+0x40>)
 80014a6:	f00d f8f7 	bl	800e698 <puts>
	}
}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	080119dc 	.word	0x080119dc

080014b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80014c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <vApplicationGetIdleTaskMemory+0x30>)
 80014ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014d6:	bf00      	nop
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000518 	.word	0x20000518
 80014e8:	2000056c 	.word	0x2000056c

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b09c      	sub	sp, #112	; 0x70
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f004 fa09 	bl	8005908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f887 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 fd93 	bl	8002024 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014fe:	f000 fd31 	bl	8001f64 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8001502:	f000 f8d3 	bl	80016ac <MX_ADC3_Init>
  MX_CAN1_Init();
 8001506:	f000 f935 	bl	8001774 <MX_CAN1_Init>
  MX_TIM1_Init();
 800150a:	f000 fa6d 	bl	80019e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800150e:	f000 fac5 	bl	8001a9c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001512:	f000 fbc7 	bl	8001ca4 <MX_TIM8_Init>
  MX_UART4_Init();
 8001516:	f000 fc95 	bl	8001e44 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800151a:	f000 fd53 	bl	8001fc4 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 800151e:	f000 f98b 	bl	8001838 <MX_I2C2_Init>
  MX_UART5_Init();
 8001522:	f000 fcbf 	bl	8001ea4 <MX_UART5_Init>
  MX_COMP2_Init();
 8001526:	f000 f95b 	bl	80017e0 <MX_COMP2_Init>
  MX_SPI2_Init();
 800152a:	f000 f9c5 	bl	80018b8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800152e:	f000 fa01 	bl	8001934 <MX_SPI3_Init>
  MX_SWPMI1_Init();
 8001532:	f000 fa39 	bl	80019a8 <MX_SWPMI1_Init>
  MX_TIM6_Init();
 8001536:	f000 fb49 	bl	8001bcc <MX_TIM6_Init>
  MX_TIM7_Init();
 800153a:	f000 fb7d 	bl	8001c38 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800153e:	f000 fce1 	bl	8001f04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 8001542:	f7ff fd31 	bl	8000fa8 <GLOBVAR_Init>

  IMU_init();
 8001546:	f7ff fd95 	bl	8001074 <IMU_init>
  IMU_enable();
 800154a:	f7ff fe63 	bl	8001214 <IMU_enable>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <main+0xfc>)
 8001550:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001554:	461d      	mov	r5, r3
 8001556:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800155a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800155e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f00a ff0d 	bl	800c388 <osThreadCreate>
 800156e:	4603      	mov	r3, r0
 8001570:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <main+0x100>)
 8001572:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(IMU, StartIMU, osPriorityAboveNormal, 0, 1024);
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <main+0x104>)
 8001576:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800157a:	461d      	mov	r5, r3
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001584:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMUHandle = osThreadCreate(osThread(IMU), NULL);
 8001588:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800158c:	2100      	movs	r1, #0
 800158e:	4618      	mov	r0, r3
 8001590:	f00a fefa 	bl	800c388 <osThreadCreate>
 8001594:	4603      	mov	r3, r0
 8001596:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <main+0x108>)
 8001598:	6013      	str	r3, [r2, #0]

  osThreadDef(GPS, StartGPS, osPriorityNormal, 0, 64);
 800159a:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <main+0x10c>)
 800159c:	f107 041c 	add.w	r4, r7, #28
 80015a0:	461d      	mov	r5, r3
 80015a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00a fee7 	bl	800c388 <osThreadCreate>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <main+0x110>)
 80015be:	6013      	str	r3, [r2, #0]
  LIDARHandle = osThreadCreate(osThread(LIDAR), NULL);

  osThreadDef(Batterie, StartBatterie, osPriorityBelowNormal, 0, 64);
  BatterieHandle = osThreadCreate(osThread(Batterie), NULL);*/

  osThreadDef(UART, StartUart, osPriorityBelowNormal, 0, 64);
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <main+0x114>)
 80015c2:	463c      	mov	r4, r7
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTHandle = osThreadCreate(osThread(UART), NULL);
 80015d2:	463b      	mov	r3, r7
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f00a fed6 	bl	800c388 <osThreadCreate>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <main+0x118>)
 80015e0:	6013      	str	r3, [r2, #0]
  SPIHandle = osThreadCreate(osThread(SPI), NULL);*/

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015e2:	f00a feca 	bl	800c37a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <main+0xfa>
 80015e8:	08011a1c 	.word	0x08011a1c
 80015ec:	20000d8c 	.word	0x20000d8c
 80015f0:	08011a38 	.word	0x08011a38
 80015f4:	20000d90 	.word	0x20000d90
 80015f8:	08011a54 	.word	0x08011a54
 80015fc:	20000d94 	.word	0x20000d94
 8001600:	08011a70 	.word	0x08011a70
 8001604:	20000d98 	.word	0x20000d98

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b096      	sub	sp, #88	; 0x58
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	2244      	movs	r2, #68	; 0x44
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00c fdb8 	bl	800e18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800162a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800162e:	f006 fe0b 	bl	8008248 <HAL_PWREx_ControlVoltageScaling>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001638:	f000 fe66 	bl	8002308 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163c:	2302      	movs	r3, #2
 800163e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001646:	2310      	movs	r3, #16
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164a:	2302      	movs	r3, #2
 800164c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800164e:	2302      	movs	r3, #2
 8001650:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001652:	2301      	movs	r3, #1
 8001654:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001656:	230a      	movs	r3, #10
 8001658:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800165a:	2307      	movs	r3, #7
 800165c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800165e:	2302      	movs	r3, #2
 8001660:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4618      	mov	r0, r3
 800166c:	f006 fe42 	bl	80082f4 <HAL_RCC_OscConfig>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001676:	f000 fe47 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167a:	230f      	movs	r3, #15
 800167c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167e:	2303      	movs	r3, #3
 8001680:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	2104      	movs	r1, #4
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fa0a 	bl	8008aac <HAL_RCC_ClockConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800169e:	f000 fe33 	bl	8002308 <Error_Handler>
  }
}
 80016a2:	bf00      	nop
 80016a4:	3758      	adds	r7, #88	; 0x58
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80016c2:	4b29      	ldr	r3, [pc, #164]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <MX_ADC3_Init+0xc0>)
 80016c6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d4:	4b24      	ldr	r3, [pc, #144]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016e2:	2204      	movs	r2, #4
 80016e4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	; (8001768 <MX_ADC3_Init+0xbc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_ADC3_Init+0xbc>)
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <MX_ADC3_Init+0xbc>)
 8001708:	2200      	movs	r2, #0
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <MX_ADC3_Init+0xbc>)
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <MX_ADC3_Init+0xbc>)
 8001716:	2200      	movs	r2, #0
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800171a:	4b13      	ldr	r3, [pc, #76]	; (8001768 <MX_ADC3_Init+0xbc>)
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <MX_ADC3_Init+0xbc>)
 8001724:	f004 fb1c 	bl	8005d60 <HAL_ADC_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 800172e:	f000 fdeb 	bl	8002308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <MX_ADC3_Init+0xc4>)
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001736:	2306      	movs	r3, #6
 8001738:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800173e:	237f      	movs	r3, #127	; 0x7f
 8001740:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001742:	2304      	movs	r3, #4
 8001744:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_ADC3_Init+0xbc>)
 8001750:	f004 fc5c 	bl	800600c <HAL_ADC_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800175a:	f000 fdd5 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000076c 	.word	0x2000076c
 800176c:	50040200 	.word	0x50040200
 8001770:	04300002 	.word	0x04300002

08001774 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_CAN1_Init+0x64>)
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <MX_CAN1_Init+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_CAN1_Init+0x64>)
 8001780:	2210      	movs	r2, #16
 8001782:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_CAN1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_CAN1_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_CAN1_Init+0x64>)
 8001792:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001796:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_CAN1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017c4:	f005 f812 	bl	80067ec <HAL_CAN_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80017ce:	f000 fd9b 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200007d0 	.word	0x200007d0
 80017dc:	40006400 	.word	0x40006400

080017e0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_COMP2_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <MX_COMP2_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_COMP2_Init+0x50>)
 80017ec:	2270      	movs	r2, #112	; 0x70
 80017ee:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_COMP2_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_COMP2_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_COMP2_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_COMP2_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_COMP2_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_COMP2_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_COMP2_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_COMP2_Init+0x50>)
 800181c:	f005 f98a 	bl	8006b34 <HAL_COMP_Init>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001826:	f000 fd6f 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800182a:	bf00      	nop
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200007f8 	.word	0x200007f8
 8001834:	40010204 	.word	0x40010204

08001838 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <MX_I2C2_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <MX_I2C2_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001842:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <MX_I2C2_Init+0x74>)
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_I2C2_Init+0x7c>)
 8001846:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001848:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <MX_I2C2_Init+0x74>)
 8001850:	2201      	movs	r2, #1
 8001852:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_I2C2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_I2C2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001860:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_I2C2_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_I2C2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <MX_I2C2_Init+0x74>)
 8001874:	f005 fe96 	bl	80075a4 <HAL_I2C_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800187e:	f000 fd43 	bl	8002308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <MX_I2C2_Init+0x74>)
 8001886:	f006 fc39 	bl	80080fc <HAL_I2CEx_ConfigAnalogFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001890:	f000 fd3a 	bl	8002308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_I2C2_Init+0x74>)
 8001898:	f006 fc7b 	bl	8008192 <HAL_I2CEx_ConfigDigitalFilter>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 fd31 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000824 	.word	0x20000824
 80018b0:	40005800 	.word	0x40005800
 80018b4:	10909cec 	.word	0x10909cec

080018b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <MX_SPI2_Init+0x74>)
 80018be:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <MX_SPI2_Init+0x78>)
 80018c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	; (800192c <MX_SPI2_Init+0x74>)
 80018c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_SPI2_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <MX_SPI2_Init+0x74>)
 80018d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_SPI2_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018de:	4b13      	ldr	r3, [pc, #76]	; (800192c <MX_SPI2_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_SPI2_Init+0x74>)
 80018e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_SPI2_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_SPI2_Init+0x74>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_SPI2_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_SPI2_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_SPI2_Init+0x74>)
 8001906:	2207      	movs	r2, #7
 8001908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_SPI2_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_SPI2_Init+0x74>)
 8001912:	2208      	movs	r2, #8
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_SPI2_Init+0x74>)
 8001918:	f007 ffa8 	bl	800986c <HAL_SPI_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001922:	f000 fcf1 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000878 	.word	0x20000878
 8001930:	40003800 	.word	0x40003800

08001934 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <MX_SPI3_Init+0x6c>)
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <MX_SPI3_Init+0x70>)
 800193c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_SPI3_Init+0x6c>)
 800194c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001950:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_SPI3_Init+0x6c>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001964:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_SPI3_Init+0x6c>)
 800196e:	2200      	movs	r2, #0
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001974:	2200      	movs	r2, #0
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_SPI3_Init+0x6c>)
 800197a:	2207      	movs	r2, #7
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001980:	2200      	movs	r2, #0
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_SPI3_Init+0x6c>)
 8001986:	2200      	movs	r2, #0
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_SPI3_Init+0x6c>)
 800198c:	f007 ff6e 	bl	800986c <HAL_SPI_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8001996:	f000 fcb7 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200008dc 	.word	0x200008dc
 80019a4:	40003c00 	.word	0x40003c00

080019a8 <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_SWPMI1_Init+0x38>)
 80019ae:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <MX_SWPMI1_Init+0x3c>)
 80019b0:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_SWPMI1_Init+0x38>)
 80019b4:	2202      	movs	r2, #2
 80019b6:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_SWPMI1_Init+0x38>)
 80019ba:	2213      	movs	r2, #19
 80019bc:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_SWPMI1_Init+0x38>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_SWPMI1_Init+0x38>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_SWPMI1_Init+0x38>)
 80019cc:	f007 fff2 	bl	80099b4 <HAL_SWPMI_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 80019d6:	f000 fc97 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000940 	.word	0x20000940
 80019e4:	40008800 	.word	0x40008800

080019e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00c fbc8 	bl	800e18c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a08:	4a23      	ldr	r2, [pc, #140]	; (8001a98 <MX_TIM1_Init+0xb0>)
 8001a0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b20      	ldr	r3, [pc, #128]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a26:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480d      	ldr	r0, [pc, #52]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a5e:	f008 f8db 	bl	8009c18 <HAL_TIM_Encoder_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a68:	f000 fc4e 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a78:	463b      	mov	r3, r7
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_TIM1_Init+0xac>)
 8001a7e:	f008 ff59 	bl	800a934 <HAL_TIMEx_MasterConfigSynchronization>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a88:	f000 fc3e 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a8c:	bf00      	nop
 8001a8e:	3730      	adds	r7, #48	; 0x30
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000097c 	.word	0x2000097c
 8001a98:	40012c00 	.word	0x40012c00

08001a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	; 0x38
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	463b      	mov	r3, r7
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001ad0:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <MX_TIM3_Init+0x12c>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001af4:	4833      	ldr	r0, [pc, #204]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001af6:	f007 ffd7 	bl	8009aa8 <HAL_TIM_Base_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b00:	f000 fc02 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	482c      	ldr	r0, [pc, #176]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001b12:	f008 fa3b 	bl	8009f8c <HAL_TIM_ConfigClockSource>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b1c:	f000 fbf4 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b20:	4828      	ldr	r0, [pc, #160]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001b22:	f008 f818 	bl	8009b56 <HAL_TIM_PWM_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b2c:	f000 fbec 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4821      	ldr	r0, [pc, #132]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001b40:	f008 fef8 	bl	800a934 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b4a:	f000 fbdd 	bl	8002308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4e:	2360      	movs	r3, #96	; 0x60
 8001b50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4817      	ldr	r0, [pc, #92]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001b66:	f008 f8fd 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b70:	f000 fbca 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	2204      	movs	r2, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4812      	ldr	r0, [pc, #72]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001b7c:	f008 f8f2 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001b86:	f000 fbbf 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001b92:	f008 f8e7 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001b9c:	f000 fbb4 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001ba8:	f008 f8dc 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001bb2:	f000 fba9 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM3_Init+0x128>)
 8001bb8:	f000 fee8 	bl	800298c <HAL_TIM_MspPostInit>

}
 8001bbc:	bf00      	nop
 8001bbe:	3738      	adds	r7, #56	; 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200009c8 	.word	0x200009c8
 8001bc8:	40000400 	.word	0x40000400

08001bcc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <MX_TIM6_Init+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001bfe:	f007 ff53 	bl	8009aa8 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c08:	f000 fb7e 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c14:	1d3b      	adds	r3, r7, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_TIM6_Init+0x64>)
 8001c1a:	f008 fe8b 	bl	800a934 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c24:	f000 fb70 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000a14 	.word	0x20000a14
 8001c34:	40001000 	.word	0x40001000

08001c38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <MX_TIM7_Init+0x64>)
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <MX_TIM7_Init+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001c4e:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <MX_TIM7_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_TIM7_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_TIM7_Init+0x64>)
 8001c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c60:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_TIM7_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <MX_TIM7_Init+0x64>)
 8001c6a:	f007 ff1d 	bl	8009aa8 <HAL_TIM_Base_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c74:	f000 fb48 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_TIM7_Init+0x64>)
 8001c86:	f008 fe55 	bl	800a934 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c90:	f000 fb3a 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000a60 	.word	0x20000a60
 8001ca0:	40001400 	.word	0x40001400

08001ca4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b09a      	sub	sp, #104	; 0x68
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	222c      	movs	r2, #44	; 0x2c
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00c fa54 	bl	800e18c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ce4:	4b55      	ldr	r3, [pc, #340]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001ce6:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <MX_TIM8_Init+0x19c>)
 8001ce8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001cea:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b52      	ldr	r3, [pc, #328]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001cf6:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d04:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d10:	484a      	ldr	r0, [pc, #296]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d12:	f007 fec9 	bl	8009aa8 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001d1c:	f000 faf4 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4843      	ldr	r0, [pc, #268]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d2e:	f008 f92d 	bl	8009f8c <HAL_TIM_ConfigClockSource>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001d38:	f000 fae6 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d3c:	483f      	ldr	r0, [pc, #252]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d3e:	f007 ff0a 	bl	8009b56 <HAL_TIM_PWM_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001d48:	f000 fade 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d50:	2300      	movs	r3, #0
 8001d52:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4837      	ldr	r0, [pc, #220]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d60:	f008 fde8 	bl	800a934 <HAL_TIMEx_MasterConfigSynchronization>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001d6a:	f000 facd 	bl	8002308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6e:	2360      	movs	r3, #96	; 0x60
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4619      	mov	r1, r3
 8001d92:	482a      	ldr	r0, [pc, #168]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001d94:	f007 ffe6 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001d9e:	f000 fab3 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da6:	2204      	movs	r2, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4824      	ldr	r0, [pc, #144]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001dac:	f007 ffda 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001db6:	f000 faa7 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dbe:	2208      	movs	r2, #8
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	481e      	ldr	r0, [pc, #120]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001dc4:	f007 ffce 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001dce:	f000 fa9b 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4818      	ldr	r0, [pc, #96]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001ddc:	f007 ffc2 	bl	8009d64 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001de6:	f000 fa8f 	bl	8002308 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e10:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001e20:	f008 fe10 	bl	800aa44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8001e2a:	f000 fa6d 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM8_Init+0x198>)
 8001e30:	f000 fdac 	bl	800298c <HAL_TIM_MspPostInit>

}
 8001e34:	bf00      	nop
 8001e36:	3768      	adds	r7, #104	; 0x68
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000aac 	.word	0x20000aac
 8001e40:	40013400 	.word	0x40013400

08001e44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e4a:	4a15      	ldr	r2, [pc, #84]	; (8001ea0 <MX_UART4_Init+0x5c>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e4e:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	; (8001e9c <MX_UART4_Init+0x58>)
 8001e88:	f008 fe5a 	bl	800ab40 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001e92:	f000 fa39 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000af8 	.word	0x20000af8
 8001ea0:	40004c00 	.word	0x40004c00

08001ea4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <MX_UART5_Init+0x58>)
 8001eaa:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <MX_UART5_Init+0x5c>)
 8001eac:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <MX_UART5_Init+0x58>)
 8001eb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_UART5_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <MX_UART5_Init+0x58>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_UART5_Init+0x58>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_UART5_Init+0x58>)
 8001eca:	220c      	movs	r2, #12
 8001ecc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <MX_UART5_Init+0x58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_UART5_Init+0x58>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <MX_UART5_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_UART5_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_UART5_Init+0x58>)
 8001ee8:	f008 fe2a 	bl	800ab40 <HAL_UART_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001ef2:	f000 fa09 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000b7c 	.word	0x20000b7c
 8001f00:	40005000 	.word	0x40005000

08001f04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f08:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f0a:	4a15      	ldr	r2, [pc, #84]	; (8001f60 <MX_USART1_UART_Init+0x5c>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f46:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_USART1_UART_Init+0x58>)
 8001f48:	f008 fdfa 	bl	800ab40 <HAL_UART_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f52:	f000 f9d9 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000c00 	.word	0x20000c00
 8001f60:	40013800 	.word	0x40013800

08001f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <MX_USART2_UART_Init+0x5c>)
 8001f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_USART2_UART_Init+0x58>)
 8001fa8:	f008 fdca 	bl	800ab40 <HAL_UART_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fb2:	f000 f9a9 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000c84 	.word	0x20000c84
 8001fc0:	40004400 	.word	0x40004400

08001fc4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <MX_USART3_UART_Init+0x5c>)
 8001fcc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001fea:	220c      	movs	r2, #12
 8001fec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <MX_USART3_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_USART3_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	; (800201c <MX_USART3_UART_Init+0x58>)
 8002008:	f008 fd9a 	bl	800ab40 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002012:	f000 f979 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000d08 	.word	0x20000d08
 8002020:	40004800 	.word	0x40004800

08002024 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202a:	f107 0314 	add.w	r3, r7, #20
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	605a      	str	r2, [r3, #4]
 8002034:	609a      	str	r2, [r3, #8]
 8002036:	60da      	str	r2, [r3, #12]
 8002038:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203a:	4b31      	ldr	r3, [pc, #196]	; (8002100 <MX_GPIO_Init+0xdc>)
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	4a30      	ldr	r2, [pc, #192]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002052:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a2a      	ldr	r2, [pc, #168]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b25      	ldr	r3, [pc, #148]	; (8002100 <MX_GPIO_Init+0xdc>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a24      	ldr	r2, [pc, #144]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a1e      	ldr	r2, [pc, #120]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_GPIO_Init+0xdc>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	607b      	str	r3, [r7, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <MX_GPIO_Init+0xdc>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a18      	ldr	r2, [pc, #96]	; (8002100 <MX_GPIO_Init+0xdc>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <MX_GPIO_Init+0xdc>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2120      	movs	r1, #32
 80020b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ba:	f005 fa5b 	bl	8007574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	480b      	ldr	r0, [pc, #44]	; (8002104 <MX_GPIO_Init+0xe0>)
 80020d6:	f004 ffaf 	bl	8007038 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020da:	2320      	movs	r3, #32
 80020dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020de:	2301      	movs	r3, #1
 80020e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80020ea:	f107 0314 	add.w	r3, r7, #20
 80020ee:	4619      	mov	r1, r3
 80020f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f4:	f004 ffa0 	bl	8007038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	48000800 	.word	0x48000800

08002108 <IMU_Receive_Transmit_Data>:

/* USER CODE BEGIN 4 */

void IMU_Receive_Transmit_Data()
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	IMU_GetData();
 800210c:	f7ff f8c2 	bl	8001294 <IMU_GetData>
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <GetData_GPS>:

void GetData_GPS(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
 8002118:	2201      	movs	r2, #1
 800211a:	4903      	ldr	r1, [pc, #12]	; (8002128 <GetData_GPS+0x14>)
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <GetData_GPS+0x18>)
 800211e:	f008 fdcb 	bl	800acb8 <HAL_UART_Receive_IT>
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000d9c 	.word	0x20000d9c
 800212c:	20000c84 	.word	0x20000c84

08002130 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    	{
    		message_index=0;
    	}

    }*/
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART2)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_UART_RxCpltCallback+0x8c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d137      	bne.n	80021c6 <HAL_UART_RxCpltCallback+0x82>

			static char rx_buffer[LINEMAX];   // Local holding buffer to build line
			static int rx_index = 0;


			if ((rxBufferGps == '\r') || (rxBufferGps == '\n')) // Is this an end-of-line condition, either will suffice?
 8002156:	4b1f      	ldr	r3, [pc, #124]	; (80021d4 <HAL_UART_RxCpltCallback+0x90>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b0d      	cmp	r3, #13
 800215c:	d003      	beq.n	8002166 <HAL_UART_RxCpltCallback+0x22>
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_UART_RxCpltCallback+0x90>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b0a      	cmp	r3, #10
 8002164:	d116      	bne.n	8002194 <HAL_UART_RxCpltCallback+0x50>
			{
			  if (rx_index != 0) // Line has some content
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d026      	beq.n	80021bc <HAL_UART_RxCpltCallback+0x78>
			  {
				memcpy((void *)nmeaFrame, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 800216e:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4919      	ldr	r1, [pc, #100]	; (80021dc <HAL_UART_RxCpltCallback+0x98>)
 8002176:	481a      	ldr	r0, [pc, #104]	; (80021e0 <HAL_UART_RxCpltCallback+0x9c>)
 8002178:	f00b fffa 	bl	800e170 <memcpy>
				nmeaFrame[rx_index] = 0; // Add terminating NUL
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_UART_RxCpltCallback+0x9c>)
 8002182:	2100      	movs	r1, #0
 8002184:	54d1      	strb	r1, [r2, r3]
				nmeaFrameValid = 1; // flag new line valid for processing
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_UART_RxCpltCallback+0xa0>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

				rx_index = 0; // Reset content pointer
 800218c:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
			  if (rx_index != 0) // Line has some content
 8002192:	e013      	b.n	80021bc <HAL_UART_RxCpltCallback+0x78>
			  }
			}
			else
			{
			  if ((rxBufferGps == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_UART_RxCpltCallback+0x90>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b24      	cmp	r3, #36	; 0x24
 800219a:	d003      	beq.n	80021a4 <HAL_UART_RxCpltCallback+0x60>
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2bc8      	cmp	r3, #200	; 0xc8
 80021a2:	d102      	bne.n	80021aa <HAL_UART_RxCpltCallback+0x66>
				rx_index = 0;
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]

			  rx_buffer[rx_index++] = rxBufferGps; // Copy to buffer and increment
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <HAL_UART_RxCpltCallback+0x94>)
 80021b2:	600a      	str	r2, [r1, #0]
 80021b4:	4a07      	ldr	r2, [pc, #28]	; (80021d4 <HAL_UART_RxCpltCallback+0x90>)
 80021b6:	7811      	ldrb	r1, [r2, #0]
 80021b8:	4a08      	ldr	r2, [pc, #32]	; (80021dc <HAL_UART_RxCpltCallback+0x98>)
 80021ba:	54d1      	strb	r1, [r2, r3]
			}


    	HAL_UART_Receive_IT(&huart2, &rxBufferGps, 1);
 80021bc:	2201      	movs	r2, #1
 80021be:	4905      	ldr	r1, [pc, #20]	; (80021d4 <HAL_UART_RxCpltCallback+0x90>)
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <HAL_UART_RxCpltCallback+0xa4>)
 80021c2:	f008 fd79 	bl	800acb8 <HAL_UART_Receive_IT>
    }
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40004400 	.word	0x40004400
 80021d4:	20000d9c 	.word	0x20000d9c
 80021d8:	20000e6c 	.word	0x20000e6c
 80021dc:	20000e70 	.word	0x20000e70
 80021e0:	20000da0 	.word	0x20000da0
 80021e4:	20000e68 	.word	0x20000e68
 80021e8:	20000c84 	.word	0x20000c84

080021ec <Transmit_data_to_usb>:

void Transmit_data_to_usb(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
	MESSAGE_Typedef trame_gps = MESSAGE_ReadMailboxNoDelay(GPS_Mailbox);
 80021f2:	4b28      	ldr	r3, [pc, #160]	; (8002294 <Transmit_data_to_usb+0xa8>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f107 030c 	add.w	r3, r7, #12
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff f915 	bl	800142c <MESSAGE_ReadMailboxNoDelay>
	MESSAGE_Typedef message_imu = MESSAGE_ReadMailboxNoDelay(IMU_Mailbox);
 8002202:	4b25      	ldr	r3, [pc, #148]	; (8002298 <Transmit_data_to_usb+0xac>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	463b      	mov	r3, r7
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f90e 	bl	800142c <MESSAGE_ReadMailboxNoDelay>
	if (trame_gps.id == MSG_ID_GPS)
 8002210:	89bb      	ldrh	r3, [r7, #12]
 8002212:	2b30      	cmp	r3, #48	; 0x30
 8002214:	d104      	bne.n	8002220 <Transmit_data_to_usb+0x34>
	{
		HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));
 8002216:	2223      	movs	r2, #35	; 0x23
 8002218:	4920      	ldr	r1, [pc, #128]	; (800229c <Transmit_data_to_usb+0xb0>)
 800221a:	4821      	ldr	r0, [pc, #132]	; (80022a0 <Transmit_data_to_usb+0xb4>)
 800221c:	f008 fcde 	bl	800abdc <HAL_UART_Transmit_IT>
	}

	if(message_imu.id  == MSG_ID_IMU_TEMP)
 8002220:	883b      	ldrh	r3, [r7, #0]
 8002222:	2b20      	cmp	r3, #32
 8002224:	d105      	bne.n	8002232 <Transmit_data_to_usb+0x46>
	{
		HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));
 8002226:	2223      	movs	r2, #35	; 0x23
 8002228:	491c      	ldr	r1, [pc, #112]	; (800229c <Transmit_data_to_usb+0xb0>)
 800222a:	481d      	ldr	r0, [pc, #116]	; (80022a0 <Transmit_data_to_usb+0xb4>)
 800222c:	f008 fcd6 	bl	800abdc <HAL_UART_Transmit_IT>
	}
	else if(message_imu.id  == MSG_ID_IMU_GYR)
	{
		HAL_UART_Transmit_IT(&huart4, message_gyro,sizeof(message_temp));
	}
}
 8002230:	e02b      	b.n	800228a <Transmit_data_to_usb+0x9e>
	else if (message_imu.id  == MSG_ID_IMU_HUM)
 8002232:	883b      	ldrh	r3, [r7, #0]
 8002234:	2b21      	cmp	r3, #33	; 0x21
 8002236:	d105      	bne.n	8002244 <Transmit_data_to_usb+0x58>
		HAL_UART_Transmit_IT(&huart4, message_hum, sizeof(message_temp));
 8002238:	2223      	movs	r2, #35	; 0x23
 800223a:	491a      	ldr	r1, [pc, #104]	; (80022a4 <Transmit_data_to_usb+0xb8>)
 800223c:	4818      	ldr	r0, [pc, #96]	; (80022a0 <Transmit_data_to_usb+0xb4>)
 800223e:	f008 fccd 	bl	800abdc <HAL_UART_Transmit_IT>
}
 8002242:	e022      	b.n	800228a <Transmit_data_to_usb+0x9e>
	else if (message_imu.id  == MSG_ID_IMU_PRESS)
 8002244:	883b      	ldrh	r3, [r7, #0]
 8002246:	2b25      	cmp	r3, #37	; 0x25
 8002248:	d105      	bne.n	8002256 <Transmit_data_to_usb+0x6a>
		HAL_UART_Transmit_IT(&huart4, message_press, sizeof(message_temp));
 800224a:	2223      	movs	r2, #35	; 0x23
 800224c:	4916      	ldr	r1, [pc, #88]	; (80022a8 <Transmit_data_to_usb+0xbc>)
 800224e:	4814      	ldr	r0, [pc, #80]	; (80022a0 <Transmit_data_to_usb+0xb4>)
 8002250:	f008 fcc4 	bl	800abdc <HAL_UART_Transmit_IT>
}
 8002254:	e019      	b.n	800228a <Transmit_data_to_usb+0x9e>
	else if(message_imu.id  == MSG_ID_IMU_ACC)
 8002256:	883b      	ldrh	r3, [r7, #0]
 8002258:	2b24      	cmp	r3, #36	; 0x24
 800225a:	d105      	bne.n	8002268 <Transmit_data_to_usb+0x7c>
		HAL_UART_Transmit_IT(&huart4, message_acc1, sizeof(message_temp));
 800225c:	2223      	movs	r2, #35	; 0x23
 800225e:	4913      	ldr	r1, [pc, #76]	; (80022ac <Transmit_data_to_usb+0xc0>)
 8002260:	480f      	ldr	r0, [pc, #60]	; (80022a0 <Transmit_data_to_usb+0xb4>)
 8002262:	f008 fcbb 	bl	800abdc <HAL_UART_Transmit_IT>
}
 8002266:	e010      	b.n	800228a <Transmit_data_to_usb+0x9e>
	else if(message_imu.id  == MSG_ID_IMU_MAG)
 8002268:	883b      	ldrh	r3, [r7, #0]
 800226a:	2b23      	cmp	r3, #35	; 0x23
 800226c:	d105      	bne.n	800227a <Transmit_data_to_usb+0x8e>
		HAL_UART_Transmit_IT(&huart4, message_mag, sizeof(message_temp));
 800226e:	2223      	movs	r2, #35	; 0x23
 8002270:	490f      	ldr	r1, [pc, #60]	; (80022b0 <Transmit_data_to_usb+0xc4>)
 8002272:	480b      	ldr	r0, [pc, #44]	; (80022a0 <Transmit_data_to_usb+0xb4>)
 8002274:	f008 fcb2 	bl	800abdc <HAL_UART_Transmit_IT>
}
 8002278:	e007      	b.n	800228a <Transmit_data_to_usb+0x9e>
	else if(message_imu.id  == MSG_ID_IMU_GYR)
 800227a:	883b      	ldrh	r3, [r7, #0]
 800227c:	2b22      	cmp	r3, #34	; 0x22
 800227e:	d104      	bne.n	800228a <Transmit_data_to_usb+0x9e>
		HAL_UART_Transmit_IT(&huart4, message_gyro,sizeof(message_temp));
 8002280:	2223      	movs	r2, #35	; 0x23
 8002282:	490c      	ldr	r1, [pc, #48]	; (80022b4 <Transmit_data_to_usb+0xc8>)
 8002284:	4806      	ldr	r0, [pc, #24]	; (80022a0 <Transmit_data_to_usb+0xb4>)
 8002286:	f008 fca9 	bl	800abdc <HAL_UART_Transmit_IT>
}
 800228a:	bf00      	nop
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000514 	.word	0x20000514
 8002298:	20000510 	.word	0x20000510
 800229c:	200002b0 	.word	0x200002b0
 80022a0:	20000af8 	.word	0x20000af8
 80022a4:	2000028c 	.word	0x2000028c
 80022a8:	20000268 	.word	0x20000268
 80022ac:	200002d4 	.word	0x200002d4
 80022b0:	2000033c 	.word	0x2000033c
 80022b4:	20000308 	.word	0x20000308

080022b8 <StartUart>:

void StartUart(void const * argument)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {

	  Transmit_data_to_usb();
 80022c0:	f7ff ff94 	bl	80021ec <Transmit_data_to_usb>
	  osDelay(800);
 80022c4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80022c8:	f00a f8aa 	bl	800c420 <osDelay>
	  Transmit_data_to_usb();
 80022cc:	e7f8      	b.n	80022c0 <StartUart+0x8>

080022ce <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  GetData_GPS();
 80022d6:	f7ff ff1d 	bl	8002114 <GetData_GPS>
	  osDelay(1);
 80022da:	2001      	movs	r0, #1
 80022dc:	f00a f8a0 	bl	800c420 <osDelay>
	  GetData_GPS();
 80022e0:	e7f9      	b.n	80022d6 <StartGPS+0x8>

080022e2 <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	IMU_Receive_Transmit_Data();
 80022ea:	f7ff ff0d 	bl	8002108 <IMU_Receive_Transmit_Data>
    osDelay(10);
 80022ee:	200a      	movs	r0, #10
 80022f0:	f00a f896 	bl	800c420 <osDelay>
	IMU_Receive_Transmit_Data();
 80022f4:	e7f9      	b.n	80022ea <StartIMU+0x8>

080022f6 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 80022fe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002302:	f00a f88d 	bl	800c420 <osDelay>
 8002306:	e7fa      	b.n	80022fe <StartDefaultTask+0x8>

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	e7fe      	b.n	8002310 <Error_Handler+0x8>
	...

08002314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_MspInit+0x4c>)
 800231c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_MspInit+0x4c>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6613      	str	r3, [r2, #96]	; 0x60
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_MspInit+0x4c>)
 8002328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_MspInit+0x4c>)
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <HAL_MspInit+0x4c>)
 8002338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800233c:	6593      	str	r3, [r2, #88]	; 0x58
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_MspInit+0x4c>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	210f      	movs	r1, #15
 800234e:	f06f 0001 	mvn.w	r0, #1
 8002352:	f004 fdbc 	bl	8006ece <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000

08002364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b0ac      	sub	sp, #176	; 0xb0
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2288      	movs	r2, #136	; 0x88
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f00b ff01 	bl	800e18c <memset>
  if(hadc->Instance==ADC3)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_ADC_MspInit+0xc8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d146      	bne.n	8002422 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002394:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002398:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800239a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800239e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80023aa:	2308      	movs	r3, #8
 80023ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80023ae:	2307      	movs	r3, #7
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80023b2:	2302      	movs	r3, #2
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80023b6:	2302      	movs	r3, #2
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80023ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4618      	mov	r0, r3
 80023c6:	f006 fd95 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80023d0:	f7ff ff9a 	bl	8002308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <HAL_ADC_MspInit+0xcc>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_ADC_MspInit+0xcc>)
 80023da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_ADC_MspInit+0xcc>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_ADC_MspInit+0xcc>)
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	4a0f      	ldr	r2, [pc, #60]	; (8002430 <HAL_ADC_MspInit+0xcc>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f8:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <HAL_ADC_MspInit+0xcc>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002404:	2307      	movs	r3, #7
 8002406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800240a:	230b      	movs	r3, #11
 800240c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002416:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800241a:	4619      	mov	r1, r3
 800241c:	4805      	ldr	r0, [pc, #20]	; (8002434 <HAL_ADC_MspInit+0xd0>)
 800241e:	f004 fe0b 	bl	8007038 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	37b0      	adds	r7, #176	; 0xb0
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	50040200 	.word	0x50040200
 8002430:	40021000 	.word	0x40021000
 8002434:	48000800 	.word	0x48000800

08002438 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_CAN_MspInit+0x80>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d129      	bne.n	80024ae <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800245a:	4b18      	ldr	r3, [pc, #96]	; (80024bc <HAL_CAN_MspInit+0x84>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	4a17      	ldr	r2, [pc, #92]	; (80024bc <HAL_CAN_MspInit+0x84>)
 8002460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002464:	6593      	str	r3, [r2, #88]	; 0x58
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <HAL_CAN_MspInit+0x84>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_CAN_MspInit+0x84>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <HAL_CAN_MspInit+0x84>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_CAN_MspInit+0x84>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800248a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800249c:	2309      	movs	r3, #9
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024aa:	f004 fdc5 	bl	8007038 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40006400 	.word	0x40006400
 80024bc:	40021000 	.word	0x40021000

080024c0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 030c 	add.w	r3, r7, #12
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <HAL_COMP_MspInit+0x5c>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d117      	bne.n	8002512 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_COMP_MspInit+0x60>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_COMP_MspInit+0x60>)
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_COMP_MspInit+0x60>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 80024fa:	2390      	movs	r3, #144	; 0x90
 80024fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024fe:	2303      	movs	r3, #3
 8002500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002506:	f107 030c 	add.w	r3, r7, #12
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	; (8002524 <HAL_COMP_MspInit+0x64>)
 800250e:	f004 fd93 	bl	8007038 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40010204 	.word	0x40010204
 8002520:	40021000 	.word	0x40021000
 8002524:	48000400 	.word	0x48000400

08002528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0ac      	sub	sp, #176	; 0xb0
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2288      	movs	r2, #136	; 0x88
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f00b fe1f 	bl	800e18c <memset>
  if(hi2c->Instance==I2C2)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a21      	ldr	r2, [pc, #132]	; (80025d8 <HAL_I2C_MspInit+0xb0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d13b      	bne.n	80025d0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800255c:	2300      	movs	r3, #0
 800255e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4618      	mov	r0, r3
 8002566:	f006 fcc5 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002570:	f7ff feca 	bl	8002308 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002574:	4b19      	ldr	r3, [pc, #100]	; (80025dc <HAL_I2C_MspInit+0xb4>)
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	4a18      	ldr	r2, [pc, #96]	; (80025dc <HAL_I2C_MspInit+0xb4>)
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <HAL_I2C_MspInit+0xb4>)
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800258c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002594:	2312      	movs	r3, #18
 8002596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025a6:	2304      	movs	r3, #4
 80025a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025b0:	4619      	mov	r1, r3
 80025b2:	480b      	ldr	r0, [pc, #44]	; (80025e0 <HAL_I2C_MspInit+0xb8>)
 80025b4:	f004 fd40 	bl	8007038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_I2C_MspInit+0xb4>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_I2C_MspInit+0xb4>)
 80025be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025c2:	6593      	str	r3, [r2, #88]	; 0x58
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_I2C_MspInit+0xb4>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80025d0:	bf00      	nop
 80025d2:	37b0      	adds	r7, #176	; 0xb0
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40005800 	.word	0x40005800
 80025dc:	40021000 	.word	0x40021000
 80025e0:	48000400 	.word	0x48000400

080025e4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <HAL_I2C_MspDeInit+0x3c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10f      	bne.n	8002616 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_I2C_MspDeInit+0x40>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_I2C_MspDeInit+0x40>)
 80025fc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002602:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002606:	4808      	ldr	r0, [pc, #32]	; (8002628 <HAL_I2C_MspDeInit+0x44>)
 8002608:	f004 fec0 	bl	800738c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800260c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002610:	4805      	ldr	r0, [pc, #20]	; (8002628 <HAL_I2C_MspDeInit+0x44>)
 8002612:	f004 febb 	bl	800738c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40005800 	.word	0x40005800
 8002624:	40021000 	.word	0x40021000
 8002628:	48000400 	.word	0x48000400

0800262c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	; 0x38
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a4b      	ldr	r2, [pc, #300]	; (8002778 <HAL_SPI_MspInit+0x14c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d145      	bne.n	80026da <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800264e:	4b4b      	ldr	r3, [pc, #300]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002652:	4a4a      	ldr	r2, [pc, #296]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6593      	str	r3, [r2, #88]	; 0x58
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <HAL_SPI_MspInit+0x150>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	623b      	str	r3, [r7, #32]
 8002664:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b45      	ldr	r3, [pc, #276]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	4a44      	ldr	r2, [pc, #272]	; (800277c <HAL_SPI_MspInit+0x150>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002672:	4b42      	ldr	r3, [pc, #264]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800267e:	4b3f      	ldr	r3, [pc, #252]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	4a3e      	ldr	r2, [pc, #248]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002684:	f043 0302 	orr.w	r3, r3, #2
 8002688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800268a:	4b3c      	ldr	r3, [pc, #240]	; (800277c <HAL_SPI_MspInit+0x150>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	61bb      	str	r3, [r7, #24]
 8002694:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002696:	2308      	movs	r3, #8
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026a6:	2305      	movs	r3, #5
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	4619      	mov	r1, r3
 80026b0:	4833      	ldr	r0, [pc, #204]	; (8002780 <HAL_SPI_MspInit+0x154>)
 80026b2:	f004 fcc1 	bl	8007038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80026b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026bc:	2302      	movs	r3, #2
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80026c8:	2305      	movs	r3, #5
 80026ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d0:	4619      	mov	r1, r3
 80026d2:	482c      	ldr	r0, [pc, #176]	; (8002784 <HAL_SPI_MspInit+0x158>)
 80026d4:	f004 fcb0 	bl	8007038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80026d8:	e049      	b.n	800276e <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_SPI_MspInit+0x15c>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d144      	bne.n	800276e <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <HAL_SPI_MspInit+0x150>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4a24      	ldr	r2, [pc, #144]	; (800277c <HAL_SPI_MspInit+0x150>)
 80026ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ee:	6593      	str	r3, [r2, #88]	; 0x58
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_SPI_MspInit+0x150>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_SPI_MspInit+0x150>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002700:	4a1e      	ldr	r2, [pc, #120]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002708:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_SPI_MspInit+0x150>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	4a18      	ldr	r2, [pc, #96]	; (800277c <HAL_SPI_MspInit+0x150>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002720:	4b16      	ldr	r3, [pc, #88]	; (800277c <HAL_SPI_MspInit+0x150>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800272c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	2303      	movs	r3, #3
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800273e:	2306      	movs	r3, #6
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002746:	4619      	mov	r1, r3
 8002748:	480d      	ldr	r0, [pc, #52]	; (8002780 <HAL_SPI_MspInit+0x154>)
 800274a:	f004 fc75 	bl	8007038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800274e:	2320      	movs	r3, #32
 8002750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800275e:	2306      	movs	r3, #6
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002766:	4619      	mov	r1, r3
 8002768:	4806      	ldr	r0, [pc, #24]	; (8002784 <HAL_SPI_MspInit+0x158>)
 800276a:	f004 fc65 	bl	8007038 <HAL_GPIO_Init>
}
 800276e:	bf00      	nop
 8002770:	3738      	adds	r7, #56	; 0x38
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40003800 	.word	0x40003800
 800277c:	40021000 	.word	0x40021000
 8002780:	48000800 	.word	0x48000800
 8002784:	48000400 	.word	0x48000400
 8002788:	40003c00 	.word	0x40003c00

0800278c <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b0ac      	sub	sp, #176	; 0xb0
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002794:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	605a      	str	r2, [r3, #4]
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2288      	movs	r2, #136	; 0x88
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f00b fced 	bl	800e18c <memset>
  if(hswpmi->Instance==SWPMI1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a22      	ldr	r2, [pc, #136]	; (8002840 <HAL_SWPMI_MspInit+0xb4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d13d      	bne.n	8002838 <HAL_SWPMI_MspInit+0xac>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 80027bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027c0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	4618      	mov	r0, r3
 80027ce:	f006 fb91 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 80027d8:	f7ff fd96 	bl	8002308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 80027dc:	4b19      	ldr	r3, [pc, #100]	; (8002844 <HAL_SWPMI_MspInit+0xb8>)
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	4a18      	ldr	r2, [pc, #96]	; (8002844 <HAL_SWPMI_MspInit+0xb8>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_SWPMI_MspInit+0xb8>)
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <HAL_SWPMI_MspInit+0xb8>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	4a12      	ldr	r2, [pc, #72]	; (8002844 <HAL_SWPMI_MspInit+0xb8>)
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <HAL_SWPMI_MspInit+0xb8>)
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    /**SWPMI1 GPIO Configuration
    PB12     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002810:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002814:	2302      	movs	r3, #2
 8002816:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002820:	2303      	movs	r3, #3
 8002822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 8002826:	230c      	movs	r3, #12
 8002828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002830:	4619      	mov	r1, r3
 8002832:	4805      	ldr	r0, [pc, #20]	; (8002848 <HAL_SWPMI_MspInit+0xbc>)
 8002834:	f004 fc00 	bl	8007038 <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 8002838:	bf00      	nop
 800283a:	37b0      	adds	r7, #176	; 0xb0
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40008800 	.word	0x40008800
 8002844:	40021000 	.word	0x40021000
 8002848:	48000400 	.word	0x48000400

0800284c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a18      	ldr	r2, [pc, #96]	; (80028cc <HAL_TIM_Encoder_MspInit+0x80>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d129      	bne.n	80028c2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002878:	6613      	str	r3, [r2, #96]	; 0x60
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800287c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	4a11      	ldr	r2, [pc, #68]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x84>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800289e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028b0:	2301      	movs	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028be:	f004 fbbb 	bl	8007038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028c2:	bf00      	nop
 80028c4:	3728      	adds	r7, #40	; 0x28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_TIM_Base_MspInit+0xa4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10c      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028e6:	4b25      	ldr	r3, [pc, #148]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ea:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6593      	str	r3, [r2, #88]	; 0x58
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028fe:	e034      	b.n	800296a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1e      	ldr	r2, [pc, #120]	; (8002980 <HAL_TIM_Base_MspInit+0xac>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10c      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290e:	4a1b      	ldr	r2, [pc, #108]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 8002910:	f043 0310 	orr.w	r3, r3, #16
 8002914:	6593      	str	r3, [r2, #88]	; 0x58
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
}
 8002922:	e022      	b.n	800296a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <HAL_TIM_Base_MspInit+0xb0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10c      	bne.n	8002948 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a12      	ldr	r2, [pc, #72]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 8002934:	f043 0320 	orr.w	r3, r3, #32
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
}
 8002946:	e010      	b.n	800296a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <HAL_TIM_Base_MspInit+0xb4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10b      	bne.n	800296a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 8002954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002956:	4a09      	ldr	r2, [pc, #36]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 8002958:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800295c:	6613      	str	r3, [r2, #96]	; 0x60
 800295e:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_TIM_Base_MspInit+0xa8>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40000400 	.word	0x40000400
 800297c:	40021000 	.word	0x40021000
 8002980:	40001000 	.word	0x40001000
 8002984:	40001400 	.word	0x40001400
 8002988:	40013400 	.word	0x40013400

0800298c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_TIM_MspPostInit+0xe4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d139      	bne.n	8002a22 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	4b31      	ldr	r3, [pc, #196]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b2:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ba:	4b2e      	ldr	r3, [pc, #184]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c6:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029d2:	4b28      	ldr	r3, [pc, #160]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029de:	23c0      	movs	r3, #192	; 0xc0
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ea:	2300      	movs	r3, #0
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ee:	2302      	movs	r3, #2
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029fc:	f004 fb1c 	bl	8007038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a00:	2303      	movs	r3, #3
 8002a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a10:	2302      	movs	r3, #2
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4817      	ldr	r0, [pc, #92]	; (8002a78 <HAL_TIM_MspPostInit+0xec>)
 8002a1c:	f004 fb0c 	bl	8007038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002a20:	e021      	b.n	8002a66 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <HAL_TIM_MspPostInit+0xf0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d11c      	bne.n	8002a66 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 8002a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a30:	4a10      	ldr	r2, [pc, #64]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_TIM_MspPostInit+0xe8>)
 8002a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a44:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a56:	2303      	movs	r3, #3
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4807      	ldr	r0, [pc, #28]	; (8002a80 <HAL_TIM_MspPostInit+0xf4>)
 8002a62:	f004 fae9 	bl	8007038 <HAL_GPIO_Init>
}
 8002a66:	bf00      	nop
 8002a68:	3728      	adds	r7, #40	; 0x28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40021000 	.word	0x40021000
 8002a78:	48000400 	.word	0x48000400
 8002a7c:	40013400 	.word	0x40013400
 8002a80:	48000800 	.word	0x48000800

08002a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b0b6      	sub	sp, #216	; 0xd8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002aa0:	2288      	movs	r2, #136	; 0x88
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f00b fb71 	bl	800e18c <memset>
  if(huart->Instance==UART4)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4aad      	ldr	r2, [pc, #692]	; (8002d64 <HAL_UART_MspInit+0x2e0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d145      	bne.n	8002b40 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002abe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f006 fa16 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ace:	f7ff fc1b 	bl	8002308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002ad2:	4ba5      	ldr	r3, [pc, #660]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	4aa4      	ldr	r2, [pc, #656]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
 8002ade:	4ba2      	ldr	r3, [pc, #648]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	4b9f      	ldr	r3, [pc, #636]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	4a9e      	ldr	r2, [pc, #632]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002af6:	4b9c      	ldr	r3, [pc, #624]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	637b      	str	r3, [r7, #52]	; 0x34
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b02:	2303      	movs	r3, #3
 8002b04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b24:	4619      	mov	r1, r3
 8002b26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2a:	f004 fa85 	bl	8007038 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2105      	movs	r1, #5
 8002b32:	2034      	movs	r0, #52	; 0x34
 8002b34:	f004 f9cb 	bl	8006ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002b38:	2034      	movs	r0, #52	; 0x34
 8002b3a:	f004 f9e4 	bl	8006f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b3e:	e161      	b.n	8002e04 <HAL_UART_MspInit+0x380>
  else if(huart->Instance==UART5)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a89      	ldr	r2, [pc, #548]	; (8002d6c <HAL_UART_MspInit+0x2e8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d15e      	bne.n	8002c08 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f006 f9cb 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8002b64:	f7ff fbd0 	bl	8002308 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002b68:	4b7f      	ldr	r3, [pc, #508]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	4a7e      	ldr	r2, [pc, #504]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b72:	6593      	str	r3, [r2, #88]	; 0x58
 8002b74:	4b7c      	ldr	r3, [pc, #496]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b80:	4b79      	ldr	r3, [pc, #484]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	4a78      	ldr	r2, [pc, #480]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8c:	4b76      	ldr	r3, [pc, #472]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b98:	4b73      	ldr	r3, [pc, #460]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9c:	4a72      	ldr	r2, [pc, #456]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba4:	4b70      	ldr	r3, [pc, #448]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4866      	ldr	r0, [pc, #408]	; (8002d70 <HAL_UART_MspInit+0x2ec>)
 8002bd8:	f004 fa2e 	bl	8007038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002bdc:	2304      	movs	r3, #4
 8002bde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be2:	2302      	movs	r3, #2
 8002be4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	485c      	ldr	r0, [pc, #368]	; (8002d74 <HAL_UART_MspInit+0x2f0>)
 8002c02:	f004 fa19 	bl	8007038 <HAL_GPIO_Init>
}
 8002c06:	e0fd      	b.n	8002e04 <HAL_UART_MspInit+0x380>
  else if(huart->Instance==USART1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a5a      	ldr	r2, [pc, #360]	; (8002d78 <HAL_UART_MspInit+0x2f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d15e      	bne.n	8002cd0 <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c16:	2300      	movs	r3, #0
 8002c18:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f006 f968 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8002c2a:	f7ff fb6d 	bl	8002308 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2e:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c52:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a41      	ldr	r2, [pc, #260]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6a:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	61fb      	str	r3, [r7, #28]
 8002c74:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7e:	2302      	movs	r3, #2
 8002c80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c90:	2307      	movs	r3, #7
 8002c92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca0:	f004 f9ca 	bl	8007038 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ca4:	2340      	movs	r3, #64	; 0x40
 8002ca6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002caa:	2302      	movs	r3, #2
 8002cac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	482c      	ldr	r0, [pc, #176]	; (8002d7c <HAL_UART_MspInit+0x2f8>)
 8002cca:	f004 f9b5 	bl	8007038 <HAL_GPIO_Init>
}
 8002cce:	e099      	b.n	8002e04 <HAL_UART_MspInit+0x380>
  else if(huart->Instance==USART2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2a      	ldr	r2, [pc, #168]	; (8002d80 <HAL_UART_MspInit+0x2fc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d154      	bne.n	8002d84 <HAL_UART_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ce2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f006 f904 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8002cf2:	f7ff fb09 	bl	8002308 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d00:	6593      	str	r3, [r2, #88]	; 0x58
 8002d02:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	61bb      	str	r3, [r7, #24]
 8002d0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0e:	4b16      	ldr	r3, [pc, #88]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d12:	4a15      	ldr	r2, [pc, #84]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_UART_MspInit+0x2e4>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d26:	230c      	movs	r3, #12
 8002d28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d3e:	2307      	movs	r3, #7
 8002d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4e:	f004 f973 	bl	8007038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2105      	movs	r1, #5
 8002d56:	2026      	movs	r0, #38	; 0x26
 8002d58:	f004 f8b9 	bl	8006ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002d5c:	2026      	movs	r0, #38	; 0x26
 8002d5e:	f004 f8d2 	bl	8006f06 <HAL_NVIC_EnableIRQ>
}
 8002d62:	e04f      	b.n	8002e04 <HAL_UART_MspInit+0x380>
 8002d64:	40004c00 	.word	0x40004c00
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40005000 	.word	0x40005000
 8002d70:	48000800 	.word	0x48000800
 8002d74:	48000c00 	.word	0x48000c00
 8002d78:	40013800 	.word	0x40013800
 8002d7c:	48000400 	.word	0x48000400
 8002d80:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a20      	ldr	r2, [pc, #128]	; (8002e0c <HAL_UART_MspInit+0x388>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d13a      	bne.n	8002e04 <HAL_UART_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d8e:	2304      	movs	r3, #4
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d92:	2300      	movs	r3, #0
 8002d94:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d96:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f006 f8aa 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_UART_MspInit+0x326>
      Error_Handler();
 8002da6:	f7ff faaf 	bl	8002308 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_UART_MspInit+0x38c>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_UART_MspInit+0x38c>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <HAL_UART_MspInit+0x38c>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc2:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <HAL_UART_MspInit+0x38c>)
 8002dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_UART_MspInit+0x38c>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_UART_MspInit+0x38c>)
 8002dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002dda:	2330      	movs	r3, #48	; 0x30
 8002ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002df2:	2307      	movs	r3, #7
 8002df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <HAL_UART_MspInit+0x390>)
 8002e00:	f004 f91a 	bl	8007038 <HAL_GPIO_Init>
}
 8002e04:	bf00      	nop
 8002e06:	37d8      	adds	r7, #216	; 0xd8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40004800 	.word	0x40004800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	48000800 	.word	0x48000800

08002e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <NMI_Handler+0x4>

08002e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e22:	e7fe      	b.n	8002e22 <HardFault_Handler+0x4>

08002e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e28:	e7fe      	b.n	8002e28 <MemManage_Handler+0x4>

08002e2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e2e:	e7fe      	b.n	8002e2e <BusFault_Handler+0x4>

08002e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e34:	e7fe      	b.n	8002e34 <UsageFault_Handler+0x4>

08002e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e48:	f002 fdba 	bl	80059c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002e4c:	f00a fc64 	bl	800d718 <xTaskGetSchedulerState>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002e56:	f00a ff27 	bl	800dca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <USART2_IRQHandler+0x10>)
 8002e66:	f007 ff7d 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000c84 	.word	0x20000c84

08002e74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <UART4_IRQHandler+0x10>)
 8002e7a:	f007 ff73 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000af8 	.word	0x20000af8

08002e88 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002e92:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <BSP_I2C1_Init+0x70>)
 8002e94:	4a19      	ldr	r2, [pc, #100]	; (8002efc <BSP_I2C1_Init+0x74>)
 8002e96:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <BSP_I2C1_Init+0x78>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	4918      	ldr	r1, [pc, #96]	; (8002f00 <BSP_I2C1_Init+0x78>)
 8002ea0:	600a      	str	r2, [r1, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d122      	bne.n	8002eec <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002ea6:	4814      	ldr	r0, [pc, #80]	; (8002ef8 <BSP_I2C1_Init+0x70>)
 8002ea8:	f004 fe68 	bl	8007b7c <HAL_I2C_GetState>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d11c      	bne.n	8002eec <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002eb2:	4811      	ldr	r0, [pc, #68]	; (8002ef8 <BSP_I2C1_Init+0x70>)
 8002eb4:	f000 f8f6 	bl	80030a4 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002ebe:	480e      	ldr	r0, [pc, #56]	; (8002ef8 <BSP_I2C1_Init+0x70>)
 8002ec0:	f000 f8ac 	bl	800301c <MX_I2C1_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002eca:	f06f 0307 	mvn.w	r3, #7
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e00c      	b.n	8002eec <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4808      	ldr	r0, [pc, #32]	; (8002ef8 <BSP_I2C1_Init+0x70>)
 8002ed6:	f005 f911 	bl	80080fc <HAL_I2CEx_ConfigAnalogFilter>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002ee0:	f06f 0307 	mvn.w	r3, #7
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	e001      	b.n	8002eec <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002eec:	687b      	ldr	r3, [r7, #4]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000f38 	.word	0x20000f38
 8002efc:	40005400 	.word	0x40005400
 8002f00:	20000f8c 	.word	0x20000f8c

08002f04 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002f0e:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <BSP_I2C1_DeInit+0x48>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d014      	beq.n	8002f40 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <BSP_I2C1_DeInit+0x48>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	4a0b      	ldr	r2, [pc, #44]	; (8002f4c <BSP_I2C1_DeInit+0x48>)
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <BSP_I2C1_DeInit+0x48>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002f28:	4809      	ldr	r0, [pc, #36]	; (8002f50 <BSP_I2C1_DeInit+0x4c>)
 8002f2a:	f000 f91b 	bl	8003164 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002f2e:	4808      	ldr	r0, [pc, #32]	; (8002f50 <BSP_I2C1_DeInit+0x4c>)
 8002f30:	f004 fbc7 	bl	80076c2 <HAL_I2C_DeInit>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002f3a:	f06f 0307 	mvn.w	r3, #7
 8002f3e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000f8c 	.word	0x20000f8c
 8002f50:	20000f38 	.word	0x20000f38

08002f54 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af04      	add	r7, sp, #16
 8002f5a:	60ba      	str	r2, [r7, #8]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4603      	mov	r3, r0
 8002f60:	81fb      	strh	r3, [r7, #14]
 8002f62:	460b      	mov	r3, r1
 8002f64:	81bb      	strh	r3, [r7, #12]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002f6e:	89ba      	ldrh	r2, [r7, #12]
 8002f70:	89f9      	ldrh	r1, [r7, #14]
 8002f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f76:	9302      	str	r3, [sp, #8]
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2301      	movs	r3, #1
 8002f82:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <BSP_I2C1_WriteReg+0x60>)
 8002f84:	f004 fbcc 	bl	8007720 <HAL_I2C_Mem_Write>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00c      	beq.n	8002fa8 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002f8e:	4809      	ldr	r0, [pc, #36]	; (8002fb4 <BSP_I2C1_WriteReg+0x60>)
 8002f90:	f004 fe02 	bl	8007b98 <HAL_I2C_GetError>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	d103      	bne.n	8002fa2 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002f9a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e002      	b.n	8002fa8 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002fa2:	f06f 0303 	mvn.w	r3, #3
 8002fa6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002fa8:	697b      	ldr	r3, [r7, #20]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000f38 	.word	0x20000f38

08002fb8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08a      	sub	sp, #40	; 0x28
 8002fbc:	af04      	add	r7, sp, #16
 8002fbe:	60ba      	str	r2, [r7, #8]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	81fb      	strh	r3, [r7, #14]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	81bb      	strh	r3, [r7, #12]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002fd2:	89ba      	ldrh	r2, [r7, #12]
 8002fd4:	89f9      	ldrh	r1, [r7, #14]
 8002fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	88fb      	ldrh	r3, [r7, #6]
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	480c      	ldr	r0, [pc, #48]	; (8003018 <BSP_I2C1_ReadReg+0x60>)
 8002fe8:	f004 fcae 	bl	8007948 <HAL_I2C_Mem_Read>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00c      	beq.n	800300c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002ff2:	4809      	ldr	r0, [pc, #36]	; (8003018 <BSP_I2C1_ReadReg+0x60>)
 8002ff4:	f004 fdd0 	bl	8007b98 <HAL_I2C_GetError>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d103      	bne.n	8003006 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002ffe:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	e002      	b.n	800300c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003006:	f06f 0303 	mvn.w	r3, #3
 800300a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800300c:	697b      	ldr	r3, [r7, #20]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000f38 	.word	0x20000f38

0800301c <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <MX_I2C1_Init+0x80>)
 800302c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1b      	ldr	r2, [pc, #108]	; (80030a0 <MX_I2C1_Init+0x84>)
 8003032:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f004 faa0 	bl	80075a4 <HAL_I2C_Init>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800306e:	2100      	movs	r1, #0
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f005 f843 	bl	80080fc <HAL_I2CEx_ConfigAnalogFilter>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8003080:	2100      	movs	r1, #0
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f005 f885 	bl	8008192 <HAL_I2CEx_ConfigDigitalFilter>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40005400 	.word	0x40005400
 80030a0:	10909cec 	.word	0x10909cec

080030a4 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b0ac      	sub	sp, #176	; 0xb0
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80030ac:	f107 0314 	add.w	r3, r7, #20
 80030b0:	2288      	movs	r2, #136	; 0x88
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00b f869 	bl	800e18c <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80030be:	2300      	movs	r3, #0
 80030c0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80030c2:	f107 0314 	add.w	r3, r7, #20
 80030c6:	4618      	mov	r0, r3
 80030c8:	f005 ff14 	bl	8008ef4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <I2C1_MspInit+0xb8>)
 80030ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <I2C1_MspInit+0xb8>)
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <I2C1_MspInit+0xb8>)
 80030da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80030e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030ec:	2312      	movs	r3, #18
 80030ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f8:	2303      	movs	r3, #3
 80030fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80030fe:	2304      	movs	r3, #4
 8003100:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003104:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003108:	4619      	mov	r1, r3
 800310a:	4815      	ldr	r0, [pc, #84]	; (8003160 <I2C1_MspInit+0xbc>)
 800310c:	f003 ff94 	bl	8007038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003114:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003118:	2312      	movs	r3, #18
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003124:	2303      	movs	r3, #3
 8003126:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800312a:	2304      	movs	r3, #4
 800312c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003130:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003134:	4619      	mov	r1, r3
 8003136:	480a      	ldr	r0, [pc, #40]	; (8003160 <I2C1_MspInit+0xbc>)
 8003138:	f003 ff7e 	bl	8007038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800313c:	4b07      	ldr	r3, [pc, #28]	; (800315c <I2C1_MspInit+0xb8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	4a06      	ldr	r2, [pc, #24]	; (800315c <I2C1_MspInit+0xb8>)
 8003142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003146:	6593      	str	r3, [r2, #88]	; 0x58
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <I2C1_MspInit+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003154:	bf00      	nop
 8003156:	37b0      	adds	r7, #176	; 0xb0
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	48000400 	.word	0x48000400

08003164 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800316c:	4b09      	ldr	r3, [pc, #36]	; (8003194 <I2C1_MspDeInit+0x30>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	4a08      	ldr	r2, [pc, #32]	; (8003194 <I2C1_MspDeInit+0x30>)
 8003172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003176:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800317c:	4806      	ldr	r0, [pc, #24]	; (8003198 <I2C1_MspDeInit+0x34>)
 800317e:	f004 f905 	bl	800738c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003186:	4804      	ldr	r0, [pc, #16]	; (8003198 <I2C1_MspDeInit+0x34>)
 8003188:	f004 f900 	bl	800738c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40021000 	.word	0x40021000
 8003198:	48000400 	.word	0x48000400

0800319c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return 1;
 80031a0:	2301      	movs	r3, #1
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <_kill>:

int _kill(int pid, int sig)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031b6:	f00a ffb1 	bl	800e11c <__errno>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2216      	movs	r2, #22
 80031be:	601a      	str	r2, [r3, #0]
  return -1;
 80031c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3708      	adds	r7, #8
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <_exit>:

void _exit (int status)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80031d4:	f04f 31ff 	mov.w	r1, #4294967295
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ffe7 	bl	80031ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80031de:	e7fe      	b.n	80031de <_exit+0x12>

080031e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	e00a      	b.n	8003208 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80031f2:	f3af 8000 	nop.w
 80031f6:	4601      	mov	r1, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	b2ca      	uxtb	r2, r1
 8003200:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	3301      	adds	r3, #1
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	429a      	cmp	r2, r3
 800320e:	dbf0      	blt.n	80031f2 <_read+0x12>
  }

  return len;
 8003210:	687b      	ldr	r3, [r7, #4]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	e009      	b.n	8003240 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	60ba      	str	r2, [r7, #8]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbf1      	blt.n	800322c <_write+0x12>
  }
  return len;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <_close>:

int _close(int file)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800327a:	605a      	str	r2, [r3, #4]
  return 0;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <_isatty>:

int _isatty(int file)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003292:	2301      	movs	r3, #1
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <_sbrk+0x5c>)
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <_sbrk+0x60>)
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <_sbrk+0x64>)
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <_sbrk+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ec:	f00a ff16 	bl	800e11c <__errno>
 80032f0:	4603      	mov	r3, r0
 80032f2:	220c      	movs	r2, #12
 80032f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e009      	b.n	8003310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <_sbrk+0x64>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20018000 	.word	0x20018000
 800331c:	00000400 	.word	0x00000400
 8003320:	20000f90 	.word	0x20000f90
 8003324:	20002870 	.word	0x20002870

08003328 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <SystemInit+0x20>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <SystemInit+0x20>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800334c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003384 <LoopForever+0x2>

/* Call the clock system initialization function.*/
	    bl  SystemInit
 8003350:	f7ff ffea 	bl	8003328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <LoopForever+0x6>)
  ldr r1, =_edata
 8003356:	490d      	ldr	r1, [pc, #52]	; (800338c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003358:	4a0d      	ldr	r2, [pc, #52]	; (8003390 <LoopForever+0xe>)
  movs r3, #0
 800335a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800335c:	e002      	b.n	8003364 <LoopCopyDataInit>

0800335e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003362:	3304      	adds	r3, #4

08003364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003368:	d3f9      	bcc.n	800335e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800336a:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <LoopForever+0x12>)
  ldr r4, =_ebss
 800336c:	4c0a      	ldr	r4, [pc, #40]	; (8003398 <LoopForever+0x16>)
  movs r3, #0
 800336e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003370:	e001      	b.n	8003376 <LoopFillZerobss>

08003372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003374:	3204      	adds	r2, #4

08003376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003378:	d3fb      	bcc.n	8003372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800337a:	f00a fed5 	bl	800e128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800337e:	f7fe f8b5 	bl	80014ec <main>

08003382 <LoopForever>:

LoopForever:
    b LoopForever
 8003382:	e7fe      	b.n	8003382 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003384:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800338c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003390:	08011f2c 	.word	0x08011f2c
  ldr r2, =_sbss
 8003394:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003398:	2000286c 	.word	0x2000286c

0800339c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800339c:	e7fe      	b.n	800339c <ADC1_2_IRQHandler>
	...

080033a0 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d103      	bne.n	80033b8 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e034      	b.n	8003422 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	7b1a      	ldrb	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	695a      	ldr	r2, [r3, #20]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HTS221_RegisterBusIO+0x8c>)
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <HTS221_RegisterBusIO+0x90>)
 80033fa:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d004      	beq.n	800341c <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4798      	blx	r3
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	e002      	b.n	8003422 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 800341c:	f04f 33ff 	mov.w	r3, #4294967295
 8003420:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	0800380d 	.word	0x0800380d
 8003430:	0800386f 	.word	0x0800386f

08003434 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f97b 	bl	8003742 <HTS221_Initialize>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	e004      	b.n	8003462 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e015      	b.n	80034ac <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3320      	adds	r3, #32
 800348e:	2101      	movs	r1, #1
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fadf 	bl	8003a54 <hts221_power_on_set>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
 80034a0:	e004      	b.n	80034ac <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3320      	adds	r3, #32
 80034c2:	f107 020c 	add.w	r2, r7, #12
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fb87 	bl	8003bdc <hts221_hum_adc_point_0_get>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d002      	beq.n	80034da <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295
 80034d8:	e06b      	b.n	80035b2 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f103 0220 	add.w	r2, r3, #32
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	3304      	adds	r3, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	4610      	mov	r0, r2
 80034ea:	f000 fad9 	bl	8003aa0 <hts221_hum_rh_point_0_get>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 80034f4:	f04f 33ff 	mov.w	r3, #4294967295
 80034f8:	e05b      	b.n	80035b2 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f103 0220 	add.w	r2, r3, #32
 8003500:	f107 030c 	add.w	r3, r7, #12
 8003504:	3308      	adds	r3, #8
 8003506:	4619      	mov	r1, r3
 8003508:	4610      	mov	r0, r2
 800350a:	f000 fb8b 	bl	8003c24 <hts221_hum_adc_point_1_get>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d002      	beq.n	800351a <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003514:	f04f 33ff 	mov.w	r3, #4294967295
 8003518:	e04b      	b.n	80035b2 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f103 0220 	add.w	r2, r3, #32
 8003520:	f107 030c 	add.w	r3, r7, #12
 8003524:	330c      	adds	r3, #12
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f000 fad7 	bl	8003adc <hts221_hum_rh_point_1_get>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 8003534:	f04f 33ff 	mov.w	r3, #4294967295
 8003538:	e03b      	b.n	80035b2 <HTS221_HUM_GetHumidity+0xfe>
 800353a:	2300      	movs	r3, #0
 800353c:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3320      	adds	r3, #32
 8003542:	f107 021c 	add.w	r2, r7, #28
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fa3d 	bl	80039c8 <hts221_humidity_raw_get>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 8003554:	f04f 33ff 	mov.w	r3, #4294967295
 8003558:	e02b      	b.n	80035b2 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 800355a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	eeb0 0a67 	vmov.f32	s0, s15
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f913 	bl	800379a <Linear_Interpolation>
 8003574:	eef0 7a40 	vmov.f32	s15, s0
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	edd3 7a00 	vldr	s15, [r3]
 8003584:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358c:	d503      	bpl.n	8003596 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80035bc <HTS221_HUM_GetHumidity+0x108>
 80035a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	dd02      	ble.n	80035b0 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	4a04      	ldr	r2, [pc, #16]	; (80035c0 <HTS221_HUM_GetHumidity+0x10c>)
 80035ae:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	42c80000 	.word	0x42c80000
 80035c0:	42c80000 	.word	0x42c80000

080035c4 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e015      	b.n	8003606 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10b      	bne.n	80035fc <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3320      	adds	r3, #32
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 fa32 	bl	8003a54 <hts221_power_on_set>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	e004      	b.n	8003606 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b088      	sub	sp, #32
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3320      	adds	r3, #32
 800361c:	f107 020c 	add.w	r2, r7, #12
 8003620:	4611      	mov	r1, r2
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fb22 	bl	8003c6c <hts221_temp_adc_point_0_get>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	e052      	b.n	80036da <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f103 0220 	add.w	r2, r3, #32
 800363a:	f107 030c 	add.w	r3, r7, #12
 800363e:	3304      	adds	r3, #4
 8003640:	4619      	mov	r1, r3
 8003642:	4610      	mov	r0, r2
 8003644:	f000 fa68 	bl	8003b18 <hts221_temp_deg_point_0_get>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	e042      	b.n	80036da <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f103 0220 	add.w	r2, r3, #32
 800365a:	f107 030c 	add.w	r3, r7, #12
 800365e:	3308      	adds	r3, #8
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f000 fb26 	bl	8003cb4 <hts221_temp_adc_point_1_get>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 800366e:	f04f 33ff 	mov.w	r3, #4294967295
 8003672:	e032      	b.n	80036da <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f103 0220 	add.w	r2, r3, #32
 800367a:	f107 030c 	add.w	r3, r7, #12
 800367e:	330c      	adds	r3, #12
 8003680:	4619      	mov	r1, r3
 8003682:	4610      	mov	r0, r2
 8003684:	f000 fa79 	bl	8003b7a <hts221_temp_deg_point_1_get>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 800368e:	f04f 33ff 	mov.w	r3, #4294967295
 8003692:	e022      	b.n	80036da <HTS221_TEMP_GetTemperature+0xcc>
 8003694:	2300      	movs	r3, #0
 8003696:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3320      	adds	r3, #32
 800369c:	f107 021c 	add.w	r2, r7, #28
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f9b3 	bl	8003a0e <hts221_temperature_raw_get>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295
 80036b2:	e012      	b.n	80036da <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 80036b4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80036b8:	ee07 3a90 	vmov	s15, r3
 80036bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036c0:	f107 030c 	add.w	r3, r7, #12
 80036c4:	eeb0 0a67 	vmov.f32	s0, s15
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f866 	bl	800379a <Linear_Interpolation>
 80036ce:	eef0 7a40 	vmov.f32	s15, s0
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3720      	adds	r7, #32
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b084      	sub	sp, #16
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80036ee:	edd7 7a00 	vldr	s15, [r7]
 80036f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fe:	d801      	bhi.n	8003704 <HTS221_SetOutputDataRate+0x22>
 8003700:	2301      	movs	r3, #1
 8003702:	e00b      	b.n	800371c <HTS221_SetOutputDataRate+0x3a>
 8003704:	edd7 7a00 	vldr	s15, [r7]
 8003708:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800370c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d801      	bhi.n	800371a <HTS221_SetOutputDataRate+0x38>
 8003716:	2302      	movs	r3, #2
 8003718:	e000      	b.n	800371c <HTS221_SetOutputDataRate+0x3a>
 800371a:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 800371c:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3320      	adds	r3, #32
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f902 	bl	8003930 <hts221_data_rate_set>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295
 8003736:	e000      	b.n	800373a <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	3320      	adds	r3, #32
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f000 f97f 	bl	8003a54 <hts221_power_on_set>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295
 8003760:	e017      	b.n	8003792 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3320      	adds	r3, #32
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f907 	bl	800397c <hts221_block_data_update_set>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003774:	f04f 33ff 	mov.w	r3, #4294967295
 8003778:	e00b      	b.n	8003792 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 800377a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7ff ffaf 	bl	80036e2 <HTS221_SetOutputDataRate>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 800378a:	f04f 33ff 	mov.w	r3, #4294967295
 800378e:	e000      	b.n	8003792 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80037b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037b6:	edd7 7a00 	vldr	s15, [r7]
 80037ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80037ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	ed93 6a00 	vldr	s12, [r3]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80037da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80037de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80037fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	461a      	mov	r2, r3
 8003818:	460b      	mov	r3, r1
 800381a:	72fb      	strb	r3, [r7, #11]
 800381c:	4613      	mov	r3, r2
 800381e:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10e      	bne.n	800384a <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	695c      	ldr	r4, [r3, #20]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	7b1b      	ldrb	r3, [r3, #12]
 8003834:	b298      	uxth	r0, r3
 8003836:	7afb      	ldrb	r3, [r7, #11]
 8003838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800383c:	b2db      	uxtb	r3, r3
 800383e:	b299      	uxth	r1, r3
 8003840:	893b      	ldrh	r3, [r7, #8]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	47a0      	blx	r4
 8003846:	4603      	mov	r3, r0
 8003848:	e00d      	b.n	8003866 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	695c      	ldr	r4, [r3, #20]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	7b1b      	ldrb	r3, [r3, #12]
 8003852:	b298      	uxth	r0, r3
 8003854:	7afb      	ldrb	r3, [r7, #11]
 8003856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385a:	b2db      	uxtb	r3, r3
 800385c:	b299      	uxth	r1, r3
 800385e:	893b      	ldrh	r3, [r7, #8]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	47a0      	blx	r4
 8003864:	4603      	mov	r3, r0
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}

0800386e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800386e:	b590      	push	{r4, r7, lr}
 8003870:	b087      	sub	sp, #28
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	461a      	mov	r2, r3
 800387a:	460b      	mov	r3, r1
 800387c:	72fb      	strb	r3, [r7, #11]
 800387e:	4613      	mov	r3, r2
 8003880:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10e      	bne.n	80038ac <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	691c      	ldr	r4, [r3, #16]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	7b1b      	ldrb	r3, [r3, #12]
 8003896:	b298      	uxth	r0, r3
 8003898:	7afb      	ldrb	r3, [r7, #11]
 800389a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	b299      	uxth	r1, r3
 80038a2:	893b      	ldrh	r3, [r7, #8]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	47a0      	blx	r4
 80038a8:	4603      	mov	r3, r0
 80038aa:	e00d      	b.n	80038c8 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	691c      	ldr	r4, [r3, #16]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	7b1b      	ldrb	r3, [r3, #12]
 80038b4:	b298      	uxth	r0, r3
 80038b6:	7afb      	ldrb	r3, [r7, #11]
 80038b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	b299      	uxth	r1, r3
 80038c0:	893b      	ldrh	r3, [r7, #8]
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	47a0      	blx	r4
 80038c6:	4603      	mov	r3, r0
  }
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd90      	pop	{r4, r7, pc}

080038d0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	461a      	mov	r2, r3
 80038dc:	460b      	mov	r3, r1
 80038de:	72fb      	strb	r3, [r7, #11]
 80038e0:	4613      	mov	r3, r2
 80038e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685c      	ldr	r4, [r3, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68d8      	ldr	r0, [r3, #12]
 80038ec:	893b      	ldrh	r3, [r7, #8]
 80038ee:	7af9      	ldrb	r1, [r7, #11]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	47a0      	blx	r4
 80038f4:	6178      	str	r0, [r7, #20]

  return ret;
 80038f6:	697b      	ldr	r3, [r7, #20]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd90      	pop	{r4, r7, pc}

08003900 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	460b      	mov	r3, r1
 800390e:	72fb      	strb	r3, [r7, #11]
 8003910:	4613      	mov	r3, r2
 8003912:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681c      	ldr	r4, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	68d8      	ldr	r0, [r3, #12]
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	7af9      	ldrb	r1, [r7, #11]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	47a0      	blx	r4
 8003924:	6178      	str	r0, [r7, #20]

  return ret;
 8003926:	697b      	ldr	r3, [r7, #20]
}
 8003928:	4618      	mov	r0, r3
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800393c:	f107 0208 	add.w	r2, r7, #8
 8003940:	2301      	movs	r3, #1
 8003942:	2120      	movs	r1, #32
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff ffc3 	bl	80038d0 <hts221_read_reg>
 800394a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10f      	bne.n	8003972 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	b2da      	uxtb	r2, r3
 800395a:	7a3b      	ldrb	r3, [r7, #8]
 800395c:	f362 0301 	bfi	r3, r2, #0, #2
 8003960:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003962:	f107 0208 	add.w	r2, r7, #8
 8003966:	2301      	movs	r3, #1
 8003968:	2120      	movs	r1, #32
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffc8 	bl	8003900 <hts221_write_reg>
 8003970:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003988:	f107 0208 	add.w	r2, r7, #8
 800398c:	2301      	movs	r3, #1
 800398e:	2120      	movs	r1, #32
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ff9d 	bl	80038d0 <hts221_read_reg>
 8003996:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	7a3b      	ldrb	r3, [r7, #8]
 80039a8:	f362 0382 	bfi	r3, r2, #2, #1
 80039ac:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80039ae:	f107 0208 	add.w	r2, r7, #8
 80039b2:	2301      	movs	r3, #1
 80039b4:	2120      	movs	r1, #32
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff ffa2 	bl	8003900 <hts221_write_reg>
 80039bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80039d2:	f107 0208 	add.w	r2, r7, #8
 80039d6:	2302      	movs	r3, #2
 80039d8:	2128      	movs	r1, #40	; 0x28
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ff78 	bl	80038d0 <hts221_read_reg>
 80039e0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 80039e2:	7a7b      	ldrb	r3, [r7, #9]
 80039e4:	b21a      	sxth	r2, r3
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	7a3b      	ldrb	r3, [r7, #8]
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	b21a      	sxth	r2, r3
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	801a      	strh	r2, [r3, #0]

  return ret;
 8003a04:	68fb      	ldr	r3, [r7, #12]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003a18:	f107 0208 	add.w	r2, r7, #8
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	212a      	movs	r1, #42	; 0x2a
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff55 	bl	80038d0 <hts221_read_reg>
 8003a26:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003a28:	7a7b      	ldrb	r3, [r7, #9]
 8003a2a:	b21a      	sxth	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	7a3b      	ldrb	r3, [r7, #8]
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	b21a      	sxth	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	801a      	strh	r2, [r3, #0]

  return ret;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003a60:	f107 0208 	add.w	r2, r7, #8
 8003a64:	2301      	movs	r3, #1
 8003a66:	2120      	movs	r1, #32
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff31 	bl	80038d0 <hts221_read_reg>
 8003a6e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10f      	bne.n	8003a96 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	7a3b      	ldrb	r3, [r7, #8]
 8003a80:	f362 13c7 	bfi	r3, r2, #7, #1
 8003a84:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003a86:	f107 0208 	add.w	r2, r7, #8
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ff36 	bl	8003900 <hts221_write_reg>
 8003a94:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003aaa:	f107 020b 	add.w	r2, r7, #11
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2130      	movs	r1, #48	; 0x30
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7ff ff0c 	bl	80038d0 <hts221_read_reg>
 8003ab8:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003aba:	7afb      	ldrb	r3, [r7, #11]
 8003abc:	ee07 3a90 	vmov	s15, r3
 8003ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ac4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003ae6:	f107 020b 	add.w	r2, r7, #11
 8003aea:	2301      	movs	r3, #1
 8003aec:	2131      	movs	r1, #49	; 0x31
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff feee 	bl	80038d0 <hts221_read_reg>
 8003af4:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003af6:	7afb      	ldrb	r3, [r7, #11]
 8003af8:	ee07 3a90 	vmov	s15, r3
 8003afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b00:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003b04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003b22:	f107 020f 	add.w	r2, r7, #15
 8003b26:	2301      	movs	r3, #1
 8003b28:	2132      	movs	r1, #50	; 0x32
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fed0 	bl	80038d0 <hts221_read_reg>
 8003b30:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d11b      	bne.n	8003b70 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003b38:	f107 0210 	add.w	r2, r7, #16
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	2135      	movs	r1, #53	; 0x35
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff fec5 	bl	80038d0 <hts221_read_reg>
 8003b46:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003b48:	7c3b      	ldrb	r3, [r7, #16]
 8003b4a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003b52:	7cfb      	ldrb	r3, [r7, #19]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	4413      	add	r3, r2
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b62:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003b70:	697b      	ldr	r3, [r7, #20]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003b84:	f107 020f 	add.w	r2, r7, #15
 8003b88:	2301      	movs	r3, #1
 8003b8a:	2133      	movs	r1, #51	; 0x33
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff fe9f 	bl	80038d0 <hts221_read_reg>
 8003b92:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11b      	bne.n	8003bd2 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003b9a:	f107 0210 	add.w	r2, r7, #16
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	2135      	movs	r1, #53	; 0x35
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fe94 	bl	80038d0 <hts221_read_reg>
 8003ba8:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003baa:	7c3b      	ldrb	r3, [r7, #16]
 8003bac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	4413      	add	r3, r2
 8003bbc:	ee07 3a90 	vmov	s15, r3
 8003bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bc4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003bd2:	697b      	ldr	r3, [r7, #20]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003be6:	f107 0208 	add.w	r2, r7, #8
 8003bea:	2302      	movs	r3, #2
 8003bec:	2136      	movs	r1, #54	; 0x36
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fe6e 	bl	80038d0 <hts221_read_reg>
 8003bf4:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003bf6:	7a7b      	ldrb	r3, [r7, #9]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	021b      	lsls	r3, r3, #8
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	7a3b      	ldrb	r3, [r7, #8]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	4413      	add	r3, r2
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003c08:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003c2e:	f107 0208 	add.w	r2, r7, #8
 8003c32:	2302      	movs	r3, #2
 8003c34:	213a      	movs	r1, #58	; 0x3a
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fe4a 	bl	80038d0 <hts221_read_reg>
 8003c3c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003c3e:	7a7b      	ldrb	r3, [r7, #9]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	7a3b      	ldrb	r3, [r7, #8]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003c50:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003c62:	68fb      	ldr	r3, [r7, #12]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003c76:	f107 0208 	add.w	r2, r7, #8
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	213c      	movs	r1, #60	; 0x3c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7ff fe26 	bl	80038d0 <hts221_read_reg>
 8003c84:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003c86:	7a7b      	ldrb	r3, [r7, #9]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	7a3b      	ldrb	r3, [r7, #8]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003c98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c9c:	ee07 3a90 	vmov	s15, r3
 8003ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003cbe:	f107 0208 	add.w	r2, r7, #8
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	213e      	movs	r1, #62	; 0x3e
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff fe02 	bl	80038d0 <hts221_read_reg>
 8003ccc:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003cce:	7a7b      	ldrb	r3, [r7, #9]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	7a3b      	ldrb	r3, [r7, #8]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	4413      	add	r3, r2
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003ce0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	e051      	b.n	8003dbc <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	7b1a      	ldrb	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695a      	ldr	r2, [r3, #20]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <LPS22HB_RegisterBusIO+0xcc>)
 8003d54:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a1c      	ldr	r2, [pc, #112]	; (8003dcc <LPS22HB_RegisterBusIO+0xd0>)
 8003d5a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d103      	bne.n	8003d7a <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e020      	b.n	8003dbc <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4798      	blx	r3
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e016      	b.n	8003dbc <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d112      	bne.n	8003dbc <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003da0:	2301      	movs	r3, #1
 8003da2:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	461a      	mov	r2, r3
 8003da8:	2110      	movs	r1, #16
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f877 	bl	8003e9e <LPS22HB_Write_Reg>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dba:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	08003f87 	.word	0x08003f87
 8003dcc:	0800400d 	.word	0x0800400d

08003dd0 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d108      	bne.n	8003df4 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f876 	bl	8003ed4 <LPS22HB_Initialize>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
 8003df2:	e004      	b.n	8003dfe <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	e014      	b.n	8003e46 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f103 0220 	add.w	r2, r3, #32
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 f9c6 	bl	80041bc <lps22hb_data_rate_set>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	e004      	b.n	8003e46 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
 8003e56:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003e58:	f107 030c 	add.w	r3, r7, #12
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f00a f993 	bl	800e18c <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3320      	adds	r3, #32
 8003e6a:	f107 020c 	add.w	r2, r7, #12
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f9c9 	bl	8004208 <lps22hb_pressure_raw_get>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8003e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e80:	e009      	b.n	8003e96 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f935 	bl	80040f4 <lps22hb_from_lsb_to_hpa>
 8003e8a:	eef0 7a40 	vmov.f32	s15, s0
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	70fb      	strb	r3, [r7, #3]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f103 0020 	add.w	r0, r3, #32
 8003eb4:	1cba      	adds	r2, r7, #2
 8003eb6:	78f9      	ldrb	r1, [r7, #3]
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f000 f902 	bl	80040c2 <lps22hb_write_reg>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	e000      	b.n	8003ecc <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3320      	adds	r3, #32
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f9b9 	bl	800425a <lps22hb_low_power_set>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	e044      	b.n	8003f7e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3320      	adds	r3, #32
 8003ef8:	2100      	movs	r1, #0
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f95e 	bl	80041bc <lps22hb_data_rate_set>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0a:	e038      	b.n	8003f7e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3320      	adds	r3, #32
 8003f10:	2102      	movs	r1, #2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f92c 	bl	8004170 <lps22hb_low_pass_filter_mode_set>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	e02c      	b.n	8003f7e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3320      	adds	r3, #32
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f8fa 	bl	8004124 <lps22hb_block_data_update_set>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	e020      	b.n	8003f7e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10b      	bne.n	8003f5c <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3320      	adds	r3, #32
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f9ab 	bl	80042a6 <lps22hb_auto_add_inc_set>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8003f56:	f04f 33ff 	mov.w	r3, #4294967295
 8003f5a:	e010      	b.n	8003f7e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3320      	adds	r3, #32
 8003f60:	2101      	movs	r1, #1
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f99f 	bl	80042a6 <lps22hb_auto_add_inc_set>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8003f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f72:	e004      	b.n	8003f7e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2203      	movs	r2, #3
 8003f78:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f86:	b590      	push	{r4, r7, lr}
 8003f88:	b089      	sub	sp, #36	; 0x24
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	461a      	mov	r2, r3
 8003f92:	460b      	mov	r3, r1
 8003f94:	72fb      	strb	r3, [r7, #11]
 8003f96:	4613      	mov	r3, r2
 8003f98:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d121      	bne.n	8003fee <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8003faa:	2300      	movs	r3, #0
 8003fac:	83fb      	strh	r3, [r7, #30]
 8003fae:	e018      	b.n	8003fe2 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	695c      	ldr	r4, [r3, #20]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	7b1b      	ldrb	r3, [r3, #12]
 8003fb8:	b298      	uxth	r0, r3
 8003fba:	7afb      	ldrb	r3, [r7, #11]
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	8bfb      	ldrh	r3, [r7, #30]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	b299      	uxth	r1, r3
 8003fc4:	8bfb      	ldrh	r3, [r7, #30]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	441a      	add	r2, r3
 8003fca:	2301      	movs	r3, #1
 8003fcc:	47a0      	blx	r4
 8003fce:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003fda:	e013      	b.n	8004004 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8003fdc:	8bfb      	ldrh	r3, [r7, #30]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	83fb      	strh	r3, [r7, #30]
 8003fe2:	8bfa      	ldrh	r2, [r7, #30]
 8003fe4:	893b      	ldrh	r3, [r7, #8]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3e2      	bcc.n	8003fb0 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	e00a      	b.n	8004004 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	695c      	ldr	r4, [r3, #20]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	7b1b      	ldrb	r3, [r3, #12]
 8003ff6:	b298      	uxth	r0, r3
 8003ff8:	7afb      	ldrb	r3, [r7, #11]
 8003ffa:	b299      	uxth	r1, r3
 8003ffc:	893b      	ldrh	r3, [r7, #8]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	47a0      	blx	r4
 8004002:	4603      	mov	r3, r0
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3724      	adds	r7, #36	; 0x24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd90      	pop	{r4, r7, pc}

0800400c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b089      	sub	sp, #36	; 0x24
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	461a      	mov	r2, r3
 8004018:	460b      	mov	r3, r1
 800401a:	72fb      	strb	r3, [r7, #11]
 800401c:	4613      	mov	r3, r2
 800401e:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d121      	bne.n	8004074 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8004030:	2300      	movs	r3, #0
 8004032:	83fb      	strh	r3, [r7, #30]
 8004034:	e018      	b.n	8004068 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	691c      	ldr	r4, [r3, #16]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	7b1b      	ldrb	r3, [r3, #12]
 800403e:	b298      	uxth	r0, r3
 8004040:	7afb      	ldrb	r3, [r7, #11]
 8004042:	b29a      	uxth	r2, r3
 8004044:	8bfb      	ldrh	r3, [r7, #30]
 8004046:	4413      	add	r3, r2
 8004048:	b299      	uxth	r1, r3
 800404a:	8bfb      	ldrh	r3, [r7, #30]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	441a      	add	r2, r3
 8004050:	2301      	movs	r3, #1
 8004052:	47a0      	blx	r4
 8004054:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 800405c:	f04f 33ff 	mov.w	r3, #4294967295
 8004060:	e013      	b.n	800408a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8004062:	8bfb      	ldrh	r3, [r7, #30]
 8004064:	3301      	adds	r3, #1
 8004066:	83fb      	strh	r3, [r7, #30]
 8004068:	8bfa      	ldrh	r2, [r7, #30]
 800406a:	893b      	ldrh	r3, [r7, #8]
 800406c:	429a      	cmp	r2, r3
 800406e:	d3e2      	bcc.n	8004036 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	e00a      	b.n	800408a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	691c      	ldr	r4, [r3, #16]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	7b1b      	ldrb	r3, [r3, #12]
 800407c:	b298      	uxth	r0, r3
 800407e:	7afb      	ldrb	r3, [r7, #11]
 8004080:	b299      	uxth	r1, r3
 8004082:	893b      	ldrh	r3, [r7, #8]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	47a0      	blx	r4
 8004088:	4603      	mov	r3, r0
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	3724      	adds	r7, #36	; 0x24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd90      	pop	{r4, r7, pc}

08004092 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004092:	b590      	push	{r4, r7, lr}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	461a      	mov	r2, r3
 800409e:	460b      	mov	r3, r1
 80040a0:	72fb      	strb	r3, [r7, #11]
 80040a2:	4613      	mov	r3, r2
 80040a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	685c      	ldr	r4, [r3, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68d8      	ldr	r0, [r3, #12]
 80040ae:	893b      	ldrh	r3, [r7, #8]
 80040b0:	7af9      	ldrb	r1, [r7, #11]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	47a0      	blx	r4
 80040b6:	6178      	str	r0, [r7, #20]

  return ret;
 80040b8:	697b      	ldr	r3, [r7, #20]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}

080040c2 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80040c2:	b590      	push	{r4, r7, lr}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	461a      	mov	r2, r3
 80040ce:	460b      	mov	r3, r1
 80040d0:	72fb      	strb	r3, [r7, #11]
 80040d2:	4613      	mov	r3, r2
 80040d4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681c      	ldr	r4, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68d8      	ldr	r0, [r3, #12]
 80040de:	893b      	ldrh	r3, [r7, #8]
 80040e0:	7af9      	ldrb	r1, [r7, #11]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	47a0      	blx	r4
 80040e6:	6178      	str	r0, [r7, #20]

  return ret;
 80040e8:	697b      	ldr	r3, [r7, #20]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}
	...

080040f4 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004106:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004120 <lps22hb_from_lsb_to_hpa+0x2c>
 800410a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800410e:	eef0 7a66 	vmov.f32	s15, s13
}
 8004112:	eeb0 0a67 	vmov.f32	s0, s15
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	49800000 	.word	0x49800000

08004124 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004130:	f107 0208 	add.w	r2, r7, #8
 8004134:	2301      	movs	r3, #1
 8004136:	2110      	movs	r1, #16
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ffaa 	bl	8004092 <lps22hb_read_reg>
 800413e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	b2da      	uxtb	r2, r3
 800414e:	7a3b      	ldrb	r3, [r7, #8]
 8004150:	f362 0341 	bfi	r3, r2, #1, #1
 8004154:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004156:	f107 0208 	add.w	r2, r7, #8
 800415a:	2301      	movs	r3, #1
 800415c:	2110      	movs	r1, #16
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffaf 	bl	80040c2 <lps22hb_write_reg>
 8004164:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800417c:	f107 0208 	add.w	r2, r7, #8
 8004180:	2301      	movs	r3, #1
 8004182:	2110      	movs	r1, #16
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff84 	bl	8004092 <lps22hb_read_reg>
 800418a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10f      	bne.n	80041b2 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	b2da      	uxtb	r2, r3
 800419a:	7a3b      	ldrb	r3, [r7, #8]
 800419c:	f362 0383 	bfi	r3, r2, #2, #2
 80041a0:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80041a2:	f107 0208 	add.w	r2, r7, #8
 80041a6:	2301      	movs	r3, #1
 80041a8:	2110      	movs	r1, #16
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff89 	bl	80040c2 <lps22hb_write_reg>
 80041b0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80041c8:	f107 0208 	add.w	r2, r7, #8
 80041cc:	2301      	movs	r3, #1
 80041ce:	2110      	movs	r1, #16
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff5e 	bl	8004092 <lps22hb_read_reg>
 80041d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10f      	bne.n	80041fe <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	7a3b      	ldrb	r3, [r7, #8]
 80041e8:	f362 1306 	bfi	r3, r2, #4, #3
 80041ec:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80041ee:	f107 0208 	add.w	r2, r7, #8
 80041f2:	2301      	movs	r3, #1
 80041f4:	2110      	movs	r1, #16
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff ff63 	bl	80040c2 <lps22hb_write_reg>
 80041fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80041fe:	68fb      	ldr	r3, [r7, #12]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8004212:	f107 0208 	add.w	r2, r7, #8
 8004216:	2303      	movs	r3, #3
 8004218:	2128      	movs	r1, #40	; 0x28
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff39 	bl	8004092 <lps22hb_read_reg>
 8004220:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004222:	7abb      	ldrb	r3, [r7, #10]
 8004224:	461a      	mov	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	7a7a      	ldrb	r2, [r7, #9]
 8004232:	441a      	add	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	021b      	lsls	r3, r3, #8
 800423e:	7a3a      	ldrb	r2, [r7, #8]
 8004240:	441a      	add	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	601a      	str	r2, [r3, #0]

  return ret;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b084      	sub	sp, #16
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	460b      	mov	r3, r1
 8004264:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8004266:	f107 0208 	add.w	r2, r7, #8
 800426a:	2301      	movs	r3, #1
 800426c:	211a      	movs	r1, #26
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ff0f 	bl	8004092 <lps22hb_read_reg>
 8004274:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10f      	bne.n	800429c <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	b2da      	uxtb	r2, r3
 8004284:	7a3b      	ldrb	r3, [r7, #8]
 8004286:	f362 0300 	bfi	r3, r2, #0, #1
 800428a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 800428c:	f107 0208 	add.w	r2, r7, #8
 8004290:	2301      	movs	r3, #1
 8004292:	211a      	movs	r1, #26
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff14 	bl	80040c2 <lps22hb_write_reg>
 800429a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800429c:	68fb      	ldr	r3, [r7, #12]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80042b2:	f107 0208 	add.w	r2, r7, #8
 80042b6:	2301      	movs	r3, #1
 80042b8:	2111      	movs	r1, #17
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fee9 	bl	8004092 <lps22hb_read_reg>
 80042c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10f      	bne.n	80042e8 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	7a3b      	ldrb	r3, [r7, #8]
 80042d2:	f362 1304 	bfi	r3, r2, #4, #1
 80042d6:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80042d8:	f107 0208 	add.w	r2, r7, #8
 80042dc:	2301      	movs	r3, #1
 80042de:	2111      	movs	r1, #17
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff feee 	bl	80040c2 <lps22hb_write_reg>
 80042e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042e8:	68fb      	ldr	r3, [r7, #12]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d103      	bne.n	8004310 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	e051      	b.n	80043b4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	7b1a      	ldrb	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	699a      	ldr	r2, [r3, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 8004352:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	e020      	b.n	80043b4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4798      	blx	r3
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e016      	b.n	80043b4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d112      	bne.n	80043b4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10d      	bne.n	80043b4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004398:	2301      	movs	r3, #1
 800439a:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 800439c:	7afb      	ldrb	r3, [r7, #11]
 800439e:	461a      	mov	r2, r3
 80043a0:	2123      	movs	r1, #35	; 0x23
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f97b 	bl	800469e <LSM303AGR_ACC_Write_Reg>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	e000      	b.n	80043b6 <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 80043b4:	68fb      	ldr	r3, [r7, #12]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	08004ab9 	.word	0x08004ab9
 80043c4:	08004b1b 	.word	0x08004b1b

080043c8 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3320      	adds	r3, #32
 80043d4:	2101      	movs	r1, #1
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fd1a 	bl	8004e10 <lsm303agr_xl_block_data_update_set>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	e02c      	b.n	8004442 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3320      	adds	r3, #32
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fe62 	bl	80050b8 <lsm303agr_xl_fifo_mode_set>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	e020      	b.n	8004442 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2205      	movs	r2, #5
 8004404:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3320      	adds	r3, #32
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fc7a 	bl	8004d08 <lsm303agr_xl_data_rate_set>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800441a:	f04f 33ff 	mov.w	r3, #4294967295
 800441e:	e010      	b.n	8004442 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3320      	adds	r3, #32
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fc94 	bl	8004d54 <lsm303agr_xl_full_scale_set>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	e004      	b.n	8004442 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e014      	b.n	800448a <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f103 0220 	add.w	r2, r3, #32
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fc4a 	bl	8004d08 <lsm303agr_xl_data_rate_set>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	e004      	b.n	800448a <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3320      	adds	r3, #32
 80044a4:	f107 020b 	add.w	r2, r7, #11
 80044a8:	4611      	mov	r1, r2
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fbf8 	bl	8004ca0 <lsm303agr_xl_operating_mode_get>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	e031      	b.n	8004520 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80044bc:	7afb      	ldrb	r3, [r7, #11]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d01a      	beq.n	80044f8 <LSM303AGR_ACC_GetSensitivity+0x66>
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	dc22      	bgt.n	800450c <LSM303AGR_ACC_GetSensitivity+0x7a>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <LSM303AGR_ACC_GetSensitivity+0x3e>
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d00a      	beq.n	80044e4 <LSM303AGR_ACC_GetSensitivity+0x52>
 80044ce:	e01d      	b.n	800450c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80044d0:	6839      	ldr	r1, [r7, #0]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fa1e 	bl	8004914 <LSM303AGR_ACC_GetSensitivityHR>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01a      	beq.n	8004514 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	e01d      	b.n	8004520 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80044e4:	6839      	ldr	r1, [r7, #0]
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa5a 	bl	80049a0 <LSM303AGR_ACC_GetSensitivityNM>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d012      	beq.n	8004518 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	e013      	b.n	8004520 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fa96 	bl	8004a2c <LSM303AGR_ACC_GetSensitivityLP>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	e009      	b.n	8004520 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	60fb      	str	r3, [r7, #12]
      break;
 8004512:	e004      	b.n	800451e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8004514:	bf00      	nop
 8004516:	e002      	b.n	800451e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8004518:	bf00      	nop
 800451a:	e000      	b.n	800451e <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800451c:	bf00      	nop
  }

  return ret;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3320      	adds	r3, #32
 800453e:	f107 020f 	add.w	r2, r7, #15
 8004542:	4611      	mov	r1, r2
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fbab 	bl	8004ca0 <lsm303agr_xl_operating_mode_get>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8004550:	f04f 33ff 	mov.w	r3, #4294967295
 8004554:	e04a      	b.n	80045ec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d00c      	beq.n	8004576 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 800455c:	2b02      	cmp	r3, #2
 800455e:	dc0e      	bgt.n	800457e <LSM303AGR_ACC_GetAxesRaw+0x56>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <LSM303AGR_ACC_GetAxesRaw+0x42>
 8004564:	2b01      	cmp	r3, #1
 8004566:	d003      	beq.n	8004570 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8004568:	e009      	b.n	800457e <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 800456a:	2310      	movs	r3, #16
 800456c:	83fb      	strh	r3, [r7, #30]
      break;
 800456e:	e00a      	b.n	8004586 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	83fb      	strh	r3, [r7, #30]
      break;
 8004574:	e007      	b.n	8004586 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8004576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800457a:	83fb      	strh	r3, [r7, #30]
      break;
 800457c:	e003      	b.n	8004586 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 800457e:	f04f 33ff 	mov.w	r3, #4294967295
 8004582:	61bb      	str	r3, [r7, #24]
      break;
 8004584:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d101      	bne.n	8004592 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	e02c      	b.n	80045ec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3320      	adds	r3, #32
 8004596:	f107 0210 	add.w	r2, r7, #16
 800459a:	4611      	mov	r1, r2
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fc5d 	bl	8004e5c <lsm303agr_acceleration_raw_get>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ac:	e01e      	b.n	80045ec <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 80045ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80045bc:	b21a      	sxth	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 80045c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045c6:	461a      	mov	r2, r3
 80045c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80045d0:	b21a      	sxth	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 80045d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045da:	461a      	mov	r2, r3
 80045dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045e0:	fb92 f3f3 	sdiv	r3, r2, r3
 80045e4:	b21a      	sxth	r2, r3
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	809a      	strh	r2, [r3, #4]

  return ret;
 80045ea:	69bb      	ldr	r3, [r7, #24]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff ff8c 	bl	8004528 <LSM303AGR_ACC_GetAxesRaw>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
 800461a:	e03c      	b.n	8004696 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 800461c:	f107 030c 	add.w	r3, r7, #12
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ff35 	bl	8004492 <LSM303AGR_ACC_GetSensitivity>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
 8004632:	e030      	b.n	8004696 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004634:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004640:	edd7 7a03 	vldr	s15, [r7, #12]
 8004644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004648:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800464c:	ee17 2a90 	vmov	r2, s15
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004654:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004660:	edd7 7a03 	vldr	s15, [r7, #12]
 8004664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004668:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800466c:	ee17 2a90 	vmov	r2, s15
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004674:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004680:	edd7 7a03 	vldr	s15, [r7, #12]
 8004684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800468c:	ee17 2a90 	vmov	r2, s15
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
 80046a6:	460b      	mov	r3, r1
 80046a8:	70fb      	strb	r3, [r7, #3]
 80046aa:	4613      	mov	r3, r2
 80046ac:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f103 0020 	add.w	r0, r3, #32
 80046b4:	1cba      	adds	r2, r7, #2
 80046b6:	78f9      	ldrb	r1, [r7, #3]
 80046b8:	2301      	movs	r3, #1
 80046ba:	f000 fad9 	bl	8004c70 <lsm303agr_write_reg>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 80046c4:	f04f 33ff 	mov.w	r3, #4294967295
 80046c8:	e000      	b.n	80046cc <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80046e8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	e04b      	b.n	8004788 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	7b1a      	ldrb	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	699a      	ldr	r2, [r3, #24]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 800472c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8004732:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d103      	bne.n	800474a <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e01e      	b.n	8004788 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4798      	blx	r3
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e014      	b.n	8004788 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	3320      	adds	r3, #32
 8004774:	2101      	movs	r1, #1
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fcc4 	bl	8005104 <lsm303agr_mag_i2c_interface_set>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
 8004786:	e000      	b.n	800478a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8004788:	68fb      	ldr	r3, [r7, #12]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	08004b7d 	.word	0x08004b7d
 8004798:	08004bdf 	.word	0x08004bdf

0800479c <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3320      	adds	r3, #32
 80047a8:	2101      	movs	r1, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fbed 	bl	8004f8a <lsm303agr_mag_block_data_update_set>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	e028      	b.n	800480e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3320      	adds	r3, #32
 80047c0:	2102      	movs	r1, #2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fb95 	bl	8004ef2 <lsm303agr_mag_operating_mode_set>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80047ce:	f04f 33ff 	mov.w	r3, #4294967295
 80047d2:	e01c      	b.n	800480e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3320      	adds	r3, #32
 80047d8:	2103      	movs	r1, #3
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fbaf 	bl	8004f3e <lsm303agr_mag_data_rate_set>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	e010      	b.n	800480e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3320      	adds	r3, #32
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fc3a 	bl	800506c <lsm303agr_mag_self_test_set>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 80047fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004802:	e004      	b.n	800480e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e010      	b.n	800484e <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3320      	adds	r3, #32
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fb5d 	bl	8004ef2 <lsm303agr_mag_operating_mode_set>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295
 8004842:	e004      	b.n	800484e <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004866:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3320      	adds	r3, #32
 8004884:	f107 0210 	add.w	r2, r7, #16
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fba3 	bl	8004fd6 <lsm303agr_magnetic_raw_get>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e036      	b.n	800490a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ffd7 	bl	8004856 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80048a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80048ac:	ee07 3a90 	vmov	s15, r3
 80048b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80048b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c0:	ee17 2a90 	vmov	r2, s15
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80048c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80048d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e0:	ee17 2a90 	vmov	r2, s15
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80048e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048ec:	ee07 3a90 	vmov	s15, r3
 80048f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80048f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004900:	ee17 2a90 	vmov	r2, s15
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3320      	adds	r3, #32
 8004926:	f107 020b 	add.w	r2, r7, #11
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fa37 	bl	8004da0 <lsm303agr_xl_full_scale_get>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8004938:	f04f 33ff 	mov.w	r3, #4294967295
 800493c:	e023      	b.n	8004986 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d81b      	bhi.n	800497c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	0800495d 	.word	0x0800495d
 8004950:	08004965 	.word	0x08004965
 8004954:	0800496d 	.word	0x0800496d
 8004958:	08004975 	.word	0x08004975
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8004960:	601a      	str	r2, [r3, #0]
      break;
 8004962:	e00f      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4a0b      	ldr	r2, [pc, #44]	; (8004994 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8004968:	601a      	str	r2, [r3, #0]
      break;
 800496a:	e00b      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8004970:	601a      	str	r2, [r3, #0]
      break;
 8004972:	e007      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8004978:	601a      	str	r2, [r3, #0]
      break;
 800497a:	e003      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	60fb      	str	r3, [r7, #12]
      break;
 8004982:	bf00      	nop
  }

  return ret;
 8004984:	68fb      	ldr	r3, [r7, #12]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	3f7ae148 	.word	0x3f7ae148
 8004994:	3ff9999a 	.word	0x3ff9999a
 8004998:	4079999a 	.word	0x4079999a
 800499c:	413b851f 	.word	0x413b851f

080049a0 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3320      	adds	r3, #32
 80049b2:	f107 020b 	add.w	r2, r7, #11
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f9f1 	bl	8004da0 <lsm303agr_xl_full_scale_get>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e023      	b.n	8004a12 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d81b      	bhi.n	8004a08 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f1 	.word	0x080049f1
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	08004a01 	.word	0x08004a01
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80049ec:	601a      	str	r2, [r3, #0]
      break;
 80049ee:	e00f      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80049f4:	601a      	str	r2, [r3, #0]
      break;
 80049f6:	e00b      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80049fc:	601a      	str	r2, [r3, #0]
      break;
 80049fe:	e007      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8004a04:	601a      	str	r2, [r3, #0]
      break;
 8004a06:	e003      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	60fb      	str	r3, [r7, #12]
      break;
 8004a0e:	bf00      	nop
  }

  return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	4079999a 	.word	0x4079999a
 8004a20:	40fa3d71 	.word	0x40fa3d71
 8004a24:	417a147b 	.word	0x417a147b
 8004a28:	423b999a 	.word	0x423b999a

08004a2c <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3320      	adds	r3, #32
 8004a3e:	f107 020b 	add.w	r2, r7, #11
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f9ab 	bl	8004da0 <lsm303agr_xl_full_scale_get>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295
 8004a54:	e023      	b.n	8004a9e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	2b03      	cmp	r3, #3
 8004a5a:	d81b      	bhi.n	8004a94 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a75 	.word	0x08004a75
 8004a68:	08004a7d 	.word	0x08004a7d
 8004a6c:	08004a85 	.word	0x08004a85
 8004a70:	08004a8d 	.word	0x08004a8d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4a0c      	ldr	r2, [pc, #48]	; (8004aa8 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8004a78:	601a      	str	r2, [r3, #0]
      break;
 8004a7a:	e00f      	b.n	8004a9c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	4a0b      	ldr	r2, [pc, #44]	; (8004aac <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8004a80:	601a      	str	r2, [r3, #0]
      break;
 8004a82:	e00b      	b.n	8004a9c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8004a88:	601a      	str	r2, [r3, #0]
      break;
 8004a8a:	e007      	b.n	8004a9c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4a09      	ldr	r2, [pc, #36]	; (8004ab4 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8004a90:	601a      	str	r2, [r3, #0]
      break;
 8004a92:	e003      	b.n	8004a9c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004a94:	f04f 33ff 	mov.w	r3, #4294967295
 8004a98:	60fb      	str	r3, [r7, #12]
      break;
 8004a9a:	bf00      	nop
  }

  return ret;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	417a147b 	.word	0x417a147b
 8004aac:	41fa147b 	.word	0x41fa147b
 8004ab0:	427a147b 	.word	0x427a147b
 8004ab4:	433b947b 	.word	0x433b947b

08004ab8 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	72fb      	strb	r3, [r7, #11]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10e      	bne.n	8004af6 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	695c      	ldr	r4, [r3, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	7b1b      	ldrb	r3, [r3, #12]
 8004ae0:	b298      	uxth	r0, r3
 8004ae2:	7afb      	ldrb	r3, [r7, #11]
 8004ae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	b299      	uxth	r1, r3
 8004aec:	893b      	ldrh	r3, [r7, #8]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	47a0      	blx	r4
 8004af2:	4603      	mov	r3, r0
 8004af4:	e00d      	b.n	8004b12 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	695c      	ldr	r4, [r3, #20]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	7b1b      	ldrb	r3, [r3, #12]
 8004afe:	b298      	uxth	r0, r3
 8004b00:	7afb      	ldrb	r3, [r7, #11]
 8004b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	b299      	uxth	r1, r3
 8004b0a:	893b      	ldrh	r3, [r7, #8]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	47a0      	blx	r4
 8004b10:	4603      	mov	r3, r0
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}

08004b1a <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b1a:	b590      	push	{r4, r7, lr}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	461a      	mov	r2, r3
 8004b26:	460b      	mov	r3, r1
 8004b28:	72fb      	strb	r3, [r7, #11]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10e      	bne.n	8004b58 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	691c      	ldr	r4, [r3, #16]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	7b1b      	ldrb	r3, [r3, #12]
 8004b42:	b298      	uxth	r0, r3
 8004b44:	7afb      	ldrb	r3, [r7, #11]
 8004b46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	b299      	uxth	r1, r3
 8004b4e:	893b      	ldrh	r3, [r7, #8]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	47a0      	blx	r4
 8004b54:	4603      	mov	r3, r0
 8004b56:	e00d      	b.n	8004b74 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	691c      	ldr	r4, [r3, #16]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	7b1b      	ldrb	r3, [r3, #12]
 8004b60:	b298      	uxth	r0, r3
 8004b62:	7afb      	ldrb	r3, [r7, #11]
 8004b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	b299      	uxth	r1, r3
 8004b6c:	893b      	ldrh	r3, [r7, #8]
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	47a0      	blx	r4
 8004b72:	4603      	mov	r3, r0
  }
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd90      	pop	{r4, r7, pc}

08004b7c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b7c:	b590      	push	{r4, r7, lr}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	607a      	str	r2, [r7, #4]
 8004b86:	461a      	mov	r2, r3
 8004b88:	460b      	mov	r3, r1
 8004b8a:	72fb      	strb	r3, [r7, #11]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10e      	bne.n	8004bba <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	695c      	ldr	r4, [r3, #20]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	7b1b      	ldrb	r3, [r3, #12]
 8004ba4:	b298      	uxth	r0, r3
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	b299      	uxth	r1, r3
 8004bb0:	893b      	ldrh	r3, [r7, #8]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	47a0      	blx	r4
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	e00d      	b.n	8004bd6 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	695c      	ldr	r4, [r3, #20]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	7b1b      	ldrb	r3, [r3, #12]
 8004bc2:	b298      	uxth	r0, r3
 8004bc4:	7afb      	ldrb	r3, [r7, #11]
 8004bc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	b299      	uxth	r1, r3
 8004bce:	893b      	ldrh	r3, [r7, #8]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	47a0      	blx	r4
 8004bd4:	4603      	mov	r3, r0
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd90      	pop	{r4, r7, pc}

08004bde <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004bde:	b590      	push	{r4, r7, lr}
 8004be0:	b087      	sub	sp, #28
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	461a      	mov	r2, r3
 8004bea:	460b      	mov	r3, r1
 8004bec:	72fb      	strb	r3, [r7, #11]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10e      	bne.n	8004c1c <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	691c      	ldr	r4, [r3, #16]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	7b1b      	ldrb	r3, [r3, #12]
 8004c06:	b298      	uxth	r0, r3
 8004c08:	7afb      	ldrb	r3, [r7, #11]
 8004c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	b299      	uxth	r1, r3
 8004c12:	893b      	ldrh	r3, [r7, #8]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	47a0      	blx	r4
 8004c18:	4603      	mov	r3, r0
 8004c1a:	e00d      	b.n	8004c38 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	691c      	ldr	r4, [r3, #16]
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	7b1b      	ldrb	r3, [r3, #12]
 8004c24:	b298      	uxth	r0, r3
 8004c26:	7afb      	ldrb	r3, [r7, #11]
 8004c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	b299      	uxth	r1, r3
 8004c30:	893b      	ldrh	r3, [r7, #8]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	47a0      	blx	r4
 8004c36:	4603      	mov	r3, r0
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	371c      	adds	r7, #28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd90      	pop	{r4, r7, pc}

08004c40 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	607a      	str	r2, [r7, #4]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	72fb      	strb	r3, [r7, #11]
 8004c50:	4613      	mov	r3, r2
 8004c52:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	685c      	ldr	r4, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68d8      	ldr	r0, [r3, #12]
 8004c5c:	893b      	ldrh	r3, [r7, #8]
 8004c5e:	7af9      	ldrb	r1, [r7, #11]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	47a0      	blx	r4
 8004c64:	6178      	str	r0, [r7, #20]

  return ret;
 8004c66:	697b      	ldr	r3, [r7, #20]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd90      	pop	{r4, r7, pc}

08004c70 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8004c70:	b590      	push	{r4, r7, lr}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	72fb      	strb	r3, [r7, #11]
 8004c80:	4613      	mov	r3, r2
 8004c82:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681c      	ldr	r4, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68d8      	ldr	r0, [r3, #12]
 8004c8c:	893b      	ldrh	r3, [r7, #8]
 8004c8e:	7af9      	ldrb	r1, [r7, #11]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	47a0      	blx	r4
 8004c94:	6178      	str	r0, [r7, #20]

  return ret;
 8004c96:	697b      	ldr	r3, [r7, #20]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd90      	pop	{r4, r7, pc}

08004ca0 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004caa:	f107 020c 	add.w	r2, r7, #12
 8004cae:	2301      	movs	r3, #1
 8004cb0:	2120      	movs	r1, #32
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ffc4 	bl	8004c40 <lsm303agr_read_reg>
 8004cb8:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004cc0:	f107 0210 	add.w	r2, r7, #16
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	2123      	movs	r1, #35	; 0x23
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ffb9 	bl	8004c40 <lsm303agr_read_reg>
 8004cce:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8004cd0:	7b3b      	ldrb	r3, [r7, #12]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e00c      	b.n	8004cfe <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8004ce4:	7c3b      	ldrb	r3, [r7, #16]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	e002      	b.n	8004cfe <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004d14:	f107 0208 	add.w	r2, r7, #8
 8004d18:	2301      	movs	r3, #1
 8004d1a:	2120      	movs	r1, #32
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff8f 	bl	8004c40 <lsm303agr_read_reg>
 8004d22:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10f      	bne.n	8004d4a <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	7a3b      	ldrb	r3, [r7, #8]
 8004d34:	f362 1307 	bfi	r3, r2, #4, #4
 8004d38:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004d3a:	f107 0208 	add.w	r2, r7, #8
 8004d3e:	2301      	movs	r3, #1
 8004d40:	2120      	movs	r1, #32
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff ff94 	bl	8004c70 <lsm303agr_write_reg>
 8004d48:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004d60:	f107 0208 	add.w	r2, r7, #8
 8004d64:	2301      	movs	r3, #1
 8004d66:	2123      	movs	r1, #35	; 0x23
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff69 	bl	8004c40 <lsm303agr_read_reg>
 8004d6e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10f      	bne.n	8004d96 <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 0303 	and.w	r3, r3, #3
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	7a3b      	ldrb	r3, [r7, #8]
 8004d80:	f362 1305 	bfi	r3, r2, #4, #2
 8004d84:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004d86:	f107 0208 	add.w	r2, r7, #8
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	2123      	movs	r1, #35	; 0x23
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ff6e 	bl	8004c70 <lsm303agr_write_reg>
 8004d94:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004d96:	68fb      	ldr	r3, [r7, #12]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004daa:	f107 0208 	add.w	r2, r7, #8
 8004dae:	2301      	movs	r3, #1
 8004db0:	2123      	movs	r1, #35	; 0x23
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ff44 	bl	8004c40 <lsm303agr_read_reg>
 8004db8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8004dba:	7a3b      	ldrb	r3, [r7, #8]
 8004dbc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d81a      	bhi.n	8004dfc <lsm303agr_xl_full_scale_get+0x5c>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <lsm303agr_xl_full_scale_get+0x2c>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004de5 	.word	0x08004de5
 8004dd4:	08004ded 	.word	0x08004ded
 8004dd8:	08004df5 	.word	0x08004df5
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
      break;
 8004de2:	e00f      	b.n	8004e04 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
      break;
 8004dea:	e00b      	b.n	8004e04 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2202      	movs	r2, #2
 8004df0:	701a      	strb	r2, [r3, #0]
      break;
 8004df2:	e007      	b.n	8004e04 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	2203      	movs	r2, #3
 8004df8:	701a      	strb	r2, [r3, #0]
      break;
 8004dfa:	e003      	b.n	8004e04 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
      break;
 8004e02:	bf00      	nop
  }

  return ret;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop

08004e10 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004e1c:	f107 0208 	add.w	r2, r7, #8
 8004e20:	2301      	movs	r3, #1
 8004e22:	2123      	movs	r1, #35	; 0x23
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff0b 	bl	8004c40 <lsm303agr_read_reg>
 8004e2a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	7a3b      	ldrb	r3, [r7, #8]
 8004e3c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004e40:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004e42:	f107 0208 	add.w	r2, r7, #8
 8004e46:	2301      	movs	r3, #1
 8004e48:	2123      	movs	r1, #35	; 0x23
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7ff ff10 	bl	8004c70 <lsm303agr_write_reg>
 8004e50:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004e52:	68fb      	ldr	r3, [r7, #12]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8004e66:	f107 020c 	add.w	r2, r7, #12
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	2128      	movs	r1, #40	; 0x28
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fee6 	bl	8004c40 <lsm303agr_read_reg>
 8004e74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004e76:	7b7b      	ldrb	r3, [r7, #13]
 8004e78:	b21a      	sxth	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	021b      	lsls	r3, r3, #8
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	7b3b      	ldrb	r3, [r7, #12]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	4413      	add	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	b21a      	sxth	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	b212      	sxth	r2, r2
 8004ea0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	7bbb      	ldrb	r3, [r7, #14]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	4413      	add	r3, r2
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	3302      	adds	r3, #2
 8004ebc:	b212      	sxth	r2, r2
 8004ebe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004ec0:	7c7a      	ldrb	r2, [r7, #17]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	b212      	sxth	r2, r2
 8004ec8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	7c3b      	ldrb	r3, [r7, #16]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	b212      	sxth	r2, r2
 8004ee6:	801a      	strh	r2, [r3, #0]

  return ret;
 8004ee8:	697b      	ldr	r3, [r7, #20]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004efe:	f107 0208 	add.w	r2, r7, #8
 8004f02:	2301      	movs	r3, #1
 8004f04:	2160      	movs	r1, #96	; 0x60
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe9a 	bl	8004c40 <lsm303agr_read_reg>
 8004f0c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10f      	bne.n	8004f34 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	7a3b      	ldrb	r3, [r7, #8]
 8004f1e:	f362 0301 	bfi	r3, r2, #0, #2
 8004f22:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004f24:	f107 0208 	add.w	r2, r7, #8
 8004f28:	2301      	movs	r3, #1
 8004f2a:	2160      	movs	r1, #96	; 0x60
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fe9f 	bl	8004c70 <lsm303agr_write_reg>
 8004f32:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004f34:	68fb      	ldr	r3, [r7, #12]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004f4a:	f107 0208 	add.w	r2, r7, #8
 8004f4e:	2301      	movs	r3, #1
 8004f50:	2160      	movs	r1, #96	; 0x60
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fe74 	bl	8004c40 <lsm303agr_read_reg>
 8004f58:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10f      	bne.n	8004f80 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	7a3b      	ldrb	r3, [r7, #8]
 8004f6a:	f362 0383 	bfi	r3, r2, #2, #2
 8004f6e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004f70:	f107 0208 	add.w	r2, r7, #8
 8004f74:	2301      	movs	r3, #1
 8004f76:	2160      	movs	r1, #96	; 0x60
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff fe79 	bl	8004c70 <lsm303agr_write_reg>
 8004f7e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004f80:	68fb      	ldr	r3, [r7, #12]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	460b      	mov	r3, r1
 8004f94:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004f96:	f107 0208 	add.w	r2, r7, #8
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	2162      	movs	r1, #98	; 0x62
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fe4e 	bl	8004c40 <lsm303agr_read_reg>
 8004fa4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	7a3b      	ldrb	r3, [r7, #8]
 8004fb6:	f362 1304 	bfi	r3, r2, #4, #1
 8004fba:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004fbc:	f107 0208 	add.w	r2, r7, #8
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	2162      	movs	r1, #98	; 0x62
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fe53 	bl	8004c70 <lsm303agr_write_reg>
 8004fca:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b086      	sub	sp, #24
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004fe0:	f107 020c 	add.w	r2, r7, #12
 8004fe4:	2306      	movs	r3, #6
 8004fe6:	2168      	movs	r1, #104	; 0x68
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff fe29 	bl	8004c40 <lsm303agr_read_reg>
 8004fee:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004ff0:	7b7b      	ldrb	r3, [r7, #13]
 8004ff2:	b21a      	sxth	r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	021b      	lsls	r3, r3, #8
 8005002:	b29a      	uxth	r2, r3
 8005004:	7b3b      	ldrb	r3, [r7, #12]
 8005006:	b29b      	uxth	r3, r3
 8005008:	4413      	add	r3, r2
 800500a:	b29b      	uxth	r3, r3
 800500c:	b21a      	sxth	r2, r3
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005012:	7bfa      	ldrb	r2, [r7, #15]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	3302      	adds	r3, #2
 8005018:	b212      	sxth	r2, r2
 800501a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	3302      	adds	r3, #2
 8005020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005024:	b29b      	uxth	r3, r3
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	b29a      	uxth	r2, r3
 800502a:	7bbb      	ldrb	r3, [r7, #14]
 800502c:	b29b      	uxth	r3, r3
 800502e:	4413      	add	r3, r2
 8005030:	b29a      	uxth	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	3302      	adds	r3, #2
 8005036:	b212      	sxth	r2, r2
 8005038:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800503a:	7c7a      	ldrb	r2, [r7, #17]
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	3304      	adds	r3, #4
 8005040:	b212      	sxth	r2, r2
 8005042:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	3304      	adds	r3, #4
 8005048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800504c:	b29b      	uxth	r3, r3
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	b29a      	uxth	r2, r3
 8005052:	7c3b      	ldrb	r3, [r7, #16]
 8005054:	b29b      	uxth	r3, r3
 8005056:	4413      	add	r3, r2
 8005058:	b29a      	uxth	r2, r3
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	3304      	adds	r3, #4
 800505e:	b212      	sxth	r2, r2
 8005060:	801a      	strh	r2, [r3, #0]

  return ret;
 8005062:	697b      	ldr	r3, [r7, #20]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005078:	f107 0208 	add.w	r2, r7, #8
 800507c:	2301      	movs	r3, #1
 800507e:	2162      	movs	r1, #98	; 0x62
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff fddd 	bl	8004c40 <lsm303agr_read_reg>
 8005086:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10f      	bne.n	80050ae <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	b2da      	uxtb	r2, r3
 8005096:	7a3b      	ldrb	r3, [r7, #8]
 8005098:	f362 0341 	bfi	r3, r2, #1, #1
 800509c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800509e:	f107 0208 	add.w	r2, r7, #8
 80050a2:	2301      	movs	r3, #1
 80050a4:	2162      	movs	r1, #98	; 0x62
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7ff fde2 	bl	8004c70 <lsm303agr_write_reg>
 80050ac:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80050ae:	68fb      	ldr	r3, [r7, #12]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80050c4:	f107 0208 	add.w	r2, r7, #8
 80050c8:	2301      	movs	r3, #1
 80050ca:	212e      	movs	r1, #46	; 0x2e
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7ff fdb7 	bl	8004c40 <lsm303agr_read_reg>
 80050d2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10f      	bne.n	80050fa <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 80050da:	78fb      	ldrb	r3, [r7, #3]
 80050dc:	f003 0303 	and.w	r3, r3, #3
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	7a3b      	ldrb	r3, [r7, #8]
 80050e4:	f362 1387 	bfi	r3, r2, #6, #2
 80050e8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80050ea:	f107 0208 	add.w	r2, r7, #8
 80050ee:	2301      	movs	r3, #1
 80050f0:	212e      	movs	r1, #46	; 0x2e
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7ff fdbc 	bl	8004c70 <lsm303agr_write_reg>
 80050f8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005110:	f107 0208 	add.w	r2, r7, #8
 8005114:	2301      	movs	r3, #1
 8005116:	2162      	movs	r1, #98	; 0x62
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff fd91 	bl	8004c40 <lsm303agr_read_reg>
 800511e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8005126:	78fb      	ldrb	r3, [r7, #3]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	b2da      	uxtb	r2, r3
 800512e:	7a3b      	ldrb	r3, [r7, #8]
 8005130:	f362 1345 	bfi	r3, r2, #5, #1
 8005134:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005136:	f107 0208 	add.w	r2, r7, #8
 800513a:	2301      	movs	r3, #1
 800513c:	2162      	movs	r1, #98	; 0x62
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fd96 	bl	8004c70 <lsm303agr_write_reg>
 8005144:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8005146:	68fb      	ldr	r3, [r7, #12]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8005164:	f04f 33ff 	mov.w	r3, #4294967295
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e051      	b.n	8005210 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685a      	ldr	r2, [r3, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	7b1a      	ldrb	r2, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	699a      	ldr	r2, [r3, #24]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a1d      	ldr	r2, [pc, #116]	; (800521c <LSM6DSL_RegisterBusIO+0xcc>)
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1c      	ldr	r2, [pc, #112]	; (8005220 <LSM6DSL_RegisterBusIO+0xd0>)
 80051ae:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 80051c6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e020      	b.n	8005210 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4798      	blx	r3
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 80051da:	f04f 33ff 	mov.w	r3, #4294967295
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e016      	b.n	8005210 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d112      	bne.n	8005210 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10d      	bne.n	8005210 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80051f4:	230c      	movs	r3, #12
 80051f6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80051f8:	7afb      	ldrb	r3, [r7, #11]
 80051fa:	461a      	mov	r2, r3
 80051fc:	2112      	movs	r1, #18
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f968 	bl	80054d4 <LSM6DSL_Write_Reg>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800520a:	f04f 33ff 	mov.w	r3, #4294967295
 800520e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005210:	68fb      	ldr	r3, [r7, #12]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	0800550b 	.word	0x0800550b
 8005220:	08005541 	.word	0x08005541

08005224 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	3320      	adds	r3, #32
 8005230:	2101      	movs	r1, #1
 8005232:	4618      	mov	r0, r3
 8005234:	f000 fb1b 	bl	800586e <lsm6dsl_auto_increment_set>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	e054      	b.n	80052ee <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3320      	adds	r3, #32
 8005248:	2101      	movs	r1, #1
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fa9e 	bl	800578c <lsm6dsl_block_data_update_set>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d002      	beq.n	800525c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8005256:	f04f 33ff 	mov.w	r3, #4294967295
 800525a:	e048      	b.n	80052ee <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3320      	adds	r3, #32
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fb29 	bl	80058ba <lsm6dsl_fifo_mode_set>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	e03c      	b.n	80052ee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2204      	movs	r2, #4
 8005278:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3320      	adds	r3, #32
 8005280:	2100      	movs	r1, #0
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f9cd 	bl	8005622 <lsm6dsl_xl_data_rate_set>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	e02c      	b.n	80052ee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3320      	adds	r3, #32
 8005298:	2100      	movs	r1, #0
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f99b 	bl	80055d6 <lsm6dsl_xl_full_scale_set>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	e020      	b.n	80052ee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2204      	movs	r2, #4
 80052b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	3320      	adds	r3, #32
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fa40 	bl	8005740 <lsm6dsl_gy_data_rate_set>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	e010      	b.n	80052ee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3320      	adds	r3, #32
 80052d0:	2106      	movs	r1, #6
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f9cb 	bl	800566e <lsm6dsl_gy_full_scale_set>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 80052de:	f04f 33ff 	mov.w	r3, #4294967295
 80052e2:	e004      	b.n	80052ee <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e014      	b.n	8005336 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f103 0220 	add.w	r2, r3, #32
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f000 f981 	bl	8005622 <lsm6dsl_xl_data_rate_set>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8005326:	f04f 33ff 	mov.w	r3, #4294967295
 800532a:	e004      	b.n	8005336 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b082      	sub	sp, #8
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e014      	b.n	800537e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f103 0220 	add.w	r2, r3, #32
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f000 f9ec 	bl	8005740 <lsm6dsl_gy_data_rate_set>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	e004      	b.n	800537e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3320      	adds	r3, #32
 800539a:	f107 020b 	add.w	r2, r7, #11
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f98b 	bl	80056bc <lsm6dsl_gy_full_scale_get>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	e02d      	b.n	800540e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80053b2:	7afb      	ldrb	r3, [r7, #11]
 80053b4:	2b06      	cmp	r3, #6
 80053b6:	d825      	bhi.n	8005404 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053e5 	.word	0x080053e5
 80053c4:	080053dd 	.word	0x080053dd
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	08005405 	.word	0x08005405
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	08005405 	.word	0x08005405
 80053d8:	080053fd 	.word	0x080053fd
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4a0e      	ldr	r2, [pc, #56]	; (8005418 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80053e0:	601a      	str	r2, [r3, #0]
      break;
 80053e2:	e013      	b.n	800540c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4a0d      	ldr	r2, [pc, #52]	; (800541c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80053e8:	601a      	str	r2, [r3, #0]
      break;
 80053ea:	e00f      	b.n	800540c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	4a0c      	ldr	r2, [pc, #48]	; (8005420 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80053f0:	601a      	str	r2, [r3, #0]
      break;
 80053f2:	e00b      	b.n	800540c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	4a0b      	ldr	r2, [pc, #44]	; (8005424 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80053f8:	601a      	str	r2, [r3, #0]
      break;
 80053fa:	e007      	b.n	800540c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8005400:	601a      	str	r2, [r3, #0]
      break;
 8005402:	e003      	b.n	800540c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8005404:	f04f 33ff 	mov.w	r3, #4294967295
 8005408:	60fb      	str	r3, [r7, #12]
      break;
 800540a:	bf00      	nop
  }

  return ret;
 800540c:	68fb      	ldr	r3, [r7, #12]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	408c0000 	.word	0x408c0000
 800541c:	410c0000 	.word	0x410c0000
 8005420:	418c0000 	.word	0x418c0000
 8005424:	420c0000 	.word	0x420c0000
 8005428:	428c0000 	.word	0x428c0000

0800542c <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3320      	adds	r3, #32
 800543a:	f107 0210 	add.w	r2, r7, #16
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f9c9 	bl	80057d8 <lsm6dsl_angular_rate_raw_get>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 800544c:	f04f 33ff 	mov.w	r3, #4294967295
 8005450:	e03c      	b.n	80054cc <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7ff ff95 	bl	8005388 <LSM6DSL_GYRO_GetSensitivity>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8005464:	f04f 33ff 	mov.w	r3, #4294967295
 8005468:	e030      	b.n	80054cc <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800546a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005476:	edd7 7a03 	vldr	s15, [r7, #12]
 800547a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005482:	ee17 2a90 	vmov	r2, s15
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800548a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005496:	edd7 7a03 	vldr	s15, [r7, #12]
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054a2:	ee17 2a90 	vmov	r2, s15
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80054aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054c2:	ee17 2a90 	vmov	r2, s15
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3718      	adds	r7, #24
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
 80054e0:	4613      	mov	r3, r2
 80054e2:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f103 0020 	add.w	r0, r3, #32
 80054ea:	1cba      	adds	r2, r7, #2
 80054ec:	78f9      	ldrb	r1, [r7, #3]
 80054ee:	2301      	movs	r3, #1
 80054f0:	f000 f859 	bl	80055a6 <lsm6dsl_write_reg>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 80054fa:	f04f 33ff 	mov.w	r3, #4294967295
 80054fe:	e000      	b.n	8005502 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800550a:	b590      	push	{r4, r7, lr}
 800550c:	b087      	sub	sp, #28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	461a      	mov	r2, r3
 8005516:	460b      	mov	r3, r1
 8005518:	72fb      	strb	r3, [r7, #11]
 800551a:	4613      	mov	r3, r2
 800551c:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	695c      	ldr	r4, [r3, #20]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	7b1b      	ldrb	r3, [r3, #12]
 800552a:	b298      	uxth	r0, r3
 800552c:	7afb      	ldrb	r3, [r7, #11]
 800552e:	b299      	uxth	r1, r3
 8005530:	893b      	ldrh	r3, [r7, #8]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	47a0      	blx	r4
 8005536:	4603      	mov	r3, r0
}
 8005538:	4618      	mov	r0, r3
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	bd90      	pop	{r4, r7, pc}

08005540 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	461a      	mov	r2, r3
 800554c:	460b      	mov	r3, r1
 800554e:	72fb      	strb	r3, [r7, #11]
 8005550:	4613      	mov	r3, r2
 8005552:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	691c      	ldr	r4, [r3, #16]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	7b1b      	ldrb	r3, [r3, #12]
 8005560:	b298      	uxth	r0, r3
 8005562:	7afb      	ldrb	r3, [r7, #11]
 8005564:	b299      	uxth	r1, r3
 8005566:	893b      	ldrh	r3, [r7, #8]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	47a0      	blx	r4
 800556c:	4603      	mov	r3, r0
}
 800556e:	4618      	mov	r0, r3
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	bd90      	pop	{r4, r7, pc}

08005576 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005576:	b590      	push	{r4, r7, lr}
 8005578:	b087      	sub	sp, #28
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	461a      	mov	r2, r3
 8005582:	460b      	mov	r3, r1
 8005584:	72fb      	strb	r3, [r7, #11]
 8005586:	4613      	mov	r3, r2
 8005588:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685c      	ldr	r4, [r3, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68d8      	ldr	r0, [r3, #12]
 8005592:	893b      	ldrh	r3, [r7, #8]
 8005594:	7af9      	ldrb	r1, [r7, #11]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	47a0      	blx	r4
 800559a:	6178      	str	r0, [r7, #20]

  return ret;
 800559c:	697b      	ldr	r3, [r7, #20]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd90      	pop	{r4, r7, pc}

080055a6 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80055a6:	b590      	push	{r4, r7, lr}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	461a      	mov	r2, r3
 80055b2:	460b      	mov	r3, r1
 80055b4:	72fb      	strb	r3, [r7, #11]
 80055b6:	4613      	mov	r3, r2
 80055b8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681c      	ldr	r4, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	68d8      	ldr	r0, [r3, #12]
 80055c2:	893b      	ldrh	r3, [r7, #8]
 80055c4:	7af9      	ldrb	r1, [r7, #11]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	47a0      	blx	r4
 80055ca:	6178      	str	r0, [r7, #20]

  return ret;
 80055cc:	697b      	ldr	r3, [r7, #20]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}

080055d6 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	460b      	mov	r3, r1
 80055e0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80055e2:	f107 0208 	add.w	r2, r7, #8
 80055e6:	2301      	movs	r3, #1
 80055e8:	2110      	movs	r1, #16
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ffc3 	bl	8005576 <lsm6dsl_read_reg>
 80055f0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10f      	bne.n	8005618 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	7a3b      	ldrb	r3, [r7, #8]
 8005602:	f362 0383 	bfi	r3, r2, #2, #2
 8005606:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005608:	f107 0208 	add.w	r2, r7, #8
 800560c:	2301      	movs	r3, #1
 800560e:	2110      	movs	r1, #16
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7ff ffc8 	bl	80055a6 <lsm6dsl_write_reg>
 8005616:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005618:	68fb      	ldr	r3, [r7, #12]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800562e:	f107 0208 	add.w	r2, r7, #8
 8005632:	2301      	movs	r3, #1
 8005634:	2110      	movs	r1, #16
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff ff9d 	bl	8005576 <lsm6dsl_read_reg>
 800563c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10f      	bne.n	8005664 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	f003 030f 	and.w	r3, r3, #15
 800564a:	b2da      	uxtb	r2, r3
 800564c:	7a3b      	ldrb	r3, [r7, #8]
 800564e:	f362 1307 	bfi	r3, r2, #4, #4
 8005652:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005654:	f107 0208 	add.w	r2, r7, #8
 8005658:	2301      	movs	r3, #1
 800565a:	2110      	movs	r1, #16
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ffa2 	bl	80055a6 <lsm6dsl_write_reg>
 8005662:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005664:	68fb      	ldr	r3, [r7, #12]
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
 8005676:	460b      	mov	r3, r1
 8005678:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800567a:	f107 0208 	add.w	r2, r7, #8
 800567e:	2301      	movs	r3, #1
 8005680:	2111      	movs	r1, #17
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ff77 	bl	8005576 <lsm6dsl_read_reg>
 8005688:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10f      	bne.n	80056b0 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	b2da      	uxtb	r2, r3
 8005698:	7a3b      	ldrb	r3, [r7, #8]
 800569a:	f362 0343 	bfi	r3, r2, #1, #3
 800569e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056a0:	f107 0208 	add.w	r2, r7, #8
 80056a4:	2301      	movs	r3, #1
 80056a6:	2111      	movs	r1, #17
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff ff7c 	bl	80055a6 <lsm6dsl_write_reg>
 80056ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056b0:	68fb      	ldr	r3, [r7, #12]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056c6:	f107 0208 	add.w	r2, r7, #8
 80056ca:	2301      	movs	r3, #1
 80056cc:	2111      	movs	r1, #17
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f7ff ff51 	bl	8005576 <lsm6dsl_read_reg>
 80056d4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 80056d6:	7a3b      	ldrb	r3, [r7, #8]
 80056d8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b06      	cmp	r3, #6
 80056e0:	d824      	bhi.n	800572c <lsm6dsl_gy_full_scale_get+0x70>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <lsm6dsl_gy_full_scale_get+0x2c>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	08005705 	.word	0x08005705
 80056ec:	0800570d 	.word	0x0800570d
 80056f0:	08005715 	.word	0x08005715
 80056f4:	0800572d 	.word	0x0800572d
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	0800572d 	.word	0x0800572d
 8005700:	08005725 	.word	0x08005725
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	701a      	strb	r2, [r3, #0]
      break;
 800570a:	e013      	b.n	8005734 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2201      	movs	r2, #1
 8005710:	701a      	strb	r2, [r3, #0]
      break;
 8005712:	e00f      	b.n	8005734 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	2202      	movs	r2, #2
 8005718:	701a      	strb	r2, [r3, #0]
      break;
 800571a:	e00b      	b.n	8005734 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2204      	movs	r2, #4
 8005720:	701a      	strb	r2, [r3, #0]
      break;
 8005722:	e007      	b.n	8005734 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2206      	movs	r2, #6
 8005728:	701a      	strb	r2, [r3, #0]
      break;
 800572a:	e003      	b.n	8005734 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2207      	movs	r2, #7
 8005730:	701a      	strb	r2, [r3, #0]
      break;
 8005732:	bf00      	nop
  }

  return ret;
 8005734:	68fb      	ldr	r3, [r7, #12]
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop

08005740 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800574c:	f107 0208 	add.w	r2, r7, #8
 8005750:	2301      	movs	r3, #1
 8005752:	2111      	movs	r1, #17
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ff0e 	bl	8005576 <lsm6dsl_read_reg>
 800575a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10f      	bne.n	8005782 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	b2da      	uxtb	r2, r3
 800576a:	7a3b      	ldrb	r3, [r7, #8]
 800576c:	f362 1307 	bfi	r3, r2, #4, #4
 8005770:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005772:	f107 0208 	add.w	r2, r7, #8
 8005776:	2301      	movs	r3, #1
 8005778:	2111      	movs	r1, #17
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7ff ff13 	bl	80055a6 <lsm6dsl_write_reg>
 8005780:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005782:	68fb      	ldr	r3, [r7, #12]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005798:	f107 0208 	add.w	r2, r7, #8
 800579c:	2301      	movs	r3, #1
 800579e:	2112      	movs	r1, #18
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f7ff fee8 	bl	8005576 <lsm6dsl_read_reg>
 80057a6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	7a3b      	ldrb	r3, [r7, #8]
 80057b8:	f362 1386 	bfi	r3, r2, #6, #1
 80057bc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80057be:	f107 0208 	add.w	r2, r7, #8
 80057c2:	2301      	movs	r3, #1
 80057c4:	2112      	movs	r1, #18
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff feed 	bl	80055a6 <lsm6dsl_write_reg>
 80057cc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80057ce:	68fb      	ldr	r3, [r7, #12]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80057e2:	f107 020c 	add.w	r2, r7, #12
 80057e6:	2306      	movs	r3, #6
 80057e8:	2122      	movs	r1, #34	; 0x22
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fec3 	bl	8005576 <lsm6dsl_read_reg>
 80057f0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80057f2:	7b7b      	ldrb	r3, [r7, #13]
 80057f4:	b21a      	sxth	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005800:	b29b      	uxth	r3, r3
 8005802:	021b      	lsls	r3, r3, #8
 8005804:	b29a      	uxth	r2, r3
 8005806:	7b3b      	ldrb	r3, [r7, #12]
 8005808:	b29b      	uxth	r3, r3
 800580a:	4413      	add	r3, r2
 800580c:	b29b      	uxth	r3, r3
 800580e:	b21a      	sxth	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005814:	7bfa      	ldrb	r2, [r7, #15]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	3302      	adds	r3, #2
 800581a:	b212      	sxth	r2, r2
 800581c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	3302      	adds	r3, #2
 8005822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005826:	b29b      	uxth	r3, r3
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	b29a      	uxth	r2, r3
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	b29b      	uxth	r3, r3
 8005830:	4413      	add	r3, r2
 8005832:	b29a      	uxth	r2, r3
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	3302      	adds	r3, #2
 8005838:	b212      	sxth	r2, r2
 800583a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800583c:	7c7a      	ldrb	r2, [r7, #17]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	3304      	adds	r3, #4
 8005842:	b212      	sxth	r2, r2
 8005844:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	3304      	adds	r3, #4
 800584a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800584e:	b29b      	uxth	r3, r3
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	b29a      	uxth	r2, r3
 8005854:	7c3b      	ldrb	r3, [r7, #16]
 8005856:	b29b      	uxth	r3, r3
 8005858:	4413      	add	r3, r2
 800585a:	b29a      	uxth	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	3304      	adds	r3, #4
 8005860:	b212      	sxth	r2, r2
 8005862:	801a      	strh	r2, [r3, #0]

  return ret;
 8005864:	697b      	ldr	r3, [r7, #20]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	460b      	mov	r3, r1
 8005878:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800587a:	f107 0208 	add.w	r2, r7, #8
 800587e:	2301      	movs	r3, #1
 8005880:	2112      	movs	r1, #18
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fe77 	bl	8005576 <lsm6dsl_read_reg>
 8005888:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10f      	bne.n	80058b0 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8005890:	78fb      	ldrb	r3, [r7, #3]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	b2da      	uxtb	r2, r3
 8005898:	7a3b      	ldrb	r3, [r7, #8]
 800589a:	f362 0382 	bfi	r3, r2, #2, #1
 800589e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80058a0:	f107 0208 	add.w	r2, r7, #8
 80058a4:	2301      	movs	r3, #1
 80058a6:	2112      	movs	r1, #18
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff fe7c 	bl	80055a6 <lsm6dsl_write_reg>
 80058ae:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80058b0:	68fb      	ldr	r3, [r7, #12]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b084      	sub	sp, #16
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	460b      	mov	r3, r1
 80058c4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80058c6:	f107 0208 	add.w	r2, r7, #8
 80058ca:	2301      	movs	r3, #1
 80058cc:	210a      	movs	r1, #10
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7ff fe51 	bl	8005576 <lsm6dsl_read_reg>
 80058d4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10f      	bne.n	80058fc <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80058dc:	78fb      	ldrb	r3, [r7, #3]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	7a3b      	ldrb	r3, [r7, #8]
 80058e6:	f362 0302 	bfi	r3, r2, #0, #3
 80058ea:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80058ec:	f107 0208 	add.w	r2, r7, #8
 80058f0:	2301      	movs	r3, #1
 80058f2:	210a      	movs	r1, #10
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff fe56 	bl	80055a6 <lsm6dsl_write_reg>
 80058fa:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80058fc:	68fb      	ldr	r3, [r7, #12]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
	...

08005908 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <HAL_Init+0x3c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a0b      	ldr	r2, [pc, #44]	; (8005944 <HAL_Init+0x3c>)
 8005918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800591c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800591e:	2003      	movs	r0, #3
 8005920:	f001 faca 	bl	8006eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005924:	200f      	movs	r0, #15
 8005926:	f000 f80f 	bl	8005948 <HAL_InitTick>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	71fb      	strb	r3, [r7, #7]
 8005934:	e001      	b.n	800593a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005936:	f7fc fced 	bl	8002314 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800593a:	79fb      	ldrb	r3, [r7, #7]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40022000 	.word	0x40022000

08005948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005954:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <HAL_InitTick+0x6c>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d023      	beq.n	80059a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <HAL_InitTick+0x70>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_InitTick+0x6c>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800596a:	fbb3 f3f1 	udiv	r3, r3, r1
 800596e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005972:	4618      	mov	r0, r3
 8005974:	f001 fad5 	bl	8006f22 <HAL_SYSTICK_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10f      	bne.n	800599e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d809      	bhi.n	8005998 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005984:	2200      	movs	r2, #0
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	f001 fa9f 	bl	8006ece <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <HAL_InitTick+0x74>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	e007      	b.n	80059a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	73fb      	strb	r3, [r7, #15]
 800599c:	e004      	b.n	80059a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	73fb      	strb	r3, [r7, #15]
 80059a2:	e001      	b.n	80059a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000008 	.word	0x20000008
 80059b8:	20000000 	.word	0x20000000
 80059bc:	20000004 	.word	0x20000004

080059c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <HAL_IncTick+0x20>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_IncTick+0x24>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4413      	add	r3, r2
 80059d0:	4a04      	ldr	r2, [pc, #16]	; (80059e4 <HAL_IncTick+0x24>)
 80059d2:	6013      	str	r3, [r2, #0]
}
 80059d4:	bf00      	nop
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000008 	.word	0x20000008
 80059e4:	20000f94 	.word	0x20000f94

080059e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  return uwTick;
 80059ec:	4b03      	ldr	r3, [pc, #12]	; (80059fc <HAL_GetTick+0x14>)
 80059ee:	681b      	ldr	r3, [r3, #0]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000f94 	.word	0x20000f94

08005a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a08:	f7ff ffee 	bl	80059e8 <HAL_GetTick>
 8005a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d005      	beq.n	8005a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005a1a:	4b0a      	ldr	r3, [pc, #40]	; (8005a44 <HAL_Delay+0x44>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a26:	bf00      	nop
 8005a28:	f7ff ffde 	bl	80059e8 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d8f7      	bhi.n	8005a28 <HAL_Delay+0x28>
  {
  }
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000008 	.word	0x20000008

08005a48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	609a      	str	r2, [r3, #8]
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b083      	sub	sp, #12
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	431a      	orrs	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	609a      	str	r2, [r3, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3360      	adds	r3, #96	; 0x60
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	4b08      	ldr	r3, [pc, #32]	; (8005af4 <LL_ADC_SetOffset+0x44>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	03fff000 	.word	0x03fff000

08005af8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3360      	adds	r3, #96	; 0x60
 8005b06:	461a      	mov	r2, r3
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3714      	adds	r7, #20
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3360      	adds	r3, #96	; 0x60
 8005b34:	461a      	mov	r2, r3
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005b4e:	bf00      	nop
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b087      	sub	sp, #28
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	60f8      	str	r0, [r7, #12]
 8005b62:	60b9      	str	r1, [r7, #8]
 8005b64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	3330      	adds	r3, #48	; 0x30
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	4413      	add	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	211f      	movs	r1, #31
 8005b86:	fa01 f303 	lsl.w	r3, r1, r3
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	401a      	ands	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0e9b      	lsrs	r3, r3, #26
 8005b92:	f003 011f 	and.w	r1, r3, #31
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f003 031f 	and.w	r3, r3, #31
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ba6:	bf00      	nop
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	0e5b      	lsrs	r3, r3, #25
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	4413      	add	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0d1b      	lsrs	r3, r3, #20
 8005bda:	f003 031f 	and.w	r3, r3, #31
 8005bde:	2107      	movs	r1, #7
 8005be0:	fa01 f303 	lsl.w	r3, r1, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	401a      	ands	r2, r3
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	0d1b      	lsrs	r3, r3, #20
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	6879      	ldr	r1, [r7, #4]
 8005bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c20:	43db      	mvns	r3, r3
 8005c22:	401a      	ands	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f003 0318 	and.w	r3, r3, #24
 8005c2a:	4908      	ldr	r1, [pc, #32]	; (8005c4c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005c2c:	40d9      	lsrs	r1, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	400b      	ands	r3, r1
 8005c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c36:	431a      	orrs	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	0007ffff 	.word	0x0007ffff

08005c50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	6093      	str	r3, [r2, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c88:	d101      	bne.n	8005c8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005cb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cd8:	d101      	bne.n	8005cde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e000      	b.n	8005ce0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d101      	bne.n	8005d04 <LL_ADC_IsEnabled+0x18>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <LL_ADC_IsEnabled+0x1a>
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d101      	bne.n	8005d2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d101      	bne.n	8005d50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b089      	sub	sp, #36	; 0x24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e136      	b.n	8005fe8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fc faeb 	bl	8002364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff ff67 	bl	8005c74 <LL_ADC_IsDeepPowerDownEnabled>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d004      	beq.n	8005db6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7ff ff4d 	bl	8005c50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff ff82 	bl	8005cc4 <LL_ADC_IsInternalRegulatorEnabled>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d115      	bne.n	8005df2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ff66 	bl	8005c9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dd0:	4b87      	ldr	r3, [pc, #540]	; (8005ff0 <HAL_ADC_Init+0x290>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	099b      	lsrs	r3, r3, #6
 8005dd6:	4a87      	ldr	r2, [pc, #540]	; (8005ff4 <HAL_ADC_Init+0x294>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	099b      	lsrs	r3, r3, #6
 8005dde:	3301      	adds	r3, #1
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005de4:	e002      	b.n	8005dec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f9      	bne.n	8005de6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff ff64 	bl	8005cc4 <LL_ADC_IsInternalRegulatorEnabled>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10d      	bne.n	8005e1e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	f043 0210 	orr.w	r2, r3, #16
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e12:	f043 0201 	orr.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff ff75 	bl	8005d12 <LL_ADC_REG_IsConversionOngoing>
 8005e28:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2e:	f003 0310 	and.w	r3, r3, #16
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f040 80cf 	bne.w	8005fd6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	f040 80cb 	bne.w	8005fd6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005e48:	f043 0202 	orr.w	r2, r3, #2
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff ff49 	bl	8005cec <LL_ADC_IsEnabled>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d115      	bne.n	8005e8c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e60:	4865      	ldr	r0, [pc, #404]	; (8005ff8 <HAL_ADC_Init+0x298>)
 8005e62:	f7ff ff43 	bl	8005cec <LL_ADC_IsEnabled>
 8005e66:	4604      	mov	r4, r0
 8005e68:	4864      	ldr	r0, [pc, #400]	; (8005ffc <HAL_ADC_Init+0x29c>)
 8005e6a:	f7ff ff3f 	bl	8005cec <LL_ADC_IsEnabled>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	431c      	orrs	r4, r3
 8005e72:	4863      	ldr	r0, [pc, #396]	; (8006000 <HAL_ADC_Init+0x2a0>)
 8005e74:	f7ff ff3a 	bl	8005cec <LL_ADC_IsEnabled>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4323      	orrs	r3, r4
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d105      	bne.n	8005e8c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4619      	mov	r1, r3
 8005e86:	485f      	ldr	r0, [pc, #380]	; (8006004 <HAL_ADC_Init+0x2a4>)
 8005e88:	f7ff fdde 	bl	8005a48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	7e5b      	ldrb	r3, [r3, #25]
 8005e90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005e9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005ea2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eaa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d106      	bne.n	8005ec8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	045b      	lsls	r3, r3, #17
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	4b47      	ldr	r3, [pc, #284]	; (8006008 <HAL_ADC_Init+0x2a8>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6812      	ldr	r2, [r2, #0]
 8005ef2:	69b9      	ldr	r1, [r7, #24]
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f7ff ff08 	bl	8005d12 <LL_ADC_REG_IsConversionOngoing>
 8005f02:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7ff ff15 	bl	8005d38 <LL_ADC_INJ_IsConversionOngoing>
 8005f0e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d13d      	bne.n	8005f92 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d13a      	bne.n	8005f92 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005f20:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f28:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f38:	f023 0302 	bic.w	r3, r3, #2
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	69b9      	ldr	r1, [r7, #24]
 8005f42:	430b      	orrs	r3, r1
 8005f44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d118      	bne.n	8005f82 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f5a:	f023 0304 	bic.w	r3, r3, #4
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f66:	4311      	orrs	r1, r2
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005f72:	430a      	orrs	r2, r1
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	611a      	str	r2, [r3, #16]
 8005f80:	e007      	b.n	8005f92 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0201 	bic.w	r2, r2, #1
 8005f90:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d10c      	bne.n	8005fb4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	f023 010f 	bic.w	r1, r3, #15
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	1e5a      	subs	r2, r3, #1
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8005fb2:	e007      	b.n	8005fc4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 020f 	bic.w	r2, r2, #15
 8005fc2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	f023 0303 	bic.w	r3, r3, #3
 8005fcc:	f043 0201 	orr.w	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54
 8005fd4:	e007      	b.n	8005fe6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	f043 0210 	orr.w	r2, r3, #16
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005fe6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3724      	adds	r7, #36	; 0x24
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	20000000 	.word	0x20000000
 8005ff4:	053e2d63 	.word	0x053e2d63
 8005ff8:	50040000 	.word	0x50040000
 8005ffc:	50040100 	.word	0x50040100
 8006000:	50040200 	.word	0x50040200
 8006004:	50040300 	.word	0x50040300
 8006008:	fff0c007 	.word	0xfff0c007

0800600c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b0b6      	sub	sp, #216	; 0xd8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800601c:	2300      	movs	r3, #0
 800601e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_ADC_ConfigChannel+0x22>
 800602a:	2302      	movs	r3, #2
 800602c:	e3c7      	b.n	80067be <HAL_ADC_ConfigChannel+0x7b2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f7ff fe69 	bl	8005d12 <LL_ADC_REG_IsConversionOngoing>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 83a8 	bne.w	8006798 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b05      	cmp	r3, #5
 800604e:	d824      	bhi.n	800609a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	3b02      	subs	r3, #2
 8006056:	2b03      	cmp	r3, #3
 8006058:	d81b      	bhi.n	8006092 <HAL_ADC_ConfigChannel+0x86>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <HAL_ADC_ConfigChannel+0x54>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006071 	.word	0x08006071
 8006064:	08006079 	.word	0x08006079
 8006068:	08006081 	.word	0x08006081
 800606c:	08006089 	.word	0x08006089
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	220c      	movs	r2, #12
 8006074:	605a      	str	r2, [r3, #4]
          break;
 8006076:	e011      	b.n	800609c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2212      	movs	r2, #18
 800607c:	605a      	str	r2, [r3, #4]
          break;
 800607e:	e00d      	b.n	800609c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2218      	movs	r2, #24
 8006084:	605a      	str	r2, [r3, #4]
          break;
 8006086:	e009      	b.n	800609c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800608e:	605a      	str	r2, [r3, #4]
          break;
 8006090:	e004      	b.n	800609c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2206      	movs	r2, #6
 8006096:	605a      	str	r2, [r3, #4]
          break;
 8006098:	e000      	b.n	800609c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800609a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6859      	ldr	r1, [r3, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	f7ff fd56 	bl	8005b5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7ff fe2d 	bl	8005d12 <LL_ADC_REG_IsConversionOngoing>
 80060b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fe39 	bl	8005d38 <LL_ADC_INJ_IsConversionOngoing>
 80060c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80060ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 81a6 	bne.w	8006420 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80060d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 81a1 	bne.w	8006420 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	6819      	ldr	r1, [r3, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	461a      	mov	r2, r3
 80060ec:	f7ff fd61 	bl	8005bb2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	695a      	ldr	r2, [r3, #20]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	08db      	lsrs	r3, r3, #3
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	005b      	lsls	r3, r3, #1
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b04      	cmp	r3, #4
 8006110:	d00a      	beq.n	8006128 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6919      	ldr	r1, [r3, #16]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006122:	f7ff fcc5 	bl	8005ab0 <LL_ADC_SetOffset>
 8006126:	e17b      	b.n	8006420 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fce2 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006134:	4603      	mov	r3, r0
 8006136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x148>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fcd7 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 800614a:	4603      	mov	r3, r0
 800614c:	0e9b      	lsrs	r3, r3, #26
 800614e:	f003 021f 	and.w	r2, r3, #31
 8006152:	e01e      	b.n	8006192 <HAL_ADC_ConfigChannel+0x186>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2100      	movs	r1, #0
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fccc 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006160:	4603      	mov	r3, r0
 8006162:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006166:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800616a:	fa93 f3a3 	rbit	r3, r3
 800616e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006176:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800617a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8006182:	2320      	movs	r3, #32
 8006184:	e004      	b.n	8006190 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8006186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800618a:	fab3 f383 	clz	r3, r3
 800618e:	b2db      	uxtb	r3, r3
 8006190:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800619a:	2b00      	cmp	r3, #0
 800619c:	d105      	bne.n	80061aa <HAL_ADC_ConfigChannel+0x19e>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	0e9b      	lsrs	r3, r3, #26
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	e018      	b.n	80061dc <HAL_ADC_ConfigChannel+0x1d0>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061b6:	fa93 f3a3 	rbit	r3, r3
 80061ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80061be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80061c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80061ce:	2320      	movs	r3, #32
 80061d0:	e004      	b.n	80061dc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80061d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061d6:	fab3 f383 	clz	r3, r3
 80061da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80061dc:	429a      	cmp	r2, r3
 80061de:	d106      	bne.n	80061ee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2200      	movs	r2, #0
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fc9b 	bl	8005b24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2101      	movs	r1, #1
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fc7f 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <HAL_ADC_ConfigChannel+0x20e>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2101      	movs	r1, #1
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff fc74 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006210:	4603      	mov	r3, r0
 8006212:	0e9b      	lsrs	r3, r3, #26
 8006214:	f003 021f 	and.w	r2, r3, #31
 8006218:	e01e      	b.n	8006258 <HAL_ADC_ConfigChannel+0x24c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fc69 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006226:	4603      	mov	r3, r0
 8006228:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006230:	fa93 f3a3 	rbit	r3, r3
 8006234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006238:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800623c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8006248:	2320      	movs	r3, #32
 800624a:	e004      	b.n	8006256 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800624c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006250:	fab3 f383 	clz	r3, r3
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006260:	2b00      	cmp	r3, #0
 8006262:	d105      	bne.n	8006270 <HAL_ADC_ConfigChannel+0x264>
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	0e9b      	lsrs	r3, r3, #26
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	e018      	b.n	80062a2 <HAL_ADC_ConfigChannel+0x296>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800627c:	fa93 f3a3 	rbit	r3, r3
 8006280:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006284:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800628c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006294:	2320      	movs	r3, #32
 8006296:	e004      	b.n	80062a2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006298:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800629c:	fab3 f383 	clz	r3, r3
 80062a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d106      	bne.n	80062b4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2200      	movs	r2, #0
 80062ac:	2101      	movs	r1, #1
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff fc38 	bl	8005b24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2102      	movs	r1, #2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fc1c 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80062c0:	4603      	mov	r3, r0
 80062c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <HAL_ADC_ConfigChannel+0x2d4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2102      	movs	r1, #2
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fc11 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80062d6:	4603      	mov	r3, r0
 80062d8:	0e9b      	lsrs	r3, r3, #26
 80062da:	f003 021f 	and.w	r2, r3, #31
 80062de:	e01e      	b.n	800631e <HAL_ADC_ConfigChannel+0x312>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff fc06 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062f6:	fa93 f3a3 	rbit	r3, r3
 80062fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80062fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006306:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800630e:	2320      	movs	r3, #32
 8006310:	e004      	b.n	800631c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006312:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006316:	fab3 f383 	clz	r3, r3
 800631a:	b2db      	uxtb	r3, r3
 800631c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006326:	2b00      	cmp	r3, #0
 8006328:	d105      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x32a>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	0e9b      	lsrs	r3, r3, #26
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	e016      	b.n	8006364 <HAL_ADC_ConfigChannel+0x358>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800633e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006342:	fa93 f3a3 	rbit	r3, r3
 8006346:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800634a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800634e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8006356:	2320      	movs	r3, #32
 8006358:	e004      	b.n	8006364 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800635a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800635e:	fab3 f383 	clz	r3, r3
 8006362:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006364:	429a      	cmp	r2, r3
 8006366:	d106      	bne.n	8006376 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	2200      	movs	r2, #0
 800636e:	2102      	movs	r1, #2
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff fbd7 	bl	8005b24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2103      	movs	r1, #3
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fbbb 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006382:	4603      	mov	r3, r0
 8006384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10a      	bne.n	80063a2 <HAL_ADC_ConfigChannel+0x396>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2103      	movs	r1, #3
 8006392:	4618      	mov	r0, r3
 8006394:	f7ff fbb0 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 8006398:	4603      	mov	r3, r0
 800639a:	0e9b      	lsrs	r3, r3, #26
 800639c:	f003 021f 	and.w	r2, r3, #31
 80063a0:	e017      	b.n	80063d2 <HAL_ADC_ConfigChannel+0x3c6>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2103      	movs	r1, #3
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fba5 	bl	8005af8 <LL_ADC_GetOffsetChannel>
 80063ae:	4603      	mov	r3, r0
 80063b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b4:	fa93 f3a3 	rbit	r3, r3
 80063b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80063ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80063be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80063c4:	2320      	movs	r3, #32
 80063c6:	e003      	b.n	80063d0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80063c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ca:	fab3 f383 	clz	r3, r3
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <HAL_ADC_ConfigChannel+0x3de>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	0e9b      	lsrs	r3, r3, #26
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	e011      	b.n	800640e <HAL_ADC_ConfigChannel+0x402>
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063f2:	fa93 f3a3 	rbit	r3, r3
 80063f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80063f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80063fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006402:	2320      	movs	r3, #32
 8006404:	e003      	b.n	800640e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006408:	fab3 f383 	clz	r3, r3
 800640c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800640e:	429a      	cmp	r2, r3
 8006410:	d106      	bne.n	8006420 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2200      	movs	r2, #0
 8006418:	2103      	movs	r1, #3
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff fb82 	bl	8005b24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f7ff fc61 	bl	8005cec <LL_ADC_IsEnabled>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 813f 	bne.w	80066b0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6819      	ldr	r1, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	461a      	mov	r2, r3
 8006440:	f7ff fbe2 	bl	8005c08 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4a8e      	ldr	r2, [pc, #568]	; (8006684 <HAL_ADC_ConfigChannel+0x678>)
 800644a:	4293      	cmp	r3, r2
 800644c:	f040 8130 	bne.w	80066b0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <HAL_ADC_ConfigChannel+0x46c>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	0e9b      	lsrs	r3, r3, #26
 8006466:	3301      	adds	r3, #1
 8006468:	f003 031f 	and.w	r3, r3, #31
 800646c:	2b09      	cmp	r3, #9
 800646e:	bf94      	ite	ls
 8006470:	2301      	movls	r3, #1
 8006472:	2300      	movhi	r3, #0
 8006474:	b2db      	uxtb	r3, r3
 8006476:	e019      	b.n	80064ac <HAL_ADC_ConfigChannel+0x4a0>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006480:	fa93 f3a3 	rbit	r3, r3
 8006484:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006488:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800648a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006490:	2320      	movs	r3, #32
 8006492:	e003      	b.n	800649c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006496:	fab3 f383 	clz	r3, r3
 800649a:	b2db      	uxtb	r3, r3
 800649c:	3301      	adds	r3, #1
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	bf94      	ite	ls
 80064a6:	2301      	movls	r3, #1
 80064a8:	2300      	movhi	r3, #0
 80064aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d079      	beq.n	80065a4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d107      	bne.n	80064cc <HAL_ADC_ConfigChannel+0x4c0>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	0e9b      	lsrs	r3, r3, #26
 80064c2:	3301      	adds	r3, #1
 80064c4:	069b      	lsls	r3, r3, #26
 80064c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064ca:	e015      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x4ec>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064d4:	fa93 f3a3 	rbit	r3, r3
 80064d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80064da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80064de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80064e4:	2320      	movs	r3, #32
 80064e6:	e003      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80064e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ea:	fab3 f383 	clz	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	3301      	adds	r3, #1
 80064f2:	069b      	lsls	r3, r3, #26
 80064f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006500:	2b00      	cmp	r3, #0
 8006502:	d109      	bne.n	8006518 <HAL_ADC_ConfigChannel+0x50c>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	0e9b      	lsrs	r3, r3, #26
 800650a:	3301      	adds	r3, #1
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	2101      	movs	r1, #1
 8006512:	fa01 f303 	lsl.w	r3, r1, r3
 8006516:	e017      	b.n	8006548 <HAL_ADC_ConfigChannel+0x53c>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800651e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006520:	fa93 f3a3 	rbit	r3, r3
 8006524:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006528:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800652a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006530:	2320      	movs	r3, #32
 8006532:	e003      	b.n	800653c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006536:	fab3 f383 	clz	r3, r3
 800653a:	b2db      	uxtb	r3, r3
 800653c:	3301      	adds	r3, #1
 800653e:	f003 031f 	and.w	r3, r3, #31
 8006542:	2101      	movs	r1, #1
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	ea42 0103 	orr.w	r1, r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10a      	bne.n	800656e <HAL_ADC_ConfigChannel+0x562>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	0e9b      	lsrs	r3, r3, #26
 800655e:	3301      	adds	r3, #1
 8006560:	f003 021f 	and.w	r2, r3, #31
 8006564:	4613      	mov	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4413      	add	r3, r2
 800656a:	051b      	lsls	r3, r3, #20
 800656c:	e018      	b.n	80065a0 <HAL_ADC_ConfigChannel+0x594>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	fa93 f3a3 	rbit	r3, r3
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006586:	2320      	movs	r3, #32
 8006588:	e003      	b.n	8006592 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800658a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658c:	fab3 f383 	clz	r3, r3
 8006590:	b2db      	uxtb	r3, r3
 8006592:	3301      	adds	r3, #1
 8006594:	f003 021f 	and.w	r2, r3, #31
 8006598:	4613      	mov	r3, r2
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065a0:	430b      	orrs	r3, r1
 80065a2:	e080      	b.n	80066a6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d107      	bne.n	80065c0 <HAL_ADC_ConfigChannel+0x5b4>
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	0e9b      	lsrs	r3, r3, #26
 80065b6:	3301      	adds	r3, #1
 80065b8:	069b      	lsls	r3, r3, #26
 80065ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065be:	e015      	b.n	80065ec <HAL_ADC_ConfigChannel+0x5e0>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c8:	fa93 f3a3 	rbit	r3, r3
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80065d8:	2320      	movs	r3, #32
 80065da:	e003      	b.n	80065e4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	fab3 f383 	clz	r3, r3
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	3301      	adds	r3, #1
 80065e6:	069b      	lsls	r3, r3, #26
 80065e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <HAL_ADC_ConfigChannel+0x600>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	0e9b      	lsrs	r3, r3, #26
 80065fe:	3301      	adds	r3, #1
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2101      	movs	r1, #1
 8006606:	fa01 f303 	lsl.w	r3, r1, r3
 800660a:	e017      	b.n	800663c <HAL_ADC_ConfigChannel+0x630>
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	fa93 f3a3 	rbit	r3, r3
 8006618:	61fb      	str	r3, [r7, #28]
  return result;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006624:	2320      	movs	r3, #32
 8006626:	e003      	b.n	8006630 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	fab3 f383 	clz	r3, r3
 800662e:	b2db      	uxtb	r3, r3
 8006630:	3301      	adds	r3, #1
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2101      	movs	r1, #1
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	ea42 0103 	orr.w	r1, r2, r3
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10d      	bne.n	8006668 <HAL_ADC_ConfigChannel+0x65c>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	0e9b      	lsrs	r3, r3, #26
 8006652:	3301      	adds	r3, #1
 8006654:	f003 021f 	and.w	r2, r3, #31
 8006658:	4613      	mov	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4413      	add	r3, r2
 800665e:	3b1e      	subs	r3, #30
 8006660:	051b      	lsls	r3, r3, #20
 8006662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006666:	e01d      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x698>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	fa93 f3a3 	rbit	r3, r3
 8006674:	613b      	str	r3, [r7, #16]
  return result;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d103      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006680:	2320      	movs	r3, #32
 8006682:	e005      	b.n	8006690 <HAL_ADC_ConfigChannel+0x684>
 8006684:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	fab3 f383 	clz	r3, r3
 800668e:	b2db      	uxtb	r3, r3
 8006690:	3301      	adds	r3, #1
 8006692:	f003 021f 	and.w	r2, r3, #31
 8006696:	4613      	mov	r3, r2
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	4413      	add	r3, r2
 800669c:	3b1e      	subs	r3, #30
 800669e:	051b      	lsls	r3, r3, #20
 80066a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066a4:	430b      	orrs	r3, r1
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	6892      	ldr	r2, [r2, #8]
 80066aa:	4619      	mov	r1, r3
 80066ac:	f7ff fa81 	bl	8005bb2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b44      	ldr	r3, [pc, #272]	; (80067c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d07a      	beq.n	80067b2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066bc:	4843      	ldr	r0, [pc, #268]	; (80067cc <HAL_ADC_ConfigChannel+0x7c0>)
 80066be:	f7ff f9e9 	bl	8005a94 <LL_ADC_GetCommonPathInternalCh>
 80066c2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a41      	ldr	r2, [pc, #260]	; (80067d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d12c      	bne.n	800672a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80066d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d126      	bne.n	800672a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a3c      	ldr	r2, [pc, #240]	; (80067d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d004      	beq.n	80066f0 <HAL_ADC_ConfigChannel+0x6e4>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a3b      	ldr	r2, [pc, #236]	; (80067d8 <HAL_ADC_ConfigChannel+0x7cc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d15d      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066f8:	4619      	mov	r1, r3
 80066fa:	4834      	ldr	r0, [pc, #208]	; (80067cc <HAL_ADC_ConfigChannel+0x7c0>)
 80066fc:	f7ff f9b7 	bl	8005a6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006700:	4b36      	ldr	r3, [pc, #216]	; (80067dc <HAL_ADC_ConfigChannel+0x7d0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	099b      	lsrs	r3, r3, #6
 8006706:	4a36      	ldr	r2, [pc, #216]	; (80067e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	099b      	lsrs	r3, r3, #6
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	4613      	mov	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800671a:	e002      	b.n	8006722 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3b01      	subs	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f9      	bne.n	800671c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006728:	e040      	b.n	80067ac <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2d      	ldr	r2, [pc, #180]	; (80067e4 <HAL_ADC_ConfigChannel+0x7d8>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d118      	bne.n	8006766 <HAL_ADC_ConfigChannel+0x75a>
 8006734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d112      	bne.n	8006766 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <HAL_ADC_ConfigChannel+0x7c8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d004      	beq.n	8006754 <HAL_ADC_ConfigChannel+0x748>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a22      	ldr	r2, [pc, #136]	; (80067d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d12d      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800675c:	4619      	mov	r1, r3
 800675e:	481b      	ldr	r0, [pc, #108]	; (80067cc <HAL_ADC_ConfigChannel+0x7c0>)
 8006760:	f7ff f985 	bl	8005a6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006764:	e024      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1f      	ldr	r2, [pc, #124]	; (80067e8 <HAL_ADC_ConfigChannel+0x7dc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d120      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006770:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d11a      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <HAL_ADC_ConfigChannel+0x7c8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d115      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800678a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800678e:	4619      	mov	r1, r3
 8006790:	480e      	ldr	r0, [pc, #56]	; (80067cc <HAL_ADC_ConfigChannel+0x7c0>)
 8006792:	f7ff f96c 	bl	8005a6e <LL_ADC_SetCommonPathInternalCh>
 8006796:	e00c      	b.n	80067b2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80067aa:	e002      	b.n	80067b2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067ac:	bf00      	nop
 80067ae:	e000      	b.n	80067b2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80067ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80067be:	4618      	mov	r0, r3
 80067c0:	37d8      	adds	r7, #216	; 0xd8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	80080000 	.word	0x80080000
 80067cc:	50040300 	.word	0x50040300
 80067d0:	c7520000 	.word	0xc7520000
 80067d4:	50040000 	.word	0x50040000
 80067d8:	50040200 	.word	0x50040200
 80067dc:	20000000 	.word	0x20000000
 80067e0:	053e2d63 	.word	0x053e2d63
 80067e4:	cb840000 	.word	0xcb840000
 80067e8:	80000001 	.word	0x80000001

080067ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e0ed      	b.n	80069da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d102      	bne.n	8006810 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7fb fe14 	bl	8002438 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006820:	f7ff f8e2 	bl	80059e8 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006826:	e012      	b.n	800684e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006828:	f7ff f8de 	bl	80059e8 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b0a      	cmp	r3, #10
 8006834:	d90b      	bls.n	800684e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2205      	movs	r2, #5
 8006846:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e0c5      	b.n	80069da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0e5      	beq.n	8006828 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0202 	bic.w	r2, r2, #2
 800686a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800686c:	f7ff f8bc 	bl	80059e8 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006872:	e012      	b.n	800689a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006874:	f7ff f8b8 	bl	80059e8 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b0a      	cmp	r3, #10
 8006880:	d90b      	bls.n	800689a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006886:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2205      	movs	r2, #5
 8006892:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e09f      	b.n	80069da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e5      	bne.n	8006874 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	7e1b      	ldrb	r3, [r3, #24]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d108      	bne.n	80068c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	e007      	b.n	80068d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7e5b      	ldrb	r3, [r3, #25]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d108      	bne.n	80068ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e007      	b.n	80068fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	7e9b      	ldrb	r3, [r3, #26]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d108      	bne.n	8006916 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0220 	orr.w	r2, r2, #32
 8006912:	601a      	str	r2, [r3, #0]
 8006914:	e007      	b.n	8006926 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0220 	bic.w	r2, r2, #32
 8006924:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	7edb      	ldrb	r3, [r3, #27]
 800692a:	2b01      	cmp	r3, #1
 800692c:	d108      	bne.n	8006940 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0210 	bic.w	r2, r2, #16
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	e007      	b.n	8006950 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0210 	orr.w	r2, r2, #16
 800694e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	7f1b      	ldrb	r3, [r3, #28]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d108      	bne.n	800696a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0208 	orr.w	r2, r2, #8
 8006966:	601a      	str	r2, [r3, #0]
 8006968:	e007      	b.n	800697a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0208 	bic.w	r2, r2, #8
 8006978:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	7f5b      	ldrb	r3, [r3, #29]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d108      	bne.n	8006994 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f042 0204 	orr.w	r2, r2, #4
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	e007      	b.n	80069a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0204 	bic.w	r2, r2, #4
 80069a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	ea42 0103 	orr.w	r1, r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	1e5a      	subs	r2, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80069ec:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <LL_EXTI_EnableIT_0_31+0x20>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	4904      	ldr	r1, [pc, #16]	; (8006a04 <LL_EXTI_EnableIT_0_31+0x20>)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	600b      	str	r3, [r1, #0]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	40010400 	.word	0x40010400

08006a08 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006a10:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <LL_EXTI_DisableIT_0_31+0x24>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	43db      	mvns	r3, r3
 8006a18:	4904      	ldr	r1, [pc, #16]	; (8006a2c <LL_EXTI_DisableIT_0_31+0x24>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]
}
 8006a1e:	bf00      	nop
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40010400 	.word	0x40010400

08006a30 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4904      	ldr	r1, [pc, #16]	; (8006a50 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	604b      	str	r3, [r1, #4]

}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40010400 	.word	0x40010400

08006a54 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006a5c:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	43db      	mvns	r3, r3
 8006a64:	4904      	ldr	r1, [pc, #16]	; (8006a78 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	604b      	str	r3, [r1, #4]
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010400 	.word	0x40010400

08006a7c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	4904      	ldr	r1, [pc, #16]	; (8006a9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	608b      	str	r3, [r1, #8]

}
 8006a90:	bf00      	nop
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40010400 	.word	0x40010400

08006aa0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	4904      	ldr	r1, [pc, #16]	; (8006ac4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	608b      	str	r3, [r1, #8]

}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40010400 	.word	0x40010400

08006ac8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006ad0:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	4904      	ldr	r1, [pc, #16]	; (8006ae8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60cb      	str	r3, [r1, #12]
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	40010400 	.word	0x40010400

08006aec <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	43db      	mvns	r3, r3
 8006afc:	4904      	ldr	r1, [pc, #16]	; (8006b10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	60cb      	str	r3, [r1, #12]
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010400 	.word	0x40010400

08006b14 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006b1c:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6153      	str	r3, [r2, #20]
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010400 	.word	0x40010400

08006b34 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	77fb      	strb	r3, [r7, #31]
 8006b4e:	e0d1      	b.n	8006cf4 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5e:	d102      	bne.n	8006b66 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e0c6      	b.n	8006cf4 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d115      	bne.n	8006b9e <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b80:	4b5f      	ldr	r3, [pc, #380]	; (8006d00 <HAL_COMP_Init+0x1cc>)
 8006b82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b84:	4a5e      	ldr	r2, [pc, #376]	; (8006d00 <HAL_COMP_Init+0x1cc>)
 8006b86:	f043 0301 	orr.w	r3, r3, #1
 8006b8a:	6613      	str	r3, [r2, #96]	; 0x60
 8006b8c:	4b5c      	ldr	r3, [pc, #368]	; (8006d00 <HAL_COMP_Init+0x1cc>)
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7fb fc91 	bl	80024c0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	695b      	ldr	r3, [r3, #20]
 8006bbe:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	4b4b      	ldr	r3, [pc, #300]	; (8006d04 <HAL_COMP_Init+0x1d0>)
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	6812      	ldr	r2, [r2, #0]
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	430b      	orrs	r3, r1
 8006be0:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bea:	d106      	bne.n	8006bfa <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006bec:	4b46      	ldr	r3, [pc, #280]	; (8006d08 <HAL_COMP_Init+0x1d4>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a45      	ldr	r2, [pc, #276]	; (8006d08 <HAL_COMP_Init+0x1d4>)
 8006bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	e005      	b.n	8006c06 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006bfa:	4b43      	ldr	r3, [pc, #268]	; (8006d08 <HAL_COMP_Init+0x1d4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a42      	ldr	r2, [pc, #264]	; (8006d08 <HAL_COMP_Init+0x1d4>)
 8006c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c04:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d016      	beq.n	8006c42 <HAL_COMP_Init+0x10e>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d113      	bne.n	8006c42 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c1a:	4b3c      	ldr	r3, [pc, #240]	; (8006d0c <HAL_COMP_Init+0x1d8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	099b      	lsrs	r3, r3, #6
 8006c20:	4a3b      	ldr	r2, [pc, #236]	; (8006d10 <HAL_COMP_Init+0x1dc>)
 8006c22:	fba2 2303 	umull	r2, r3, r2, r3
 8006c26:	099b      	lsrs	r3, r3, #6
 8006c28:	1c5a      	adds	r2, r3, #1
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006c34:	e002      	b.n	8006c3c <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f9      	bne.n	8006c36 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a33      	ldr	r2, [pc, #204]	; (8006d14 <HAL_COMP_Init+0x1e0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d102      	bne.n	8006c52 <HAL_COMP_Init+0x11e>
 8006c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c50:	e001      	b.n	8006c56 <HAL_COMP_Init+0x122>
 8006c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c56:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f003 0303 	and.w	r3, r3, #3
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d037      	beq.n	8006cd4 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006c70:	6938      	ldr	r0, [r7, #16]
 8006c72:	f7ff ff03 	bl	8006a7c <LL_EXTI_EnableRisingTrig_0_31>
 8006c76:	e002      	b.n	8006c7e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006c78:	6938      	ldr	r0, [r7, #16]
 8006c7a:	f7ff ff11 	bl	8006aa0 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f7ff ff1c 	bl	8006ac8 <LL_EXTI_EnableFallingTrig_0_31>
 8006c90:	e002      	b.n	8006c98 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006c92:	6938      	ldr	r0, [r7, #16]
 8006c94:	f7ff ff2a 	bl	8006aec <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006c98:	6938      	ldr	r0, [r7, #16]
 8006c9a:	f7ff ff3b 	bl	8006b14 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f7ff fec0 	bl	8006a30 <LL_EXTI_EnableEvent_0_31>
 8006cb0:	e002      	b.n	8006cb8 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006cb2:	6938      	ldr	r0, [r7, #16]
 8006cb4:	f7ff fece 	bl	8006a54 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d003      	beq.n	8006ccc <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006cc4:	6938      	ldr	r0, [r7, #16]
 8006cc6:	f7ff fe8d 	bl	80069e4 <LL_EXTI_EnableIT_0_31>
 8006cca:	e009      	b.n	8006ce0 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006ccc:	6938      	ldr	r0, [r7, #16]
 8006cce:	f7ff fe9b 	bl	8006a08 <LL_EXTI_DisableIT_0_31>
 8006cd2:	e005      	b.n	8006ce0 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006cd4:	6938      	ldr	r0, [r7, #16]
 8006cd6:	f7ff febd 	bl	8006a54 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006cda:	6938      	ldr	r0, [r7, #16]
 8006cdc:	f7ff fe94 	bl	8006a08 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006cf4:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	40021000 	.word	0x40021000
 8006d04:	ff207d03 	.word	0xff207d03
 8006d08:	40010204 	.word	0x40010204
 8006d0c:	20000000 	.word	0x20000000
 8006d10:	053e2d63 	.word	0x053e2d63
 8006d14:	40010200 	.word	0x40010200

08006d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f003 0307 	and.w	r3, r3, #7
 8006d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <__NVIC_SetPriorityGrouping+0x44>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006d34:	4013      	ands	r3, r2
 8006d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d4a:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <__NVIC_SetPriorityGrouping+0x44>)
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	60d3      	str	r3, [r2, #12]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	e000ed00 	.word	0xe000ed00

08006d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d64:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <__NVIC_GetPriorityGrouping+0x18>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	0a1b      	lsrs	r3, r3, #8
 8006d6a:	f003 0307 	and.w	r3, r3, #7
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	e000ed00 	.word	0xe000ed00

08006d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	db0b      	blt.n	8006da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d8e:	79fb      	ldrb	r3, [r7, #7]
 8006d90:	f003 021f 	and.w	r2, r3, #31
 8006d94:	4907      	ldr	r1, [pc, #28]	; (8006db4 <__NVIC_EnableIRQ+0x38>)
 8006d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8006da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	e000e100 	.word	0xe000e100

08006db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	db0a      	blt.n	8006de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	490c      	ldr	r1, [pc, #48]	; (8006e04 <__NVIC_SetPriority+0x4c>)
 8006dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dd6:	0112      	lsls	r2, r2, #4
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	440b      	add	r3, r1
 8006ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006de0:	e00a      	b.n	8006df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	4908      	ldr	r1, [pc, #32]	; (8006e08 <__NVIC_SetPriority+0x50>)
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	3b04      	subs	r3, #4
 8006df0:	0112      	lsls	r2, r2, #4
 8006df2:	b2d2      	uxtb	r2, r2
 8006df4:	440b      	add	r3, r1
 8006df6:	761a      	strb	r2, [r3, #24]
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr
 8006e04:	e000e100 	.word	0xe000e100
 8006e08:	e000ed00 	.word	0xe000ed00

08006e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b089      	sub	sp, #36	; 0x24
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	60f8      	str	r0, [r7, #12]
 8006e14:	60b9      	str	r1, [r7, #8]
 8006e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f1c3 0307 	rsb	r3, r3, #7
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	bf28      	it	cs
 8006e2a:	2304      	movcs	r3, #4
 8006e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	3304      	adds	r3, #4
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d902      	bls.n	8006e3c <NVIC_EncodePriority+0x30>
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3b03      	subs	r3, #3
 8006e3a:	e000      	b.n	8006e3e <NVIC_EncodePriority+0x32>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e40:	f04f 32ff 	mov.w	r2, #4294967295
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43da      	mvns	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	401a      	ands	r2, r3
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e54:	f04f 31ff 	mov.w	r1, #4294967295
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5e:	43d9      	mvns	r1, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e64:	4313      	orrs	r3, r2
         );
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3724      	adds	r7, #36	; 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e84:	d301      	bcc.n	8006e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e86:	2301      	movs	r3, #1
 8006e88:	e00f      	b.n	8006eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e8a:	4a0a      	ldr	r2, [pc, #40]	; (8006eb4 <SysTick_Config+0x40>)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e92:	210f      	movs	r1, #15
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	f7ff ff8e 	bl	8006db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <SysTick_Config+0x40>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ea2:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <SysTick_Config+0x40>)
 8006ea4:	2207      	movs	r2, #7
 8006ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	e000e010 	.word	0xe000e010

08006eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f7ff ff29 	bl	8006d18 <__NVIC_SetPriorityGrouping>
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	60b9      	str	r1, [r7, #8]
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ee0:	f7ff ff3e 	bl	8006d60 <__NVIC_GetPriorityGrouping>
 8006ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	68b9      	ldr	r1, [r7, #8]
 8006eea:	6978      	ldr	r0, [r7, #20]
 8006eec:	f7ff ff8e 	bl	8006e0c <NVIC_EncodePriority>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7ff ff5d 	bl	8006db8 <__NVIC_SetPriority>
}
 8006efe:	bf00      	nop
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff ff31 	bl	8006d7c <__NVIC_EnableIRQ>
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff ffa2 	bl	8006e74 <SysTick_Config>
 8006f30:	4603      	mov	r3, r0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d008      	beq.n	8006f64 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2204      	movs	r2, #4
 8006f56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e022      	b.n	8006faa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 020e 	bic.w	r2, r2, #14
 8006f72:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0201 	bic.w	r2, r2, #1
 8006f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f88:	f003 021c 	and.w	r2, r3, #28
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	2101      	movs	r1, #1
 8006f92:	fa01 f202 	lsl.w	r2, r1, r2
 8006f96:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d005      	beq.n	8006fda <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2204      	movs	r2, #4
 8006fd2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]
 8006fd8:	e029      	b.n	800702e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 020e 	bic.w	r2, r2, #14
 8006fe8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0201 	bic.w	r2, r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffe:	f003 021c 	and.w	r2, r3, #28
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007006:	2101      	movs	r1, #1
 8007008:	fa01 f202 	lsl.w	r2, r1, r2
 800700c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
    }
  }
  return status;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007046:	e17f      	b.n	8007348 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	2101      	movs	r1, #1
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	fa01 f303 	lsl.w	r3, r1, r3
 8007054:	4013      	ands	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8171 	beq.w	8007342 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f003 0303 	and.w	r3, r3, #3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d005      	beq.n	8007078 <HAL_GPIO_Init+0x40>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d130      	bne.n	80070da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	2203      	movs	r2, #3
 8007084:	fa02 f303 	lsl.w	r3, r2, r3
 8007088:	43db      	mvns	r3, r3
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	4013      	ands	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	fa02 f303 	lsl.w	r3, r2, r3
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070ae:	2201      	movs	r2, #1
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	fa02 f303 	lsl.w	r3, r2, r3
 80070b6:	43db      	mvns	r3, r3
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	4013      	ands	r3, r2
 80070bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	091b      	lsrs	r3, r3, #4
 80070c4:	f003 0201 	and.w	r2, r3, #1
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	fa02 f303 	lsl.w	r3, r2, r3
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d118      	bne.n	8007118 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80070ec:	2201      	movs	r2, #1
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	693a      	ldr	r2, [r7, #16]
 80070f8:	4013      	ands	r3, r2
 80070fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	08db      	lsrs	r3, r3, #3
 8007102:	f003 0201 	and.w	r2, r3, #1
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	2b03      	cmp	r3, #3
 8007122:	d017      	beq.n	8007154 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	2203      	movs	r2, #3
 8007130:	fa02 f303 	lsl.w	r3, r2, r3
 8007134:	43db      	mvns	r3, r3
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4013      	ands	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	fa02 f303 	lsl.w	r3, r2, r3
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	4313      	orrs	r3, r2
 800714c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f003 0303 	and.w	r3, r3, #3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d123      	bne.n	80071a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	08da      	lsrs	r2, r3, #3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3208      	adds	r2, #8
 8007168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f003 0307 	and.w	r3, r3, #7
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	220f      	movs	r2, #15
 8007178:	fa02 f303 	lsl.w	r3, r2, r3
 800717c:	43db      	mvns	r3, r3
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4013      	ands	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	fa02 f303 	lsl.w	r3, r2, r3
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	08da      	lsrs	r2, r3, #3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3208      	adds	r2, #8
 80071a2:	6939      	ldr	r1, [r7, #16]
 80071a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	005b      	lsls	r3, r3, #1
 80071b2:	2203      	movs	r2, #3
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	43db      	mvns	r3, r3
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	4013      	ands	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f003 0203 	and.w	r2, r3, #3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	fa02 f303 	lsl.w	r3, r2, r3
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 80ac 	beq.w	8007342 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071ea:	4b5f      	ldr	r3, [pc, #380]	; (8007368 <HAL_GPIO_Init+0x330>)
 80071ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071ee:	4a5e      	ldr	r2, [pc, #376]	; (8007368 <HAL_GPIO_Init+0x330>)
 80071f0:	f043 0301 	orr.w	r3, r3, #1
 80071f4:	6613      	str	r3, [r2, #96]	; 0x60
 80071f6:	4b5c      	ldr	r3, [pc, #368]	; (8007368 <HAL_GPIO_Init+0x330>)
 80071f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	60bb      	str	r3, [r7, #8]
 8007200:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007202:	4a5a      	ldr	r2, [pc, #360]	; (800736c <HAL_GPIO_Init+0x334>)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	089b      	lsrs	r3, r3, #2
 8007208:	3302      	adds	r3, #2
 800720a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800720e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	220f      	movs	r2, #15
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	43db      	mvns	r3, r3
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	4013      	ands	r3, r2
 8007224:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800722c:	d025      	beq.n	800727a <HAL_GPIO_Init+0x242>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a4f      	ldr	r2, [pc, #316]	; (8007370 <HAL_GPIO_Init+0x338>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d01f      	beq.n	8007276 <HAL_GPIO_Init+0x23e>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a4e      	ldr	r2, [pc, #312]	; (8007374 <HAL_GPIO_Init+0x33c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d019      	beq.n	8007272 <HAL_GPIO_Init+0x23a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a4d      	ldr	r2, [pc, #308]	; (8007378 <HAL_GPIO_Init+0x340>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <HAL_GPIO_Init+0x236>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a4c      	ldr	r2, [pc, #304]	; (800737c <HAL_GPIO_Init+0x344>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00d      	beq.n	800726a <HAL_GPIO_Init+0x232>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a4b      	ldr	r2, [pc, #300]	; (8007380 <HAL_GPIO_Init+0x348>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d007      	beq.n	8007266 <HAL_GPIO_Init+0x22e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a4a      	ldr	r2, [pc, #296]	; (8007384 <HAL_GPIO_Init+0x34c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d101      	bne.n	8007262 <HAL_GPIO_Init+0x22a>
 800725e:	2306      	movs	r3, #6
 8007260:	e00c      	b.n	800727c <HAL_GPIO_Init+0x244>
 8007262:	2307      	movs	r3, #7
 8007264:	e00a      	b.n	800727c <HAL_GPIO_Init+0x244>
 8007266:	2305      	movs	r3, #5
 8007268:	e008      	b.n	800727c <HAL_GPIO_Init+0x244>
 800726a:	2304      	movs	r3, #4
 800726c:	e006      	b.n	800727c <HAL_GPIO_Init+0x244>
 800726e:	2303      	movs	r3, #3
 8007270:	e004      	b.n	800727c <HAL_GPIO_Init+0x244>
 8007272:	2302      	movs	r3, #2
 8007274:	e002      	b.n	800727c <HAL_GPIO_Init+0x244>
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <HAL_GPIO_Init+0x244>
 800727a:	2300      	movs	r3, #0
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	f002 0203 	and.w	r2, r2, #3
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	4093      	lsls	r3, r2
 8007286:	693a      	ldr	r2, [r7, #16]
 8007288:	4313      	orrs	r3, r2
 800728a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800728c:	4937      	ldr	r1, [pc, #220]	; (800736c <HAL_GPIO_Init+0x334>)
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	089b      	lsrs	r3, r3, #2
 8007292:	3302      	adds	r3, #2
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800729a:	4b3b      	ldr	r3, [pc, #236]	; (8007388 <HAL_GPIO_Init+0x350>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	43db      	mvns	r3, r3
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4013      	ands	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d003      	beq.n	80072be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80072b6:	693a      	ldr	r2, [r7, #16]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072be:	4a32      	ldr	r2, [pc, #200]	; (8007388 <HAL_GPIO_Init+0x350>)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80072c4:	4b30      	ldr	r3, [pc, #192]	; (8007388 <HAL_GPIO_Init+0x350>)
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	43db      	mvns	r3, r3
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4013      	ands	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072e8:	4a27      	ldr	r2, [pc, #156]	; (8007388 <HAL_GPIO_Init+0x350>)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80072ee:	4b26      	ldr	r3, [pc, #152]	; (8007388 <HAL_GPIO_Init+0x350>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	43db      	mvns	r3, r3
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007312:	4a1d      	ldr	r2, [pc, #116]	; (8007388 <HAL_GPIO_Init+0x350>)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <HAL_GPIO_Init+0x350>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	43db      	mvns	r3, r3
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4013      	ands	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800733c:	4a12      	ldr	r2, [pc, #72]	; (8007388 <HAL_GPIO_Init+0x350>)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	3301      	adds	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	fa22 f303 	lsr.w	r3, r2, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	f47f ae78 	bne.w	8007048 <HAL_GPIO_Init+0x10>
  }
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	40021000 	.word	0x40021000
 800736c:	40010000 	.word	0x40010000
 8007370:	48000400 	.word	0x48000400
 8007374:	48000800 	.word	0x48000800
 8007378:	48000c00 	.word	0x48000c00
 800737c:	48001000 	.word	0x48001000
 8007380:	48001400 	.word	0x48001400
 8007384:	48001800 	.word	0x48001800
 8007388:	40010400 	.word	0x40010400

0800738c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800739a:	e0cd      	b.n	8007538 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800739c:	2201      	movs	r2, #1
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	fa02 f303 	lsl.w	r3, r2, r3
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	4013      	ands	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80c0 	beq.w	8007532 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80073b2:	4a68      	ldr	r2, [pc, #416]	; (8007554 <HAL_GPIO_DeInit+0x1c8>)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	089b      	lsrs	r3, r3, #2
 80073b8:	3302      	adds	r3, #2
 80073ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	220f      	movs	r2, #15
 80073ca:	fa02 f303 	lsl.w	r3, r2, r3
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4013      	ands	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073da:	d025      	beq.n	8007428 <HAL_GPIO_DeInit+0x9c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a5e      	ldr	r2, [pc, #376]	; (8007558 <HAL_GPIO_DeInit+0x1cc>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d01f      	beq.n	8007424 <HAL_GPIO_DeInit+0x98>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a5d      	ldr	r2, [pc, #372]	; (800755c <HAL_GPIO_DeInit+0x1d0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d019      	beq.n	8007420 <HAL_GPIO_DeInit+0x94>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a5c      	ldr	r2, [pc, #368]	; (8007560 <HAL_GPIO_DeInit+0x1d4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d013      	beq.n	800741c <HAL_GPIO_DeInit+0x90>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a5b      	ldr	r2, [pc, #364]	; (8007564 <HAL_GPIO_DeInit+0x1d8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00d      	beq.n	8007418 <HAL_GPIO_DeInit+0x8c>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a5a      	ldr	r2, [pc, #360]	; (8007568 <HAL_GPIO_DeInit+0x1dc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d007      	beq.n	8007414 <HAL_GPIO_DeInit+0x88>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a59      	ldr	r2, [pc, #356]	; (800756c <HAL_GPIO_DeInit+0x1e0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d101      	bne.n	8007410 <HAL_GPIO_DeInit+0x84>
 800740c:	2306      	movs	r3, #6
 800740e:	e00c      	b.n	800742a <HAL_GPIO_DeInit+0x9e>
 8007410:	2307      	movs	r3, #7
 8007412:	e00a      	b.n	800742a <HAL_GPIO_DeInit+0x9e>
 8007414:	2305      	movs	r3, #5
 8007416:	e008      	b.n	800742a <HAL_GPIO_DeInit+0x9e>
 8007418:	2304      	movs	r3, #4
 800741a:	e006      	b.n	800742a <HAL_GPIO_DeInit+0x9e>
 800741c:	2303      	movs	r3, #3
 800741e:	e004      	b.n	800742a <HAL_GPIO_DeInit+0x9e>
 8007420:	2302      	movs	r3, #2
 8007422:	e002      	b.n	800742a <HAL_GPIO_DeInit+0x9e>
 8007424:	2301      	movs	r3, #1
 8007426:	e000      	b.n	800742a <HAL_GPIO_DeInit+0x9e>
 8007428:	2300      	movs	r3, #0
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	f002 0203 	and.w	r2, r2, #3
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	4093      	lsls	r3, r2
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	429a      	cmp	r2, r3
 8007438:	d132      	bne.n	80074a0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800743a:	4b4d      	ldr	r3, [pc, #308]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	43db      	mvns	r3, r3
 8007442:	494b      	ldr	r1, [pc, #300]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 8007444:	4013      	ands	r3, r2
 8007446:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007448:	4b49      	ldr	r3, [pc, #292]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	43db      	mvns	r3, r3
 8007450:	4947      	ldr	r1, [pc, #284]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 8007452:	4013      	ands	r3, r2
 8007454:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8007456:	4b46      	ldr	r3, [pc, #280]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	43db      	mvns	r3, r3
 800745e:	4944      	ldr	r1, [pc, #272]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 8007460:	4013      	ands	r3, r2
 8007462:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007464:	4b42      	ldr	r3, [pc, #264]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 8007466:	689a      	ldr	r2, [r3, #8]
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	43db      	mvns	r3, r3
 800746c:	4940      	ldr	r1, [pc, #256]	; (8007570 <HAL_GPIO_DeInit+0x1e4>)
 800746e:	4013      	ands	r3, r2
 8007470:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	220f      	movs	r2, #15
 800747c:	fa02 f303 	lsl.w	r3, r2, r3
 8007480:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007482:	4a34      	ldr	r2, [pc, #208]	; (8007554 <HAL_GPIO_DeInit+0x1c8>)
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	089b      	lsrs	r3, r3, #2
 8007488:	3302      	adds	r3, #2
 800748a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	43da      	mvns	r2, r3
 8007492:	4830      	ldr	r0, [pc, #192]	; (8007554 <HAL_GPIO_DeInit+0x1c8>)
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	089b      	lsrs	r3, r3, #2
 8007498:	400a      	ands	r2, r1
 800749a:	3302      	adds	r3, #2
 800749c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	2103      	movs	r1, #3
 80074aa:	fa01 f303 	lsl.w	r3, r1, r3
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	08da      	lsrs	r2, r3, #3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3208      	adds	r2, #8
 80074bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f003 0307 	and.w	r3, r3, #7
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	220f      	movs	r2, #15
 80074ca:	fa02 f303 	lsl.w	r3, r2, r3
 80074ce:	43db      	mvns	r3, r3
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	08d2      	lsrs	r2, r2, #3
 80074d4:	4019      	ands	r1, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3208      	adds	r2, #8
 80074da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689a      	ldr	r2, [r3, #8]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	2103      	movs	r1, #3
 80074e8:	fa01 f303 	lsl.w	r3, r1, r3
 80074ec:	43db      	mvns	r3, r3
 80074ee:	401a      	ands	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	2101      	movs	r1, #1
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007500:	43db      	mvns	r3, r3
 8007502:	401a      	ands	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68da      	ldr	r2, [r3, #12]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	2103      	movs	r1, #3
 8007512:	fa01 f303 	lsl.w	r3, r1, r3
 8007516:	43db      	mvns	r3, r3
 8007518:	401a      	ands	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007522:	2101      	movs	r1, #1
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	43db      	mvns	r3, r3
 800752c:	401a      	ands	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	3301      	adds	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	fa22 f303 	lsr.w	r3, r2, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	f47f af2b 	bne.w	800739c <HAL_GPIO_DeInit+0x10>
  }
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	40010000 	.word	0x40010000
 8007558:	48000400 	.word	0x48000400
 800755c:	48000800 	.word	0x48000800
 8007560:	48000c00 	.word	0x48000c00
 8007564:	48001000 	.word	0x48001000
 8007568:	48001400 	.word	0x48001400
 800756c:	48001800 	.word	0x48001800
 8007570:	40010400 	.word	0x40010400

08007574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	807b      	strh	r3, [r7, #2]
 8007580:	4613      	mov	r3, r2
 8007582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007584:	787b      	ldrb	r3, [r7, #1]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800758a:	887a      	ldrh	r2, [r7, #2]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007590:	e002      	b.n	8007598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007592:	887a      	ldrh	r2, [r7, #2]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e081      	b.n	80076ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d106      	bne.n	80075d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7fa ffac 	bl	8002528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2224      	movs	r2, #36	; 0x24
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007604:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d107      	bne.n	800761e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	e006      	b.n	800762c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	689a      	ldr	r2, [r3, #8]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800762a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d104      	bne.n	800763e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800763c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6812      	ldr	r2, [r2, #0]
 8007648:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800764c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007650:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007660:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	69d9      	ldr	r1, [r3, #28]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a1a      	ldr	r2, [r3, #32]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3708      	adds	r7, #8
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d101      	bne.n	80076d4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e021      	b.n	8007718 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2224      	movs	r2, #36	; 0x24
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fa ff79 	bl	80025e4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af02      	add	r7, sp, #8
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	4608      	mov	r0, r1
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	4603      	mov	r3, r0
 8007730:	817b      	strh	r3, [r7, #10]
 8007732:	460b      	mov	r3, r1
 8007734:	813b      	strh	r3, [r7, #8]
 8007736:	4613      	mov	r3, r2
 8007738:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b20      	cmp	r3, #32
 8007744:	f040 80f9 	bne.w	800793a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_I2C_Mem_Write+0x34>
 800774e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	d105      	bne.n	8007760 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800775a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e0ed      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007766:	2b01      	cmp	r3, #1
 8007768:	d101      	bne.n	800776e <HAL_I2C_Mem_Write+0x4e>
 800776a:	2302      	movs	r3, #2
 800776c:	e0e6      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007776:	f7fe f937 	bl	80059e8 <HAL_GetTick>
 800777a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	2319      	movs	r3, #25
 8007782:	2201      	movs	r2, #1
 8007784:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 fadd 	bl	8007d48 <I2C_WaitOnFlagUntilTimeout>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e0d1      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2221      	movs	r2, #33	; 0x21
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2240      	movs	r2, #64	; 0x40
 80077a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077c0:	88f8      	ldrh	r0, [r7, #6]
 80077c2:	893a      	ldrh	r2, [r7, #8]
 80077c4:	8979      	ldrh	r1, [r7, #10]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	9301      	str	r3, [sp, #4]
 80077ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077cc:	9300      	str	r3, [sp, #0]
 80077ce:	4603      	mov	r3, r0
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 f9ed 	bl	8007bb0 <I2C_RequestMemoryWrite>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e0a9      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2bff      	cmp	r3, #255	; 0xff
 80077f0:	d90e      	bls.n	8007810 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	22ff      	movs	r2, #255	; 0xff
 80077f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	8979      	ldrh	r1, [r7, #10]
 8007800:	2300      	movs	r3, #0
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f000 fc45 	bl	8008098 <I2C_TransferConfig>
 800780e:	e00f      	b.n	8007830 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781e:	b2da      	uxtb	r2, r3
 8007820:	8979      	ldrh	r1, [r7, #10]
 8007822:	2300      	movs	r3, #0
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fc34 	bl	8008098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fac7 	bl	8007dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d001      	beq.n	8007844 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e07b      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786c:	3b01      	subs	r3, #1
 800786e:	b29a      	uxth	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d034      	beq.n	80078e8 <HAL_I2C_Mem_Write+0x1c8>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	d130      	bne.n	80078e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788c:	2200      	movs	r2, #0
 800788e:	2180      	movs	r1, #128	; 0x80
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fa59 	bl	8007d48 <I2C_WaitOnFlagUntilTimeout>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e04d      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2bff      	cmp	r3, #255	; 0xff
 80078a8:	d90e      	bls.n	80078c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	22ff      	movs	r2, #255	; 0xff
 80078ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b4:	b2da      	uxtb	r2, r3
 80078b6:	8979      	ldrh	r1, [r7, #10]
 80078b8:	2300      	movs	r3, #0
 80078ba:	9300      	str	r3, [sp, #0]
 80078bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 fbe9 	bl	8008098 <I2C_TransferConfig>
 80078c6:	e00f      	b.n	80078e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	8979      	ldrh	r1, [r7, #10]
 80078da:	2300      	movs	r3, #0
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 fbd8 	bl	8008098 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d19e      	bne.n	8007830 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078f6:	68f8      	ldr	r0, [r7, #12]
 80078f8:	f000 faa6 	bl	8007e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e01a      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2220      	movs	r2, #32
 800790c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6859      	ldr	r1, [r3, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <HAL_I2C_Mem_Write+0x224>)
 800791a:	400b      	ands	r3, r1
 800791c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007936:	2300      	movs	r3, #0
 8007938:	e000      	b.n	800793c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800793a:	2302      	movs	r3, #2
  }
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	fe00e800 	.word	0xfe00e800

08007948 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	4608      	mov	r0, r1
 8007952:	4611      	mov	r1, r2
 8007954:	461a      	mov	r2, r3
 8007956:	4603      	mov	r3, r0
 8007958:	817b      	strh	r3, [r7, #10]
 800795a:	460b      	mov	r3, r1
 800795c:	813b      	strh	r3, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007968:	b2db      	uxtb	r3, r3
 800796a:	2b20      	cmp	r3, #32
 800796c:	f040 80fd 	bne.w	8007b6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <HAL_I2C_Mem_Read+0x34>
 8007976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	d105      	bne.n	8007988 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007982:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e0f1      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800798e:	2b01      	cmp	r3, #1
 8007990:	d101      	bne.n	8007996 <HAL_I2C_Mem_Read+0x4e>
 8007992:	2302      	movs	r3, #2
 8007994:	e0ea      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800799e:	f7fe f823 	bl	80059e8 <HAL_GetTick>
 80079a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	2319      	movs	r3, #25
 80079aa:	2201      	movs	r2, #1
 80079ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 f9c9 	bl	8007d48 <I2C_WaitOnFlagUntilTimeout>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0d5      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2222      	movs	r2, #34	; 0x22
 80079c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2240      	movs	r2, #64	; 0x40
 80079cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6a3a      	ldr	r2, [r7, #32]
 80079da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079e8:	88f8      	ldrh	r0, [r7, #6]
 80079ea:	893a      	ldrh	r2, [r7, #8]
 80079ec:	8979      	ldrh	r1, [r7, #10]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f4:	9300      	str	r3, [sp, #0]
 80079f6:	4603      	mov	r3, r0
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f000 f92d 	bl	8007c58 <I2C_RequestMemoryRead>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e0ad      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	2bff      	cmp	r3, #255	; 0xff
 8007a18:	d90e      	bls.n	8007a38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	22ff      	movs	r2, #255	; 0xff
 8007a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	8979      	ldrh	r1, [r7, #10]
 8007a28:	4b52      	ldr	r3, [pc, #328]	; (8007b74 <HAL_I2C_Mem_Read+0x22c>)
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 fb31 	bl	8008098 <I2C_TransferConfig>
 8007a36:	e00f      	b.n	8007a58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	8979      	ldrh	r1, [r7, #10]
 8007a4a:	4b4a      	ldr	r3, [pc, #296]	; (8007b74 <HAL_I2C_Mem_Read+0x22c>)
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fb20 	bl	8008098 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	2200      	movs	r2, #0
 8007a60:	2104      	movs	r1, #4
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	f000 f970 	bl	8007d48 <I2C_WaitOnFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e07c      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d034      	beq.n	8007b18 <HAL_I2C_Mem_Read+0x1d0>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d130      	bne.n	8007b18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	9300      	str	r3, [sp, #0]
 8007aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abc:	2200      	movs	r2, #0
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f941 	bl	8007d48 <I2C_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e04d      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2bff      	cmp	r3, #255	; 0xff
 8007ad8:	d90e      	bls.n	8007af8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	22ff      	movs	r2, #255	; 0xff
 8007ade:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	8979      	ldrh	r1, [r7, #10]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 fad1 	bl	8008098 <I2C_TransferConfig>
 8007af6:	e00f      	b.n	8007b18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	8979      	ldrh	r1, [r7, #10]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 fac0 	bl	8008098 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d19a      	bne.n	8007a58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 f98e 	bl	8007e48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e01a      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6859      	ldr	r1, [r3, #4]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <HAL_I2C_Mem_Read+0x230>)
 8007b4a:	400b      	ands	r3, r1
 8007b4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	e000      	b.n	8007b6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b6a:	2302      	movs	r3, #2
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	80002400 	.word	0x80002400
 8007b78:	fe00e800 	.word	0xfe00e800

08007b7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b8a:	b2db      	uxtb	r3, r3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af02      	add	r7, sp, #8
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	817b      	strh	r3, [r7, #10]
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	813b      	strh	r3, [r7, #8]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	b2da      	uxtb	r2, r3
 8007bce:	8979      	ldrh	r1, [r7, #10]
 8007bd0:	4b20      	ldr	r3, [pc, #128]	; (8007c54 <I2C_RequestMemoryWrite+0xa4>)
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fa5d 	bl	8008098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	69b9      	ldr	r1, [r7, #24]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f8f0 	bl	8007dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e02c      	b.n	8007c4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bf2:	88fb      	ldrh	r3, [r7, #6]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d105      	bne.n	8007c04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf8:	893b      	ldrh	r3, [r7, #8]
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	629a      	str	r2, [r3, #40]	; 0x28
 8007c02:	e015      	b.n	8007c30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c04:	893b      	ldrh	r3, [r7, #8]
 8007c06:	0a1b      	lsrs	r3, r3, #8
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c12:	69fa      	ldr	r2, [r7, #28]
 8007c14:	69b9      	ldr	r1, [r7, #24]
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f000 f8d6 	bl	8007dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d001      	beq.n	8007c26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e012      	b.n	8007c4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c26:	893b      	ldrh	r3, [r7, #8]
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2200      	movs	r2, #0
 8007c38:	2180      	movs	r1, #128	; 0x80
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f884 	bl	8007d48 <I2C_WaitOnFlagUntilTimeout>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c4a:	2300      	movs	r3, #0
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	80002000 	.word	0x80002000

08007c58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	4603      	mov	r3, r0
 8007c68:	817b      	strh	r3, [r7, #10]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	813b      	strh	r3, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c72:	88fb      	ldrh	r3, [r7, #6]
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	8979      	ldrh	r1, [r7, #10]
 8007c78:	4b20      	ldr	r3, [pc, #128]	; (8007cfc <I2C_RequestMemoryRead+0xa4>)
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	68f8      	ldr	r0, [r7, #12]
 8007c80:	f000 fa0a 	bl	8008098 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	69b9      	ldr	r1, [r7, #24]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f89d 	bl	8007dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e02c      	b.n	8007cf2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d105      	bne.n	8007caa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c9e:	893b      	ldrh	r3, [r7, #8]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ca8:	e015      	b.n	8007cd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007caa:	893b      	ldrh	r3, [r7, #8]
 8007cac:	0a1b      	lsrs	r3, r3, #8
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cb8:	69fa      	ldr	r2, [r7, #28]
 8007cba:	69b9      	ldr	r1, [r7, #24]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 f883 	bl	8007dc8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d001      	beq.n	8007ccc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e012      	b.n	8007cf2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ccc:	893b      	ldrh	r3, [r7, #8]
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2140      	movs	r1, #64	; 0x40
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f831 	bl	8007d48 <I2C_WaitOnFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	80002000 	.word	0x80002000

08007d00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d103      	bne.n	8007d1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d007      	beq.n	8007d3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	699a      	ldr	r2, [r3, #24]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0201 	orr.w	r2, r2, #1
 8007d3a:	619a      	str	r2, [r3, #24]
  }
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	603b      	str	r3, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d58:	e022      	b.n	8007da0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d01e      	beq.n	8007da0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d62:	f7fd fe41 	bl	80059e8 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d302      	bcc.n	8007d78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d113      	bne.n	8007da0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7c:	f043 0220 	orr.w	r2, r3, #32
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e00f      	b.n	8007dc0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	4013      	ands	r3, r2
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	bf0c      	ite	eq
 8007db0:	2301      	moveq	r3, #1
 8007db2:	2300      	movne	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	461a      	mov	r2, r3
 8007db8:	79fb      	ldrb	r3, [r7, #7]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d0cd      	beq.n	8007d5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	60b9      	str	r1, [r7, #8]
 8007dd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dd4:	e02c      	b.n	8007e30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	68b9      	ldr	r1, [r7, #8]
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 f870 	bl	8007ec0 <I2C_IsErrorOccurred>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e02a      	b.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df0:	d01e      	beq.n	8007e30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007df2:	f7fd fdf9 	bl	80059e8 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	d302      	bcc.n	8007e08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d113      	bne.n	8007e30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0c:	f043 0220 	orr.w	r2, r3, #32
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e007      	b.n	8007e40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	699b      	ldr	r3, [r3, #24]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d1cb      	bne.n	8007dd6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e54:	e028      	b.n	8007ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	68b9      	ldr	r1, [r7, #8]
 8007e5a:	68f8      	ldr	r0, [r7, #12]
 8007e5c:	f000 f830 	bl	8007ec0 <I2C_IsErrorOccurred>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e026      	b.n	8007eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e6a:	f7fd fdbd 	bl	80059e8 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d302      	bcc.n	8007e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d113      	bne.n	8007ea8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e84:	f043 0220 	orr.w	r2, r3, #32
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e007      	b.n	8007eb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	f003 0320 	and.w	r3, r3, #32
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d1cf      	bne.n	8007e56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	f003 0310 	and.w	r3, r3, #16
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d075      	beq.n	8007fd8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2210      	movs	r2, #16
 8007ef2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ef4:	e056      	b.n	8007fa4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d052      	beq.n	8007fa4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007efe:	f7fd fd73 	bl	80059e8 <HAL_GetTick>
 8007f02:	4602      	mov	r2, r0
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d302      	bcc.n	8007f14 <I2C_IsErrorOccurred+0x54>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d147      	bne.n	8007fa4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f36:	d12e      	bne.n	8007f96 <I2C_IsErrorOccurred+0xd6>
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f3e:	d02a      	beq.n	8007f96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007f40:	7cfb      	ldrb	r3, [r7, #19]
 8007f42:	2b20      	cmp	r3, #32
 8007f44:	d027      	beq.n	8007f96 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f56:	f7fd fd47 	bl	80059e8 <HAL_GetTick>
 8007f5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f5c:	e01b      	b.n	8007f96 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f5e:	f7fd fd43 	bl	80059e8 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b19      	cmp	r3, #25
 8007f6a:	d914      	bls.n	8007f96 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2220      	movs	r2, #32
 8007f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	f003 0320 	and.w	r3, r3, #32
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d1dc      	bne.n	8007f5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f003 0320 	and.w	r3, r3, #32
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	d003      	beq.n	8007fba <I2C_IsErrorOccurred+0xfa>
 8007fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d09d      	beq.n	8007ef6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d103      	bne.n	8007fca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	f043 0304 	orr.w	r3, r3, #4
 8007fd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d00b      	beq.n	8008002 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	f043 0301 	orr.w	r3, r3, #1
 8007ff0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ffa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	f043 0308 	orr.w	r3, r3, #8
 8008012:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800801c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	f043 0302 	orr.w	r3, r3, #2
 8008034:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800803e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01c      	beq.n	8008088 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f7ff fe56 	bl	8007d00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6859      	ldr	r1, [r3, #4]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	4b0d      	ldr	r3, [pc, #52]	; (8008094 <I2C_IsErrorOccurred+0x1d4>)
 8008060:	400b      	ands	r3, r1
 8008062:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	431a      	orrs	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2220      	movs	r2, #32
 8008074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800808c:	4618      	mov	r0, r3
 800808e:	3728      	adds	r7, #40	; 0x28
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	fe00e800 	.word	0xfe00e800

08008098 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	607b      	str	r3, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	817b      	strh	r3, [r7, #10]
 80080a6:	4613      	mov	r3, r2
 80080a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080aa:	897b      	ldrh	r3, [r7, #10]
 80080ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080b0:	7a7b      	ldrb	r3, [r7, #9]
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	0d5b      	lsrs	r3, r3, #21
 80080d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80080d6:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <I2C_TransferConfig+0x60>)
 80080d8:	430b      	orrs	r3, r1
 80080da:	43db      	mvns	r3, r3
 80080dc:	ea02 0103 	and.w	r1, r2, r3
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	03ff63ff 	.word	0x03ff63ff

080080fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800810c:	b2db      	uxtb	r3, r3
 800810e:	2b20      	cmp	r3, #32
 8008110:	d138      	bne.n	8008184 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008118:	2b01      	cmp	r3, #1
 800811a:	d101      	bne.n	8008120 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800811c:	2302      	movs	r3, #2
 800811e:	e032      	b.n	8008186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2224      	movs	r2, #36	; 0x24
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f022 0201 	bic.w	r2, r2, #1
 800813e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800814e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6819      	ldr	r1, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f042 0201 	orr.w	r2, r2, #1
 800816e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008180:	2300      	movs	r3, #0
 8008182:	e000      	b.n	8008186 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008184:	2302      	movs	r3, #2
  }
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008192:	b480      	push	{r7}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
 800819a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b20      	cmp	r3, #32
 80081a6:	d139      	bne.n	800821c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e033      	b.n	800821e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2224      	movs	r2, #36	; 0x24
 80081c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0201 	bic.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80081e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2220      	movs	r2, #32
 800820c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008218:	2300      	movs	r3, #0
 800821a:	e000      	b.n	800821e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800821c:	2302      	movs	r3, #2
  }
}
 800821e:	4618      	mov	r0, r3
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
	...

0800822c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008230:	4b04      	ldr	r3, [pc, #16]	; (8008244 <HAL_PWREx_GetVoltageRange+0x18>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008238:	4618      	mov	r0, r3
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	40007000 	.word	0x40007000

08008248 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008256:	d130      	bne.n	80082ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008258:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008264:	d038      	beq.n	80082d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008266:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800826e:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008274:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008276:	4b1d      	ldr	r3, [pc, #116]	; (80082ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2232      	movs	r2, #50	; 0x32
 800827c:	fb02 f303 	mul.w	r3, r2, r3
 8008280:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	0c9b      	lsrs	r3, r3, #18
 8008288:	3301      	adds	r3, #1
 800828a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800828c:	e002      	b.n	8008294 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b01      	subs	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008294:	4b14      	ldr	r3, [pc, #80]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800829c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a0:	d102      	bne.n	80082a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f2      	bne.n	800828e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082aa:	695b      	ldr	r3, [r3, #20]
 80082ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b4:	d110      	bne.n	80082d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	e00f      	b.n	80082da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80082ba:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c6:	d007      	beq.n	80082d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80082c8:	4b07      	ldr	r3, [pc, #28]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082d0:	4a05      	ldr	r2, [pc, #20]	; (80082e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80082d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80082d8:	2300      	movs	r3, #0
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3714      	adds	r7, #20
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40007000 	.word	0x40007000
 80082ec:	20000000 	.word	0x20000000
 80082f0:	431bde83 	.word	0x431bde83

080082f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b088      	sub	sp, #32
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e3ca      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008306:	4b97      	ldr	r3, [pc, #604]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f003 030c 	and.w	r3, r3, #12
 800830e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008310:	4b94      	ldr	r3, [pc, #592]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 80e4 	beq.w	80084f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <HAL_RCC_OscConfig+0x4a>
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b0c      	cmp	r3, #12
 8008332:	f040 808b 	bne.w	800844c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b01      	cmp	r3, #1
 800833a:	f040 8087 	bne.w	800844c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800833e:	4b89      	ldr	r3, [pc, #548]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d005      	beq.n	8008356 <HAL_RCC_OscConfig+0x62>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e3a2      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1a      	ldr	r2, [r3, #32]
 800835a:	4b82      	ldr	r3, [pc, #520]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f003 0308 	and.w	r3, r3, #8
 8008362:	2b00      	cmp	r3, #0
 8008364:	d004      	beq.n	8008370 <HAL_RCC_OscConfig+0x7c>
 8008366:	4b7f      	ldr	r3, [pc, #508]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800836e:	e005      	b.n	800837c <HAL_RCC_OscConfig+0x88>
 8008370:	4b7c      	ldr	r3, [pc, #496]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008376:	091b      	lsrs	r3, r3, #4
 8008378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800837c:	4293      	cmp	r3, r2
 800837e:	d223      	bcs.n	80083c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fd55 	bl	8008e34 <RCC_SetFlashLatencyFromMSIRange>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e383      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008394:	4b73      	ldr	r3, [pc, #460]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a72      	ldr	r2, [pc, #456]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800839a:	f043 0308 	orr.w	r3, r3, #8
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	4b70      	ldr	r3, [pc, #448]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	496d      	ldr	r1, [pc, #436]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083b2:	4b6c      	ldr	r3, [pc, #432]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	4968      	ldr	r1, [pc, #416]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	604b      	str	r3, [r1, #4]
 80083c6:	e025      	b.n	8008414 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083c8:	4b66      	ldr	r3, [pc, #408]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a65      	ldr	r2, [pc, #404]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083ce:	f043 0308 	orr.w	r3, r3, #8
 80083d2:	6013      	str	r3, [r2, #0]
 80083d4:	4b63      	ldr	r3, [pc, #396]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	4960      	ldr	r1, [pc, #384]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80083e6:	4b5f      	ldr	r3, [pc, #380]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	021b      	lsls	r3, r3, #8
 80083f4:	495b      	ldr	r1, [pc, #364]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d109      	bne.n	8008414 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 fd15 	bl	8008e34 <RCC_SetFlashLatencyFromMSIRange>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e343      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008414:	f000 fc4a 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 8008418:	4602      	mov	r2, r0
 800841a:	4b52      	ldr	r3, [pc, #328]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	091b      	lsrs	r3, r3, #4
 8008420:	f003 030f 	and.w	r3, r3, #15
 8008424:	4950      	ldr	r1, [pc, #320]	; (8008568 <HAL_RCC_OscConfig+0x274>)
 8008426:	5ccb      	ldrb	r3, [r1, r3]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	fa22 f303 	lsr.w	r3, r2, r3
 8008430:	4a4e      	ldr	r2, [pc, #312]	; (800856c <HAL_RCC_OscConfig+0x278>)
 8008432:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008434:	4b4e      	ldr	r3, [pc, #312]	; (8008570 <HAL_RCC_OscConfig+0x27c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd fa85 	bl	8005948 <HAL_InitTick>
 800843e:	4603      	mov	r3, r0
 8008440:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d052      	beq.n	80084ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	e327      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d032      	beq.n	80084ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008454:	4b43      	ldr	r3, [pc, #268]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a42      	ldr	r2, [pc, #264]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008460:	f7fd fac2 	bl	80059e8 <HAL_GetTick>
 8008464:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008468:	f7fd fabe 	bl	80059e8 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e310      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800847a:	4b3a      	ldr	r3, [pc, #232]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d0f0      	beq.n	8008468 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008486:	4b37      	ldr	r3, [pc, #220]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a36      	ldr	r2, [pc, #216]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800848c:	f043 0308 	orr.w	r3, r3, #8
 8008490:	6013      	str	r3, [r2, #0]
 8008492:	4b34      	ldr	r3, [pc, #208]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	4931      	ldr	r1, [pc, #196]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80084a4:	4b2f      	ldr	r3, [pc, #188]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	021b      	lsls	r3, r3, #8
 80084b2:	492c      	ldr	r1, [pc, #176]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	604b      	str	r3, [r1, #4]
 80084b8:	e01a      	b.n	80084f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80084ba:	4b2a      	ldr	r3, [pc, #168]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a29      	ldr	r2, [pc, #164]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80084c6:	f7fd fa8f 	bl	80059e8 <HAL_GetTick>
 80084ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80084cc:	e008      	b.n	80084e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80084ce:	f7fd fa8b 	bl	80059e8 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d901      	bls.n	80084e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e2dd      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80084e0:	4b20      	ldr	r3, [pc, #128]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1f0      	bne.n	80084ce <HAL_RCC_OscConfig+0x1da>
 80084ec:	e000      	b.n	80084f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80084ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d074      	beq.n	80085e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2b08      	cmp	r3, #8
 8008500:	d005      	beq.n	800850e <HAL_RCC_OscConfig+0x21a>
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b0c      	cmp	r3, #12
 8008506:	d10e      	bne.n	8008526 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	2b03      	cmp	r3, #3
 800850c:	d10b      	bne.n	8008526 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800850e:	4b15      	ldr	r3, [pc, #84]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d064      	beq.n	80085e4 <HAL_RCC_OscConfig+0x2f0>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d160      	bne.n	80085e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e2ba      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800852e:	d106      	bne.n	800853e <HAL_RCC_OscConfig+0x24a>
 8008530:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a0b      	ldr	r2, [pc, #44]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008536:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	e026      	b.n	800858c <HAL_RCC_OscConfig+0x298>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008546:	d115      	bne.n	8008574 <HAL_RCC_OscConfig+0x280>
 8008548:	4b06      	ldr	r3, [pc, #24]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a05      	ldr	r2, [pc, #20]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800854e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	4b03      	ldr	r3, [pc, #12]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a02      	ldr	r2, [pc, #8]	; (8008564 <HAL_RCC_OscConfig+0x270>)
 800855a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	e014      	b.n	800858c <HAL_RCC_OscConfig+0x298>
 8008562:	bf00      	nop
 8008564:	40021000 	.word	0x40021000
 8008568:	08011a94 	.word	0x08011a94
 800856c:	20000000 	.word	0x20000000
 8008570:	20000004 	.word	0x20000004
 8008574:	4ba0      	ldr	r3, [pc, #640]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a9f      	ldr	r2, [pc, #636]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800857a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	4b9d      	ldr	r3, [pc, #628]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a9c      	ldr	r2, [pc, #624]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800858a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d013      	beq.n	80085bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008594:	f7fd fa28 	bl	80059e8 <HAL_GetTick>
 8008598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800859a:	e008      	b.n	80085ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800859c:	f7fd fa24 	bl	80059e8 <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	2b64      	cmp	r3, #100	; 0x64
 80085a8:	d901      	bls.n	80085ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e276      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085ae:	4b92      	ldr	r3, [pc, #584]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0f0      	beq.n	800859c <HAL_RCC_OscConfig+0x2a8>
 80085ba:	e014      	b.n	80085e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085bc:	f7fd fa14 	bl	80059e8 <HAL_GetTick>
 80085c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085c2:	e008      	b.n	80085d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085c4:	f7fd fa10 	bl	80059e8 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b64      	cmp	r3, #100	; 0x64
 80085d0:	d901      	bls.n	80085d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	e262      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80085d6:	4b88      	ldr	r3, [pc, #544]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <HAL_RCC_OscConfig+0x2d0>
 80085e2:	e000      	b.n	80085e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d060      	beq.n	80086b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d005      	beq.n	8008604 <HAL_RCC_OscConfig+0x310>
 80085f8:	69bb      	ldr	r3, [r7, #24]
 80085fa:	2b0c      	cmp	r3, #12
 80085fc:	d119      	bne.n	8008632 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b02      	cmp	r3, #2
 8008602:	d116      	bne.n	8008632 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008604:	4b7c      	ldr	r3, [pc, #496]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800860c:	2b00      	cmp	r3, #0
 800860e:	d005      	beq.n	800861c <HAL_RCC_OscConfig+0x328>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e23f      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800861c:	4b76      	ldr	r3, [pc, #472]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	061b      	lsls	r3, r3, #24
 800862a:	4973      	ldr	r1, [pc, #460]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800862c:	4313      	orrs	r3, r2
 800862e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008630:	e040      	b.n	80086b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d023      	beq.n	8008682 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800863a:	4b6f      	ldr	r3, [pc, #444]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a6e      	ldr	r2, [pc, #440]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008646:	f7fd f9cf 	bl	80059e8 <HAL_GetTick>
 800864a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800864e:	f7fd f9cb 	bl	80059e8 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e21d      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008660:	4b65      	ldr	r3, [pc, #404]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0f0      	beq.n	800864e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800866c:	4b62      	ldr	r3, [pc, #392]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	061b      	lsls	r3, r3, #24
 800867a:	495f      	ldr	r1, [pc, #380]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800867c:	4313      	orrs	r3, r2
 800867e:	604b      	str	r3, [r1, #4]
 8008680:	e018      	b.n	80086b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008682:	4b5d      	ldr	r3, [pc, #372]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a5c      	ldr	r2, [pc, #368]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800868c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868e:	f7fd f9ab 	bl	80059e8 <HAL_GetTick>
 8008692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008696:	f7fd f9a7 	bl	80059e8 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e1f9      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80086a8:	4b53      	ldr	r3, [pc, #332]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1f0      	bne.n	8008696 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d03c      	beq.n	800873a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	695b      	ldr	r3, [r3, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d01c      	beq.n	8008702 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086c8:	4b4b      	ldr	r3, [pc, #300]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80086ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ce:	4a4a      	ldr	r2, [pc, #296]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80086d0:	f043 0301 	orr.w	r3, r3, #1
 80086d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d8:	f7fd f986 	bl	80059e8 <HAL_GetTick>
 80086dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086de:	e008      	b.n	80086f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80086e0:	f7fd f982 	bl	80059e8 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e1d4      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80086f2:	4b41      	ldr	r3, [pc, #260]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80086f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d0ef      	beq.n	80086e0 <HAL_RCC_OscConfig+0x3ec>
 8008700:	e01b      	b.n	800873a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008702:	4b3d      	ldr	r3, [pc, #244]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008708:	4a3b      	ldr	r2, [pc, #236]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008712:	f7fd f969 	bl	80059e8 <HAL_GetTick>
 8008716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008718:	e008      	b.n	800872c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800871a:	f7fd f965 	bl	80059e8 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e1b7      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800872c:	4b32      	ldr	r3, [pc, #200]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800872e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1ef      	bne.n	800871a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 80a6 	beq.w	8008894 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008748:	2300      	movs	r3, #0
 800874a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800874c:	4b2a      	ldr	r3, [pc, #168]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800874e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10d      	bne.n	8008774 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008758:	4b27      	ldr	r3, [pc, #156]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800875a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875c:	4a26      	ldr	r2, [pc, #152]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 800875e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008762:	6593      	str	r3, [r2, #88]	; 0x58
 8008764:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 8008766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800876c:	60bb      	str	r3, [r7, #8]
 800876e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008770:	2301      	movs	r3, #1
 8008772:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008774:	4b21      	ldr	r3, [pc, #132]	; (80087fc <HAL_RCC_OscConfig+0x508>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877c:	2b00      	cmp	r3, #0
 800877e:	d118      	bne.n	80087b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008780:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <HAL_RCC_OscConfig+0x508>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a1d      	ldr	r2, [pc, #116]	; (80087fc <HAL_RCC_OscConfig+0x508>)
 8008786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800878a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800878c:	f7fd f92c 	bl	80059e8 <HAL_GetTick>
 8008790:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008792:	e008      	b.n	80087a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008794:	f7fd f928 	bl	80059e8 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b02      	cmp	r3, #2
 80087a0:	d901      	bls.n	80087a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e17a      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <HAL_RCC_OscConfig+0x508>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f0      	beq.n	8008794 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d108      	bne.n	80087cc <HAL_RCC_OscConfig+0x4d8>
 80087ba:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80087bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c0:	4a0d      	ldr	r2, [pc, #52]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087ca:	e029      	b.n	8008820 <HAL_RCC_OscConfig+0x52c>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	689b      	ldr	r3, [r3, #8]
 80087d0:	2b05      	cmp	r3, #5
 80087d2:	d115      	bne.n	8008800 <HAL_RCC_OscConfig+0x50c>
 80087d4:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80087d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087da:	4a07      	ldr	r2, [pc, #28]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80087dc:	f043 0304 	orr.w	r3, r3, #4
 80087e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ea:	4a03      	ldr	r2, [pc, #12]	; (80087f8 <HAL_RCC_OscConfig+0x504>)
 80087ec:	f043 0301 	orr.w	r3, r3, #1
 80087f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80087f4:	e014      	b.n	8008820 <HAL_RCC_OscConfig+0x52c>
 80087f6:	bf00      	nop
 80087f8:	40021000 	.word	0x40021000
 80087fc:	40007000 	.word	0x40007000
 8008800:	4b9c      	ldr	r3, [pc, #624]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008806:	4a9b      	ldr	r2, [pc, #620]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008808:	f023 0301 	bic.w	r3, r3, #1
 800880c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008810:	4b98      	ldr	r3, [pc, #608]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008816:	4a97      	ldr	r2, [pc, #604]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008818:	f023 0304 	bic.w	r3, r3, #4
 800881c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d016      	beq.n	8008856 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008828:	f7fd f8de 	bl	80059e8 <HAL_GetTick>
 800882c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800882e:	e00a      	b.n	8008846 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008830:	f7fd f8da 	bl	80059e8 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	f241 3288 	movw	r2, #5000	; 0x1388
 800883e:	4293      	cmp	r3, r2
 8008840:	d901      	bls.n	8008846 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e12a      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008846:	4b8b      	ldr	r3, [pc, #556]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d0ed      	beq.n	8008830 <HAL_RCC_OscConfig+0x53c>
 8008854:	e015      	b.n	8008882 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008856:	f7fd f8c7 	bl	80059e8 <HAL_GetTick>
 800885a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800885c:	e00a      	b.n	8008874 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800885e:	f7fd f8c3 	bl	80059e8 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	f241 3288 	movw	r2, #5000	; 0x1388
 800886c:	4293      	cmp	r3, r2
 800886e:	d901      	bls.n	8008874 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e113      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008874:	4b7f      	ldr	r3, [pc, #508]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887a:	f003 0302 	and.w	r3, r3, #2
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1ed      	bne.n	800885e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008882:	7ffb      	ldrb	r3, [r7, #31]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d105      	bne.n	8008894 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008888:	4b7a      	ldr	r3, [pc, #488]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 800888a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800888c:	4a79      	ldr	r2, [pc, #484]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 800888e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008892:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 80fe 	beq.w	8008a9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	f040 80d0 	bne.w	8008a48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80088a8:	4b72      	ldr	r3, [pc, #456]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f003 0203 	and.w	r2, r3, #3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d130      	bne.n	800891e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	3b01      	subs	r3, #1
 80088c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d127      	bne.n	800891e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80088da:	429a      	cmp	r2, r3
 80088dc:	d11f      	bne.n	800891e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088e8:	2a07      	cmp	r2, #7
 80088ea:	bf14      	ite	ne
 80088ec:	2201      	movne	r2, #1
 80088ee:	2200      	moveq	r2, #0
 80088f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d113      	bne.n	800891e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	3b01      	subs	r3, #1
 8008904:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008906:	429a      	cmp	r2, r3
 8008908:	d109      	bne.n	800891e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	3b01      	subs	r3, #1
 8008918:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800891a:	429a      	cmp	r2, r3
 800891c:	d06e      	beq.n	80089fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2b0c      	cmp	r3, #12
 8008922:	d069      	beq.n	80089f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008924:	4b53      	ldr	r3, [pc, #332]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d105      	bne.n	800893c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008930:	4b50      	ldr	r3, [pc, #320]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d001      	beq.n	8008940 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e0ad      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008940:	4b4c      	ldr	r3, [pc, #304]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a4b      	ldr	r2, [pc, #300]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800894a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800894c:	f7fd f84c 	bl	80059e8 <HAL_GetTick>
 8008950:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008954:	f7fd f848 	bl	80059e8 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e09a      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008966:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f0      	bne.n	8008954 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008972:	4b40      	ldr	r3, [pc, #256]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	4b40      	ldr	r3, [pc, #256]	; (8008a78 <HAL_RCC_OscConfig+0x784>)
 8008978:	4013      	ands	r3, r2
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008982:	3a01      	subs	r2, #1
 8008984:	0112      	lsls	r2, r2, #4
 8008986:	4311      	orrs	r1, r2
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800898c:	0212      	lsls	r2, r2, #8
 800898e:	4311      	orrs	r1, r2
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008994:	0852      	lsrs	r2, r2, #1
 8008996:	3a01      	subs	r2, #1
 8008998:	0552      	lsls	r2, r2, #21
 800899a:	4311      	orrs	r1, r2
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80089a0:	0852      	lsrs	r2, r2, #1
 80089a2:	3a01      	subs	r2, #1
 80089a4:	0652      	lsls	r2, r2, #25
 80089a6:	4311      	orrs	r1, r2
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089ac:	0912      	lsrs	r2, r2, #4
 80089ae:	0452      	lsls	r2, r2, #17
 80089b0:	430a      	orrs	r2, r1
 80089b2:	4930      	ldr	r1, [pc, #192]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80089b8:	4b2e      	ldr	r3, [pc, #184]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a2d      	ldr	r2, [pc, #180]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80089be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80089c4:	4b2b      	ldr	r3, [pc, #172]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	4a2a      	ldr	r2, [pc, #168]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80089ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80089d0:	f7fd f80a 	bl	80059e8 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d8:	f7fd f806 	bl	80059e8 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e058      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089ea:	4b22      	ldr	r3, [pc, #136]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0f0      	beq.n	80089d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80089f6:	e050      	b.n	8008a9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	e04f      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089fc:	4b1d      	ldr	r3, [pc, #116]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d148      	bne.n	8008a9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008a08:	4b1a      	ldr	r3, [pc, #104]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a19      	ldr	r2, [pc, #100]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a14:	4b17      	ldr	r3, [pc, #92]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	4a16      	ldr	r2, [pc, #88]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a20:	f7fc ffe2 	bl	80059e8 <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a28:	f7fc ffde 	bl	80059e8 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e030      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d0f0      	beq.n	8008a28 <HAL_RCC_OscConfig+0x734>
 8008a46:	e028      	b.n	8008a9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b0c      	cmp	r3, #12
 8008a4c:	d023      	beq.n	8008a96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a08      	ldr	r2, [pc, #32]	; (8008a74 <HAL_RCC_OscConfig+0x780>)
 8008a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5a:	f7fc ffc5 	bl	80059e8 <HAL_GetTick>
 8008a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a60:	e00c      	b.n	8008a7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a62:	f7fc ffc1 	bl	80059e8 <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d905      	bls.n	8008a7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e013      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
 8008a74:	40021000 	.word	0x40021000
 8008a78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a7c:	4b09      	ldr	r3, [pc, #36]	; (8008aa4 <HAL_RCC_OscConfig+0x7b0>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1ec      	bne.n	8008a62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008a88:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <HAL_RCC_OscConfig+0x7b0>)
 8008a8a:	68da      	ldr	r2, [r3, #12]
 8008a8c:	4905      	ldr	r1, [pc, #20]	; (8008aa4 <HAL_RCC_OscConfig+0x7b0>)
 8008a8e:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <HAL_RCC_OscConfig+0x7b4>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	60cb      	str	r3, [r1, #12]
 8008a94:	e001      	b.n	8008a9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3720      	adds	r7, #32
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	40021000 	.word	0x40021000
 8008aa8:	feeefffc 	.word	0xfeeefffc

08008aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0e7      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ac0:	4b75      	ldr	r3, [pc, #468]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d910      	bls.n	8008af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ace:	4b72      	ldr	r3, [pc, #456]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f023 0207 	bic.w	r2, r3, #7
 8008ad6:	4970      	ldr	r1, [pc, #448]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ade:	4b6e      	ldr	r3, [pc, #440]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d001      	beq.n	8008af0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008aec:	2301      	movs	r3, #1
 8008aee:	e0cf      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d010      	beq.n	8008b1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689a      	ldr	r2, [r3, #8]
 8008b00:	4b66      	ldr	r3, [pc, #408]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d908      	bls.n	8008b1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b0c:	4b63      	ldr	r3, [pc, #396]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	4960      	ldr	r1, [pc, #384]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d04c      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b03      	cmp	r3, #3
 8008b30:	d107      	bne.n	8008b42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b32:	4b5a      	ldr	r3, [pc, #360]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d121      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e0a6      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d107      	bne.n	8008b5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b4a:	4b54      	ldr	r3, [pc, #336]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d115      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e09a      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d107      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008b62:	4b4e      	ldr	r3, [pc, #312]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e08e      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b72:	4b4a      	ldr	r3, [pc, #296]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e086      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b82:	4b46      	ldr	r3, [pc, #280]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f023 0203 	bic.w	r2, r3, #3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	4943      	ldr	r1, [pc, #268]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b94:	f7fc ff28 	bl	80059e8 <HAL_GetTick>
 8008b98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b9c:	f7fc ff24 	bl	80059e8 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e06e      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb2:	4b3a      	ldr	r3, [pc, #232]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 020c 	and.w	r2, r3, #12
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d1eb      	bne.n	8008b9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d010      	beq.n	8008bf2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	4b31      	ldr	r3, [pc, #196]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d208      	bcs.n	8008bf2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008be0:	4b2e      	ldr	r3, [pc, #184]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	492b      	ldr	r1, [pc, #172]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf2:	4b29      	ldr	r3, [pc, #164]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 0307 	and.w	r3, r3, #7
 8008bfa:	683a      	ldr	r2, [r7, #0]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d210      	bcs.n	8008c22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c00:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f023 0207 	bic.w	r2, r3, #7
 8008c08:	4923      	ldr	r1, [pc, #140]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c10:	4b21      	ldr	r3, [pc, #132]	; (8008c98 <HAL_RCC_ClockConfig+0x1ec>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d001      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e036      	b.n	8008c90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0304 	and.w	r3, r3, #4
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d008      	beq.n	8008c40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c2e:	4b1b      	ldr	r3, [pc, #108]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	4918      	ldr	r1, [pc, #96]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d009      	beq.n	8008c60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c4c:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	00db      	lsls	r3, r3, #3
 8008c5a:	4910      	ldr	r1, [pc, #64]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c60:	f000 f824 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 8008c64:	4602      	mov	r2, r0
 8008c66:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <HAL_RCC_ClockConfig+0x1f0>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	091b      	lsrs	r3, r3, #4
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	490b      	ldr	r1, [pc, #44]	; (8008ca0 <HAL_RCC_ClockConfig+0x1f4>)
 8008c72:	5ccb      	ldrb	r3, [r1, r3]
 8008c74:	f003 031f 	and.w	r3, r3, #31
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7c:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <HAL_RCC_ClockConfig+0x1f8>)
 8008c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008c80:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <HAL_RCC_ClockConfig+0x1fc>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fc fe5f 	bl	8005948 <HAL_InitTick>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	40022000 	.word	0x40022000
 8008c9c:	40021000 	.word	0x40021000
 8008ca0:	08011a94 	.word	0x08011a94
 8008ca4:	20000000 	.word	0x20000000
 8008ca8:	20000004 	.word	0x20000004

08008cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b089      	sub	sp, #36	; 0x24
 8008cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cba:	4b3e      	ldr	r3, [pc, #248]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	f003 030c 	and.w	r3, r3, #12
 8008cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cc4:	4b3b      	ldr	r3, [pc, #236]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	f003 0303 	and.w	r3, r3, #3
 8008ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	2b0c      	cmp	r3, #12
 8008cd8:	d121      	bne.n	8008d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d11e      	bne.n	8008d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ce0:	4b34      	ldr	r3, [pc, #208]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d107      	bne.n	8008cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008cec:	4b31      	ldr	r3, [pc, #196]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	f003 030f 	and.w	r3, r3, #15
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	e005      	b.n	8008d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008cfc:	4b2d      	ldr	r3, [pc, #180]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	091b      	lsrs	r3, r3, #4
 8008d02:	f003 030f 	and.w	r3, r3, #15
 8008d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008d08:	4a2b      	ldr	r2, [pc, #172]	; (8008db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10d      	bne.n	8008d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008d1c:	e00a      	b.n	8008d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	2b04      	cmp	r3, #4
 8008d22:	d102      	bne.n	8008d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008d24:	4b25      	ldr	r3, [pc, #148]	; (8008dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8008d26:	61bb      	str	r3, [r7, #24]
 8008d28:	e004      	b.n	8008d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d101      	bne.n	8008d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008d30:	4b23      	ldr	r3, [pc, #140]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	2b0c      	cmp	r3, #12
 8008d38:	d134      	bne.n	8008da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d3a:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d003      	beq.n	8008d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d003      	beq.n	8008d58 <HAL_RCC_GetSysClockFreq+0xac>
 8008d50:	e005      	b.n	8008d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008d52:	4b1a      	ldr	r3, [pc, #104]	; (8008dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8008d54:	617b      	str	r3, [r7, #20]
      break;
 8008d56:	e005      	b.n	8008d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008d58:	4b19      	ldr	r3, [pc, #100]	; (8008dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008d5a:	617b      	str	r3, [r7, #20]
      break;
 8008d5c:	e002      	b.n	8008d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	617b      	str	r3, [r7, #20]
      break;
 8008d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d64:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	091b      	lsrs	r3, r3, #4
 8008d6a:	f003 0307 	and.w	r3, r3, #7
 8008d6e:	3301      	adds	r3, #1
 8008d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008d72:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	0a1b      	lsrs	r3, r3, #8
 8008d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	fb03 f202 	mul.w	r2, r3, r2
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	0e5b      	lsrs	r3, r3, #25
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	3301      	adds	r3, #1
 8008d96:	005b      	lsls	r3, r3, #1
 8008d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008da4:	69bb      	ldr	r3, [r7, #24]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3724      	adds	r7, #36	; 0x24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	40021000 	.word	0x40021000
 8008db8:	08011aac 	.word	0x08011aac
 8008dbc:	00f42400 	.word	0x00f42400
 8008dc0:	007a1200 	.word	0x007a1200

08008dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008dc8:	4b03      	ldr	r3, [pc, #12]	; (8008dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008dca:	681b      	ldr	r3, [r3, #0]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20000000 	.word	0x20000000

08008ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008de0:	f7ff fff0 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008de4:	4602      	mov	r2, r0
 8008de6:	4b06      	ldr	r3, [pc, #24]	; (8008e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	0a1b      	lsrs	r3, r3, #8
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	4904      	ldr	r1, [pc, #16]	; (8008e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008df2:	5ccb      	ldrb	r3, [r1, r3]
 8008df4:	f003 031f 	and.w	r3, r3, #31
 8008df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40021000 	.word	0x40021000
 8008e04:	08011aa4 	.word	0x08011aa4

08008e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008e0c:	f7ff ffda 	bl	8008dc4 <HAL_RCC_GetHCLKFreq>
 8008e10:	4602      	mov	r2, r0
 8008e12:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	0adb      	lsrs	r3, r3, #11
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	4904      	ldr	r1, [pc, #16]	; (8008e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008e1e:	5ccb      	ldrb	r3, [r1, r3]
 8008e20:	f003 031f 	and.w	r3, r3, #31
 8008e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	40021000 	.word	0x40021000
 8008e30:	08011aa4 	.word	0x08011aa4

08008e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008e40:	4b2a      	ldr	r3, [pc, #168]	; (8008eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d003      	beq.n	8008e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008e4c:	f7ff f9ee 	bl	800822c <HAL_PWREx_GetVoltageRange>
 8008e50:	6178      	str	r0, [r7, #20]
 8008e52:	e014      	b.n	8008e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008e54:	4b25      	ldr	r3, [pc, #148]	; (8008eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e58:	4a24      	ldr	r2, [pc, #144]	; (8008eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8008e60:	4b22      	ldr	r3, [pc, #136]	; (8008eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008e6c:	f7ff f9de 	bl	800822c <HAL_PWREx_GetVoltageRange>
 8008e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008e72:	4b1e      	ldr	r3, [pc, #120]	; (8008eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e76:	4a1d      	ldr	r2, [pc, #116]	; (8008eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e84:	d10b      	bne.n	8008e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2b80      	cmp	r3, #128	; 0x80
 8008e8a:	d919      	bls.n	8008ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2ba0      	cmp	r3, #160	; 0xa0
 8008e90:	d902      	bls.n	8008e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008e92:	2302      	movs	r3, #2
 8008e94:	613b      	str	r3, [r7, #16]
 8008e96:	e013      	b.n	8008ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e98:	2301      	movs	r3, #1
 8008e9a:	613b      	str	r3, [r7, #16]
 8008e9c:	e010      	b.n	8008ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b80      	cmp	r3, #128	; 0x80
 8008ea2:	d902      	bls.n	8008eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	e00a      	b.n	8008ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b80      	cmp	r3, #128	; 0x80
 8008eae:	d102      	bne.n	8008eb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008eb0:	2302      	movs	r3, #2
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	e004      	b.n	8008ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b70      	cmp	r3, #112	; 0x70
 8008eba:	d101      	bne.n	8008ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008ec0:	4b0b      	ldr	r3, [pc, #44]	; (8008ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f023 0207 	bic.w	r2, r3, #7
 8008ec8:	4909      	ldr	r1, [pc, #36]	; (8008ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d001      	beq.n	8008ee2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3718      	adds	r7, #24
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	40021000 	.word	0x40021000
 8008ef0:	40022000 	.word	0x40022000

08008ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008efc:	2300      	movs	r3, #0
 8008efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f00:	2300      	movs	r3, #0
 8008f02:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d041      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f18:	d02a      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008f1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008f1e:	d824      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f24:	d008      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008f26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f2a:	d81e      	bhi.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00a      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008f30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f34:	d010      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f36:	e018      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008f38:	4b86      	ldr	r3, [pc, #536]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4a85      	ldr	r2, [pc, #532]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f42:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f44:	e015      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	2100      	movs	r1, #0
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 fabb 	bl	80094c8 <RCCEx_PLLSAI1_Config>
 8008f52:	4603      	mov	r3, r0
 8008f54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f56:	e00c      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	3320      	adds	r3, #32
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fba6 	bl	80096b0 <RCCEx_PLLSAI2_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008f68:	e003      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8008f6e:	e000      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f72:	7cfb      	ldrb	r3, [r7, #19]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10b      	bne.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f78:	4b76      	ldr	r3, [pc, #472]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f86:	4973      	ldr	r1, [pc, #460]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008f8e:	e001      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f90:	7cfb      	ldrb	r3, [r7, #19]
 8008f92:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d041      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fa8:	d02a      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008faa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fae:	d824      	bhi.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fb4:	d008      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008fb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fba:	d81e      	bhi.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00a      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fc4:	d010      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008fc6:	e018      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008fc8:	4b62      	ldr	r3, [pc, #392]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	4a61      	ldr	r2, [pc, #388]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fd2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008fd4:	e015      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	3304      	adds	r3, #4
 8008fda:	2100      	movs	r1, #0
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fa73 	bl	80094c8 <RCCEx_PLLSAI1_Config>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008fe6:	e00c      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3320      	adds	r3, #32
 8008fec:	2100      	movs	r1, #0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fb5e 	bl	80096b0 <RCCEx_PLLSAI2_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ff8:	e003      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8008ffe:	e000      	b.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009000:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009002:	7cfb      	ldrb	r3, [r7, #19]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10b      	bne.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009008:	4b52      	ldr	r3, [pc, #328]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800900a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800900e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009016:	494f      	ldr	r1, [pc, #316]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009018:	4313      	orrs	r3, r2
 800901a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800901e:	e001      	b.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009020:	7cfb      	ldrb	r3, [r7, #19]
 8009022:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 80a0 	beq.w	8009172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009032:	2300      	movs	r3, #0
 8009034:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009036:	4b47      	ldr	r3, [pc, #284]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8009042:	2301      	movs	r3, #1
 8009044:	e000      	b.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8009046:	2300      	movs	r3, #0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00d      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800904c:	4b41      	ldr	r3, [pc, #260]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800904e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009050:	4a40      	ldr	r2, [pc, #256]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009056:	6593      	str	r3, [r2, #88]	; 0x58
 8009058:	4b3e      	ldr	r3, [pc, #248]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800905a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800905c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009064:	2301      	movs	r3, #1
 8009066:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009068:	4b3b      	ldr	r3, [pc, #236]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a3a      	ldr	r2, [pc, #232]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800906e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009072:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009074:	f7fc fcb8 	bl	80059e8 <HAL_GetTick>
 8009078:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800907a:	e009      	b.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800907c:	f7fc fcb4 	bl	80059e8 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d902      	bls.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	74fb      	strb	r3, [r7, #19]
        break;
 800908e:	e005      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009090:	4b31      	ldr	r3, [pc, #196]	; (8009158 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009098:	2b00      	cmp	r3, #0
 800909a:	d0ef      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800909c:	7cfb      	ldrb	r3, [r7, #19]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d15c      	bne.n	800915c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80090a2:	4b2c      	ldr	r3, [pc, #176]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d01f      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d019      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80090c0:	4b24      	ldr	r3, [pc, #144]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090cc:	4b21      	ldr	r3, [pc, #132]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d2:	4a20      	ldr	r2, [pc, #128]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090dc:	4b1d      	ldr	r3, [pc, #116]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e2:	4a1c      	ldr	r2, [pc, #112]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80090ec:	4a19      	ldr	r2, [pc, #100]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f003 0301 	and.w	r3, r3, #1
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d016      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fe:	f7fc fc73 	bl	80059e8 <HAL_GetTick>
 8009102:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009104:	e00b      	b.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009106:	f7fc fc6f 	bl	80059e8 <HAL_GetTick>
 800910a:	4602      	mov	r2, r0
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	1ad3      	subs	r3, r2, r3
 8009110:	f241 3288 	movw	r2, #5000	; 0x1388
 8009114:	4293      	cmp	r3, r2
 8009116:	d902      	bls.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	74fb      	strb	r3, [r7, #19]
            break;
 800911c:	e006      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800911e:	4b0d      	ldr	r3, [pc, #52]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0ec      	beq.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800912c:	7cfb      	ldrb	r3, [r7, #19]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10c      	bne.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009132:	4b08      	ldr	r3, [pc, #32]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009138:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009142:	4904      	ldr	r1, [pc, #16]	; (8009154 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009144:	4313      	orrs	r3, r2
 8009146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800914a:	e009      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800914c:	7cfb      	ldrb	r3, [r7, #19]
 800914e:	74bb      	strb	r3, [r7, #18]
 8009150:	e006      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8009152:	bf00      	nop
 8009154:	40021000 	.word	0x40021000
 8009158:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915c:	7cfb      	ldrb	r3, [r7, #19]
 800915e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009160:	7c7b      	ldrb	r3, [r7, #17]
 8009162:	2b01      	cmp	r3, #1
 8009164:	d105      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009166:	4b9e      	ldr	r3, [pc, #632]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800916a:	4a9d      	ldr	r2, [pc, #628]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800916c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009170:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0301 	and.w	r3, r3, #1
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00a      	beq.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800917e:	4b98      	ldr	r3, [pc, #608]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009184:	f023 0203 	bic.w	r2, r3, #3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	4994      	ldr	r1, [pc, #592]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800918e:	4313      	orrs	r3, r2
 8009190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0302 	and.w	r3, r3, #2
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091a0:	4b8f      	ldr	r3, [pc, #572]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a6:	f023 020c 	bic.w	r2, r3, #12
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ae:	498c      	ldr	r1, [pc, #560]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091b0:	4313      	orrs	r3, r2
 80091b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0304 	and.w	r3, r3, #4
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00a      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80091c2:	4b87      	ldr	r3, [pc, #540]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d0:	4983      	ldr	r1, [pc, #524]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0308 	and.w	r3, r3, #8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00a      	beq.n	80091fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80091e4:	4b7e      	ldr	r3, [pc, #504]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f2:	497b      	ldr	r1, [pc, #492]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0310 	and.w	r3, r3, #16
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00a      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009206:	4b76      	ldr	r3, [pc, #472]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009214:	4972      	ldr	r1, [pc, #456]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009216:	4313      	orrs	r3, r2
 8009218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00a      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009228:	4b6d      	ldr	r3, [pc, #436]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800922a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009236:	496a      	ldr	r1, [pc, #424]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009238:	4313      	orrs	r3, r2
 800923a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00a      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800924a:	4b65      	ldr	r3, [pc, #404]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800924c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009250:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009258:	4961      	ldr	r1, [pc, #388]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800925a:	4313      	orrs	r3, r2
 800925c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800926c:	4b5c      	ldr	r3, [pc, #368]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800926e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927a:	4959      	ldr	r1, [pc, #356]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800927c:	4313      	orrs	r3, r2
 800927e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800928e:	4b54      	ldr	r3, [pc, #336]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009294:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800929c:	4950      	ldr	r1, [pc, #320]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092b0:	4b4b      	ldr	r3, [pc, #300]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092be:	4948      	ldr	r1, [pc, #288]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092d2:	4b43      	ldr	r3, [pc, #268]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e0:	493f      	ldr	r1, [pc, #252]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d028      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80092f4:	4b3a      	ldr	r3, [pc, #232]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009302:	4937      	ldr	r1, [pc, #220]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009304:	4313      	orrs	r3, r2
 8009306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800930e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009312:	d106      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009314:	4b32      	ldr	r3, [pc, #200]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	4a31      	ldr	r2, [pc, #196]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800931a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800931e:	60d3      	str	r3, [r2, #12]
 8009320:	e011      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009326:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800932a:	d10c      	bne.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	2101      	movs	r1, #1
 8009332:	4618      	mov	r0, r3
 8009334:	f000 f8c8 	bl	80094c8 <RCCEx_PLLSAI1_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800933c:	7cfb      	ldrb	r3, [r7, #19]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8009342:	7cfb      	ldrb	r3, [r7, #19]
 8009344:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d028      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009352:	4b23      	ldr	r3, [pc, #140]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009358:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009360:	491f      	ldr	r1, [pc, #124]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009362:	4313      	orrs	r3, r2
 8009364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009370:	d106      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009372:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	4a1a      	ldr	r2, [pc, #104]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009378:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800937c:	60d3      	str	r3, [r2, #12]
 800937e:	e011      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009388:	d10c      	bne.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3304      	adds	r3, #4
 800938e:	2101      	movs	r1, #1
 8009390:	4618      	mov	r0, r3
 8009392:	f000 f899 	bl	80094c8 <RCCEx_PLLSAI1_Config>
 8009396:	4603      	mov	r3, r0
 8009398:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800939a:	7cfb      	ldrb	r3, [r7, #19]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80093a0:	7cfb      	ldrb	r3, [r7, #19]
 80093a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d02b      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093be:	4908      	ldr	r1, [pc, #32]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80093ce:	d109      	bne.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093d0:	4b03      	ldr	r3, [pc, #12]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	4a02      	ldr	r2, [pc, #8]	; (80093e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80093d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093da:	60d3      	str	r3, [r2, #12]
 80093dc:	e014      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80093de:	bf00      	nop
 80093e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093ec:	d10c      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3304      	adds	r3, #4
 80093f2:	2101      	movs	r1, #1
 80093f4:	4618      	mov	r0, r3
 80093f6:	f000 f867 	bl	80094c8 <RCCEx_PLLSAI1_Config>
 80093fa:	4603      	mov	r3, r0
 80093fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093fe:	7cfb      	ldrb	r3, [r7, #19]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009404:	7cfb      	ldrb	r3, [r7, #19]
 8009406:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d02f      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009414:	4b2b      	ldr	r3, [pc, #172]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009422:	4928      	ldr	r1, [pc, #160]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009424:	4313      	orrs	r3, r2
 8009426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800942e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009432:	d10d      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	3304      	adds	r3, #4
 8009438:	2102      	movs	r1, #2
 800943a:	4618      	mov	r0, r3
 800943c:	f000 f844 	bl	80094c8 <RCCEx_PLLSAI1_Config>
 8009440:	4603      	mov	r3, r0
 8009442:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009444:	7cfb      	ldrb	r3, [r7, #19]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d014      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800944a:	7cfb      	ldrb	r3, [r7, #19]
 800944c:	74bb      	strb	r3, [r7, #18]
 800944e:	e011      	b.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009458:	d10c      	bne.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3320      	adds	r3, #32
 800945e:	2102      	movs	r1, #2
 8009460:	4618      	mov	r0, r3
 8009462:	f000 f925 	bl	80096b0 <RCCEx_PLLSAI2_Config>
 8009466:	4603      	mov	r3, r0
 8009468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800946a:	7cfb      	ldrb	r3, [r7, #19]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009470:	7cfb      	ldrb	r3, [r7, #19]
 8009472:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009480:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009486:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800948e:	490d      	ldr	r1, [pc, #52]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009490:	4313      	orrs	r3, r2
 8009492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00b      	beq.n	80094ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80094a2:	4b08      	ldr	r3, [pc, #32]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094b2:	4904      	ldr	r1, [pc, #16]	; (80094c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80094b4:	4313      	orrs	r3, r2
 80094b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80094ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	40021000 	.word	0x40021000

080094c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80094d6:	4b75      	ldr	r3, [pc, #468]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d018      	beq.n	8009514 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80094e2:	4b72      	ldr	r3, [pc, #456]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f003 0203 	and.w	r2, r3, #3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d10d      	bne.n	800950e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
       ||
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80094fa:	4b6c      	ldr	r3, [pc, #432]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	091b      	lsrs	r3, r3, #4
 8009500:	f003 0307 	and.w	r3, r3, #7
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
       ||
 800950a:	429a      	cmp	r2, r3
 800950c:	d047      	beq.n	800959e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	73fb      	strb	r3, [r7, #15]
 8009512:	e044      	b.n	800959e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2b03      	cmp	r3, #3
 800951a:	d018      	beq.n	800954e <RCCEx_PLLSAI1_Config+0x86>
 800951c:	2b03      	cmp	r3, #3
 800951e:	d825      	bhi.n	800956c <RCCEx_PLLSAI1_Config+0xa4>
 8009520:	2b01      	cmp	r3, #1
 8009522:	d002      	beq.n	800952a <RCCEx_PLLSAI1_Config+0x62>
 8009524:	2b02      	cmp	r3, #2
 8009526:	d009      	beq.n	800953c <RCCEx_PLLSAI1_Config+0x74>
 8009528:	e020      	b.n	800956c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800952a:	4b60      	ldr	r3, [pc, #384]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0302 	and.w	r3, r3, #2
 8009532:	2b00      	cmp	r3, #0
 8009534:	d11d      	bne.n	8009572 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800953a:	e01a      	b.n	8009572 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800953c:	4b5b      	ldr	r3, [pc, #364]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009544:	2b00      	cmp	r3, #0
 8009546:	d116      	bne.n	8009576 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800954c:	e013      	b.n	8009576 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800954e:	4b57      	ldr	r3, [pc, #348]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d10f      	bne.n	800957a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800955a:	4b54      	ldr	r3, [pc, #336]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800956a:	e006      	b.n	800957a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	73fb      	strb	r3, [r7, #15]
      break;
 8009570:	e004      	b.n	800957c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009572:	bf00      	nop
 8009574:	e002      	b.n	800957c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009576:	bf00      	nop
 8009578:	e000      	b.n	800957c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800957a:	bf00      	nop
    }

    if(status == HAL_OK)
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10d      	bne.n	800959e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009582:	4b4a      	ldr	r3, [pc, #296]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6819      	ldr	r1, [r3, #0]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	3b01      	subs	r3, #1
 8009594:	011b      	lsls	r3, r3, #4
 8009596:	430b      	orrs	r3, r1
 8009598:	4944      	ldr	r1, [pc, #272]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800959a:	4313      	orrs	r3, r2
 800959c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800959e:	7bfb      	ldrb	r3, [r7, #15]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d17d      	bne.n	80096a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80095a4:	4b41      	ldr	r3, [pc, #260]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a40      	ldr	r2, [pc, #256]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80095aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80095ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095b0:	f7fc fa1a 	bl	80059e8 <HAL_GetTick>
 80095b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80095b6:	e009      	b.n	80095cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80095b8:	f7fc fa16 	bl	80059e8 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d902      	bls.n	80095cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	73fb      	strb	r3, [r7, #15]
        break;
 80095ca:	e005      	b.n	80095d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80095cc:	4b37      	ldr	r3, [pc, #220]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d1ef      	bne.n	80095b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d160      	bne.n	80096a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d111      	bne.n	8009608 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095e4:	4b31      	ldr	r3, [pc, #196]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80095ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6892      	ldr	r2, [r2, #8]
 80095f4:	0211      	lsls	r1, r2, #8
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	68d2      	ldr	r2, [r2, #12]
 80095fa:	0912      	lsrs	r2, r2, #4
 80095fc:	0452      	lsls	r2, r2, #17
 80095fe:	430a      	orrs	r2, r1
 8009600:	492a      	ldr	r1, [pc, #168]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009602:	4313      	orrs	r3, r2
 8009604:	610b      	str	r3, [r1, #16]
 8009606:	e027      	b.n	8009658 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d112      	bne.n	8009634 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800960e:	4b27      	ldr	r3, [pc, #156]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009616:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	6892      	ldr	r2, [r2, #8]
 800961e:	0211      	lsls	r1, r2, #8
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	6912      	ldr	r2, [r2, #16]
 8009624:	0852      	lsrs	r2, r2, #1
 8009626:	3a01      	subs	r2, #1
 8009628:	0552      	lsls	r2, r2, #21
 800962a:	430a      	orrs	r2, r1
 800962c:	491f      	ldr	r1, [pc, #124]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800962e:	4313      	orrs	r3, r2
 8009630:	610b      	str	r3, [r1, #16]
 8009632:	e011      	b.n	8009658 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009634:	4b1d      	ldr	r3, [pc, #116]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800963c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	6892      	ldr	r2, [r2, #8]
 8009644:	0211      	lsls	r1, r2, #8
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6952      	ldr	r2, [r2, #20]
 800964a:	0852      	lsrs	r2, r2, #1
 800964c:	3a01      	subs	r2, #1
 800964e:	0652      	lsls	r2, r2, #25
 8009650:	430a      	orrs	r2, r1
 8009652:	4916      	ldr	r1, [pc, #88]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009654:	4313      	orrs	r3, r2
 8009656:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009658:	4b14      	ldr	r3, [pc, #80]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a13      	ldr	r2, [pc, #76]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800965e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009662:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009664:	f7fc f9c0 	bl	80059e8 <HAL_GetTick>
 8009668:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800966a:	e009      	b.n	8009680 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800966c:	f7fc f9bc 	bl	80059e8 <HAL_GetTick>
 8009670:	4602      	mov	r2, r0
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	2b02      	cmp	r3, #2
 8009678:	d902      	bls.n	8009680 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	73fb      	strb	r3, [r7, #15]
          break;
 800967e:	e005      	b.n	800968c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009680:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d0ef      	beq.n	800966c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d106      	bne.n	80096a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009692:	4b06      	ldr	r3, [pc, #24]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8009694:	691a      	ldr	r2, [r3, #16]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	4904      	ldr	r1, [pc, #16]	; (80096ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800969c:	4313      	orrs	r3, r2
 800969e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	40021000 	.word	0x40021000

080096b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80096be:	4b6a      	ldr	r3, [pc, #424]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d018      	beq.n	80096fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80096ca:	4b67      	ldr	r3, [pc, #412]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f003 0203 	and.w	r2, r3, #3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d10d      	bne.n	80096f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
       ||
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80096e2:	4b61      	ldr	r3, [pc, #388]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	091b      	lsrs	r3, r3, #4
 80096e8:	f003 0307 	and.w	r3, r3, #7
 80096ec:	1c5a      	adds	r2, r3, #1
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
       ||
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d047      	beq.n	8009786 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	73fb      	strb	r3, [r7, #15]
 80096fa:	e044      	b.n	8009786 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2b03      	cmp	r3, #3
 8009702:	d018      	beq.n	8009736 <RCCEx_PLLSAI2_Config+0x86>
 8009704:	2b03      	cmp	r3, #3
 8009706:	d825      	bhi.n	8009754 <RCCEx_PLLSAI2_Config+0xa4>
 8009708:	2b01      	cmp	r3, #1
 800970a:	d002      	beq.n	8009712 <RCCEx_PLLSAI2_Config+0x62>
 800970c:	2b02      	cmp	r3, #2
 800970e:	d009      	beq.n	8009724 <RCCEx_PLLSAI2_Config+0x74>
 8009710:	e020      	b.n	8009754 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009712:	4b55      	ldr	r3, [pc, #340]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b00      	cmp	r3, #0
 800971c:	d11d      	bne.n	800975a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009722:	e01a      	b.n	800975a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009724:	4b50      	ldr	r3, [pc, #320]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800972c:	2b00      	cmp	r3, #0
 800972e:	d116      	bne.n	800975e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009734:	e013      	b.n	800975e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009736:	4b4c      	ldr	r3, [pc, #304]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10f      	bne.n	8009762 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009742:	4b49      	ldr	r3, [pc, #292]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009752:	e006      	b.n	8009762 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	73fb      	strb	r3, [r7, #15]
      break;
 8009758:	e004      	b.n	8009764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800975a:	bf00      	nop
 800975c:	e002      	b.n	8009764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800975e:	bf00      	nop
 8009760:	e000      	b.n	8009764 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009762:	bf00      	nop
    }

    if(status == HAL_OK)
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10d      	bne.n	8009786 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800976a:	4b3f      	ldr	r3, [pc, #252]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6819      	ldr	r1, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	3b01      	subs	r3, #1
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	430b      	orrs	r3, r1
 8009780:	4939      	ldr	r1, [pc, #228]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009782:	4313      	orrs	r3, r2
 8009784:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d167      	bne.n	800985c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800978c:	4b36      	ldr	r3, [pc, #216]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a35      	ldr	r2, [pc, #212]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009796:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009798:	f7fc f926 	bl	80059e8 <HAL_GetTick>
 800979c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800979e:	e009      	b.n	80097b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80097a0:	f7fc f922 	bl	80059e8 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d902      	bls.n	80097b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	73fb      	strb	r3, [r7, #15]
        break;
 80097b2:	e005      	b.n	80097c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80097b4:	4b2c      	ldr	r3, [pc, #176]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d1ef      	bne.n	80097a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d14a      	bne.n	800985c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d111      	bne.n	80097f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097cc:	4b26      	ldr	r3, [pc, #152]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80097d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d8:	687a      	ldr	r2, [r7, #4]
 80097da:	6892      	ldr	r2, [r2, #8]
 80097dc:	0211      	lsls	r1, r2, #8
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	68d2      	ldr	r2, [r2, #12]
 80097e2:	0912      	lsrs	r2, r2, #4
 80097e4:	0452      	lsls	r2, r2, #17
 80097e6:	430a      	orrs	r2, r1
 80097e8:	491f      	ldr	r1, [pc, #124]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	614b      	str	r3, [r1, #20]
 80097ee:	e011      	b.n	8009814 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80097f0:	4b1d      	ldr	r3, [pc, #116]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 80097f2:	695b      	ldr	r3, [r3, #20]
 80097f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80097f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	6892      	ldr	r2, [r2, #8]
 8009800:	0211      	lsls	r1, r2, #8
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	6912      	ldr	r2, [r2, #16]
 8009806:	0852      	lsrs	r2, r2, #1
 8009808:	3a01      	subs	r2, #1
 800980a:	0652      	lsls	r2, r2, #25
 800980c:	430a      	orrs	r2, r1
 800980e:	4916      	ldr	r1, [pc, #88]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009810:	4313      	orrs	r3, r2
 8009812:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009814:	4b14      	ldr	r3, [pc, #80]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a13      	ldr	r2, [pc, #76]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800981a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800981e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009820:	f7fc f8e2 	bl	80059e8 <HAL_GetTick>
 8009824:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009826:	e009      	b.n	800983c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009828:	f7fc f8de 	bl	80059e8 <HAL_GetTick>
 800982c:	4602      	mov	r2, r0
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	2b02      	cmp	r3, #2
 8009834:	d902      	bls.n	800983c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009836:	2303      	movs	r3, #3
 8009838:	73fb      	strb	r3, [r7, #15]
          break;
 800983a:	e005      	b.n	8009848 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800983c:	4b0a      	ldr	r3, [pc, #40]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d0ef      	beq.n	8009828 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800984e:	4b06      	ldr	r3, [pc, #24]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009850:	695a      	ldr	r2, [r3, #20]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	4904      	ldr	r1, [pc, #16]	; (8009868 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009858:	4313      	orrs	r3, r2
 800985a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800985c:	7bfb      	ldrb	r3, [r7, #15]
}
 800985e:	4618      	mov	r0, r3
 8009860:	3710      	adds	r7, #16
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	40021000 	.word	0x40021000

0800986c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d101      	bne.n	800987e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e095      	b.n	80099aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	2b00      	cmp	r3, #0
 8009884:	d108      	bne.n	8009898 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800988e:	d009      	beq.n	80098a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	61da      	str	r2, [r3, #28]
 8009896:	e005      	b.n	80098a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7f8 feb4 	bl	800262c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2202      	movs	r2, #2
 80098c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098e4:	d902      	bls.n	80098ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80098e6:	2300      	movs	r3, #0
 80098e8:	60fb      	str	r3, [r7, #12]
 80098ea:	e002      	b.n	80098f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80098ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80098fa:	d007      	beq.n	800990c <HAL_SPI_Init+0xa0>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009904:	d002      	beq.n	800990c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800991c:	431a      	orrs	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	431a      	orrs	r2, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	431a      	orrs	r2, r3
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800993a:	431a      	orrs	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994e:	ea42 0103 	orr.w	r1, r2, r3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	0c1b      	lsrs	r3, r3, #16
 8009968:	f003 0204 	and.w	r2, r3, #4
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	f003 0310 	and.w	r3, r3, #16
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997a:	f003 0308 	and.w	r3, r3, #8
 800997e:	431a      	orrs	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009988:	ea42 0103 	orr.w	r1, r2, r3
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
	...

080099b4 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80099c0:	2300      	movs	r3, #0
 80099c2:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d102      	bne.n	80099d0 <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	73fb      	strb	r3, [r7, #15]
 80099ce:	e061      	b.n	8009a94 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d106      	bne.n	80099ea <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7f8 fed1 	bl	800278c <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2202      	movs	r2, #2
 80099ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f022 0220 	bic.w	r2, r2, #32
 8009a00:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f240 129f 	movw	r2, #415	; 0x19f
 8009a0a:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	f023 0102 	bic.w	r1, r3, #2
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	685a      	ldr	r2, [r3, #4]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	625a      	str	r2, [r3, #36]	; 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d112      	bne.n	8009a50 <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 8009a2a:	4b1d      	ldr	r3, [pc, #116]	; (8009aa0 <HAL_SWPMI_Init+0xec>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <HAL_SWPMI_Init+0xf0>)
 8009a30:	fba2 2303 	umull	r2, r3, r2, r3
 8009a34:	0d1b      	lsrs	r3, r3, #20
 8009a36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009a3a:	fb02 f303 	mul.w	r3, r2, r3
 8009a3e:	3396      	adds	r3, #150	; 0x96
 8009a40:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 8009a42:	e002      	b.n	8009a4a <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1f9      	bne.n	8009a44 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	6892      	ldr	r2, [r2, #8]
 8009a58:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f023 010f 	bic.w	r1, r3, #15
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68da      	ldr	r2, [r3, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	639a      	str	r2, [r3, #56]	; 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 0220 	orr.w	r2, r2, #32
 8009a92:	601a      	str	r2, [r3, #0]
  }

  return status;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20000000 	.word	0x20000000
 8009aa4:	431bde83 	.word	0x431bde83

08009aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e049      	b.n	8009b4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d106      	bne.n	8009ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7f8 ff00 	bl	80028d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2202      	movs	r2, #2
 8009ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	4610      	mov	r0, r2
 8009ae8:	f000 fb1a 	bl	800a120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e049      	b.n	8009bfc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f841 	bl	8009c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2202      	movs	r2, #2
 8009b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	3304      	adds	r3, #4
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f000 fac3 	bl	800a120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009c0c:	bf00      	nop
 8009c0e:	370c      	adds	r7, #12
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b086      	sub	sp, #24
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d101      	bne.n	8009c2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e097      	b.n	8009d5c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d106      	bne.n	8009c46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7f8 fe03 	bl	800284c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2202      	movs	r2, #2
 8009c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	6812      	ldr	r2, [r2, #0]
 8009c58:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	f000 fa57 	bl	800a120 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	699b      	ldr	r3, [r3, #24]
 8009c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6a1b      	ldr	r3, [r3, #32]
 8009c88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c9a:	f023 0303 	bic.w	r3, r3, #3
 8009c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689a      	ldr	r2, [r3, #8]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	021b      	lsls	r3, r3, #8
 8009caa:	4313      	orrs	r3, r2
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009cb8:	f023 030c 	bic.w	r3, r3, #12
 8009cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	021b      	lsls	r3, r3, #8
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	011a      	lsls	r2, r3, #4
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	031b      	lsls	r3, r3, #12
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	693a      	ldr	r2, [r7, #16]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009cf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009cfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	695b      	ldr	r3, [r3, #20]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	693a      	ldr	r2, [r7, #16]
 8009d20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d101      	bne.n	8009d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e0ff      	b.n	8009f82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b14      	cmp	r3, #20
 8009d8e:	f200 80f0 	bhi.w	8009f72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d92:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009ded 	.word	0x08009ded
 8009d9c:	08009f73 	.word	0x08009f73
 8009da0:	08009f73 	.word	0x08009f73
 8009da4:	08009f73 	.word	0x08009f73
 8009da8:	08009e2d 	.word	0x08009e2d
 8009dac:	08009f73 	.word	0x08009f73
 8009db0:	08009f73 	.word	0x08009f73
 8009db4:	08009f73 	.word	0x08009f73
 8009db8:	08009e6f 	.word	0x08009e6f
 8009dbc:	08009f73 	.word	0x08009f73
 8009dc0:	08009f73 	.word	0x08009f73
 8009dc4:	08009f73 	.word	0x08009f73
 8009dc8:	08009eaf 	.word	0x08009eaf
 8009dcc:	08009f73 	.word	0x08009f73
 8009dd0:	08009f73 	.word	0x08009f73
 8009dd4:	08009f73 	.word	0x08009f73
 8009dd8:	08009ef1 	.word	0x08009ef1
 8009ddc:	08009f73 	.word	0x08009f73
 8009de0:	08009f73 	.word	0x08009f73
 8009de4:	08009f73 	.word	0x08009f73
 8009de8:	08009f31 	.word	0x08009f31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68b9      	ldr	r1, [r7, #8]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 fa2e 	bl	800a254 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	699a      	ldr	r2, [r3, #24]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f042 0208 	orr.w	r2, r2, #8
 8009e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699a      	ldr	r2, [r3, #24]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f022 0204 	bic.w	r2, r2, #4
 8009e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	6999      	ldr	r1, [r3, #24]
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	691a      	ldr	r2, [r3, #16]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	619a      	str	r2, [r3, #24]
      break;
 8009e2a:	e0a5      	b.n	8009f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68b9      	ldr	r1, [r7, #8]
 8009e32:	4618      	mov	r0, r3
 8009e34:	f000 fa9e 	bl	800a374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	699a      	ldr	r2, [r3, #24]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	699a      	ldr	r2, [r3, #24]
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6999      	ldr	r1, [r3, #24]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	021a      	lsls	r2, r3, #8
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	619a      	str	r2, [r3, #24]
      break;
 8009e6c:	e084      	b.n	8009f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68b9      	ldr	r1, [r7, #8]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fb07 	bl	800a488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	69da      	ldr	r2, [r3, #28]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f042 0208 	orr.w	r2, r2, #8
 8009e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	69da      	ldr	r2, [r3, #28]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0204 	bic.w	r2, r2, #4
 8009e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69d9      	ldr	r1, [r3, #28]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	691a      	ldr	r2, [r3, #16]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	61da      	str	r2, [r3, #28]
      break;
 8009eac:	e064      	b.n	8009f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fb6f 	bl	800a598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	69da      	ldr	r2, [r3, #28]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	69da      	ldr	r2, [r3, #28]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	69d9      	ldr	r1, [r3, #28]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	021a      	lsls	r2, r3, #8
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	61da      	str	r2, [r3, #28]
      break;
 8009eee:	e043      	b.n	8009f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68b9      	ldr	r1, [r7, #8]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 fbb8 	bl	800a66c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0208 	orr.w	r2, r2, #8
 8009f0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f022 0204 	bic.w	r2, r2, #4
 8009f1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	691a      	ldr	r2, [r3, #16]
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f2e:	e023      	b.n	8009f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 fbfc 	bl	800a734 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	021a      	lsls	r2, r3, #8
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009f70:	e002      	b.n	8009f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	75fb      	strb	r3, [r7, #23]
      break;
 8009f76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop

08009f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e0b6      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x18a>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe4:	d03e      	beq.n	800a064 <HAL_TIM_ConfigClockSource+0xd8>
 8009fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fea:	f200 8087 	bhi.w	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 8009fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff2:	f000 8086 	beq.w	800a102 <HAL_TIM_ConfigClockSource+0x176>
 8009ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffa:	d87f      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 8009ffc:	2b70      	cmp	r3, #112	; 0x70
 8009ffe:	d01a      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0xaa>
 800a000:	2b70      	cmp	r3, #112	; 0x70
 800a002:	d87b      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 800a004:	2b60      	cmp	r3, #96	; 0x60
 800a006:	d050      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x11e>
 800a008:	2b60      	cmp	r3, #96	; 0x60
 800a00a:	d877      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 800a00c:	2b50      	cmp	r3, #80	; 0x50
 800a00e:	d03c      	beq.n	800a08a <HAL_TIM_ConfigClockSource+0xfe>
 800a010:	2b50      	cmp	r3, #80	; 0x50
 800a012:	d873      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 800a014:	2b40      	cmp	r3, #64	; 0x40
 800a016:	d058      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0x13e>
 800a018:	2b40      	cmp	r3, #64	; 0x40
 800a01a:	d86f      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 800a01c:	2b30      	cmp	r3, #48	; 0x30
 800a01e:	d064      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15e>
 800a020:	2b30      	cmp	r3, #48	; 0x30
 800a022:	d86b      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 800a024:	2b20      	cmp	r3, #32
 800a026:	d060      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15e>
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d867      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d05c      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15e>
 800a030:	2b10      	cmp	r3, #16
 800a032:	d05a      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15e>
 800a034:	e062      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6899      	ldr	r1, [r3, #8]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f000 fc55 	bl	800a8f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	609a      	str	r2, [r3, #8]
      break;
 800a062:	e04f      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6818      	ldr	r0, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6899      	ldr	r1, [r3, #8]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f000 fc3e 	bl	800a8f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a086:	609a      	str	r2, [r3, #8]
      break;
 800a088:	e03c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	6859      	ldr	r1, [r3, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	461a      	mov	r2, r3
 800a098:	f000 fbb2 	bl	800a800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2150      	movs	r1, #80	; 0x50
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fc0b 	bl	800a8be <TIM_ITRx_SetConfig>
      break;
 800a0a8:	e02c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	6859      	ldr	r1, [r3, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f000 fbd1 	bl	800a85e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2160      	movs	r1, #96	; 0x60
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 fbfb 	bl	800a8be <TIM_ITRx_SetConfig>
      break;
 800a0c8:	e01c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6818      	ldr	r0, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	6859      	ldr	r1, [r3, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f000 fb92 	bl	800a800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2140      	movs	r1, #64	; 0x40
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fbeb 	bl	800a8be <TIM_ITRx_SetConfig>
      break;
 800a0e8:	e00c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	f000 fbe2 	bl	800a8be <TIM_ITRx_SetConfig>
      break;
 800a0fa:	e003      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a100:	e000      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a114:	7bfb      	ldrb	r3, [r7, #15]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a40      	ldr	r2, [pc, #256]	; (800a234 <TIM_Base_SetConfig+0x114>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d013      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a13e:	d00f      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a3d      	ldr	r2, [pc, #244]	; (800a238 <TIM_Base_SetConfig+0x118>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d00b      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	4a3c      	ldr	r2, [pc, #240]	; (800a23c <TIM_Base_SetConfig+0x11c>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d007      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a3b      	ldr	r2, [pc, #236]	; (800a240 <TIM_Base_SetConfig+0x120>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d003      	beq.n	800a160 <TIM_Base_SetConfig+0x40>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a3a      	ldr	r2, [pc, #232]	; (800a244 <TIM_Base_SetConfig+0x124>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d108      	bne.n	800a172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a2f      	ldr	r2, [pc, #188]	; (800a234 <TIM_Base_SetConfig+0x114>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d01f      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a180:	d01b      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4a2c      	ldr	r2, [pc, #176]	; (800a238 <TIM_Base_SetConfig+0x118>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d017      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a2b      	ldr	r2, [pc, #172]	; (800a23c <TIM_Base_SetConfig+0x11c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d013      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <TIM_Base_SetConfig+0x120>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d00f      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a29      	ldr	r2, [pc, #164]	; (800a244 <TIM_Base_SetConfig+0x124>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d00b      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a28      	ldr	r2, [pc, #160]	; (800a248 <TIM_Base_SetConfig+0x128>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d007      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a27      	ldr	r2, [pc, #156]	; (800a24c <TIM_Base_SetConfig+0x12c>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d003      	beq.n	800a1ba <TIM_Base_SetConfig+0x9a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a26      	ldr	r2, [pc, #152]	; (800a250 <TIM_Base_SetConfig+0x130>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d108      	bne.n	800a1cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	689a      	ldr	r2, [r3, #8]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a10      	ldr	r2, [pc, #64]	; (800a234 <TIM_Base_SetConfig+0x114>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d00f      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a12      	ldr	r2, [pc, #72]	; (800a244 <TIM_Base_SetConfig+0x124>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00b      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a11      	ldr	r2, [pc, #68]	; (800a248 <TIM_Base_SetConfig+0x128>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d007      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a10      	ldr	r2, [pc, #64]	; (800a24c <TIM_Base_SetConfig+0x12c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_Base_SetConfig+0xf8>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a0f      	ldr	r2, [pc, #60]	; (800a250 <TIM_Base_SetConfig+0x130>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d103      	bne.n	800a220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2201      	movs	r2, #1
 800a224:	615a      	str	r2, [r3, #20]
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
 800a232:	bf00      	nop
 800a234:	40012c00 	.word	0x40012c00
 800a238:	40000400 	.word	0x40000400
 800a23c:	40000800 	.word	0x40000800
 800a240:	40000c00 	.word	0x40000c00
 800a244:	40013400 	.word	0x40013400
 800a248:	40014000 	.word	0x40014000
 800a24c:	40014400 	.word	0x40014400
 800a250:	40014800 	.word	0x40014800

0800a254 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f023 0201 	bic.w	r2, r3, #1
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f023 0303 	bic.w	r3, r3, #3
 800a28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f023 0302 	bic.w	r3, r3, #2
 800a2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	697a      	ldr	r2, [r7, #20]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a2c      	ldr	r2, [pc, #176]	; (800a360 <TIM_OC1_SetConfig+0x10c>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d00f      	beq.n	800a2d4 <TIM_OC1_SetConfig+0x80>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4a2b      	ldr	r2, [pc, #172]	; (800a364 <TIM_OC1_SetConfig+0x110>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d00b      	beq.n	800a2d4 <TIM_OC1_SetConfig+0x80>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a2a      	ldr	r2, [pc, #168]	; (800a368 <TIM_OC1_SetConfig+0x114>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d007      	beq.n	800a2d4 <TIM_OC1_SetConfig+0x80>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a29      	ldr	r2, [pc, #164]	; (800a36c <TIM_OC1_SetConfig+0x118>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d003      	beq.n	800a2d4 <TIM_OC1_SetConfig+0x80>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	4a28      	ldr	r2, [pc, #160]	; (800a370 <TIM_OC1_SetConfig+0x11c>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d10c      	bne.n	800a2ee <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	f023 0308 	bic.w	r3, r3, #8
 800a2da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f023 0304 	bic.w	r3, r3, #4
 800a2ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a1b      	ldr	r2, [pc, #108]	; (800a360 <TIM_OC1_SetConfig+0x10c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d00f      	beq.n	800a316 <TIM_OC1_SetConfig+0xc2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a1a      	ldr	r2, [pc, #104]	; (800a364 <TIM_OC1_SetConfig+0x110>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d00b      	beq.n	800a316 <TIM_OC1_SetConfig+0xc2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a19      	ldr	r2, [pc, #100]	; (800a368 <TIM_OC1_SetConfig+0x114>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d007      	beq.n	800a316 <TIM_OC1_SetConfig+0xc2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a18      	ldr	r2, [pc, #96]	; (800a36c <TIM_OC1_SetConfig+0x118>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d003      	beq.n	800a316 <TIM_OC1_SetConfig+0xc2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a17      	ldr	r2, [pc, #92]	; (800a370 <TIM_OC1_SetConfig+0x11c>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d111      	bne.n	800a33a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a31c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	693a      	ldr	r2, [r7, #16]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	4313      	orrs	r3, r2
 800a338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	621a      	str	r2, [r3, #32]
}
 800a354:	bf00      	nop
 800a356:	371c      	adds	r7, #28
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	40012c00 	.word	0x40012c00
 800a364:	40013400 	.word	0x40013400
 800a368:	40014000 	.word	0x40014000
 800a36c:	40014400 	.word	0x40014400
 800a370:	40014800 	.word	0x40014800

0800a374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	f023 0210 	bic.w	r2, r3, #16
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	021b      	lsls	r3, r3, #8
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	f023 0320 	bic.w	r3, r3, #32
 800a3c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	011b      	lsls	r3, r3, #4
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a28      	ldr	r2, [pc, #160]	; (800a474 <TIM_OC2_SetConfig+0x100>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d003      	beq.n	800a3e0 <TIM_OC2_SetConfig+0x6c>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a27      	ldr	r2, [pc, #156]	; (800a478 <TIM_OC2_SetConfig+0x104>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d10d      	bne.n	800a3fc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	697a      	ldr	r2, [r7, #20]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a1d      	ldr	r2, [pc, #116]	; (800a474 <TIM_OC2_SetConfig+0x100>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d00f      	beq.n	800a424 <TIM_OC2_SetConfig+0xb0>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4a1c      	ldr	r2, [pc, #112]	; (800a478 <TIM_OC2_SetConfig+0x104>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d00b      	beq.n	800a424 <TIM_OC2_SetConfig+0xb0>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	4a1b      	ldr	r2, [pc, #108]	; (800a47c <TIM_OC2_SetConfig+0x108>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d007      	beq.n	800a424 <TIM_OC2_SetConfig+0xb0>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a1a      	ldr	r2, [pc, #104]	; (800a480 <TIM_OC2_SetConfig+0x10c>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d003      	beq.n	800a424 <TIM_OC2_SetConfig+0xb0>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a19      	ldr	r2, [pc, #100]	; (800a484 <TIM_OC2_SetConfig+0x110>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d113      	bne.n	800a44c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a42a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	693a      	ldr	r2, [r7, #16]
 800a448:	4313      	orrs	r3, r2
 800a44a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	621a      	str	r2, [r3, #32]
}
 800a466:	bf00      	nop
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	40012c00 	.word	0x40012c00
 800a478:	40013400 	.word	0x40013400
 800a47c:	40014000 	.word	0x40014000
 800a480:	40014400 	.word	0x40014400
 800a484:	40014800 	.word	0x40014800

0800a488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f023 0303 	bic.w	r3, r3, #3
 800a4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	689b      	ldr	r3, [r3, #8]
 800a4da:	021b      	lsls	r3, r3, #8
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4a27      	ldr	r2, [pc, #156]	; (800a584 <TIM_OC3_SetConfig+0xfc>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d003      	beq.n	800a4f2 <TIM_OC3_SetConfig+0x6a>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4a26      	ldr	r2, [pc, #152]	; (800a588 <TIM_OC3_SetConfig+0x100>)
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	d10d      	bne.n	800a50e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68db      	ldr	r3, [r3, #12]
 800a4fe:	021b      	lsls	r3, r3, #8
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	4313      	orrs	r3, r2
 800a504:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a50c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	4a1c      	ldr	r2, [pc, #112]	; (800a584 <TIM_OC3_SetConfig+0xfc>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d00f      	beq.n	800a536 <TIM_OC3_SetConfig+0xae>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4a1b      	ldr	r2, [pc, #108]	; (800a588 <TIM_OC3_SetConfig+0x100>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d00b      	beq.n	800a536 <TIM_OC3_SetConfig+0xae>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4a1a      	ldr	r2, [pc, #104]	; (800a58c <TIM_OC3_SetConfig+0x104>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d007      	beq.n	800a536 <TIM_OC3_SetConfig+0xae>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a19      	ldr	r2, [pc, #100]	; (800a590 <TIM_OC3_SetConfig+0x108>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d003      	beq.n	800a536 <TIM_OC3_SetConfig+0xae>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a18      	ldr	r2, [pc, #96]	; (800a594 <TIM_OC3_SetConfig+0x10c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d113      	bne.n	800a55e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a53c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	4313      	orrs	r3, r2
 800a550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	011b      	lsls	r3, r3, #4
 800a558:	693a      	ldr	r2, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685a      	ldr	r2, [r3, #4]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	621a      	str	r2, [r3, #32]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	40012c00 	.word	0x40012c00
 800a588:	40013400 	.word	0x40013400
 800a58c:	40014000 	.word	0x40014000
 800a590:	40014400 	.word	0x40014400
 800a594:	40014800 	.word	0x40014800

0800a598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	031b      	lsls	r3, r3, #12
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a18      	ldr	r2, [pc, #96]	; (800a658 <TIM_OC4_SetConfig+0xc0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d00f      	beq.n	800a61c <TIM_OC4_SetConfig+0x84>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a17      	ldr	r2, [pc, #92]	; (800a65c <TIM_OC4_SetConfig+0xc4>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d00b      	beq.n	800a61c <TIM_OC4_SetConfig+0x84>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a16      	ldr	r2, [pc, #88]	; (800a660 <TIM_OC4_SetConfig+0xc8>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d007      	beq.n	800a61c <TIM_OC4_SetConfig+0x84>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a15      	ldr	r2, [pc, #84]	; (800a664 <TIM_OC4_SetConfig+0xcc>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d003      	beq.n	800a61c <TIM_OC4_SetConfig+0x84>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a14      	ldr	r2, [pc, #80]	; (800a668 <TIM_OC4_SetConfig+0xd0>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d109      	bne.n	800a630 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	019b      	lsls	r3, r3, #6
 800a62a:	697a      	ldr	r2, [r7, #20]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	693a      	ldr	r2, [r7, #16]
 800a648:	621a      	str	r2, [r3, #32]
}
 800a64a:	bf00      	nop
 800a64c:	371c      	adds	r7, #28
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr
 800a656:	bf00      	nop
 800a658:	40012c00 	.word	0x40012c00
 800a65c:	40013400 	.word	0x40013400
 800a660:	40014000 	.word	0x40014000
 800a664:	40014400 	.word	0x40014400
 800a668:	40014800 	.word	0x40014800

0800a66c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a6b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	041b      	lsls	r3, r3, #16
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a17      	ldr	r2, [pc, #92]	; (800a720 <TIM_OC5_SetConfig+0xb4>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d00f      	beq.n	800a6e6 <TIM_OC5_SetConfig+0x7a>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a16      	ldr	r2, [pc, #88]	; (800a724 <TIM_OC5_SetConfig+0xb8>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d00b      	beq.n	800a6e6 <TIM_OC5_SetConfig+0x7a>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a15      	ldr	r2, [pc, #84]	; (800a728 <TIM_OC5_SetConfig+0xbc>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d007      	beq.n	800a6e6 <TIM_OC5_SetConfig+0x7a>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a14      	ldr	r2, [pc, #80]	; (800a72c <TIM_OC5_SetConfig+0xc0>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d003      	beq.n	800a6e6 <TIM_OC5_SetConfig+0x7a>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a13      	ldr	r2, [pc, #76]	; (800a730 <TIM_OC5_SetConfig+0xc4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d109      	bne.n	800a6fa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	021b      	lsls	r3, r3, #8
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	68fa      	ldr	r2, [r7, #12]
 800a704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	621a      	str	r2, [r3, #32]
}
 800a714:	bf00      	nop
 800a716:	371c      	adds	r7, #28
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	40012c00 	.word	0x40012c00
 800a724:	40013400 	.word	0x40013400
 800a728:	40014000 	.word	0x40014000
 800a72c:	40014400 	.word	0x40014400
 800a730:	40014800 	.word	0x40014800

0800a734 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a734:	b480      	push	{r7}
 800a736:	b087      	sub	sp, #28
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	021b      	lsls	r3, r3, #8
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	4313      	orrs	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a77a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	051b      	lsls	r3, r3, #20
 800a782:	693a      	ldr	r2, [r7, #16]
 800a784:	4313      	orrs	r3, r2
 800a786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a18      	ldr	r2, [pc, #96]	; (800a7ec <TIM_OC6_SetConfig+0xb8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d00f      	beq.n	800a7b0 <TIM_OC6_SetConfig+0x7c>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a17      	ldr	r2, [pc, #92]	; (800a7f0 <TIM_OC6_SetConfig+0xbc>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d00b      	beq.n	800a7b0 <TIM_OC6_SetConfig+0x7c>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a16      	ldr	r2, [pc, #88]	; (800a7f4 <TIM_OC6_SetConfig+0xc0>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d007      	beq.n	800a7b0 <TIM_OC6_SetConfig+0x7c>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a15      	ldr	r2, [pc, #84]	; (800a7f8 <TIM_OC6_SetConfig+0xc4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d003      	beq.n	800a7b0 <TIM_OC6_SetConfig+0x7c>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a14      	ldr	r2, [pc, #80]	; (800a7fc <TIM_OC6_SetConfig+0xc8>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d109      	bne.n	800a7c4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	695b      	ldr	r3, [r3, #20]
 800a7bc:	029b      	lsls	r3, r3, #10
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	621a      	str	r2, [r3, #32]
}
 800a7de:	bf00      	nop
 800a7e0:	371c      	adds	r7, #28
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	40012c00 	.word	0x40012c00
 800a7f0:	40013400 	.word	0x40013400
 800a7f4:	40014000 	.word	0x40014000
 800a7f8:	40014400 	.word	0x40014400
 800a7fc:	40014800 	.word	0x40014800

0800a800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a800:	b480      	push	{r7}
 800a802:	b087      	sub	sp, #28
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
 800a810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	f023 0201 	bic.w	r2, r3, #1
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a82a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	4313      	orrs	r3, r2
 800a834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f023 030a 	bic.w	r3, r3, #10
 800a83c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4313      	orrs	r3, r2
 800a844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	621a      	str	r2, [r3, #32]
}
 800a852:	bf00      	nop
 800a854:	371c      	adds	r7, #28
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a85e:	b480      	push	{r7}
 800a860:	b087      	sub	sp, #28
 800a862:	af00      	add	r7, sp, #0
 800a864:	60f8      	str	r0, [r7, #12]
 800a866:	60b9      	str	r1, [r7, #8]
 800a868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	f023 0210 	bic.w	r2, r3, #16
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	699b      	ldr	r3, [r3, #24]
 800a87a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6a1b      	ldr	r3, [r3, #32]
 800a880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	031b      	lsls	r3, r3, #12
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	4313      	orrs	r3, r2
 800a892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a89a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	621a      	str	r2, [r3, #32]
}
 800a8b2:	bf00      	nop
 800a8b4:	371c      	adds	r7, #28
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	f043 0307 	orr.w	r3, r3, #7
 800a8e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68fa      	ldr	r2, [r7, #12]
 800a8e6:	609a      	str	r2, [r3, #8]
}
 800a8e8:	bf00      	nop
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a90e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	021a      	lsls	r2, r3, #8
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	431a      	orrs	r2, r3
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	609a      	str	r2, [r3, #8]
}
 800a928:	bf00      	nop
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a944:	2b01      	cmp	r3, #1
 800a946:	d101      	bne.n	800a94c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a948:	2302      	movs	r3, #2
 800a94a:	e068      	b.n	800aa1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2202      	movs	r2, #2
 800a958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a2e      	ldr	r2, [pc, #184]	; (800aa2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d004      	beq.n	800a980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a2d      	ldr	r2, [pc, #180]	; (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d108      	bne.n	800a992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	4313      	orrs	r3, r2
 800a990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	68fa      	ldr	r2, [r7, #12]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a1e      	ldr	r2, [pc, #120]	; (800aa2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d01d      	beq.n	800a9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9be:	d018      	beq.n	800a9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a1b      	ldr	r2, [pc, #108]	; (800aa34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d013      	beq.n	800a9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a1a      	ldr	r2, [pc, #104]	; (800aa38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d00e      	beq.n	800a9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a18      	ldr	r2, [pc, #96]	; (800aa3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d009      	beq.n	800a9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a13      	ldr	r2, [pc, #76]	; (800aa30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d004      	beq.n	800a9f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d10c      	bne.n	800aa0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68ba      	ldr	r2, [r7, #8]
 800aa0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	40012c00 	.word	0x40012c00
 800aa30:	40013400 	.word	0x40013400
 800aa34:	40000400 	.word	0x40000400
 800aa38:	40000800 	.word	0x40000800
 800aa3c:	40000c00 	.word	0x40000c00
 800aa40:	40014000 	.word	0x40014000

0800aa44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b085      	sub	sp, #20
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d101      	bne.n	800aa60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e065      	b.n	800ab2c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	699b      	ldr	r3, [r3, #24]
 800aad4:	041b      	lsls	r3, r3, #16
 800aad6:	4313      	orrs	r3, r2
 800aad8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a16      	ldr	r2, [pc, #88]	; (800ab38 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d004      	beq.n	800aaee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a14      	ldr	r2, [pc, #80]	; (800ab3c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d115      	bne.n	800ab1a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf8:	051b      	lsls	r3, r3, #20
 800aafa:	4313      	orrs	r3, r2
 800aafc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	69db      	ldr	r3, [r3, #28]
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	40012c00 	.word	0x40012c00
 800ab3c:	40013400 	.word	0x40013400

0800ab40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	e040      	b.n	800abd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7f7 ff8e 	bl	8002a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2224      	movs	r2, #36	; 0x24
 800ab6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 0201 	bic.w	r2, r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 fbe8 	bl	800b354 <UART_SetConfig>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d101      	bne.n	800ab8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e022      	b.n	800abd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d002      	beq.n	800ab9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 fe94 	bl	800b8c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	689a      	ldr	r2, [r3, #8]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 ff1b 	bl	800ba08 <UART_CheckIdleState>
 800abd2:	4603      	mov	r3, r0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800abdc:	b480      	push	{r7}
 800abde:	b08b      	sub	sp, #44	; 0x2c
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	60f8      	str	r0, [r7, #12]
 800abe4:	60b9      	str	r1, [r7, #8]
 800abe6:	4613      	mov	r3, r2
 800abe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800abee:	2b20      	cmp	r3, #32
 800abf0:	d156      	bne.n	800aca0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <HAL_UART_Transmit_IT+0x22>
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d101      	bne.n	800ac02 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800abfe:	2301      	movs	r3, #1
 800ac00:	e04f      	b.n	800aca2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d101      	bne.n	800ac10 <HAL_UART_Transmit_IT+0x34>
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e048      	b.n	800aca2 <HAL_UART_Transmit_IT+0xc6>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	88fa      	ldrh	r2, [r7, #6]
 800ac22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	88fa      	ldrh	r2, [r7, #6]
 800ac2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2221      	movs	r2, #33	; 0x21
 800ac40:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4a:	d107      	bne.n	800ac5c <HAL_UART_Transmit_IT+0x80>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d103      	bne.n	800ac5c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	4a16      	ldr	r2, [pc, #88]	; (800acb0 <HAL_UART_Transmit_IT+0xd4>)
 800ac58:	669a      	str	r2, [r3, #104]	; 0x68
 800ac5a:	e002      	b.n	800ac62 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4a15      	ldr	r2, [pc, #84]	; (800acb4 <HAL_UART_Transmit_IT+0xd8>)
 800ac60:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	e853 3f00 	ldrex	r3, [r3]
 800ac76:	613b      	str	r3, [r7, #16]
   return(result);
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac7e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	461a      	mov	r2, r3
 800ac86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac88:	623b      	str	r3, [r7, #32]
 800ac8a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8c:	69f9      	ldr	r1, [r7, #28]
 800ac8e:	6a3a      	ldr	r2, [r7, #32]
 800ac90:	e841 2300 	strex	r3, r2, [r1]
 800ac94:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1e6      	bne.n	800ac6a <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	e000      	b.n	800aca2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800aca0:	2302      	movs	r3, #2
  }
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	372c      	adds	r7, #44	; 0x2c
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	0800bf63 	.word	0x0800bf63
 800acb4:	0800beab 	.word	0x0800beab

0800acb8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b08a      	sub	sp, #40	; 0x28
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	60f8      	str	r0, [r7, #12]
 800acc0:	60b9      	str	r1, [r7, #8]
 800acc2:	4613      	mov	r3, r2
 800acc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acca:	2b20      	cmp	r3, #32
 800accc:	d142      	bne.n	800ad54 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d002      	beq.n	800acda <HAL_UART_Receive_IT+0x22>
 800acd4:	88fb      	ldrh	r3, [r7, #6]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e03b      	b.n	800ad56 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d101      	bne.n	800acec <HAL_UART_Receive_IT+0x34>
 800ace8:	2302      	movs	r3, #2
 800acea:	e034      	b.n	800ad56 <HAL_UART_Receive_IT+0x9e>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a18      	ldr	r2, [pc, #96]	; (800ad60 <HAL_UART_Receive_IT+0xa8>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d01f      	beq.n	800ad44 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d018      	beq.n	800ad44 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	e853 3f00 	ldrex	r3, [r3]
 800ad1e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad26:	627b      	str	r3, [r7, #36]	; 0x24
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	623b      	str	r3, [r7, #32]
 800ad32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad34:	69f9      	ldr	r1, [r7, #28]
 800ad36:	6a3a      	ldr	r2, [r7, #32]
 800ad38:	e841 2300 	strex	r3, r2, [r1]
 800ad3c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1e6      	bne.n	800ad12 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ad44:	88fb      	ldrh	r3, [r7, #6]
 800ad46:	461a      	mov	r2, r3
 800ad48:	68b9      	ldr	r1, [r7, #8]
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 ff6a 	bl	800bc24 <UART_Start_Receive_IT>
 800ad50:	4603      	mov	r3, r0
 800ad52:	e000      	b.n	800ad56 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800ad54:	2302      	movs	r3, #2
  }
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3728      	adds	r7, #40	; 0x28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	40008000 	.word	0x40008000

0800ad64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b0ba      	sub	sp, #232	; 0xe8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad92:	4013      	ands	r3, r2
 800ad94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d115      	bne.n	800adcc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00f      	beq.n	800adcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800adac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d009      	beq.n	800adcc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 82a6 	beq.w	800b30e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	4798      	blx	r3
      }
      return;
 800adca:	e2a0      	b.n	800b30e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800adcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 8117 	beq.w	800b004 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800add6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adda:	f003 0301 	and.w	r3, r3, #1
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d106      	bne.n	800adf0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ade2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ade6:	4b85      	ldr	r3, [pc, #532]	; (800affc <HAL_UART_IRQHandler+0x298>)
 800ade8:	4013      	ands	r3, r2
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 810a 	beq.w	800b004 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf4:	f003 0301 	and.w	r3, r3, #1
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d011      	beq.n	800ae20 <HAL_UART_IRQHandler+0xbc>
 800adfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae16:	f043 0201 	orr.w	r2, r3, #1
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae24:	f003 0302 	and.w	r3, r3, #2
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d011      	beq.n	800ae50 <HAL_UART_IRQHandler+0xec>
 800ae2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae30:	f003 0301 	and.w	r3, r3, #1
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00b      	beq.n	800ae50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae46:	f043 0204 	orr.w	r2, r3, #4
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d011      	beq.n	800ae80 <HAL_UART_IRQHandler+0x11c>
 800ae5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae60:	f003 0301 	and.w	r3, r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae76:	f043 0202 	orr.w	r2, r3, #2
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae84:	f003 0308 	and.w	r3, r3, #8
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d017      	beq.n	800aebc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae90:	f003 0320 	and.w	r3, r3, #32
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d105      	bne.n	800aea4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ae98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00b      	beq.n	800aebc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2208      	movs	r2, #8
 800aeaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeb2:	f043 0208 	orr.w	r2, r3, #8
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d012      	beq.n	800aeee <HAL_UART_IRQHandler+0x18a>
 800aec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aecc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00c      	beq.n	800aeee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aedc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aee4:	f043 0220 	orr.w	r2, r3, #32
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f000 820c 	beq.w	800b312 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aefa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aefe:	f003 0320 	and.w	r3, r3, #32
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00d      	beq.n	800af22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800af06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d007      	beq.n	800af22 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af36:	2b40      	cmp	r3, #64	; 0x40
 800af38:	d005      	beq.n	800af46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af42:	2b00      	cmp	r3, #0
 800af44:	d04f      	beq.n	800afe6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 ff36 	bl	800bdb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af56:	2b40      	cmp	r3, #64	; 0x40
 800af58:	d141      	bne.n	800afde <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3308      	adds	r3, #8
 800af60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3308      	adds	r3, #8
 800af82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800af8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800af92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800af96:	e841 2300 	strex	r3, r2, [r1]
 800af9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800af9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1d9      	bne.n	800af5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d013      	beq.n	800afd6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afb2:	4a13      	ldr	r2, [pc, #76]	; (800b000 <HAL_UART_IRQHandler+0x29c>)
 800afb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afba:	4618      	mov	r0, r3
 800afbc:	f7fb fffb 	bl	8006fb6 <HAL_DMA_Abort_IT>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d017      	beq.n	800aff6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800afd0:	4610      	mov	r0, r2
 800afd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afd4:	e00f      	b.n	800aff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f9a6 	bl	800b328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afdc:	e00b      	b.n	800aff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f9a2 	bl	800b328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afe4:	e007      	b.n	800aff6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f99e 	bl	800b328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2200      	movs	r2, #0
 800aff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800aff4:	e18d      	b.n	800b312 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff6:	bf00      	nop
    return;
 800aff8:	e18b      	b.n	800b312 <HAL_UART_IRQHandler+0x5ae>
 800affa:	bf00      	nop
 800affc:	04000120 	.word	0x04000120
 800b000:	0800be7f 	.word	0x0800be7f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b008:	2b01      	cmp	r3, #1
 800b00a:	f040 8146 	bne.w	800b29a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b012:	f003 0310 	and.w	r3, r3, #16
 800b016:	2b00      	cmp	r3, #0
 800b018:	f000 813f 	beq.w	800b29a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b020:	f003 0310 	and.w	r3, r3, #16
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 8138 	beq.w	800b29a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	2210      	movs	r2, #16
 800b030:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03c:	2b40      	cmp	r3, #64	; 0x40
 800b03e:	f040 80b4 	bne.w	800b1aa <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b04e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 815f 	beq.w	800b316 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b05e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b062:	429a      	cmp	r2, r3
 800b064:	f080 8157 	bcs.w	800b316 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b06e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f003 0320 	and.w	r3, r3, #32
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f040 8085 	bne.w	800b18e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b09c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b0b2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1da      	bne.n	800b084 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b0de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0e0:	f023 0301 	bic.w	r3, r3, #1
 800b0e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0fe:	e841 2300 	strex	r3, r2, [r1]
 800b102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e1      	bne.n	800b0ce <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3308      	adds	r3, #8
 800b110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b11a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b11c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3308      	adds	r3, #8
 800b12a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b12e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e3      	bne.n	800b10a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b156:	e853 3f00 	ldrex	r3, [r3]
 800b15a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b15e:	f023 0310 	bic.w	r3, r3, #16
 800b162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b170:	65bb      	str	r3, [r7, #88]	; 0x58
 800b172:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b178:	e841 2300 	strex	r3, r2, [r1]
 800b17c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1e4      	bne.n	800b14e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b188:	4618      	mov	r0, r3
 800b18a:	f7fb fed6 	bl	8006f3a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 f8ca 	bl	800b33c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b1a8:	e0b5      	b.n	800b316 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 80a7 	beq.w	800b31a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b1cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 80a2 	beq.w	800b31a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	e853 3f00 	ldrex	r3, [r3]
 800b1e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b1fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b200:	e841 2300 	strex	r3, r2, [r1]
 800b204:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1e4      	bne.n	800b1d6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3308      	adds	r3, #8
 800b212:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b216:	e853 3f00 	ldrex	r3, [r3]
 800b21a:	623b      	str	r3, [r7, #32]
   return(result);
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f023 0301 	bic.w	r3, r3, #1
 800b222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3308      	adds	r3, #8
 800b22c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b230:	633a      	str	r2, [r7, #48]	; 0x30
 800b232:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b238:	e841 2300 	strex	r3, r2, [r1]
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1e3      	bne.n	800b20c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2220      	movs	r2, #32
 800b248:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2200      	movs	r2, #0
 800b24e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	e853 3f00 	ldrex	r3, [r3]
 800b262:	60fb      	str	r3, [r7, #12]
   return(result);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f023 0310 	bic.w	r3, r3, #16
 800b26a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b278:	61fb      	str	r3, [r7, #28]
 800b27a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	69b9      	ldr	r1, [r7, #24]
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	e841 2300 	strex	r3, r2, [r1]
 800b284:	617b      	str	r3, [r7, #20]
   return(result);
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1e4      	bne.n	800b256 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b28c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b290:	4619      	mov	r1, r3
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 f852 	bl	800b33c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b298:	e03f      	b.n	800b31a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b29e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d00e      	beq.n	800b2c4 <HAL_UART_IRQHandler+0x560>
 800b2a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d008      	beq.n	800b2c4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b2ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 f83a 	bl	800c336 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2c2:	e02d      	b.n	800b320 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b2c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00e      	beq.n	800b2ee <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d008      	beq.n	800b2ee <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01c      	beq.n	800b31e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	4798      	blx	r3
    }
    return;
 800b2ec:	e017      	b.n	800b31e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d012      	beq.n	800b320 <HAL_UART_IRQHandler+0x5bc>
 800b2fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00c      	beq.n	800b320 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fe8b 	bl	800c022 <UART_EndTransmit_IT>
    return;
 800b30c:	e008      	b.n	800b320 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b30e:	bf00      	nop
 800b310:	e006      	b.n	800b320 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b312:	bf00      	nop
 800b314:	e004      	b.n	800b320 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b316:	bf00      	nop
 800b318:	e002      	b.n	800b320 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b31a:	bf00      	nop
 800b31c:	e000      	b.n	800b320 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b31e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b320:	37e8      	adds	r7, #232	; 0xe8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop

0800b328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b330:	bf00      	nop
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b358:	b08a      	sub	sp, #40	; 0x28
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	689a      	ldr	r2, [r3, #8]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	431a      	orrs	r2, r3
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	695b      	ldr	r3, [r3, #20]
 800b372:	431a      	orrs	r2, r3
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	4313      	orrs	r3, r2
 800b37a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	4ba4      	ldr	r3, [pc, #656]	; (800b614 <UART_SetConfig+0x2c0>)
 800b384:	4013      	ands	r3, r2
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	6812      	ldr	r2, [r2, #0]
 800b38a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b38c:	430b      	orrs	r3, r1
 800b38e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	68da      	ldr	r2, [r3, #12]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	699b      	ldr	r3, [r3, #24]
 800b3aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a99      	ldr	r2, [pc, #612]	; (800b618 <UART_SetConfig+0x2c4>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d004      	beq.n	800b3c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3d0:	430a      	orrs	r2, r1
 800b3d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a90      	ldr	r2, [pc, #576]	; (800b61c <UART_SetConfig+0x2c8>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d126      	bne.n	800b42c <UART_SetConfig+0xd8>
 800b3de:	4b90      	ldr	r3, [pc, #576]	; (800b620 <UART_SetConfig+0x2cc>)
 800b3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e4:	f003 0303 	and.w	r3, r3, #3
 800b3e8:	2b03      	cmp	r3, #3
 800b3ea:	d81b      	bhi.n	800b424 <UART_SetConfig+0xd0>
 800b3ec:	a201      	add	r2, pc, #4	; (adr r2, 800b3f4 <UART_SetConfig+0xa0>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b405 	.word	0x0800b405
 800b3f8:	0800b415 	.word	0x0800b415
 800b3fc:	0800b40d 	.word	0x0800b40d
 800b400:	0800b41d 	.word	0x0800b41d
 800b404:	2301      	movs	r3, #1
 800b406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b40a:	e116      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b40c:	2302      	movs	r3, #2
 800b40e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b412:	e112      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b414:	2304      	movs	r3, #4
 800b416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b41a:	e10e      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b41c:	2308      	movs	r3, #8
 800b41e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b422:	e10a      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b424:	2310      	movs	r3, #16
 800b426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b42a:	e106      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a7c      	ldr	r2, [pc, #496]	; (800b624 <UART_SetConfig+0x2d0>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d138      	bne.n	800b4a8 <UART_SetConfig+0x154>
 800b436:	4b7a      	ldr	r3, [pc, #488]	; (800b620 <UART_SetConfig+0x2cc>)
 800b438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b43c:	f003 030c 	and.w	r3, r3, #12
 800b440:	2b0c      	cmp	r3, #12
 800b442:	d82d      	bhi.n	800b4a0 <UART_SetConfig+0x14c>
 800b444:	a201      	add	r2, pc, #4	; (adr r2, 800b44c <UART_SetConfig+0xf8>)
 800b446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b44a:	bf00      	nop
 800b44c:	0800b481 	.word	0x0800b481
 800b450:	0800b4a1 	.word	0x0800b4a1
 800b454:	0800b4a1 	.word	0x0800b4a1
 800b458:	0800b4a1 	.word	0x0800b4a1
 800b45c:	0800b491 	.word	0x0800b491
 800b460:	0800b4a1 	.word	0x0800b4a1
 800b464:	0800b4a1 	.word	0x0800b4a1
 800b468:	0800b4a1 	.word	0x0800b4a1
 800b46c:	0800b489 	.word	0x0800b489
 800b470:	0800b4a1 	.word	0x0800b4a1
 800b474:	0800b4a1 	.word	0x0800b4a1
 800b478:	0800b4a1 	.word	0x0800b4a1
 800b47c:	0800b499 	.word	0x0800b499
 800b480:	2300      	movs	r3, #0
 800b482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b486:	e0d8      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b488:	2302      	movs	r3, #2
 800b48a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b48e:	e0d4      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b490:	2304      	movs	r3, #4
 800b492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b496:	e0d0      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b498:	2308      	movs	r3, #8
 800b49a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b49e:	e0cc      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b4a0:	2310      	movs	r3, #16
 800b4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4a6:	e0c8      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a5e      	ldr	r2, [pc, #376]	; (800b628 <UART_SetConfig+0x2d4>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d125      	bne.n	800b4fe <UART_SetConfig+0x1aa>
 800b4b2:	4b5b      	ldr	r3, [pc, #364]	; (800b620 <UART_SetConfig+0x2cc>)
 800b4b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b4bc:	2b30      	cmp	r3, #48	; 0x30
 800b4be:	d016      	beq.n	800b4ee <UART_SetConfig+0x19a>
 800b4c0:	2b30      	cmp	r3, #48	; 0x30
 800b4c2:	d818      	bhi.n	800b4f6 <UART_SetConfig+0x1a2>
 800b4c4:	2b20      	cmp	r3, #32
 800b4c6:	d00a      	beq.n	800b4de <UART_SetConfig+0x18a>
 800b4c8:	2b20      	cmp	r3, #32
 800b4ca:	d814      	bhi.n	800b4f6 <UART_SetConfig+0x1a2>
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <UART_SetConfig+0x182>
 800b4d0:	2b10      	cmp	r3, #16
 800b4d2:	d008      	beq.n	800b4e6 <UART_SetConfig+0x192>
 800b4d4:	e00f      	b.n	800b4f6 <UART_SetConfig+0x1a2>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4dc:	e0ad      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b4de:	2302      	movs	r3, #2
 800b4e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4e4:	e0a9      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b4e6:	2304      	movs	r3, #4
 800b4e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ec:	e0a5      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b4ee:	2308      	movs	r3, #8
 800b4f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4f4:	e0a1      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b4f6:	2310      	movs	r3, #16
 800b4f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4fc:	e09d      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4a4a      	ldr	r2, [pc, #296]	; (800b62c <UART_SetConfig+0x2d8>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d125      	bne.n	800b554 <UART_SetConfig+0x200>
 800b508:	4b45      	ldr	r3, [pc, #276]	; (800b620 <UART_SetConfig+0x2cc>)
 800b50a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b50e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b512:	2bc0      	cmp	r3, #192	; 0xc0
 800b514:	d016      	beq.n	800b544 <UART_SetConfig+0x1f0>
 800b516:	2bc0      	cmp	r3, #192	; 0xc0
 800b518:	d818      	bhi.n	800b54c <UART_SetConfig+0x1f8>
 800b51a:	2b80      	cmp	r3, #128	; 0x80
 800b51c:	d00a      	beq.n	800b534 <UART_SetConfig+0x1e0>
 800b51e:	2b80      	cmp	r3, #128	; 0x80
 800b520:	d814      	bhi.n	800b54c <UART_SetConfig+0x1f8>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d002      	beq.n	800b52c <UART_SetConfig+0x1d8>
 800b526:	2b40      	cmp	r3, #64	; 0x40
 800b528:	d008      	beq.n	800b53c <UART_SetConfig+0x1e8>
 800b52a:	e00f      	b.n	800b54c <UART_SetConfig+0x1f8>
 800b52c:	2300      	movs	r3, #0
 800b52e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b532:	e082      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b534:	2302      	movs	r3, #2
 800b536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b53a:	e07e      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b53c:	2304      	movs	r3, #4
 800b53e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b542:	e07a      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b544:	2308      	movs	r3, #8
 800b546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b54a:	e076      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b54c:	2310      	movs	r3, #16
 800b54e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b552:	e072      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a35      	ldr	r2, [pc, #212]	; (800b630 <UART_SetConfig+0x2dc>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d12a      	bne.n	800b5b4 <UART_SetConfig+0x260>
 800b55e:	4b30      	ldr	r3, [pc, #192]	; (800b620 <UART_SetConfig+0x2cc>)
 800b560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b56c:	d01a      	beq.n	800b5a4 <UART_SetConfig+0x250>
 800b56e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b572:	d81b      	bhi.n	800b5ac <UART_SetConfig+0x258>
 800b574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b578:	d00c      	beq.n	800b594 <UART_SetConfig+0x240>
 800b57a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b57e:	d815      	bhi.n	800b5ac <UART_SetConfig+0x258>
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <UART_SetConfig+0x238>
 800b584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b588:	d008      	beq.n	800b59c <UART_SetConfig+0x248>
 800b58a:	e00f      	b.n	800b5ac <UART_SetConfig+0x258>
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b592:	e052      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b594:	2302      	movs	r3, #2
 800b596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b59a:	e04e      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b59c:	2304      	movs	r3, #4
 800b59e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5a2:	e04a      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b5a4:	2308      	movs	r3, #8
 800b5a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5aa:	e046      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b5ac:	2310      	movs	r3, #16
 800b5ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5b2:	e042      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a17      	ldr	r2, [pc, #92]	; (800b618 <UART_SetConfig+0x2c4>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d13a      	bne.n	800b634 <UART_SetConfig+0x2e0>
 800b5be:	4b18      	ldr	r3, [pc, #96]	; (800b620 <UART_SetConfig+0x2cc>)
 800b5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b5c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5cc:	d01a      	beq.n	800b604 <UART_SetConfig+0x2b0>
 800b5ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b5d2:	d81b      	bhi.n	800b60c <UART_SetConfig+0x2b8>
 800b5d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5d8:	d00c      	beq.n	800b5f4 <UART_SetConfig+0x2a0>
 800b5da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5de:	d815      	bhi.n	800b60c <UART_SetConfig+0x2b8>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d003      	beq.n	800b5ec <UART_SetConfig+0x298>
 800b5e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5e8:	d008      	beq.n	800b5fc <UART_SetConfig+0x2a8>
 800b5ea:	e00f      	b.n	800b60c <UART_SetConfig+0x2b8>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5f2:	e022      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5fa:	e01e      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b5fc:	2304      	movs	r3, #4
 800b5fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b602:	e01a      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b604:	2308      	movs	r3, #8
 800b606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b60a:	e016      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b60c:	2310      	movs	r3, #16
 800b60e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b612:	e012      	b.n	800b63a <UART_SetConfig+0x2e6>
 800b614:	efff69f3 	.word	0xefff69f3
 800b618:	40008000 	.word	0x40008000
 800b61c:	40013800 	.word	0x40013800
 800b620:	40021000 	.word	0x40021000
 800b624:	40004400 	.word	0x40004400
 800b628:	40004800 	.word	0x40004800
 800b62c:	40004c00 	.word	0x40004c00
 800b630:	40005000 	.word	0x40005000
 800b634:	2310      	movs	r3, #16
 800b636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a9f      	ldr	r2, [pc, #636]	; (800b8bc <UART_SetConfig+0x568>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d17a      	bne.n	800b73a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b648:	2b08      	cmp	r3, #8
 800b64a:	d824      	bhi.n	800b696 <UART_SetConfig+0x342>
 800b64c:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <UART_SetConfig+0x300>)
 800b64e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b652:	bf00      	nop
 800b654:	0800b679 	.word	0x0800b679
 800b658:	0800b697 	.word	0x0800b697
 800b65c:	0800b681 	.word	0x0800b681
 800b660:	0800b697 	.word	0x0800b697
 800b664:	0800b687 	.word	0x0800b687
 800b668:	0800b697 	.word	0x0800b697
 800b66c:	0800b697 	.word	0x0800b697
 800b670:	0800b697 	.word	0x0800b697
 800b674:	0800b68f 	.word	0x0800b68f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b678:	f7fd fbb0 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 800b67c:	61f8      	str	r0, [r7, #28]
        break;
 800b67e:	e010      	b.n	800b6a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b680:	4b8f      	ldr	r3, [pc, #572]	; (800b8c0 <UART_SetConfig+0x56c>)
 800b682:	61fb      	str	r3, [r7, #28]
        break;
 800b684:	e00d      	b.n	800b6a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b686:	f7fd fb11 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 800b68a:	61f8      	str	r0, [r7, #28]
        break;
 800b68c:	e009      	b.n	800b6a2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b68e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b692:	61fb      	str	r3, [r7, #28]
        break;
 800b694:	e005      	b.n	800b6a2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b696:	2300      	movs	r3, #0
 800b698:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b6a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 80fb 	beq.w	800b8a0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	4413      	add	r3, r2
 800b6b4:	69fa      	ldr	r2, [r7, #28]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d305      	bcc.n	800b6c6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b6c0:	69fa      	ldr	r2, [r7, #28]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d903      	bls.n	800b6ce <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b6cc:	e0e8      	b.n	800b8a0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	461c      	mov	r4, r3
 800b6d4:	4615      	mov	r5, r2
 800b6d6:	f04f 0200 	mov.w	r2, #0
 800b6da:	f04f 0300 	mov.w	r3, #0
 800b6de:	022b      	lsls	r3, r5, #8
 800b6e0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b6e4:	0222      	lsls	r2, r4, #8
 800b6e6:	68f9      	ldr	r1, [r7, #12]
 800b6e8:	6849      	ldr	r1, [r1, #4]
 800b6ea:	0849      	lsrs	r1, r1, #1
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	4688      	mov	r8, r1
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	eb12 0a08 	adds.w	sl, r2, r8
 800b6f6:	eb43 0b09 	adc.w	fp, r3, r9
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	603b      	str	r3, [r7, #0]
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b708:	4650      	mov	r0, sl
 800b70a:	4659      	mov	r1, fp
 800b70c:	f7f5 fa94 	bl	8000c38 <__aeabi_uldivmod>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4613      	mov	r3, r2
 800b716:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b718:	69bb      	ldr	r3, [r7, #24]
 800b71a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b71e:	d308      	bcc.n	800b732 <UART_SetConfig+0x3de>
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b726:	d204      	bcs.n	800b732 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	60da      	str	r2, [r3, #12]
 800b730:	e0b6      	b.n	800b8a0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b738:	e0b2      	b.n	800b8a0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b742:	d15e      	bne.n	800b802 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b748:	2b08      	cmp	r3, #8
 800b74a:	d828      	bhi.n	800b79e <UART_SetConfig+0x44a>
 800b74c:	a201      	add	r2, pc, #4	; (adr r2, 800b754 <UART_SetConfig+0x400>)
 800b74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b752:	bf00      	nop
 800b754:	0800b779 	.word	0x0800b779
 800b758:	0800b781 	.word	0x0800b781
 800b75c:	0800b789 	.word	0x0800b789
 800b760:	0800b79f 	.word	0x0800b79f
 800b764:	0800b78f 	.word	0x0800b78f
 800b768:	0800b79f 	.word	0x0800b79f
 800b76c:	0800b79f 	.word	0x0800b79f
 800b770:	0800b79f 	.word	0x0800b79f
 800b774:	0800b797 	.word	0x0800b797
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b778:	f7fd fb30 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 800b77c:	61f8      	str	r0, [r7, #28]
        break;
 800b77e:	e014      	b.n	800b7aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b780:	f7fd fb42 	bl	8008e08 <HAL_RCC_GetPCLK2Freq>
 800b784:	61f8      	str	r0, [r7, #28]
        break;
 800b786:	e010      	b.n	800b7aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b788:	4b4d      	ldr	r3, [pc, #308]	; (800b8c0 <UART_SetConfig+0x56c>)
 800b78a:	61fb      	str	r3, [r7, #28]
        break;
 800b78c:	e00d      	b.n	800b7aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b78e:	f7fd fa8d 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 800b792:	61f8      	str	r0, [r7, #28]
        break;
 800b794:	e009      	b.n	800b7aa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b796:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b79a:	61fb      	str	r3, [r7, #28]
        break;
 800b79c:	e005      	b.n	800b7aa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b7a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7aa:	69fb      	ldr	r3, [r7, #28]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d077      	beq.n	800b8a0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	005a      	lsls	r2, r3, #1
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	085b      	lsrs	r3, r3, #1
 800b7ba:	441a      	add	r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	2b0f      	cmp	r3, #15
 800b7ca:	d916      	bls.n	800b7fa <UART_SetConfig+0x4a6>
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d2:	d212      	bcs.n	800b7fa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	f023 030f 	bic.w	r3, r3, #15
 800b7dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	085b      	lsrs	r3, r3, #1
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	f003 0307 	and.w	r3, r3, #7
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	8afb      	ldrh	r3, [r7, #22]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	8afa      	ldrh	r2, [r7, #22]
 800b7f6:	60da      	str	r2, [r3, #12]
 800b7f8:	e052      	b.n	800b8a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b800:	e04e      	b.n	800b8a0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b802:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b806:	2b08      	cmp	r3, #8
 800b808:	d827      	bhi.n	800b85a <UART_SetConfig+0x506>
 800b80a:	a201      	add	r2, pc, #4	; (adr r2, 800b810 <UART_SetConfig+0x4bc>)
 800b80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b810:	0800b835 	.word	0x0800b835
 800b814:	0800b83d 	.word	0x0800b83d
 800b818:	0800b845 	.word	0x0800b845
 800b81c:	0800b85b 	.word	0x0800b85b
 800b820:	0800b84b 	.word	0x0800b84b
 800b824:	0800b85b 	.word	0x0800b85b
 800b828:	0800b85b 	.word	0x0800b85b
 800b82c:	0800b85b 	.word	0x0800b85b
 800b830:	0800b853 	.word	0x0800b853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b834:	f7fd fad2 	bl	8008ddc <HAL_RCC_GetPCLK1Freq>
 800b838:	61f8      	str	r0, [r7, #28]
        break;
 800b83a:	e014      	b.n	800b866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b83c:	f7fd fae4 	bl	8008e08 <HAL_RCC_GetPCLK2Freq>
 800b840:	61f8      	str	r0, [r7, #28]
        break;
 800b842:	e010      	b.n	800b866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b844:	4b1e      	ldr	r3, [pc, #120]	; (800b8c0 <UART_SetConfig+0x56c>)
 800b846:	61fb      	str	r3, [r7, #28]
        break;
 800b848:	e00d      	b.n	800b866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b84a:	f7fd fa2f 	bl	8008cac <HAL_RCC_GetSysClockFreq>
 800b84e:	61f8      	str	r0, [r7, #28]
        break;
 800b850:	e009      	b.n	800b866 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b856:	61fb      	str	r3, [r7, #28]
        break;
 800b858:	e005      	b.n	800b866 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b864:	bf00      	nop
    }

    if (pclk != 0U)
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d019      	beq.n	800b8a0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	085a      	lsrs	r2, r3, #1
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	441a      	add	r2, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b87e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	2b0f      	cmp	r3, #15
 800b884:	d909      	bls.n	800b89a <UART_SetConfig+0x546>
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b88c:	d205      	bcs.n	800b89a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	b29a      	uxth	r2, r3
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	60da      	str	r2, [r3, #12]
 800b898:	e002      	b.n	800b8a0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b8ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3728      	adds	r7, #40	; 0x28
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8ba:	bf00      	nop
 800b8bc:	40008000 	.word	0x40008000
 800b8c0:	00f42400 	.word	0x00f42400

0800b8c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d0:	f003 0301 	and.w	r3, r3, #1
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	430a      	orrs	r2, r1
 800b8ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d00a      	beq.n	800b910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	430a      	orrs	r2, r1
 800b90e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	430a      	orrs	r2, r1
 800b930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b936:	f003 0308 	and.w	r3, r3, #8
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00a      	beq.n	800b954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	430a      	orrs	r2, r1
 800b952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b958:	f003 0310 	and.w	r3, r3, #16
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00a      	beq.n	800b976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	430a      	orrs	r2, r1
 800b974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97a:	f003 0320 	and.w	r3, r3, #32
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d00a      	beq.n	800b998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	430a      	orrs	r2, r1
 800b996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d01a      	beq.n	800b9da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	430a      	orrs	r2, r1
 800b9b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9c2:	d10a      	bne.n	800b9da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	430a      	orrs	r2, r1
 800b9d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d00a      	beq.n	800b9fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	430a      	orrs	r2, r1
 800b9fa:	605a      	str	r2, [r3, #4]
  }
}
 800b9fc:	bf00      	nop
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b086      	sub	sp, #24
 800ba0c:	af02      	add	r7, sp, #8
 800ba0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba18:	f7f9 ffe6 	bl	80059e8 <HAL_GetTick>
 800ba1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 0308 	and.w	r3, r3, #8
 800ba28:	2b08      	cmp	r3, #8
 800ba2a:	d10e      	bne.n	800ba4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f82d 	bl	800ba9a <UART_WaitOnFlagUntilTimeout>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e023      	b.n	800ba92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b04      	cmp	r3, #4
 800ba56:	d10e      	bne.n	800ba76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2200      	movs	r2, #0
 800ba62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 f817 	bl	800ba9a <UART_WaitOnFlagUntilTimeout>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d001      	beq.n	800ba76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e00d      	b.n	800ba92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2220      	movs	r2, #32
 800ba7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2220      	movs	r2, #32
 800ba80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b09c      	sub	sp, #112	; 0x70
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	603b      	str	r3, [r7, #0]
 800baa6:	4613      	mov	r3, r2
 800baa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baaa:	e0a5      	b.n	800bbf8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab2:	f000 80a1 	beq.w	800bbf8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bab6:	f7f9 ff97 	bl	80059e8 <HAL_GetTick>
 800baba:	4602      	mov	r2, r0
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	1ad3      	subs	r3, r2, r3
 800bac0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d302      	bcc.n	800bacc <UART_WaitOnFlagUntilTimeout+0x32>
 800bac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d13e      	bne.n	800bb4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800badc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bae0:	667b      	str	r3, [r7, #100]	; 0x64
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800baf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800baf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e6      	bne.n	800bacc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3308      	adds	r3, #8
 800bb04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb08:	e853 3f00 	ldrex	r3, [r3]
 800bb0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	f023 0301 	bic.w	r3, r3, #1
 800bb14:	663b      	str	r3, [r7, #96]	; 0x60
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb1e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e5      	bne.n	800bafe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2220      	movs	r2, #32
 800bb36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2220      	movs	r2, #32
 800bb3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e067      	b.n	800bc1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0304 	and.w	r3, r3, #4
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d04f      	beq.n	800bbf8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb66:	d147      	bne.n	800bbf8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb7a:	e853 3f00 	ldrex	r3, [r3]
 800bb7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb86:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb90:	637b      	str	r3, [r7, #52]	; 0x34
 800bb92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb98:	e841 2300 	strex	r3, r2, [r1]
 800bb9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d1e6      	bne.n	800bb72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3308      	adds	r3, #8
 800bbaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	e853 3f00 	ldrex	r3, [r3]
 800bbb2:	613b      	str	r3, [r7, #16]
   return(result);
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f023 0301 	bic.w	r3, r3, #1
 800bbba:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	3308      	adds	r3, #8
 800bbc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbc4:	623a      	str	r2, [r7, #32]
 800bbc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc8:	69f9      	ldr	r1, [r7, #28]
 800bbca:	6a3a      	ldr	r2, [r7, #32]
 800bbcc:	e841 2300 	strex	r3, r2, [r1]
 800bbd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1e5      	bne.n	800bba4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2220      	movs	r2, #32
 800bbdc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2220      	movs	r2, #32
 800bbe2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e010      	b.n	800bc1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	69da      	ldr	r2, [r3, #28]
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	4013      	ands	r3, r2
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	bf0c      	ite	eq
 800bc08:	2301      	moveq	r3, #1
 800bc0a:	2300      	movne	r3, #0
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	461a      	mov	r2, r3
 800bc10:	79fb      	ldrb	r3, [r7, #7]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	f43f af4a 	beq.w	800baac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3770      	adds	r7, #112	; 0x70
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
	...

0800bc24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b097      	sub	sp, #92	; 0x5c
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	68ba      	ldr	r2, [r7, #8]
 800bc36:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	88fa      	ldrh	r2, [r7, #6]
 800bc3c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	88fa      	ldrh	r2, [r7, #6]
 800bc44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc56:	d10e      	bne.n	800bc76 <UART_Start_Receive_IT+0x52>
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d105      	bne.n	800bc6c <UART_Start_Receive_IT+0x48>
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bc66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bc6a:	e02d      	b.n	800bcc8 <UART_Start_Receive_IT+0xa4>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	22ff      	movs	r2, #255	; 0xff
 800bc70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bc74:	e028      	b.n	800bcc8 <UART_Start_Receive_IT+0xa4>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	689b      	ldr	r3, [r3, #8]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10d      	bne.n	800bc9a <UART_Start_Receive_IT+0x76>
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d104      	bne.n	800bc90 <UART_Start_Receive_IT+0x6c>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	22ff      	movs	r2, #255	; 0xff
 800bc8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bc8e:	e01b      	b.n	800bcc8 <UART_Start_Receive_IT+0xa4>
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	227f      	movs	r2, #127	; 0x7f
 800bc94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bc98:	e016      	b.n	800bcc8 <UART_Start_Receive_IT+0xa4>
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bca2:	d10d      	bne.n	800bcc0 <UART_Start_Receive_IT+0x9c>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d104      	bne.n	800bcb6 <UART_Start_Receive_IT+0x92>
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	227f      	movs	r2, #127	; 0x7f
 800bcb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bcb4:	e008      	b.n	800bcc8 <UART_Start_Receive_IT+0xa4>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	223f      	movs	r2, #63	; 0x3f
 800bcba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800bcbe:	e003      	b.n	800bcc8 <UART_Start_Receive_IT+0xa4>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2222      	movs	r2, #34	; 0x22
 800bcd4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce0:	e853 3f00 	ldrex	r3, [r3]
 800bce4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce8:	f043 0301 	orr.w	r3, r3, #1
 800bcec:	657b      	str	r3, [r7, #84]	; 0x54
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	3308      	adds	r3, #8
 800bcf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcf6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bcf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcfe:	e841 2300 	strex	r3, r2, [r1]
 800bd02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bd04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1e5      	bne.n	800bcd6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd12:	d107      	bne.n	800bd24 <UART_Start_Receive_IT+0x100>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d103      	bne.n	800bd24 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4a24      	ldr	r2, [pc, #144]	; (800bdb0 <UART_Start_Receive_IT+0x18c>)
 800bd20:	665a      	str	r2, [r3, #100]	; 0x64
 800bd22:	e002      	b.n	800bd2a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	4a23      	ldr	r2, [pc, #140]	; (800bdb4 <UART_Start_Receive_IT+0x190>)
 800bd28:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d019      	beq.n	800bd6e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	e853 3f00 	ldrex	r3, [r3]
 800bd46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bd4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	461a      	mov	r2, r3
 800bd56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34
 800bd5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd60:	e841 2300 	strex	r3, r2, [r1]
 800bd64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1e6      	bne.n	800bd3a <UART_Start_Receive_IT+0x116>
 800bd6c:	e018      	b.n	800bda0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	e853 3f00 	ldrex	r3, [r3]
 800bd7a:	613b      	str	r3, [r7, #16]
   return(result);
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	f043 0320 	orr.w	r3, r3, #32
 800bd82:	653b      	str	r3, [r7, #80]	; 0x50
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	461a      	mov	r2, r3
 800bd8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd8c:	623b      	str	r3, [r7, #32]
 800bd8e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	69f9      	ldr	r1, [r7, #28]
 800bd92:	6a3a      	ldr	r2, [r7, #32]
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e6      	bne.n	800bd6e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	375c      	adds	r7, #92	; 0x5c
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	0800c1d7 	.word	0x0800c1d7
 800bdb4:	0800c077 	.word	0x0800c077

0800bdb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b095      	sub	sp, #84	; 0x54
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	e853 3f00 	ldrex	r3, [r3]
 800bdcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bdd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	461a      	mov	r2, r3
 800bddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdde:	643b      	str	r3, [r7, #64]	; 0x40
 800bde0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bde4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bde6:	e841 2300 	strex	r3, r2, [r1]
 800bdea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1e6      	bne.n	800bdc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	e853 3f00 	ldrex	r3, [r3]
 800be00:	61fb      	str	r3, [r7, #28]
   return(result);
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	f023 0301 	bic.w	r3, r3, #1
 800be08:	64bb      	str	r3, [r7, #72]	; 0x48
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	3308      	adds	r3, #8
 800be10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be12:	62fa      	str	r2, [r7, #44]	; 0x2c
 800be14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be1a:	e841 2300 	strex	r3, r2, [r1]
 800be1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800be20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1e5      	bne.n	800bdf2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d118      	bne.n	800be60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	e853 3f00 	ldrex	r3, [r3]
 800be3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	f023 0310 	bic.w	r3, r3, #16
 800be42:	647b      	str	r3, [r7, #68]	; 0x44
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	461a      	mov	r2, r3
 800be4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be4c:	61bb      	str	r3, [r7, #24]
 800be4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	6979      	ldr	r1, [r7, #20]
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	e841 2300 	strex	r3, r2, [r1]
 800be58:	613b      	str	r3, [r7, #16]
   return(result);
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d1e6      	bne.n	800be2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2220      	movs	r2, #32
 800be64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	665a      	str	r2, [r3, #100]	; 0x64
}
 800be72:	bf00      	nop
 800be74:	3754      	adds	r7, #84	; 0x54
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b084      	sub	sp, #16
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be9c:	68f8      	ldr	r0, [r7, #12]
 800be9e:	f7ff fa43 	bl	800b328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bea2:	bf00      	nop
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800beaa:	b480      	push	{r7}
 800beac:	b08f      	sub	sp, #60	; 0x3c
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800beb6:	2b21      	cmp	r3, #33	; 0x21
 800beb8:	d14d      	bne.n	800bf56 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d132      	bne.n	800bf2c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	6a3b      	ldr	r3, [r7, #32]
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800beda:	637b      	str	r3, [r7, #52]	; 0x34
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bee6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800beea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beec:	e841 2300 	strex	r3, r2, [r1]
 800bef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1e6      	bne.n	800bec6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	e853 3f00 	ldrex	r3, [r3]
 800bf04:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf0c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	461a      	mov	r2, r3
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	61bb      	str	r3, [r7, #24]
 800bf18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf1a:	6979      	ldr	r1, [r7, #20]
 800bf1c:	69ba      	ldr	r2, [r7, #24]
 800bf1e:	e841 2300 	strex	r3, r2, [r1]
 800bf22:	613b      	str	r3, [r7, #16]
   return(result);
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d1e6      	bne.n	800bef8 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bf2a:	e014      	b.n	800bf56 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf30:	781a      	ldrb	r2, [r3, #0]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	b292      	uxth	r2, r2
 800bf38:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf3e:	1c5a      	adds	r2, r3, #1
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bf56:	bf00      	nop
 800bf58:	373c      	adds	r7, #60	; 0x3c
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf60:	4770      	bx	lr

0800bf62 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bf62:	b480      	push	{r7}
 800bf64:	b091      	sub	sp, #68	; 0x44
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf6e:	2b21      	cmp	r3, #33	; 0x21
 800bf70:	d151      	bne.n	800c016 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d132      	bne.n	800bfe4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	e853 3f00 	ldrex	r3, [r3]
 800bf8a:	623b      	str	r3, [r7, #32]
   return(result);
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf92:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	461a      	mov	r2, r3
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	633b      	str	r3, [r7, #48]	; 0x30
 800bf9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa4:	e841 2300 	strex	r3, r2, [r1]
 800bfa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1e6      	bne.n	800bf7e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	e853 3f00 	ldrex	r3, [r3]
 800bfbc:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc4:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	61fb      	str	r3, [r7, #28]
 800bfd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfd2:	69b9      	ldr	r1, [r7, #24]
 800bfd4:	69fa      	ldr	r2, [r7, #28]
 800bfd6:	e841 2300 	strex	r3, r2, [r1]
 800bfda:	617b      	str	r3, [r7, #20]
   return(result);
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1e6      	bne.n	800bfb0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bfe2:	e018      	b.n	800c016 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfec:	881a      	ldrh	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bff6:	b292      	uxth	r2, r2
 800bff8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffe:	1c9a      	adds	r2, r3, #2
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c016:	bf00      	nop
 800c018:	3744      	adds	r7, #68	; 0x44
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b088      	sub	sp, #32
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	e853 3f00 	ldrex	r3, [r3]
 800c036:	60bb      	str	r3, [r7, #8]
   return(result);
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c03e:	61fb      	str	r3, [r7, #28]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	461a      	mov	r2, r3
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	61bb      	str	r3, [r7, #24]
 800c04a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	6979      	ldr	r1, [r7, #20]
 800c04e:	69ba      	ldr	r2, [r7, #24]
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	613b      	str	r3, [r7, #16]
   return(result);
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e6      	bne.n	800c02a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2220      	movs	r2, #32
 800c060:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7f6 f861 	bl	8002130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c06e:	bf00      	nop
 800c070:	3720      	adds	r7, #32
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b096      	sub	sp, #88	; 0x58
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c084:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c08c:	2b22      	cmp	r3, #34	; 0x22
 800c08e:	f040 8094 	bne.w	800c1ba <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c098:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c09c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c0a0:	b2d9      	uxtb	r1, r3
 800c0a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c0a6:	b2da      	uxtb	r2, r3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ac:	400a      	ands	r2, r1
 800c0ae:	b2d2      	uxtb	r2, r2
 800c0b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b6:	1c5a      	adds	r2, r3, #1
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d179      	bne.n	800c1ce <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e2:	e853 3f00 	ldrex	r3, [r3]
 800c0e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0ee:	653b      	str	r3, [r7, #80]	; 0x50
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0f8:	647b      	str	r3, [r7, #68]	; 0x44
 800c0fa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c0fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c100:	e841 2300 	strex	r3, r2, [r1]
 800c104:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e6      	bne.n	800c0da <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3308      	adds	r3, #8
 800c112:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	e853 3f00 	ldrex	r3, [r3]
 800c11a:	623b      	str	r3, [r7, #32]
   return(result);
 800c11c:	6a3b      	ldr	r3, [r7, #32]
 800c11e:	f023 0301 	bic.w	r3, r3, #1
 800c122:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	3308      	adds	r3, #8
 800c12a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c12c:	633a      	str	r2, [r7, #48]	; 0x30
 800c12e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c130:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c134:	e841 2300 	strex	r3, r2, [r1]
 800c138:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d1e5      	bne.n	800c10c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2220      	movs	r2, #32
 800c144:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c150:	2b01      	cmp	r3, #1
 800c152:	d12e      	bne.n	800c1b2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	60fb      	str	r3, [r7, #12]
   return(result);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0310 	bic.w	r3, r3, #16
 800c16e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	461a      	mov	r2, r3
 800c176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c178:	61fb      	str	r3, [r7, #28]
 800c17a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17c:	69b9      	ldr	r1, [r7, #24]
 800c17e:	69fa      	ldr	r2, [r7, #28]
 800c180:	e841 2300 	strex	r3, r2, [r1]
 800c184:	617b      	str	r3, [r7, #20]
   return(result);
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d1e6      	bne.n	800c15a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	69db      	ldr	r3, [r3, #28]
 800c192:	f003 0310 	and.w	r3, r3, #16
 800c196:	2b10      	cmp	r3, #16
 800c198:	d103      	bne.n	800c1a2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2210      	movs	r2, #16
 800c1a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff f8c6 	bl	800b33c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c1b0:	e00d      	b.n	800c1ce <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7f5 ffc6 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 800c1b8:	e009      	b.n	800c1ce <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	8b1b      	ldrh	r3, [r3, #24]
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f042 0208 	orr.w	r2, r2, #8
 800c1ca:	b292      	uxth	r2, r2
 800c1cc:	831a      	strh	r2, [r3, #24]
}
 800c1ce:	bf00      	nop
 800c1d0:	3758      	adds	r7, #88	; 0x58
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b096      	sub	sp, #88	; 0x58
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c1e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c1ec:	2b22      	cmp	r3, #34	; 0x22
 800c1ee:	f040 8094 	bne.w	800c31a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c1f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c200:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c202:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c206:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c20a:	4013      	ands	r3, r2
 800c20c:	b29a      	uxth	r2, r3
 800c20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c210:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c216:	1c9a      	adds	r2, r3, #2
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c222:	b29b      	uxth	r3, r3
 800c224:	3b01      	subs	r3, #1
 800c226:	b29a      	uxth	r2, r3
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c234:	b29b      	uxth	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d179      	bne.n	800c32e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c242:	e853 3f00 	ldrex	r3, [r3]
 800c246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c24e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	461a      	mov	r2, r3
 800c256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c258:	643b      	str	r3, [r7, #64]	; 0x40
 800c25a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c25e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c260:	e841 2300 	strex	r3, r2, [r1]
 800c264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1e6      	bne.n	800c23a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	3308      	adds	r3, #8
 800c272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	6a3b      	ldr	r3, [r7, #32]
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	f023 0301 	bic.w	r3, r3, #1
 800c282:	64bb      	str	r3, [r7, #72]	; 0x48
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3308      	adds	r3, #8
 800c28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c28c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c28e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e5      	bne.n	800c26c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d12e      	bne.n	800c312 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	e853 3f00 	ldrex	r3, [r3]
 800c2c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	f023 0310 	bic.w	r3, r3, #16
 800c2ce:	647b      	str	r3, [r7, #68]	; 0x44
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	461a      	mov	r2, r3
 800c2d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c2d8:	61bb      	str	r3, [r7, #24]
 800c2da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	6979      	ldr	r1, [r7, #20]
 800c2de:	69ba      	ldr	r2, [r7, #24]
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e6      	bne.n	800c2ba <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	69db      	ldr	r3, [r3, #28]
 800c2f2:	f003 0310 	and.w	r3, r3, #16
 800c2f6:	2b10      	cmp	r3, #16
 800c2f8:	d103      	bne.n	800c302 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2210      	movs	r2, #16
 800c300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c308:	4619      	mov	r1, r3
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f7ff f816 	bl	800b33c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c310:	e00d      	b.n	800c32e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7f5 ff16 	bl	8002144 <HAL_UART_RxCpltCallback>
}
 800c318:	e009      	b.n	800c32e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	8b1b      	ldrh	r3, [r3, #24]
 800c320:	b29a      	uxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f042 0208 	orr.w	r2, r2, #8
 800c32a:	b292      	uxth	r2, r2
 800c32c:	831a      	strh	r2, [r3, #24]
}
 800c32e:	bf00      	nop
 800c330:	3758      	adds	r7, #88	; 0x58
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c33e:	bf00      	nop
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b085      	sub	sp, #20
 800c34e:	af00      	add	r7, sp, #0
 800c350:	4603      	mov	r3, r0
 800c352:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c354:	2300      	movs	r3, #0
 800c356:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c35c:	2b84      	cmp	r3, #132	; 0x84
 800c35e:	d005      	beq.n	800c36c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c360:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	3303      	adds	r3, #3
 800c36a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c36c:	68fb      	ldr	r3, [r7, #12]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3714      	adds	r7, #20
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c37e:	f000 fdcd 	bl	800cf1c <vTaskStartScheduler>
  
  return osOK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	bd80      	pop	{r7, pc}

0800c388 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38a:	b089      	sub	sp, #36	; 0x24
 800c38c:	af04      	add	r7, sp, #16
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	695b      	ldr	r3, [r3, #20]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d020      	beq.n	800c3dc <osThreadCreate+0x54>
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d01c      	beq.n	800c3dc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685c      	ldr	r4, [r3, #4]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681d      	ldr	r5, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	691e      	ldr	r6, [r3, #16]
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7ff ffc8 	bl	800c34a <makeFreeRtosPriority>
 800c3ba:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	695b      	ldr	r3, [r3, #20]
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3c4:	9202      	str	r2, [sp, #8]
 800c3c6:	9301      	str	r3, [sp, #4]
 800c3c8:	9100      	str	r1, [sp, #0]
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	4632      	mov	r2, r6
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 fbdb 	bl	800cb8c <xTaskCreateStatic>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	60fb      	str	r3, [r7, #12]
 800c3da:	e01c      	b.n	800c416 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685c      	ldr	r4, [r3, #4]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c3e8:	b29e      	uxth	r6, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7ff ffaa 	bl	800c34a <makeFreeRtosPriority>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	f107 030c 	add.w	r3, r7, #12
 800c3fc:	9301      	str	r3, [sp, #4]
 800c3fe:	9200      	str	r2, [sp, #0]
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	4632      	mov	r2, r6
 800c404:	4629      	mov	r1, r5
 800c406:	4620      	mov	r0, r4
 800c408:	f000 fc1d 	bl	800cc46 <xTaskCreate>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d001      	beq.n	800c416 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	e000      	b.n	800c418 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c416:	68fb      	ldr	r3, [r7, #12]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c420 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <osDelay+0x16>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	e000      	b.n	800c438 <osDelay+0x18>
 800c436:	2301      	movs	r3, #1
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fd3b 	bl	800ceb4 <vTaskDelay>
  
  return osOK;
 800c43e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c440:	4618      	mov	r0, r3
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f103 0208 	add.w	r2, r3, #8
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f04f 32ff 	mov.w	r2, #4294967295
 800c460:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f103 0208 	add.w	r2, r3, #8
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f103 0208 	add.w	r2, r3, #8
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c47c:	bf00      	nop
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	689a      	ldr	r2, [r3, #8]
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	683a      	ldr	r2, [r7, #0]
 800c4c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	1c5a      	adds	r2, r3, #1
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	601a      	str	r2, [r3, #0]
}
 800c4de:	bf00      	nop
 800c4e0:	3714      	adds	r7, #20
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b085      	sub	sp, #20
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c500:	d103      	bne.n	800c50a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	e00c      	b.n	800c524 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	3308      	adds	r3, #8
 800c50e:	60fb      	str	r3, [r7, #12]
 800c510:	e002      	b.n	800c518 <vListInsert+0x2e>
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	429a      	cmp	r2, r3
 800c522:	d2f6      	bcs.n	800c512 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	683a      	ldr	r2, [r7, #0]
 800c532:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	683a      	ldr	r2, [r7, #0]
 800c53e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	601a      	str	r2, [r3, #0]
}
 800c550:	bf00      	nop
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	685b      	ldr	r3, [r3, #4]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	6892      	ldr	r2, [r2, #8]
 800c572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	6852      	ldr	r2, [r2, #4]
 800c57c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	d103      	bne.n	800c590 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	689a      	ldr	r2, [r3, #8]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	1e5a      	subs	r2, r3, #1
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08e      	sub	sp, #56	; 0x38
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10a      	bne.n	800c5e2 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d0:	f383 8811 	msr	BASEPRI, r3
 800c5d4:	f3bf 8f6f 	isb	sy
 800c5d8:	f3bf 8f4f 	dsb	sy
 800c5dc:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c5de:	bf00      	nop
 800c5e0:	e7fe      	b.n	800c5e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d103      	bne.n	800c5f0 <xQueueGenericSend+0x40>
 800c5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d101      	bne.n	800c5f4 <xQueueGenericSend+0x44>
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	e000      	b.n	800c5f6 <xQueueGenericSend+0x46>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d10a      	bne.n	800c610 <xQueueGenericSend+0x60>
	__asm volatile
 800c5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fe:	f383 8811 	msr	BASEPRI, r3
 800c602:	f3bf 8f6f 	isb	sy
 800c606:	f3bf 8f4f 	dsb	sy
 800c60a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c60c:	bf00      	nop
 800c60e:	e7fe      	b.n	800c60e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	2b02      	cmp	r3, #2
 800c614:	d103      	bne.n	800c61e <xQueueGenericSend+0x6e>
 800c616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d101      	bne.n	800c622 <xQueueGenericSend+0x72>
 800c61e:	2301      	movs	r3, #1
 800c620:	e000      	b.n	800c624 <xQueueGenericSend+0x74>
 800c622:	2300      	movs	r3, #0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d10a      	bne.n	800c63e <xQueueGenericSend+0x8e>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	f383 8811 	msr	BASEPRI, r3
 800c630:	f3bf 8f6f 	isb	sy
 800c634:	f3bf 8f4f 	dsb	sy
 800c638:	623b      	str	r3, [r7, #32]
}
 800c63a:	bf00      	nop
 800c63c:	e7fe      	b.n	800c63c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c63e:	f001 f86b 	bl	800d718 <xTaskGetSchedulerState>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d102      	bne.n	800c64e <xQueueGenericSend+0x9e>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d101      	bne.n	800c652 <xQueueGenericSend+0xa2>
 800c64e:	2301      	movs	r3, #1
 800c650:	e000      	b.n	800c654 <xQueueGenericSend+0xa4>
 800c652:	2300      	movs	r3, #0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d10a      	bne.n	800c66e <xQueueGenericSend+0xbe>
	__asm volatile
 800c658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65c:	f383 8811 	msr	BASEPRI, r3
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	61fb      	str	r3, [r7, #28]
}
 800c66a:	bf00      	nop
 800c66c:	e7fe      	b.n	800c66c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c66e:	f001 fa89 	bl	800db84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d302      	bcc.n	800c684 <xQueueGenericSend+0xd4>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b02      	cmp	r3, #2
 800c682:	d129      	bne.n	800c6d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c684:	683a      	ldr	r2, [r7, #0]
 800c686:	68b9      	ldr	r1, [r7, #8]
 800c688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c68a:	f000 f96f 	bl	800c96c <prvCopyDataToQueue>
 800c68e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d010      	beq.n	800c6ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	3324      	adds	r3, #36	; 0x24
 800c69c:	4618      	mov	r0, r3
 800c69e:	f000 fe7f 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d013      	beq.n	800c6d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c6a8:	4b3f      	ldr	r3, [pc, #252]	; (800c7a8 <xQueueGenericSend+0x1f8>)
 800c6aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	e00a      	b.n	800c6d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d007      	beq.n	800c6d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c6c0:	4b39      	ldr	r3, [pc, #228]	; (800c7a8 <xQueueGenericSend+0x1f8>)
 800c6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6c6:	601a      	str	r2, [r3, #0]
 800c6c8:	f3bf 8f4f 	dsb	sy
 800c6cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c6d0:	f001 fa88 	bl	800dbe4 <vPortExitCritical>
				return pdPASS;
 800c6d4:	2301      	movs	r3, #1
 800c6d6:	e063      	b.n	800c7a0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d103      	bne.n	800c6e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6de:	f001 fa81 	bl	800dbe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	e05c      	b.n	800c7a0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d106      	bne.n	800c6fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6ec:	f107 0314 	add.w	r3, r7, #20
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 feb7 	bl	800d464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6fa:	f001 fa73 	bl	800dbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6fe:	f000 fc6d 	bl	800cfdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c702:	f001 fa3f 	bl	800db84 <vPortEnterCritical>
 800c706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c70c:	b25b      	sxtb	r3, r3
 800c70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c712:	d103      	bne.n	800c71c <xQueueGenericSend+0x16c>
 800c714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c716:	2200      	movs	r2, #0
 800c718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c722:	b25b      	sxtb	r3, r3
 800c724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c728:	d103      	bne.n	800c732 <xQueueGenericSend+0x182>
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	2200      	movs	r2, #0
 800c72e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c732:	f001 fa57 	bl	800dbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c736:	1d3a      	adds	r2, r7, #4
 800c738:	f107 0314 	add.w	r3, r7, #20
 800c73c:	4611      	mov	r1, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 fea6 	bl	800d490 <xTaskCheckForTimeOut>
 800c744:	4603      	mov	r3, r0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d124      	bne.n	800c794 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c74a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c74c:	f000 fa06 	bl	800cb5c <prvIsQueueFull>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d018      	beq.n	800c788 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c758:	3310      	adds	r3, #16
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	4611      	mov	r1, r2
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fdfa 	bl	800d358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c766:	f000 f991 	bl	800ca8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c76a:	f000 fc45 	bl	800cff8 <xTaskResumeAll>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b00      	cmp	r3, #0
 800c772:	f47f af7c 	bne.w	800c66e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c776:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <xQueueGenericSend+0x1f8>)
 800c778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	e772      	b.n	800c66e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c78a:	f000 f97f 	bl	800ca8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c78e:	f000 fc33 	bl	800cff8 <xTaskResumeAll>
 800c792:	e76c      	b.n	800c66e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c796:	f000 f979 	bl	800ca8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c79a:	f000 fc2d 	bl	800cff8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c79e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3738      	adds	r7, #56	; 0x38
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	e000ed04 	.word	0xe000ed04

0800c7ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b08c      	sub	sp, #48	; 0x30
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10a      	bne.n	800c7dc <xQueueReceive+0x30>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	623b      	str	r3, [r7, #32]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d103      	bne.n	800c7ea <xQueueReceive+0x3e>
 800c7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <xQueueReceive+0x42>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <xQueueReceive+0x44>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10a      	bne.n	800c80a <xQueueReceive+0x5e>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	61fb      	str	r3, [r7, #28]
}
 800c806:	bf00      	nop
 800c808:	e7fe      	b.n	800c808 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c80a:	f000 ff85 	bl	800d718 <xTaskGetSchedulerState>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d102      	bne.n	800c81a <xQueueReceive+0x6e>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d101      	bne.n	800c81e <xQueueReceive+0x72>
 800c81a:	2301      	movs	r3, #1
 800c81c:	e000      	b.n	800c820 <xQueueReceive+0x74>
 800c81e:	2300      	movs	r3, #0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <xQueueReceive+0x8e>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	61bb      	str	r3, [r7, #24]
}
 800c836:	bf00      	nop
 800c838:	e7fe      	b.n	800c838 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c83a:	f001 f9a3 	bl	800db84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	2b00      	cmp	r3, #0
 800c848:	d01f      	beq.n	800c88a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c84a:	68b9      	ldr	r1, [r7, #8]
 800c84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c84e:	f000 f8f7 	bl	800ca40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c854:	1e5a      	subs	r2, r3, #1
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00f      	beq.n	800c882 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c864:	3310      	adds	r3, #16
 800c866:	4618      	mov	r0, r3
 800c868:	f000 fd9a 	bl	800d3a0 <xTaskRemoveFromEventList>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d007      	beq.n	800c882 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c872:	4b3d      	ldr	r3, [pc, #244]	; (800c968 <xQueueReceive+0x1bc>)
 800c874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c878:	601a      	str	r2, [r3, #0]
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c882:	f001 f9af 	bl	800dbe4 <vPortExitCritical>
				return pdPASS;
 800c886:	2301      	movs	r3, #1
 800c888:	e069      	b.n	800c95e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d103      	bne.n	800c898 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c890:	f001 f9a8 	bl	800dbe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c894:	2300      	movs	r3, #0
 800c896:	e062      	b.n	800c95e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c89e:	f107 0310 	add.w	r3, r7, #16
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 fdde 	bl	800d464 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8ac:	f001 f99a 	bl	800dbe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8b0:	f000 fb94 	bl	800cfdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8b4:	f001 f966 	bl	800db84 <vPortEnterCritical>
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8be:	b25b      	sxtb	r3, r3
 800c8c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c4:	d103      	bne.n	800c8ce <xQueueReceive+0x122>
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8d4:	b25b      	sxtb	r3, r3
 800c8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8da:	d103      	bne.n	800c8e4 <xQueueReceive+0x138>
 800c8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8e4:	f001 f97e 	bl	800dbe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8e8:	1d3a      	adds	r2, r7, #4
 800c8ea:	f107 0310 	add.w	r3, r7, #16
 800c8ee:	4611      	mov	r1, r2
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 fdcd 	bl	800d490 <xTaskCheckForTimeOut>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d123      	bne.n	800c944 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8fe:	f000 f917 	bl	800cb30 <prvIsQueueEmpty>
 800c902:	4603      	mov	r3, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	d017      	beq.n	800c938 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c90a:	3324      	adds	r3, #36	; 0x24
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	4611      	mov	r1, r2
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fd21 	bl	800d358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c918:	f000 f8b8 	bl	800ca8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c91c:	f000 fb6c 	bl	800cff8 <xTaskResumeAll>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d189      	bne.n	800c83a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c926:	4b10      	ldr	r3, [pc, #64]	; (800c968 <xQueueReceive+0x1bc>)
 800c928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	f3bf 8f4f 	dsb	sy
 800c932:	f3bf 8f6f 	isb	sy
 800c936:	e780      	b.n	800c83a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c93a:	f000 f8a7 	bl	800ca8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c93e:	f000 fb5b 	bl	800cff8 <xTaskResumeAll>
 800c942:	e77a      	b.n	800c83a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c946:	f000 f8a1 	bl	800ca8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c94a:	f000 fb55 	bl	800cff8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c94e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c950:	f000 f8ee 	bl	800cb30 <prvIsQueueEmpty>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	f43f af6f 	beq.w	800c83a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c95c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3730      	adds	r7, #48	; 0x30
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	e000ed04 	.word	0xe000ed04

0800c96c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b086      	sub	sp, #24
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c978:	2300      	movs	r3, #0
 800c97a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c980:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10d      	bne.n	800c9a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d14d      	bne.n	800ca2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	4618      	mov	r0, r3
 800c998:	f000 fedc 	bl	800d754 <xTaskPriorityDisinherit>
 800c99c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	609a      	str	r2, [r3, #8]
 800c9a4:	e043      	b.n	800ca2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d119      	bne.n	800c9e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	6858      	ldr	r0, [r3, #4]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	68b9      	ldr	r1, [r7, #8]
 800c9b8:	f001 fbda 	bl	800e170 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	685a      	ldr	r2, [r3, #4]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c4:	441a      	add	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	685a      	ldr	r2, [r3, #4]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	689b      	ldr	r3, [r3, #8]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d32b      	bcc.n	800ca2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	605a      	str	r2, [r3, #4]
 800c9de:	e026      	b.n	800ca2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68d8      	ldr	r0, [r3, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	f001 fbc0 	bl	800e170 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	68da      	ldr	r2, [r3, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f8:	425b      	negs	r3, r3
 800c9fa:	441a      	add	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	68da      	ldr	r2, [r3, #12]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d207      	bcs.n	800ca1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	689a      	ldr	r2, [r3, #8]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca14:	425b      	negs	r3, r3
 800ca16:	441a      	add	r2, r3
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d105      	bne.n	800ca2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ca36:	697b      	ldr	r3, [r7, #20]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3718      	adds	r7, #24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d018      	beq.n	800ca84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	68da      	ldr	r2, [r3, #12]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	441a      	add	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	68da      	ldr	r2, [r3, #12]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d303      	bcc.n	800ca74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681a      	ldr	r2, [r3, #0]
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68d9      	ldr	r1, [r3, #12]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6838      	ldr	r0, [r7, #0]
 800ca80:	f001 fb76 	bl	800e170 <memcpy>
	}
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca94:	f001 f876 	bl	800db84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caa0:	e011      	b.n	800cac6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d012      	beq.n	800cad0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	3324      	adds	r3, #36	; 0x24
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fc76 	bl	800d3a0 <xTaskRemoveFromEventList>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d001      	beq.n	800cabe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800caba:	f000 fd4b 	bl	800d554 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cabe:	7bfb      	ldrb	r3, [r7, #15]
 800cac0:	3b01      	subs	r3, #1
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	dce9      	bgt.n	800caa2 <prvUnlockQueue+0x16>
 800cace:	e000      	b.n	800cad2 <prvUnlockQueue+0x46>
					break;
 800cad0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	22ff      	movs	r2, #255	; 0xff
 800cad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cada:	f001 f883 	bl	800dbe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cade:	f001 f851 	bl	800db84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cae8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800caea:	e011      	b.n	800cb10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d012      	beq.n	800cb1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3310      	adds	r3, #16
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fc51 	bl	800d3a0 <xTaskRemoveFromEventList>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d001      	beq.n	800cb08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb04:	f000 fd26 	bl	800d554 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb08:	7bbb      	ldrb	r3, [r7, #14]
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	dce9      	bgt.n	800caec <prvUnlockQueue+0x60>
 800cb18:	e000      	b.n	800cb1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	22ff      	movs	r2, #255	; 0xff
 800cb20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cb24:	f001 f85e 	bl	800dbe4 <vPortExitCritical>
}
 800cb28:	bf00      	nop
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b084      	sub	sp, #16
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb38:	f001 f824 	bl	800db84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d102      	bne.n	800cb4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb44:	2301      	movs	r3, #1
 800cb46:	60fb      	str	r3, [r7, #12]
 800cb48:	e001      	b.n	800cb4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb4e:	f001 f849 	bl	800dbe4 <vPortExitCritical>

	return xReturn;
 800cb52:	68fb      	ldr	r3, [r7, #12]
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3710      	adds	r7, #16
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}

0800cb5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb64:	f001 f80e 	bl	800db84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d102      	bne.n	800cb7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb74:	2301      	movs	r3, #1
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	e001      	b.n	800cb7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb7e:	f001 f831 	bl	800dbe4 <vPortExitCritical>

	return xReturn;
 800cb82:	68fb      	ldr	r3, [r7, #12]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08e      	sub	sp, #56	; 0x38
 800cb90:	af04      	add	r7, sp, #16
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10a      	bne.n	800cbb6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	623b      	str	r3, [r7, #32]
}
 800cbb2:	bf00      	nop
 800cbb4:	e7fe      	b.n	800cbb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <xTaskCreateStatic+0x46>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	61fb      	str	r3, [r7, #28]
}
 800cbce:	bf00      	nop
 800cbd0:	e7fe      	b.n	800cbd0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cbd2:	2354      	movs	r3, #84	; 0x54
 800cbd4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2b54      	cmp	r3, #84	; 0x54
 800cbda:	d00a      	beq.n	800cbf2 <xTaskCreateStatic+0x66>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	61bb      	str	r3, [r7, #24]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cbf2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d01e      	beq.n	800cc38 <xTaskCreateStatic+0xac>
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d01b      	beq.n	800cc38 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0c:	2202      	movs	r2, #2
 800cc0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc12:	2300      	movs	r3, #0
 800cc14:	9303      	str	r3, [sp, #12]
 800cc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc18:	9302      	str	r3, [sp, #8]
 800cc1a:	f107 0314 	add.w	r3, r7, #20
 800cc1e:	9301      	str	r3, [sp, #4]
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	9300      	str	r3, [sp, #0]
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	687a      	ldr	r2, [r7, #4]
 800cc28:	68b9      	ldr	r1, [r7, #8]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 f850 	bl	800ccd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc32:	f000 f8d5 	bl	800cde0 <prvAddNewTaskToReadyList>
 800cc36:	e001      	b.n	800cc3c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc3c:	697b      	ldr	r3, [r7, #20]
	}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3728      	adds	r7, #40	; 0x28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b08c      	sub	sp, #48	; 0x30
 800cc4a:	af04      	add	r7, sp, #16
 800cc4c:	60f8      	str	r0, [r7, #12]
 800cc4e:	60b9      	str	r1, [r7, #8]
 800cc50:	603b      	str	r3, [r7, #0]
 800cc52:	4613      	mov	r3, r2
 800cc54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc56:	88fb      	ldrh	r3, [r7, #6]
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f001 f874 	bl	800dd48 <pvPortMalloc>
 800cc60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00e      	beq.n	800cc86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cc68:	2054      	movs	r0, #84	; 0x54
 800cc6a:	f001 f86d 	bl	800dd48 <pvPortMalloc>
 800cc6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d003      	beq.n	800cc7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	697a      	ldr	r2, [r7, #20]
 800cc7a:	631a      	str	r2, [r3, #48]	; 0x30
 800cc7c:	e005      	b.n	800cc8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cc7e:	6978      	ldr	r0, [r7, #20]
 800cc80:	f001 f92e 	bl	800dee0 <vPortFree>
 800cc84:	e001      	b.n	800cc8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d017      	beq.n	800ccc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cc90:	69fb      	ldr	r3, [r7, #28]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cc98:	88fa      	ldrh	r2, [r7, #6]
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	9303      	str	r3, [sp, #12]
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	9302      	str	r3, [sp, #8]
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	68f8      	ldr	r0, [r7, #12]
 800ccb0:	f000 f80e 	bl	800ccd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccb4:	69f8      	ldr	r0, [r7, #28]
 800ccb6:	f000 f893 	bl	800cde0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	61bb      	str	r3, [r7, #24]
 800ccbe:	e002      	b.n	800ccc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccc6:	69bb      	ldr	r3, [r7, #24]
	}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b088      	sub	sp, #32
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
 800ccdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ccde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cce8:	3b01      	subs	r3, #1
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	f023 0307 	bic.w	r3, r3, #7
 800ccf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ccf8:	69bb      	ldr	r3, [r7, #24]
 800ccfa:	f003 0307 	and.w	r3, r3, #7
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00a      	beq.n	800cd18 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd06:	f383 8811 	msr	BASEPRI, r3
 800cd0a:	f3bf 8f6f 	isb	sy
 800cd0e:	f3bf 8f4f 	dsb	sy
 800cd12:	617b      	str	r3, [r7, #20]
}
 800cd14:	bf00      	nop
 800cd16:	e7fe      	b.n	800cd16 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d01f      	beq.n	800cd5e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd1e:	2300      	movs	r3, #0
 800cd20:	61fb      	str	r3, [r7, #28]
 800cd22:	e012      	b.n	800cd4a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd24:	68ba      	ldr	r2, [r7, #8]
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	4413      	add	r3, r2
 800cd2a:	7819      	ldrb	r1, [r3, #0]
 800cd2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	4413      	add	r3, r2
 800cd32:	3334      	adds	r3, #52	; 0x34
 800cd34:	460a      	mov	r2, r1
 800cd36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	69fb      	ldr	r3, [r7, #28]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d006      	beq.n	800cd52 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	3301      	adds	r3, #1
 800cd48:	61fb      	str	r3, [r7, #28]
 800cd4a:	69fb      	ldr	r3, [r7, #28]
 800cd4c:	2b0f      	cmp	r3, #15
 800cd4e:	d9e9      	bls.n	800cd24 <prvInitialiseNewTask+0x54>
 800cd50:	e000      	b.n	800cd54 <prvInitialiseNewTask+0x84>
			{
				break;
 800cd52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cd5c:	e003      	b.n	800cd66 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd60:	2200      	movs	r2, #0
 800cd62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd68:	2b06      	cmp	r3, #6
 800cd6a:	d901      	bls.n	800cd70 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cd6c:	2306      	movs	r3, #6
 800cd6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd7a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	2200      	movs	r2, #0
 800cd80:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	3304      	adds	r3, #4
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff fb7e 	bl	800c488 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	3318      	adds	r3, #24
 800cd90:	4618      	mov	r0, r3
 800cd92:	f7ff fb79 	bl	800c488 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9e:	f1c3 0207 	rsb	r2, r3, #7
 800cda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdaa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdae:	2200      	movs	r2, #0
 800cdb0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cdba:	683a      	ldr	r2, [r7, #0]
 800cdbc:	68f9      	ldr	r1, [r7, #12]
 800cdbe:	69b8      	ldr	r0, [r7, #24]
 800cdc0:	f000 fdb4 	bl	800d92c <pxPortInitialiseStack>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cdd6:	bf00      	nop
 800cdd8:	3720      	adds	r7, #32
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
	...

0800cde0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cde8:	f000 fecc 	bl	800db84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cdec:	4b2a      	ldr	r3, [pc, #168]	; (800ce98 <prvAddNewTaskToReadyList+0xb8>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	4a29      	ldr	r2, [pc, #164]	; (800ce98 <prvAddNewTaskToReadyList+0xb8>)
 800cdf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cdf6:	4b29      	ldr	r3, [pc, #164]	; (800ce9c <prvAddNewTaskToReadyList+0xbc>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d109      	bne.n	800ce12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cdfe:	4a27      	ldr	r2, [pc, #156]	; (800ce9c <prvAddNewTaskToReadyList+0xbc>)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce04:	4b24      	ldr	r3, [pc, #144]	; (800ce98 <prvAddNewTaskToReadyList+0xb8>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d110      	bne.n	800ce2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce0c:	f000 fbc6 	bl	800d59c <prvInitialiseTaskLists>
 800ce10:	e00d      	b.n	800ce2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce12:	4b23      	ldr	r3, [pc, #140]	; (800cea0 <prvAddNewTaskToReadyList+0xc0>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d109      	bne.n	800ce2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce1a:	4b20      	ldr	r3, [pc, #128]	; (800ce9c <prvAddNewTaskToReadyList+0xbc>)
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d802      	bhi.n	800ce2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce28:	4a1c      	ldr	r2, [pc, #112]	; (800ce9c <prvAddNewTaskToReadyList+0xbc>)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ce2e:	4b1d      	ldr	r3, [pc, #116]	; (800cea4 <prvAddNewTaskToReadyList+0xc4>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3301      	adds	r3, #1
 800ce34:	4a1b      	ldr	r2, [pc, #108]	; (800cea4 <prvAddNewTaskToReadyList+0xc4>)
 800ce36:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	409a      	lsls	r2, r3
 800ce40:	4b19      	ldr	r3, [pc, #100]	; (800cea8 <prvAddNewTaskToReadyList+0xc8>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	4313      	orrs	r3, r2
 800ce46:	4a18      	ldr	r2, [pc, #96]	; (800cea8 <prvAddNewTaskToReadyList+0xc8>)
 800ce48:	6013      	str	r3, [r2, #0]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4e:	4613      	mov	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4413      	add	r3, r2
 800ce54:	009b      	lsls	r3, r3, #2
 800ce56:	4a15      	ldr	r2, [pc, #84]	; (800ceac <prvAddNewTaskToReadyList+0xcc>)
 800ce58:	441a      	add	r2, r3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	4619      	mov	r1, r3
 800ce60:	4610      	mov	r0, r2
 800ce62:	f7ff fb1e 	bl	800c4a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ce66:	f000 febd 	bl	800dbe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ce6a:	4b0d      	ldr	r3, [pc, #52]	; (800cea0 <prvAddNewTaskToReadyList+0xc0>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00e      	beq.n	800ce90 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ce72:	4b0a      	ldr	r3, [pc, #40]	; (800ce9c <prvAddNewTaskToReadyList+0xbc>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d207      	bcs.n	800ce90 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ce80:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <prvAddNewTaskToReadyList+0xd0>)
 800ce82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce90:	bf00      	nop
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20001098 	.word	0x20001098
 800ce9c:	20000f98 	.word	0x20000f98
 800cea0:	200010a4 	.word	0x200010a4
 800cea4:	200010b4 	.word	0x200010b4
 800cea8:	200010a0 	.word	0x200010a0
 800ceac:	20000f9c 	.word	0x20000f9c
 800ceb0:	e000ed04 	.word	0xe000ed04

0800ceb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cebc:	2300      	movs	r3, #0
 800cebe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d017      	beq.n	800cef6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cec6:	4b13      	ldr	r3, [pc, #76]	; (800cf14 <vTaskDelay+0x60>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00a      	beq.n	800cee4 <vTaskDelay+0x30>
	__asm volatile
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	60bb      	str	r3, [r7, #8]
}
 800cee0:	bf00      	nop
 800cee2:	e7fe      	b.n	800cee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cee4:	f000 f87a 	bl	800cfdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cee8:	2100      	movs	r1, #0
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fcb8 	bl	800d860 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cef0:	f000 f882 	bl	800cff8 <xTaskResumeAll>
 800cef4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d107      	bne.n	800cf0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cefc:	4b06      	ldr	r3, [pc, #24]	; (800cf18 <vTaskDelay+0x64>)
 800cefe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf02:	601a      	str	r2, [r3, #0]
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf0c:	bf00      	nop
 800cf0e:	3710      	adds	r7, #16
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	200010c0 	.word	0x200010c0
 800cf18:	e000ed04 	.word	0xe000ed04

0800cf1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08a      	sub	sp, #40	; 0x28
 800cf20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf22:	2300      	movs	r3, #0
 800cf24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cf2a:	463a      	mov	r2, r7
 800cf2c:	1d39      	adds	r1, r7, #4
 800cf2e:	f107 0308 	add.w	r3, r7, #8
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f4 fac0 	bl	80014b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	9202      	str	r2, [sp, #8]
 800cf40:	9301      	str	r3, [sp, #4]
 800cf42:	2300      	movs	r3, #0
 800cf44:	9300      	str	r3, [sp, #0]
 800cf46:	2300      	movs	r3, #0
 800cf48:	460a      	mov	r2, r1
 800cf4a:	491e      	ldr	r1, [pc, #120]	; (800cfc4 <vTaskStartScheduler+0xa8>)
 800cf4c:	481e      	ldr	r0, [pc, #120]	; (800cfc8 <vTaskStartScheduler+0xac>)
 800cf4e:	f7ff fe1d 	bl	800cb8c <xTaskCreateStatic>
 800cf52:	4603      	mov	r3, r0
 800cf54:	4a1d      	ldr	r2, [pc, #116]	; (800cfcc <vTaskStartScheduler+0xb0>)
 800cf56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cf58:	4b1c      	ldr	r3, [pc, #112]	; (800cfcc <vTaskStartScheduler+0xb0>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf60:	2301      	movs	r3, #1
 800cf62:	617b      	str	r3, [r7, #20]
 800cf64:	e001      	b.n	800cf6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf66:	2300      	movs	r3, #0
 800cf68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d116      	bne.n	800cf9e <vTaskStartScheduler+0x82>
	__asm volatile
 800cf70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf74:	f383 8811 	msr	BASEPRI, r3
 800cf78:	f3bf 8f6f 	isb	sy
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	613b      	str	r3, [r7, #16]
}
 800cf82:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf84:	4b12      	ldr	r3, [pc, #72]	; (800cfd0 <vTaskStartScheduler+0xb4>)
 800cf86:	f04f 32ff 	mov.w	r2, #4294967295
 800cf8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf8c:	4b11      	ldr	r3, [pc, #68]	; (800cfd4 <vTaskStartScheduler+0xb8>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf92:	4b11      	ldr	r3, [pc, #68]	; (800cfd8 <vTaskStartScheduler+0xbc>)
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf98:	f000 fd52 	bl	800da40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf9c:	e00e      	b.n	800cfbc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfa4:	d10a      	bne.n	800cfbc <vTaskStartScheduler+0xa0>
	__asm volatile
 800cfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	60fb      	str	r3, [r7, #12]
}
 800cfb8:	bf00      	nop
 800cfba:	e7fe      	b.n	800cfba <vTaskStartScheduler+0x9e>
}
 800cfbc:	bf00      	nop
 800cfbe:	3718      	adds	r7, #24
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	08011a8c 	.word	0x08011a8c
 800cfc8:	0800d56d 	.word	0x0800d56d
 800cfcc:	200010bc 	.word	0x200010bc
 800cfd0:	200010b8 	.word	0x200010b8
 800cfd4:	200010a4 	.word	0x200010a4
 800cfd8:	2000109c 	.word	0x2000109c

0800cfdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfdc:	b480      	push	{r7}
 800cfde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cfe0:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <vTaskSuspendAll+0x18>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	4a03      	ldr	r2, [pc, #12]	; (800cff4 <vTaskSuspendAll+0x18>)
 800cfe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cfea:	bf00      	nop
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr
 800cff4:	200010c0 	.word	0x200010c0

0800cff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b084      	sub	sp, #16
 800cffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cffe:	2300      	movs	r3, #0
 800d000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d002:	2300      	movs	r3, #0
 800d004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d006:	4b41      	ldr	r3, [pc, #260]	; (800d10c <xTaskResumeAll+0x114>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10a      	bne.n	800d024 <xTaskResumeAll+0x2c>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	603b      	str	r3, [r7, #0]
}
 800d020:	bf00      	nop
 800d022:	e7fe      	b.n	800d022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d024:	f000 fdae 	bl	800db84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d028:	4b38      	ldr	r3, [pc, #224]	; (800d10c <xTaskResumeAll+0x114>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	4a37      	ldr	r2, [pc, #220]	; (800d10c <xTaskResumeAll+0x114>)
 800d030:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d032:	4b36      	ldr	r3, [pc, #216]	; (800d10c <xTaskResumeAll+0x114>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d161      	bne.n	800d0fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d03a:	4b35      	ldr	r3, [pc, #212]	; (800d110 <xTaskResumeAll+0x118>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d05d      	beq.n	800d0fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d042:	e02e      	b.n	800d0a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d044:	4b33      	ldr	r3, [pc, #204]	; (800d114 <xTaskResumeAll+0x11c>)
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	3318      	adds	r3, #24
 800d050:	4618      	mov	r0, r3
 800d052:	f7ff fa83 	bl	800c55c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	3304      	adds	r3, #4
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7ff fa7e 	bl	800c55c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d064:	2201      	movs	r2, #1
 800d066:	409a      	lsls	r2, r3
 800d068:	4b2b      	ldr	r3, [pc, #172]	; (800d118 <xTaskResumeAll+0x120>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4313      	orrs	r3, r2
 800d06e:	4a2a      	ldr	r2, [pc, #168]	; (800d118 <xTaskResumeAll+0x120>)
 800d070:	6013      	str	r3, [r2, #0]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d076:	4613      	mov	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4a27      	ldr	r2, [pc, #156]	; (800d11c <xTaskResumeAll+0x124>)
 800d080:	441a      	add	r2, r3
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3304      	adds	r3, #4
 800d086:	4619      	mov	r1, r3
 800d088:	4610      	mov	r0, r2
 800d08a:	f7ff fa0a 	bl	800c4a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d092:	4b23      	ldr	r3, [pc, #140]	; (800d120 <xTaskResumeAll+0x128>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d098:	429a      	cmp	r2, r3
 800d09a:	d302      	bcc.n	800d0a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d09c:	4b21      	ldr	r3, [pc, #132]	; (800d124 <xTaskResumeAll+0x12c>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0a2:	4b1c      	ldr	r3, [pc, #112]	; (800d114 <xTaskResumeAll+0x11c>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1cc      	bne.n	800d044 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d0b0:	f000 fb12 	bl	800d6d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d0b4:	4b1c      	ldr	r3, [pc, #112]	; (800d128 <xTaskResumeAll+0x130>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d010      	beq.n	800d0e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d0c0:	f000 f836 	bl	800d130 <xTaskIncrementTick>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d002      	beq.n	800d0d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d0ca:	4b16      	ldr	r3, [pc, #88]	; (800d124 <xTaskResumeAll+0x12c>)
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	3b01      	subs	r3, #1
 800d0d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d1f1      	bne.n	800d0c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d0dc:	4b12      	ldr	r3, [pc, #72]	; (800d128 <xTaskResumeAll+0x130>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0e2:	4b10      	ldr	r3, [pc, #64]	; (800d124 <xTaskResumeAll+0x12c>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d009      	beq.n	800d0fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0ee:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <xTaskResumeAll+0x134>)
 800d0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f4:	601a      	str	r2, [r3, #0]
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0fe:	f000 fd71 	bl	800dbe4 <vPortExitCritical>

	return xAlreadyYielded;
 800d102:	68bb      	ldr	r3, [r7, #8]
}
 800d104:	4618      	mov	r0, r3
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	200010c0 	.word	0x200010c0
 800d110:	20001098 	.word	0x20001098
 800d114:	20001058 	.word	0x20001058
 800d118:	200010a0 	.word	0x200010a0
 800d11c:	20000f9c 	.word	0x20000f9c
 800d120:	20000f98 	.word	0x20000f98
 800d124:	200010ac 	.word	0x200010ac
 800d128:	200010a8 	.word	0x200010a8
 800d12c:	e000ed04 	.word	0xe000ed04

0800d130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b086      	sub	sp, #24
 800d134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d136:	2300      	movs	r3, #0
 800d138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d13a:	4b4e      	ldr	r3, [pc, #312]	; (800d274 <xTaskIncrementTick+0x144>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f040 808e 	bne.w	800d260 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d144:	4b4c      	ldr	r3, [pc, #304]	; (800d278 <xTaskIncrementTick+0x148>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	3301      	adds	r3, #1
 800d14a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d14c:	4a4a      	ldr	r2, [pc, #296]	; (800d278 <xTaskIncrementTick+0x148>)
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d120      	bne.n	800d19a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d158:	4b48      	ldr	r3, [pc, #288]	; (800d27c <xTaskIncrementTick+0x14c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00a      	beq.n	800d178 <xTaskIncrementTick+0x48>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	603b      	str	r3, [r7, #0]
}
 800d174:	bf00      	nop
 800d176:	e7fe      	b.n	800d176 <xTaskIncrementTick+0x46>
 800d178:	4b40      	ldr	r3, [pc, #256]	; (800d27c <xTaskIncrementTick+0x14c>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	60fb      	str	r3, [r7, #12]
 800d17e:	4b40      	ldr	r3, [pc, #256]	; (800d280 <xTaskIncrementTick+0x150>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a3e      	ldr	r2, [pc, #248]	; (800d27c <xTaskIncrementTick+0x14c>)
 800d184:	6013      	str	r3, [r2, #0]
 800d186:	4a3e      	ldr	r2, [pc, #248]	; (800d280 <xTaskIncrementTick+0x150>)
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6013      	str	r3, [r2, #0]
 800d18c:	4b3d      	ldr	r3, [pc, #244]	; (800d284 <xTaskIncrementTick+0x154>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3301      	adds	r3, #1
 800d192:	4a3c      	ldr	r2, [pc, #240]	; (800d284 <xTaskIncrementTick+0x154>)
 800d194:	6013      	str	r3, [r2, #0]
 800d196:	f000 fa9f 	bl	800d6d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d19a:	4b3b      	ldr	r3, [pc, #236]	; (800d288 <xTaskIncrementTick+0x158>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d348      	bcc.n	800d236 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1a4:	4b35      	ldr	r3, [pc, #212]	; (800d27c <xTaskIncrementTick+0x14c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d104      	bne.n	800d1b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1ae:	4b36      	ldr	r3, [pc, #216]	; (800d288 <xTaskIncrementTick+0x158>)
 800d1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b4:	601a      	str	r2, [r3, #0]
					break;
 800d1b6:	e03e      	b.n	800d236 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1b8:	4b30      	ldr	r3, [pc, #192]	; (800d27c <xTaskIncrementTick+0x14c>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	68db      	ldr	r3, [r3, #12]
 800d1c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1c2:	68bb      	ldr	r3, [r7, #8]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1c8:	693a      	ldr	r2, [r7, #16]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d203      	bcs.n	800d1d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1d0:	4a2d      	ldr	r2, [pc, #180]	; (800d288 <xTaskIncrementTick+0x158>)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1d6:	e02e      	b.n	800d236 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7ff f9bd 	bl	800c55c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d004      	beq.n	800d1f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	3318      	adds	r3, #24
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7ff f9b4 	bl	800c55c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	409a      	lsls	r2, r3
 800d1fc:	4b23      	ldr	r3, [pc, #140]	; (800d28c <xTaskIncrementTick+0x15c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4313      	orrs	r3, r2
 800d202:	4a22      	ldr	r2, [pc, #136]	; (800d28c <xTaskIncrementTick+0x15c>)
 800d204:	6013      	str	r3, [r2, #0]
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d20a:	4613      	mov	r3, r2
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	4413      	add	r3, r2
 800d210:	009b      	lsls	r3, r3, #2
 800d212:	4a1f      	ldr	r2, [pc, #124]	; (800d290 <xTaskIncrementTick+0x160>)
 800d214:	441a      	add	r2, r3
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	3304      	adds	r3, #4
 800d21a:	4619      	mov	r1, r3
 800d21c:	4610      	mov	r0, r2
 800d21e:	f7ff f940 	bl	800c4a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d226:	4b1b      	ldr	r3, [pc, #108]	; (800d294 <xTaskIncrementTick+0x164>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d3b9      	bcc.n	800d1a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d230:	2301      	movs	r3, #1
 800d232:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d234:	e7b6      	b.n	800d1a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d236:	4b17      	ldr	r3, [pc, #92]	; (800d294 <xTaskIncrementTick+0x164>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d23c:	4914      	ldr	r1, [pc, #80]	; (800d290 <xTaskIncrementTick+0x160>)
 800d23e:	4613      	mov	r3, r2
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	4413      	add	r3, r2
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	440b      	add	r3, r1
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	2b01      	cmp	r3, #1
 800d24c:	d901      	bls.n	800d252 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d24e:	2301      	movs	r3, #1
 800d250:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d252:	4b11      	ldr	r3, [pc, #68]	; (800d298 <xTaskIncrementTick+0x168>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d007      	beq.n	800d26a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d25a:	2301      	movs	r3, #1
 800d25c:	617b      	str	r3, [r7, #20]
 800d25e:	e004      	b.n	800d26a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d260:	4b0e      	ldr	r3, [pc, #56]	; (800d29c <xTaskIncrementTick+0x16c>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	3301      	adds	r3, #1
 800d266:	4a0d      	ldr	r2, [pc, #52]	; (800d29c <xTaskIncrementTick+0x16c>)
 800d268:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d26a:	697b      	ldr	r3, [r7, #20]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3718      	adds	r7, #24
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	200010c0 	.word	0x200010c0
 800d278:	2000109c 	.word	0x2000109c
 800d27c:	20001050 	.word	0x20001050
 800d280:	20001054 	.word	0x20001054
 800d284:	200010b0 	.word	0x200010b0
 800d288:	200010b8 	.word	0x200010b8
 800d28c:	200010a0 	.word	0x200010a0
 800d290:	20000f9c 	.word	0x20000f9c
 800d294:	20000f98 	.word	0x20000f98
 800d298:	200010ac 	.word	0x200010ac
 800d29c:	200010a8 	.word	0x200010a8

0800d2a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b087      	sub	sp, #28
 800d2a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d2a6:	4b27      	ldr	r3, [pc, #156]	; (800d344 <vTaskSwitchContext+0xa4>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d003      	beq.n	800d2b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d2ae:	4b26      	ldr	r3, [pc, #152]	; (800d348 <vTaskSwitchContext+0xa8>)
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2b4:	e03f      	b.n	800d336 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d2b6:	4b24      	ldr	r3, [pc, #144]	; (800d348 <vTaskSwitchContext+0xa8>)
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2bc:	4b23      	ldr	r3, [pc, #140]	; (800d34c <vTaskSwitchContext+0xac>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	fab3 f383 	clz	r3, r3
 800d2c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d2ca:	7afb      	ldrb	r3, [r7, #11]
 800d2cc:	f1c3 031f 	rsb	r3, r3, #31
 800d2d0:	617b      	str	r3, [r7, #20]
 800d2d2:	491f      	ldr	r1, [pc, #124]	; (800d350 <vTaskSwitchContext+0xb0>)
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4413      	add	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	440b      	add	r3, r1
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10a      	bne.n	800d2fc <vTaskSwitchContext+0x5c>
	__asm volatile
 800d2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ea:	f383 8811 	msr	BASEPRI, r3
 800d2ee:	f3bf 8f6f 	isb	sy
 800d2f2:	f3bf 8f4f 	dsb	sy
 800d2f6:	607b      	str	r3, [r7, #4]
}
 800d2f8:	bf00      	nop
 800d2fa:	e7fe      	b.n	800d2fa <vTaskSwitchContext+0x5a>
 800d2fc:	697a      	ldr	r2, [r7, #20]
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	4a12      	ldr	r2, [pc, #72]	; (800d350 <vTaskSwitchContext+0xb0>)
 800d308:	4413      	add	r3, r2
 800d30a:	613b      	str	r3, [r7, #16]
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	685a      	ldr	r2, [r3, #4]
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	605a      	str	r2, [r3, #4]
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	3308      	adds	r3, #8
 800d31e:	429a      	cmp	r2, r3
 800d320:	d104      	bne.n	800d32c <vTaskSwitchContext+0x8c>
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	685b      	ldr	r3, [r3, #4]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	605a      	str	r2, [r3, #4]
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	4a08      	ldr	r2, [pc, #32]	; (800d354 <vTaskSwitchContext+0xb4>)
 800d334:	6013      	str	r3, [r2, #0]
}
 800d336:	bf00      	nop
 800d338:	371c      	adds	r7, #28
 800d33a:	46bd      	mov	sp, r7
 800d33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	200010c0 	.word	0x200010c0
 800d348:	200010ac 	.word	0x200010ac
 800d34c:	200010a0 	.word	0x200010a0
 800d350:	20000f9c 	.word	0x20000f9c
 800d354:	20000f98 	.word	0x20000f98

0800d358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d10a      	bne.n	800d37e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36c:	f383 8811 	msr	BASEPRI, r3
 800d370:	f3bf 8f6f 	isb	sy
 800d374:	f3bf 8f4f 	dsb	sy
 800d378:	60fb      	str	r3, [r7, #12]
}
 800d37a:	bf00      	nop
 800d37c:	e7fe      	b.n	800d37c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d37e:	4b07      	ldr	r3, [pc, #28]	; (800d39c <vTaskPlaceOnEventList+0x44>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3318      	adds	r3, #24
 800d384:	4619      	mov	r1, r3
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f7ff f8af 	bl	800c4ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d38c:	2101      	movs	r1, #1
 800d38e:	6838      	ldr	r0, [r7, #0]
 800d390:	f000 fa66 	bl	800d860 <prvAddCurrentTaskToDelayedList>
}
 800d394:	bf00      	nop
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	20000f98 	.word	0x20000f98

0800d3a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	60fb      	str	r3, [r7, #12]
}
 800d3c8:	bf00      	nop
 800d3ca:	e7fe      	b.n	800d3ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	3318      	adds	r3, #24
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7ff f8c3 	bl	800c55c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3d6:	4b1d      	ldr	r3, [pc, #116]	; (800d44c <xTaskRemoveFromEventList+0xac>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d11c      	bne.n	800d418 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	3304      	adds	r3, #4
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7ff f8ba 	bl	800c55c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	409a      	lsls	r2, r3
 800d3f0:	4b17      	ldr	r3, [pc, #92]	; (800d450 <xTaskRemoveFromEventList+0xb0>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4313      	orrs	r3, r2
 800d3f6:	4a16      	ldr	r2, [pc, #88]	; (800d450 <xTaskRemoveFromEventList+0xb0>)
 800d3f8:	6013      	str	r3, [r2, #0]
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3fe:	4613      	mov	r3, r2
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	009b      	lsls	r3, r3, #2
 800d406:	4a13      	ldr	r2, [pc, #76]	; (800d454 <xTaskRemoveFromEventList+0xb4>)
 800d408:	441a      	add	r2, r3
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4619      	mov	r1, r3
 800d410:	4610      	mov	r0, r2
 800d412:	f7ff f846 	bl	800c4a2 <vListInsertEnd>
 800d416:	e005      	b.n	800d424 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	3318      	adds	r3, #24
 800d41c:	4619      	mov	r1, r3
 800d41e:	480e      	ldr	r0, [pc, #56]	; (800d458 <xTaskRemoveFromEventList+0xb8>)
 800d420:	f7ff f83f 	bl	800c4a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d424:	693b      	ldr	r3, [r7, #16]
 800d426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d428:	4b0c      	ldr	r3, [pc, #48]	; (800d45c <xTaskRemoveFromEventList+0xbc>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42e:	429a      	cmp	r2, r3
 800d430:	d905      	bls.n	800d43e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d432:	2301      	movs	r3, #1
 800d434:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d436:	4b0a      	ldr	r3, [pc, #40]	; (800d460 <xTaskRemoveFromEventList+0xc0>)
 800d438:	2201      	movs	r2, #1
 800d43a:	601a      	str	r2, [r3, #0]
 800d43c:	e001      	b.n	800d442 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d43e:	2300      	movs	r3, #0
 800d440:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d442:	697b      	ldr	r3, [r7, #20]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3718      	adds	r7, #24
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	200010c0 	.word	0x200010c0
 800d450:	200010a0 	.word	0x200010a0
 800d454:	20000f9c 	.word	0x20000f9c
 800d458:	20001058 	.word	0x20001058
 800d45c:	20000f98 	.word	0x20000f98
 800d460:	200010ac 	.word	0x200010ac

0800d464 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d46c:	4b06      	ldr	r3, [pc, #24]	; (800d488 <vTaskInternalSetTimeOutState+0x24>)
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d474:	4b05      	ldr	r3, [pc, #20]	; (800d48c <vTaskInternalSetTimeOutState+0x28>)
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	605a      	str	r2, [r3, #4]
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	200010b0 	.word	0x200010b0
 800d48c:	2000109c 	.word	0x2000109c

0800d490 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b088      	sub	sp, #32
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
 800d498:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10a      	bne.n	800d4b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	613b      	str	r3, [r7, #16]
}
 800d4b2:	bf00      	nop
 800d4b4:	e7fe      	b.n	800d4b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10a      	bne.n	800d4d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	60fb      	str	r3, [r7, #12]
}
 800d4ce:	bf00      	nop
 800d4d0:	e7fe      	b.n	800d4d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d4d2:	f000 fb57 	bl	800db84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4d6:	4b1d      	ldr	r3, [pc, #116]	; (800d54c <xTaskCheckForTimeOut+0xbc>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	69ba      	ldr	r2, [r7, #24]
 800d4e2:	1ad3      	subs	r3, r2, r3
 800d4e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ee:	d102      	bne.n	800d4f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	61fb      	str	r3, [r7, #28]
 800d4f4:	e023      	b.n	800d53e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	4b15      	ldr	r3, [pc, #84]	; (800d550 <xTaskCheckForTimeOut+0xc0>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d007      	beq.n	800d512 <xTaskCheckForTimeOut+0x82>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d302      	bcc.n	800d512 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d50c:	2301      	movs	r3, #1
 800d50e:	61fb      	str	r3, [r7, #28]
 800d510:	e015      	b.n	800d53e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	697a      	ldr	r2, [r7, #20]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d20b      	bcs.n	800d534 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	1ad2      	subs	r2, r2, r3
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f7ff ff9b 	bl	800d464 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d52e:	2300      	movs	r3, #0
 800d530:	61fb      	str	r3, [r7, #28]
 800d532:	e004      	b.n	800d53e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d53a:	2301      	movs	r3, #1
 800d53c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d53e:	f000 fb51 	bl	800dbe4 <vPortExitCritical>

	return xReturn;
 800d542:	69fb      	ldr	r3, [r7, #28]
}
 800d544:	4618      	mov	r0, r3
 800d546:	3720      	adds	r7, #32
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	2000109c 	.word	0x2000109c
 800d550:	200010b0 	.word	0x200010b0

0800d554 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d554:	b480      	push	{r7}
 800d556:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d558:	4b03      	ldr	r3, [pc, #12]	; (800d568 <vTaskMissedYield+0x14>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	601a      	str	r2, [r3, #0]
}
 800d55e:	bf00      	nop
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr
 800d568:	200010ac 	.word	0x200010ac

0800d56c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d574:	f000 f852 	bl	800d61c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d578:	4b06      	ldr	r3, [pc, #24]	; (800d594 <prvIdleTask+0x28>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d9f9      	bls.n	800d574 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <prvIdleTask+0x2c>)
 800d582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	f3bf 8f4f 	dsb	sy
 800d58c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d590:	e7f0      	b.n	800d574 <prvIdleTask+0x8>
 800d592:	bf00      	nop
 800d594:	20000f9c 	.word	0x20000f9c
 800d598:	e000ed04 	.word	0xe000ed04

0800d59c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	607b      	str	r3, [r7, #4]
 800d5a6:	e00c      	b.n	800d5c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	4613      	mov	r3, r2
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	4413      	add	r3, r2
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	4a12      	ldr	r2, [pc, #72]	; (800d5fc <prvInitialiseTaskLists+0x60>)
 800d5b4:	4413      	add	r3, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe ff46 	bl	800c448 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	607b      	str	r3, [r7, #4]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2b06      	cmp	r3, #6
 800d5c6:	d9ef      	bls.n	800d5a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5c8:	480d      	ldr	r0, [pc, #52]	; (800d600 <prvInitialiseTaskLists+0x64>)
 800d5ca:	f7fe ff3d 	bl	800c448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5ce:	480d      	ldr	r0, [pc, #52]	; (800d604 <prvInitialiseTaskLists+0x68>)
 800d5d0:	f7fe ff3a 	bl	800c448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5d4:	480c      	ldr	r0, [pc, #48]	; (800d608 <prvInitialiseTaskLists+0x6c>)
 800d5d6:	f7fe ff37 	bl	800c448 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5da:	480c      	ldr	r0, [pc, #48]	; (800d60c <prvInitialiseTaskLists+0x70>)
 800d5dc:	f7fe ff34 	bl	800c448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5e0:	480b      	ldr	r0, [pc, #44]	; (800d610 <prvInitialiseTaskLists+0x74>)
 800d5e2:	f7fe ff31 	bl	800c448 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5e6:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <prvInitialiseTaskLists+0x78>)
 800d5e8:	4a05      	ldr	r2, [pc, #20]	; (800d600 <prvInitialiseTaskLists+0x64>)
 800d5ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5ec:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <prvInitialiseTaskLists+0x7c>)
 800d5ee:	4a05      	ldr	r2, [pc, #20]	; (800d604 <prvInitialiseTaskLists+0x68>)
 800d5f0:	601a      	str	r2, [r3, #0]
}
 800d5f2:	bf00      	nop
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20000f9c 	.word	0x20000f9c
 800d600:	20001028 	.word	0x20001028
 800d604:	2000103c 	.word	0x2000103c
 800d608:	20001058 	.word	0x20001058
 800d60c:	2000106c 	.word	0x2000106c
 800d610:	20001084 	.word	0x20001084
 800d614:	20001050 	.word	0x20001050
 800d618:	20001054 	.word	0x20001054

0800d61c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d622:	e019      	b.n	800d658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d624:	f000 faae 	bl	800db84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d628:	4b10      	ldr	r3, [pc, #64]	; (800d66c <prvCheckTasksWaitingTermination+0x50>)
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3304      	adds	r3, #4
 800d634:	4618      	mov	r0, r3
 800d636:	f7fe ff91 	bl	800c55c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d63a:	4b0d      	ldr	r3, [pc, #52]	; (800d670 <prvCheckTasksWaitingTermination+0x54>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3b01      	subs	r3, #1
 800d640:	4a0b      	ldr	r2, [pc, #44]	; (800d670 <prvCheckTasksWaitingTermination+0x54>)
 800d642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d644:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <prvCheckTasksWaitingTermination+0x58>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	3b01      	subs	r3, #1
 800d64a:	4a0a      	ldr	r2, [pc, #40]	; (800d674 <prvCheckTasksWaitingTermination+0x58>)
 800d64c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d64e:	f000 fac9 	bl	800dbe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f810 	bl	800d678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d658:	4b06      	ldr	r3, [pc, #24]	; (800d674 <prvCheckTasksWaitingTermination+0x58>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1e1      	bne.n	800d624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d660:	bf00      	nop
 800d662:	bf00      	nop
 800d664:	3708      	adds	r7, #8
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
 800d66a:	bf00      	nop
 800d66c:	2000106c 	.word	0x2000106c
 800d670:	20001098 	.word	0x20001098
 800d674:	20001080 	.word	0x20001080

0800d678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d686:	2b00      	cmp	r3, #0
 800d688:	d108      	bne.n	800d69c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68e:	4618      	mov	r0, r3
 800d690:	f000 fc26 	bl	800dee0 <vPortFree>
				vPortFree( pxTCB );
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fc23 	bl	800dee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d69a:	e018      	b.n	800d6ce <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d103      	bne.n	800d6ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fc1a 	bl	800dee0 <vPortFree>
	}
 800d6ac:	e00f      	b.n	800d6ce <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d00a      	beq.n	800d6ce <prvDeleteTCB+0x56>
	__asm volatile
 800d6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6bc:	f383 8811 	msr	BASEPRI, r3
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	f3bf 8f4f 	dsb	sy
 800d6c8:	60fb      	str	r3, [r7, #12]
}
 800d6ca:	bf00      	nop
 800d6cc:	e7fe      	b.n	800d6cc <prvDeleteTCB+0x54>
	}
 800d6ce:	bf00      	nop
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
	...

0800d6d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6de:	4b0c      	ldr	r3, [pc, #48]	; (800d710 <prvResetNextTaskUnblockTime+0x38>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d104      	bne.n	800d6f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e8:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <prvResetNextTaskUnblockTime+0x3c>)
 800d6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6f0:	e008      	b.n	800d704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f2:	4b07      	ldr	r3, [pc, #28]	; (800d710 <prvResetNextTaskUnblockTime+0x38>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	68db      	ldr	r3, [r3, #12]
 800d6fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	4a04      	ldr	r2, [pc, #16]	; (800d714 <prvResetNextTaskUnblockTime+0x3c>)
 800d702:	6013      	str	r3, [r2, #0]
}
 800d704:	bf00      	nop
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70e:	4770      	bx	lr
 800d710:	20001050 	.word	0x20001050
 800d714:	200010b8 	.word	0x200010b8

0800d718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d718:	b480      	push	{r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d71e:	4b0b      	ldr	r3, [pc, #44]	; (800d74c <xTaskGetSchedulerState+0x34>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d102      	bne.n	800d72c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d726:	2301      	movs	r3, #1
 800d728:	607b      	str	r3, [r7, #4]
 800d72a:	e008      	b.n	800d73e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d72c:	4b08      	ldr	r3, [pc, #32]	; (800d750 <xTaskGetSchedulerState+0x38>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d734:	2302      	movs	r3, #2
 800d736:	607b      	str	r3, [r7, #4]
 800d738:	e001      	b.n	800d73e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d73a:	2300      	movs	r3, #0
 800d73c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d73e:	687b      	ldr	r3, [r7, #4]
	}
 800d740:	4618      	mov	r0, r3
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	200010a4 	.word	0x200010a4
 800d750:	200010c0 	.word	0x200010c0

0800d754 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d754:	b580      	push	{r7, lr}
 800d756:	b086      	sub	sp, #24
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d760:	2300      	movs	r3, #0
 800d762:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d06e      	beq.n	800d848 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d76a:	4b3a      	ldr	r3, [pc, #232]	; (800d854 <xTaskPriorityDisinherit+0x100>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	693a      	ldr	r2, [r7, #16]
 800d770:	429a      	cmp	r2, r3
 800d772:	d00a      	beq.n	800d78a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	60fb      	str	r3, [r7, #12]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d10a      	bne.n	800d7a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	f383 8811 	msr	BASEPRI, r3
 800d79a:	f3bf 8f6f 	isb	sy
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	60bb      	str	r3, [r7, #8]
}
 800d7a4:	bf00      	nop
 800d7a6:	e7fe      	b.n	800d7a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ac:	1e5a      	subs	r2, r3, #1
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ba:	429a      	cmp	r2, r3
 800d7bc:	d044      	beq.n	800d848 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d140      	bne.n	800d848 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	3304      	adds	r3, #4
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe fec6 	bl	800c55c <uxListRemove>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d115      	bne.n	800d802 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d7d6:	693b      	ldr	r3, [r7, #16]
 800d7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7da:	491f      	ldr	r1, [pc, #124]	; (800d858 <xTaskPriorityDisinherit+0x104>)
 800d7dc:	4613      	mov	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	440b      	add	r3, r1
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d10a      	bne.n	800d802 <xTaskPriorityDisinherit+0xae>
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f6:	43da      	mvns	r2, r3
 800d7f8:	4b18      	ldr	r3, [pc, #96]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	4a17      	ldr	r2, [pc, #92]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d800:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80e:	f1c3 0207 	rsb	r2, r3, #7
 800d812:	693b      	ldr	r3, [r7, #16]
 800d814:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81a:	2201      	movs	r2, #1
 800d81c:	409a      	lsls	r2, r3
 800d81e:	4b0f      	ldr	r3, [pc, #60]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	4313      	orrs	r3, r2
 800d824:	4a0d      	ldr	r2, [pc, #52]	; (800d85c <xTaskPriorityDisinherit+0x108>)
 800d826:	6013      	str	r3, [r2, #0]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d82c:	4613      	mov	r3, r2
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	4413      	add	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4a08      	ldr	r2, [pc, #32]	; (800d858 <xTaskPriorityDisinherit+0x104>)
 800d836:	441a      	add	r2, r3
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	3304      	adds	r3, #4
 800d83c:	4619      	mov	r1, r3
 800d83e:	4610      	mov	r0, r2
 800d840:	f7fe fe2f 	bl	800c4a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d844:	2301      	movs	r3, #1
 800d846:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d848:	697b      	ldr	r3, [r7, #20]
	}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3718      	adds	r7, #24
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	20000f98 	.word	0x20000f98
 800d858:	20000f9c 	.word	0x20000f9c
 800d85c:	200010a0 	.word	0x200010a0

0800d860 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d86a:	4b29      	ldr	r3, [pc, #164]	; (800d910 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d870:	4b28      	ldr	r3, [pc, #160]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	3304      	adds	r3, #4
 800d876:	4618      	mov	r0, r3
 800d878:	f7fe fe70 	bl	800c55c <uxListRemove>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10b      	bne.n	800d89a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d882:	4b24      	ldr	r3, [pc, #144]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	2201      	movs	r2, #1
 800d88a:	fa02 f303 	lsl.w	r3, r2, r3
 800d88e:	43da      	mvns	r2, r3
 800d890:	4b21      	ldr	r3, [pc, #132]	; (800d918 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4013      	ands	r3, r2
 800d896:	4a20      	ldr	r2, [pc, #128]	; (800d918 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d898:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8a0:	d10a      	bne.n	800d8b8 <prvAddCurrentTaskToDelayedList+0x58>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d007      	beq.n	800d8b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8a8:	4b1a      	ldr	r3, [pc, #104]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	481a      	ldr	r0, [pc, #104]	; (800d91c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d8b2:	f7fe fdf6 	bl	800c4a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d8b6:	e026      	b.n	800d906 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4413      	add	r3, r2
 800d8be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d8c0:	4b14      	ldr	r3, [pc, #80]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	68ba      	ldr	r2, [r7, #8]
 800d8c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d209      	bcs.n	800d8e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8d0:	4b13      	ldr	r3, [pc, #76]	; (800d920 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	4b0f      	ldr	r3, [pc, #60]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3304      	adds	r3, #4
 800d8da:	4619      	mov	r1, r3
 800d8dc:	4610      	mov	r0, r2
 800d8de:	f7fe fe04 	bl	800c4ea <vListInsert>
}
 800d8e2:	e010      	b.n	800d906 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8e4:	4b0f      	ldr	r3, [pc, #60]	; (800d924 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d8e6:	681a      	ldr	r2, [r3, #0]
 800d8e8:	4b0a      	ldr	r3, [pc, #40]	; (800d914 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	3304      	adds	r3, #4
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	f7fe fdfa 	bl	800c4ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8f6:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	68ba      	ldr	r2, [r7, #8]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d202      	bcs.n	800d906 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d900:	4a09      	ldr	r2, [pc, #36]	; (800d928 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	6013      	str	r3, [r2, #0]
}
 800d906:	bf00      	nop
 800d908:	3710      	adds	r7, #16
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	2000109c 	.word	0x2000109c
 800d914:	20000f98 	.word	0x20000f98
 800d918:	200010a0 	.word	0x200010a0
 800d91c:	20001084 	.word	0x20001084
 800d920:	20001054 	.word	0x20001054
 800d924:	20001050 	.word	0x20001050
 800d928:	200010b8 	.word	0x200010b8

0800d92c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	60f8      	str	r0, [r7, #12]
 800d934:	60b9      	str	r1, [r7, #8]
 800d936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	3b04      	subs	r3, #4
 800d93c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3b04      	subs	r3, #4
 800d94a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	f023 0201 	bic.w	r2, r3, #1
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	3b04      	subs	r3, #4
 800d95a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d95c:	4a0c      	ldr	r2, [pc, #48]	; (800d990 <pxPortInitialiseStack+0x64>)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3b14      	subs	r3, #20
 800d966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3b04      	subs	r3, #4
 800d972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f06f 0202 	mvn.w	r2, #2
 800d97a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	3b20      	subs	r3, #32
 800d980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d982:	68fb      	ldr	r3, [r7, #12]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	0800d995 	.word	0x0800d995

0800d994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d99e:	4b12      	ldr	r3, [pc, #72]	; (800d9e8 <prvTaskExitError+0x54>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a6:	d00a      	beq.n	800d9be <prvTaskExitError+0x2a>
	__asm volatile
 800d9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ac:	f383 8811 	msr	BASEPRI, r3
 800d9b0:	f3bf 8f6f 	isb	sy
 800d9b4:	f3bf 8f4f 	dsb	sy
 800d9b8:	60fb      	str	r3, [r7, #12]
}
 800d9ba:	bf00      	nop
 800d9bc:	e7fe      	b.n	800d9bc <prvTaskExitError+0x28>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	60bb      	str	r3, [r7, #8]
}
 800d9d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9d2:	bf00      	nop
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d0fc      	beq.n	800d9d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9da:	bf00      	nop
 800d9dc:	bf00      	nop
 800d9de:	3714      	adds	r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	2000000c 	.word	0x2000000c
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9f0:	4b07      	ldr	r3, [pc, #28]	; (800da10 <pxCurrentTCBConst2>)
 800d9f2:	6819      	ldr	r1, [r3, #0]
 800d9f4:	6808      	ldr	r0, [r1, #0]
 800d9f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9fa:	f380 8809 	msr	PSP, r0
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f04f 0000 	mov.w	r0, #0
 800da06:	f380 8811 	msr	BASEPRI, r0
 800da0a:	4770      	bx	lr
 800da0c:	f3af 8000 	nop.w

0800da10 <pxCurrentTCBConst2>:
 800da10:	20000f98 	.word	0x20000f98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop

0800da18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da18:	4808      	ldr	r0, [pc, #32]	; (800da3c <prvPortStartFirstTask+0x24>)
 800da1a:	6800      	ldr	r0, [r0, #0]
 800da1c:	6800      	ldr	r0, [r0, #0]
 800da1e:	f380 8808 	msr	MSP, r0
 800da22:	f04f 0000 	mov.w	r0, #0
 800da26:	f380 8814 	msr	CONTROL, r0
 800da2a:	b662      	cpsie	i
 800da2c:	b661      	cpsie	f
 800da2e:	f3bf 8f4f 	dsb	sy
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	df00      	svc	0
 800da38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da3a:	bf00      	nop
 800da3c:	e000ed08 	.word	0xe000ed08

0800da40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b086      	sub	sp, #24
 800da44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da46:	4b46      	ldr	r3, [pc, #280]	; (800db60 <xPortStartScheduler+0x120>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a46      	ldr	r2, [pc, #280]	; (800db64 <xPortStartScheduler+0x124>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d10a      	bne.n	800da66 <xPortStartScheduler+0x26>
	__asm volatile
 800da50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da54:	f383 8811 	msr	BASEPRI, r3
 800da58:	f3bf 8f6f 	isb	sy
 800da5c:	f3bf 8f4f 	dsb	sy
 800da60:	613b      	str	r3, [r7, #16]
}
 800da62:	bf00      	nop
 800da64:	e7fe      	b.n	800da64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da66:	4b3e      	ldr	r3, [pc, #248]	; (800db60 <xPortStartScheduler+0x120>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a3f      	ldr	r2, [pc, #252]	; (800db68 <xPortStartScheduler+0x128>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d10a      	bne.n	800da86 <xPortStartScheduler+0x46>
	__asm volatile
 800da70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da74:	f383 8811 	msr	BASEPRI, r3
 800da78:	f3bf 8f6f 	isb	sy
 800da7c:	f3bf 8f4f 	dsb	sy
 800da80:	60fb      	str	r3, [r7, #12]
}
 800da82:	bf00      	nop
 800da84:	e7fe      	b.n	800da84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da86:	4b39      	ldr	r3, [pc, #228]	; (800db6c <xPortStartScheduler+0x12c>)
 800da88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	22ff      	movs	r2, #255	; 0xff
 800da96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	781b      	ldrb	r3, [r3, #0]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	b2db      	uxtb	r3, r3
 800daa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800daa8:	b2da      	uxtb	r2, r3
 800daaa:	4b31      	ldr	r3, [pc, #196]	; (800db70 <xPortStartScheduler+0x130>)
 800daac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800daae:	4b31      	ldr	r3, [pc, #196]	; (800db74 <xPortStartScheduler+0x134>)
 800dab0:	2207      	movs	r2, #7
 800dab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dab4:	e009      	b.n	800daca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dab6:	4b2f      	ldr	r3, [pc, #188]	; (800db74 <xPortStartScheduler+0x134>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	3b01      	subs	r3, #1
 800dabc:	4a2d      	ldr	r2, [pc, #180]	; (800db74 <xPortStartScheduler+0x134>)
 800dabe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dac0:	78fb      	ldrb	r3, [r7, #3]
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	005b      	lsls	r3, r3, #1
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daca:	78fb      	ldrb	r3, [r7, #3]
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad2:	2b80      	cmp	r3, #128	; 0x80
 800dad4:	d0ef      	beq.n	800dab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dad6:	4b27      	ldr	r3, [pc, #156]	; (800db74 <xPortStartScheduler+0x134>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f1c3 0307 	rsb	r3, r3, #7
 800dade:	2b04      	cmp	r3, #4
 800dae0:	d00a      	beq.n	800daf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	60bb      	str	r3, [r7, #8]
}
 800daf4:	bf00      	nop
 800daf6:	e7fe      	b.n	800daf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800daf8:	4b1e      	ldr	r3, [pc, #120]	; (800db74 <xPortStartScheduler+0x134>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	021b      	lsls	r3, r3, #8
 800dafe:	4a1d      	ldr	r2, [pc, #116]	; (800db74 <xPortStartScheduler+0x134>)
 800db00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db02:	4b1c      	ldr	r3, [pc, #112]	; (800db74 <xPortStartScheduler+0x134>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db0a:	4a1a      	ldr	r2, [pc, #104]	; (800db74 <xPortStartScheduler+0x134>)
 800db0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	b2da      	uxtb	r2, r3
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db16:	4b18      	ldr	r3, [pc, #96]	; (800db78 <xPortStartScheduler+0x138>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a17      	ldr	r2, [pc, #92]	; (800db78 <xPortStartScheduler+0x138>)
 800db1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db22:	4b15      	ldr	r3, [pc, #84]	; (800db78 <xPortStartScheduler+0x138>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a14      	ldr	r2, [pc, #80]	; (800db78 <xPortStartScheduler+0x138>)
 800db28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db2e:	f000 f8dd 	bl	800dcec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db32:	4b12      	ldr	r3, [pc, #72]	; (800db7c <xPortStartScheduler+0x13c>)
 800db34:	2200      	movs	r2, #0
 800db36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db38:	f000 f8fc 	bl	800dd34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db3c:	4b10      	ldr	r3, [pc, #64]	; (800db80 <xPortStartScheduler+0x140>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a0f      	ldr	r2, [pc, #60]	; (800db80 <xPortStartScheduler+0x140>)
 800db42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db48:	f7ff ff66 	bl	800da18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db4c:	f7ff fba8 	bl	800d2a0 <vTaskSwitchContext>
	prvTaskExitError();
 800db50:	f7ff ff20 	bl	800d994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db54:	2300      	movs	r3, #0
}
 800db56:	4618      	mov	r0, r3
 800db58:	3718      	adds	r7, #24
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	e000ed00 	.word	0xe000ed00
 800db64:	410fc271 	.word	0x410fc271
 800db68:	410fc270 	.word	0x410fc270
 800db6c:	e000e400 	.word	0xe000e400
 800db70:	200010c4 	.word	0x200010c4
 800db74:	200010c8 	.word	0x200010c8
 800db78:	e000ed20 	.word	0xe000ed20
 800db7c:	2000000c 	.word	0x2000000c
 800db80:	e000ef34 	.word	0xe000ef34

0800db84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	607b      	str	r3, [r7, #4]
}
 800db9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db9e:	4b0f      	ldr	r3, [pc, #60]	; (800dbdc <vPortEnterCritical+0x58>)
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	4a0d      	ldr	r2, [pc, #52]	; (800dbdc <vPortEnterCritical+0x58>)
 800dba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dba8:	4b0c      	ldr	r3, [pc, #48]	; (800dbdc <vPortEnterCritical+0x58>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d10f      	bne.n	800dbd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbb0:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <vPortEnterCritical+0x5c>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00a      	beq.n	800dbd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dbba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbbe:	f383 8811 	msr	BASEPRI, r3
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	f3bf 8f4f 	dsb	sy
 800dbca:	603b      	str	r3, [r7, #0]
}
 800dbcc:	bf00      	nop
 800dbce:	e7fe      	b.n	800dbce <vPortEnterCritical+0x4a>
	}
}
 800dbd0:	bf00      	nop
 800dbd2:	370c      	adds	r7, #12
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbda:	4770      	bx	lr
 800dbdc:	2000000c 	.word	0x2000000c
 800dbe0:	e000ed04 	.word	0xe000ed04

0800dbe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b083      	sub	sp, #12
 800dbe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbea:	4b12      	ldr	r3, [pc, #72]	; (800dc34 <vPortExitCritical+0x50>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10a      	bne.n	800dc08 <vPortExitCritical+0x24>
	__asm volatile
 800dbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf6:	f383 8811 	msr	BASEPRI, r3
 800dbfa:	f3bf 8f6f 	isb	sy
 800dbfe:	f3bf 8f4f 	dsb	sy
 800dc02:	607b      	str	r3, [r7, #4]
}
 800dc04:	bf00      	nop
 800dc06:	e7fe      	b.n	800dc06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dc08:	4b0a      	ldr	r3, [pc, #40]	; (800dc34 <vPortExitCritical+0x50>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	4a09      	ldr	r2, [pc, #36]	; (800dc34 <vPortExitCritical+0x50>)
 800dc10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc12:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <vPortExitCritical+0x50>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d105      	bne.n	800dc26 <vPortExitCritical+0x42>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc30:	4770      	bx	lr
 800dc32:	bf00      	nop
 800dc34:	2000000c 	.word	0x2000000c
	...

0800dc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc40:	f3ef 8009 	mrs	r0, PSP
 800dc44:	f3bf 8f6f 	isb	sy
 800dc48:	4b15      	ldr	r3, [pc, #84]	; (800dca0 <pxCurrentTCBConst>)
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	f01e 0f10 	tst.w	lr, #16
 800dc50:	bf08      	it	eq
 800dc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc5a:	6010      	str	r0, [r2, #0]
 800dc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc64:	f380 8811 	msr	BASEPRI, r0
 800dc68:	f3bf 8f4f 	dsb	sy
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f7ff fb16 	bl	800d2a0 <vTaskSwitchContext>
 800dc74:	f04f 0000 	mov.w	r0, #0
 800dc78:	f380 8811 	msr	BASEPRI, r0
 800dc7c:	bc09      	pop	{r0, r3}
 800dc7e:	6819      	ldr	r1, [r3, #0]
 800dc80:	6808      	ldr	r0, [r1, #0]
 800dc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc86:	f01e 0f10 	tst.w	lr, #16
 800dc8a:	bf08      	it	eq
 800dc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc90:	f380 8809 	msr	PSP, r0
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	f3af 8000 	nop.w

0800dca0 <pxCurrentTCBConst>:
 800dca0:	20000f98 	.word	0x20000f98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dca4:	bf00      	nop
 800dca6:	bf00      	nop

0800dca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
	__asm volatile
 800dcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb2:	f383 8811 	msr	BASEPRI, r3
 800dcb6:	f3bf 8f6f 	isb	sy
 800dcba:	f3bf 8f4f 	dsb	sy
 800dcbe:	607b      	str	r3, [r7, #4]
}
 800dcc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcc2:	f7ff fa35 	bl	800d130 <xTaskIncrementTick>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d003      	beq.n	800dcd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dccc:	4b06      	ldr	r3, [pc, #24]	; (800dce8 <xPortSysTickHandler+0x40>)
 800dcce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcd2:	601a      	str	r2, [r3, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	f383 8811 	msr	BASEPRI, r3
}
 800dcde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dce0:	bf00      	nop
 800dce2:	3708      	adds	r7, #8
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcec:	b480      	push	{r7}
 800dcee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dcf0:	4b0b      	ldr	r3, [pc, #44]	; (800dd20 <vPortSetupTimerInterrupt+0x34>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcf6:	4b0b      	ldr	r3, [pc, #44]	; (800dd24 <vPortSetupTimerInterrupt+0x38>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dcfc:	4b0a      	ldr	r3, [pc, #40]	; (800dd28 <vPortSetupTimerInterrupt+0x3c>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a0a      	ldr	r2, [pc, #40]	; (800dd2c <vPortSetupTimerInterrupt+0x40>)
 800dd02:	fba2 2303 	umull	r2, r3, r2, r3
 800dd06:	099b      	lsrs	r3, r3, #6
 800dd08:	4a09      	ldr	r2, [pc, #36]	; (800dd30 <vPortSetupTimerInterrupt+0x44>)
 800dd0a:	3b01      	subs	r3, #1
 800dd0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd0e:	4b04      	ldr	r3, [pc, #16]	; (800dd20 <vPortSetupTimerInterrupt+0x34>)
 800dd10:	2207      	movs	r2, #7
 800dd12:	601a      	str	r2, [r3, #0]
}
 800dd14:	bf00      	nop
 800dd16:	46bd      	mov	sp, r7
 800dd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1c:	4770      	bx	lr
 800dd1e:	bf00      	nop
 800dd20:	e000e010 	.word	0xe000e010
 800dd24:	e000e018 	.word	0xe000e018
 800dd28:	20000000 	.word	0x20000000
 800dd2c:	10624dd3 	.word	0x10624dd3
 800dd30:	e000e014 	.word	0xe000e014

0800dd34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd44 <vPortEnableVFP+0x10>
 800dd38:	6801      	ldr	r1, [r0, #0]
 800dd3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd3e:	6001      	str	r1, [r0, #0]
 800dd40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd42:	bf00      	nop
 800dd44:	e000ed88 	.word	0xe000ed88

0800dd48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b08a      	sub	sp, #40	; 0x28
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd50:	2300      	movs	r3, #0
 800dd52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd54:	f7ff f942 	bl	800cfdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd58:	4b5b      	ldr	r3, [pc, #364]	; (800dec8 <pvPortMalloc+0x180>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d101      	bne.n	800dd64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd60:	f000 f920 	bl	800dfa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd64:	4b59      	ldr	r3, [pc, #356]	; (800decc <pvPortMalloc+0x184>)
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f040 8093 	bne.w	800de98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d01d      	beq.n	800ddb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800dd78:	2208      	movs	r2, #8
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d014      	beq.n	800ddb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f023 0307 	bic.w	r3, r3, #7
 800dd90:	3308      	adds	r3, #8
 800dd92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f003 0307 	and.w	r3, r3, #7
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00a      	beq.n	800ddb4 <pvPortMalloc+0x6c>
	__asm volatile
 800dd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda2:	f383 8811 	msr	BASEPRI, r3
 800dda6:	f3bf 8f6f 	isb	sy
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	617b      	str	r3, [r7, #20]
}
 800ddb0:	bf00      	nop
 800ddb2:	e7fe      	b.n	800ddb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d06e      	beq.n	800de98 <pvPortMalloc+0x150>
 800ddba:	4b45      	ldr	r3, [pc, #276]	; (800ded0 <pvPortMalloc+0x188>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	687a      	ldr	r2, [r7, #4]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d869      	bhi.n	800de98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ddc4:	4b43      	ldr	r3, [pc, #268]	; (800ded4 <pvPortMalloc+0x18c>)
 800ddc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ddc8:	4b42      	ldr	r3, [pc, #264]	; (800ded4 <pvPortMalloc+0x18c>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddce:	e004      	b.n	800ddda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d903      	bls.n	800ddec <pvPortMalloc+0xa4>
 800dde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d1f1      	bne.n	800ddd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddec:	4b36      	ldr	r3, [pc, #216]	; (800dec8 <pvPortMalloc+0x180>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d050      	beq.n	800de98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddf6:	6a3b      	ldr	r3, [r7, #32]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2208      	movs	r2, #8
 800ddfc:	4413      	add	r3, r2
 800ddfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	6a3b      	ldr	r3, [r7, #32]
 800de06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	685a      	ldr	r2, [r3, #4]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	1ad2      	subs	r2, r2, r3
 800de10:	2308      	movs	r3, #8
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	429a      	cmp	r2, r3
 800de16:	d91f      	bls.n	800de58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4413      	add	r3, r2
 800de1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	f003 0307 	and.w	r3, r3, #7
 800de26:	2b00      	cmp	r3, #0
 800de28:	d00a      	beq.n	800de40 <pvPortMalloc+0xf8>
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	613b      	str	r3, [r7, #16]
}
 800de3c:	bf00      	nop
 800de3e:	e7fe      	b.n	800de3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	685a      	ldr	r2, [r3, #4]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	1ad2      	subs	r2, r2, r3
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de52:	69b8      	ldr	r0, [r7, #24]
 800de54:	f000 f908 	bl	800e068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de58:	4b1d      	ldr	r3, [pc, #116]	; (800ded0 <pvPortMalloc+0x188>)
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	4a1b      	ldr	r2, [pc, #108]	; (800ded0 <pvPortMalloc+0x188>)
 800de64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de66:	4b1a      	ldr	r3, [pc, #104]	; (800ded0 <pvPortMalloc+0x188>)
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	4b1b      	ldr	r3, [pc, #108]	; (800ded8 <pvPortMalloc+0x190>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d203      	bcs.n	800de7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de72:	4b17      	ldr	r3, [pc, #92]	; (800ded0 <pvPortMalloc+0x188>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	4a18      	ldr	r2, [pc, #96]	; (800ded8 <pvPortMalloc+0x190>)
 800de78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de7c:	685a      	ldr	r2, [r3, #4]
 800de7e:	4b13      	ldr	r3, [pc, #76]	; (800decc <pvPortMalloc+0x184>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	431a      	orrs	r2, r3
 800de84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800de8e:	4b13      	ldr	r3, [pc, #76]	; (800dedc <pvPortMalloc+0x194>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	4a11      	ldr	r2, [pc, #68]	; (800dedc <pvPortMalloc+0x194>)
 800de96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800de98:	f7ff f8ae 	bl	800cff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800de9c:	69fb      	ldr	r3, [r7, #28]
 800de9e:	f003 0307 	and.w	r3, r3, #7
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00a      	beq.n	800debc <pvPortMalloc+0x174>
	__asm volatile
 800dea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deaa:	f383 8811 	msr	BASEPRI, r3
 800deae:	f3bf 8f6f 	isb	sy
 800deb2:	f3bf 8f4f 	dsb	sy
 800deb6:	60fb      	str	r3, [r7, #12]
}
 800deb8:	bf00      	nop
 800deba:	e7fe      	b.n	800deba <pvPortMalloc+0x172>
	return pvReturn;
 800debc:	69fb      	ldr	r3, [r7, #28]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3728      	adds	r7, #40	; 0x28
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	20002844 	.word	0x20002844
 800decc:	20002858 	.word	0x20002858
 800ded0:	20002848 	.word	0x20002848
 800ded4:	2000283c 	.word	0x2000283c
 800ded8:	2000284c 	.word	0x2000284c
 800dedc:	20002850 	.word	0x20002850

0800dee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d04d      	beq.n	800df8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800def2:	2308      	movs	r3, #8
 800def4:	425b      	negs	r3, r3
 800def6:	697a      	ldr	r2, [r7, #20]
 800def8:	4413      	add	r3, r2
 800defa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df00:	693b      	ldr	r3, [r7, #16]
 800df02:	685a      	ldr	r2, [r3, #4]
 800df04:	4b24      	ldr	r3, [pc, #144]	; (800df98 <vPortFree+0xb8>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4013      	ands	r3, r2
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d10a      	bne.n	800df24 <vPortFree+0x44>
	__asm volatile
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	60fb      	str	r3, [r7, #12]
}
 800df20:	bf00      	nop
 800df22:	e7fe      	b.n	800df22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d00a      	beq.n	800df42 <vPortFree+0x62>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	60bb      	str	r3, [r7, #8]
}
 800df3e:	bf00      	nop
 800df40:	e7fe      	b.n	800df40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	685a      	ldr	r2, [r3, #4]
 800df46:	4b14      	ldr	r3, [pc, #80]	; (800df98 <vPortFree+0xb8>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4013      	ands	r3, r2
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d01e      	beq.n	800df8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d11a      	bne.n	800df8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	4b0e      	ldr	r3, [pc, #56]	; (800df98 <vPortFree+0xb8>)
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	43db      	mvns	r3, r3
 800df62:	401a      	ands	r2, r3
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df68:	f7ff f838 	bl	800cfdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	685a      	ldr	r2, [r3, #4]
 800df70:	4b0a      	ldr	r3, [pc, #40]	; (800df9c <vPortFree+0xbc>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	4413      	add	r3, r2
 800df76:	4a09      	ldr	r2, [pc, #36]	; (800df9c <vPortFree+0xbc>)
 800df78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df7a:	6938      	ldr	r0, [r7, #16]
 800df7c:	f000 f874 	bl	800e068 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800df80:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <vPortFree+0xc0>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	3301      	adds	r3, #1
 800df86:	4a06      	ldr	r2, [pc, #24]	; (800dfa0 <vPortFree+0xc0>)
 800df88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800df8a:	f7ff f835 	bl	800cff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df8e:	bf00      	nop
 800df90:	3718      	adds	r7, #24
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	20002858 	.word	0x20002858
 800df9c:	20002848 	.word	0x20002848
 800dfa0:	20002854 	.word	0x20002854

0800dfa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfaa:	f241 7370 	movw	r3, #6000	; 0x1770
 800dfae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfb0:	4b27      	ldr	r3, [pc, #156]	; (800e050 <prvHeapInit+0xac>)
 800dfb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f003 0307 	and.w	r3, r3, #7
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d00c      	beq.n	800dfd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	3307      	adds	r3, #7
 800dfc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f023 0307 	bic.w	r3, r3, #7
 800dfca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	4a1f      	ldr	r2, [pc, #124]	; (800e050 <prvHeapInit+0xac>)
 800dfd4:	4413      	add	r3, r2
 800dfd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfdc:	4a1d      	ldr	r2, [pc, #116]	; (800e054 <prvHeapInit+0xb0>)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfe2:	4b1c      	ldr	r3, [pc, #112]	; (800e054 <prvHeapInit+0xb0>)
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	4413      	add	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dff0:	2208      	movs	r2, #8
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	1a9b      	subs	r3, r3, r2
 800dff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f023 0307 	bic.w	r3, r3, #7
 800dffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	4a15      	ldr	r2, [pc, #84]	; (800e058 <prvHeapInit+0xb4>)
 800e004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e006:	4b14      	ldr	r3, [pc, #80]	; (800e058 <prvHeapInit+0xb4>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2200      	movs	r2, #0
 800e00c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e00e:	4b12      	ldr	r3, [pc, #72]	; (800e058 <prvHeapInit+0xb4>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2200      	movs	r2, #0
 800e014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	68fa      	ldr	r2, [r7, #12]
 800e01e:	1ad2      	subs	r2, r2, r3
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e024:	4b0c      	ldr	r3, [pc, #48]	; (800e058 <prvHeapInit+0xb4>)
 800e026:	681a      	ldr	r2, [r3, #0]
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	4a0a      	ldr	r2, [pc, #40]	; (800e05c <prvHeapInit+0xb8>)
 800e032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	4a09      	ldr	r2, [pc, #36]	; (800e060 <prvHeapInit+0xbc>)
 800e03a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e03c:	4b09      	ldr	r3, [pc, #36]	; (800e064 <prvHeapInit+0xc0>)
 800e03e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e042:	601a      	str	r2, [r3, #0]
}
 800e044:	bf00      	nop
 800e046:	3714      	adds	r7, #20
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr
 800e050:	200010cc 	.word	0x200010cc
 800e054:	2000283c 	.word	0x2000283c
 800e058:	20002844 	.word	0x20002844
 800e05c:	2000284c 	.word	0x2000284c
 800e060:	20002848 	.word	0x20002848
 800e064:	20002858 	.word	0x20002858

0800e068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e070:	4b28      	ldr	r3, [pc, #160]	; (800e114 <prvInsertBlockIntoFreeList+0xac>)
 800e072:	60fb      	str	r3, [r7, #12]
 800e074:	e002      	b.n	800e07c <prvInsertBlockIntoFreeList+0x14>
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	60fb      	str	r3, [r7, #12]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	429a      	cmp	r2, r3
 800e084:	d8f7      	bhi.n	800e076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	685b      	ldr	r3, [r3, #4]
 800e08e:	68ba      	ldr	r2, [r7, #8]
 800e090:	4413      	add	r3, r2
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	429a      	cmp	r2, r3
 800e096:	d108      	bne.n	800e0aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	685a      	ldr	r2, [r3, #4]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	685b      	ldr	r3, [r3, #4]
 800e0a0:	441a      	add	r2, r3
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	441a      	add	r2, r3
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d118      	bne.n	800e0f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	4b15      	ldr	r3, [pc, #84]	; (800e118 <prvInsertBlockIntoFreeList+0xb0>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d00d      	beq.n	800e0e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	685a      	ldr	r2, [r3, #4]
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	441a      	add	r2, r3
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	601a      	str	r2, [r3, #0]
 800e0e4:	e008      	b.n	800e0f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0e6:	4b0c      	ldr	r3, [pc, #48]	; (800e118 <prvInsertBlockIntoFreeList+0xb0>)
 800e0e8:	681a      	ldr	r2, [r3, #0]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	e003      	b.n	800e0f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d002      	beq.n	800e106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	687a      	ldr	r2, [r7, #4]
 800e104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e106:	bf00      	nop
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop
 800e114:	2000283c 	.word	0x2000283c
 800e118:	20002844 	.word	0x20002844

0800e11c <__errno>:
 800e11c:	4b01      	ldr	r3, [pc, #4]	; (800e124 <__errno+0x8>)
 800e11e:	6818      	ldr	r0, [r3, #0]
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	20000010 	.word	0x20000010

0800e128 <__libc_init_array>:
 800e128:	b570      	push	{r4, r5, r6, lr}
 800e12a:	4d0d      	ldr	r5, [pc, #52]	; (800e160 <__libc_init_array+0x38>)
 800e12c:	4c0d      	ldr	r4, [pc, #52]	; (800e164 <__libc_init_array+0x3c>)
 800e12e:	1b64      	subs	r4, r4, r5
 800e130:	10a4      	asrs	r4, r4, #2
 800e132:	2600      	movs	r6, #0
 800e134:	42a6      	cmp	r6, r4
 800e136:	d109      	bne.n	800e14c <__libc_init_array+0x24>
 800e138:	4d0b      	ldr	r5, [pc, #44]	; (800e168 <__libc_init_array+0x40>)
 800e13a:	4c0c      	ldr	r4, [pc, #48]	; (800e16c <__libc_init_array+0x44>)
 800e13c:	f003 fbe6 	bl	801190c <_init>
 800e140:	1b64      	subs	r4, r4, r5
 800e142:	10a4      	asrs	r4, r4, #2
 800e144:	2600      	movs	r6, #0
 800e146:	42a6      	cmp	r6, r4
 800e148:	d105      	bne.n	800e156 <__libc_init_array+0x2e>
 800e14a:	bd70      	pop	{r4, r5, r6, pc}
 800e14c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e150:	4798      	blx	r3
 800e152:	3601      	adds	r6, #1
 800e154:	e7ee      	b.n	800e134 <__libc_init_array+0xc>
 800e156:	f855 3b04 	ldr.w	r3, [r5], #4
 800e15a:	4798      	blx	r3
 800e15c:	3601      	adds	r6, #1
 800e15e:	e7f2      	b.n	800e146 <__libc_init_array+0x1e>
 800e160:	08011f24 	.word	0x08011f24
 800e164:	08011f24 	.word	0x08011f24
 800e168:	08011f24 	.word	0x08011f24
 800e16c:	08011f28 	.word	0x08011f28

0800e170 <memcpy>:
 800e170:	440a      	add	r2, r1
 800e172:	4291      	cmp	r1, r2
 800e174:	f100 33ff 	add.w	r3, r0, #4294967295
 800e178:	d100      	bne.n	800e17c <memcpy+0xc>
 800e17a:	4770      	bx	lr
 800e17c:	b510      	push	{r4, lr}
 800e17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e182:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e186:	4291      	cmp	r1, r2
 800e188:	d1f9      	bne.n	800e17e <memcpy+0xe>
 800e18a:	bd10      	pop	{r4, pc}

0800e18c <memset>:
 800e18c:	4402      	add	r2, r0
 800e18e:	4603      	mov	r3, r0
 800e190:	4293      	cmp	r3, r2
 800e192:	d100      	bne.n	800e196 <memset+0xa>
 800e194:	4770      	bx	lr
 800e196:	f803 1b01 	strb.w	r1, [r3], #1
 800e19a:	e7f9      	b.n	800e190 <memset+0x4>

0800e19c <_scanf_float>:
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	b087      	sub	sp, #28
 800e1a2:	4617      	mov	r7, r2
 800e1a4:	9303      	str	r3, [sp, #12]
 800e1a6:	688b      	ldr	r3, [r1, #8]
 800e1a8:	1e5a      	subs	r2, r3, #1
 800e1aa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e1ae:	bf83      	ittte	hi
 800e1b0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e1b4:	195b      	addhi	r3, r3, r5
 800e1b6:	9302      	strhi	r3, [sp, #8]
 800e1b8:	2300      	movls	r3, #0
 800e1ba:	bf86      	itte	hi
 800e1bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e1c0:	608b      	strhi	r3, [r1, #8]
 800e1c2:	9302      	strls	r3, [sp, #8]
 800e1c4:	680b      	ldr	r3, [r1, #0]
 800e1c6:	468b      	mov	fp, r1
 800e1c8:	2500      	movs	r5, #0
 800e1ca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e1ce:	f84b 3b1c 	str.w	r3, [fp], #28
 800e1d2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e1d6:	4680      	mov	r8, r0
 800e1d8:	460c      	mov	r4, r1
 800e1da:	465e      	mov	r6, fp
 800e1dc:	46aa      	mov	sl, r5
 800e1de:	46a9      	mov	r9, r5
 800e1e0:	9501      	str	r5, [sp, #4]
 800e1e2:	68a2      	ldr	r2, [r4, #8]
 800e1e4:	b152      	cbz	r2, 800e1fc <_scanf_float+0x60>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b4e      	cmp	r3, #78	; 0x4e
 800e1ec:	d864      	bhi.n	800e2b8 <_scanf_float+0x11c>
 800e1ee:	2b40      	cmp	r3, #64	; 0x40
 800e1f0:	d83c      	bhi.n	800e26c <_scanf_float+0xd0>
 800e1f2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e1f6:	b2c8      	uxtb	r0, r1
 800e1f8:	280e      	cmp	r0, #14
 800e1fa:	d93a      	bls.n	800e272 <_scanf_float+0xd6>
 800e1fc:	f1b9 0f00 	cmp.w	r9, #0
 800e200:	d003      	beq.n	800e20a <_scanf_float+0x6e>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e208:	6023      	str	r3, [r4, #0]
 800e20a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e20e:	f1ba 0f01 	cmp.w	sl, #1
 800e212:	f200 8113 	bhi.w	800e43c <_scanf_float+0x2a0>
 800e216:	455e      	cmp	r6, fp
 800e218:	f200 8105 	bhi.w	800e426 <_scanf_float+0x28a>
 800e21c:	2501      	movs	r5, #1
 800e21e:	4628      	mov	r0, r5
 800e220:	b007      	add	sp, #28
 800e222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e226:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e22a:	2a0d      	cmp	r2, #13
 800e22c:	d8e6      	bhi.n	800e1fc <_scanf_float+0x60>
 800e22e:	a101      	add	r1, pc, #4	; (adr r1, 800e234 <_scanf_float+0x98>)
 800e230:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e234:	0800e373 	.word	0x0800e373
 800e238:	0800e1fd 	.word	0x0800e1fd
 800e23c:	0800e1fd 	.word	0x0800e1fd
 800e240:	0800e1fd 	.word	0x0800e1fd
 800e244:	0800e3d3 	.word	0x0800e3d3
 800e248:	0800e3ab 	.word	0x0800e3ab
 800e24c:	0800e1fd 	.word	0x0800e1fd
 800e250:	0800e1fd 	.word	0x0800e1fd
 800e254:	0800e381 	.word	0x0800e381
 800e258:	0800e1fd 	.word	0x0800e1fd
 800e25c:	0800e1fd 	.word	0x0800e1fd
 800e260:	0800e1fd 	.word	0x0800e1fd
 800e264:	0800e1fd 	.word	0x0800e1fd
 800e268:	0800e339 	.word	0x0800e339
 800e26c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e270:	e7db      	b.n	800e22a <_scanf_float+0x8e>
 800e272:	290e      	cmp	r1, #14
 800e274:	d8c2      	bhi.n	800e1fc <_scanf_float+0x60>
 800e276:	a001      	add	r0, pc, #4	; (adr r0, 800e27c <_scanf_float+0xe0>)
 800e278:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e27c:	0800e32b 	.word	0x0800e32b
 800e280:	0800e1fd 	.word	0x0800e1fd
 800e284:	0800e32b 	.word	0x0800e32b
 800e288:	0800e3bf 	.word	0x0800e3bf
 800e28c:	0800e1fd 	.word	0x0800e1fd
 800e290:	0800e2d9 	.word	0x0800e2d9
 800e294:	0800e315 	.word	0x0800e315
 800e298:	0800e315 	.word	0x0800e315
 800e29c:	0800e315 	.word	0x0800e315
 800e2a0:	0800e315 	.word	0x0800e315
 800e2a4:	0800e315 	.word	0x0800e315
 800e2a8:	0800e315 	.word	0x0800e315
 800e2ac:	0800e315 	.word	0x0800e315
 800e2b0:	0800e315 	.word	0x0800e315
 800e2b4:	0800e315 	.word	0x0800e315
 800e2b8:	2b6e      	cmp	r3, #110	; 0x6e
 800e2ba:	d809      	bhi.n	800e2d0 <_scanf_float+0x134>
 800e2bc:	2b60      	cmp	r3, #96	; 0x60
 800e2be:	d8b2      	bhi.n	800e226 <_scanf_float+0x8a>
 800e2c0:	2b54      	cmp	r3, #84	; 0x54
 800e2c2:	d077      	beq.n	800e3b4 <_scanf_float+0x218>
 800e2c4:	2b59      	cmp	r3, #89	; 0x59
 800e2c6:	d199      	bne.n	800e1fc <_scanf_float+0x60>
 800e2c8:	2d07      	cmp	r5, #7
 800e2ca:	d197      	bne.n	800e1fc <_scanf_float+0x60>
 800e2cc:	2508      	movs	r5, #8
 800e2ce:	e029      	b.n	800e324 <_scanf_float+0x188>
 800e2d0:	2b74      	cmp	r3, #116	; 0x74
 800e2d2:	d06f      	beq.n	800e3b4 <_scanf_float+0x218>
 800e2d4:	2b79      	cmp	r3, #121	; 0x79
 800e2d6:	e7f6      	b.n	800e2c6 <_scanf_float+0x12a>
 800e2d8:	6821      	ldr	r1, [r4, #0]
 800e2da:	05c8      	lsls	r0, r1, #23
 800e2dc:	d51a      	bpl.n	800e314 <_scanf_float+0x178>
 800e2de:	9b02      	ldr	r3, [sp, #8]
 800e2e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e2e4:	6021      	str	r1, [r4, #0]
 800e2e6:	f109 0901 	add.w	r9, r9, #1
 800e2ea:	b11b      	cbz	r3, 800e2f4 <_scanf_float+0x158>
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	3201      	adds	r2, #1
 800e2f0:	9302      	str	r3, [sp, #8]
 800e2f2:	60a2      	str	r2, [r4, #8]
 800e2f4:	68a3      	ldr	r3, [r4, #8]
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	60a3      	str	r3, [r4, #8]
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	6123      	str	r3, [r4, #16]
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	3b01      	subs	r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	607b      	str	r3, [r7, #4]
 800e308:	f340 8084 	ble.w	800e414 <_scanf_float+0x278>
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	3301      	adds	r3, #1
 800e310:	603b      	str	r3, [r7, #0]
 800e312:	e766      	b.n	800e1e2 <_scanf_float+0x46>
 800e314:	eb1a 0f05 	cmn.w	sl, r5
 800e318:	f47f af70 	bne.w	800e1fc <_scanf_float+0x60>
 800e31c:	6822      	ldr	r2, [r4, #0]
 800e31e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e322:	6022      	str	r2, [r4, #0]
 800e324:	f806 3b01 	strb.w	r3, [r6], #1
 800e328:	e7e4      	b.n	800e2f4 <_scanf_float+0x158>
 800e32a:	6822      	ldr	r2, [r4, #0]
 800e32c:	0610      	lsls	r0, r2, #24
 800e32e:	f57f af65 	bpl.w	800e1fc <_scanf_float+0x60>
 800e332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e336:	e7f4      	b.n	800e322 <_scanf_float+0x186>
 800e338:	f1ba 0f00 	cmp.w	sl, #0
 800e33c:	d10e      	bne.n	800e35c <_scanf_float+0x1c0>
 800e33e:	f1b9 0f00 	cmp.w	r9, #0
 800e342:	d10e      	bne.n	800e362 <_scanf_float+0x1c6>
 800e344:	6822      	ldr	r2, [r4, #0]
 800e346:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e34a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e34e:	d108      	bne.n	800e362 <_scanf_float+0x1c6>
 800e350:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e354:	6022      	str	r2, [r4, #0]
 800e356:	f04f 0a01 	mov.w	sl, #1
 800e35a:	e7e3      	b.n	800e324 <_scanf_float+0x188>
 800e35c:	f1ba 0f02 	cmp.w	sl, #2
 800e360:	d055      	beq.n	800e40e <_scanf_float+0x272>
 800e362:	2d01      	cmp	r5, #1
 800e364:	d002      	beq.n	800e36c <_scanf_float+0x1d0>
 800e366:	2d04      	cmp	r5, #4
 800e368:	f47f af48 	bne.w	800e1fc <_scanf_float+0x60>
 800e36c:	3501      	adds	r5, #1
 800e36e:	b2ed      	uxtb	r5, r5
 800e370:	e7d8      	b.n	800e324 <_scanf_float+0x188>
 800e372:	f1ba 0f01 	cmp.w	sl, #1
 800e376:	f47f af41 	bne.w	800e1fc <_scanf_float+0x60>
 800e37a:	f04f 0a02 	mov.w	sl, #2
 800e37e:	e7d1      	b.n	800e324 <_scanf_float+0x188>
 800e380:	b97d      	cbnz	r5, 800e3a2 <_scanf_float+0x206>
 800e382:	f1b9 0f00 	cmp.w	r9, #0
 800e386:	f47f af3c 	bne.w	800e202 <_scanf_float+0x66>
 800e38a:	6822      	ldr	r2, [r4, #0]
 800e38c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e390:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e394:	f47f af39 	bne.w	800e20a <_scanf_float+0x6e>
 800e398:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e39c:	6022      	str	r2, [r4, #0]
 800e39e:	2501      	movs	r5, #1
 800e3a0:	e7c0      	b.n	800e324 <_scanf_float+0x188>
 800e3a2:	2d03      	cmp	r5, #3
 800e3a4:	d0e2      	beq.n	800e36c <_scanf_float+0x1d0>
 800e3a6:	2d05      	cmp	r5, #5
 800e3a8:	e7de      	b.n	800e368 <_scanf_float+0x1cc>
 800e3aa:	2d02      	cmp	r5, #2
 800e3ac:	f47f af26 	bne.w	800e1fc <_scanf_float+0x60>
 800e3b0:	2503      	movs	r5, #3
 800e3b2:	e7b7      	b.n	800e324 <_scanf_float+0x188>
 800e3b4:	2d06      	cmp	r5, #6
 800e3b6:	f47f af21 	bne.w	800e1fc <_scanf_float+0x60>
 800e3ba:	2507      	movs	r5, #7
 800e3bc:	e7b2      	b.n	800e324 <_scanf_float+0x188>
 800e3be:	6822      	ldr	r2, [r4, #0]
 800e3c0:	0591      	lsls	r1, r2, #22
 800e3c2:	f57f af1b 	bpl.w	800e1fc <_scanf_float+0x60>
 800e3c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e3ca:	6022      	str	r2, [r4, #0]
 800e3cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800e3d0:	e7a8      	b.n	800e324 <_scanf_float+0x188>
 800e3d2:	6822      	ldr	r2, [r4, #0]
 800e3d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e3d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e3dc:	d006      	beq.n	800e3ec <_scanf_float+0x250>
 800e3de:	0550      	lsls	r0, r2, #21
 800e3e0:	f57f af0c 	bpl.w	800e1fc <_scanf_float+0x60>
 800e3e4:	f1b9 0f00 	cmp.w	r9, #0
 800e3e8:	f43f af0f 	beq.w	800e20a <_scanf_float+0x6e>
 800e3ec:	0591      	lsls	r1, r2, #22
 800e3ee:	bf58      	it	pl
 800e3f0:	9901      	ldrpl	r1, [sp, #4]
 800e3f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e3f6:	bf58      	it	pl
 800e3f8:	eba9 0101 	subpl.w	r1, r9, r1
 800e3fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e400:	bf58      	it	pl
 800e402:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e406:	6022      	str	r2, [r4, #0]
 800e408:	f04f 0900 	mov.w	r9, #0
 800e40c:	e78a      	b.n	800e324 <_scanf_float+0x188>
 800e40e:	f04f 0a03 	mov.w	sl, #3
 800e412:	e787      	b.n	800e324 <_scanf_float+0x188>
 800e414:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e418:	4639      	mov	r1, r7
 800e41a:	4640      	mov	r0, r8
 800e41c:	4798      	blx	r3
 800e41e:	2800      	cmp	r0, #0
 800e420:	f43f aedf 	beq.w	800e1e2 <_scanf_float+0x46>
 800e424:	e6ea      	b.n	800e1fc <_scanf_float+0x60>
 800e426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e42a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e42e:	463a      	mov	r2, r7
 800e430:	4640      	mov	r0, r8
 800e432:	4798      	blx	r3
 800e434:	6923      	ldr	r3, [r4, #16]
 800e436:	3b01      	subs	r3, #1
 800e438:	6123      	str	r3, [r4, #16]
 800e43a:	e6ec      	b.n	800e216 <_scanf_float+0x7a>
 800e43c:	1e6b      	subs	r3, r5, #1
 800e43e:	2b06      	cmp	r3, #6
 800e440:	d825      	bhi.n	800e48e <_scanf_float+0x2f2>
 800e442:	2d02      	cmp	r5, #2
 800e444:	d836      	bhi.n	800e4b4 <_scanf_float+0x318>
 800e446:	455e      	cmp	r6, fp
 800e448:	f67f aee8 	bls.w	800e21c <_scanf_float+0x80>
 800e44c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e450:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e454:	463a      	mov	r2, r7
 800e456:	4640      	mov	r0, r8
 800e458:	4798      	blx	r3
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	3b01      	subs	r3, #1
 800e45e:	6123      	str	r3, [r4, #16]
 800e460:	e7f1      	b.n	800e446 <_scanf_float+0x2aa>
 800e462:	9802      	ldr	r0, [sp, #8]
 800e464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e468:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e46c:	9002      	str	r0, [sp, #8]
 800e46e:	463a      	mov	r2, r7
 800e470:	4640      	mov	r0, r8
 800e472:	4798      	blx	r3
 800e474:	6923      	ldr	r3, [r4, #16]
 800e476:	3b01      	subs	r3, #1
 800e478:	6123      	str	r3, [r4, #16]
 800e47a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e47e:	fa5f fa8a 	uxtb.w	sl, sl
 800e482:	f1ba 0f02 	cmp.w	sl, #2
 800e486:	d1ec      	bne.n	800e462 <_scanf_float+0x2c6>
 800e488:	3d03      	subs	r5, #3
 800e48a:	b2ed      	uxtb	r5, r5
 800e48c:	1b76      	subs	r6, r6, r5
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	05da      	lsls	r2, r3, #23
 800e492:	d52f      	bpl.n	800e4f4 <_scanf_float+0x358>
 800e494:	055b      	lsls	r3, r3, #21
 800e496:	d510      	bpl.n	800e4ba <_scanf_float+0x31e>
 800e498:	455e      	cmp	r6, fp
 800e49a:	f67f aebf 	bls.w	800e21c <_scanf_float+0x80>
 800e49e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	4640      	mov	r0, r8
 800e4aa:	4798      	blx	r3
 800e4ac:	6923      	ldr	r3, [r4, #16]
 800e4ae:	3b01      	subs	r3, #1
 800e4b0:	6123      	str	r3, [r4, #16]
 800e4b2:	e7f1      	b.n	800e498 <_scanf_float+0x2fc>
 800e4b4:	46aa      	mov	sl, r5
 800e4b6:	9602      	str	r6, [sp, #8]
 800e4b8:	e7df      	b.n	800e47a <_scanf_float+0x2de>
 800e4ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e4be:	6923      	ldr	r3, [r4, #16]
 800e4c0:	2965      	cmp	r1, #101	; 0x65
 800e4c2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e4c6:	f106 35ff 	add.w	r5, r6, #4294967295
 800e4ca:	6123      	str	r3, [r4, #16]
 800e4cc:	d00c      	beq.n	800e4e8 <_scanf_float+0x34c>
 800e4ce:	2945      	cmp	r1, #69	; 0x45
 800e4d0:	d00a      	beq.n	800e4e8 <_scanf_float+0x34c>
 800e4d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4d6:	463a      	mov	r2, r7
 800e4d8:	4640      	mov	r0, r8
 800e4da:	4798      	blx	r3
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e4e2:	3b01      	subs	r3, #1
 800e4e4:	1eb5      	subs	r5, r6, #2
 800e4e6:	6123      	str	r3, [r4, #16]
 800e4e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e4ec:	463a      	mov	r2, r7
 800e4ee:	4640      	mov	r0, r8
 800e4f0:	4798      	blx	r3
 800e4f2:	462e      	mov	r6, r5
 800e4f4:	6825      	ldr	r5, [r4, #0]
 800e4f6:	f015 0510 	ands.w	r5, r5, #16
 800e4fa:	d159      	bne.n	800e5b0 <_scanf_float+0x414>
 800e4fc:	7035      	strb	r5, [r6, #0]
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e508:	d11b      	bne.n	800e542 <_scanf_float+0x3a6>
 800e50a:	9b01      	ldr	r3, [sp, #4]
 800e50c:	454b      	cmp	r3, r9
 800e50e:	eba3 0209 	sub.w	r2, r3, r9
 800e512:	d123      	bne.n	800e55c <_scanf_float+0x3c0>
 800e514:	2200      	movs	r2, #0
 800e516:	4659      	mov	r1, fp
 800e518:	4640      	mov	r0, r8
 800e51a:	f000 ff9b 	bl	800f454 <_strtod_r>
 800e51e:	6822      	ldr	r2, [r4, #0]
 800e520:	9b03      	ldr	r3, [sp, #12]
 800e522:	f012 0f02 	tst.w	r2, #2
 800e526:	ec57 6b10 	vmov	r6, r7, d0
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	d021      	beq.n	800e572 <_scanf_float+0x3d6>
 800e52e:	9903      	ldr	r1, [sp, #12]
 800e530:	1d1a      	adds	r2, r3, #4
 800e532:	600a      	str	r2, [r1, #0]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	e9c3 6700 	strd	r6, r7, [r3]
 800e53a:	68e3      	ldr	r3, [r4, #12]
 800e53c:	3301      	adds	r3, #1
 800e53e:	60e3      	str	r3, [r4, #12]
 800e540:	e66d      	b.n	800e21e <_scanf_float+0x82>
 800e542:	9b04      	ldr	r3, [sp, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d0e5      	beq.n	800e514 <_scanf_float+0x378>
 800e548:	9905      	ldr	r1, [sp, #20]
 800e54a:	230a      	movs	r3, #10
 800e54c:	462a      	mov	r2, r5
 800e54e:	3101      	adds	r1, #1
 800e550:	4640      	mov	r0, r8
 800e552:	f001 f807 	bl	800f564 <_strtol_r>
 800e556:	9b04      	ldr	r3, [sp, #16]
 800e558:	9e05      	ldr	r6, [sp, #20]
 800e55a:	1ac2      	subs	r2, r0, r3
 800e55c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e560:	429e      	cmp	r6, r3
 800e562:	bf28      	it	cs
 800e564:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e568:	4912      	ldr	r1, [pc, #72]	; (800e5b4 <_scanf_float+0x418>)
 800e56a:	4630      	mov	r0, r6
 800e56c:	f000 f8d6 	bl	800e71c <siprintf>
 800e570:	e7d0      	b.n	800e514 <_scanf_float+0x378>
 800e572:	9903      	ldr	r1, [sp, #12]
 800e574:	f012 0f04 	tst.w	r2, #4
 800e578:	f103 0204 	add.w	r2, r3, #4
 800e57c:	600a      	str	r2, [r1, #0]
 800e57e:	d1d9      	bne.n	800e534 <_scanf_float+0x398>
 800e580:	f8d3 8000 	ldr.w	r8, [r3]
 800e584:	ee10 2a10 	vmov	r2, s0
 800e588:	ee10 0a10 	vmov	r0, s0
 800e58c:	463b      	mov	r3, r7
 800e58e:	4639      	mov	r1, r7
 800e590:	f7f2 facc 	bl	8000b2c <__aeabi_dcmpun>
 800e594:	b128      	cbz	r0, 800e5a2 <_scanf_float+0x406>
 800e596:	4808      	ldr	r0, [pc, #32]	; (800e5b8 <_scanf_float+0x41c>)
 800e598:	f000 f886 	bl	800e6a8 <nanf>
 800e59c:	ed88 0a00 	vstr	s0, [r8]
 800e5a0:	e7cb      	b.n	800e53a <_scanf_float+0x39e>
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	4639      	mov	r1, r7
 800e5a6:	f7f2 faf7 	bl	8000b98 <__aeabi_d2f>
 800e5aa:	f8c8 0000 	str.w	r0, [r8]
 800e5ae:	e7c4      	b.n	800e53a <_scanf_float+0x39e>
 800e5b0:	2500      	movs	r5, #0
 800e5b2:	e634      	b.n	800e21e <_scanf_float+0x82>
 800e5b4:	08011ae0 	.word	0x08011ae0
 800e5b8:	08011f1a 	.word	0x08011f1a

0800e5bc <_puts_r>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	460e      	mov	r6, r1
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	b118      	cbz	r0, 800e5cc <_puts_r+0x10>
 800e5c4:	6983      	ldr	r3, [r0, #24]
 800e5c6:	b90b      	cbnz	r3, 800e5cc <_puts_r+0x10>
 800e5c8:	f001 f9ca 	bl	800f960 <__sinit>
 800e5cc:	69ab      	ldr	r3, [r5, #24]
 800e5ce:	68ac      	ldr	r4, [r5, #8]
 800e5d0:	b913      	cbnz	r3, 800e5d8 <_puts_r+0x1c>
 800e5d2:	4628      	mov	r0, r5
 800e5d4:	f001 f9c4 	bl	800f960 <__sinit>
 800e5d8:	4b2c      	ldr	r3, [pc, #176]	; (800e68c <_puts_r+0xd0>)
 800e5da:	429c      	cmp	r4, r3
 800e5dc:	d120      	bne.n	800e620 <_puts_r+0x64>
 800e5de:	686c      	ldr	r4, [r5, #4]
 800e5e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5e2:	07db      	lsls	r3, r3, #31
 800e5e4:	d405      	bmi.n	800e5f2 <_puts_r+0x36>
 800e5e6:	89a3      	ldrh	r3, [r4, #12]
 800e5e8:	0598      	lsls	r0, r3, #22
 800e5ea:	d402      	bmi.n	800e5f2 <_puts_r+0x36>
 800e5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5ee:	f001 fdc4 	bl	801017a <__retarget_lock_acquire_recursive>
 800e5f2:	89a3      	ldrh	r3, [r4, #12]
 800e5f4:	0719      	lsls	r1, r3, #28
 800e5f6:	d51d      	bpl.n	800e634 <_puts_r+0x78>
 800e5f8:	6923      	ldr	r3, [r4, #16]
 800e5fa:	b1db      	cbz	r3, 800e634 <_puts_r+0x78>
 800e5fc:	3e01      	subs	r6, #1
 800e5fe:	68a3      	ldr	r3, [r4, #8]
 800e600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e604:	3b01      	subs	r3, #1
 800e606:	60a3      	str	r3, [r4, #8]
 800e608:	bb39      	cbnz	r1, 800e65a <_puts_r+0x9e>
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	da38      	bge.n	800e680 <_puts_r+0xc4>
 800e60e:	4622      	mov	r2, r4
 800e610:	210a      	movs	r1, #10
 800e612:	4628      	mov	r0, r5
 800e614:	f000 ffa8 	bl	800f568 <__swbuf_r>
 800e618:	3001      	adds	r0, #1
 800e61a:	d011      	beq.n	800e640 <_puts_r+0x84>
 800e61c:	250a      	movs	r5, #10
 800e61e:	e011      	b.n	800e644 <_puts_r+0x88>
 800e620:	4b1b      	ldr	r3, [pc, #108]	; (800e690 <_puts_r+0xd4>)
 800e622:	429c      	cmp	r4, r3
 800e624:	d101      	bne.n	800e62a <_puts_r+0x6e>
 800e626:	68ac      	ldr	r4, [r5, #8]
 800e628:	e7da      	b.n	800e5e0 <_puts_r+0x24>
 800e62a:	4b1a      	ldr	r3, [pc, #104]	; (800e694 <_puts_r+0xd8>)
 800e62c:	429c      	cmp	r4, r3
 800e62e:	bf08      	it	eq
 800e630:	68ec      	ldreq	r4, [r5, #12]
 800e632:	e7d5      	b.n	800e5e0 <_puts_r+0x24>
 800e634:	4621      	mov	r1, r4
 800e636:	4628      	mov	r0, r5
 800e638:	f000 fffa 	bl	800f630 <__swsetup_r>
 800e63c:	2800      	cmp	r0, #0
 800e63e:	d0dd      	beq.n	800e5fc <_puts_r+0x40>
 800e640:	f04f 35ff 	mov.w	r5, #4294967295
 800e644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e646:	07da      	lsls	r2, r3, #31
 800e648:	d405      	bmi.n	800e656 <_puts_r+0x9a>
 800e64a:	89a3      	ldrh	r3, [r4, #12]
 800e64c:	059b      	lsls	r3, r3, #22
 800e64e:	d402      	bmi.n	800e656 <_puts_r+0x9a>
 800e650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e652:	f001 fd93 	bl	801017c <__retarget_lock_release_recursive>
 800e656:	4628      	mov	r0, r5
 800e658:	bd70      	pop	{r4, r5, r6, pc}
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	da04      	bge.n	800e668 <_puts_r+0xac>
 800e65e:	69a2      	ldr	r2, [r4, #24]
 800e660:	429a      	cmp	r2, r3
 800e662:	dc06      	bgt.n	800e672 <_puts_r+0xb6>
 800e664:	290a      	cmp	r1, #10
 800e666:	d004      	beq.n	800e672 <_puts_r+0xb6>
 800e668:	6823      	ldr	r3, [r4, #0]
 800e66a:	1c5a      	adds	r2, r3, #1
 800e66c:	6022      	str	r2, [r4, #0]
 800e66e:	7019      	strb	r1, [r3, #0]
 800e670:	e7c5      	b.n	800e5fe <_puts_r+0x42>
 800e672:	4622      	mov	r2, r4
 800e674:	4628      	mov	r0, r5
 800e676:	f000 ff77 	bl	800f568 <__swbuf_r>
 800e67a:	3001      	adds	r0, #1
 800e67c:	d1bf      	bne.n	800e5fe <_puts_r+0x42>
 800e67e:	e7df      	b.n	800e640 <_puts_r+0x84>
 800e680:	6823      	ldr	r3, [r4, #0]
 800e682:	250a      	movs	r5, #10
 800e684:	1c5a      	adds	r2, r3, #1
 800e686:	6022      	str	r2, [r4, #0]
 800e688:	701d      	strb	r5, [r3, #0]
 800e68a:	e7db      	b.n	800e644 <_puts_r+0x88>
 800e68c:	08011c6c 	.word	0x08011c6c
 800e690:	08011c8c 	.word	0x08011c8c
 800e694:	08011c4c 	.word	0x08011c4c

0800e698 <puts>:
 800e698:	4b02      	ldr	r3, [pc, #8]	; (800e6a4 <puts+0xc>)
 800e69a:	4601      	mov	r1, r0
 800e69c:	6818      	ldr	r0, [r3, #0]
 800e69e:	f7ff bf8d 	b.w	800e5bc <_puts_r>
 800e6a2:	bf00      	nop
 800e6a4:	20000010 	.word	0x20000010

0800e6a8 <nanf>:
 800e6a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e6b0 <nanf+0x8>
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	7fc00000 	.word	0x7fc00000

0800e6b4 <sniprintf>:
 800e6b4:	b40c      	push	{r2, r3}
 800e6b6:	b530      	push	{r4, r5, lr}
 800e6b8:	4b17      	ldr	r3, [pc, #92]	; (800e718 <sniprintf+0x64>)
 800e6ba:	1e0c      	subs	r4, r1, #0
 800e6bc:	681d      	ldr	r5, [r3, #0]
 800e6be:	b09d      	sub	sp, #116	; 0x74
 800e6c0:	da08      	bge.n	800e6d4 <sniprintf+0x20>
 800e6c2:	238b      	movs	r3, #139	; 0x8b
 800e6c4:	602b      	str	r3, [r5, #0]
 800e6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ca:	b01d      	add	sp, #116	; 0x74
 800e6cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6d0:	b002      	add	sp, #8
 800e6d2:	4770      	bx	lr
 800e6d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e6d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e6dc:	bf14      	ite	ne
 800e6de:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e6e2:	4623      	moveq	r3, r4
 800e6e4:	9304      	str	r3, [sp, #16]
 800e6e6:	9307      	str	r3, [sp, #28]
 800e6e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e6ec:	9002      	str	r0, [sp, #8]
 800e6ee:	9006      	str	r0, [sp, #24]
 800e6f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e6f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e6f6:	ab21      	add	r3, sp, #132	; 0x84
 800e6f8:	a902      	add	r1, sp, #8
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	9301      	str	r3, [sp, #4]
 800e6fe:	f002 fbdd 	bl	8010ebc <_svfiprintf_r>
 800e702:	1c43      	adds	r3, r0, #1
 800e704:	bfbc      	itt	lt
 800e706:	238b      	movlt	r3, #139	; 0x8b
 800e708:	602b      	strlt	r3, [r5, #0]
 800e70a:	2c00      	cmp	r4, #0
 800e70c:	d0dd      	beq.n	800e6ca <sniprintf+0x16>
 800e70e:	9b02      	ldr	r3, [sp, #8]
 800e710:	2200      	movs	r2, #0
 800e712:	701a      	strb	r2, [r3, #0]
 800e714:	e7d9      	b.n	800e6ca <sniprintf+0x16>
 800e716:	bf00      	nop
 800e718:	20000010 	.word	0x20000010

0800e71c <siprintf>:
 800e71c:	b40e      	push	{r1, r2, r3}
 800e71e:	b500      	push	{lr}
 800e720:	b09c      	sub	sp, #112	; 0x70
 800e722:	ab1d      	add	r3, sp, #116	; 0x74
 800e724:	9002      	str	r0, [sp, #8]
 800e726:	9006      	str	r0, [sp, #24]
 800e728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e72c:	4809      	ldr	r0, [pc, #36]	; (800e754 <siprintf+0x38>)
 800e72e:	9107      	str	r1, [sp, #28]
 800e730:	9104      	str	r1, [sp, #16]
 800e732:	4909      	ldr	r1, [pc, #36]	; (800e758 <siprintf+0x3c>)
 800e734:	f853 2b04 	ldr.w	r2, [r3], #4
 800e738:	9105      	str	r1, [sp, #20]
 800e73a:	6800      	ldr	r0, [r0, #0]
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	a902      	add	r1, sp, #8
 800e740:	f002 fbbc 	bl	8010ebc <_svfiprintf_r>
 800e744:	9b02      	ldr	r3, [sp, #8]
 800e746:	2200      	movs	r2, #0
 800e748:	701a      	strb	r2, [r3, #0]
 800e74a:	b01c      	add	sp, #112	; 0x70
 800e74c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e750:	b003      	add	sp, #12
 800e752:	4770      	bx	lr
 800e754:	20000010 	.word	0x20000010
 800e758:	ffff0208 	.word	0xffff0208

0800e75c <__sread>:
 800e75c:	b510      	push	{r4, lr}
 800e75e:	460c      	mov	r4, r1
 800e760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e764:	f002 fe3e 	bl	80113e4 <_read_r>
 800e768:	2800      	cmp	r0, #0
 800e76a:	bfab      	itete	ge
 800e76c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e76e:	89a3      	ldrhlt	r3, [r4, #12]
 800e770:	181b      	addge	r3, r3, r0
 800e772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e776:	bfac      	ite	ge
 800e778:	6563      	strge	r3, [r4, #84]	; 0x54
 800e77a:	81a3      	strhlt	r3, [r4, #12]
 800e77c:	bd10      	pop	{r4, pc}

0800e77e <__swrite>:
 800e77e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e782:	461f      	mov	r7, r3
 800e784:	898b      	ldrh	r3, [r1, #12]
 800e786:	05db      	lsls	r3, r3, #23
 800e788:	4605      	mov	r5, r0
 800e78a:	460c      	mov	r4, r1
 800e78c:	4616      	mov	r6, r2
 800e78e:	d505      	bpl.n	800e79c <__swrite+0x1e>
 800e790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e794:	2302      	movs	r3, #2
 800e796:	2200      	movs	r2, #0
 800e798:	f001 fcf2 	bl	8010180 <_lseek_r>
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7a6:	81a3      	strh	r3, [r4, #12]
 800e7a8:	4632      	mov	r2, r6
 800e7aa:	463b      	mov	r3, r7
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b2:	f000 bf2b 	b.w	800f60c <_write_r>

0800e7b6 <__sseek>:
 800e7b6:	b510      	push	{r4, lr}
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7be:	f001 fcdf 	bl	8010180 <_lseek_r>
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	bf15      	itete	ne
 800e7c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7d2:	81a3      	strheq	r3, [r4, #12]
 800e7d4:	bf18      	it	ne
 800e7d6:	81a3      	strhne	r3, [r4, #12]
 800e7d8:	bd10      	pop	{r4, pc}

0800e7da <__sclose>:
 800e7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7de:	f000 bf95 	b.w	800f70c <_close_r>

0800e7e2 <strncmp>:
 800e7e2:	b510      	push	{r4, lr}
 800e7e4:	b17a      	cbz	r2, 800e806 <strncmp+0x24>
 800e7e6:	4603      	mov	r3, r0
 800e7e8:	3901      	subs	r1, #1
 800e7ea:	1884      	adds	r4, r0, r2
 800e7ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e7f4:	4290      	cmp	r0, r2
 800e7f6:	d101      	bne.n	800e7fc <strncmp+0x1a>
 800e7f8:	42a3      	cmp	r3, r4
 800e7fa:	d101      	bne.n	800e800 <strncmp+0x1e>
 800e7fc:	1a80      	subs	r0, r0, r2
 800e7fe:	bd10      	pop	{r4, pc}
 800e800:	2800      	cmp	r0, #0
 800e802:	d1f3      	bne.n	800e7ec <strncmp+0xa>
 800e804:	e7fa      	b.n	800e7fc <strncmp+0x1a>
 800e806:	4610      	mov	r0, r2
 800e808:	e7f9      	b.n	800e7fe <strncmp+0x1c>

0800e80a <sulp>:
 800e80a:	b570      	push	{r4, r5, r6, lr}
 800e80c:	4604      	mov	r4, r0
 800e80e:	460d      	mov	r5, r1
 800e810:	ec45 4b10 	vmov	d0, r4, r5
 800e814:	4616      	mov	r6, r2
 800e816:	f002 f8af 	bl	8010978 <__ulp>
 800e81a:	ec51 0b10 	vmov	r0, r1, d0
 800e81e:	b17e      	cbz	r6, 800e840 <sulp+0x36>
 800e820:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e824:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e828:	2b00      	cmp	r3, #0
 800e82a:	dd09      	ble.n	800e840 <sulp+0x36>
 800e82c:	051b      	lsls	r3, r3, #20
 800e82e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e832:	2400      	movs	r4, #0
 800e834:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e838:	4622      	mov	r2, r4
 800e83a:	462b      	mov	r3, r5
 800e83c:	f7f1 fedc 	bl	80005f8 <__aeabi_dmul>
 800e840:	bd70      	pop	{r4, r5, r6, pc}
 800e842:	0000      	movs	r0, r0
 800e844:	0000      	movs	r0, r0
	...

0800e848 <_strtod_l>:
 800e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84c:	ed2d 8b02 	vpush	{d8}
 800e850:	b09d      	sub	sp, #116	; 0x74
 800e852:	461f      	mov	r7, r3
 800e854:	2300      	movs	r3, #0
 800e856:	9318      	str	r3, [sp, #96]	; 0x60
 800e858:	4ba2      	ldr	r3, [pc, #648]	; (800eae4 <_strtod_l+0x29c>)
 800e85a:	9213      	str	r2, [sp, #76]	; 0x4c
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	9305      	str	r3, [sp, #20]
 800e860:	4604      	mov	r4, r0
 800e862:	4618      	mov	r0, r3
 800e864:	4688      	mov	r8, r1
 800e866:	f7f1 fcb3 	bl	80001d0 <strlen>
 800e86a:	f04f 0a00 	mov.w	sl, #0
 800e86e:	4605      	mov	r5, r0
 800e870:	f04f 0b00 	mov.w	fp, #0
 800e874:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e878:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e87a:	781a      	ldrb	r2, [r3, #0]
 800e87c:	2a2b      	cmp	r2, #43	; 0x2b
 800e87e:	d04e      	beq.n	800e91e <_strtod_l+0xd6>
 800e880:	d83b      	bhi.n	800e8fa <_strtod_l+0xb2>
 800e882:	2a0d      	cmp	r2, #13
 800e884:	d834      	bhi.n	800e8f0 <_strtod_l+0xa8>
 800e886:	2a08      	cmp	r2, #8
 800e888:	d834      	bhi.n	800e8f4 <_strtod_l+0xac>
 800e88a:	2a00      	cmp	r2, #0
 800e88c:	d03e      	beq.n	800e90c <_strtod_l+0xc4>
 800e88e:	2300      	movs	r3, #0
 800e890:	930a      	str	r3, [sp, #40]	; 0x28
 800e892:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e894:	7833      	ldrb	r3, [r6, #0]
 800e896:	2b30      	cmp	r3, #48	; 0x30
 800e898:	f040 80b0 	bne.w	800e9fc <_strtod_l+0x1b4>
 800e89c:	7873      	ldrb	r3, [r6, #1]
 800e89e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e8a2:	2b58      	cmp	r3, #88	; 0x58
 800e8a4:	d168      	bne.n	800e978 <_strtod_l+0x130>
 800e8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8a8:	9301      	str	r3, [sp, #4]
 800e8aa:	ab18      	add	r3, sp, #96	; 0x60
 800e8ac:	9702      	str	r7, [sp, #8]
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	4a8d      	ldr	r2, [pc, #564]	; (800eae8 <_strtod_l+0x2a0>)
 800e8b2:	ab19      	add	r3, sp, #100	; 0x64
 800e8b4:	a917      	add	r1, sp, #92	; 0x5c
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f001 f956 	bl	800fb68 <__gethex>
 800e8bc:	f010 0707 	ands.w	r7, r0, #7
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	d005      	beq.n	800e8d0 <_strtod_l+0x88>
 800e8c4:	2f06      	cmp	r7, #6
 800e8c6:	d12c      	bne.n	800e922 <_strtod_l+0xda>
 800e8c8:	3601      	adds	r6, #1
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	9617      	str	r6, [sp, #92]	; 0x5c
 800e8ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e8d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f040 8590 	bne.w	800f3f8 <_strtod_l+0xbb0>
 800e8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8da:	b1eb      	cbz	r3, 800e918 <_strtod_l+0xd0>
 800e8dc:	4652      	mov	r2, sl
 800e8de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e8e2:	ec43 2b10 	vmov	d0, r2, r3
 800e8e6:	b01d      	add	sp, #116	; 0x74
 800e8e8:	ecbd 8b02 	vpop	{d8}
 800e8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8f0:	2a20      	cmp	r2, #32
 800e8f2:	d1cc      	bne.n	800e88e <_strtod_l+0x46>
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	9317      	str	r3, [sp, #92]	; 0x5c
 800e8f8:	e7be      	b.n	800e878 <_strtod_l+0x30>
 800e8fa:	2a2d      	cmp	r2, #45	; 0x2d
 800e8fc:	d1c7      	bne.n	800e88e <_strtod_l+0x46>
 800e8fe:	2201      	movs	r2, #1
 800e900:	920a      	str	r2, [sp, #40]	; 0x28
 800e902:	1c5a      	adds	r2, r3, #1
 800e904:	9217      	str	r2, [sp, #92]	; 0x5c
 800e906:	785b      	ldrb	r3, [r3, #1]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1c2      	bne.n	800e892 <_strtod_l+0x4a>
 800e90c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e90e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e912:	2b00      	cmp	r3, #0
 800e914:	f040 856e 	bne.w	800f3f4 <_strtod_l+0xbac>
 800e918:	4652      	mov	r2, sl
 800e91a:	465b      	mov	r3, fp
 800e91c:	e7e1      	b.n	800e8e2 <_strtod_l+0x9a>
 800e91e:	2200      	movs	r2, #0
 800e920:	e7ee      	b.n	800e900 <_strtod_l+0xb8>
 800e922:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e924:	b13a      	cbz	r2, 800e936 <_strtod_l+0xee>
 800e926:	2135      	movs	r1, #53	; 0x35
 800e928:	a81a      	add	r0, sp, #104	; 0x68
 800e92a:	f002 f930 	bl	8010b8e <__copybits>
 800e92e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e930:	4620      	mov	r0, r4
 800e932:	f001 fcef 	bl	8010314 <_Bfree>
 800e936:	3f01      	subs	r7, #1
 800e938:	2f04      	cmp	r7, #4
 800e93a:	d806      	bhi.n	800e94a <_strtod_l+0x102>
 800e93c:	e8df f007 	tbb	[pc, r7]
 800e940:	1714030a 	.word	0x1714030a
 800e944:	0a          	.byte	0x0a
 800e945:	00          	.byte	0x00
 800e946:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e94a:	0728      	lsls	r0, r5, #28
 800e94c:	d5c0      	bpl.n	800e8d0 <_strtod_l+0x88>
 800e94e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e952:	e7bd      	b.n	800e8d0 <_strtod_l+0x88>
 800e954:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e958:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e95a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e95e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e962:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e966:	e7f0      	b.n	800e94a <_strtod_l+0x102>
 800e968:	f8df b180 	ldr.w	fp, [pc, #384]	; 800eaec <_strtod_l+0x2a4>
 800e96c:	e7ed      	b.n	800e94a <_strtod_l+0x102>
 800e96e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e972:	f04f 3aff 	mov.w	sl, #4294967295
 800e976:	e7e8      	b.n	800e94a <_strtod_l+0x102>
 800e978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e97e:	785b      	ldrb	r3, [r3, #1]
 800e980:	2b30      	cmp	r3, #48	; 0x30
 800e982:	d0f9      	beq.n	800e978 <_strtod_l+0x130>
 800e984:	2b00      	cmp	r3, #0
 800e986:	d0a3      	beq.n	800e8d0 <_strtod_l+0x88>
 800e988:	2301      	movs	r3, #1
 800e98a:	f04f 0900 	mov.w	r9, #0
 800e98e:	9304      	str	r3, [sp, #16]
 800e990:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e992:	9308      	str	r3, [sp, #32]
 800e994:	f8cd 901c 	str.w	r9, [sp, #28]
 800e998:	464f      	mov	r7, r9
 800e99a:	220a      	movs	r2, #10
 800e99c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e99e:	7806      	ldrb	r6, [r0, #0]
 800e9a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e9a4:	b2d9      	uxtb	r1, r3
 800e9a6:	2909      	cmp	r1, #9
 800e9a8:	d92a      	bls.n	800ea00 <_strtod_l+0x1b8>
 800e9aa:	9905      	ldr	r1, [sp, #20]
 800e9ac:	462a      	mov	r2, r5
 800e9ae:	f7ff ff18 	bl	800e7e2 <strncmp>
 800e9b2:	b398      	cbz	r0, 800ea1c <_strtod_l+0x1d4>
 800e9b4:	2000      	movs	r0, #0
 800e9b6:	4632      	mov	r2, r6
 800e9b8:	463d      	mov	r5, r7
 800e9ba:	9005      	str	r0, [sp, #20]
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2a65      	cmp	r2, #101	; 0x65
 800e9c0:	d001      	beq.n	800e9c6 <_strtod_l+0x17e>
 800e9c2:	2a45      	cmp	r2, #69	; 0x45
 800e9c4:	d118      	bne.n	800e9f8 <_strtod_l+0x1b0>
 800e9c6:	b91d      	cbnz	r5, 800e9d0 <_strtod_l+0x188>
 800e9c8:	9a04      	ldr	r2, [sp, #16]
 800e9ca:	4302      	orrs	r2, r0
 800e9cc:	d09e      	beq.n	800e90c <_strtod_l+0xc4>
 800e9ce:	2500      	movs	r5, #0
 800e9d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e9d4:	f108 0201 	add.w	r2, r8, #1
 800e9d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e9da:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e9de:	2a2b      	cmp	r2, #43	; 0x2b
 800e9e0:	d075      	beq.n	800eace <_strtod_l+0x286>
 800e9e2:	2a2d      	cmp	r2, #45	; 0x2d
 800e9e4:	d07b      	beq.n	800eade <_strtod_l+0x296>
 800e9e6:	f04f 0c00 	mov.w	ip, #0
 800e9ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e9ee:	2909      	cmp	r1, #9
 800e9f0:	f240 8082 	bls.w	800eaf8 <_strtod_l+0x2b0>
 800e9f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e9f8:	2600      	movs	r6, #0
 800e9fa:	e09d      	b.n	800eb38 <_strtod_l+0x2f0>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	e7c4      	b.n	800e98a <_strtod_l+0x142>
 800ea00:	2f08      	cmp	r7, #8
 800ea02:	bfd8      	it	le
 800ea04:	9907      	ldrle	r1, [sp, #28]
 800ea06:	f100 0001 	add.w	r0, r0, #1
 800ea0a:	bfda      	itte	le
 800ea0c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ea10:	9307      	strle	r3, [sp, #28]
 800ea12:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ea16:	3701      	adds	r7, #1
 800ea18:	9017      	str	r0, [sp, #92]	; 0x5c
 800ea1a:	e7bf      	b.n	800e99c <_strtod_l+0x154>
 800ea1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea1e:	195a      	adds	r2, r3, r5
 800ea20:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea22:	5d5a      	ldrb	r2, [r3, r5]
 800ea24:	2f00      	cmp	r7, #0
 800ea26:	d037      	beq.n	800ea98 <_strtod_l+0x250>
 800ea28:	9005      	str	r0, [sp, #20]
 800ea2a:	463d      	mov	r5, r7
 800ea2c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ea30:	2b09      	cmp	r3, #9
 800ea32:	d912      	bls.n	800ea5a <_strtod_l+0x212>
 800ea34:	2301      	movs	r3, #1
 800ea36:	e7c2      	b.n	800e9be <_strtod_l+0x176>
 800ea38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea3a:	1c5a      	adds	r2, r3, #1
 800ea3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ea3e:	785a      	ldrb	r2, [r3, #1]
 800ea40:	3001      	adds	r0, #1
 800ea42:	2a30      	cmp	r2, #48	; 0x30
 800ea44:	d0f8      	beq.n	800ea38 <_strtod_l+0x1f0>
 800ea46:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ea4a:	2b08      	cmp	r3, #8
 800ea4c:	f200 84d9 	bhi.w	800f402 <_strtod_l+0xbba>
 800ea50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ea52:	9005      	str	r0, [sp, #20]
 800ea54:	2000      	movs	r0, #0
 800ea56:	9308      	str	r3, [sp, #32]
 800ea58:	4605      	mov	r5, r0
 800ea5a:	3a30      	subs	r2, #48	; 0x30
 800ea5c:	f100 0301 	add.w	r3, r0, #1
 800ea60:	d014      	beq.n	800ea8c <_strtod_l+0x244>
 800ea62:	9905      	ldr	r1, [sp, #20]
 800ea64:	4419      	add	r1, r3
 800ea66:	9105      	str	r1, [sp, #20]
 800ea68:	462b      	mov	r3, r5
 800ea6a:	eb00 0e05 	add.w	lr, r0, r5
 800ea6e:	210a      	movs	r1, #10
 800ea70:	4573      	cmp	r3, lr
 800ea72:	d113      	bne.n	800ea9c <_strtod_l+0x254>
 800ea74:	182b      	adds	r3, r5, r0
 800ea76:	2b08      	cmp	r3, #8
 800ea78:	f105 0501 	add.w	r5, r5, #1
 800ea7c:	4405      	add	r5, r0
 800ea7e:	dc1c      	bgt.n	800eaba <_strtod_l+0x272>
 800ea80:	9907      	ldr	r1, [sp, #28]
 800ea82:	230a      	movs	r3, #10
 800ea84:	fb03 2301 	mla	r3, r3, r1, r2
 800ea88:	9307      	str	r3, [sp, #28]
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ea8e:	1c51      	adds	r1, r2, #1
 800ea90:	9117      	str	r1, [sp, #92]	; 0x5c
 800ea92:	7852      	ldrb	r2, [r2, #1]
 800ea94:	4618      	mov	r0, r3
 800ea96:	e7c9      	b.n	800ea2c <_strtod_l+0x1e4>
 800ea98:	4638      	mov	r0, r7
 800ea9a:	e7d2      	b.n	800ea42 <_strtod_l+0x1fa>
 800ea9c:	2b08      	cmp	r3, #8
 800ea9e:	dc04      	bgt.n	800eaaa <_strtod_l+0x262>
 800eaa0:	9e07      	ldr	r6, [sp, #28]
 800eaa2:	434e      	muls	r6, r1
 800eaa4:	9607      	str	r6, [sp, #28]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	e7e2      	b.n	800ea70 <_strtod_l+0x228>
 800eaaa:	f103 0c01 	add.w	ip, r3, #1
 800eaae:	f1bc 0f10 	cmp.w	ip, #16
 800eab2:	bfd8      	it	le
 800eab4:	fb01 f909 	mulle.w	r9, r1, r9
 800eab8:	e7f5      	b.n	800eaa6 <_strtod_l+0x25e>
 800eaba:	2d10      	cmp	r5, #16
 800eabc:	bfdc      	itt	le
 800eabe:	230a      	movle	r3, #10
 800eac0:	fb03 2909 	mlale	r9, r3, r9, r2
 800eac4:	e7e1      	b.n	800ea8a <_strtod_l+0x242>
 800eac6:	2300      	movs	r3, #0
 800eac8:	9305      	str	r3, [sp, #20]
 800eaca:	2301      	movs	r3, #1
 800eacc:	e77c      	b.n	800e9c8 <_strtod_l+0x180>
 800eace:	f04f 0c00 	mov.w	ip, #0
 800ead2:	f108 0202 	add.w	r2, r8, #2
 800ead6:	9217      	str	r2, [sp, #92]	; 0x5c
 800ead8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800eadc:	e785      	b.n	800e9ea <_strtod_l+0x1a2>
 800eade:	f04f 0c01 	mov.w	ip, #1
 800eae2:	e7f6      	b.n	800ead2 <_strtod_l+0x28a>
 800eae4:	08011d24 	.word	0x08011d24
 800eae8:	08011af4 	.word	0x08011af4
 800eaec:	7ff00000 	.word	0x7ff00000
 800eaf0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eaf2:	1c51      	adds	r1, r2, #1
 800eaf4:	9117      	str	r1, [sp, #92]	; 0x5c
 800eaf6:	7852      	ldrb	r2, [r2, #1]
 800eaf8:	2a30      	cmp	r2, #48	; 0x30
 800eafa:	d0f9      	beq.n	800eaf0 <_strtod_l+0x2a8>
 800eafc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800eb00:	2908      	cmp	r1, #8
 800eb02:	f63f af79 	bhi.w	800e9f8 <_strtod_l+0x1b0>
 800eb06:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800eb0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb0c:	9206      	str	r2, [sp, #24]
 800eb0e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800eb10:	1c51      	adds	r1, r2, #1
 800eb12:	9117      	str	r1, [sp, #92]	; 0x5c
 800eb14:	7852      	ldrb	r2, [r2, #1]
 800eb16:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800eb1a:	2e09      	cmp	r6, #9
 800eb1c:	d937      	bls.n	800eb8e <_strtod_l+0x346>
 800eb1e:	9e06      	ldr	r6, [sp, #24]
 800eb20:	1b89      	subs	r1, r1, r6
 800eb22:	2908      	cmp	r1, #8
 800eb24:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800eb28:	dc02      	bgt.n	800eb30 <_strtod_l+0x2e8>
 800eb2a:	4576      	cmp	r6, lr
 800eb2c:	bfa8      	it	ge
 800eb2e:	4676      	movge	r6, lr
 800eb30:	f1bc 0f00 	cmp.w	ip, #0
 800eb34:	d000      	beq.n	800eb38 <_strtod_l+0x2f0>
 800eb36:	4276      	negs	r6, r6
 800eb38:	2d00      	cmp	r5, #0
 800eb3a:	d14d      	bne.n	800ebd8 <_strtod_l+0x390>
 800eb3c:	9904      	ldr	r1, [sp, #16]
 800eb3e:	4301      	orrs	r1, r0
 800eb40:	f47f aec6 	bne.w	800e8d0 <_strtod_l+0x88>
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f47f aee1 	bne.w	800e90c <_strtod_l+0xc4>
 800eb4a:	2a69      	cmp	r2, #105	; 0x69
 800eb4c:	d027      	beq.n	800eb9e <_strtod_l+0x356>
 800eb4e:	dc24      	bgt.n	800eb9a <_strtod_l+0x352>
 800eb50:	2a49      	cmp	r2, #73	; 0x49
 800eb52:	d024      	beq.n	800eb9e <_strtod_l+0x356>
 800eb54:	2a4e      	cmp	r2, #78	; 0x4e
 800eb56:	f47f aed9 	bne.w	800e90c <_strtod_l+0xc4>
 800eb5a:	499f      	ldr	r1, [pc, #636]	; (800edd8 <_strtod_l+0x590>)
 800eb5c:	a817      	add	r0, sp, #92	; 0x5c
 800eb5e:	f001 fa5b 	bl	8010018 <__match>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	f43f aed2 	beq.w	800e90c <_strtod_l+0xc4>
 800eb68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b28      	cmp	r3, #40	; 0x28
 800eb6e:	d12d      	bne.n	800ebcc <_strtod_l+0x384>
 800eb70:	499a      	ldr	r1, [pc, #616]	; (800eddc <_strtod_l+0x594>)
 800eb72:	aa1a      	add	r2, sp, #104	; 0x68
 800eb74:	a817      	add	r0, sp, #92	; 0x5c
 800eb76:	f001 fa63 	bl	8010040 <__hexnan>
 800eb7a:	2805      	cmp	r0, #5
 800eb7c:	d126      	bne.n	800ebcc <_strtod_l+0x384>
 800eb7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800eb80:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800eb84:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800eb88:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800eb8c:	e6a0      	b.n	800e8d0 <_strtod_l+0x88>
 800eb8e:	210a      	movs	r1, #10
 800eb90:	fb01 2e0e 	mla	lr, r1, lr, r2
 800eb94:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800eb98:	e7b9      	b.n	800eb0e <_strtod_l+0x2c6>
 800eb9a:	2a6e      	cmp	r2, #110	; 0x6e
 800eb9c:	e7db      	b.n	800eb56 <_strtod_l+0x30e>
 800eb9e:	4990      	ldr	r1, [pc, #576]	; (800ede0 <_strtod_l+0x598>)
 800eba0:	a817      	add	r0, sp, #92	; 0x5c
 800eba2:	f001 fa39 	bl	8010018 <__match>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	f43f aeb0 	beq.w	800e90c <_strtod_l+0xc4>
 800ebac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebae:	498d      	ldr	r1, [pc, #564]	; (800ede4 <_strtod_l+0x59c>)
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	a817      	add	r0, sp, #92	; 0x5c
 800ebb4:	9317      	str	r3, [sp, #92]	; 0x5c
 800ebb6:	f001 fa2f 	bl	8010018 <__match>
 800ebba:	b910      	cbnz	r0, 800ebc2 <_strtod_l+0x37a>
 800ebbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	9317      	str	r3, [sp, #92]	; 0x5c
 800ebc2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800edf4 <_strtod_l+0x5ac>
 800ebc6:	f04f 0a00 	mov.w	sl, #0
 800ebca:	e681      	b.n	800e8d0 <_strtod_l+0x88>
 800ebcc:	4886      	ldr	r0, [pc, #536]	; (800ede8 <_strtod_l+0x5a0>)
 800ebce:	f002 fc1b 	bl	8011408 <nan>
 800ebd2:	ec5b ab10 	vmov	sl, fp, d0
 800ebd6:	e67b      	b.n	800e8d0 <_strtod_l+0x88>
 800ebd8:	9b05      	ldr	r3, [sp, #20]
 800ebda:	9807      	ldr	r0, [sp, #28]
 800ebdc:	1af3      	subs	r3, r6, r3
 800ebde:	2f00      	cmp	r7, #0
 800ebe0:	bf08      	it	eq
 800ebe2:	462f      	moveq	r7, r5
 800ebe4:	2d10      	cmp	r5, #16
 800ebe6:	9306      	str	r3, [sp, #24]
 800ebe8:	46a8      	mov	r8, r5
 800ebea:	bfa8      	it	ge
 800ebec:	f04f 0810 	movge.w	r8, #16
 800ebf0:	f7f1 fc88 	bl	8000504 <__aeabi_ui2d>
 800ebf4:	2d09      	cmp	r5, #9
 800ebf6:	4682      	mov	sl, r0
 800ebf8:	468b      	mov	fp, r1
 800ebfa:	dd13      	ble.n	800ec24 <_strtod_l+0x3dc>
 800ebfc:	4b7b      	ldr	r3, [pc, #492]	; (800edec <_strtod_l+0x5a4>)
 800ebfe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ec02:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ec06:	f7f1 fcf7 	bl	80005f8 <__aeabi_dmul>
 800ec0a:	4682      	mov	sl, r0
 800ec0c:	4648      	mov	r0, r9
 800ec0e:	468b      	mov	fp, r1
 800ec10:	f7f1 fc78 	bl	8000504 <__aeabi_ui2d>
 800ec14:	4602      	mov	r2, r0
 800ec16:	460b      	mov	r3, r1
 800ec18:	4650      	mov	r0, sl
 800ec1a:	4659      	mov	r1, fp
 800ec1c:	f7f1 fb36 	bl	800028c <__adddf3>
 800ec20:	4682      	mov	sl, r0
 800ec22:	468b      	mov	fp, r1
 800ec24:	2d0f      	cmp	r5, #15
 800ec26:	dc38      	bgt.n	800ec9a <_strtod_l+0x452>
 800ec28:	9b06      	ldr	r3, [sp, #24]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	f43f ae50 	beq.w	800e8d0 <_strtod_l+0x88>
 800ec30:	dd24      	ble.n	800ec7c <_strtod_l+0x434>
 800ec32:	2b16      	cmp	r3, #22
 800ec34:	dc0b      	bgt.n	800ec4e <_strtod_l+0x406>
 800ec36:	496d      	ldr	r1, [pc, #436]	; (800edec <_strtod_l+0x5a4>)
 800ec38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ec3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec40:	4652      	mov	r2, sl
 800ec42:	465b      	mov	r3, fp
 800ec44:	f7f1 fcd8 	bl	80005f8 <__aeabi_dmul>
 800ec48:	4682      	mov	sl, r0
 800ec4a:	468b      	mov	fp, r1
 800ec4c:	e640      	b.n	800e8d0 <_strtod_l+0x88>
 800ec4e:	9a06      	ldr	r2, [sp, #24]
 800ec50:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ec54:	4293      	cmp	r3, r2
 800ec56:	db20      	blt.n	800ec9a <_strtod_l+0x452>
 800ec58:	4c64      	ldr	r4, [pc, #400]	; (800edec <_strtod_l+0x5a4>)
 800ec5a:	f1c5 050f 	rsb	r5, r5, #15
 800ec5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ec62:	4652      	mov	r2, sl
 800ec64:	465b      	mov	r3, fp
 800ec66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec6a:	f7f1 fcc5 	bl	80005f8 <__aeabi_dmul>
 800ec6e:	9b06      	ldr	r3, [sp, #24]
 800ec70:	1b5d      	subs	r5, r3, r5
 800ec72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ec76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ec7a:	e7e3      	b.n	800ec44 <_strtod_l+0x3fc>
 800ec7c:	9b06      	ldr	r3, [sp, #24]
 800ec7e:	3316      	adds	r3, #22
 800ec80:	db0b      	blt.n	800ec9a <_strtod_l+0x452>
 800ec82:	9b05      	ldr	r3, [sp, #20]
 800ec84:	1b9e      	subs	r6, r3, r6
 800ec86:	4b59      	ldr	r3, [pc, #356]	; (800edec <_strtod_l+0x5a4>)
 800ec88:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800ec8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec90:	4650      	mov	r0, sl
 800ec92:	4659      	mov	r1, fp
 800ec94:	f7f1 fdda 	bl	800084c <__aeabi_ddiv>
 800ec98:	e7d6      	b.n	800ec48 <_strtod_l+0x400>
 800ec9a:	9b06      	ldr	r3, [sp, #24]
 800ec9c:	eba5 0808 	sub.w	r8, r5, r8
 800eca0:	4498      	add	r8, r3
 800eca2:	f1b8 0f00 	cmp.w	r8, #0
 800eca6:	dd74      	ble.n	800ed92 <_strtod_l+0x54a>
 800eca8:	f018 030f 	ands.w	r3, r8, #15
 800ecac:	d00a      	beq.n	800ecc4 <_strtod_l+0x47c>
 800ecae:	494f      	ldr	r1, [pc, #316]	; (800edec <_strtod_l+0x5a4>)
 800ecb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ecb4:	4652      	mov	r2, sl
 800ecb6:	465b      	mov	r3, fp
 800ecb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecbc:	f7f1 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ecc0:	4682      	mov	sl, r0
 800ecc2:	468b      	mov	fp, r1
 800ecc4:	f038 080f 	bics.w	r8, r8, #15
 800ecc8:	d04f      	beq.n	800ed6a <_strtod_l+0x522>
 800ecca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ecce:	dd22      	ble.n	800ed16 <_strtod_l+0x4ce>
 800ecd0:	2500      	movs	r5, #0
 800ecd2:	462e      	mov	r6, r5
 800ecd4:	9507      	str	r5, [sp, #28]
 800ecd6:	9505      	str	r5, [sp, #20]
 800ecd8:	2322      	movs	r3, #34	; 0x22
 800ecda:	f8df b118 	ldr.w	fp, [pc, #280]	; 800edf4 <_strtod_l+0x5ac>
 800ecde:	6023      	str	r3, [r4, #0]
 800ece0:	f04f 0a00 	mov.w	sl, #0
 800ece4:	9b07      	ldr	r3, [sp, #28]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	f43f adf2 	beq.w	800e8d0 <_strtod_l+0x88>
 800ecec:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f001 fb10 	bl	8010314 <_Bfree>
 800ecf4:	9905      	ldr	r1, [sp, #20]
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f001 fb0c 	bl	8010314 <_Bfree>
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4620      	mov	r0, r4
 800ed00:	f001 fb08 	bl	8010314 <_Bfree>
 800ed04:	9907      	ldr	r1, [sp, #28]
 800ed06:	4620      	mov	r0, r4
 800ed08:	f001 fb04 	bl	8010314 <_Bfree>
 800ed0c:	4629      	mov	r1, r5
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f001 fb00 	bl	8010314 <_Bfree>
 800ed14:	e5dc      	b.n	800e8d0 <_strtod_l+0x88>
 800ed16:	4b36      	ldr	r3, [pc, #216]	; (800edf0 <_strtod_l+0x5a8>)
 800ed18:	9304      	str	r3, [sp, #16]
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ed20:	4650      	mov	r0, sl
 800ed22:	4659      	mov	r1, fp
 800ed24:	4699      	mov	r9, r3
 800ed26:	f1b8 0f01 	cmp.w	r8, #1
 800ed2a:	dc21      	bgt.n	800ed70 <_strtod_l+0x528>
 800ed2c:	b10b      	cbz	r3, 800ed32 <_strtod_l+0x4ea>
 800ed2e:	4682      	mov	sl, r0
 800ed30:	468b      	mov	fp, r1
 800ed32:	4b2f      	ldr	r3, [pc, #188]	; (800edf0 <_strtod_l+0x5a8>)
 800ed34:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ed38:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ed3c:	4652      	mov	r2, sl
 800ed3e:	465b      	mov	r3, fp
 800ed40:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ed44:	f7f1 fc58 	bl	80005f8 <__aeabi_dmul>
 800ed48:	4b2a      	ldr	r3, [pc, #168]	; (800edf4 <_strtod_l+0x5ac>)
 800ed4a:	460a      	mov	r2, r1
 800ed4c:	400b      	ands	r3, r1
 800ed4e:	492a      	ldr	r1, [pc, #168]	; (800edf8 <_strtod_l+0x5b0>)
 800ed50:	428b      	cmp	r3, r1
 800ed52:	4682      	mov	sl, r0
 800ed54:	d8bc      	bhi.n	800ecd0 <_strtod_l+0x488>
 800ed56:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ed5a:	428b      	cmp	r3, r1
 800ed5c:	bf86      	itte	hi
 800ed5e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800edfc <_strtod_l+0x5b4>
 800ed62:	f04f 3aff 	movhi.w	sl, #4294967295
 800ed66:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	9304      	str	r3, [sp, #16]
 800ed6e:	e084      	b.n	800ee7a <_strtod_l+0x632>
 800ed70:	f018 0f01 	tst.w	r8, #1
 800ed74:	d005      	beq.n	800ed82 <_strtod_l+0x53a>
 800ed76:	9b04      	ldr	r3, [sp, #16]
 800ed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7c:	f7f1 fc3c 	bl	80005f8 <__aeabi_dmul>
 800ed80:	2301      	movs	r3, #1
 800ed82:	9a04      	ldr	r2, [sp, #16]
 800ed84:	3208      	adds	r2, #8
 800ed86:	f109 0901 	add.w	r9, r9, #1
 800ed8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed8e:	9204      	str	r2, [sp, #16]
 800ed90:	e7c9      	b.n	800ed26 <_strtod_l+0x4de>
 800ed92:	d0ea      	beq.n	800ed6a <_strtod_l+0x522>
 800ed94:	f1c8 0800 	rsb	r8, r8, #0
 800ed98:	f018 020f 	ands.w	r2, r8, #15
 800ed9c:	d00a      	beq.n	800edb4 <_strtod_l+0x56c>
 800ed9e:	4b13      	ldr	r3, [pc, #76]	; (800edec <_strtod_l+0x5a4>)
 800eda0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eda4:	4650      	mov	r0, sl
 800eda6:	4659      	mov	r1, fp
 800eda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edac:	f7f1 fd4e 	bl	800084c <__aeabi_ddiv>
 800edb0:	4682      	mov	sl, r0
 800edb2:	468b      	mov	fp, r1
 800edb4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800edb8:	d0d7      	beq.n	800ed6a <_strtod_l+0x522>
 800edba:	f1b8 0f1f 	cmp.w	r8, #31
 800edbe:	dd1f      	ble.n	800ee00 <_strtod_l+0x5b8>
 800edc0:	2500      	movs	r5, #0
 800edc2:	462e      	mov	r6, r5
 800edc4:	9507      	str	r5, [sp, #28]
 800edc6:	9505      	str	r5, [sp, #20]
 800edc8:	2322      	movs	r3, #34	; 0x22
 800edca:	f04f 0a00 	mov.w	sl, #0
 800edce:	f04f 0b00 	mov.w	fp, #0
 800edd2:	6023      	str	r3, [r4, #0]
 800edd4:	e786      	b.n	800ece4 <_strtod_l+0x49c>
 800edd6:	bf00      	nop
 800edd8:	08011aee 	.word	0x08011aee
 800eddc:	08011b08 	.word	0x08011b08
 800ede0:	08011ae5 	.word	0x08011ae5
 800ede4:	08011ae8 	.word	0x08011ae8
 800ede8:	08011f1a 	.word	0x08011f1a
 800edec:	08011dd8 	.word	0x08011dd8
 800edf0:	08011db0 	.word	0x08011db0
 800edf4:	7ff00000 	.word	0x7ff00000
 800edf8:	7ca00000 	.word	0x7ca00000
 800edfc:	7fefffff 	.word	0x7fefffff
 800ee00:	f018 0310 	ands.w	r3, r8, #16
 800ee04:	bf18      	it	ne
 800ee06:	236a      	movne	r3, #106	; 0x6a
 800ee08:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f1b8 <_strtod_l+0x970>
 800ee0c:	9304      	str	r3, [sp, #16]
 800ee0e:	4650      	mov	r0, sl
 800ee10:	4659      	mov	r1, fp
 800ee12:	2300      	movs	r3, #0
 800ee14:	f018 0f01 	tst.w	r8, #1
 800ee18:	d004      	beq.n	800ee24 <_strtod_l+0x5dc>
 800ee1a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ee1e:	f7f1 fbeb 	bl	80005f8 <__aeabi_dmul>
 800ee22:	2301      	movs	r3, #1
 800ee24:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ee28:	f109 0908 	add.w	r9, r9, #8
 800ee2c:	d1f2      	bne.n	800ee14 <_strtod_l+0x5cc>
 800ee2e:	b10b      	cbz	r3, 800ee34 <_strtod_l+0x5ec>
 800ee30:	4682      	mov	sl, r0
 800ee32:	468b      	mov	fp, r1
 800ee34:	9b04      	ldr	r3, [sp, #16]
 800ee36:	b1c3      	cbz	r3, 800ee6a <_strtod_l+0x622>
 800ee38:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ee3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	4659      	mov	r1, fp
 800ee44:	dd11      	ble.n	800ee6a <_strtod_l+0x622>
 800ee46:	2b1f      	cmp	r3, #31
 800ee48:	f340 8124 	ble.w	800f094 <_strtod_l+0x84c>
 800ee4c:	2b34      	cmp	r3, #52	; 0x34
 800ee4e:	bfde      	ittt	le
 800ee50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ee54:	f04f 33ff 	movle.w	r3, #4294967295
 800ee58:	fa03 f202 	lslle.w	r2, r3, r2
 800ee5c:	f04f 0a00 	mov.w	sl, #0
 800ee60:	bfcc      	ite	gt
 800ee62:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ee66:	ea02 0b01 	andle.w	fp, r2, r1
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	4650      	mov	r0, sl
 800ee70:	4659      	mov	r1, fp
 800ee72:	f7f1 fe29 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d1a2      	bne.n	800edc0 <_strtod_l+0x578>
 800ee7a:	9b07      	ldr	r3, [sp, #28]
 800ee7c:	9300      	str	r3, [sp, #0]
 800ee7e:	9908      	ldr	r1, [sp, #32]
 800ee80:	462b      	mov	r3, r5
 800ee82:	463a      	mov	r2, r7
 800ee84:	4620      	mov	r0, r4
 800ee86:	f001 faad 	bl	80103e4 <__s2b>
 800ee8a:	9007      	str	r0, [sp, #28]
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	f43f af1f 	beq.w	800ecd0 <_strtod_l+0x488>
 800ee92:	9b05      	ldr	r3, [sp, #20]
 800ee94:	1b9e      	subs	r6, r3, r6
 800ee96:	9b06      	ldr	r3, [sp, #24]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	bfb4      	ite	lt
 800ee9c:	4633      	movlt	r3, r6
 800ee9e:	2300      	movge	r3, #0
 800eea0:	930c      	str	r3, [sp, #48]	; 0x30
 800eea2:	9b06      	ldr	r3, [sp, #24]
 800eea4:	2500      	movs	r5, #0
 800eea6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eeaa:	9312      	str	r3, [sp, #72]	; 0x48
 800eeac:	462e      	mov	r6, r5
 800eeae:	9b07      	ldr	r3, [sp, #28]
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	6859      	ldr	r1, [r3, #4]
 800eeb4:	f001 f9ee 	bl	8010294 <_Balloc>
 800eeb8:	9005      	str	r0, [sp, #20]
 800eeba:	2800      	cmp	r0, #0
 800eebc:	f43f af0c 	beq.w	800ecd8 <_strtod_l+0x490>
 800eec0:	9b07      	ldr	r3, [sp, #28]
 800eec2:	691a      	ldr	r2, [r3, #16]
 800eec4:	3202      	adds	r2, #2
 800eec6:	f103 010c 	add.w	r1, r3, #12
 800eeca:	0092      	lsls	r2, r2, #2
 800eecc:	300c      	adds	r0, #12
 800eece:	f7ff f94f 	bl	800e170 <memcpy>
 800eed2:	ec4b ab10 	vmov	d0, sl, fp
 800eed6:	aa1a      	add	r2, sp, #104	; 0x68
 800eed8:	a919      	add	r1, sp, #100	; 0x64
 800eeda:	4620      	mov	r0, r4
 800eedc:	f001 fdc8 	bl	8010a70 <__d2b>
 800eee0:	ec4b ab18 	vmov	d8, sl, fp
 800eee4:	9018      	str	r0, [sp, #96]	; 0x60
 800eee6:	2800      	cmp	r0, #0
 800eee8:	f43f aef6 	beq.w	800ecd8 <_strtod_l+0x490>
 800eeec:	2101      	movs	r1, #1
 800eeee:	4620      	mov	r0, r4
 800eef0:	f001 fb12 	bl	8010518 <__i2b>
 800eef4:	4606      	mov	r6, r0
 800eef6:	2800      	cmp	r0, #0
 800eef8:	f43f aeee 	beq.w	800ecd8 <_strtod_l+0x490>
 800eefc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eefe:	9904      	ldr	r1, [sp, #16]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	bfab      	itete	ge
 800ef04:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ef06:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ef08:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ef0a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ef0e:	bfac      	ite	ge
 800ef10:	eb03 0902 	addge.w	r9, r3, r2
 800ef14:	1ad7      	sublt	r7, r2, r3
 800ef16:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ef18:	eba3 0801 	sub.w	r8, r3, r1
 800ef1c:	4490      	add	r8, r2
 800ef1e:	4ba1      	ldr	r3, [pc, #644]	; (800f1a4 <_strtod_l+0x95c>)
 800ef20:	f108 38ff 	add.w	r8, r8, #4294967295
 800ef24:	4598      	cmp	r8, r3
 800ef26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ef2a:	f280 80c7 	bge.w	800f0bc <_strtod_l+0x874>
 800ef2e:	eba3 0308 	sub.w	r3, r3, r8
 800ef32:	2b1f      	cmp	r3, #31
 800ef34:	eba2 0203 	sub.w	r2, r2, r3
 800ef38:	f04f 0101 	mov.w	r1, #1
 800ef3c:	f300 80b1 	bgt.w	800f0a2 <_strtod_l+0x85a>
 800ef40:	fa01 f303 	lsl.w	r3, r1, r3
 800ef44:	930d      	str	r3, [sp, #52]	; 0x34
 800ef46:	2300      	movs	r3, #0
 800ef48:	9308      	str	r3, [sp, #32]
 800ef4a:	eb09 0802 	add.w	r8, r9, r2
 800ef4e:	9b04      	ldr	r3, [sp, #16]
 800ef50:	45c1      	cmp	r9, r8
 800ef52:	4417      	add	r7, r2
 800ef54:	441f      	add	r7, r3
 800ef56:	464b      	mov	r3, r9
 800ef58:	bfa8      	it	ge
 800ef5a:	4643      	movge	r3, r8
 800ef5c:	42bb      	cmp	r3, r7
 800ef5e:	bfa8      	it	ge
 800ef60:	463b      	movge	r3, r7
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	bfc2      	ittt	gt
 800ef66:	eba8 0803 	subgt.w	r8, r8, r3
 800ef6a:	1aff      	subgt	r7, r7, r3
 800ef6c:	eba9 0903 	subgt.w	r9, r9, r3
 800ef70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	dd17      	ble.n	800efa6 <_strtod_l+0x75e>
 800ef76:	4631      	mov	r1, r6
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	f001 fb8c 	bl	8010698 <__pow5mult>
 800ef80:	4606      	mov	r6, r0
 800ef82:	2800      	cmp	r0, #0
 800ef84:	f43f aea8 	beq.w	800ecd8 <_strtod_l+0x490>
 800ef88:	4601      	mov	r1, r0
 800ef8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	f001 fad9 	bl	8010544 <__multiply>
 800ef92:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef94:	2800      	cmp	r0, #0
 800ef96:	f43f ae9f 	beq.w	800ecd8 <_strtod_l+0x490>
 800ef9a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f001 f9b9 	bl	8010314 <_Bfree>
 800efa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efa4:	9318      	str	r3, [sp, #96]	; 0x60
 800efa6:	f1b8 0f00 	cmp.w	r8, #0
 800efaa:	f300 808c 	bgt.w	800f0c6 <_strtod_l+0x87e>
 800efae:	9b06      	ldr	r3, [sp, #24]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	dd08      	ble.n	800efc6 <_strtod_l+0x77e>
 800efb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800efb6:	9905      	ldr	r1, [sp, #20]
 800efb8:	4620      	mov	r0, r4
 800efba:	f001 fb6d 	bl	8010698 <__pow5mult>
 800efbe:	9005      	str	r0, [sp, #20]
 800efc0:	2800      	cmp	r0, #0
 800efc2:	f43f ae89 	beq.w	800ecd8 <_strtod_l+0x490>
 800efc6:	2f00      	cmp	r7, #0
 800efc8:	dd08      	ble.n	800efdc <_strtod_l+0x794>
 800efca:	9905      	ldr	r1, [sp, #20]
 800efcc:	463a      	mov	r2, r7
 800efce:	4620      	mov	r0, r4
 800efd0:	f001 fbbc 	bl	801074c <__lshift>
 800efd4:	9005      	str	r0, [sp, #20]
 800efd6:	2800      	cmp	r0, #0
 800efd8:	f43f ae7e 	beq.w	800ecd8 <_strtod_l+0x490>
 800efdc:	f1b9 0f00 	cmp.w	r9, #0
 800efe0:	dd08      	ble.n	800eff4 <_strtod_l+0x7ac>
 800efe2:	4631      	mov	r1, r6
 800efe4:	464a      	mov	r2, r9
 800efe6:	4620      	mov	r0, r4
 800efe8:	f001 fbb0 	bl	801074c <__lshift>
 800efec:	4606      	mov	r6, r0
 800efee:	2800      	cmp	r0, #0
 800eff0:	f43f ae72 	beq.w	800ecd8 <_strtod_l+0x490>
 800eff4:	9a05      	ldr	r2, [sp, #20]
 800eff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eff8:	4620      	mov	r0, r4
 800effa:	f001 fc33 	bl	8010864 <__mdiff>
 800effe:	4605      	mov	r5, r0
 800f000:	2800      	cmp	r0, #0
 800f002:	f43f ae69 	beq.w	800ecd8 <_strtod_l+0x490>
 800f006:	68c3      	ldr	r3, [r0, #12]
 800f008:	930b      	str	r3, [sp, #44]	; 0x2c
 800f00a:	2300      	movs	r3, #0
 800f00c:	60c3      	str	r3, [r0, #12]
 800f00e:	4631      	mov	r1, r6
 800f010:	f001 fc0c 	bl	801082c <__mcmp>
 800f014:	2800      	cmp	r0, #0
 800f016:	da60      	bge.n	800f0da <_strtod_l+0x892>
 800f018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f01a:	ea53 030a 	orrs.w	r3, r3, sl
 800f01e:	f040 8082 	bne.w	800f126 <_strtod_l+0x8de>
 800f022:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f026:	2b00      	cmp	r3, #0
 800f028:	d17d      	bne.n	800f126 <_strtod_l+0x8de>
 800f02a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f02e:	0d1b      	lsrs	r3, r3, #20
 800f030:	051b      	lsls	r3, r3, #20
 800f032:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f036:	d976      	bls.n	800f126 <_strtod_l+0x8de>
 800f038:	696b      	ldr	r3, [r5, #20]
 800f03a:	b913      	cbnz	r3, 800f042 <_strtod_l+0x7fa>
 800f03c:	692b      	ldr	r3, [r5, #16]
 800f03e:	2b01      	cmp	r3, #1
 800f040:	dd71      	ble.n	800f126 <_strtod_l+0x8de>
 800f042:	4629      	mov	r1, r5
 800f044:	2201      	movs	r2, #1
 800f046:	4620      	mov	r0, r4
 800f048:	f001 fb80 	bl	801074c <__lshift>
 800f04c:	4631      	mov	r1, r6
 800f04e:	4605      	mov	r5, r0
 800f050:	f001 fbec 	bl	801082c <__mcmp>
 800f054:	2800      	cmp	r0, #0
 800f056:	dd66      	ble.n	800f126 <_strtod_l+0x8de>
 800f058:	9904      	ldr	r1, [sp, #16]
 800f05a:	4a53      	ldr	r2, [pc, #332]	; (800f1a8 <_strtod_l+0x960>)
 800f05c:	465b      	mov	r3, fp
 800f05e:	2900      	cmp	r1, #0
 800f060:	f000 8081 	beq.w	800f166 <_strtod_l+0x91e>
 800f064:	ea02 010b 	and.w	r1, r2, fp
 800f068:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f06c:	dc7b      	bgt.n	800f166 <_strtod_l+0x91e>
 800f06e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f072:	f77f aea9 	ble.w	800edc8 <_strtod_l+0x580>
 800f076:	4b4d      	ldr	r3, [pc, #308]	; (800f1ac <_strtod_l+0x964>)
 800f078:	4650      	mov	r0, sl
 800f07a:	4659      	mov	r1, fp
 800f07c:	2200      	movs	r2, #0
 800f07e:	f7f1 fabb 	bl	80005f8 <__aeabi_dmul>
 800f082:	460b      	mov	r3, r1
 800f084:	4303      	orrs	r3, r0
 800f086:	bf08      	it	eq
 800f088:	2322      	moveq	r3, #34	; 0x22
 800f08a:	4682      	mov	sl, r0
 800f08c:	468b      	mov	fp, r1
 800f08e:	bf08      	it	eq
 800f090:	6023      	streq	r3, [r4, #0]
 800f092:	e62b      	b.n	800ecec <_strtod_l+0x4a4>
 800f094:	f04f 32ff 	mov.w	r2, #4294967295
 800f098:	fa02 f303 	lsl.w	r3, r2, r3
 800f09c:	ea03 0a0a 	and.w	sl, r3, sl
 800f0a0:	e6e3      	b.n	800ee6a <_strtod_l+0x622>
 800f0a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f0a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f0aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f0ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f0b2:	fa01 f308 	lsl.w	r3, r1, r8
 800f0b6:	9308      	str	r3, [sp, #32]
 800f0b8:	910d      	str	r1, [sp, #52]	; 0x34
 800f0ba:	e746      	b.n	800ef4a <_strtod_l+0x702>
 800f0bc:	2300      	movs	r3, #0
 800f0be:	9308      	str	r3, [sp, #32]
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	930d      	str	r3, [sp, #52]	; 0x34
 800f0c4:	e741      	b.n	800ef4a <_strtod_l+0x702>
 800f0c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f0c8:	4642      	mov	r2, r8
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f001 fb3e 	bl	801074c <__lshift>
 800f0d0:	9018      	str	r0, [sp, #96]	; 0x60
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	f47f af6b 	bne.w	800efae <_strtod_l+0x766>
 800f0d8:	e5fe      	b.n	800ecd8 <_strtod_l+0x490>
 800f0da:	465f      	mov	r7, fp
 800f0dc:	d16e      	bne.n	800f1bc <_strtod_l+0x974>
 800f0de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f0e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0e4:	b342      	cbz	r2, 800f138 <_strtod_l+0x8f0>
 800f0e6:	4a32      	ldr	r2, [pc, #200]	; (800f1b0 <_strtod_l+0x968>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d128      	bne.n	800f13e <_strtod_l+0x8f6>
 800f0ec:	9b04      	ldr	r3, [sp, #16]
 800f0ee:	4651      	mov	r1, sl
 800f0f0:	b1eb      	cbz	r3, 800f12e <_strtod_l+0x8e6>
 800f0f2:	4b2d      	ldr	r3, [pc, #180]	; (800f1a8 <_strtod_l+0x960>)
 800f0f4:	403b      	ands	r3, r7
 800f0f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f0fa:	f04f 32ff 	mov.w	r2, #4294967295
 800f0fe:	d819      	bhi.n	800f134 <_strtod_l+0x8ec>
 800f100:	0d1b      	lsrs	r3, r3, #20
 800f102:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f106:	fa02 f303 	lsl.w	r3, r2, r3
 800f10a:	4299      	cmp	r1, r3
 800f10c:	d117      	bne.n	800f13e <_strtod_l+0x8f6>
 800f10e:	4b29      	ldr	r3, [pc, #164]	; (800f1b4 <_strtod_l+0x96c>)
 800f110:	429f      	cmp	r7, r3
 800f112:	d102      	bne.n	800f11a <_strtod_l+0x8d2>
 800f114:	3101      	adds	r1, #1
 800f116:	f43f addf 	beq.w	800ecd8 <_strtod_l+0x490>
 800f11a:	4b23      	ldr	r3, [pc, #140]	; (800f1a8 <_strtod_l+0x960>)
 800f11c:	403b      	ands	r3, r7
 800f11e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f122:	f04f 0a00 	mov.w	sl, #0
 800f126:	9b04      	ldr	r3, [sp, #16]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1a4      	bne.n	800f076 <_strtod_l+0x82e>
 800f12c:	e5de      	b.n	800ecec <_strtod_l+0x4a4>
 800f12e:	f04f 33ff 	mov.w	r3, #4294967295
 800f132:	e7ea      	b.n	800f10a <_strtod_l+0x8c2>
 800f134:	4613      	mov	r3, r2
 800f136:	e7e8      	b.n	800f10a <_strtod_l+0x8c2>
 800f138:	ea53 030a 	orrs.w	r3, r3, sl
 800f13c:	d08c      	beq.n	800f058 <_strtod_l+0x810>
 800f13e:	9b08      	ldr	r3, [sp, #32]
 800f140:	b1db      	cbz	r3, 800f17a <_strtod_l+0x932>
 800f142:	423b      	tst	r3, r7
 800f144:	d0ef      	beq.n	800f126 <_strtod_l+0x8de>
 800f146:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f148:	9a04      	ldr	r2, [sp, #16]
 800f14a:	4650      	mov	r0, sl
 800f14c:	4659      	mov	r1, fp
 800f14e:	b1c3      	cbz	r3, 800f182 <_strtod_l+0x93a>
 800f150:	f7ff fb5b 	bl	800e80a <sulp>
 800f154:	4602      	mov	r2, r0
 800f156:	460b      	mov	r3, r1
 800f158:	ec51 0b18 	vmov	r0, r1, d8
 800f15c:	f7f1 f896 	bl	800028c <__adddf3>
 800f160:	4682      	mov	sl, r0
 800f162:	468b      	mov	fp, r1
 800f164:	e7df      	b.n	800f126 <_strtod_l+0x8de>
 800f166:	4013      	ands	r3, r2
 800f168:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f16c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f170:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f174:	f04f 3aff 	mov.w	sl, #4294967295
 800f178:	e7d5      	b.n	800f126 <_strtod_l+0x8de>
 800f17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f17c:	ea13 0f0a 	tst.w	r3, sl
 800f180:	e7e0      	b.n	800f144 <_strtod_l+0x8fc>
 800f182:	f7ff fb42 	bl	800e80a <sulp>
 800f186:	4602      	mov	r2, r0
 800f188:	460b      	mov	r3, r1
 800f18a:	ec51 0b18 	vmov	r0, r1, d8
 800f18e:	f7f1 f87b 	bl	8000288 <__aeabi_dsub>
 800f192:	2200      	movs	r2, #0
 800f194:	2300      	movs	r3, #0
 800f196:	4682      	mov	sl, r0
 800f198:	468b      	mov	fp, r1
 800f19a:	f7f1 fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d0c1      	beq.n	800f126 <_strtod_l+0x8de>
 800f1a2:	e611      	b.n	800edc8 <_strtod_l+0x580>
 800f1a4:	fffffc02 	.word	0xfffffc02
 800f1a8:	7ff00000 	.word	0x7ff00000
 800f1ac:	39500000 	.word	0x39500000
 800f1b0:	000fffff 	.word	0x000fffff
 800f1b4:	7fefffff 	.word	0x7fefffff
 800f1b8:	08011b20 	.word	0x08011b20
 800f1bc:	4631      	mov	r1, r6
 800f1be:	4628      	mov	r0, r5
 800f1c0:	f001 fcb2 	bl	8010b28 <__ratio>
 800f1c4:	ec59 8b10 	vmov	r8, r9, d0
 800f1c8:	ee10 0a10 	vmov	r0, s0
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f1d2:	4649      	mov	r1, r9
 800f1d4:	f7f1 fc8c 	bl	8000af0 <__aeabi_dcmple>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d07a      	beq.n	800f2d2 <_strtod_l+0xa8a>
 800f1dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d04a      	beq.n	800f278 <_strtod_l+0xa30>
 800f1e2:	4b95      	ldr	r3, [pc, #596]	; (800f438 <_strtod_l+0xbf0>)
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f1ea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f438 <_strtod_l+0xbf0>
 800f1ee:	f04f 0800 	mov.w	r8, #0
 800f1f2:	4b92      	ldr	r3, [pc, #584]	; (800f43c <_strtod_l+0xbf4>)
 800f1f4:	403b      	ands	r3, r7
 800f1f6:	930d      	str	r3, [sp, #52]	; 0x34
 800f1f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1fa:	4b91      	ldr	r3, [pc, #580]	; (800f440 <_strtod_l+0xbf8>)
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	f040 80b0 	bne.w	800f362 <_strtod_l+0xb1a>
 800f202:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f206:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f20a:	ec4b ab10 	vmov	d0, sl, fp
 800f20e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f212:	f001 fbb1 	bl	8010978 <__ulp>
 800f216:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f21a:	ec53 2b10 	vmov	r2, r3, d0
 800f21e:	f7f1 f9eb 	bl	80005f8 <__aeabi_dmul>
 800f222:	4652      	mov	r2, sl
 800f224:	465b      	mov	r3, fp
 800f226:	f7f1 f831 	bl	800028c <__adddf3>
 800f22a:	460b      	mov	r3, r1
 800f22c:	4983      	ldr	r1, [pc, #524]	; (800f43c <_strtod_l+0xbf4>)
 800f22e:	4a85      	ldr	r2, [pc, #532]	; (800f444 <_strtod_l+0xbfc>)
 800f230:	4019      	ands	r1, r3
 800f232:	4291      	cmp	r1, r2
 800f234:	4682      	mov	sl, r0
 800f236:	d960      	bls.n	800f2fa <_strtod_l+0xab2>
 800f238:	ee18 3a90 	vmov	r3, s17
 800f23c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f240:	4293      	cmp	r3, r2
 800f242:	d104      	bne.n	800f24e <_strtod_l+0xa06>
 800f244:	ee18 3a10 	vmov	r3, s16
 800f248:	3301      	adds	r3, #1
 800f24a:	f43f ad45 	beq.w	800ecd8 <_strtod_l+0x490>
 800f24e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f450 <_strtod_l+0xc08>
 800f252:	f04f 3aff 	mov.w	sl, #4294967295
 800f256:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f258:	4620      	mov	r0, r4
 800f25a:	f001 f85b 	bl	8010314 <_Bfree>
 800f25e:	9905      	ldr	r1, [sp, #20]
 800f260:	4620      	mov	r0, r4
 800f262:	f001 f857 	bl	8010314 <_Bfree>
 800f266:	4631      	mov	r1, r6
 800f268:	4620      	mov	r0, r4
 800f26a:	f001 f853 	bl	8010314 <_Bfree>
 800f26e:	4629      	mov	r1, r5
 800f270:	4620      	mov	r0, r4
 800f272:	f001 f84f 	bl	8010314 <_Bfree>
 800f276:	e61a      	b.n	800eeae <_strtod_l+0x666>
 800f278:	f1ba 0f00 	cmp.w	sl, #0
 800f27c:	d11b      	bne.n	800f2b6 <_strtod_l+0xa6e>
 800f27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f282:	b9f3      	cbnz	r3, 800f2c2 <_strtod_l+0xa7a>
 800f284:	4b6c      	ldr	r3, [pc, #432]	; (800f438 <_strtod_l+0xbf0>)
 800f286:	2200      	movs	r2, #0
 800f288:	4640      	mov	r0, r8
 800f28a:	4649      	mov	r1, r9
 800f28c:	f7f1 fc26 	bl	8000adc <__aeabi_dcmplt>
 800f290:	b9d0      	cbnz	r0, 800f2c8 <_strtod_l+0xa80>
 800f292:	4640      	mov	r0, r8
 800f294:	4649      	mov	r1, r9
 800f296:	4b6c      	ldr	r3, [pc, #432]	; (800f448 <_strtod_l+0xc00>)
 800f298:	2200      	movs	r2, #0
 800f29a:	f7f1 f9ad 	bl	80005f8 <__aeabi_dmul>
 800f29e:	4680      	mov	r8, r0
 800f2a0:	4689      	mov	r9, r1
 800f2a2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f2a6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f2aa:	9315      	str	r3, [sp, #84]	; 0x54
 800f2ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f2b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f2b4:	e79d      	b.n	800f1f2 <_strtod_l+0x9aa>
 800f2b6:	f1ba 0f01 	cmp.w	sl, #1
 800f2ba:	d102      	bne.n	800f2c2 <_strtod_l+0xa7a>
 800f2bc:	2f00      	cmp	r7, #0
 800f2be:	f43f ad83 	beq.w	800edc8 <_strtod_l+0x580>
 800f2c2:	4b62      	ldr	r3, [pc, #392]	; (800f44c <_strtod_l+0xc04>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	e78e      	b.n	800f1e6 <_strtod_l+0x99e>
 800f2c8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f448 <_strtod_l+0xc00>
 800f2cc:	f04f 0800 	mov.w	r8, #0
 800f2d0:	e7e7      	b.n	800f2a2 <_strtod_l+0xa5a>
 800f2d2:	4b5d      	ldr	r3, [pc, #372]	; (800f448 <_strtod_l+0xc00>)
 800f2d4:	4640      	mov	r0, r8
 800f2d6:	4649      	mov	r1, r9
 800f2d8:	2200      	movs	r2, #0
 800f2da:	f7f1 f98d 	bl	80005f8 <__aeabi_dmul>
 800f2de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f2e0:	4680      	mov	r8, r0
 800f2e2:	4689      	mov	r9, r1
 800f2e4:	b933      	cbnz	r3, 800f2f4 <_strtod_l+0xaac>
 800f2e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2ea:	900e      	str	r0, [sp, #56]	; 0x38
 800f2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f2f2:	e7dd      	b.n	800f2b0 <_strtod_l+0xa68>
 800f2f4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f2f8:	e7f9      	b.n	800f2ee <_strtod_l+0xaa6>
 800f2fa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f2fe:	9b04      	ldr	r3, [sp, #16]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1a8      	bne.n	800f256 <_strtod_l+0xa0e>
 800f304:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f30a:	0d1b      	lsrs	r3, r3, #20
 800f30c:	051b      	lsls	r3, r3, #20
 800f30e:	429a      	cmp	r2, r3
 800f310:	d1a1      	bne.n	800f256 <_strtod_l+0xa0e>
 800f312:	4640      	mov	r0, r8
 800f314:	4649      	mov	r1, r9
 800f316:	f7f1 fca7 	bl	8000c68 <__aeabi_d2lz>
 800f31a:	f7f1 f93f 	bl	800059c <__aeabi_l2d>
 800f31e:	4602      	mov	r2, r0
 800f320:	460b      	mov	r3, r1
 800f322:	4640      	mov	r0, r8
 800f324:	4649      	mov	r1, r9
 800f326:	f7f0 ffaf 	bl	8000288 <__aeabi_dsub>
 800f32a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f32c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f330:	ea43 030a 	orr.w	r3, r3, sl
 800f334:	4313      	orrs	r3, r2
 800f336:	4680      	mov	r8, r0
 800f338:	4689      	mov	r9, r1
 800f33a:	d055      	beq.n	800f3e8 <_strtod_l+0xba0>
 800f33c:	a336      	add	r3, pc, #216	; (adr r3, 800f418 <_strtod_l+0xbd0>)
 800f33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f342:	f7f1 fbcb 	bl	8000adc <__aeabi_dcmplt>
 800f346:	2800      	cmp	r0, #0
 800f348:	f47f acd0 	bne.w	800ecec <_strtod_l+0x4a4>
 800f34c:	a334      	add	r3, pc, #208	; (adr r3, 800f420 <_strtod_l+0xbd8>)
 800f34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f352:	4640      	mov	r0, r8
 800f354:	4649      	mov	r1, r9
 800f356:	f7f1 fbdf 	bl	8000b18 <__aeabi_dcmpgt>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	f43f af7b 	beq.w	800f256 <_strtod_l+0xa0e>
 800f360:	e4c4      	b.n	800ecec <_strtod_l+0x4a4>
 800f362:	9b04      	ldr	r3, [sp, #16]
 800f364:	b333      	cbz	r3, 800f3b4 <_strtod_l+0xb6c>
 800f366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f368:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f36c:	d822      	bhi.n	800f3b4 <_strtod_l+0xb6c>
 800f36e:	a32e      	add	r3, pc, #184	; (adr r3, 800f428 <_strtod_l+0xbe0>)
 800f370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f374:	4640      	mov	r0, r8
 800f376:	4649      	mov	r1, r9
 800f378:	f7f1 fbba 	bl	8000af0 <__aeabi_dcmple>
 800f37c:	b1a0      	cbz	r0, 800f3a8 <_strtod_l+0xb60>
 800f37e:	4649      	mov	r1, r9
 800f380:	4640      	mov	r0, r8
 800f382:	f7f1 fbe9 	bl	8000b58 <__aeabi_d2uiz>
 800f386:	2801      	cmp	r0, #1
 800f388:	bf38      	it	cc
 800f38a:	2001      	movcc	r0, #1
 800f38c:	f7f1 f8ba 	bl	8000504 <__aeabi_ui2d>
 800f390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f392:	4680      	mov	r8, r0
 800f394:	4689      	mov	r9, r1
 800f396:	bb23      	cbnz	r3, 800f3e2 <_strtod_l+0xb9a>
 800f398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f39c:	9010      	str	r0, [sp, #64]	; 0x40
 800f39e:	9311      	str	r3, [sp, #68]	; 0x44
 800f3a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f3a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f3ac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f3b0:	1a9b      	subs	r3, r3, r2
 800f3b2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f3b8:	eeb0 0a48 	vmov.f32	s0, s16
 800f3bc:	eef0 0a68 	vmov.f32	s1, s17
 800f3c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f3c4:	f001 fad8 	bl	8010978 <__ulp>
 800f3c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f3cc:	ec53 2b10 	vmov	r2, r3, d0
 800f3d0:	f7f1 f912 	bl	80005f8 <__aeabi_dmul>
 800f3d4:	ec53 2b18 	vmov	r2, r3, d8
 800f3d8:	f7f0 ff58 	bl	800028c <__adddf3>
 800f3dc:	4682      	mov	sl, r0
 800f3de:	468b      	mov	fp, r1
 800f3e0:	e78d      	b.n	800f2fe <_strtod_l+0xab6>
 800f3e2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f3e6:	e7db      	b.n	800f3a0 <_strtod_l+0xb58>
 800f3e8:	a311      	add	r3, pc, #68	; (adr r3, 800f430 <_strtod_l+0xbe8>)
 800f3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3ee:	f7f1 fb75 	bl	8000adc <__aeabi_dcmplt>
 800f3f2:	e7b2      	b.n	800f35a <_strtod_l+0xb12>
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800f3f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3fc:	6013      	str	r3, [r2, #0]
 800f3fe:	f7ff ba6b 	b.w	800e8d8 <_strtod_l+0x90>
 800f402:	2a65      	cmp	r2, #101	; 0x65
 800f404:	f43f ab5f 	beq.w	800eac6 <_strtod_l+0x27e>
 800f408:	2a45      	cmp	r2, #69	; 0x45
 800f40a:	f43f ab5c 	beq.w	800eac6 <_strtod_l+0x27e>
 800f40e:	2301      	movs	r3, #1
 800f410:	f7ff bb94 	b.w	800eb3c <_strtod_l+0x2f4>
 800f414:	f3af 8000 	nop.w
 800f418:	94a03595 	.word	0x94a03595
 800f41c:	3fdfffff 	.word	0x3fdfffff
 800f420:	35afe535 	.word	0x35afe535
 800f424:	3fe00000 	.word	0x3fe00000
 800f428:	ffc00000 	.word	0xffc00000
 800f42c:	41dfffff 	.word	0x41dfffff
 800f430:	94a03595 	.word	0x94a03595
 800f434:	3fcfffff 	.word	0x3fcfffff
 800f438:	3ff00000 	.word	0x3ff00000
 800f43c:	7ff00000 	.word	0x7ff00000
 800f440:	7fe00000 	.word	0x7fe00000
 800f444:	7c9fffff 	.word	0x7c9fffff
 800f448:	3fe00000 	.word	0x3fe00000
 800f44c:	bff00000 	.word	0xbff00000
 800f450:	7fefffff 	.word	0x7fefffff

0800f454 <_strtod_r>:
 800f454:	4b01      	ldr	r3, [pc, #4]	; (800f45c <_strtod_r+0x8>)
 800f456:	f7ff b9f7 	b.w	800e848 <_strtod_l>
 800f45a:	bf00      	nop
 800f45c:	20000078 	.word	0x20000078

0800f460 <_strtol_l.constprop.0>:
 800f460:	2b01      	cmp	r3, #1
 800f462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f466:	d001      	beq.n	800f46c <_strtol_l.constprop.0+0xc>
 800f468:	2b24      	cmp	r3, #36	; 0x24
 800f46a:	d906      	bls.n	800f47a <_strtol_l.constprop.0+0x1a>
 800f46c:	f7fe fe56 	bl	800e11c <__errno>
 800f470:	2316      	movs	r3, #22
 800f472:	6003      	str	r3, [r0, #0]
 800f474:	2000      	movs	r0, #0
 800f476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f47a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f560 <_strtol_l.constprop.0+0x100>
 800f47e:	460d      	mov	r5, r1
 800f480:	462e      	mov	r6, r5
 800f482:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f486:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f48a:	f017 0708 	ands.w	r7, r7, #8
 800f48e:	d1f7      	bne.n	800f480 <_strtol_l.constprop.0+0x20>
 800f490:	2c2d      	cmp	r4, #45	; 0x2d
 800f492:	d132      	bne.n	800f4fa <_strtol_l.constprop.0+0x9a>
 800f494:	782c      	ldrb	r4, [r5, #0]
 800f496:	2701      	movs	r7, #1
 800f498:	1cb5      	adds	r5, r6, #2
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d05b      	beq.n	800f556 <_strtol_l.constprop.0+0xf6>
 800f49e:	2b10      	cmp	r3, #16
 800f4a0:	d109      	bne.n	800f4b6 <_strtol_l.constprop.0+0x56>
 800f4a2:	2c30      	cmp	r4, #48	; 0x30
 800f4a4:	d107      	bne.n	800f4b6 <_strtol_l.constprop.0+0x56>
 800f4a6:	782c      	ldrb	r4, [r5, #0]
 800f4a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f4ac:	2c58      	cmp	r4, #88	; 0x58
 800f4ae:	d14d      	bne.n	800f54c <_strtol_l.constprop.0+0xec>
 800f4b0:	786c      	ldrb	r4, [r5, #1]
 800f4b2:	2310      	movs	r3, #16
 800f4b4:	3502      	adds	r5, #2
 800f4b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f4ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4be:	f04f 0c00 	mov.w	ip, #0
 800f4c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800f4c6:	4666      	mov	r6, ip
 800f4c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800f4cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f4d0:	f1be 0f09 	cmp.w	lr, #9
 800f4d4:	d816      	bhi.n	800f504 <_strtol_l.constprop.0+0xa4>
 800f4d6:	4674      	mov	r4, lr
 800f4d8:	42a3      	cmp	r3, r4
 800f4da:	dd24      	ble.n	800f526 <_strtol_l.constprop.0+0xc6>
 800f4dc:	f1bc 0f00 	cmp.w	ip, #0
 800f4e0:	db1e      	blt.n	800f520 <_strtol_l.constprop.0+0xc0>
 800f4e2:	45b1      	cmp	r9, r6
 800f4e4:	d31c      	bcc.n	800f520 <_strtol_l.constprop.0+0xc0>
 800f4e6:	d101      	bne.n	800f4ec <_strtol_l.constprop.0+0x8c>
 800f4e8:	45a2      	cmp	sl, r4
 800f4ea:	db19      	blt.n	800f520 <_strtol_l.constprop.0+0xc0>
 800f4ec:	fb06 4603 	mla	r6, r6, r3, r4
 800f4f0:	f04f 0c01 	mov.w	ip, #1
 800f4f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f4f8:	e7e8      	b.n	800f4cc <_strtol_l.constprop.0+0x6c>
 800f4fa:	2c2b      	cmp	r4, #43	; 0x2b
 800f4fc:	bf04      	itt	eq
 800f4fe:	782c      	ldrbeq	r4, [r5, #0]
 800f500:	1cb5      	addeq	r5, r6, #2
 800f502:	e7ca      	b.n	800f49a <_strtol_l.constprop.0+0x3a>
 800f504:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f508:	f1be 0f19 	cmp.w	lr, #25
 800f50c:	d801      	bhi.n	800f512 <_strtol_l.constprop.0+0xb2>
 800f50e:	3c37      	subs	r4, #55	; 0x37
 800f510:	e7e2      	b.n	800f4d8 <_strtol_l.constprop.0+0x78>
 800f512:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f516:	f1be 0f19 	cmp.w	lr, #25
 800f51a:	d804      	bhi.n	800f526 <_strtol_l.constprop.0+0xc6>
 800f51c:	3c57      	subs	r4, #87	; 0x57
 800f51e:	e7db      	b.n	800f4d8 <_strtol_l.constprop.0+0x78>
 800f520:	f04f 3cff 	mov.w	ip, #4294967295
 800f524:	e7e6      	b.n	800f4f4 <_strtol_l.constprop.0+0x94>
 800f526:	f1bc 0f00 	cmp.w	ip, #0
 800f52a:	da05      	bge.n	800f538 <_strtol_l.constprop.0+0xd8>
 800f52c:	2322      	movs	r3, #34	; 0x22
 800f52e:	6003      	str	r3, [r0, #0]
 800f530:	4646      	mov	r6, r8
 800f532:	b942      	cbnz	r2, 800f546 <_strtol_l.constprop.0+0xe6>
 800f534:	4630      	mov	r0, r6
 800f536:	e79e      	b.n	800f476 <_strtol_l.constprop.0+0x16>
 800f538:	b107      	cbz	r7, 800f53c <_strtol_l.constprop.0+0xdc>
 800f53a:	4276      	negs	r6, r6
 800f53c:	2a00      	cmp	r2, #0
 800f53e:	d0f9      	beq.n	800f534 <_strtol_l.constprop.0+0xd4>
 800f540:	f1bc 0f00 	cmp.w	ip, #0
 800f544:	d000      	beq.n	800f548 <_strtol_l.constprop.0+0xe8>
 800f546:	1e69      	subs	r1, r5, #1
 800f548:	6011      	str	r1, [r2, #0]
 800f54a:	e7f3      	b.n	800f534 <_strtol_l.constprop.0+0xd4>
 800f54c:	2430      	movs	r4, #48	; 0x30
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d1b1      	bne.n	800f4b6 <_strtol_l.constprop.0+0x56>
 800f552:	2308      	movs	r3, #8
 800f554:	e7af      	b.n	800f4b6 <_strtol_l.constprop.0+0x56>
 800f556:	2c30      	cmp	r4, #48	; 0x30
 800f558:	d0a5      	beq.n	800f4a6 <_strtol_l.constprop.0+0x46>
 800f55a:	230a      	movs	r3, #10
 800f55c:	e7ab      	b.n	800f4b6 <_strtol_l.constprop.0+0x56>
 800f55e:	bf00      	nop
 800f560:	08011b49 	.word	0x08011b49

0800f564 <_strtol_r>:
 800f564:	f7ff bf7c 	b.w	800f460 <_strtol_l.constprop.0>

0800f568 <__swbuf_r>:
 800f568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f56a:	460e      	mov	r6, r1
 800f56c:	4614      	mov	r4, r2
 800f56e:	4605      	mov	r5, r0
 800f570:	b118      	cbz	r0, 800f57a <__swbuf_r+0x12>
 800f572:	6983      	ldr	r3, [r0, #24]
 800f574:	b90b      	cbnz	r3, 800f57a <__swbuf_r+0x12>
 800f576:	f000 f9f3 	bl	800f960 <__sinit>
 800f57a:	4b21      	ldr	r3, [pc, #132]	; (800f600 <__swbuf_r+0x98>)
 800f57c:	429c      	cmp	r4, r3
 800f57e:	d12b      	bne.n	800f5d8 <__swbuf_r+0x70>
 800f580:	686c      	ldr	r4, [r5, #4]
 800f582:	69a3      	ldr	r3, [r4, #24]
 800f584:	60a3      	str	r3, [r4, #8]
 800f586:	89a3      	ldrh	r3, [r4, #12]
 800f588:	071a      	lsls	r2, r3, #28
 800f58a:	d52f      	bpl.n	800f5ec <__swbuf_r+0x84>
 800f58c:	6923      	ldr	r3, [r4, #16]
 800f58e:	b36b      	cbz	r3, 800f5ec <__swbuf_r+0x84>
 800f590:	6923      	ldr	r3, [r4, #16]
 800f592:	6820      	ldr	r0, [r4, #0]
 800f594:	1ac0      	subs	r0, r0, r3
 800f596:	6963      	ldr	r3, [r4, #20]
 800f598:	b2f6      	uxtb	r6, r6
 800f59a:	4283      	cmp	r3, r0
 800f59c:	4637      	mov	r7, r6
 800f59e:	dc04      	bgt.n	800f5aa <__swbuf_r+0x42>
 800f5a0:	4621      	mov	r1, r4
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	f000 f948 	bl	800f838 <_fflush_r>
 800f5a8:	bb30      	cbnz	r0, 800f5f8 <__swbuf_r+0x90>
 800f5aa:	68a3      	ldr	r3, [r4, #8]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	60a3      	str	r3, [r4, #8]
 800f5b0:	6823      	ldr	r3, [r4, #0]
 800f5b2:	1c5a      	adds	r2, r3, #1
 800f5b4:	6022      	str	r2, [r4, #0]
 800f5b6:	701e      	strb	r6, [r3, #0]
 800f5b8:	6963      	ldr	r3, [r4, #20]
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	4283      	cmp	r3, r0
 800f5be:	d004      	beq.n	800f5ca <__swbuf_r+0x62>
 800f5c0:	89a3      	ldrh	r3, [r4, #12]
 800f5c2:	07db      	lsls	r3, r3, #31
 800f5c4:	d506      	bpl.n	800f5d4 <__swbuf_r+0x6c>
 800f5c6:	2e0a      	cmp	r6, #10
 800f5c8:	d104      	bne.n	800f5d4 <__swbuf_r+0x6c>
 800f5ca:	4621      	mov	r1, r4
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	f000 f933 	bl	800f838 <_fflush_r>
 800f5d2:	b988      	cbnz	r0, 800f5f8 <__swbuf_r+0x90>
 800f5d4:	4638      	mov	r0, r7
 800f5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5d8:	4b0a      	ldr	r3, [pc, #40]	; (800f604 <__swbuf_r+0x9c>)
 800f5da:	429c      	cmp	r4, r3
 800f5dc:	d101      	bne.n	800f5e2 <__swbuf_r+0x7a>
 800f5de:	68ac      	ldr	r4, [r5, #8]
 800f5e0:	e7cf      	b.n	800f582 <__swbuf_r+0x1a>
 800f5e2:	4b09      	ldr	r3, [pc, #36]	; (800f608 <__swbuf_r+0xa0>)
 800f5e4:	429c      	cmp	r4, r3
 800f5e6:	bf08      	it	eq
 800f5e8:	68ec      	ldreq	r4, [r5, #12]
 800f5ea:	e7ca      	b.n	800f582 <__swbuf_r+0x1a>
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	4628      	mov	r0, r5
 800f5f0:	f000 f81e 	bl	800f630 <__swsetup_r>
 800f5f4:	2800      	cmp	r0, #0
 800f5f6:	d0cb      	beq.n	800f590 <__swbuf_r+0x28>
 800f5f8:	f04f 37ff 	mov.w	r7, #4294967295
 800f5fc:	e7ea      	b.n	800f5d4 <__swbuf_r+0x6c>
 800f5fe:	bf00      	nop
 800f600:	08011c6c 	.word	0x08011c6c
 800f604:	08011c8c 	.word	0x08011c8c
 800f608:	08011c4c 	.word	0x08011c4c

0800f60c <_write_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4d07      	ldr	r5, [pc, #28]	; (800f62c <_write_r+0x20>)
 800f610:	4604      	mov	r4, r0
 800f612:	4608      	mov	r0, r1
 800f614:	4611      	mov	r1, r2
 800f616:	2200      	movs	r2, #0
 800f618:	602a      	str	r2, [r5, #0]
 800f61a:	461a      	mov	r2, r3
 800f61c:	f7f3 fdfd 	bl	800321a <_write>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	d102      	bne.n	800f62a <_write_r+0x1e>
 800f624:	682b      	ldr	r3, [r5, #0]
 800f626:	b103      	cbz	r3, 800f62a <_write_r+0x1e>
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	20002868 	.word	0x20002868

0800f630 <__swsetup_r>:
 800f630:	4b32      	ldr	r3, [pc, #200]	; (800f6fc <__swsetup_r+0xcc>)
 800f632:	b570      	push	{r4, r5, r6, lr}
 800f634:	681d      	ldr	r5, [r3, #0]
 800f636:	4606      	mov	r6, r0
 800f638:	460c      	mov	r4, r1
 800f63a:	b125      	cbz	r5, 800f646 <__swsetup_r+0x16>
 800f63c:	69ab      	ldr	r3, [r5, #24]
 800f63e:	b913      	cbnz	r3, 800f646 <__swsetup_r+0x16>
 800f640:	4628      	mov	r0, r5
 800f642:	f000 f98d 	bl	800f960 <__sinit>
 800f646:	4b2e      	ldr	r3, [pc, #184]	; (800f700 <__swsetup_r+0xd0>)
 800f648:	429c      	cmp	r4, r3
 800f64a:	d10f      	bne.n	800f66c <__swsetup_r+0x3c>
 800f64c:	686c      	ldr	r4, [r5, #4]
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f654:	0719      	lsls	r1, r3, #28
 800f656:	d42c      	bmi.n	800f6b2 <__swsetup_r+0x82>
 800f658:	06dd      	lsls	r5, r3, #27
 800f65a:	d411      	bmi.n	800f680 <__swsetup_r+0x50>
 800f65c:	2309      	movs	r3, #9
 800f65e:	6033      	str	r3, [r6, #0]
 800f660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f664:	81a3      	strh	r3, [r4, #12]
 800f666:	f04f 30ff 	mov.w	r0, #4294967295
 800f66a:	e03e      	b.n	800f6ea <__swsetup_r+0xba>
 800f66c:	4b25      	ldr	r3, [pc, #148]	; (800f704 <__swsetup_r+0xd4>)
 800f66e:	429c      	cmp	r4, r3
 800f670:	d101      	bne.n	800f676 <__swsetup_r+0x46>
 800f672:	68ac      	ldr	r4, [r5, #8]
 800f674:	e7eb      	b.n	800f64e <__swsetup_r+0x1e>
 800f676:	4b24      	ldr	r3, [pc, #144]	; (800f708 <__swsetup_r+0xd8>)
 800f678:	429c      	cmp	r4, r3
 800f67a:	bf08      	it	eq
 800f67c:	68ec      	ldreq	r4, [r5, #12]
 800f67e:	e7e6      	b.n	800f64e <__swsetup_r+0x1e>
 800f680:	0758      	lsls	r0, r3, #29
 800f682:	d512      	bpl.n	800f6aa <__swsetup_r+0x7a>
 800f684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f686:	b141      	cbz	r1, 800f69a <__swsetup_r+0x6a>
 800f688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f68c:	4299      	cmp	r1, r3
 800f68e:	d002      	beq.n	800f696 <__swsetup_r+0x66>
 800f690:	4630      	mov	r0, r6
 800f692:	f001 fad7 	bl	8010c44 <_free_r>
 800f696:	2300      	movs	r3, #0
 800f698:	6363      	str	r3, [r4, #52]	; 0x34
 800f69a:	89a3      	ldrh	r3, [r4, #12]
 800f69c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f6a0:	81a3      	strh	r3, [r4, #12]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	6063      	str	r3, [r4, #4]
 800f6a6:	6923      	ldr	r3, [r4, #16]
 800f6a8:	6023      	str	r3, [r4, #0]
 800f6aa:	89a3      	ldrh	r3, [r4, #12]
 800f6ac:	f043 0308 	orr.w	r3, r3, #8
 800f6b0:	81a3      	strh	r3, [r4, #12]
 800f6b2:	6923      	ldr	r3, [r4, #16]
 800f6b4:	b94b      	cbnz	r3, 800f6ca <__swsetup_r+0x9a>
 800f6b6:	89a3      	ldrh	r3, [r4, #12]
 800f6b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6c0:	d003      	beq.n	800f6ca <__swsetup_r+0x9a>
 800f6c2:	4621      	mov	r1, r4
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	f000 fd93 	bl	80101f0 <__smakebuf_r>
 800f6ca:	89a0      	ldrh	r0, [r4, #12]
 800f6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6d0:	f010 0301 	ands.w	r3, r0, #1
 800f6d4:	d00a      	beq.n	800f6ec <__swsetup_r+0xbc>
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	60a3      	str	r3, [r4, #8]
 800f6da:	6963      	ldr	r3, [r4, #20]
 800f6dc:	425b      	negs	r3, r3
 800f6de:	61a3      	str	r3, [r4, #24]
 800f6e0:	6923      	ldr	r3, [r4, #16]
 800f6e2:	b943      	cbnz	r3, 800f6f6 <__swsetup_r+0xc6>
 800f6e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6e8:	d1ba      	bne.n	800f660 <__swsetup_r+0x30>
 800f6ea:	bd70      	pop	{r4, r5, r6, pc}
 800f6ec:	0781      	lsls	r1, r0, #30
 800f6ee:	bf58      	it	pl
 800f6f0:	6963      	ldrpl	r3, [r4, #20]
 800f6f2:	60a3      	str	r3, [r4, #8]
 800f6f4:	e7f4      	b.n	800f6e0 <__swsetup_r+0xb0>
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	e7f7      	b.n	800f6ea <__swsetup_r+0xba>
 800f6fa:	bf00      	nop
 800f6fc:	20000010 	.word	0x20000010
 800f700:	08011c6c 	.word	0x08011c6c
 800f704:	08011c8c 	.word	0x08011c8c
 800f708:	08011c4c 	.word	0x08011c4c

0800f70c <_close_r>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	4d06      	ldr	r5, [pc, #24]	; (800f728 <_close_r+0x1c>)
 800f710:	2300      	movs	r3, #0
 800f712:	4604      	mov	r4, r0
 800f714:	4608      	mov	r0, r1
 800f716:	602b      	str	r3, [r5, #0]
 800f718:	f7f3 fd9b 	bl	8003252 <_close>
 800f71c:	1c43      	adds	r3, r0, #1
 800f71e:	d102      	bne.n	800f726 <_close_r+0x1a>
 800f720:	682b      	ldr	r3, [r5, #0]
 800f722:	b103      	cbz	r3, 800f726 <_close_r+0x1a>
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	bd38      	pop	{r3, r4, r5, pc}
 800f728:	20002868 	.word	0x20002868

0800f72c <__sflush_r>:
 800f72c:	898a      	ldrh	r2, [r1, #12]
 800f72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f732:	4605      	mov	r5, r0
 800f734:	0710      	lsls	r0, r2, #28
 800f736:	460c      	mov	r4, r1
 800f738:	d458      	bmi.n	800f7ec <__sflush_r+0xc0>
 800f73a:	684b      	ldr	r3, [r1, #4]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	dc05      	bgt.n	800f74c <__sflush_r+0x20>
 800f740:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f742:	2b00      	cmp	r3, #0
 800f744:	dc02      	bgt.n	800f74c <__sflush_r+0x20>
 800f746:	2000      	movs	r0, #0
 800f748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f74c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f74e:	2e00      	cmp	r6, #0
 800f750:	d0f9      	beq.n	800f746 <__sflush_r+0x1a>
 800f752:	2300      	movs	r3, #0
 800f754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f758:	682f      	ldr	r7, [r5, #0]
 800f75a:	602b      	str	r3, [r5, #0]
 800f75c:	d032      	beq.n	800f7c4 <__sflush_r+0x98>
 800f75e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	075a      	lsls	r2, r3, #29
 800f764:	d505      	bpl.n	800f772 <__sflush_r+0x46>
 800f766:	6863      	ldr	r3, [r4, #4]
 800f768:	1ac0      	subs	r0, r0, r3
 800f76a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f76c:	b10b      	cbz	r3, 800f772 <__sflush_r+0x46>
 800f76e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f770:	1ac0      	subs	r0, r0, r3
 800f772:	2300      	movs	r3, #0
 800f774:	4602      	mov	r2, r0
 800f776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f778:	6a21      	ldr	r1, [r4, #32]
 800f77a:	4628      	mov	r0, r5
 800f77c:	47b0      	blx	r6
 800f77e:	1c43      	adds	r3, r0, #1
 800f780:	89a3      	ldrh	r3, [r4, #12]
 800f782:	d106      	bne.n	800f792 <__sflush_r+0x66>
 800f784:	6829      	ldr	r1, [r5, #0]
 800f786:	291d      	cmp	r1, #29
 800f788:	d82c      	bhi.n	800f7e4 <__sflush_r+0xb8>
 800f78a:	4a2a      	ldr	r2, [pc, #168]	; (800f834 <__sflush_r+0x108>)
 800f78c:	40ca      	lsrs	r2, r1
 800f78e:	07d6      	lsls	r6, r2, #31
 800f790:	d528      	bpl.n	800f7e4 <__sflush_r+0xb8>
 800f792:	2200      	movs	r2, #0
 800f794:	6062      	str	r2, [r4, #4]
 800f796:	04d9      	lsls	r1, r3, #19
 800f798:	6922      	ldr	r2, [r4, #16]
 800f79a:	6022      	str	r2, [r4, #0]
 800f79c:	d504      	bpl.n	800f7a8 <__sflush_r+0x7c>
 800f79e:	1c42      	adds	r2, r0, #1
 800f7a0:	d101      	bne.n	800f7a6 <__sflush_r+0x7a>
 800f7a2:	682b      	ldr	r3, [r5, #0]
 800f7a4:	b903      	cbnz	r3, 800f7a8 <__sflush_r+0x7c>
 800f7a6:	6560      	str	r0, [r4, #84]	; 0x54
 800f7a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7aa:	602f      	str	r7, [r5, #0]
 800f7ac:	2900      	cmp	r1, #0
 800f7ae:	d0ca      	beq.n	800f746 <__sflush_r+0x1a>
 800f7b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7b4:	4299      	cmp	r1, r3
 800f7b6:	d002      	beq.n	800f7be <__sflush_r+0x92>
 800f7b8:	4628      	mov	r0, r5
 800f7ba:	f001 fa43 	bl	8010c44 <_free_r>
 800f7be:	2000      	movs	r0, #0
 800f7c0:	6360      	str	r0, [r4, #52]	; 0x34
 800f7c2:	e7c1      	b.n	800f748 <__sflush_r+0x1c>
 800f7c4:	6a21      	ldr	r1, [r4, #32]
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	47b0      	blx	r6
 800f7cc:	1c41      	adds	r1, r0, #1
 800f7ce:	d1c7      	bne.n	800f760 <__sflush_r+0x34>
 800f7d0:	682b      	ldr	r3, [r5, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d0c4      	beq.n	800f760 <__sflush_r+0x34>
 800f7d6:	2b1d      	cmp	r3, #29
 800f7d8:	d001      	beq.n	800f7de <__sflush_r+0xb2>
 800f7da:	2b16      	cmp	r3, #22
 800f7dc:	d101      	bne.n	800f7e2 <__sflush_r+0xb6>
 800f7de:	602f      	str	r7, [r5, #0]
 800f7e0:	e7b1      	b.n	800f746 <__sflush_r+0x1a>
 800f7e2:	89a3      	ldrh	r3, [r4, #12]
 800f7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7e8:	81a3      	strh	r3, [r4, #12]
 800f7ea:	e7ad      	b.n	800f748 <__sflush_r+0x1c>
 800f7ec:	690f      	ldr	r7, [r1, #16]
 800f7ee:	2f00      	cmp	r7, #0
 800f7f0:	d0a9      	beq.n	800f746 <__sflush_r+0x1a>
 800f7f2:	0793      	lsls	r3, r2, #30
 800f7f4:	680e      	ldr	r6, [r1, #0]
 800f7f6:	bf08      	it	eq
 800f7f8:	694b      	ldreq	r3, [r1, #20]
 800f7fa:	600f      	str	r7, [r1, #0]
 800f7fc:	bf18      	it	ne
 800f7fe:	2300      	movne	r3, #0
 800f800:	eba6 0807 	sub.w	r8, r6, r7
 800f804:	608b      	str	r3, [r1, #8]
 800f806:	f1b8 0f00 	cmp.w	r8, #0
 800f80a:	dd9c      	ble.n	800f746 <__sflush_r+0x1a>
 800f80c:	6a21      	ldr	r1, [r4, #32]
 800f80e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f810:	4643      	mov	r3, r8
 800f812:	463a      	mov	r2, r7
 800f814:	4628      	mov	r0, r5
 800f816:	47b0      	blx	r6
 800f818:	2800      	cmp	r0, #0
 800f81a:	dc06      	bgt.n	800f82a <__sflush_r+0xfe>
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f822:	81a3      	strh	r3, [r4, #12]
 800f824:	f04f 30ff 	mov.w	r0, #4294967295
 800f828:	e78e      	b.n	800f748 <__sflush_r+0x1c>
 800f82a:	4407      	add	r7, r0
 800f82c:	eba8 0800 	sub.w	r8, r8, r0
 800f830:	e7e9      	b.n	800f806 <__sflush_r+0xda>
 800f832:	bf00      	nop
 800f834:	20400001 	.word	0x20400001

0800f838 <_fflush_r>:
 800f838:	b538      	push	{r3, r4, r5, lr}
 800f83a:	690b      	ldr	r3, [r1, #16]
 800f83c:	4605      	mov	r5, r0
 800f83e:	460c      	mov	r4, r1
 800f840:	b913      	cbnz	r3, 800f848 <_fflush_r+0x10>
 800f842:	2500      	movs	r5, #0
 800f844:	4628      	mov	r0, r5
 800f846:	bd38      	pop	{r3, r4, r5, pc}
 800f848:	b118      	cbz	r0, 800f852 <_fflush_r+0x1a>
 800f84a:	6983      	ldr	r3, [r0, #24]
 800f84c:	b90b      	cbnz	r3, 800f852 <_fflush_r+0x1a>
 800f84e:	f000 f887 	bl	800f960 <__sinit>
 800f852:	4b14      	ldr	r3, [pc, #80]	; (800f8a4 <_fflush_r+0x6c>)
 800f854:	429c      	cmp	r4, r3
 800f856:	d11b      	bne.n	800f890 <_fflush_r+0x58>
 800f858:	686c      	ldr	r4, [r5, #4]
 800f85a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d0ef      	beq.n	800f842 <_fflush_r+0xa>
 800f862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f864:	07d0      	lsls	r0, r2, #31
 800f866:	d404      	bmi.n	800f872 <_fflush_r+0x3a>
 800f868:	0599      	lsls	r1, r3, #22
 800f86a:	d402      	bmi.n	800f872 <_fflush_r+0x3a>
 800f86c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f86e:	f000 fc84 	bl	801017a <__retarget_lock_acquire_recursive>
 800f872:	4628      	mov	r0, r5
 800f874:	4621      	mov	r1, r4
 800f876:	f7ff ff59 	bl	800f72c <__sflush_r>
 800f87a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f87c:	07da      	lsls	r2, r3, #31
 800f87e:	4605      	mov	r5, r0
 800f880:	d4e0      	bmi.n	800f844 <_fflush_r+0xc>
 800f882:	89a3      	ldrh	r3, [r4, #12]
 800f884:	059b      	lsls	r3, r3, #22
 800f886:	d4dd      	bmi.n	800f844 <_fflush_r+0xc>
 800f888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f88a:	f000 fc77 	bl	801017c <__retarget_lock_release_recursive>
 800f88e:	e7d9      	b.n	800f844 <_fflush_r+0xc>
 800f890:	4b05      	ldr	r3, [pc, #20]	; (800f8a8 <_fflush_r+0x70>)
 800f892:	429c      	cmp	r4, r3
 800f894:	d101      	bne.n	800f89a <_fflush_r+0x62>
 800f896:	68ac      	ldr	r4, [r5, #8]
 800f898:	e7df      	b.n	800f85a <_fflush_r+0x22>
 800f89a:	4b04      	ldr	r3, [pc, #16]	; (800f8ac <_fflush_r+0x74>)
 800f89c:	429c      	cmp	r4, r3
 800f89e:	bf08      	it	eq
 800f8a0:	68ec      	ldreq	r4, [r5, #12]
 800f8a2:	e7da      	b.n	800f85a <_fflush_r+0x22>
 800f8a4:	08011c6c 	.word	0x08011c6c
 800f8a8:	08011c8c 	.word	0x08011c8c
 800f8ac:	08011c4c 	.word	0x08011c4c

0800f8b0 <std>:
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	b510      	push	{r4, lr}
 800f8b4:	4604      	mov	r4, r0
 800f8b6:	e9c0 3300 	strd	r3, r3, [r0]
 800f8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8be:	6083      	str	r3, [r0, #8]
 800f8c0:	8181      	strh	r1, [r0, #12]
 800f8c2:	6643      	str	r3, [r0, #100]	; 0x64
 800f8c4:	81c2      	strh	r2, [r0, #14]
 800f8c6:	6183      	str	r3, [r0, #24]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	2208      	movs	r2, #8
 800f8cc:	305c      	adds	r0, #92	; 0x5c
 800f8ce:	f7fe fc5d 	bl	800e18c <memset>
 800f8d2:	4b05      	ldr	r3, [pc, #20]	; (800f8e8 <std+0x38>)
 800f8d4:	6263      	str	r3, [r4, #36]	; 0x24
 800f8d6:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <std+0x3c>)
 800f8d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8da:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <std+0x40>)
 800f8dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8de:	4b05      	ldr	r3, [pc, #20]	; (800f8f4 <std+0x44>)
 800f8e0:	6224      	str	r4, [r4, #32]
 800f8e2:	6323      	str	r3, [r4, #48]	; 0x30
 800f8e4:	bd10      	pop	{r4, pc}
 800f8e6:	bf00      	nop
 800f8e8:	0800e75d 	.word	0x0800e75d
 800f8ec:	0800e77f 	.word	0x0800e77f
 800f8f0:	0800e7b7 	.word	0x0800e7b7
 800f8f4:	0800e7db 	.word	0x0800e7db

0800f8f8 <_cleanup_r>:
 800f8f8:	4901      	ldr	r1, [pc, #4]	; (800f900 <_cleanup_r+0x8>)
 800f8fa:	f000 b8af 	b.w	800fa5c <_fwalk_reent>
 800f8fe:	bf00      	nop
 800f900:	0800f839 	.word	0x0800f839

0800f904 <__sfmoreglue>:
 800f904:	b570      	push	{r4, r5, r6, lr}
 800f906:	2268      	movs	r2, #104	; 0x68
 800f908:	1e4d      	subs	r5, r1, #1
 800f90a:	4355      	muls	r5, r2
 800f90c:	460e      	mov	r6, r1
 800f90e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f912:	f001 fa03 	bl	8010d1c <_malloc_r>
 800f916:	4604      	mov	r4, r0
 800f918:	b140      	cbz	r0, 800f92c <__sfmoreglue+0x28>
 800f91a:	2100      	movs	r1, #0
 800f91c:	e9c0 1600 	strd	r1, r6, [r0]
 800f920:	300c      	adds	r0, #12
 800f922:	60a0      	str	r0, [r4, #8]
 800f924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f928:	f7fe fc30 	bl	800e18c <memset>
 800f92c:	4620      	mov	r0, r4
 800f92e:	bd70      	pop	{r4, r5, r6, pc}

0800f930 <__sfp_lock_acquire>:
 800f930:	4801      	ldr	r0, [pc, #4]	; (800f938 <__sfp_lock_acquire+0x8>)
 800f932:	f000 bc22 	b.w	801017a <__retarget_lock_acquire_recursive>
 800f936:	bf00      	nop
 800f938:	2000285d 	.word	0x2000285d

0800f93c <__sfp_lock_release>:
 800f93c:	4801      	ldr	r0, [pc, #4]	; (800f944 <__sfp_lock_release+0x8>)
 800f93e:	f000 bc1d 	b.w	801017c <__retarget_lock_release_recursive>
 800f942:	bf00      	nop
 800f944:	2000285d 	.word	0x2000285d

0800f948 <__sinit_lock_acquire>:
 800f948:	4801      	ldr	r0, [pc, #4]	; (800f950 <__sinit_lock_acquire+0x8>)
 800f94a:	f000 bc16 	b.w	801017a <__retarget_lock_acquire_recursive>
 800f94e:	bf00      	nop
 800f950:	2000285e 	.word	0x2000285e

0800f954 <__sinit_lock_release>:
 800f954:	4801      	ldr	r0, [pc, #4]	; (800f95c <__sinit_lock_release+0x8>)
 800f956:	f000 bc11 	b.w	801017c <__retarget_lock_release_recursive>
 800f95a:	bf00      	nop
 800f95c:	2000285e 	.word	0x2000285e

0800f960 <__sinit>:
 800f960:	b510      	push	{r4, lr}
 800f962:	4604      	mov	r4, r0
 800f964:	f7ff fff0 	bl	800f948 <__sinit_lock_acquire>
 800f968:	69a3      	ldr	r3, [r4, #24]
 800f96a:	b11b      	cbz	r3, 800f974 <__sinit+0x14>
 800f96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f970:	f7ff bff0 	b.w	800f954 <__sinit_lock_release>
 800f974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f978:	6523      	str	r3, [r4, #80]	; 0x50
 800f97a:	4b13      	ldr	r3, [pc, #76]	; (800f9c8 <__sinit+0x68>)
 800f97c:	4a13      	ldr	r2, [pc, #76]	; (800f9cc <__sinit+0x6c>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	62a2      	str	r2, [r4, #40]	; 0x28
 800f982:	42a3      	cmp	r3, r4
 800f984:	bf04      	itt	eq
 800f986:	2301      	moveq	r3, #1
 800f988:	61a3      	streq	r3, [r4, #24]
 800f98a:	4620      	mov	r0, r4
 800f98c:	f000 f820 	bl	800f9d0 <__sfp>
 800f990:	6060      	str	r0, [r4, #4]
 800f992:	4620      	mov	r0, r4
 800f994:	f000 f81c 	bl	800f9d0 <__sfp>
 800f998:	60a0      	str	r0, [r4, #8]
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 f818 	bl	800f9d0 <__sfp>
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	60e0      	str	r0, [r4, #12]
 800f9a4:	2104      	movs	r1, #4
 800f9a6:	6860      	ldr	r0, [r4, #4]
 800f9a8:	f7ff ff82 	bl	800f8b0 <std>
 800f9ac:	68a0      	ldr	r0, [r4, #8]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	2109      	movs	r1, #9
 800f9b2:	f7ff ff7d 	bl	800f8b0 <std>
 800f9b6:	68e0      	ldr	r0, [r4, #12]
 800f9b8:	2202      	movs	r2, #2
 800f9ba:	2112      	movs	r1, #18
 800f9bc:	f7ff ff78 	bl	800f8b0 <std>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	61a3      	str	r3, [r4, #24]
 800f9c4:	e7d2      	b.n	800f96c <__sinit+0xc>
 800f9c6:	bf00      	nop
 800f9c8:	08011adc 	.word	0x08011adc
 800f9cc:	0800f8f9 	.word	0x0800f8f9

0800f9d0 <__sfp>:
 800f9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d2:	4607      	mov	r7, r0
 800f9d4:	f7ff ffac 	bl	800f930 <__sfp_lock_acquire>
 800f9d8:	4b1e      	ldr	r3, [pc, #120]	; (800fa54 <__sfp+0x84>)
 800f9da:	681e      	ldr	r6, [r3, #0]
 800f9dc:	69b3      	ldr	r3, [r6, #24]
 800f9de:	b913      	cbnz	r3, 800f9e6 <__sfp+0x16>
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	f7ff ffbd 	bl	800f960 <__sinit>
 800f9e6:	3648      	adds	r6, #72	; 0x48
 800f9e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9ec:	3b01      	subs	r3, #1
 800f9ee:	d503      	bpl.n	800f9f8 <__sfp+0x28>
 800f9f0:	6833      	ldr	r3, [r6, #0]
 800f9f2:	b30b      	cbz	r3, 800fa38 <__sfp+0x68>
 800f9f4:	6836      	ldr	r6, [r6, #0]
 800f9f6:	e7f7      	b.n	800f9e8 <__sfp+0x18>
 800f9f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f9fc:	b9d5      	cbnz	r5, 800fa34 <__sfp+0x64>
 800f9fe:	4b16      	ldr	r3, [pc, #88]	; (800fa58 <__sfp+0x88>)
 800fa00:	60e3      	str	r3, [r4, #12]
 800fa02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa06:	6665      	str	r5, [r4, #100]	; 0x64
 800fa08:	f000 fbb6 	bl	8010178 <__retarget_lock_init_recursive>
 800fa0c:	f7ff ff96 	bl	800f93c <__sfp_lock_release>
 800fa10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa18:	6025      	str	r5, [r4, #0]
 800fa1a:	61a5      	str	r5, [r4, #24]
 800fa1c:	2208      	movs	r2, #8
 800fa1e:	4629      	mov	r1, r5
 800fa20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa24:	f7fe fbb2 	bl	800e18c <memset>
 800fa28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa30:	4620      	mov	r0, r4
 800fa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa34:	3468      	adds	r4, #104	; 0x68
 800fa36:	e7d9      	b.n	800f9ec <__sfp+0x1c>
 800fa38:	2104      	movs	r1, #4
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	f7ff ff62 	bl	800f904 <__sfmoreglue>
 800fa40:	4604      	mov	r4, r0
 800fa42:	6030      	str	r0, [r6, #0]
 800fa44:	2800      	cmp	r0, #0
 800fa46:	d1d5      	bne.n	800f9f4 <__sfp+0x24>
 800fa48:	f7ff ff78 	bl	800f93c <__sfp_lock_release>
 800fa4c:	230c      	movs	r3, #12
 800fa4e:	603b      	str	r3, [r7, #0]
 800fa50:	e7ee      	b.n	800fa30 <__sfp+0x60>
 800fa52:	bf00      	nop
 800fa54:	08011adc 	.word	0x08011adc
 800fa58:	ffff0001 	.word	0xffff0001

0800fa5c <_fwalk_reent>:
 800fa5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa60:	4606      	mov	r6, r0
 800fa62:	4688      	mov	r8, r1
 800fa64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa68:	2700      	movs	r7, #0
 800fa6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa6e:	f1b9 0901 	subs.w	r9, r9, #1
 800fa72:	d505      	bpl.n	800fa80 <_fwalk_reent+0x24>
 800fa74:	6824      	ldr	r4, [r4, #0]
 800fa76:	2c00      	cmp	r4, #0
 800fa78:	d1f7      	bne.n	800fa6a <_fwalk_reent+0xe>
 800fa7a:	4638      	mov	r0, r7
 800fa7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa80:	89ab      	ldrh	r3, [r5, #12]
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	d907      	bls.n	800fa96 <_fwalk_reent+0x3a>
 800fa86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	d003      	beq.n	800fa96 <_fwalk_reent+0x3a>
 800fa8e:	4629      	mov	r1, r5
 800fa90:	4630      	mov	r0, r6
 800fa92:	47c0      	blx	r8
 800fa94:	4307      	orrs	r7, r0
 800fa96:	3568      	adds	r5, #104	; 0x68
 800fa98:	e7e9      	b.n	800fa6e <_fwalk_reent+0x12>

0800fa9a <rshift>:
 800fa9a:	6903      	ldr	r3, [r0, #16]
 800fa9c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800faa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faa4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800faa8:	f100 0414 	add.w	r4, r0, #20
 800faac:	dd45      	ble.n	800fb3a <rshift+0xa0>
 800faae:	f011 011f 	ands.w	r1, r1, #31
 800fab2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fab6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800faba:	d10c      	bne.n	800fad6 <rshift+0x3c>
 800fabc:	f100 0710 	add.w	r7, r0, #16
 800fac0:	4629      	mov	r1, r5
 800fac2:	42b1      	cmp	r1, r6
 800fac4:	d334      	bcc.n	800fb30 <rshift+0x96>
 800fac6:	1a9b      	subs	r3, r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	1eea      	subs	r2, r5, #3
 800facc:	4296      	cmp	r6, r2
 800face:	bf38      	it	cc
 800fad0:	2300      	movcc	r3, #0
 800fad2:	4423      	add	r3, r4
 800fad4:	e015      	b.n	800fb02 <rshift+0x68>
 800fad6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fada:	f1c1 0820 	rsb	r8, r1, #32
 800fade:	40cf      	lsrs	r7, r1
 800fae0:	f105 0e04 	add.w	lr, r5, #4
 800fae4:	46a1      	mov	r9, r4
 800fae6:	4576      	cmp	r6, lr
 800fae8:	46f4      	mov	ip, lr
 800faea:	d815      	bhi.n	800fb18 <rshift+0x7e>
 800faec:	1a9a      	subs	r2, r3, r2
 800faee:	0092      	lsls	r2, r2, #2
 800faf0:	3a04      	subs	r2, #4
 800faf2:	3501      	adds	r5, #1
 800faf4:	42ae      	cmp	r6, r5
 800faf6:	bf38      	it	cc
 800faf8:	2200      	movcc	r2, #0
 800fafa:	18a3      	adds	r3, r4, r2
 800fafc:	50a7      	str	r7, [r4, r2]
 800fafe:	b107      	cbz	r7, 800fb02 <rshift+0x68>
 800fb00:	3304      	adds	r3, #4
 800fb02:	1b1a      	subs	r2, r3, r4
 800fb04:	42a3      	cmp	r3, r4
 800fb06:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb0a:	bf08      	it	eq
 800fb0c:	2300      	moveq	r3, #0
 800fb0e:	6102      	str	r2, [r0, #16]
 800fb10:	bf08      	it	eq
 800fb12:	6143      	streq	r3, [r0, #20]
 800fb14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb18:	f8dc c000 	ldr.w	ip, [ip]
 800fb1c:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb20:	ea4c 0707 	orr.w	r7, ip, r7
 800fb24:	f849 7b04 	str.w	r7, [r9], #4
 800fb28:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb2c:	40cf      	lsrs	r7, r1
 800fb2e:	e7da      	b.n	800fae6 <rshift+0x4c>
 800fb30:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb34:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb38:	e7c3      	b.n	800fac2 <rshift+0x28>
 800fb3a:	4623      	mov	r3, r4
 800fb3c:	e7e1      	b.n	800fb02 <rshift+0x68>

0800fb3e <__hexdig_fun>:
 800fb3e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fb42:	2b09      	cmp	r3, #9
 800fb44:	d802      	bhi.n	800fb4c <__hexdig_fun+0xe>
 800fb46:	3820      	subs	r0, #32
 800fb48:	b2c0      	uxtb	r0, r0
 800fb4a:	4770      	bx	lr
 800fb4c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fb50:	2b05      	cmp	r3, #5
 800fb52:	d801      	bhi.n	800fb58 <__hexdig_fun+0x1a>
 800fb54:	3847      	subs	r0, #71	; 0x47
 800fb56:	e7f7      	b.n	800fb48 <__hexdig_fun+0xa>
 800fb58:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fb5c:	2b05      	cmp	r3, #5
 800fb5e:	d801      	bhi.n	800fb64 <__hexdig_fun+0x26>
 800fb60:	3827      	subs	r0, #39	; 0x27
 800fb62:	e7f1      	b.n	800fb48 <__hexdig_fun+0xa>
 800fb64:	2000      	movs	r0, #0
 800fb66:	4770      	bx	lr

0800fb68 <__gethex>:
 800fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6c:	ed2d 8b02 	vpush	{d8}
 800fb70:	b089      	sub	sp, #36	; 0x24
 800fb72:	ee08 0a10 	vmov	s16, r0
 800fb76:	9304      	str	r3, [sp, #16]
 800fb78:	4bb4      	ldr	r3, [pc, #720]	; (800fe4c <__gethex+0x2e4>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	9301      	str	r3, [sp, #4]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	468b      	mov	fp, r1
 800fb82:	4690      	mov	r8, r2
 800fb84:	f7f0 fb24 	bl	80001d0 <strlen>
 800fb88:	9b01      	ldr	r3, [sp, #4]
 800fb8a:	f8db 2000 	ldr.w	r2, [fp]
 800fb8e:	4403      	add	r3, r0
 800fb90:	4682      	mov	sl, r0
 800fb92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fb96:	9305      	str	r3, [sp, #20]
 800fb98:	1c93      	adds	r3, r2, #2
 800fb9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fb9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fba2:	32fe      	adds	r2, #254	; 0xfe
 800fba4:	18d1      	adds	r1, r2, r3
 800fba6:	461f      	mov	r7, r3
 800fba8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbac:	9100      	str	r1, [sp, #0]
 800fbae:	2830      	cmp	r0, #48	; 0x30
 800fbb0:	d0f8      	beq.n	800fba4 <__gethex+0x3c>
 800fbb2:	f7ff ffc4 	bl	800fb3e <__hexdig_fun>
 800fbb6:	4604      	mov	r4, r0
 800fbb8:	2800      	cmp	r0, #0
 800fbba:	d13a      	bne.n	800fc32 <__gethex+0xca>
 800fbbc:	9901      	ldr	r1, [sp, #4]
 800fbbe:	4652      	mov	r2, sl
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	f7fe fe0e 	bl	800e7e2 <strncmp>
 800fbc6:	4605      	mov	r5, r0
 800fbc8:	2800      	cmp	r0, #0
 800fbca:	d168      	bne.n	800fc9e <__gethex+0x136>
 800fbcc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fbd0:	eb07 060a 	add.w	r6, r7, sl
 800fbd4:	f7ff ffb3 	bl	800fb3e <__hexdig_fun>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d062      	beq.n	800fca2 <__gethex+0x13a>
 800fbdc:	4633      	mov	r3, r6
 800fbde:	7818      	ldrb	r0, [r3, #0]
 800fbe0:	2830      	cmp	r0, #48	; 0x30
 800fbe2:	461f      	mov	r7, r3
 800fbe4:	f103 0301 	add.w	r3, r3, #1
 800fbe8:	d0f9      	beq.n	800fbde <__gethex+0x76>
 800fbea:	f7ff ffa8 	bl	800fb3e <__hexdig_fun>
 800fbee:	2301      	movs	r3, #1
 800fbf0:	fab0 f480 	clz	r4, r0
 800fbf4:	0964      	lsrs	r4, r4, #5
 800fbf6:	4635      	mov	r5, r6
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	463a      	mov	r2, r7
 800fbfc:	4616      	mov	r6, r2
 800fbfe:	3201      	adds	r2, #1
 800fc00:	7830      	ldrb	r0, [r6, #0]
 800fc02:	f7ff ff9c 	bl	800fb3e <__hexdig_fun>
 800fc06:	2800      	cmp	r0, #0
 800fc08:	d1f8      	bne.n	800fbfc <__gethex+0x94>
 800fc0a:	9901      	ldr	r1, [sp, #4]
 800fc0c:	4652      	mov	r2, sl
 800fc0e:	4630      	mov	r0, r6
 800fc10:	f7fe fde7 	bl	800e7e2 <strncmp>
 800fc14:	b980      	cbnz	r0, 800fc38 <__gethex+0xd0>
 800fc16:	b94d      	cbnz	r5, 800fc2c <__gethex+0xc4>
 800fc18:	eb06 050a 	add.w	r5, r6, sl
 800fc1c:	462a      	mov	r2, r5
 800fc1e:	4616      	mov	r6, r2
 800fc20:	3201      	adds	r2, #1
 800fc22:	7830      	ldrb	r0, [r6, #0]
 800fc24:	f7ff ff8b 	bl	800fb3e <__hexdig_fun>
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	d1f8      	bne.n	800fc1e <__gethex+0xb6>
 800fc2c:	1bad      	subs	r5, r5, r6
 800fc2e:	00ad      	lsls	r5, r5, #2
 800fc30:	e004      	b.n	800fc3c <__gethex+0xd4>
 800fc32:	2400      	movs	r4, #0
 800fc34:	4625      	mov	r5, r4
 800fc36:	e7e0      	b.n	800fbfa <__gethex+0x92>
 800fc38:	2d00      	cmp	r5, #0
 800fc3a:	d1f7      	bne.n	800fc2c <__gethex+0xc4>
 800fc3c:	7833      	ldrb	r3, [r6, #0]
 800fc3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc42:	2b50      	cmp	r3, #80	; 0x50
 800fc44:	d13b      	bne.n	800fcbe <__gethex+0x156>
 800fc46:	7873      	ldrb	r3, [r6, #1]
 800fc48:	2b2b      	cmp	r3, #43	; 0x2b
 800fc4a:	d02c      	beq.n	800fca6 <__gethex+0x13e>
 800fc4c:	2b2d      	cmp	r3, #45	; 0x2d
 800fc4e:	d02e      	beq.n	800fcae <__gethex+0x146>
 800fc50:	1c71      	adds	r1, r6, #1
 800fc52:	f04f 0900 	mov.w	r9, #0
 800fc56:	7808      	ldrb	r0, [r1, #0]
 800fc58:	f7ff ff71 	bl	800fb3e <__hexdig_fun>
 800fc5c:	1e43      	subs	r3, r0, #1
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	2b18      	cmp	r3, #24
 800fc62:	d82c      	bhi.n	800fcbe <__gethex+0x156>
 800fc64:	f1a0 0210 	sub.w	r2, r0, #16
 800fc68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc6c:	f7ff ff67 	bl	800fb3e <__hexdig_fun>
 800fc70:	1e43      	subs	r3, r0, #1
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	2b18      	cmp	r3, #24
 800fc76:	d91d      	bls.n	800fcb4 <__gethex+0x14c>
 800fc78:	f1b9 0f00 	cmp.w	r9, #0
 800fc7c:	d000      	beq.n	800fc80 <__gethex+0x118>
 800fc7e:	4252      	negs	r2, r2
 800fc80:	4415      	add	r5, r2
 800fc82:	f8cb 1000 	str.w	r1, [fp]
 800fc86:	b1e4      	cbz	r4, 800fcc2 <__gethex+0x15a>
 800fc88:	9b00      	ldr	r3, [sp, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	bf14      	ite	ne
 800fc8e:	2700      	movne	r7, #0
 800fc90:	2706      	moveq	r7, #6
 800fc92:	4638      	mov	r0, r7
 800fc94:	b009      	add	sp, #36	; 0x24
 800fc96:	ecbd 8b02 	vpop	{d8}
 800fc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9e:	463e      	mov	r6, r7
 800fca0:	4625      	mov	r5, r4
 800fca2:	2401      	movs	r4, #1
 800fca4:	e7ca      	b.n	800fc3c <__gethex+0xd4>
 800fca6:	f04f 0900 	mov.w	r9, #0
 800fcaa:	1cb1      	adds	r1, r6, #2
 800fcac:	e7d3      	b.n	800fc56 <__gethex+0xee>
 800fcae:	f04f 0901 	mov.w	r9, #1
 800fcb2:	e7fa      	b.n	800fcaa <__gethex+0x142>
 800fcb4:	230a      	movs	r3, #10
 800fcb6:	fb03 0202 	mla	r2, r3, r2, r0
 800fcba:	3a10      	subs	r2, #16
 800fcbc:	e7d4      	b.n	800fc68 <__gethex+0x100>
 800fcbe:	4631      	mov	r1, r6
 800fcc0:	e7df      	b.n	800fc82 <__gethex+0x11a>
 800fcc2:	1bf3      	subs	r3, r6, r7
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	4621      	mov	r1, r4
 800fcc8:	2b07      	cmp	r3, #7
 800fcca:	dc0b      	bgt.n	800fce4 <__gethex+0x17c>
 800fccc:	ee18 0a10 	vmov	r0, s16
 800fcd0:	f000 fae0 	bl	8010294 <_Balloc>
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	b940      	cbnz	r0, 800fcea <__gethex+0x182>
 800fcd8:	4b5d      	ldr	r3, [pc, #372]	; (800fe50 <__gethex+0x2e8>)
 800fcda:	4602      	mov	r2, r0
 800fcdc:	21de      	movs	r1, #222	; 0xde
 800fcde:	485d      	ldr	r0, [pc, #372]	; (800fe54 <__gethex+0x2ec>)
 800fce0:	f001 fbb8 	bl	8011454 <__assert_func>
 800fce4:	3101      	adds	r1, #1
 800fce6:	105b      	asrs	r3, r3, #1
 800fce8:	e7ee      	b.n	800fcc8 <__gethex+0x160>
 800fcea:	f100 0914 	add.w	r9, r0, #20
 800fcee:	f04f 0b00 	mov.w	fp, #0
 800fcf2:	f1ca 0301 	rsb	r3, sl, #1
 800fcf6:	f8cd 9008 	str.w	r9, [sp, #8]
 800fcfa:	f8cd b000 	str.w	fp, [sp]
 800fcfe:	9306      	str	r3, [sp, #24]
 800fd00:	42b7      	cmp	r7, r6
 800fd02:	d340      	bcc.n	800fd86 <__gethex+0x21e>
 800fd04:	9802      	ldr	r0, [sp, #8]
 800fd06:	9b00      	ldr	r3, [sp, #0]
 800fd08:	f840 3b04 	str.w	r3, [r0], #4
 800fd0c:	eba0 0009 	sub.w	r0, r0, r9
 800fd10:	1080      	asrs	r0, r0, #2
 800fd12:	0146      	lsls	r6, r0, #5
 800fd14:	6120      	str	r0, [r4, #16]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f000 fbae 	bl	8010478 <__hi0bits>
 800fd1c:	1a30      	subs	r0, r6, r0
 800fd1e:	f8d8 6000 	ldr.w	r6, [r8]
 800fd22:	42b0      	cmp	r0, r6
 800fd24:	dd63      	ble.n	800fdee <__gethex+0x286>
 800fd26:	1b87      	subs	r7, r0, r6
 800fd28:	4639      	mov	r1, r7
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 ff52 	bl	8010bd4 <__any_on>
 800fd30:	4682      	mov	sl, r0
 800fd32:	b1a8      	cbz	r0, 800fd60 <__gethex+0x1f8>
 800fd34:	1e7b      	subs	r3, r7, #1
 800fd36:	1159      	asrs	r1, r3, #5
 800fd38:	f003 021f 	and.w	r2, r3, #31
 800fd3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fd40:	f04f 0a01 	mov.w	sl, #1
 800fd44:	fa0a f202 	lsl.w	r2, sl, r2
 800fd48:	420a      	tst	r2, r1
 800fd4a:	d009      	beq.n	800fd60 <__gethex+0x1f8>
 800fd4c:	4553      	cmp	r3, sl
 800fd4e:	dd05      	ble.n	800fd5c <__gethex+0x1f4>
 800fd50:	1eb9      	subs	r1, r7, #2
 800fd52:	4620      	mov	r0, r4
 800fd54:	f000 ff3e 	bl	8010bd4 <__any_on>
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d145      	bne.n	800fde8 <__gethex+0x280>
 800fd5c:	f04f 0a02 	mov.w	sl, #2
 800fd60:	4639      	mov	r1, r7
 800fd62:	4620      	mov	r0, r4
 800fd64:	f7ff fe99 	bl	800fa9a <rshift>
 800fd68:	443d      	add	r5, r7
 800fd6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd6e:	42ab      	cmp	r3, r5
 800fd70:	da4c      	bge.n	800fe0c <__gethex+0x2a4>
 800fd72:	ee18 0a10 	vmov	r0, s16
 800fd76:	4621      	mov	r1, r4
 800fd78:	f000 facc 	bl	8010314 <_Bfree>
 800fd7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd7e:	2300      	movs	r3, #0
 800fd80:	6013      	str	r3, [r2, #0]
 800fd82:	27a3      	movs	r7, #163	; 0xa3
 800fd84:	e785      	b.n	800fc92 <__gethex+0x12a>
 800fd86:	1e73      	subs	r3, r6, #1
 800fd88:	9a05      	ldr	r2, [sp, #20]
 800fd8a:	9303      	str	r3, [sp, #12]
 800fd8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d019      	beq.n	800fdc8 <__gethex+0x260>
 800fd94:	f1bb 0f20 	cmp.w	fp, #32
 800fd98:	d107      	bne.n	800fdaa <__gethex+0x242>
 800fd9a:	9b02      	ldr	r3, [sp, #8]
 800fd9c:	9a00      	ldr	r2, [sp, #0]
 800fd9e:	f843 2b04 	str.w	r2, [r3], #4
 800fda2:	9302      	str	r3, [sp, #8]
 800fda4:	2300      	movs	r3, #0
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	469b      	mov	fp, r3
 800fdaa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fdae:	f7ff fec6 	bl	800fb3e <__hexdig_fun>
 800fdb2:	9b00      	ldr	r3, [sp, #0]
 800fdb4:	f000 000f 	and.w	r0, r0, #15
 800fdb8:	fa00 f00b 	lsl.w	r0, r0, fp
 800fdbc:	4303      	orrs	r3, r0
 800fdbe:	9300      	str	r3, [sp, #0]
 800fdc0:	f10b 0b04 	add.w	fp, fp, #4
 800fdc4:	9b03      	ldr	r3, [sp, #12]
 800fdc6:	e00d      	b.n	800fde4 <__gethex+0x27c>
 800fdc8:	9b03      	ldr	r3, [sp, #12]
 800fdca:	9a06      	ldr	r2, [sp, #24]
 800fdcc:	4413      	add	r3, r2
 800fdce:	42bb      	cmp	r3, r7
 800fdd0:	d3e0      	bcc.n	800fd94 <__gethex+0x22c>
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	9901      	ldr	r1, [sp, #4]
 800fdd6:	9307      	str	r3, [sp, #28]
 800fdd8:	4652      	mov	r2, sl
 800fdda:	f7fe fd02 	bl	800e7e2 <strncmp>
 800fdde:	9b07      	ldr	r3, [sp, #28]
 800fde0:	2800      	cmp	r0, #0
 800fde2:	d1d7      	bne.n	800fd94 <__gethex+0x22c>
 800fde4:	461e      	mov	r6, r3
 800fde6:	e78b      	b.n	800fd00 <__gethex+0x198>
 800fde8:	f04f 0a03 	mov.w	sl, #3
 800fdec:	e7b8      	b.n	800fd60 <__gethex+0x1f8>
 800fdee:	da0a      	bge.n	800fe06 <__gethex+0x29e>
 800fdf0:	1a37      	subs	r7, r6, r0
 800fdf2:	4621      	mov	r1, r4
 800fdf4:	ee18 0a10 	vmov	r0, s16
 800fdf8:	463a      	mov	r2, r7
 800fdfa:	f000 fca7 	bl	801074c <__lshift>
 800fdfe:	1bed      	subs	r5, r5, r7
 800fe00:	4604      	mov	r4, r0
 800fe02:	f100 0914 	add.w	r9, r0, #20
 800fe06:	f04f 0a00 	mov.w	sl, #0
 800fe0a:	e7ae      	b.n	800fd6a <__gethex+0x202>
 800fe0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fe10:	42a8      	cmp	r0, r5
 800fe12:	dd72      	ble.n	800fefa <__gethex+0x392>
 800fe14:	1b45      	subs	r5, r0, r5
 800fe16:	42ae      	cmp	r6, r5
 800fe18:	dc36      	bgt.n	800fe88 <__gethex+0x320>
 800fe1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d02a      	beq.n	800fe78 <__gethex+0x310>
 800fe22:	2b03      	cmp	r3, #3
 800fe24:	d02c      	beq.n	800fe80 <__gethex+0x318>
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d11c      	bne.n	800fe64 <__gethex+0x2fc>
 800fe2a:	42ae      	cmp	r6, r5
 800fe2c:	d11a      	bne.n	800fe64 <__gethex+0x2fc>
 800fe2e:	2e01      	cmp	r6, #1
 800fe30:	d112      	bne.n	800fe58 <__gethex+0x2f0>
 800fe32:	9a04      	ldr	r2, [sp, #16]
 800fe34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe38:	6013      	str	r3, [r2, #0]
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	6123      	str	r3, [r4, #16]
 800fe3e:	f8c9 3000 	str.w	r3, [r9]
 800fe42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe44:	2762      	movs	r7, #98	; 0x62
 800fe46:	601c      	str	r4, [r3, #0]
 800fe48:	e723      	b.n	800fc92 <__gethex+0x12a>
 800fe4a:	bf00      	nop
 800fe4c:	08011d24 	.word	0x08011d24
 800fe50:	08011cac 	.word	0x08011cac
 800fe54:	08011cbd 	.word	0x08011cbd
 800fe58:	1e71      	subs	r1, r6, #1
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 feba 	bl	8010bd4 <__any_on>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d1e6      	bne.n	800fe32 <__gethex+0x2ca>
 800fe64:	ee18 0a10 	vmov	r0, s16
 800fe68:	4621      	mov	r1, r4
 800fe6a:	f000 fa53 	bl	8010314 <_Bfree>
 800fe6e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe70:	2300      	movs	r3, #0
 800fe72:	6013      	str	r3, [r2, #0]
 800fe74:	2750      	movs	r7, #80	; 0x50
 800fe76:	e70c      	b.n	800fc92 <__gethex+0x12a>
 800fe78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d1f2      	bne.n	800fe64 <__gethex+0x2fc>
 800fe7e:	e7d8      	b.n	800fe32 <__gethex+0x2ca>
 800fe80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1d5      	bne.n	800fe32 <__gethex+0x2ca>
 800fe86:	e7ed      	b.n	800fe64 <__gethex+0x2fc>
 800fe88:	1e6f      	subs	r7, r5, #1
 800fe8a:	f1ba 0f00 	cmp.w	sl, #0
 800fe8e:	d131      	bne.n	800fef4 <__gethex+0x38c>
 800fe90:	b127      	cbz	r7, 800fe9c <__gethex+0x334>
 800fe92:	4639      	mov	r1, r7
 800fe94:	4620      	mov	r0, r4
 800fe96:	f000 fe9d 	bl	8010bd4 <__any_on>
 800fe9a:	4682      	mov	sl, r0
 800fe9c:	117b      	asrs	r3, r7, #5
 800fe9e:	2101      	movs	r1, #1
 800fea0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fea4:	f007 071f 	and.w	r7, r7, #31
 800fea8:	fa01 f707 	lsl.w	r7, r1, r7
 800feac:	421f      	tst	r7, r3
 800feae:	4629      	mov	r1, r5
 800feb0:	4620      	mov	r0, r4
 800feb2:	bf18      	it	ne
 800feb4:	f04a 0a02 	orrne.w	sl, sl, #2
 800feb8:	1b76      	subs	r6, r6, r5
 800feba:	f7ff fdee 	bl	800fa9a <rshift>
 800febe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fec2:	2702      	movs	r7, #2
 800fec4:	f1ba 0f00 	cmp.w	sl, #0
 800fec8:	d048      	beq.n	800ff5c <__gethex+0x3f4>
 800feca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fece:	2b02      	cmp	r3, #2
 800fed0:	d015      	beq.n	800fefe <__gethex+0x396>
 800fed2:	2b03      	cmp	r3, #3
 800fed4:	d017      	beq.n	800ff06 <__gethex+0x39e>
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d109      	bne.n	800feee <__gethex+0x386>
 800feda:	f01a 0f02 	tst.w	sl, #2
 800fede:	d006      	beq.n	800feee <__gethex+0x386>
 800fee0:	f8d9 0000 	ldr.w	r0, [r9]
 800fee4:	ea4a 0a00 	orr.w	sl, sl, r0
 800fee8:	f01a 0f01 	tst.w	sl, #1
 800feec:	d10e      	bne.n	800ff0c <__gethex+0x3a4>
 800feee:	f047 0710 	orr.w	r7, r7, #16
 800fef2:	e033      	b.n	800ff5c <__gethex+0x3f4>
 800fef4:	f04f 0a01 	mov.w	sl, #1
 800fef8:	e7d0      	b.n	800fe9c <__gethex+0x334>
 800fefa:	2701      	movs	r7, #1
 800fefc:	e7e2      	b.n	800fec4 <__gethex+0x35c>
 800fefe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff00:	f1c3 0301 	rsb	r3, r3, #1
 800ff04:	9315      	str	r3, [sp, #84]	; 0x54
 800ff06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d0f0      	beq.n	800feee <__gethex+0x386>
 800ff0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff10:	f104 0314 	add.w	r3, r4, #20
 800ff14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff1c:	f04f 0c00 	mov.w	ip, #0
 800ff20:	4618      	mov	r0, r3
 800ff22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff26:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff2a:	d01c      	beq.n	800ff66 <__gethex+0x3fe>
 800ff2c:	3201      	adds	r2, #1
 800ff2e:	6002      	str	r2, [r0, #0]
 800ff30:	2f02      	cmp	r7, #2
 800ff32:	f104 0314 	add.w	r3, r4, #20
 800ff36:	d13f      	bne.n	800ffb8 <__gethex+0x450>
 800ff38:	f8d8 2000 	ldr.w	r2, [r8]
 800ff3c:	3a01      	subs	r2, #1
 800ff3e:	42b2      	cmp	r2, r6
 800ff40:	d10a      	bne.n	800ff58 <__gethex+0x3f0>
 800ff42:	1171      	asrs	r1, r6, #5
 800ff44:	2201      	movs	r2, #1
 800ff46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff4a:	f006 061f 	and.w	r6, r6, #31
 800ff4e:	fa02 f606 	lsl.w	r6, r2, r6
 800ff52:	421e      	tst	r6, r3
 800ff54:	bf18      	it	ne
 800ff56:	4617      	movne	r7, r2
 800ff58:	f047 0720 	orr.w	r7, r7, #32
 800ff5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff5e:	601c      	str	r4, [r3, #0]
 800ff60:	9b04      	ldr	r3, [sp, #16]
 800ff62:	601d      	str	r5, [r3, #0]
 800ff64:	e695      	b.n	800fc92 <__gethex+0x12a>
 800ff66:	4299      	cmp	r1, r3
 800ff68:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff6c:	d8d8      	bhi.n	800ff20 <__gethex+0x3b8>
 800ff6e:	68a3      	ldr	r3, [r4, #8]
 800ff70:	459b      	cmp	fp, r3
 800ff72:	db19      	blt.n	800ffa8 <__gethex+0x440>
 800ff74:	6861      	ldr	r1, [r4, #4]
 800ff76:	ee18 0a10 	vmov	r0, s16
 800ff7a:	3101      	adds	r1, #1
 800ff7c:	f000 f98a 	bl	8010294 <_Balloc>
 800ff80:	4681      	mov	r9, r0
 800ff82:	b918      	cbnz	r0, 800ff8c <__gethex+0x424>
 800ff84:	4b1a      	ldr	r3, [pc, #104]	; (800fff0 <__gethex+0x488>)
 800ff86:	4602      	mov	r2, r0
 800ff88:	2184      	movs	r1, #132	; 0x84
 800ff8a:	e6a8      	b.n	800fcde <__gethex+0x176>
 800ff8c:	6922      	ldr	r2, [r4, #16]
 800ff8e:	3202      	adds	r2, #2
 800ff90:	f104 010c 	add.w	r1, r4, #12
 800ff94:	0092      	lsls	r2, r2, #2
 800ff96:	300c      	adds	r0, #12
 800ff98:	f7fe f8ea 	bl	800e170 <memcpy>
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	ee18 0a10 	vmov	r0, s16
 800ffa2:	f000 f9b7 	bl	8010314 <_Bfree>
 800ffa6:	464c      	mov	r4, r9
 800ffa8:	6923      	ldr	r3, [r4, #16]
 800ffaa:	1c5a      	adds	r2, r3, #1
 800ffac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffb0:	6122      	str	r2, [r4, #16]
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	615a      	str	r2, [r3, #20]
 800ffb6:	e7bb      	b.n	800ff30 <__gethex+0x3c8>
 800ffb8:	6922      	ldr	r2, [r4, #16]
 800ffba:	455a      	cmp	r2, fp
 800ffbc:	dd0b      	ble.n	800ffd6 <__gethex+0x46e>
 800ffbe:	2101      	movs	r1, #1
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f7ff fd6a 	bl	800fa9a <rshift>
 800ffc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffca:	3501      	adds	r5, #1
 800ffcc:	42ab      	cmp	r3, r5
 800ffce:	f6ff aed0 	blt.w	800fd72 <__gethex+0x20a>
 800ffd2:	2701      	movs	r7, #1
 800ffd4:	e7c0      	b.n	800ff58 <__gethex+0x3f0>
 800ffd6:	f016 061f 	ands.w	r6, r6, #31
 800ffda:	d0fa      	beq.n	800ffd2 <__gethex+0x46a>
 800ffdc:	4453      	add	r3, sl
 800ffde:	f1c6 0620 	rsb	r6, r6, #32
 800ffe2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ffe6:	f000 fa47 	bl	8010478 <__hi0bits>
 800ffea:	42b0      	cmp	r0, r6
 800ffec:	dbe7      	blt.n	800ffbe <__gethex+0x456>
 800ffee:	e7f0      	b.n	800ffd2 <__gethex+0x46a>
 800fff0:	08011cac 	.word	0x08011cac

0800fff4 <L_shift>:
 800fff4:	f1c2 0208 	rsb	r2, r2, #8
 800fff8:	0092      	lsls	r2, r2, #2
 800fffa:	b570      	push	{r4, r5, r6, lr}
 800fffc:	f1c2 0620 	rsb	r6, r2, #32
 8010000:	6843      	ldr	r3, [r0, #4]
 8010002:	6804      	ldr	r4, [r0, #0]
 8010004:	fa03 f506 	lsl.w	r5, r3, r6
 8010008:	432c      	orrs	r4, r5
 801000a:	40d3      	lsrs	r3, r2
 801000c:	6004      	str	r4, [r0, #0]
 801000e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010012:	4288      	cmp	r0, r1
 8010014:	d3f4      	bcc.n	8010000 <L_shift+0xc>
 8010016:	bd70      	pop	{r4, r5, r6, pc}

08010018 <__match>:
 8010018:	b530      	push	{r4, r5, lr}
 801001a:	6803      	ldr	r3, [r0, #0]
 801001c:	3301      	adds	r3, #1
 801001e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010022:	b914      	cbnz	r4, 801002a <__match+0x12>
 8010024:	6003      	str	r3, [r0, #0]
 8010026:	2001      	movs	r0, #1
 8010028:	bd30      	pop	{r4, r5, pc}
 801002a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801002e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010032:	2d19      	cmp	r5, #25
 8010034:	bf98      	it	ls
 8010036:	3220      	addls	r2, #32
 8010038:	42a2      	cmp	r2, r4
 801003a:	d0f0      	beq.n	801001e <__match+0x6>
 801003c:	2000      	movs	r0, #0
 801003e:	e7f3      	b.n	8010028 <__match+0x10>

08010040 <__hexnan>:
 8010040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010044:	680b      	ldr	r3, [r1, #0]
 8010046:	115e      	asrs	r6, r3, #5
 8010048:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801004c:	f013 031f 	ands.w	r3, r3, #31
 8010050:	b087      	sub	sp, #28
 8010052:	bf18      	it	ne
 8010054:	3604      	addne	r6, #4
 8010056:	2500      	movs	r5, #0
 8010058:	1f37      	subs	r7, r6, #4
 801005a:	4690      	mov	r8, r2
 801005c:	6802      	ldr	r2, [r0, #0]
 801005e:	9301      	str	r3, [sp, #4]
 8010060:	4682      	mov	sl, r0
 8010062:	f846 5c04 	str.w	r5, [r6, #-4]
 8010066:	46b9      	mov	r9, r7
 8010068:	463c      	mov	r4, r7
 801006a:	9502      	str	r5, [sp, #8]
 801006c:	46ab      	mov	fp, r5
 801006e:	7851      	ldrb	r1, [r2, #1]
 8010070:	1c53      	adds	r3, r2, #1
 8010072:	9303      	str	r3, [sp, #12]
 8010074:	b341      	cbz	r1, 80100c8 <__hexnan+0x88>
 8010076:	4608      	mov	r0, r1
 8010078:	9205      	str	r2, [sp, #20]
 801007a:	9104      	str	r1, [sp, #16]
 801007c:	f7ff fd5f 	bl	800fb3e <__hexdig_fun>
 8010080:	2800      	cmp	r0, #0
 8010082:	d14f      	bne.n	8010124 <__hexnan+0xe4>
 8010084:	9904      	ldr	r1, [sp, #16]
 8010086:	9a05      	ldr	r2, [sp, #20]
 8010088:	2920      	cmp	r1, #32
 801008a:	d818      	bhi.n	80100be <__hexnan+0x7e>
 801008c:	9b02      	ldr	r3, [sp, #8]
 801008e:	459b      	cmp	fp, r3
 8010090:	dd13      	ble.n	80100ba <__hexnan+0x7a>
 8010092:	454c      	cmp	r4, r9
 8010094:	d206      	bcs.n	80100a4 <__hexnan+0x64>
 8010096:	2d07      	cmp	r5, #7
 8010098:	dc04      	bgt.n	80100a4 <__hexnan+0x64>
 801009a:	462a      	mov	r2, r5
 801009c:	4649      	mov	r1, r9
 801009e:	4620      	mov	r0, r4
 80100a0:	f7ff ffa8 	bl	800fff4 <L_shift>
 80100a4:	4544      	cmp	r4, r8
 80100a6:	d950      	bls.n	801014a <__hexnan+0x10a>
 80100a8:	2300      	movs	r3, #0
 80100aa:	f1a4 0904 	sub.w	r9, r4, #4
 80100ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80100b2:	f8cd b008 	str.w	fp, [sp, #8]
 80100b6:	464c      	mov	r4, r9
 80100b8:	461d      	mov	r5, r3
 80100ba:	9a03      	ldr	r2, [sp, #12]
 80100bc:	e7d7      	b.n	801006e <__hexnan+0x2e>
 80100be:	2929      	cmp	r1, #41	; 0x29
 80100c0:	d156      	bne.n	8010170 <__hexnan+0x130>
 80100c2:	3202      	adds	r2, #2
 80100c4:	f8ca 2000 	str.w	r2, [sl]
 80100c8:	f1bb 0f00 	cmp.w	fp, #0
 80100cc:	d050      	beq.n	8010170 <__hexnan+0x130>
 80100ce:	454c      	cmp	r4, r9
 80100d0:	d206      	bcs.n	80100e0 <__hexnan+0xa0>
 80100d2:	2d07      	cmp	r5, #7
 80100d4:	dc04      	bgt.n	80100e0 <__hexnan+0xa0>
 80100d6:	462a      	mov	r2, r5
 80100d8:	4649      	mov	r1, r9
 80100da:	4620      	mov	r0, r4
 80100dc:	f7ff ff8a 	bl	800fff4 <L_shift>
 80100e0:	4544      	cmp	r4, r8
 80100e2:	d934      	bls.n	801014e <__hexnan+0x10e>
 80100e4:	f1a8 0204 	sub.w	r2, r8, #4
 80100e8:	4623      	mov	r3, r4
 80100ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80100ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80100f2:	429f      	cmp	r7, r3
 80100f4:	d2f9      	bcs.n	80100ea <__hexnan+0xaa>
 80100f6:	1b3b      	subs	r3, r7, r4
 80100f8:	f023 0303 	bic.w	r3, r3, #3
 80100fc:	3304      	adds	r3, #4
 80100fe:	3401      	adds	r4, #1
 8010100:	3e03      	subs	r6, #3
 8010102:	42b4      	cmp	r4, r6
 8010104:	bf88      	it	hi
 8010106:	2304      	movhi	r3, #4
 8010108:	4443      	add	r3, r8
 801010a:	2200      	movs	r2, #0
 801010c:	f843 2b04 	str.w	r2, [r3], #4
 8010110:	429f      	cmp	r7, r3
 8010112:	d2fb      	bcs.n	801010c <__hexnan+0xcc>
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	b91b      	cbnz	r3, 8010120 <__hexnan+0xe0>
 8010118:	4547      	cmp	r7, r8
 801011a:	d127      	bne.n	801016c <__hexnan+0x12c>
 801011c:	2301      	movs	r3, #1
 801011e:	603b      	str	r3, [r7, #0]
 8010120:	2005      	movs	r0, #5
 8010122:	e026      	b.n	8010172 <__hexnan+0x132>
 8010124:	3501      	adds	r5, #1
 8010126:	2d08      	cmp	r5, #8
 8010128:	f10b 0b01 	add.w	fp, fp, #1
 801012c:	dd06      	ble.n	801013c <__hexnan+0xfc>
 801012e:	4544      	cmp	r4, r8
 8010130:	d9c3      	bls.n	80100ba <__hexnan+0x7a>
 8010132:	2300      	movs	r3, #0
 8010134:	f844 3c04 	str.w	r3, [r4, #-4]
 8010138:	2501      	movs	r5, #1
 801013a:	3c04      	subs	r4, #4
 801013c:	6822      	ldr	r2, [r4, #0]
 801013e:	f000 000f 	and.w	r0, r0, #15
 8010142:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010146:	6022      	str	r2, [r4, #0]
 8010148:	e7b7      	b.n	80100ba <__hexnan+0x7a>
 801014a:	2508      	movs	r5, #8
 801014c:	e7b5      	b.n	80100ba <__hexnan+0x7a>
 801014e:	9b01      	ldr	r3, [sp, #4]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d0df      	beq.n	8010114 <__hexnan+0xd4>
 8010154:	f04f 32ff 	mov.w	r2, #4294967295
 8010158:	f1c3 0320 	rsb	r3, r3, #32
 801015c:	fa22 f303 	lsr.w	r3, r2, r3
 8010160:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010164:	401a      	ands	r2, r3
 8010166:	f846 2c04 	str.w	r2, [r6, #-4]
 801016a:	e7d3      	b.n	8010114 <__hexnan+0xd4>
 801016c:	3f04      	subs	r7, #4
 801016e:	e7d1      	b.n	8010114 <__hexnan+0xd4>
 8010170:	2004      	movs	r0, #4
 8010172:	b007      	add	sp, #28
 8010174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010178 <__retarget_lock_init_recursive>:
 8010178:	4770      	bx	lr

0801017a <__retarget_lock_acquire_recursive>:
 801017a:	4770      	bx	lr

0801017c <__retarget_lock_release_recursive>:
 801017c:	4770      	bx	lr
	...

08010180 <_lseek_r>:
 8010180:	b538      	push	{r3, r4, r5, lr}
 8010182:	4d07      	ldr	r5, [pc, #28]	; (80101a0 <_lseek_r+0x20>)
 8010184:	4604      	mov	r4, r0
 8010186:	4608      	mov	r0, r1
 8010188:	4611      	mov	r1, r2
 801018a:	2200      	movs	r2, #0
 801018c:	602a      	str	r2, [r5, #0]
 801018e:	461a      	mov	r2, r3
 8010190:	f7f3 f886 	bl	80032a0 <_lseek>
 8010194:	1c43      	adds	r3, r0, #1
 8010196:	d102      	bne.n	801019e <_lseek_r+0x1e>
 8010198:	682b      	ldr	r3, [r5, #0]
 801019a:	b103      	cbz	r3, 801019e <_lseek_r+0x1e>
 801019c:	6023      	str	r3, [r4, #0]
 801019e:	bd38      	pop	{r3, r4, r5, pc}
 80101a0:	20002868 	.word	0x20002868

080101a4 <__swhatbuf_r>:
 80101a4:	b570      	push	{r4, r5, r6, lr}
 80101a6:	460e      	mov	r6, r1
 80101a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ac:	2900      	cmp	r1, #0
 80101ae:	b096      	sub	sp, #88	; 0x58
 80101b0:	4614      	mov	r4, r2
 80101b2:	461d      	mov	r5, r3
 80101b4:	da08      	bge.n	80101c8 <__swhatbuf_r+0x24>
 80101b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80101ba:	2200      	movs	r2, #0
 80101bc:	602a      	str	r2, [r5, #0]
 80101be:	061a      	lsls	r2, r3, #24
 80101c0:	d410      	bmi.n	80101e4 <__swhatbuf_r+0x40>
 80101c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101c6:	e00e      	b.n	80101e6 <__swhatbuf_r+0x42>
 80101c8:	466a      	mov	r2, sp
 80101ca:	f001 f973 	bl	80114b4 <_fstat_r>
 80101ce:	2800      	cmp	r0, #0
 80101d0:	dbf1      	blt.n	80101b6 <__swhatbuf_r+0x12>
 80101d2:	9a01      	ldr	r2, [sp, #4]
 80101d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80101d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80101dc:	425a      	negs	r2, r3
 80101de:	415a      	adcs	r2, r3
 80101e0:	602a      	str	r2, [r5, #0]
 80101e2:	e7ee      	b.n	80101c2 <__swhatbuf_r+0x1e>
 80101e4:	2340      	movs	r3, #64	; 0x40
 80101e6:	2000      	movs	r0, #0
 80101e8:	6023      	str	r3, [r4, #0]
 80101ea:	b016      	add	sp, #88	; 0x58
 80101ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080101f0 <__smakebuf_r>:
 80101f0:	898b      	ldrh	r3, [r1, #12]
 80101f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101f4:	079d      	lsls	r5, r3, #30
 80101f6:	4606      	mov	r6, r0
 80101f8:	460c      	mov	r4, r1
 80101fa:	d507      	bpl.n	801020c <__smakebuf_r+0x1c>
 80101fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	2301      	movs	r3, #1
 8010206:	6163      	str	r3, [r4, #20]
 8010208:	b002      	add	sp, #8
 801020a:	bd70      	pop	{r4, r5, r6, pc}
 801020c:	ab01      	add	r3, sp, #4
 801020e:	466a      	mov	r2, sp
 8010210:	f7ff ffc8 	bl	80101a4 <__swhatbuf_r>
 8010214:	9900      	ldr	r1, [sp, #0]
 8010216:	4605      	mov	r5, r0
 8010218:	4630      	mov	r0, r6
 801021a:	f000 fd7f 	bl	8010d1c <_malloc_r>
 801021e:	b948      	cbnz	r0, 8010234 <__smakebuf_r+0x44>
 8010220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010224:	059a      	lsls	r2, r3, #22
 8010226:	d4ef      	bmi.n	8010208 <__smakebuf_r+0x18>
 8010228:	f023 0303 	bic.w	r3, r3, #3
 801022c:	f043 0302 	orr.w	r3, r3, #2
 8010230:	81a3      	strh	r3, [r4, #12]
 8010232:	e7e3      	b.n	80101fc <__smakebuf_r+0xc>
 8010234:	4b0d      	ldr	r3, [pc, #52]	; (801026c <__smakebuf_r+0x7c>)
 8010236:	62b3      	str	r3, [r6, #40]	; 0x28
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010240:	81a3      	strh	r3, [r4, #12]
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	6163      	str	r3, [r4, #20]
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	6120      	str	r0, [r4, #16]
 801024a:	b15b      	cbz	r3, 8010264 <__smakebuf_r+0x74>
 801024c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010250:	4630      	mov	r0, r6
 8010252:	f001 f941 	bl	80114d8 <_isatty_r>
 8010256:	b128      	cbz	r0, 8010264 <__smakebuf_r+0x74>
 8010258:	89a3      	ldrh	r3, [r4, #12]
 801025a:	f023 0303 	bic.w	r3, r3, #3
 801025e:	f043 0301 	orr.w	r3, r3, #1
 8010262:	81a3      	strh	r3, [r4, #12]
 8010264:	89a0      	ldrh	r0, [r4, #12]
 8010266:	4305      	orrs	r5, r0
 8010268:	81a5      	strh	r5, [r4, #12]
 801026a:	e7cd      	b.n	8010208 <__smakebuf_r+0x18>
 801026c:	0800f8f9 	.word	0x0800f8f9

08010270 <__ascii_mbtowc>:
 8010270:	b082      	sub	sp, #8
 8010272:	b901      	cbnz	r1, 8010276 <__ascii_mbtowc+0x6>
 8010274:	a901      	add	r1, sp, #4
 8010276:	b142      	cbz	r2, 801028a <__ascii_mbtowc+0x1a>
 8010278:	b14b      	cbz	r3, 801028e <__ascii_mbtowc+0x1e>
 801027a:	7813      	ldrb	r3, [r2, #0]
 801027c:	600b      	str	r3, [r1, #0]
 801027e:	7812      	ldrb	r2, [r2, #0]
 8010280:	1e10      	subs	r0, r2, #0
 8010282:	bf18      	it	ne
 8010284:	2001      	movne	r0, #1
 8010286:	b002      	add	sp, #8
 8010288:	4770      	bx	lr
 801028a:	4610      	mov	r0, r2
 801028c:	e7fb      	b.n	8010286 <__ascii_mbtowc+0x16>
 801028e:	f06f 0001 	mvn.w	r0, #1
 8010292:	e7f8      	b.n	8010286 <__ascii_mbtowc+0x16>

08010294 <_Balloc>:
 8010294:	b570      	push	{r4, r5, r6, lr}
 8010296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010298:	4604      	mov	r4, r0
 801029a:	460d      	mov	r5, r1
 801029c:	b976      	cbnz	r6, 80102bc <_Balloc+0x28>
 801029e:	2010      	movs	r0, #16
 80102a0:	f001 f92a 	bl	80114f8 <malloc>
 80102a4:	4602      	mov	r2, r0
 80102a6:	6260      	str	r0, [r4, #36]	; 0x24
 80102a8:	b920      	cbnz	r0, 80102b4 <_Balloc+0x20>
 80102aa:	4b18      	ldr	r3, [pc, #96]	; (801030c <_Balloc+0x78>)
 80102ac:	4818      	ldr	r0, [pc, #96]	; (8010310 <_Balloc+0x7c>)
 80102ae:	2166      	movs	r1, #102	; 0x66
 80102b0:	f001 f8d0 	bl	8011454 <__assert_func>
 80102b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102b8:	6006      	str	r6, [r0, #0]
 80102ba:	60c6      	str	r6, [r0, #12]
 80102bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80102be:	68f3      	ldr	r3, [r6, #12]
 80102c0:	b183      	cbz	r3, 80102e4 <_Balloc+0x50>
 80102c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102ca:	b9b8      	cbnz	r0, 80102fc <_Balloc+0x68>
 80102cc:	2101      	movs	r1, #1
 80102ce:	fa01 f605 	lsl.w	r6, r1, r5
 80102d2:	1d72      	adds	r2, r6, #5
 80102d4:	0092      	lsls	r2, r2, #2
 80102d6:	4620      	mov	r0, r4
 80102d8:	f000 fc9d 	bl	8010c16 <_calloc_r>
 80102dc:	b160      	cbz	r0, 80102f8 <_Balloc+0x64>
 80102de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102e2:	e00e      	b.n	8010302 <_Balloc+0x6e>
 80102e4:	2221      	movs	r2, #33	; 0x21
 80102e6:	2104      	movs	r1, #4
 80102e8:	4620      	mov	r0, r4
 80102ea:	f000 fc94 	bl	8010c16 <_calloc_r>
 80102ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102f0:	60f0      	str	r0, [r6, #12]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1e4      	bne.n	80102c2 <_Balloc+0x2e>
 80102f8:	2000      	movs	r0, #0
 80102fa:	bd70      	pop	{r4, r5, r6, pc}
 80102fc:	6802      	ldr	r2, [r0, #0]
 80102fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010302:	2300      	movs	r3, #0
 8010304:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010308:	e7f7      	b.n	80102fa <_Balloc+0x66>
 801030a:	bf00      	nop
 801030c:	08011d38 	.word	0x08011d38
 8010310:	08011d4f 	.word	0x08011d4f

08010314 <_Bfree>:
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010318:	4605      	mov	r5, r0
 801031a:	460c      	mov	r4, r1
 801031c:	b976      	cbnz	r6, 801033c <_Bfree+0x28>
 801031e:	2010      	movs	r0, #16
 8010320:	f001 f8ea 	bl	80114f8 <malloc>
 8010324:	4602      	mov	r2, r0
 8010326:	6268      	str	r0, [r5, #36]	; 0x24
 8010328:	b920      	cbnz	r0, 8010334 <_Bfree+0x20>
 801032a:	4b09      	ldr	r3, [pc, #36]	; (8010350 <_Bfree+0x3c>)
 801032c:	4809      	ldr	r0, [pc, #36]	; (8010354 <_Bfree+0x40>)
 801032e:	218a      	movs	r1, #138	; 0x8a
 8010330:	f001 f890 	bl	8011454 <__assert_func>
 8010334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010338:	6006      	str	r6, [r0, #0]
 801033a:	60c6      	str	r6, [r0, #12]
 801033c:	b13c      	cbz	r4, 801034e <_Bfree+0x3a>
 801033e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010340:	6862      	ldr	r2, [r4, #4]
 8010342:	68db      	ldr	r3, [r3, #12]
 8010344:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010348:	6021      	str	r1, [r4, #0]
 801034a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801034e:	bd70      	pop	{r4, r5, r6, pc}
 8010350:	08011d38 	.word	0x08011d38
 8010354:	08011d4f 	.word	0x08011d4f

08010358 <__multadd>:
 8010358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801035c:	690d      	ldr	r5, [r1, #16]
 801035e:	4607      	mov	r7, r0
 8010360:	460c      	mov	r4, r1
 8010362:	461e      	mov	r6, r3
 8010364:	f101 0c14 	add.w	ip, r1, #20
 8010368:	2000      	movs	r0, #0
 801036a:	f8dc 3000 	ldr.w	r3, [ip]
 801036e:	b299      	uxth	r1, r3
 8010370:	fb02 6101 	mla	r1, r2, r1, r6
 8010374:	0c1e      	lsrs	r6, r3, #16
 8010376:	0c0b      	lsrs	r3, r1, #16
 8010378:	fb02 3306 	mla	r3, r2, r6, r3
 801037c:	b289      	uxth	r1, r1
 801037e:	3001      	adds	r0, #1
 8010380:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010384:	4285      	cmp	r5, r0
 8010386:	f84c 1b04 	str.w	r1, [ip], #4
 801038a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801038e:	dcec      	bgt.n	801036a <__multadd+0x12>
 8010390:	b30e      	cbz	r6, 80103d6 <__multadd+0x7e>
 8010392:	68a3      	ldr	r3, [r4, #8]
 8010394:	42ab      	cmp	r3, r5
 8010396:	dc19      	bgt.n	80103cc <__multadd+0x74>
 8010398:	6861      	ldr	r1, [r4, #4]
 801039a:	4638      	mov	r0, r7
 801039c:	3101      	adds	r1, #1
 801039e:	f7ff ff79 	bl	8010294 <_Balloc>
 80103a2:	4680      	mov	r8, r0
 80103a4:	b928      	cbnz	r0, 80103b2 <__multadd+0x5a>
 80103a6:	4602      	mov	r2, r0
 80103a8:	4b0c      	ldr	r3, [pc, #48]	; (80103dc <__multadd+0x84>)
 80103aa:	480d      	ldr	r0, [pc, #52]	; (80103e0 <__multadd+0x88>)
 80103ac:	21b5      	movs	r1, #181	; 0xb5
 80103ae:	f001 f851 	bl	8011454 <__assert_func>
 80103b2:	6922      	ldr	r2, [r4, #16]
 80103b4:	3202      	adds	r2, #2
 80103b6:	f104 010c 	add.w	r1, r4, #12
 80103ba:	0092      	lsls	r2, r2, #2
 80103bc:	300c      	adds	r0, #12
 80103be:	f7fd fed7 	bl	800e170 <memcpy>
 80103c2:	4621      	mov	r1, r4
 80103c4:	4638      	mov	r0, r7
 80103c6:	f7ff ffa5 	bl	8010314 <_Bfree>
 80103ca:	4644      	mov	r4, r8
 80103cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103d0:	3501      	adds	r5, #1
 80103d2:	615e      	str	r6, [r3, #20]
 80103d4:	6125      	str	r5, [r4, #16]
 80103d6:	4620      	mov	r0, r4
 80103d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103dc:	08011cac 	.word	0x08011cac
 80103e0:	08011d4f 	.word	0x08011d4f

080103e4 <__s2b>:
 80103e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103e8:	460c      	mov	r4, r1
 80103ea:	4615      	mov	r5, r2
 80103ec:	461f      	mov	r7, r3
 80103ee:	2209      	movs	r2, #9
 80103f0:	3308      	adds	r3, #8
 80103f2:	4606      	mov	r6, r0
 80103f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80103f8:	2100      	movs	r1, #0
 80103fa:	2201      	movs	r2, #1
 80103fc:	429a      	cmp	r2, r3
 80103fe:	db09      	blt.n	8010414 <__s2b+0x30>
 8010400:	4630      	mov	r0, r6
 8010402:	f7ff ff47 	bl	8010294 <_Balloc>
 8010406:	b940      	cbnz	r0, 801041a <__s2b+0x36>
 8010408:	4602      	mov	r2, r0
 801040a:	4b19      	ldr	r3, [pc, #100]	; (8010470 <__s2b+0x8c>)
 801040c:	4819      	ldr	r0, [pc, #100]	; (8010474 <__s2b+0x90>)
 801040e:	21ce      	movs	r1, #206	; 0xce
 8010410:	f001 f820 	bl	8011454 <__assert_func>
 8010414:	0052      	lsls	r2, r2, #1
 8010416:	3101      	adds	r1, #1
 8010418:	e7f0      	b.n	80103fc <__s2b+0x18>
 801041a:	9b08      	ldr	r3, [sp, #32]
 801041c:	6143      	str	r3, [r0, #20]
 801041e:	2d09      	cmp	r5, #9
 8010420:	f04f 0301 	mov.w	r3, #1
 8010424:	6103      	str	r3, [r0, #16]
 8010426:	dd16      	ble.n	8010456 <__s2b+0x72>
 8010428:	f104 0909 	add.w	r9, r4, #9
 801042c:	46c8      	mov	r8, r9
 801042e:	442c      	add	r4, r5
 8010430:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010434:	4601      	mov	r1, r0
 8010436:	3b30      	subs	r3, #48	; 0x30
 8010438:	220a      	movs	r2, #10
 801043a:	4630      	mov	r0, r6
 801043c:	f7ff ff8c 	bl	8010358 <__multadd>
 8010440:	45a0      	cmp	r8, r4
 8010442:	d1f5      	bne.n	8010430 <__s2b+0x4c>
 8010444:	f1a5 0408 	sub.w	r4, r5, #8
 8010448:	444c      	add	r4, r9
 801044a:	1b2d      	subs	r5, r5, r4
 801044c:	1963      	adds	r3, r4, r5
 801044e:	42bb      	cmp	r3, r7
 8010450:	db04      	blt.n	801045c <__s2b+0x78>
 8010452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010456:	340a      	adds	r4, #10
 8010458:	2509      	movs	r5, #9
 801045a:	e7f6      	b.n	801044a <__s2b+0x66>
 801045c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010460:	4601      	mov	r1, r0
 8010462:	3b30      	subs	r3, #48	; 0x30
 8010464:	220a      	movs	r2, #10
 8010466:	4630      	mov	r0, r6
 8010468:	f7ff ff76 	bl	8010358 <__multadd>
 801046c:	e7ee      	b.n	801044c <__s2b+0x68>
 801046e:	bf00      	nop
 8010470:	08011cac 	.word	0x08011cac
 8010474:	08011d4f 	.word	0x08011d4f

08010478 <__hi0bits>:
 8010478:	0c03      	lsrs	r3, r0, #16
 801047a:	041b      	lsls	r3, r3, #16
 801047c:	b9d3      	cbnz	r3, 80104b4 <__hi0bits+0x3c>
 801047e:	0400      	lsls	r0, r0, #16
 8010480:	2310      	movs	r3, #16
 8010482:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010486:	bf04      	itt	eq
 8010488:	0200      	lsleq	r0, r0, #8
 801048a:	3308      	addeq	r3, #8
 801048c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010490:	bf04      	itt	eq
 8010492:	0100      	lsleq	r0, r0, #4
 8010494:	3304      	addeq	r3, #4
 8010496:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801049a:	bf04      	itt	eq
 801049c:	0080      	lsleq	r0, r0, #2
 801049e:	3302      	addeq	r3, #2
 80104a0:	2800      	cmp	r0, #0
 80104a2:	db05      	blt.n	80104b0 <__hi0bits+0x38>
 80104a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80104a8:	f103 0301 	add.w	r3, r3, #1
 80104ac:	bf08      	it	eq
 80104ae:	2320      	moveq	r3, #32
 80104b0:	4618      	mov	r0, r3
 80104b2:	4770      	bx	lr
 80104b4:	2300      	movs	r3, #0
 80104b6:	e7e4      	b.n	8010482 <__hi0bits+0xa>

080104b8 <__lo0bits>:
 80104b8:	6803      	ldr	r3, [r0, #0]
 80104ba:	f013 0207 	ands.w	r2, r3, #7
 80104be:	4601      	mov	r1, r0
 80104c0:	d00b      	beq.n	80104da <__lo0bits+0x22>
 80104c2:	07da      	lsls	r2, r3, #31
 80104c4:	d423      	bmi.n	801050e <__lo0bits+0x56>
 80104c6:	0798      	lsls	r0, r3, #30
 80104c8:	bf49      	itett	mi
 80104ca:	085b      	lsrmi	r3, r3, #1
 80104cc:	089b      	lsrpl	r3, r3, #2
 80104ce:	2001      	movmi	r0, #1
 80104d0:	600b      	strmi	r3, [r1, #0]
 80104d2:	bf5c      	itt	pl
 80104d4:	600b      	strpl	r3, [r1, #0]
 80104d6:	2002      	movpl	r0, #2
 80104d8:	4770      	bx	lr
 80104da:	b298      	uxth	r0, r3
 80104dc:	b9a8      	cbnz	r0, 801050a <__lo0bits+0x52>
 80104de:	0c1b      	lsrs	r3, r3, #16
 80104e0:	2010      	movs	r0, #16
 80104e2:	b2da      	uxtb	r2, r3
 80104e4:	b90a      	cbnz	r2, 80104ea <__lo0bits+0x32>
 80104e6:	3008      	adds	r0, #8
 80104e8:	0a1b      	lsrs	r3, r3, #8
 80104ea:	071a      	lsls	r2, r3, #28
 80104ec:	bf04      	itt	eq
 80104ee:	091b      	lsreq	r3, r3, #4
 80104f0:	3004      	addeq	r0, #4
 80104f2:	079a      	lsls	r2, r3, #30
 80104f4:	bf04      	itt	eq
 80104f6:	089b      	lsreq	r3, r3, #2
 80104f8:	3002      	addeq	r0, #2
 80104fa:	07da      	lsls	r2, r3, #31
 80104fc:	d403      	bmi.n	8010506 <__lo0bits+0x4e>
 80104fe:	085b      	lsrs	r3, r3, #1
 8010500:	f100 0001 	add.w	r0, r0, #1
 8010504:	d005      	beq.n	8010512 <__lo0bits+0x5a>
 8010506:	600b      	str	r3, [r1, #0]
 8010508:	4770      	bx	lr
 801050a:	4610      	mov	r0, r2
 801050c:	e7e9      	b.n	80104e2 <__lo0bits+0x2a>
 801050e:	2000      	movs	r0, #0
 8010510:	4770      	bx	lr
 8010512:	2020      	movs	r0, #32
 8010514:	4770      	bx	lr
	...

08010518 <__i2b>:
 8010518:	b510      	push	{r4, lr}
 801051a:	460c      	mov	r4, r1
 801051c:	2101      	movs	r1, #1
 801051e:	f7ff feb9 	bl	8010294 <_Balloc>
 8010522:	4602      	mov	r2, r0
 8010524:	b928      	cbnz	r0, 8010532 <__i2b+0x1a>
 8010526:	4b05      	ldr	r3, [pc, #20]	; (801053c <__i2b+0x24>)
 8010528:	4805      	ldr	r0, [pc, #20]	; (8010540 <__i2b+0x28>)
 801052a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801052e:	f000 ff91 	bl	8011454 <__assert_func>
 8010532:	2301      	movs	r3, #1
 8010534:	6144      	str	r4, [r0, #20]
 8010536:	6103      	str	r3, [r0, #16]
 8010538:	bd10      	pop	{r4, pc}
 801053a:	bf00      	nop
 801053c:	08011cac 	.word	0x08011cac
 8010540:	08011d4f 	.word	0x08011d4f

08010544 <__multiply>:
 8010544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010548:	4691      	mov	r9, r2
 801054a:	690a      	ldr	r2, [r1, #16]
 801054c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010550:	429a      	cmp	r2, r3
 8010552:	bfb8      	it	lt
 8010554:	460b      	movlt	r3, r1
 8010556:	460c      	mov	r4, r1
 8010558:	bfbc      	itt	lt
 801055a:	464c      	movlt	r4, r9
 801055c:	4699      	movlt	r9, r3
 801055e:	6927      	ldr	r7, [r4, #16]
 8010560:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010564:	68a3      	ldr	r3, [r4, #8]
 8010566:	6861      	ldr	r1, [r4, #4]
 8010568:	eb07 060a 	add.w	r6, r7, sl
 801056c:	42b3      	cmp	r3, r6
 801056e:	b085      	sub	sp, #20
 8010570:	bfb8      	it	lt
 8010572:	3101      	addlt	r1, #1
 8010574:	f7ff fe8e 	bl	8010294 <_Balloc>
 8010578:	b930      	cbnz	r0, 8010588 <__multiply+0x44>
 801057a:	4602      	mov	r2, r0
 801057c:	4b44      	ldr	r3, [pc, #272]	; (8010690 <__multiply+0x14c>)
 801057e:	4845      	ldr	r0, [pc, #276]	; (8010694 <__multiply+0x150>)
 8010580:	f240 115d 	movw	r1, #349	; 0x15d
 8010584:	f000 ff66 	bl	8011454 <__assert_func>
 8010588:	f100 0514 	add.w	r5, r0, #20
 801058c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010590:	462b      	mov	r3, r5
 8010592:	2200      	movs	r2, #0
 8010594:	4543      	cmp	r3, r8
 8010596:	d321      	bcc.n	80105dc <__multiply+0x98>
 8010598:	f104 0314 	add.w	r3, r4, #20
 801059c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80105a0:	f109 0314 	add.w	r3, r9, #20
 80105a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80105a8:	9202      	str	r2, [sp, #8]
 80105aa:	1b3a      	subs	r2, r7, r4
 80105ac:	3a15      	subs	r2, #21
 80105ae:	f022 0203 	bic.w	r2, r2, #3
 80105b2:	3204      	adds	r2, #4
 80105b4:	f104 0115 	add.w	r1, r4, #21
 80105b8:	428f      	cmp	r7, r1
 80105ba:	bf38      	it	cc
 80105bc:	2204      	movcc	r2, #4
 80105be:	9201      	str	r2, [sp, #4]
 80105c0:	9a02      	ldr	r2, [sp, #8]
 80105c2:	9303      	str	r3, [sp, #12]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d80c      	bhi.n	80105e2 <__multiply+0x9e>
 80105c8:	2e00      	cmp	r6, #0
 80105ca:	dd03      	ble.n	80105d4 <__multiply+0x90>
 80105cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d05a      	beq.n	801068a <__multiply+0x146>
 80105d4:	6106      	str	r6, [r0, #16]
 80105d6:	b005      	add	sp, #20
 80105d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105dc:	f843 2b04 	str.w	r2, [r3], #4
 80105e0:	e7d8      	b.n	8010594 <__multiply+0x50>
 80105e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80105e6:	f1ba 0f00 	cmp.w	sl, #0
 80105ea:	d024      	beq.n	8010636 <__multiply+0xf2>
 80105ec:	f104 0e14 	add.w	lr, r4, #20
 80105f0:	46a9      	mov	r9, r5
 80105f2:	f04f 0c00 	mov.w	ip, #0
 80105f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80105fa:	f8d9 1000 	ldr.w	r1, [r9]
 80105fe:	fa1f fb82 	uxth.w	fp, r2
 8010602:	b289      	uxth	r1, r1
 8010604:	fb0a 110b 	mla	r1, sl, fp, r1
 8010608:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801060c:	f8d9 2000 	ldr.w	r2, [r9]
 8010610:	4461      	add	r1, ip
 8010612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010616:	fb0a c20b 	mla	r2, sl, fp, ip
 801061a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801061e:	b289      	uxth	r1, r1
 8010620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010624:	4577      	cmp	r7, lr
 8010626:	f849 1b04 	str.w	r1, [r9], #4
 801062a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801062e:	d8e2      	bhi.n	80105f6 <__multiply+0xb2>
 8010630:	9a01      	ldr	r2, [sp, #4]
 8010632:	f845 c002 	str.w	ip, [r5, r2]
 8010636:	9a03      	ldr	r2, [sp, #12]
 8010638:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801063c:	3304      	adds	r3, #4
 801063e:	f1b9 0f00 	cmp.w	r9, #0
 8010642:	d020      	beq.n	8010686 <__multiply+0x142>
 8010644:	6829      	ldr	r1, [r5, #0]
 8010646:	f104 0c14 	add.w	ip, r4, #20
 801064a:	46ae      	mov	lr, r5
 801064c:	f04f 0a00 	mov.w	sl, #0
 8010650:	f8bc b000 	ldrh.w	fp, [ip]
 8010654:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010658:	fb09 220b 	mla	r2, r9, fp, r2
 801065c:	4492      	add	sl, r2
 801065e:	b289      	uxth	r1, r1
 8010660:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010664:	f84e 1b04 	str.w	r1, [lr], #4
 8010668:	f85c 2b04 	ldr.w	r2, [ip], #4
 801066c:	f8be 1000 	ldrh.w	r1, [lr]
 8010670:	0c12      	lsrs	r2, r2, #16
 8010672:	fb09 1102 	mla	r1, r9, r2, r1
 8010676:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801067a:	4567      	cmp	r7, ip
 801067c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010680:	d8e6      	bhi.n	8010650 <__multiply+0x10c>
 8010682:	9a01      	ldr	r2, [sp, #4]
 8010684:	50a9      	str	r1, [r5, r2]
 8010686:	3504      	adds	r5, #4
 8010688:	e79a      	b.n	80105c0 <__multiply+0x7c>
 801068a:	3e01      	subs	r6, #1
 801068c:	e79c      	b.n	80105c8 <__multiply+0x84>
 801068e:	bf00      	nop
 8010690:	08011cac 	.word	0x08011cac
 8010694:	08011d4f 	.word	0x08011d4f

08010698 <__pow5mult>:
 8010698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801069c:	4615      	mov	r5, r2
 801069e:	f012 0203 	ands.w	r2, r2, #3
 80106a2:	4606      	mov	r6, r0
 80106a4:	460f      	mov	r7, r1
 80106a6:	d007      	beq.n	80106b8 <__pow5mult+0x20>
 80106a8:	4c25      	ldr	r4, [pc, #148]	; (8010740 <__pow5mult+0xa8>)
 80106aa:	3a01      	subs	r2, #1
 80106ac:	2300      	movs	r3, #0
 80106ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106b2:	f7ff fe51 	bl	8010358 <__multadd>
 80106b6:	4607      	mov	r7, r0
 80106b8:	10ad      	asrs	r5, r5, #2
 80106ba:	d03d      	beq.n	8010738 <__pow5mult+0xa0>
 80106bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80106be:	b97c      	cbnz	r4, 80106e0 <__pow5mult+0x48>
 80106c0:	2010      	movs	r0, #16
 80106c2:	f000 ff19 	bl	80114f8 <malloc>
 80106c6:	4602      	mov	r2, r0
 80106c8:	6270      	str	r0, [r6, #36]	; 0x24
 80106ca:	b928      	cbnz	r0, 80106d8 <__pow5mult+0x40>
 80106cc:	4b1d      	ldr	r3, [pc, #116]	; (8010744 <__pow5mult+0xac>)
 80106ce:	481e      	ldr	r0, [pc, #120]	; (8010748 <__pow5mult+0xb0>)
 80106d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80106d4:	f000 febe 	bl	8011454 <__assert_func>
 80106d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106dc:	6004      	str	r4, [r0, #0]
 80106de:	60c4      	str	r4, [r0, #12]
 80106e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80106e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106e8:	b94c      	cbnz	r4, 80106fe <__pow5mult+0x66>
 80106ea:	f240 2171 	movw	r1, #625	; 0x271
 80106ee:	4630      	mov	r0, r6
 80106f0:	f7ff ff12 	bl	8010518 <__i2b>
 80106f4:	2300      	movs	r3, #0
 80106f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80106fa:	4604      	mov	r4, r0
 80106fc:	6003      	str	r3, [r0, #0]
 80106fe:	f04f 0900 	mov.w	r9, #0
 8010702:	07eb      	lsls	r3, r5, #31
 8010704:	d50a      	bpl.n	801071c <__pow5mult+0x84>
 8010706:	4639      	mov	r1, r7
 8010708:	4622      	mov	r2, r4
 801070a:	4630      	mov	r0, r6
 801070c:	f7ff ff1a 	bl	8010544 <__multiply>
 8010710:	4639      	mov	r1, r7
 8010712:	4680      	mov	r8, r0
 8010714:	4630      	mov	r0, r6
 8010716:	f7ff fdfd 	bl	8010314 <_Bfree>
 801071a:	4647      	mov	r7, r8
 801071c:	106d      	asrs	r5, r5, #1
 801071e:	d00b      	beq.n	8010738 <__pow5mult+0xa0>
 8010720:	6820      	ldr	r0, [r4, #0]
 8010722:	b938      	cbnz	r0, 8010734 <__pow5mult+0x9c>
 8010724:	4622      	mov	r2, r4
 8010726:	4621      	mov	r1, r4
 8010728:	4630      	mov	r0, r6
 801072a:	f7ff ff0b 	bl	8010544 <__multiply>
 801072e:	6020      	str	r0, [r4, #0]
 8010730:	f8c0 9000 	str.w	r9, [r0]
 8010734:	4604      	mov	r4, r0
 8010736:	e7e4      	b.n	8010702 <__pow5mult+0x6a>
 8010738:	4638      	mov	r0, r7
 801073a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801073e:	bf00      	nop
 8010740:	08011ea0 	.word	0x08011ea0
 8010744:	08011d38 	.word	0x08011d38
 8010748:	08011d4f 	.word	0x08011d4f

0801074c <__lshift>:
 801074c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010750:	460c      	mov	r4, r1
 8010752:	6849      	ldr	r1, [r1, #4]
 8010754:	6923      	ldr	r3, [r4, #16]
 8010756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801075a:	68a3      	ldr	r3, [r4, #8]
 801075c:	4607      	mov	r7, r0
 801075e:	4691      	mov	r9, r2
 8010760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010764:	f108 0601 	add.w	r6, r8, #1
 8010768:	42b3      	cmp	r3, r6
 801076a:	db0b      	blt.n	8010784 <__lshift+0x38>
 801076c:	4638      	mov	r0, r7
 801076e:	f7ff fd91 	bl	8010294 <_Balloc>
 8010772:	4605      	mov	r5, r0
 8010774:	b948      	cbnz	r0, 801078a <__lshift+0x3e>
 8010776:	4602      	mov	r2, r0
 8010778:	4b2a      	ldr	r3, [pc, #168]	; (8010824 <__lshift+0xd8>)
 801077a:	482b      	ldr	r0, [pc, #172]	; (8010828 <__lshift+0xdc>)
 801077c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010780:	f000 fe68 	bl	8011454 <__assert_func>
 8010784:	3101      	adds	r1, #1
 8010786:	005b      	lsls	r3, r3, #1
 8010788:	e7ee      	b.n	8010768 <__lshift+0x1c>
 801078a:	2300      	movs	r3, #0
 801078c:	f100 0114 	add.w	r1, r0, #20
 8010790:	f100 0210 	add.w	r2, r0, #16
 8010794:	4618      	mov	r0, r3
 8010796:	4553      	cmp	r3, sl
 8010798:	db37      	blt.n	801080a <__lshift+0xbe>
 801079a:	6920      	ldr	r0, [r4, #16]
 801079c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107a0:	f104 0314 	add.w	r3, r4, #20
 80107a4:	f019 091f 	ands.w	r9, r9, #31
 80107a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80107b0:	d02f      	beq.n	8010812 <__lshift+0xc6>
 80107b2:	f1c9 0e20 	rsb	lr, r9, #32
 80107b6:	468a      	mov	sl, r1
 80107b8:	f04f 0c00 	mov.w	ip, #0
 80107bc:	681a      	ldr	r2, [r3, #0]
 80107be:	fa02 f209 	lsl.w	r2, r2, r9
 80107c2:	ea42 020c 	orr.w	r2, r2, ip
 80107c6:	f84a 2b04 	str.w	r2, [sl], #4
 80107ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80107ce:	4298      	cmp	r0, r3
 80107d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80107d4:	d8f2      	bhi.n	80107bc <__lshift+0x70>
 80107d6:	1b03      	subs	r3, r0, r4
 80107d8:	3b15      	subs	r3, #21
 80107da:	f023 0303 	bic.w	r3, r3, #3
 80107de:	3304      	adds	r3, #4
 80107e0:	f104 0215 	add.w	r2, r4, #21
 80107e4:	4290      	cmp	r0, r2
 80107e6:	bf38      	it	cc
 80107e8:	2304      	movcc	r3, #4
 80107ea:	f841 c003 	str.w	ip, [r1, r3]
 80107ee:	f1bc 0f00 	cmp.w	ip, #0
 80107f2:	d001      	beq.n	80107f8 <__lshift+0xac>
 80107f4:	f108 0602 	add.w	r6, r8, #2
 80107f8:	3e01      	subs	r6, #1
 80107fa:	4638      	mov	r0, r7
 80107fc:	612e      	str	r6, [r5, #16]
 80107fe:	4621      	mov	r1, r4
 8010800:	f7ff fd88 	bl	8010314 <_Bfree>
 8010804:	4628      	mov	r0, r5
 8010806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801080a:	f842 0f04 	str.w	r0, [r2, #4]!
 801080e:	3301      	adds	r3, #1
 8010810:	e7c1      	b.n	8010796 <__lshift+0x4a>
 8010812:	3904      	subs	r1, #4
 8010814:	f853 2b04 	ldr.w	r2, [r3], #4
 8010818:	f841 2f04 	str.w	r2, [r1, #4]!
 801081c:	4298      	cmp	r0, r3
 801081e:	d8f9      	bhi.n	8010814 <__lshift+0xc8>
 8010820:	e7ea      	b.n	80107f8 <__lshift+0xac>
 8010822:	bf00      	nop
 8010824:	08011cac 	.word	0x08011cac
 8010828:	08011d4f 	.word	0x08011d4f

0801082c <__mcmp>:
 801082c:	b530      	push	{r4, r5, lr}
 801082e:	6902      	ldr	r2, [r0, #16]
 8010830:	690c      	ldr	r4, [r1, #16]
 8010832:	1b12      	subs	r2, r2, r4
 8010834:	d10e      	bne.n	8010854 <__mcmp+0x28>
 8010836:	f100 0314 	add.w	r3, r0, #20
 801083a:	3114      	adds	r1, #20
 801083c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801084c:	42a5      	cmp	r5, r4
 801084e:	d003      	beq.n	8010858 <__mcmp+0x2c>
 8010850:	d305      	bcc.n	801085e <__mcmp+0x32>
 8010852:	2201      	movs	r2, #1
 8010854:	4610      	mov	r0, r2
 8010856:	bd30      	pop	{r4, r5, pc}
 8010858:	4283      	cmp	r3, r0
 801085a:	d3f3      	bcc.n	8010844 <__mcmp+0x18>
 801085c:	e7fa      	b.n	8010854 <__mcmp+0x28>
 801085e:	f04f 32ff 	mov.w	r2, #4294967295
 8010862:	e7f7      	b.n	8010854 <__mcmp+0x28>

08010864 <__mdiff>:
 8010864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010868:	460c      	mov	r4, r1
 801086a:	4606      	mov	r6, r0
 801086c:	4611      	mov	r1, r2
 801086e:	4620      	mov	r0, r4
 8010870:	4690      	mov	r8, r2
 8010872:	f7ff ffdb 	bl	801082c <__mcmp>
 8010876:	1e05      	subs	r5, r0, #0
 8010878:	d110      	bne.n	801089c <__mdiff+0x38>
 801087a:	4629      	mov	r1, r5
 801087c:	4630      	mov	r0, r6
 801087e:	f7ff fd09 	bl	8010294 <_Balloc>
 8010882:	b930      	cbnz	r0, 8010892 <__mdiff+0x2e>
 8010884:	4b3a      	ldr	r3, [pc, #232]	; (8010970 <__mdiff+0x10c>)
 8010886:	4602      	mov	r2, r0
 8010888:	f240 2132 	movw	r1, #562	; 0x232
 801088c:	4839      	ldr	r0, [pc, #228]	; (8010974 <__mdiff+0x110>)
 801088e:	f000 fde1 	bl	8011454 <__assert_func>
 8010892:	2301      	movs	r3, #1
 8010894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089c:	bfa4      	itt	ge
 801089e:	4643      	movge	r3, r8
 80108a0:	46a0      	movge	r8, r4
 80108a2:	4630      	mov	r0, r6
 80108a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80108a8:	bfa6      	itte	ge
 80108aa:	461c      	movge	r4, r3
 80108ac:	2500      	movge	r5, #0
 80108ae:	2501      	movlt	r5, #1
 80108b0:	f7ff fcf0 	bl	8010294 <_Balloc>
 80108b4:	b920      	cbnz	r0, 80108c0 <__mdiff+0x5c>
 80108b6:	4b2e      	ldr	r3, [pc, #184]	; (8010970 <__mdiff+0x10c>)
 80108b8:	4602      	mov	r2, r0
 80108ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80108be:	e7e5      	b.n	801088c <__mdiff+0x28>
 80108c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80108c4:	6926      	ldr	r6, [r4, #16]
 80108c6:	60c5      	str	r5, [r0, #12]
 80108c8:	f104 0914 	add.w	r9, r4, #20
 80108cc:	f108 0514 	add.w	r5, r8, #20
 80108d0:	f100 0e14 	add.w	lr, r0, #20
 80108d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80108d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80108dc:	f108 0210 	add.w	r2, r8, #16
 80108e0:	46f2      	mov	sl, lr
 80108e2:	2100      	movs	r1, #0
 80108e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80108e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80108ec:	fa1f f883 	uxth.w	r8, r3
 80108f0:	fa11 f18b 	uxtah	r1, r1, fp
 80108f4:	0c1b      	lsrs	r3, r3, #16
 80108f6:	eba1 0808 	sub.w	r8, r1, r8
 80108fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80108fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010902:	fa1f f888 	uxth.w	r8, r8
 8010906:	1419      	asrs	r1, r3, #16
 8010908:	454e      	cmp	r6, r9
 801090a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801090e:	f84a 3b04 	str.w	r3, [sl], #4
 8010912:	d8e7      	bhi.n	80108e4 <__mdiff+0x80>
 8010914:	1b33      	subs	r3, r6, r4
 8010916:	3b15      	subs	r3, #21
 8010918:	f023 0303 	bic.w	r3, r3, #3
 801091c:	3304      	adds	r3, #4
 801091e:	3415      	adds	r4, #21
 8010920:	42a6      	cmp	r6, r4
 8010922:	bf38      	it	cc
 8010924:	2304      	movcc	r3, #4
 8010926:	441d      	add	r5, r3
 8010928:	4473      	add	r3, lr
 801092a:	469e      	mov	lr, r3
 801092c:	462e      	mov	r6, r5
 801092e:	4566      	cmp	r6, ip
 8010930:	d30e      	bcc.n	8010950 <__mdiff+0xec>
 8010932:	f10c 0203 	add.w	r2, ip, #3
 8010936:	1b52      	subs	r2, r2, r5
 8010938:	f022 0203 	bic.w	r2, r2, #3
 801093c:	3d03      	subs	r5, #3
 801093e:	45ac      	cmp	ip, r5
 8010940:	bf38      	it	cc
 8010942:	2200      	movcc	r2, #0
 8010944:	441a      	add	r2, r3
 8010946:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801094a:	b17b      	cbz	r3, 801096c <__mdiff+0x108>
 801094c:	6107      	str	r7, [r0, #16]
 801094e:	e7a3      	b.n	8010898 <__mdiff+0x34>
 8010950:	f856 8b04 	ldr.w	r8, [r6], #4
 8010954:	fa11 f288 	uxtah	r2, r1, r8
 8010958:	1414      	asrs	r4, r2, #16
 801095a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801095e:	b292      	uxth	r2, r2
 8010960:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010964:	f84e 2b04 	str.w	r2, [lr], #4
 8010968:	1421      	asrs	r1, r4, #16
 801096a:	e7e0      	b.n	801092e <__mdiff+0xca>
 801096c:	3f01      	subs	r7, #1
 801096e:	e7ea      	b.n	8010946 <__mdiff+0xe2>
 8010970:	08011cac 	.word	0x08011cac
 8010974:	08011d4f 	.word	0x08011d4f

08010978 <__ulp>:
 8010978:	b082      	sub	sp, #8
 801097a:	ed8d 0b00 	vstr	d0, [sp]
 801097e:	9b01      	ldr	r3, [sp, #4]
 8010980:	4912      	ldr	r1, [pc, #72]	; (80109cc <__ulp+0x54>)
 8010982:	4019      	ands	r1, r3
 8010984:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010988:	2900      	cmp	r1, #0
 801098a:	dd05      	ble.n	8010998 <__ulp+0x20>
 801098c:	2200      	movs	r2, #0
 801098e:	460b      	mov	r3, r1
 8010990:	ec43 2b10 	vmov	d0, r2, r3
 8010994:	b002      	add	sp, #8
 8010996:	4770      	bx	lr
 8010998:	4249      	negs	r1, r1
 801099a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801099e:	ea4f 5021 	mov.w	r0, r1, asr #20
 80109a2:	f04f 0200 	mov.w	r2, #0
 80109a6:	f04f 0300 	mov.w	r3, #0
 80109aa:	da04      	bge.n	80109b6 <__ulp+0x3e>
 80109ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80109b0:	fa41 f300 	asr.w	r3, r1, r0
 80109b4:	e7ec      	b.n	8010990 <__ulp+0x18>
 80109b6:	f1a0 0114 	sub.w	r1, r0, #20
 80109ba:	291e      	cmp	r1, #30
 80109bc:	bfda      	itte	le
 80109be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80109c2:	fa20 f101 	lsrle.w	r1, r0, r1
 80109c6:	2101      	movgt	r1, #1
 80109c8:	460a      	mov	r2, r1
 80109ca:	e7e1      	b.n	8010990 <__ulp+0x18>
 80109cc:	7ff00000 	.word	0x7ff00000

080109d0 <__b2d>:
 80109d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d2:	6905      	ldr	r5, [r0, #16]
 80109d4:	f100 0714 	add.w	r7, r0, #20
 80109d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80109dc:	1f2e      	subs	r6, r5, #4
 80109de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80109e2:	4620      	mov	r0, r4
 80109e4:	f7ff fd48 	bl	8010478 <__hi0bits>
 80109e8:	f1c0 0320 	rsb	r3, r0, #32
 80109ec:	280a      	cmp	r0, #10
 80109ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010a6c <__b2d+0x9c>
 80109f2:	600b      	str	r3, [r1, #0]
 80109f4:	dc14      	bgt.n	8010a20 <__b2d+0x50>
 80109f6:	f1c0 0e0b 	rsb	lr, r0, #11
 80109fa:	fa24 f10e 	lsr.w	r1, r4, lr
 80109fe:	42b7      	cmp	r7, r6
 8010a00:	ea41 030c 	orr.w	r3, r1, ip
 8010a04:	bf34      	ite	cc
 8010a06:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010a0a:	2100      	movcs	r1, #0
 8010a0c:	3015      	adds	r0, #21
 8010a0e:	fa04 f000 	lsl.w	r0, r4, r0
 8010a12:	fa21 f10e 	lsr.w	r1, r1, lr
 8010a16:	ea40 0201 	orr.w	r2, r0, r1
 8010a1a:	ec43 2b10 	vmov	d0, r2, r3
 8010a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a20:	42b7      	cmp	r7, r6
 8010a22:	bf3a      	itte	cc
 8010a24:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010a28:	f1a5 0608 	subcc.w	r6, r5, #8
 8010a2c:	2100      	movcs	r1, #0
 8010a2e:	380b      	subs	r0, #11
 8010a30:	d017      	beq.n	8010a62 <__b2d+0x92>
 8010a32:	f1c0 0c20 	rsb	ip, r0, #32
 8010a36:	fa04 f500 	lsl.w	r5, r4, r0
 8010a3a:	42be      	cmp	r6, r7
 8010a3c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010a40:	ea45 0504 	orr.w	r5, r5, r4
 8010a44:	bf8c      	ite	hi
 8010a46:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010a4a:	2400      	movls	r4, #0
 8010a4c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010a50:	fa01 f000 	lsl.w	r0, r1, r0
 8010a54:	fa24 f40c 	lsr.w	r4, r4, ip
 8010a58:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010a5c:	ea40 0204 	orr.w	r2, r0, r4
 8010a60:	e7db      	b.n	8010a1a <__b2d+0x4a>
 8010a62:	ea44 030c 	orr.w	r3, r4, ip
 8010a66:	460a      	mov	r2, r1
 8010a68:	e7d7      	b.n	8010a1a <__b2d+0x4a>
 8010a6a:	bf00      	nop
 8010a6c:	3ff00000 	.word	0x3ff00000

08010a70 <__d2b>:
 8010a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a74:	4689      	mov	r9, r1
 8010a76:	2101      	movs	r1, #1
 8010a78:	ec57 6b10 	vmov	r6, r7, d0
 8010a7c:	4690      	mov	r8, r2
 8010a7e:	f7ff fc09 	bl	8010294 <_Balloc>
 8010a82:	4604      	mov	r4, r0
 8010a84:	b930      	cbnz	r0, 8010a94 <__d2b+0x24>
 8010a86:	4602      	mov	r2, r0
 8010a88:	4b25      	ldr	r3, [pc, #148]	; (8010b20 <__d2b+0xb0>)
 8010a8a:	4826      	ldr	r0, [pc, #152]	; (8010b24 <__d2b+0xb4>)
 8010a8c:	f240 310a 	movw	r1, #778	; 0x30a
 8010a90:	f000 fce0 	bl	8011454 <__assert_func>
 8010a94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010a98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010a9c:	bb35      	cbnz	r5, 8010aec <__d2b+0x7c>
 8010a9e:	2e00      	cmp	r6, #0
 8010aa0:	9301      	str	r3, [sp, #4]
 8010aa2:	d028      	beq.n	8010af6 <__d2b+0x86>
 8010aa4:	4668      	mov	r0, sp
 8010aa6:	9600      	str	r6, [sp, #0]
 8010aa8:	f7ff fd06 	bl	80104b8 <__lo0bits>
 8010aac:	9900      	ldr	r1, [sp, #0]
 8010aae:	b300      	cbz	r0, 8010af2 <__d2b+0x82>
 8010ab0:	9a01      	ldr	r2, [sp, #4]
 8010ab2:	f1c0 0320 	rsb	r3, r0, #32
 8010ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8010aba:	430b      	orrs	r3, r1
 8010abc:	40c2      	lsrs	r2, r0
 8010abe:	6163      	str	r3, [r4, #20]
 8010ac0:	9201      	str	r2, [sp, #4]
 8010ac2:	9b01      	ldr	r3, [sp, #4]
 8010ac4:	61a3      	str	r3, [r4, #24]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	bf14      	ite	ne
 8010aca:	2202      	movne	r2, #2
 8010acc:	2201      	moveq	r2, #1
 8010ace:	6122      	str	r2, [r4, #16]
 8010ad0:	b1d5      	cbz	r5, 8010b08 <__d2b+0x98>
 8010ad2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010ad6:	4405      	add	r5, r0
 8010ad8:	f8c9 5000 	str.w	r5, [r9]
 8010adc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010ae0:	f8c8 0000 	str.w	r0, [r8]
 8010ae4:	4620      	mov	r0, r4
 8010ae6:	b003      	add	sp, #12
 8010ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010af0:	e7d5      	b.n	8010a9e <__d2b+0x2e>
 8010af2:	6161      	str	r1, [r4, #20]
 8010af4:	e7e5      	b.n	8010ac2 <__d2b+0x52>
 8010af6:	a801      	add	r0, sp, #4
 8010af8:	f7ff fcde 	bl	80104b8 <__lo0bits>
 8010afc:	9b01      	ldr	r3, [sp, #4]
 8010afe:	6163      	str	r3, [r4, #20]
 8010b00:	2201      	movs	r2, #1
 8010b02:	6122      	str	r2, [r4, #16]
 8010b04:	3020      	adds	r0, #32
 8010b06:	e7e3      	b.n	8010ad0 <__d2b+0x60>
 8010b08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b10:	f8c9 0000 	str.w	r0, [r9]
 8010b14:	6918      	ldr	r0, [r3, #16]
 8010b16:	f7ff fcaf 	bl	8010478 <__hi0bits>
 8010b1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b1e:	e7df      	b.n	8010ae0 <__d2b+0x70>
 8010b20:	08011cac 	.word	0x08011cac
 8010b24:	08011d4f 	.word	0x08011d4f

08010b28 <__ratio>:
 8010b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b2c:	4688      	mov	r8, r1
 8010b2e:	4669      	mov	r1, sp
 8010b30:	4681      	mov	r9, r0
 8010b32:	f7ff ff4d 	bl	80109d0 <__b2d>
 8010b36:	a901      	add	r1, sp, #4
 8010b38:	4640      	mov	r0, r8
 8010b3a:	ec55 4b10 	vmov	r4, r5, d0
 8010b3e:	f7ff ff47 	bl	80109d0 <__b2d>
 8010b42:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b46:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010b4a:	eba3 0c02 	sub.w	ip, r3, r2
 8010b4e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010b52:	1a9b      	subs	r3, r3, r2
 8010b54:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010b58:	ec51 0b10 	vmov	r0, r1, d0
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	bfd6      	itet	le
 8010b60:	460a      	movle	r2, r1
 8010b62:	462a      	movgt	r2, r5
 8010b64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010b68:	468b      	mov	fp, r1
 8010b6a:	462f      	mov	r7, r5
 8010b6c:	bfd4      	ite	le
 8010b6e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010b72:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010b76:	4620      	mov	r0, r4
 8010b78:	ee10 2a10 	vmov	r2, s0
 8010b7c:	465b      	mov	r3, fp
 8010b7e:	4639      	mov	r1, r7
 8010b80:	f7ef fe64 	bl	800084c <__aeabi_ddiv>
 8010b84:	ec41 0b10 	vmov	d0, r0, r1
 8010b88:	b003      	add	sp, #12
 8010b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b8e <__copybits>:
 8010b8e:	3901      	subs	r1, #1
 8010b90:	b570      	push	{r4, r5, r6, lr}
 8010b92:	1149      	asrs	r1, r1, #5
 8010b94:	6914      	ldr	r4, [r2, #16]
 8010b96:	3101      	adds	r1, #1
 8010b98:	f102 0314 	add.w	r3, r2, #20
 8010b9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ba0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010ba4:	1f05      	subs	r5, r0, #4
 8010ba6:	42a3      	cmp	r3, r4
 8010ba8:	d30c      	bcc.n	8010bc4 <__copybits+0x36>
 8010baa:	1aa3      	subs	r3, r4, r2
 8010bac:	3b11      	subs	r3, #17
 8010bae:	f023 0303 	bic.w	r3, r3, #3
 8010bb2:	3211      	adds	r2, #17
 8010bb4:	42a2      	cmp	r2, r4
 8010bb6:	bf88      	it	hi
 8010bb8:	2300      	movhi	r3, #0
 8010bba:	4418      	add	r0, r3
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	4288      	cmp	r0, r1
 8010bc0:	d305      	bcc.n	8010bce <__copybits+0x40>
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	f853 6b04 	ldr.w	r6, [r3], #4
 8010bc8:	f845 6f04 	str.w	r6, [r5, #4]!
 8010bcc:	e7eb      	b.n	8010ba6 <__copybits+0x18>
 8010bce:	f840 3b04 	str.w	r3, [r0], #4
 8010bd2:	e7f4      	b.n	8010bbe <__copybits+0x30>

08010bd4 <__any_on>:
 8010bd4:	f100 0214 	add.w	r2, r0, #20
 8010bd8:	6900      	ldr	r0, [r0, #16]
 8010bda:	114b      	asrs	r3, r1, #5
 8010bdc:	4298      	cmp	r0, r3
 8010bde:	b510      	push	{r4, lr}
 8010be0:	db11      	blt.n	8010c06 <__any_on+0x32>
 8010be2:	dd0a      	ble.n	8010bfa <__any_on+0x26>
 8010be4:	f011 011f 	ands.w	r1, r1, #31
 8010be8:	d007      	beq.n	8010bfa <__any_on+0x26>
 8010bea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010bee:	fa24 f001 	lsr.w	r0, r4, r1
 8010bf2:	fa00 f101 	lsl.w	r1, r0, r1
 8010bf6:	428c      	cmp	r4, r1
 8010bf8:	d10b      	bne.n	8010c12 <__any_on+0x3e>
 8010bfa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d803      	bhi.n	8010c0a <__any_on+0x36>
 8010c02:	2000      	movs	r0, #0
 8010c04:	bd10      	pop	{r4, pc}
 8010c06:	4603      	mov	r3, r0
 8010c08:	e7f7      	b.n	8010bfa <__any_on+0x26>
 8010c0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c0e:	2900      	cmp	r1, #0
 8010c10:	d0f5      	beq.n	8010bfe <__any_on+0x2a>
 8010c12:	2001      	movs	r0, #1
 8010c14:	e7f6      	b.n	8010c04 <__any_on+0x30>

08010c16 <_calloc_r>:
 8010c16:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c18:	fba1 2402 	umull	r2, r4, r1, r2
 8010c1c:	b94c      	cbnz	r4, 8010c32 <_calloc_r+0x1c>
 8010c1e:	4611      	mov	r1, r2
 8010c20:	9201      	str	r2, [sp, #4]
 8010c22:	f000 f87b 	bl	8010d1c <_malloc_r>
 8010c26:	9a01      	ldr	r2, [sp, #4]
 8010c28:	4605      	mov	r5, r0
 8010c2a:	b930      	cbnz	r0, 8010c3a <_calloc_r+0x24>
 8010c2c:	4628      	mov	r0, r5
 8010c2e:	b003      	add	sp, #12
 8010c30:	bd30      	pop	{r4, r5, pc}
 8010c32:	220c      	movs	r2, #12
 8010c34:	6002      	str	r2, [r0, #0]
 8010c36:	2500      	movs	r5, #0
 8010c38:	e7f8      	b.n	8010c2c <_calloc_r+0x16>
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	f7fd faa6 	bl	800e18c <memset>
 8010c40:	e7f4      	b.n	8010c2c <_calloc_r+0x16>
	...

08010c44 <_free_r>:
 8010c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c46:	2900      	cmp	r1, #0
 8010c48:	d044      	beq.n	8010cd4 <_free_r+0x90>
 8010c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c4e:	9001      	str	r0, [sp, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	f1a1 0404 	sub.w	r4, r1, #4
 8010c56:	bfb8      	it	lt
 8010c58:	18e4      	addlt	r4, r4, r3
 8010c5a:	f000 fc6f 	bl	801153c <__malloc_lock>
 8010c5e:	4a1e      	ldr	r2, [pc, #120]	; (8010cd8 <_free_r+0x94>)
 8010c60:	9801      	ldr	r0, [sp, #4]
 8010c62:	6813      	ldr	r3, [r2, #0]
 8010c64:	b933      	cbnz	r3, 8010c74 <_free_r+0x30>
 8010c66:	6063      	str	r3, [r4, #4]
 8010c68:	6014      	str	r4, [r2, #0]
 8010c6a:	b003      	add	sp, #12
 8010c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c70:	f000 bc6a 	b.w	8011548 <__malloc_unlock>
 8010c74:	42a3      	cmp	r3, r4
 8010c76:	d908      	bls.n	8010c8a <_free_r+0x46>
 8010c78:	6825      	ldr	r5, [r4, #0]
 8010c7a:	1961      	adds	r1, r4, r5
 8010c7c:	428b      	cmp	r3, r1
 8010c7e:	bf01      	itttt	eq
 8010c80:	6819      	ldreq	r1, [r3, #0]
 8010c82:	685b      	ldreq	r3, [r3, #4]
 8010c84:	1949      	addeq	r1, r1, r5
 8010c86:	6021      	streq	r1, [r4, #0]
 8010c88:	e7ed      	b.n	8010c66 <_free_r+0x22>
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	685b      	ldr	r3, [r3, #4]
 8010c8e:	b10b      	cbz	r3, 8010c94 <_free_r+0x50>
 8010c90:	42a3      	cmp	r3, r4
 8010c92:	d9fa      	bls.n	8010c8a <_free_r+0x46>
 8010c94:	6811      	ldr	r1, [r2, #0]
 8010c96:	1855      	adds	r5, r2, r1
 8010c98:	42a5      	cmp	r5, r4
 8010c9a:	d10b      	bne.n	8010cb4 <_free_r+0x70>
 8010c9c:	6824      	ldr	r4, [r4, #0]
 8010c9e:	4421      	add	r1, r4
 8010ca0:	1854      	adds	r4, r2, r1
 8010ca2:	42a3      	cmp	r3, r4
 8010ca4:	6011      	str	r1, [r2, #0]
 8010ca6:	d1e0      	bne.n	8010c6a <_free_r+0x26>
 8010ca8:	681c      	ldr	r4, [r3, #0]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	6053      	str	r3, [r2, #4]
 8010cae:	4421      	add	r1, r4
 8010cb0:	6011      	str	r1, [r2, #0]
 8010cb2:	e7da      	b.n	8010c6a <_free_r+0x26>
 8010cb4:	d902      	bls.n	8010cbc <_free_r+0x78>
 8010cb6:	230c      	movs	r3, #12
 8010cb8:	6003      	str	r3, [r0, #0]
 8010cba:	e7d6      	b.n	8010c6a <_free_r+0x26>
 8010cbc:	6825      	ldr	r5, [r4, #0]
 8010cbe:	1961      	adds	r1, r4, r5
 8010cc0:	428b      	cmp	r3, r1
 8010cc2:	bf04      	itt	eq
 8010cc4:	6819      	ldreq	r1, [r3, #0]
 8010cc6:	685b      	ldreq	r3, [r3, #4]
 8010cc8:	6063      	str	r3, [r4, #4]
 8010cca:	bf04      	itt	eq
 8010ccc:	1949      	addeq	r1, r1, r5
 8010cce:	6021      	streq	r1, [r4, #0]
 8010cd0:	6054      	str	r4, [r2, #4]
 8010cd2:	e7ca      	b.n	8010c6a <_free_r+0x26>
 8010cd4:	b003      	add	sp, #12
 8010cd6:	bd30      	pop	{r4, r5, pc}
 8010cd8:	20002860 	.word	0x20002860

08010cdc <sbrk_aligned>:
 8010cdc:	b570      	push	{r4, r5, r6, lr}
 8010cde:	4e0e      	ldr	r6, [pc, #56]	; (8010d18 <sbrk_aligned+0x3c>)
 8010ce0:	460c      	mov	r4, r1
 8010ce2:	6831      	ldr	r1, [r6, #0]
 8010ce4:	4605      	mov	r5, r0
 8010ce6:	b911      	cbnz	r1, 8010cee <sbrk_aligned+0x12>
 8010ce8:	f000 fb96 	bl	8011418 <_sbrk_r>
 8010cec:	6030      	str	r0, [r6, #0]
 8010cee:	4621      	mov	r1, r4
 8010cf0:	4628      	mov	r0, r5
 8010cf2:	f000 fb91 	bl	8011418 <_sbrk_r>
 8010cf6:	1c43      	adds	r3, r0, #1
 8010cf8:	d00a      	beq.n	8010d10 <sbrk_aligned+0x34>
 8010cfa:	1cc4      	adds	r4, r0, #3
 8010cfc:	f024 0403 	bic.w	r4, r4, #3
 8010d00:	42a0      	cmp	r0, r4
 8010d02:	d007      	beq.n	8010d14 <sbrk_aligned+0x38>
 8010d04:	1a21      	subs	r1, r4, r0
 8010d06:	4628      	mov	r0, r5
 8010d08:	f000 fb86 	bl	8011418 <_sbrk_r>
 8010d0c:	3001      	adds	r0, #1
 8010d0e:	d101      	bne.n	8010d14 <sbrk_aligned+0x38>
 8010d10:	f04f 34ff 	mov.w	r4, #4294967295
 8010d14:	4620      	mov	r0, r4
 8010d16:	bd70      	pop	{r4, r5, r6, pc}
 8010d18:	20002864 	.word	0x20002864

08010d1c <_malloc_r>:
 8010d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d20:	1ccd      	adds	r5, r1, #3
 8010d22:	f025 0503 	bic.w	r5, r5, #3
 8010d26:	3508      	adds	r5, #8
 8010d28:	2d0c      	cmp	r5, #12
 8010d2a:	bf38      	it	cc
 8010d2c:	250c      	movcc	r5, #12
 8010d2e:	2d00      	cmp	r5, #0
 8010d30:	4607      	mov	r7, r0
 8010d32:	db01      	blt.n	8010d38 <_malloc_r+0x1c>
 8010d34:	42a9      	cmp	r1, r5
 8010d36:	d905      	bls.n	8010d44 <_malloc_r+0x28>
 8010d38:	230c      	movs	r3, #12
 8010d3a:	603b      	str	r3, [r7, #0]
 8010d3c:	2600      	movs	r6, #0
 8010d3e:	4630      	mov	r0, r6
 8010d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d44:	4e2e      	ldr	r6, [pc, #184]	; (8010e00 <_malloc_r+0xe4>)
 8010d46:	f000 fbf9 	bl	801153c <__malloc_lock>
 8010d4a:	6833      	ldr	r3, [r6, #0]
 8010d4c:	461c      	mov	r4, r3
 8010d4e:	bb34      	cbnz	r4, 8010d9e <_malloc_r+0x82>
 8010d50:	4629      	mov	r1, r5
 8010d52:	4638      	mov	r0, r7
 8010d54:	f7ff ffc2 	bl	8010cdc <sbrk_aligned>
 8010d58:	1c43      	adds	r3, r0, #1
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	d14d      	bne.n	8010dfa <_malloc_r+0xde>
 8010d5e:	6834      	ldr	r4, [r6, #0]
 8010d60:	4626      	mov	r6, r4
 8010d62:	2e00      	cmp	r6, #0
 8010d64:	d140      	bne.n	8010de8 <_malloc_r+0xcc>
 8010d66:	6823      	ldr	r3, [r4, #0]
 8010d68:	4631      	mov	r1, r6
 8010d6a:	4638      	mov	r0, r7
 8010d6c:	eb04 0803 	add.w	r8, r4, r3
 8010d70:	f000 fb52 	bl	8011418 <_sbrk_r>
 8010d74:	4580      	cmp	r8, r0
 8010d76:	d13a      	bne.n	8010dee <_malloc_r+0xd2>
 8010d78:	6821      	ldr	r1, [r4, #0]
 8010d7a:	3503      	adds	r5, #3
 8010d7c:	1a6d      	subs	r5, r5, r1
 8010d7e:	f025 0503 	bic.w	r5, r5, #3
 8010d82:	3508      	adds	r5, #8
 8010d84:	2d0c      	cmp	r5, #12
 8010d86:	bf38      	it	cc
 8010d88:	250c      	movcc	r5, #12
 8010d8a:	4629      	mov	r1, r5
 8010d8c:	4638      	mov	r0, r7
 8010d8e:	f7ff ffa5 	bl	8010cdc <sbrk_aligned>
 8010d92:	3001      	adds	r0, #1
 8010d94:	d02b      	beq.n	8010dee <_malloc_r+0xd2>
 8010d96:	6823      	ldr	r3, [r4, #0]
 8010d98:	442b      	add	r3, r5
 8010d9a:	6023      	str	r3, [r4, #0]
 8010d9c:	e00e      	b.n	8010dbc <_malloc_r+0xa0>
 8010d9e:	6822      	ldr	r2, [r4, #0]
 8010da0:	1b52      	subs	r2, r2, r5
 8010da2:	d41e      	bmi.n	8010de2 <_malloc_r+0xc6>
 8010da4:	2a0b      	cmp	r2, #11
 8010da6:	d916      	bls.n	8010dd6 <_malloc_r+0xba>
 8010da8:	1961      	adds	r1, r4, r5
 8010daa:	42a3      	cmp	r3, r4
 8010dac:	6025      	str	r5, [r4, #0]
 8010dae:	bf18      	it	ne
 8010db0:	6059      	strne	r1, [r3, #4]
 8010db2:	6863      	ldr	r3, [r4, #4]
 8010db4:	bf08      	it	eq
 8010db6:	6031      	streq	r1, [r6, #0]
 8010db8:	5162      	str	r2, [r4, r5]
 8010dba:	604b      	str	r3, [r1, #4]
 8010dbc:	4638      	mov	r0, r7
 8010dbe:	f104 060b 	add.w	r6, r4, #11
 8010dc2:	f000 fbc1 	bl	8011548 <__malloc_unlock>
 8010dc6:	f026 0607 	bic.w	r6, r6, #7
 8010dca:	1d23      	adds	r3, r4, #4
 8010dcc:	1af2      	subs	r2, r6, r3
 8010dce:	d0b6      	beq.n	8010d3e <_malloc_r+0x22>
 8010dd0:	1b9b      	subs	r3, r3, r6
 8010dd2:	50a3      	str	r3, [r4, r2]
 8010dd4:	e7b3      	b.n	8010d3e <_malloc_r+0x22>
 8010dd6:	6862      	ldr	r2, [r4, #4]
 8010dd8:	42a3      	cmp	r3, r4
 8010dda:	bf0c      	ite	eq
 8010ddc:	6032      	streq	r2, [r6, #0]
 8010dde:	605a      	strne	r2, [r3, #4]
 8010de0:	e7ec      	b.n	8010dbc <_malloc_r+0xa0>
 8010de2:	4623      	mov	r3, r4
 8010de4:	6864      	ldr	r4, [r4, #4]
 8010de6:	e7b2      	b.n	8010d4e <_malloc_r+0x32>
 8010de8:	4634      	mov	r4, r6
 8010dea:	6876      	ldr	r6, [r6, #4]
 8010dec:	e7b9      	b.n	8010d62 <_malloc_r+0x46>
 8010dee:	230c      	movs	r3, #12
 8010df0:	603b      	str	r3, [r7, #0]
 8010df2:	4638      	mov	r0, r7
 8010df4:	f000 fba8 	bl	8011548 <__malloc_unlock>
 8010df8:	e7a1      	b.n	8010d3e <_malloc_r+0x22>
 8010dfa:	6025      	str	r5, [r4, #0]
 8010dfc:	e7de      	b.n	8010dbc <_malloc_r+0xa0>
 8010dfe:	bf00      	nop
 8010e00:	20002860 	.word	0x20002860

08010e04 <__ssputs_r>:
 8010e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e08:	688e      	ldr	r6, [r1, #8]
 8010e0a:	429e      	cmp	r6, r3
 8010e0c:	4682      	mov	sl, r0
 8010e0e:	460c      	mov	r4, r1
 8010e10:	4690      	mov	r8, r2
 8010e12:	461f      	mov	r7, r3
 8010e14:	d838      	bhi.n	8010e88 <__ssputs_r+0x84>
 8010e16:	898a      	ldrh	r2, [r1, #12]
 8010e18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e1c:	d032      	beq.n	8010e84 <__ssputs_r+0x80>
 8010e1e:	6825      	ldr	r5, [r4, #0]
 8010e20:	6909      	ldr	r1, [r1, #16]
 8010e22:	eba5 0901 	sub.w	r9, r5, r1
 8010e26:	6965      	ldr	r5, [r4, #20]
 8010e28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e30:	3301      	adds	r3, #1
 8010e32:	444b      	add	r3, r9
 8010e34:	106d      	asrs	r5, r5, #1
 8010e36:	429d      	cmp	r5, r3
 8010e38:	bf38      	it	cc
 8010e3a:	461d      	movcc	r5, r3
 8010e3c:	0553      	lsls	r3, r2, #21
 8010e3e:	d531      	bpl.n	8010ea4 <__ssputs_r+0xa0>
 8010e40:	4629      	mov	r1, r5
 8010e42:	f7ff ff6b 	bl	8010d1c <_malloc_r>
 8010e46:	4606      	mov	r6, r0
 8010e48:	b950      	cbnz	r0, 8010e60 <__ssputs_r+0x5c>
 8010e4a:	230c      	movs	r3, #12
 8010e4c:	f8ca 3000 	str.w	r3, [sl]
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e56:	81a3      	strh	r3, [r4, #12]
 8010e58:	f04f 30ff 	mov.w	r0, #4294967295
 8010e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e60:	6921      	ldr	r1, [r4, #16]
 8010e62:	464a      	mov	r2, r9
 8010e64:	f7fd f984 	bl	800e170 <memcpy>
 8010e68:	89a3      	ldrh	r3, [r4, #12]
 8010e6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e72:	81a3      	strh	r3, [r4, #12]
 8010e74:	6126      	str	r6, [r4, #16]
 8010e76:	6165      	str	r5, [r4, #20]
 8010e78:	444e      	add	r6, r9
 8010e7a:	eba5 0509 	sub.w	r5, r5, r9
 8010e7e:	6026      	str	r6, [r4, #0]
 8010e80:	60a5      	str	r5, [r4, #8]
 8010e82:	463e      	mov	r6, r7
 8010e84:	42be      	cmp	r6, r7
 8010e86:	d900      	bls.n	8010e8a <__ssputs_r+0x86>
 8010e88:	463e      	mov	r6, r7
 8010e8a:	6820      	ldr	r0, [r4, #0]
 8010e8c:	4632      	mov	r2, r6
 8010e8e:	4641      	mov	r1, r8
 8010e90:	f000 fb3a 	bl	8011508 <memmove>
 8010e94:	68a3      	ldr	r3, [r4, #8]
 8010e96:	1b9b      	subs	r3, r3, r6
 8010e98:	60a3      	str	r3, [r4, #8]
 8010e9a:	6823      	ldr	r3, [r4, #0]
 8010e9c:	4433      	add	r3, r6
 8010e9e:	6023      	str	r3, [r4, #0]
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	e7db      	b.n	8010e5c <__ssputs_r+0x58>
 8010ea4:	462a      	mov	r2, r5
 8010ea6:	f000 fb55 	bl	8011554 <_realloc_r>
 8010eaa:	4606      	mov	r6, r0
 8010eac:	2800      	cmp	r0, #0
 8010eae:	d1e1      	bne.n	8010e74 <__ssputs_r+0x70>
 8010eb0:	6921      	ldr	r1, [r4, #16]
 8010eb2:	4650      	mov	r0, sl
 8010eb4:	f7ff fec6 	bl	8010c44 <_free_r>
 8010eb8:	e7c7      	b.n	8010e4a <__ssputs_r+0x46>
	...

08010ebc <_svfiprintf_r>:
 8010ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ec0:	4698      	mov	r8, r3
 8010ec2:	898b      	ldrh	r3, [r1, #12]
 8010ec4:	061b      	lsls	r3, r3, #24
 8010ec6:	b09d      	sub	sp, #116	; 0x74
 8010ec8:	4607      	mov	r7, r0
 8010eca:	460d      	mov	r5, r1
 8010ecc:	4614      	mov	r4, r2
 8010ece:	d50e      	bpl.n	8010eee <_svfiprintf_r+0x32>
 8010ed0:	690b      	ldr	r3, [r1, #16]
 8010ed2:	b963      	cbnz	r3, 8010eee <_svfiprintf_r+0x32>
 8010ed4:	2140      	movs	r1, #64	; 0x40
 8010ed6:	f7ff ff21 	bl	8010d1c <_malloc_r>
 8010eda:	6028      	str	r0, [r5, #0]
 8010edc:	6128      	str	r0, [r5, #16]
 8010ede:	b920      	cbnz	r0, 8010eea <_svfiprintf_r+0x2e>
 8010ee0:	230c      	movs	r3, #12
 8010ee2:	603b      	str	r3, [r7, #0]
 8010ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee8:	e0d1      	b.n	801108e <_svfiprintf_r+0x1d2>
 8010eea:	2340      	movs	r3, #64	; 0x40
 8010eec:	616b      	str	r3, [r5, #20]
 8010eee:	2300      	movs	r3, #0
 8010ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8010ef2:	2320      	movs	r3, #32
 8010ef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010ef8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010efc:	2330      	movs	r3, #48	; 0x30
 8010efe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80110a8 <_svfiprintf_r+0x1ec>
 8010f02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f06:	f04f 0901 	mov.w	r9, #1
 8010f0a:	4623      	mov	r3, r4
 8010f0c:	469a      	mov	sl, r3
 8010f0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f12:	b10a      	cbz	r2, 8010f18 <_svfiprintf_r+0x5c>
 8010f14:	2a25      	cmp	r2, #37	; 0x25
 8010f16:	d1f9      	bne.n	8010f0c <_svfiprintf_r+0x50>
 8010f18:	ebba 0b04 	subs.w	fp, sl, r4
 8010f1c:	d00b      	beq.n	8010f36 <_svfiprintf_r+0x7a>
 8010f1e:	465b      	mov	r3, fp
 8010f20:	4622      	mov	r2, r4
 8010f22:	4629      	mov	r1, r5
 8010f24:	4638      	mov	r0, r7
 8010f26:	f7ff ff6d 	bl	8010e04 <__ssputs_r>
 8010f2a:	3001      	adds	r0, #1
 8010f2c:	f000 80aa 	beq.w	8011084 <_svfiprintf_r+0x1c8>
 8010f30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010f32:	445a      	add	r2, fp
 8010f34:	9209      	str	r2, [sp, #36]	; 0x24
 8010f36:	f89a 3000 	ldrb.w	r3, [sl]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	f000 80a2 	beq.w	8011084 <_svfiprintf_r+0x1c8>
 8010f40:	2300      	movs	r3, #0
 8010f42:	f04f 32ff 	mov.w	r2, #4294967295
 8010f46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f4a:	f10a 0a01 	add.w	sl, sl, #1
 8010f4e:	9304      	str	r3, [sp, #16]
 8010f50:	9307      	str	r3, [sp, #28]
 8010f52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f56:	931a      	str	r3, [sp, #104]	; 0x68
 8010f58:	4654      	mov	r4, sl
 8010f5a:	2205      	movs	r2, #5
 8010f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f60:	4851      	ldr	r0, [pc, #324]	; (80110a8 <_svfiprintf_r+0x1ec>)
 8010f62:	f7ef f93d 	bl	80001e0 <memchr>
 8010f66:	9a04      	ldr	r2, [sp, #16]
 8010f68:	b9d8      	cbnz	r0, 8010fa2 <_svfiprintf_r+0xe6>
 8010f6a:	06d0      	lsls	r0, r2, #27
 8010f6c:	bf44      	itt	mi
 8010f6e:	2320      	movmi	r3, #32
 8010f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f74:	0711      	lsls	r1, r2, #28
 8010f76:	bf44      	itt	mi
 8010f78:	232b      	movmi	r3, #43	; 0x2b
 8010f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f82:	2b2a      	cmp	r3, #42	; 0x2a
 8010f84:	d015      	beq.n	8010fb2 <_svfiprintf_r+0xf6>
 8010f86:	9a07      	ldr	r2, [sp, #28]
 8010f88:	4654      	mov	r4, sl
 8010f8a:	2000      	movs	r0, #0
 8010f8c:	f04f 0c0a 	mov.w	ip, #10
 8010f90:	4621      	mov	r1, r4
 8010f92:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f96:	3b30      	subs	r3, #48	; 0x30
 8010f98:	2b09      	cmp	r3, #9
 8010f9a:	d94e      	bls.n	801103a <_svfiprintf_r+0x17e>
 8010f9c:	b1b0      	cbz	r0, 8010fcc <_svfiprintf_r+0x110>
 8010f9e:	9207      	str	r2, [sp, #28]
 8010fa0:	e014      	b.n	8010fcc <_svfiprintf_r+0x110>
 8010fa2:	eba0 0308 	sub.w	r3, r0, r8
 8010fa6:	fa09 f303 	lsl.w	r3, r9, r3
 8010faa:	4313      	orrs	r3, r2
 8010fac:	9304      	str	r3, [sp, #16]
 8010fae:	46a2      	mov	sl, r4
 8010fb0:	e7d2      	b.n	8010f58 <_svfiprintf_r+0x9c>
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	1d19      	adds	r1, r3, #4
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	9103      	str	r1, [sp, #12]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	bfbb      	ittet	lt
 8010fbe:	425b      	neglt	r3, r3
 8010fc0:	f042 0202 	orrlt.w	r2, r2, #2
 8010fc4:	9307      	strge	r3, [sp, #28]
 8010fc6:	9307      	strlt	r3, [sp, #28]
 8010fc8:	bfb8      	it	lt
 8010fca:	9204      	strlt	r2, [sp, #16]
 8010fcc:	7823      	ldrb	r3, [r4, #0]
 8010fce:	2b2e      	cmp	r3, #46	; 0x2e
 8010fd0:	d10c      	bne.n	8010fec <_svfiprintf_r+0x130>
 8010fd2:	7863      	ldrb	r3, [r4, #1]
 8010fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8010fd6:	d135      	bne.n	8011044 <_svfiprintf_r+0x188>
 8010fd8:	9b03      	ldr	r3, [sp, #12]
 8010fda:	1d1a      	adds	r2, r3, #4
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	9203      	str	r2, [sp, #12]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	bfb8      	it	lt
 8010fe4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fe8:	3402      	adds	r4, #2
 8010fea:	9305      	str	r3, [sp, #20]
 8010fec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80110b8 <_svfiprintf_r+0x1fc>
 8010ff0:	7821      	ldrb	r1, [r4, #0]
 8010ff2:	2203      	movs	r2, #3
 8010ff4:	4650      	mov	r0, sl
 8010ff6:	f7ef f8f3 	bl	80001e0 <memchr>
 8010ffa:	b140      	cbz	r0, 801100e <_svfiprintf_r+0x152>
 8010ffc:	2340      	movs	r3, #64	; 0x40
 8010ffe:	eba0 000a 	sub.w	r0, r0, sl
 8011002:	fa03 f000 	lsl.w	r0, r3, r0
 8011006:	9b04      	ldr	r3, [sp, #16]
 8011008:	4303      	orrs	r3, r0
 801100a:	3401      	adds	r4, #1
 801100c:	9304      	str	r3, [sp, #16]
 801100e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011012:	4826      	ldr	r0, [pc, #152]	; (80110ac <_svfiprintf_r+0x1f0>)
 8011014:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011018:	2206      	movs	r2, #6
 801101a:	f7ef f8e1 	bl	80001e0 <memchr>
 801101e:	2800      	cmp	r0, #0
 8011020:	d038      	beq.n	8011094 <_svfiprintf_r+0x1d8>
 8011022:	4b23      	ldr	r3, [pc, #140]	; (80110b0 <_svfiprintf_r+0x1f4>)
 8011024:	bb1b      	cbnz	r3, 801106e <_svfiprintf_r+0x1b2>
 8011026:	9b03      	ldr	r3, [sp, #12]
 8011028:	3307      	adds	r3, #7
 801102a:	f023 0307 	bic.w	r3, r3, #7
 801102e:	3308      	adds	r3, #8
 8011030:	9303      	str	r3, [sp, #12]
 8011032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011034:	4433      	add	r3, r6
 8011036:	9309      	str	r3, [sp, #36]	; 0x24
 8011038:	e767      	b.n	8010f0a <_svfiprintf_r+0x4e>
 801103a:	fb0c 3202 	mla	r2, ip, r2, r3
 801103e:	460c      	mov	r4, r1
 8011040:	2001      	movs	r0, #1
 8011042:	e7a5      	b.n	8010f90 <_svfiprintf_r+0xd4>
 8011044:	2300      	movs	r3, #0
 8011046:	3401      	adds	r4, #1
 8011048:	9305      	str	r3, [sp, #20]
 801104a:	4619      	mov	r1, r3
 801104c:	f04f 0c0a 	mov.w	ip, #10
 8011050:	4620      	mov	r0, r4
 8011052:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011056:	3a30      	subs	r2, #48	; 0x30
 8011058:	2a09      	cmp	r2, #9
 801105a:	d903      	bls.n	8011064 <_svfiprintf_r+0x1a8>
 801105c:	2b00      	cmp	r3, #0
 801105e:	d0c5      	beq.n	8010fec <_svfiprintf_r+0x130>
 8011060:	9105      	str	r1, [sp, #20]
 8011062:	e7c3      	b.n	8010fec <_svfiprintf_r+0x130>
 8011064:	fb0c 2101 	mla	r1, ip, r1, r2
 8011068:	4604      	mov	r4, r0
 801106a:	2301      	movs	r3, #1
 801106c:	e7f0      	b.n	8011050 <_svfiprintf_r+0x194>
 801106e:	ab03      	add	r3, sp, #12
 8011070:	9300      	str	r3, [sp, #0]
 8011072:	462a      	mov	r2, r5
 8011074:	4b0f      	ldr	r3, [pc, #60]	; (80110b4 <_svfiprintf_r+0x1f8>)
 8011076:	a904      	add	r1, sp, #16
 8011078:	4638      	mov	r0, r7
 801107a:	f3af 8000 	nop.w
 801107e:	1c42      	adds	r2, r0, #1
 8011080:	4606      	mov	r6, r0
 8011082:	d1d6      	bne.n	8011032 <_svfiprintf_r+0x176>
 8011084:	89ab      	ldrh	r3, [r5, #12]
 8011086:	065b      	lsls	r3, r3, #25
 8011088:	f53f af2c 	bmi.w	8010ee4 <_svfiprintf_r+0x28>
 801108c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801108e:	b01d      	add	sp, #116	; 0x74
 8011090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011094:	ab03      	add	r3, sp, #12
 8011096:	9300      	str	r3, [sp, #0]
 8011098:	462a      	mov	r2, r5
 801109a:	4b06      	ldr	r3, [pc, #24]	; (80110b4 <_svfiprintf_r+0x1f8>)
 801109c:	a904      	add	r1, sp, #16
 801109e:	4638      	mov	r0, r7
 80110a0:	f000 f87a 	bl	8011198 <_printf_i>
 80110a4:	e7eb      	b.n	801107e <_svfiprintf_r+0x1c2>
 80110a6:	bf00      	nop
 80110a8:	08011eac 	.word	0x08011eac
 80110ac:	08011eb6 	.word	0x08011eb6
 80110b0:	00000000 	.word	0x00000000
 80110b4:	08010e05 	.word	0x08010e05
 80110b8:	08011eb2 	.word	0x08011eb2

080110bc <_printf_common>:
 80110bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110c0:	4616      	mov	r6, r2
 80110c2:	4699      	mov	r9, r3
 80110c4:	688a      	ldr	r2, [r1, #8]
 80110c6:	690b      	ldr	r3, [r1, #16]
 80110c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80110cc:	4293      	cmp	r3, r2
 80110ce:	bfb8      	it	lt
 80110d0:	4613      	movlt	r3, r2
 80110d2:	6033      	str	r3, [r6, #0]
 80110d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80110d8:	4607      	mov	r7, r0
 80110da:	460c      	mov	r4, r1
 80110dc:	b10a      	cbz	r2, 80110e2 <_printf_common+0x26>
 80110de:	3301      	adds	r3, #1
 80110e0:	6033      	str	r3, [r6, #0]
 80110e2:	6823      	ldr	r3, [r4, #0]
 80110e4:	0699      	lsls	r1, r3, #26
 80110e6:	bf42      	ittt	mi
 80110e8:	6833      	ldrmi	r3, [r6, #0]
 80110ea:	3302      	addmi	r3, #2
 80110ec:	6033      	strmi	r3, [r6, #0]
 80110ee:	6825      	ldr	r5, [r4, #0]
 80110f0:	f015 0506 	ands.w	r5, r5, #6
 80110f4:	d106      	bne.n	8011104 <_printf_common+0x48>
 80110f6:	f104 0a19 	add.w	sl, r4, #25
 80110fa:	68e3      	ldr	r3, [r4, #12]
 80110fc:	6832      	ldr	r2, [r6, #0]
 80110fe:	1a9b      	subs	r3, r3, r2
 8011100:	42ab      	cmp	r3, r5
 8011102:	dc26      	bgt.n	8011152 <_printf_common+0x96>
 8011104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011108:	1e13      	subs	r3, r2, #0
 801110a:	6822      	ldr	r2, [r4, #0]
 801110c:	bf18      	it	ne
 801110e:	2301      	movne	r3, #1
 8011110:	0692      	lsls	r2, r2, #26
 8011112:	d42b      	bmi.n	801116c <_printf_common+0xb0>
 8011114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011118:	4649      	mov	r1, r9
 801111a:	4638      	mov	r0, r7
 801111c:	47c0      	blx	r8
 801111e:	3001      	adds	r0, #1
 8011120:	d01e      	beq.n	8011160 <_printf_common+0xa4>
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	68e5      	ldr	r5, [r4, #12]
 8011126:	6832      	ldr	r2, [r6, #0]
 8011128:	f003 0306 	and.w	r3, r3, #6
 801112c:	2b04      	cmp	r3, #4
 801112e:	bf08      	it	eq
 8011130:	1aad      	subeq	r5, r5, r2
 8011132:	68a3      	ldr	r3, [r4, #8]
 8011134:	6922      	ldr	r2, [r4, #16]
 8011136:	bf0c      	ite	eq
 8011138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801113c:	2500      	movne	r5, #0
 801113e:	4293      	cmp	r3, r2
 8011140:	bfc4      	itt	gt
 8011142:	1a9b      	subgt	r3, r3, r2
 8011144:	18ed      	addgt	r5, r5, r3
 8011146:	2600      	movs	r6, #0
 8011148:	341a      	adds	r4, #26
 801114a:	42b5      	cmp	r5, r6
 801114c:	d11a      	bne.n	8011184 <_printf_common+0xc8>
 801114e:	2000      	movs	r0, #0
 8011150:	e008      	b.n	8011164 <_printf_common+0xa8>
 8011152:	2301      	movs	r3, #1
 8011154:	4652      	mov	r2, sl
 8011156:	4649      	mov	r1, r9
 8011158:	4638      	mov	r0, r7
 801115a:	47c0      	blx	r8
 801115c:	3001      	adds	r0, #1
 801115e:	d103      	bne.n	8011168 <_printf_common+0xac>
 8011160:	f04f 30ff 	mov.w	r0, #4294967295
 8011164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011168:	3501      	adds	r5, #1
 801116a:	e7c6      	b.n	80110fa <_printf_common+0x3e>
 801116c:	18e1      	adds	r1, r4, r3
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	2030      	movs	r0, #48	; 0x30
 8011172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011176:	4422      	add	r2, r4
 8011178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801117c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011180:	3302      	adds	r3, #2
 8011182:	e7c7      	b.n	8011114 <_printf_common+0x58>
 8011184:	2301      	movs	r3, #1
 8011186:	4622      	mov	r2, r4
 8011188:	4649      	mov	r1, r9
 801118a:	4638      	mov	r0, r7
 801118c:	47c0      	blx	r8
 801118e:	3001      	adds	r0, #1
 8011190:	d0e6      	beq.n	8011160 <_printf_common+0xa4>
 8011192:	3601      	adds	r6, #1
 8011194:	e7d9      	b.n	801114a <_printf_common+0x8e>
	...

08011198 <_printf_i>:
 8011198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801119c:	7e0f      	ldrb	r7, [r1, #24]
 801119e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80111a0:	2f78      	cmp	r7, #120	; 0x78
 80111a2:	4691      	mov	r9, r2
 80111a4:	4680      	mov	r8, r0
 80111a6:	460c      	mov	r4, r1
 80111a8:	469a      	mov	sl, r3
 80111aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80111ae:	d807      	bhi.n	80111c0 <_printf_i+0x28>
 80111b0:	2f62      	cmp	r7, #98	; 0x62
 80111b2:	d80a      	bhi.n	80111ca <_printf_i+0x32>
 80111b4:	2f00      	cmp	r7, #0
 80111b6:	f000 80d8 	beq.w	801136a <_printf_i+0x1d2>
 80111ba:	2f58      	cmp	r7, #88	; 0x58
 80111bc:	f000 80a3 	beq.w	8011306 <_printf_i+0x16e>
 80111c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80111c8:	e03a      	b.n	8011240 <_printf_i+0xa8>
 80111ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80111ce:	2b15      	cmp	r3, #21
 80111d0:	d8f6      	bhi.n	80111c0 <_printf_i+0x28>
 80111d2:	a101      	add	r1, pc, #4	; (adr r1, 80111d8 <_printf_i+0x40>)
 80111d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111d8:	08011231 	.word	0x08011231
 80111dc:	08011245 	.word	0x08011245
 80111e0:	080111c1 	.word	0x080111c1
 80111e4:	080111c1 	.word	0x080111c1
 80111e8:	080111c1 	.word	0x080111c1
 80111ec:	080111c1 	.word	0x080111c1
 80111f0:	08011245 	.word	0x08011245
 80111f4:	080111c1 	.word	0x080111c1
 80111f8:	080111c1 	.word	0x080111c1
 80111fc:	080111c1 	.word	0x080111c1
 8011200:	080111c1 	.word	0x080111c1
 8011204:	08011351 	.word	0x08011351
 8011208:	08011275 	.word	0x08011275
 801120c:	08011333 	.word	0x08011333
 8011210:	080111c1 	.word	0x080111c1
 8011214:	080111c1 	.word	0x080111c1
 8011218:	08011373 	.word	0x08011373
 801121c:	080111c1 	.word	0x080111c1
 8011220:	08011275 	.word	0x08011275
 8011224:	080111c1 	.word	0x080111c1
 8011228:	080111c1 	.word	0x080111c1
 801122c:	0801133b 	.word	0x0801133b
 8011230:	682b      	ldr	r3, [r5, #0]
 8011232:	1d1a      	adds	r2, r3, #4
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	602a      	str	r2, [r5, #0]
 8011238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801123c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011240:	2301      	movs	r3, #1
 8011242:	e0a3      	b.n	801138c <_printf_i+0x1f4>
 8011244:	6820      	ldr	r0, [r4, #0]
 8011246:	6829      	ldr	r1, [r5, #0]
 8011248:	0606      	lsls	r6, r0, #24
 801124a:	f101 0304 	add.w	r3, r1, #4
 801124e:	d50a      	bpl.n	8011266 <_printf_i+0xce>
 8011250:	680e      	ldr	r6, [r1, #0]
 8011252:	602b      	str	r3, [r5, #0]
 8011254:	2e00      	cmp	r6, #0
 8011256:	da03      	bge.n	8011260 <_printf_i+0xc8>
 8011258:	232d      	movs	r3, #45	; 0x2d
 801125a:	4276      	negs	r6, r6
 801125c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011260:	485e      	ldr	r0, [pc, #376]	; (80113dc <_printf_i+0x244>)
 8011262:	230a      	movs	r3, #10
 8011264:	e019      	b.n	801129a <_printf_i+0x102>
 8011266:	680e      	ldr	r6, [r1, #0]
 8011268:	602b      	str	r3, [r5, #0]
 801126a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801126e:	bf18      	it	ne
 8011270:	b236      	sxthne	r6, r6
 8011272:	e7ef      	b.n	8011254 <_printf_i+0xbc>
 8011274:	682b      	ldr	r3, [r5, #0]
 8011276:	6820      	ldr	r0, [r4, #0]
 8011278:	1d19      	adds	r1, r3, #4
 801127a:	6029      	str	r1, [r5, #0]
 801127c:	0601      	lsls	r1, r0, #24
 801127e:	d501      	bpl.n	8011284 <_printf_i+0xec>
 8011280:	681e      	ldr	r6, [r3, #0]
 8011282:	e002      	b.n	801128a <_printf_i+0xf2>
 8011284:	0646      	lsls	r6, r0, #25
 8011286:	d5fb      	bpl.n	8011280 <_printf_i+0xe8>
 8011288:	881e      	ldrh	r6, [r3, #0]
 801128a:	4854      	ldr	r0, [pc, #336]	; (80113dc <_printf_i+0x244>)
 801128c:	2f6f      	cmp	r7, #111	; 0x6f
 801128e:	bf0c      	ite	eq
 8011290:	2308      	moveq	r3, #8
 8011292:	230a      	movne	r3, #10
 8011294:	2100      	movs	r1, #0
 8011296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801129a:	6865      	ldr	r5, [r4, #4]
 801129c:	60a5      	str	r5, [r4, #8]
 801129e:	2d00      	cmp	r5, #0
 80112a0:	bfa2      	ittt	ge
 80112a2:	6821      	ldrge	r1, [r4, #0]
 80112a4:	f021 0104 	bicge.w	r1, r1, #4
 80112a8:	6021      	strge	r1, [r4, #0]
 80112aa:	b90e      	cbnz	r6, 80112b0 <_printf_i+0x118>
 80112ac:	2d00      	cmp	r5, #0
 80112ae:	d04d      	beq.n	801134c <_printf_i+0x1b4>
 80112b0:	4615      	mov	r5, r2
 80112b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80112b6:	fb03 6711 	mls	r7, r3, r1, r6
 80112ba:	5dc7      	ldrb	r7, [r0, r7]
 80112bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80112c0:	4637      	mov	r7, r6
 80112c2:	42bb      	cmp	r3, r7
 80112c4:	460e      	mov	r6, r1
 80112c6:	d9f4      	bls.n	80112b2 <_printf_i+0x11a>
 80112c8:	2b08      	cmp	r3, #8
 80112ca:	d10b      	bne.n	80112e4 <_printf_i+0x14c>
 80112cc:	6823      	ldr	r3, [r4, #0]
 80112ce:	07de      	lsls	r6, r3, #31
 80112d0:	d508      	bpl.n	80112e4 <_printf_i+0x14c>
 80112d2:	6923      	ldr	r3, [r4, #16]
 80112d4:	6861      	ldr	r1, [r4, #4]
 80112d6:	4299      	cmp	r1, r3
 80112d8:	bfde      	ittt	le
 80112da:	2330      	movle	r3, #48	; 0x30
 80112dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80112e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80112e4:	1b52      	subs	r2, r2, r5
 80112e6:	6122      	str	r2, [r4, #16]
 80112e8:	f8cd a000 	str.w	sl, [sp]
 80112ec:	464b      	mov	r3, r9
 80112ee:	aa03      	add	r2, sp, #12
 80112f0:	4621      	mov	r1, r4
 80112f2:	4640      	mov	r0, r8
 80112f4:	f7ff fee2 	bl	80110bc <_printf_common>
 80112f8:	3001      	adds	r0, #1
 80112fa:	d14c      	bne.n	8011396 <_printf_i+0x1fe>
 80112fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011300:	b004      	add	sp, #16
 8011302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011306:	4835      	ldr	r0, [pc, #212]	; (80113dc <_printf_i+0x244>)
 8011308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801130c:	6829      	ldr	r1, [r5, #0]
 801130e:	6823      	ldr	r3, [r4, #0]
 8011310:	f851 6b04 	ldr.w	r6, [r1], #4
 8011314:	6029      	str	r1, [r5, #0]
 8011316:	061d      	lsls	r5, r3, #24
 8011318:	d514      	bpl.n	8011344 <_printf_i+0x1ac>
 801131a:	07df      	lsls	r7, r3, #31
 801131c:	bf44      	itt	mi
 801131e:	f043 0320 	orrmi.w	r3, r3, #32
 8011322:	6023      	strmi	r3, [r4, #0]
 8011324:	b91e      	cbnz	r6, 801132e <_printf_i+0x196>
 8011326:	6823      	ldr	r3, [r4, #0]
 8011328:	f023 0320 	bic.w	r3, r3, #32
 801132c:	6023      	str	r3, [r4, #0]
 801132e:	2310      	movs	r3, #16
 8011330:	e7b0      	b.n	8011294 <_printf_i+0xfc>
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	f043 0320 	orr.w	r3, r3, #32
 8011338:	6023      	str	r3, [r4, #0]
 801133a:	2378      	movs	r3, #120	; 0x78
 801133c:	4828      	ldr	r0, [pc, #160]	; (80113e0 <_printf_i+0x248>)
 801133e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011342:	e7e3      	b.n	801130c <_printf_i+0x174>
 8011344:	0659      	lsls	r1, r3, #25
 8011346:	bf48      	it	mi
 8011348:	b2b6      	uxthmi	r6, r6
 801134a:	e7e6      	b.n	801131a <_printf_i+0x182>
 801134c:	4615      	mov	r5, r2
 801134e:	e7bb      	b.n	80112c8 <_printf_i+0x130>
 8011350:	682b      	ldr	r3, [r5, #0]
 8011352:	6826      	ldr	r6, [r4, #0]
 8011354:	6961      	ldr	r1, [r4, #20]
 8011356:	1d18      	adds	r0, r3, #4
 8011358:	6028      	str	r0, [r5, #0]
 801135a:	0635      	lsls	r5, r6, #24
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	d501      	bpl.n	8011364 <_printf_i+0x1cc>
 8011360:	6019      	str	r1, [r3, #0]
 8011362:	e002      	b.n	801136a <_printf_i+0x1d2>
 8011364:	0670      	lsls	r0, r6, #25
 8011366:	d5fb      	bpl.n	8011360 <_printf_i+0x1c8>
 8011368:	8019      	strh	r1, [r3, #0]
 801136a:	2300      	movs	r3, #0
 801136c:	6123      	str	r3, [r4, #16]
 801136e:	4615      	mov	r5, r2
 8011370:	e7ba      	b.n	80112e8 <_printf_i+0x150>
 8011372:	682b      	ldr	r3, [r5, #0]
 8011374:	1d1a      	adds	r2, r3, #4
 8011376:	602a      	str	r2, [r5, #0]
 8011378:	681d      	ldr	r5, [r3, #0]
 801137a:	6862      	ldr	r2, [r4, #4]
 801137c:	2100      	movs	r1, #0
 801137e:	4628      	mov	r0, r5
 8011380:	f7ee ff2e 	bl	80001e0 <memchr>
 8011384:	b108      	cbz	r0, 801138a <_printf_i+0x1f2>
 8011386:	1b40      	subs	r0, r0, r5
 8011388:	6060      	str	r0, [r4, #4]
 801138a:	6863      	ldr	r3, [r4, #4]
 801138c:	6123      	str	r3, [r4, #16]
 801138e:	2300      	movs	r3, #0
 8011390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011394:	e7a8      	b.n	80112e8 <_printf_i+0x150>
 8011396:	6923      	ldr	r3, [r4, #16]
 8011398:	462a      	mov	r2, r5
 801139a:	4649      	mov	r1, r9
 801139c:	4640      	mov	r0, r8
 801139e:	47d0      	blx	sl
 80113a0:	3001      	adds	r0, #1
 80113a2:	d0ab      	beq.n	80112fc <_printf_i+0x164>
 80113a4:	6823      	ldr	r3, [r4, #0]
 80113a6:	079b      	lsls	r3, r3, #30
 80113a8:	d413      	bmi.n	80113d2 <_printf_i+0x23a>
 80113aa:	68e0      	ldr	r0, [r4, #12]
 80113ac:	9b03      	ldr	r3, [sp, #12]
 80113ae:	4298      	cmp	r0, r3
 80113b0:	bfb8      	it	lt
 80113b2:	4618      	movlt	r0, r3
 80113b4:	e7a4      	b.n	8011300 <_printf_i+0x168>
 80113b6:	2301      	movs	r3, #1
 80113b8:	4632      	mov	r2, r6
 80113ba:	4649      	mov	r1, r9
 80113bc:	4640      	mov	r0, r8
 80113be:	47d0      	blx	sl
 80113c0:	3001      	adds	r0, #1
 80113c2:	d09b      	beq.n	80112fc <_printf_i+0x164>
 80113c4:	3501      	adds	r5, #1
 80113c6:	68e3      	ldr	r3, [r4, #12]
 80113c8:	9903      	ldr	r1, [sp, #12]
 80113ca:	1a5b      	subs	r3, r3, r1
 80113cc:	42ab      	cmp	r3, r5
 80113ce:	dcf2      	bgt.n	80113b6 <_printf_i+0x21e>
 80113d0:	e7eb      	b.n	80113aa <_printf_i+0x212>
 80113d2:	2500      	movs	r5, #0
 80113d4:	f104 0619 	add.w	r6, r4, #25
 80113d8:	e7f5      	b.n	80113c6 <_printf_i+0x22e>
 80113da:	bf00      	nop
 80113dc:	08011ebd 	.word	0x08011ebd
 80113e0:	08011ece 	.word	0x08011ece

080113e4 <_read_r>:
 80113e4:	b538      	push	{r3, r4, r5, lr}
 80113e6:	4d07      	ldr	r5, [pc, #28]	; (8011404 <_read_r+0x20>)
 80113e8:	4604      	mov	r4, r0
 80113ea:	4608      	mov	r0, r1
 80113ec:	4611      	mov	r1, r2
 80113ee:	2200      	movs	r2, #0
 80113f0:	602a      	str	r2, [r5, #0]
 80113f2:	461a      	mov	r2, r3
 80113f4:	f7f1 fef4 	bl	80031e0 <_read>
 80113f8:	1c43      	adds	r3, r0, #1
 80113fa:	d102      	bne.n	8011402 <_read_r+0x1e>
 80113fc:	682b      	ldr	r3, [r5, #0]
 80113fe:	b103      	cbz	r3, 8011402 <_read_r+0x1e>
 8011400:	6023      	str	r3, [r4, #0]
 8011402:	bd38      	pop	{r3, r4, r5, pc}
 8011404:	20002868 	.word	0x20002868

08011408 <nan>:
 8011408:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011410 <nan+0x8>
 801140c:	4770      	bx	lr
 801140e:	bf00      	nop
 8011410:	00000000 	.word	0x00000000
 8011414:	7ff80000 	.word	0x7ff80000

08011418 <_sbrk_r>:
 8011418:	b538      	push	{r3, r4, r5, lr}
 801141a:	4d06      	ldr	r5, [pc, #24]	; (8011434 <_sbrk_r+0x1c>)
 801141c:	2300      	movs	r3, #0
 801141e:	4604      	mov	r4, r0
 8011420:	4608      	mov	r0, r1
 8011422:	602b      	str	r3, [r5, #0]
 8011424:	f7f1 ff4a 	bl	80032bc <_sbrk>
 8011428:	1c43      	adds	r3, r0, #1
 801142a:	d102      	bne.n	8011432 <_sbrk_r+0x1a>
 801142c:	682b      	ldr	r3, [r5, #0]
 801142e:	b103      	cbz	r3, 8011432 <_sbrk_r+0x1a>
 8011430:	6023      	str	r3, [r4, #0]
 8011432:	bd38      	pop	{r3, r4, r5, pc}
 8011434:	20002868 	.word	0x20002868

08011438 <__ascii_wctomb>:
 8011438:	b149      	cbz	r1, 801144e <__ascii_wctomb+0x16>
 801143a:	2aff      	cmp	r2, #255	; 0xff
 801143c:	bf85      	ittet	hi
 801143e:	238a      	movhi	r3, #138	; 0x8a
 8011440:	6003      	strhi	r3, [r0, #0]
 8011442:	700a      	strbls	r2, [r1, #0]
 8011444:	f04f 30ff 	movhi.w	r0, #4294967295
 8011448:	bf98      	it	ls
 801144a:	2001      	movls	r0, #1
 801144c:	4770      	bx	lr
 801144e:	4608      	mov	r0, r1
 8011450:	4770      	bx	lr
	...

08011454 <__assert_func>:
 8011454:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011456:	4614      	mov	r4, r2
 8011458:	461a      	mov	r2, r3
 801145a:	4b09      	ldr	r3, [pc, #36]	; (8011480 <__assert_func+0x2c>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	4605      	mov	r5, r0
 8011460:	68d8      	ldr	r0, [r3, #12]
 8011462:	b14c      	cbz	r4, 8011478 <__assert_func+0x24>
 8011464:	4b07      	ldr	r3, [pc, #28]	; (8011484 <__assert_func+0x30>)
 8011466:	9100      	str	r1, [sp, #0]
 8011468:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801146c:	4906      	ldr	r1, [pc, #24]	; (8011488 <__assert_func+0x34>)
 801146e:	462b      	mov	r3, r5
 8011470:	f000 f80e 	bl	8011490 <fiprintf>
 8011474:	f000 f9f6 	bl	8011864 <abort>
 8011478:	4b04      	ldr	r3, [pc, #16]	; (801148c <__assert_func+0x38>)
 801147a:	461c      	mov	r4, r3
 801147c:	e7f3      	b.n	8011466 <__assert_func+0x12>
 801147e:	bf00      	nop
 8011480:	20000010 	.word	0x20000010
 8011484:	08011edf 	.word	0x08011edf
 8011488:	08011eec 	.word	0x08011eec
 801148c:	08011f1a 	.word	0x08011f1a

08011490 <fiprintf>:
 8011490:	b40e      	push	{r1, r2, r3}
 8011492:	b503      	push	{r0, r1, lr}
 8011494:	4601      	mov	r1, r0
 8011496:	ab03      	add	r3, sp, #12
 8011498:	4805      	ldr	r0, [pc, #20]	; (80114b0 <fiprintf+0x20>)
 801149a:	f853 2b04 	ldr.w	r2, [r3], #4
 801149e:	6800      	ldr	r0, [r0, #0]
 80114a0:	9301      	str	r3, [sp, #4]
 80114a2:	f000 f8af 	bl	8011604 <_vfiprintf_r>
 80114a6:	b002      	add	sp, #8
 80114a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114ac:	b003      	add	sp, #12
 80114ae:	4770      	bx	lr
 80114b0:	20000010 	.word	0x20000010

080114b4 <_fstat_r>:
 80114b4:	b538      	push	{r3, r4, r5, lr}
 80114b6:	4d07      	ldr	r5, [pc, #28]	; (80114d4 <_fstat_r+0x20>)
 80114b8:	2300      	movs	r3, #0
 80114ba:	4604      	mov	r4, r0
 80114bc:	4608      	mov	r0, r1
 80114be:	4611      	mov	r1, r2
 80114c0:	602b      	str	r3, [r5, #0]
 80114c2:	f7f1 fed2 	bl	800326a <_fstat>
 80114c6:	1c43      	adds	r3, r0, #1
 80114c8:	d102      	bne.n	80114d0 <_fstat_r+0x1c>
 80114ca:	682b      	ldr	r3, [r5, #0]
 80114cc:	b103      	cbz	r3, 80114d0 <_fstat_r+0x1c>
 80114ce:	6023      	str	r3, [r4, #0]
 80114d0:	bd38      	pop	{r3, r4, r5, pc}
 80114d2:	bf00      	nop
 80114d4:	20002868 	.word	0x20002868

080114d8 <_isatty_r>:
 80114d8:	b538      	push	{r3, r4, r5, lr}
 80114da:	4d06      	ldr	r5, [pc, #24]	; (80114f4 <_isatty_r+0x1c>)
 80114dc:	2300      	movs	r3, #0
 80114de:	4604      	mov	r4, r0
 80114e0:	4608      	mov	r0, r1
 80114e2:	602b      	str	r3, [r5, #0]
 80114e4:	f7f1 fed1 	bl	800328a <_isatty>
 80114e8:	1c43      	adds	r3, r0, #1
 80114ea:	d102      	bne.n	80114f2 <_isatty_r+0x1a>
 80114ec:	682b      	ldr	r3, [r5, #0]
 80114ee:	b103      	cbz	r3, 80114f2 <_isatty_r+0x1a>
 80114f0:	6023      	str	r3, [r4, #0]
 80114f2:	bd38      	pop	{r3, r4, r5, pc}
 80114f4:	20002868 	.word	0x20002868

080114f8 <malloc>:
 80114f8:	4b02      	ldr	r3, [pc, #8]	; (8011504 <malloc+0xc>)
 80114fa:	4601      	mov	r1, r0
 80114fc:	6818      	ldr	r0, [r3, #0]
 80114fe:	f7ff bc0d 	b.w	8010d1c <_malloc_r>
 8011502:	bf00      	nop
 8011504:	20000010 	.word	0x20000010

08011508 <memmove>:
 8011508:	4288      	cmp	r0, r1
 801150a:	b510      	push	{r4, lr}
 801150c:	eb01 0402 	add.w	r4, r1, r2
 8011510:	d902      	bls.n	8011518 <memmove+0x10>
 8011512:	4284      	cmp	r4, r0
 8011514:	4623      	mov	r3, r4
 8011516:	d807      	bhi.n	8011528 <memmove+0x20>
 8011518:	1e43      	subs	r3, r0, #1
 801151a:	42a1      	cmp	r1, r4
 801151c:	d008      	beq.n	8011530 <memmove+0x28>
 801151e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011522:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011526:	e7f8      	b.n	801151a <memmove+0x12>
 8011528:	4402      	add	r2, r0
 801152a:	4601      	mov	r1, r0
 801152c:	428a      	cmp	r2, r1
 801152e:	d100      	bne.n	8011532 <memmove+0x2a>
 8011530:	bd10      	pop	{r4, pc}
 8011532:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011536:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801153a:	e7f7      	b.n	801152c <memmove+0x24>

0801153c <__malloc_lock>:
 801153c:	4801      	ldr	r0, [pc, #4]	; (8011544 <__malloc_lock+0x8>)
 801153e:	f7fe be1c 	b.w	801017a <__retarget_lock_acquire_recursive>
 8011542:	bf00      	nop
 8011544:	2000285c 	.word	0x2000285c

08011548 <__malloc_unlock>:
 8011548:	4801      	ldr	r0, [pc, #4]	; (8011550 <__malloc_unlock+0x8>)
 801154a:	f7fe be17 	b.w	801017c <__retarget_lock_release_recursive>
 801154e:	bf00      	nop
 8011550:	2000285c 	.word	0x2000285c

08011554 <_realloc_r>:
 8011554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011558:	4680      	mov	r8, r0
 801155a:	4614      	mov	r4, r2
 801155c:	460e      	mov	r6, r1
 801155e:	b921      	cbnz	r1, 801156a <_realloc_r+0x16>
 8011560:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011564:	4611      	mov	r1, r2
 8011566:	f7ff bbd9 	b.w	8010d1c <_malloc_r>
 801156a:	b92a      	cbnz	r2, 8011578 <_realloc_r+0x24>
 801156c:	f7ff fb6a 	bl	8010c44 <_free_r>
 8011570:	4625      	mov	r5, r4
 8011572:	4628      	mov	r0, r5
 8011574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011578:	f000 f97b 	bl	8011872 <_malloc_usable_size_r>
 801157c:	4284      	cmp	r4, r0
 801157e:	4607      	mov	r7, r0
 8011580:	d802      	bhi.n	8011588 <_realloc_r+0x34>
 8011582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011586:	d812      	bhi.n	80115ae <_realloc_r+0x5a>
 8011588:	4621      	mov	r1, r4
 801158a:	4640      	mov	r0, r8
 801158c:	f7ff fbc6 	bl	8010d1c <_malloc_r>
 8011590:	4605      	mov	r5, r0
 8011592:	2800      	cmp	r0, #0
 8011594:	d0ed      	beq.n	8011572 <_realloc_r+0x1e>
 8011596:	42bc      	cmp	r4, r7
 8011598:	4622      	mov	r2, r4
 801159a:	4631      	mov	r1, r6
 801159c:	bf28      	it	cs
 801159e:	463a      	movcs	r2, r7
 80115a0:	f7fc fde6 	bl	800e170 <memcpy>
 80115a4:	4631      	mov	r1, r6
 80115a6:	4640      	mov	r0, r8
 80115a8:	f7ff fb4c 	bl	8010c44 <_free_r>
 80115ac:	e7e1      	b.n	8011572 <_realloc_r+0x1e>
 80115ae:	4635      	mov	r5, r6
 80115b0:	e7df      	b.n	8011572 <_realloc_r+0x1e>

080115b2 <__sfputc_r>:
 80115b2:	6893      	ldr	r3, [r2, #8]
 80115b4:	3b01      	subs	r3, #1
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	b410      	push	{r4}
 80115ba:	6093      	str	r3, [r2, #8]
 80115bc:	da08      	bge.n	80115d0 <__sfputc_r+0x1e>
 80115be:	6994      	ldr	r4, [r2, #24]
 80115c0:	42a3      	cmp	r3, r4
 80115c2:	db01      	blt.n	80115c8 <__sfputc_r+0x16>
 80115c4:	290a      	cmp	r1, #10
 80115c6:	d103      	bne.n	80115d0 <__sfputc_r+0x1e>
 80115c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115cc:	f7fd bfcc 	b.w	800f568 <__swbuf_r>
 80115d0:	6813      	ldr	r3, [r2, #0]
 80115d2:	1c58      	adds	r0, r3, #1
 80115d4:	6010      	str	r0, [r2, #0]
 80115d6:	7019      	strb	r1, [r3, #0]
 80115d8:	4608      	mov	r0, r1
 80115da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115de:	4770      	bx	lr

080115e0 <__sfputs_r>:
 80115e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115e2:	4606      	mov	r6, r0
 80115e4:	460f      	mov	r7, r1
 80115e6:	4614      	mov	r4, r2
 80115e8:	18d5      	adds	r5, r2, r3
 80115ea:	42ac      	cmp	r4, r5
 80115ec:	d101      	bne.n	80115f2 <__sfputs_r+0x12>
 80115ee:	2000      	movs	r0, #0
 80115f0:	e007      	b.n	8011602 <__sfputs_r+0x22>
 80115f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115f6:	463a      	mov	r2, r7
 80115f8:	4630      	mov	r0, r6
 80115fa:	f7ff ffda 	bl	80115b2 <__sfputc_r>
 80115fe:	1c43      	adds	r3, r0, #1
 8011600:	d1f3      	bne.n	80115ea <__sfputs_r+0xa>
 8011602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011604 <_vfiprintf_r>:
 8011604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011608:	460d      	mov	r5, r1
 801160a:	b09d      	sub	sp, #116	; 0x74
 801160c:	4614      	mov	r4, r2
 801160e:	4698      	mov	r8, r3
 8011610:	4606      	mov	r6, r0
 8011612:	b118      	cbz	r0, 801161c <_vfiprintf_r+0x18>
 8011614:	6983      	ldr	r3, [r0, #24]
 8011616:	b90b      	cbnz	r3, 801161c <_vfiprintf_r+0x18>
 8011618:	f7fe f9a2 	bl	800f960 <__sinit>
 801161c:	4b89      	ldr	r3, [pc, #548]	; (8011844 <_vfiprintf_r+0x240>)
 801161e:	429d      	cmp	r5, r3
 8011620:	d11b      	bne.n	801165a <_vfiprintf_r+0x56>
 8011622:	6875      	ldr	r5, [r6, #4]
 8011624:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011626:	07d9      	lsls	r1, r3, #31
 8011628:	d405      	bmi.n	8011636 <_vfiprintf_r+0x32>
 801162a:	89ab      	ldrh	r3, [r5, #12]
 801162c:	059a      	lsls	r2, r3, #22
 801162e:	d402      	bmi.n	8011636 <_vfiprintf_r+0x32>
 8011630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011632:	f7fe fda2 	bl	801017a <__retarget_lock_acquire_recursive>
 8011636:	89ab      	ldrh	r3, [r5, #12]
 8011638:	071b      	lsls	r3, r3, #28
 801163a:	d501      	bpl.n	8011640 <_vfiprintf_r+0x3c>
 801163c:	692b      	ldr	r3, [r5, #16]
 801163e:	b9eb      	cbnz	r3, 801167c <_vfiprintf_r+0x78>
 8011640:	4629      	mov	r1, r5
 8011642:	4630      	mov	r0, r6
 8011644:	f7fd fff4 	bl	800f630 <__swsetup_r>
 8011648:	b1c0      	cbz	r0, 801167c <_vfiprintf_r+0x78>
 801164a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801164c:	07dc      	lsls	r4, r3, #31
 801164e:	d50e      	bpl.n	801166e <_vfiprintf_r+0x6a>
 8011650:	f04f 30ff 	mov.w	r0, #4294967295
 8011654:	b01d      	add	sp, #116	; 0x74
 8011656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801165a:	4b7b      	ldr	r3, [pc, #492]	; (8011848 <_vfiprintf_r+0x244>)
 801165c:	429d      	cmp	r5, r3
 801165e:	d101      	bne.n	8011664 <_vfiprintf_r+0x60>
 8011660:	68b5      	ldr	r5, [r6, #8]
 8011662:	e7df      	b.n	8011624 <_vfiprintf_r+0x20>
 8011664:	4b79      	ldr	r3, [pc, #484]	; (801184c <_vfiprintf_r+0x248>)
 8011666:	429d      	cmp	r5, r3
 8011668:	bf08      	it	eq
 801166a:	68f5      	ldreq	r5, [r6, #12]
 801166c:	e7da      	b.n	8011624 <_vfiprintf_r+0x20>
 801166e:	89ab      	ldrh	r3, [r5, #12]
 8011670:	0598      	lsls	r0, r3, #22
 8011672:	d4ed      	bmi.n	8011650 <_vfiprintf_r+0x4c>
 8011674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011676:	f7fe fd81 	bl	801017c <__retarget_lock_release_recursive>
 801167a:	e7e9      	b.n	8011650 <_vfiprintf_r+0x4c>
 801167c:	2300      	movs	r3, #0
 801167e:	9309      	str	r3, [sp, #36]	; 0x24
 8011680:	2320      	movs	r3, #32
 8011682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011686:	f8cd 800c 	str.w	r8, [sp, #12]
 801168a:	2330      	movs	r3, #48	; 0x30
 801168c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011850 <_vfiprintf_r+0x24c>
 8011690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011694:	f04f 0901 	mov.w	r9, #1
 8011698:	4623      	mov	r3, r4
 801169a:	469a      	mov	sl, r3
 801169c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116a0:	b10a      	cbz	r2, 80116a6 <_vfiprintf_r+0xa2>
 80116a2:	2a25      	cmp	r2, #37	; 0x25
 80116a4:	d1f9      	bne.n	801169a <_vfiprintf_r+0x96>
 80116a6:	ebba 0b04 	subs.w	fp, sl, r4
 80116aa:	d00b      	beq.n	80116c4 <_vfiprintf_r+0xc0>
 80116ac:	465b      	mov	r3, fp
 80116ae:	4622      	mov	r2, r4
 80116b0:	4629      	mov	r1, r5
 80116b2:	4630      	mov	r0, r6
 80116b4:	f7ff ff94 	bl	80115e0 <__sfputs_r>
 80116b8:	3001      	adds	r0, #1
 80116ba:	f000 80aa 	beq.w	8011812 <_vfiprintf_r+0x20e>
 80116be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116c0:	445a      	add	r2, fp
 80116c2:	9209      	str	r2, [sp, #36]	; 0x24
 80116c4:	f89a 3000 	ldrb.w	r3, [sl]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f000 80a2 	beq.w	8011812 <_vfiprintf_r+0x20e>
 80116ce:	2300      	movs	r3, #0
 80116d0:	f04f 32ff 	mov.w	r2, #4294967295
 80116d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116d8:	f10a 0a01 	add.w	sl, sl, #1
 80116dc:	9304      	str	r3, [sp, #16]
 80116de:	9307      	str	r3, [sp, #28]
 80116e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80116e4:	931a      	str	r3, [sp, #104]	; 0x68
 80116e6:	4654      	mov	r4, sl
 80116e8:	2205      	movs	r2, #5
 80116ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116ee:	4858      	ldr	r0, [pc, #352]	; (8011850 <_vfiprintf_r+0x24c>)
 80116f0:	f7ee fd76 	bl	80001e0 <memchr>
 80116f4:	9a04      	ldr	r2, [sp, #16]
 80116f6:	b9d8      	cbnz	r0, 8011730 <_vfiprintf_r+0x12c>
 80116f8:	06d1      	lsls	r1, r2, #27
 80116fa:	bf44      	itt	mi
 80116fc:	2320      	movmi	r3, #32
 80116fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011702:	0713      	lsls	r3, r2, #28
 8011704:	bf44      	itt	mi
 8011706:	232b      	movmi	r3, #43	; 0x2b
 8011708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801170c:	f89a 3000 	ldrb.w	r3, [sl]
 8011710:	2b2a      	cmp	r3, #42	; 0x2a
 8011712:	d015      	beq.n	8011740 <_vfiprintf_r+0x13c>
 8011714:	9a07      	ldr	r2, [sp, #28]
 8011716:	4654      	mov	r4, sl
 8011718:	2000      	movs	r0, #0
 801171a:	f04f 0c0a 	mov.w	ip, #10
 801171e:	4621      	mov	r1, r4
 8011720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011724:	3b30      	subs	r3, #48	; 0x30
 8011726:	2b09      	cmp	r3, #9
 8011728:	d94e      	bls.n	80117c8 <_vfiprintf_r+0x1c4>
 801172a:	b1b0      	cbz	r0, 801175a <_vfiprintf_r+0x156>
 801172c:	9207      	str	r2, [sp, #28]
 801172e:	e014      	b.n	801175a <_vfiprintf_r+0x156>
 8011730:	eba0 0308 	sub.w	r3, r0, r8
 8011734:	fa09 f303 	lsl.w	r3, r9, r3
 8011738:	4313      	orrs	r3, r2
 801173a:	9304      	str	r3, [sp, #16]
 801173c:	46a2      	mov	sl, r4
 801173e:	e7d2      	b.n	80116e6 <_vfiprintf_r+0xe2>
 8011740:	9b03      	ldr	r3, [sp, #12]
 8011742:	1d19      	adds	r1, r3, #4
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	9103      	str	r1, [sp, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	bfbb      	ittet	lt
 801174c:	425b      	neglt	r3, r3
 801174e:	f042 0202 	orrlt.w	r2, r2, #2
 8011752:	9307      	strge	r3, [sp, #28]
 8011754:	9307      	strlt	r3, [sp, #28]
 8011756:	bfb8      	it	lt
 8011758:	9204      	strlt	r2, [sp, #16]
 801175a:	7823      	ldrb	r3, [r4, #0]
 801175c:	2b2e      	cmp	r3, #46	; 0x2e
 801175e:	d10c      	bne.n	801177a <_vfiprintf_r+0x176>
 8011760:	7863      	ldrb	r3, [r4, #1]
 8011762:	2b2a      	cmp	r3, #42	; 0x2a
 8011764:	d135      	bne.n	80117d2 <_vfiprintf_r+0x1ce>
 8011766:	9b03      	ldr	r3, [sp, #12]
 8011768:	1d1a      	adds	r2, r3, #4
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	9203      	str	r2, [sp, #12]
 801176e:	2b00      	cmp	r3, #0
 8011770:	bfb8      	it	lt
 8011772:	f04f 33ff 	movlt.w	r3, #4294967295
 8011776:	3402      	adds	r4, #2
 8011778:	9305      	str	r3, [sp, #20]
 801177a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011860 <_vfiprintf_r+0x25c>
 801177e:	7821      	ldrb	r1, [r4, #0]
 8011780:	2203      	movs	r2, #3
 8011782:	4650      	mov	r0, sl
 8011784:	f7ee fd2c 	bl	80001e0 <memchr>
 8011788:	b140      	cbz	r0, 801179c <_vfiprintf_r+0x198>
 801178a:	2340      	movs	r3, #64	; 0x40
 801178c:	eba0 000a 	sub.w	r0, r0, sl
 8011790:	fa03 f000 	lsl.w	r0, r3, r0
 8011794:	9b04      	ldr	r3, [sp, #16]
 8011796:	4303      	orrs	r3, r0
 8011798:	3401      	adds	r4, #1
 801179a:	9304      	str	r3, [sp, #16]
 801179c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117a0:	482c      	ldr	r0, [pc, #176]	; (8011854 <_vfiprintf_r+0x250>)
 80117a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117a6:	2206      	movs	r2, #6
 80117a8:	f7ee fd1a 	bl	80001e0 <memchr>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d03f      	beq.n	8011830 <_vfiprintf_r+0x22c>
 80117b0:	4b29      	ldr	r3, [pc, #164]	; (8011858 <_vfiprintf_r+0x254>)
 80117b2:	bb1b      	cbnz	r3, 80117fc <_vfiprintf_r+0x1f8>
 80117b4:	9b03      	ldr	r3, [sp, #12]
 80117b6:	3307      	adds	r3, #7
 80117b8:	f023 0307 	bic.w	r3, r3, #7
 80117bc:	3308      	adds	r3, #8
 80117be:	9303      	str	r3, [sp, #12]
 80117c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117c2:	443b      	add	r3, r7
 80117c4:	9309      	str	r3, [sp, #36]	; 0x24
 80117c6:	e767      	b.n	8011698 <_vfiprintf_r+0x94>
 80117c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80117cc:	460c      	mov	r4, r1
 80117ce:	2001      	movs	r0, #1
 80117d0:	e7a5      	b.n	801171e <_vfiprintf_r+0x11a>
 80117d2:	2300      	movs	r3, #0
 80117d4:	3401      	adds	r4, #1
 80117d6:	9305      	str	r3, [sp, #20]
 80117d8:	4619      	mov	r1, r3
 80117da:	f04f 0c0a 	mov.w	ip, #10
 80117de:	4620      	mov	r0, r4
 80117e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117e4:	3a30      	subs	r2, #48	; 0x30
 80117e6:	2a09      	cmp	r2, #9
 80117e8:	d903      	bls.n	80117f2 <_vfiprintf_r+0x1ee>
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d0c5      	beq.n	801177a <_vfiprintf_r+0x176>
 80117ee:	9105      	str	r1, [sp, #20]
 80117f0:	e7c3      	b.n	801177a <_vfiprintf_r+0x176>
 80117f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80117f6:	4604      	mov	r4, r0
 80117f8:	2301      	movs	r3, #1
 80117fa:	e7f0      	b.n	80117de <_vfiprintf_r+0x1da>
 80117fc:	ab03      	add	r3, sp, #12
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	462a      	mov	r2, r5
 8011802:	4b16      	ldr	r3, [pc, #88]	; (801185c <_vfiprintf_r+0x258>)
 8011804:	a904      	add	r1, sp, #16
 8011806:	4630      	mov	r0, r6
 8011808:	f3af 8000 	nop.w
 801180c:	4607      	mov	r7, r0
 801180e:	1c78      	adds	r0, r7, #1
 8011810:	d1d6      	bne.n	80117c0 <_vfiprintf_r+0x1bc>
 8011812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011814:	07d9      	lsls	r1, r3, #31
 8011816:	d405      	bmi.n	8011824 <_vfiprintf_r+0x220>
 8011818:	89ab      	ldrh	r3, [r5, #12]
 801181a:	059a      	lsls	r2, r3, #22
 801181c:	d402      	bmi.n	8011824 <_vfiprintf_r+0x220>
 801181e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011820:	f7fe fcac 	bl	801017c <__retarget_lock_release_recursive>
 8011824:	89ab      	ldrh	r3, [r5, #12]
 8011826:	065b      	lsls	r3, r3, #25
 8011828:	f53f af12 	bmi.w	8011650 <_vfiprintf_r+0x4c>
 801182c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801182e:	e711      	b.n	8011654 <_vfiprintf_r+0x50>
 8011830:	ab03      	add	r3, sp, #12
 8011832:	9300      	str	r3, [sp, #0]
 8011834:	462a      	mov	r2, r5
 8011836:	4b09      	ldr	r3, [pc, #36]	; (801185c <_vfiprintf_r+0x258>)
 8011838:	a904      	add	r1, sp, #16
 801183a:	4630      	mov	r0, r6
 801183c:	f7ff fcac 	bl	8011198 <_printf_i>
 8011840:	e7e4      	b.n	801180c <_vfiprintf_r+0x208>
 8011842:	bf00      	nop
 8011844:	08011c6c 	.word	0x08011c6c
 8011848:	08011c8c 	.word	0x08011c8c
 801184c:	08011c4c 	.word	0x08011c4c
 8011850:	08011eac 	.word	0x08011eac
 8011854:	08011eb6 	.word	0x08011eb6
 8011858:	00000000 	.word	0x00000000
 801185c:	080115e1 	.word	0x080115e1
 8011860:	08011eb2 	.word	0x08011eb2

08011864 <abort>:
 8011864:	b508      	push	{r3, lr}
 8011866:	2006      	movs	r0, #6
 8011868:	f000 f834 	bl	80118d4 <raise>
 801186c:	2001      	movs	r0, #1
 801186e:	f7f1 fcad 	bl	80031cc <_exit>

08011872 <_malloc_usable_size_r>:
 8011872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011876:	1f18      	subs	r0, r3, #4
 8011878:	2b00      	cmp	r3, #0
 801187a:	bfbc      	itt	lt
 801187c:	580b      	ldrlt	r3, [r1, r0]
 801187e:	18c0      	addlt	r0, r0, r3
 8011880:	4770      	bx	lr

08011882 <_raise_r>:
 8011882:	291f      	cmp	r1, #31
 8011884:	b538      	push	{r3, r4, r5, lr}
 8011886:	4604      	mov	r4, r0
 8011888:	460d      	mov	r5, r1
 801188a:	d904      	bls.n	8011896 <_raise_r+0x14>
 801188c:	2316      	movs	r3, #22
 801188e:	6003      	str	r3, [r0, #0]
 8011890:	f04f 30ff 	mov.w	r0, #4294967295
 8011894:	bd38      	pop	{r3, r4, r5, pc}
 8011896:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011898:	b112      	cbz	r2, 80118a0 <_raise_r+0x1e>
 801189a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801189e:	b94b      	cbnz	r3, 80118b4 <_raise_r+0x32>
 80118a0:	4620      	mov	r0, r4
 80118a2:	f000 f831 	bl	8011908 <_getpid_r>
 80118a6:	462a      	mov	r2, r5
 80118a8:	4601      	mov	r1, r0
 80118aa:	4620      	mov	r0, r4
 80118ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80118b0:	f000 b818 	b.w	80118e4 <_kill_r>
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d00a      	beq.n	80118ce <_raise_r+0x4c>
 80118b8:	1c59      	adds	r1, r3, #1
 80118ba:	d103      	bne.n	80118c4 <_raise_r+0x42>
 80118bc:	2316      	movs	r3, #22
 80118be:	6003      	str	r3, [r0, #0]
 80118c0:	2001      	movs	r0, #1
 80118c2:	e7e7      	b.n	8011894 <_raise_r+0x12>
 80118c4:	2400      	movs	r4, #0
 80118c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80118ca:	4628      	mov	r0, r5
 80118cc:	4798      	blx	r3
 80118ce:	2000      	movs	r0, #0
 80118d0:	e7e0      	b.n	8011894 <_raise_r+0x12>
	...

080118d4 <raise>:
 80118d4:	4b02      	ldr	r3, [pc, #8]	; (80118e0 <raise+0xc>)
 80118d6:	4601      	mov	r1, r0
 80118d8:	6818      	ldr	r0, [r3, #0]
 80118da:	f7ff bfd2 	b.w	8011882 <_raise_r>
 80118de:	bf00      	nop
 80118e0:	20000010 	.word	0x20000010

080118e4 <_kill_r>:
 80118e4:	b538      	push	{r3, r4, r5, lr}
 80118e6:	4d07      	ldr	r5, [pc, #28]	; (8011904 <_kill_r+0x20>)
 80118e8:	2300      	movs	r3, #0
 80118ea:	4604      	mov	r4, r0
 80118ec:	4608      	mov	r0, r1
 80118ee:	4611      	mov	r1, r2
 80118f0:	602b      	str	r3, [r5, #0]
 80118f2:	f7f1 fc5b 	bl	80031ac <_kill>
 80118f6:	1c43      	adds	r3, r0, #1
 80118f8:	d102      	bne.n	8011900 <_kill_r+0x1c>
 80118fa:	682b      	ldr	r3, [r5, #0]
 80118fc:	b103      	cbz	r3, 8011900 <_kill_r+0x1c>
 80118fe:	6023      	str	r3, [r4, #0]
 8011900:	bd38      	pop	{r3, r4, r5, pc}
 8011902:	bf00      	nop
 8011904:	20002868 	.word	0x20002868

08011908 <_getpid_r>:
 8011908:	f7f1 bc48 	b.w	800319c <_getpid>

0801190c <_init>:
 801190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801190e:	bf00      	nop
 8011910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011912:	bc08      	pop	{r3}
 8011914:	469e      	mov	lr, r3
 8011916:	4770      	bx	lr

08011918 <_fini>:
 8011918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801191a:	bf00      	nop
 801191c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801191e:	bc08      	pop	{r3}
 8011920:	469e      	mov	lr, r3
 8011922:	4770      	bx	lr
