
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000113e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08011578  08011578  00021578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b64  08011b64  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011b64  08011b64  00021b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b6c  08011b6c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b6c  08011b6c  00021b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b70  08011b70  00021b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011b74  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002524  200001e8  08011d58  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000270c  08011d58  0003270c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000404fc  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f15  00000000  00000000  00070710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003968  00000000  00000000  00076628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000036e0  00000000  00000000  00079f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030fe1  00000000  00000000  0007d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000338b7  00000000  00000000  000ae651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128c47  00000000  00000000  000e1f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020ab4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010d00  00000000  00000000  0020aba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801155c 	.word	0x0801155c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801155c 	.word	0x0801155c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <GLOBVAR_Init+0xac>)
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <GLOBVAR_Init+0xb0>)
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <GLOBVAR_Init+0xb4>)
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 8000fca:	4b25      	ldr	r3, [pc, #148]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <GLOBVAR_Init+0xb8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <GLOBVAR_Init+0xbc>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <GLOBVAR_Init+0xc0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 8000ffa:	491c      	ldr	r1, [pc, #112]	; (800106c <GLOBVAR_Init+0xc4>)
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 8001008:	4918      	ldr	r1, [pc, #96]	; (800106c <GLOBVAR_Init+0xc4>)
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 8001016:	4915      	ldr	r1, [pc, #84]	; (800106c <GLOBVAR_Init+0xc4>)
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c1 2302 	strd	r2, r3, [r1, #8]

	messages[0]=0;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
	messages[1]=0;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <GLOBVAR_Init+0xc8>)
 800102c:	2200      	movs	r2, #0
 800102e:	705a      	strb	r2, [r3, #1]
	messages[2]=0;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001032:	2200      	movs	r2, #0
 8001034:	709a      	strb	r2, [r3, #2]
	messages[3]=0;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001038:	2200      	movs	r2, #0
 800103a:	70da      	strb	r2, [r3, #3]
	messages[4]=0;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <GLOBVAR_Init+0xc8>)
 800103e:	2200      	movs	r2, #0
 8001040:	711a      	strb	r2, [r3, #4]
	messages[5]=0;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <GLOBVAR_Init+0xc8>)
 8001044:	2200      	movs	r2, #0
 8001046:	715a      	strb	r2, [r3, #5]

}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000228 	.word	0x20000228
 8001058:	2000022c 	.word	0x2000022c
 800105c:	20000230 	.word	0x20000230
 8001060:	20000204 	.word	0x20000204
 8001064:	20000210 	.word	0x20000210
 8001068:	2000021c 	.word	0x2000021c
 800106c:	20000370 	.word	0x20000370
 8001070:	20000234 	.word	0x20000234

08001074 <IMU_init>:




void IMU_init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 8001078:	4b57      	ldr	r3, [pc, #348]	; (80011d8 <IMU_init+0x164>)
 800107a:	22bf      	movs	r2, #191	; 0xbf
 800107c:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <IMU_init+0x164>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001084:	4b54      	ldr	r3, [pc, #336]	; (80011d8 <IMU_init+0x164>)
 8001086:	4a55      	ldr	r2, [pc, #340]	; (80011dc <IMU_init+0x168>)
 8001088:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800108a:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <IMU_init+0x164>)
 800108c:	4a54      	ldr	r2, [pc, #336]	; (80011e0 <IMU_init+0x16c>)
 800108e:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001090:	4b51      	ldr	r3, [pc, #324]	; (80011d8 <IMU_init+0x164>)
 8001092:	4a54      	ldr	r2, [pc, #336]	; (80011e4 <IMU_init+0x170>)
 8001094:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001096:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <IMU_init+0x164>)
 8001098:	4a53      	ldr	r2, [pc, #332]	; (80011e8 <IMU_init+0x174>)
 800109a:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800109c:	4b4e      	ldr	r3, [pc, #312]	; (80011d8 <IMU_init+0x164>)
 800109e:	4a53      	ldr	r2, [pc, #332]	; (80011ec <IMU_init+0x178>)
 80010a0:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 80010a2:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <IMU_init+0x164>)
 80010a4:	4a52      	ldr	r2, [pc, #328]	; (80011f0 <IMU_init+0x17c>)
 80010a6:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 80010a8:	494b      	ldr	r1, [pc, #300]	; (80011d8 <IMU_init+0x164>)
 80010aa:	4852      	ldr	r0, [pc, #328]	; (80011f4 <IMU_init+0x180>)
 80010ac:	f002 f932 	bl	8003314 <HTS221_RegisterBusIO>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d000      	beq.n	80010b8 <IMU_init+0x44>
		while(1);
 80010b6:	e7fe      	b.n	80010b6 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 80010b8:	484e      	ldr	r0, [pc, #312]	; (80011f4 <IMU_init+0x180>)
 80010ba:	f002 f975 	bl	80033a8 <HTS221_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d000      	beq.n	80010c6 <IMU_init+0x52>
		while (1);
 80010c4:	e7fe      	b.n	80010c4 <IMU_init+0x50>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 80010c6:	4b4c      	ldr	r3, [pc, #304]	; (80011f8 <IMU_init+0x184>)
 80010c8:	2233      	movs	r2, #51	; 0x33
 80010ca:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 80010cc:	4b4a      	ldr	r3, [pc, #296]	; (80011f8 <IMU_init+0x184>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <IMU_init+0x184>)
 80010d4:	4a41      	ldr	r2, [pc, #260]	; (80011dc <IMU_init+0x168>)
 80010d6:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80010d8:	4b47      	ldr	r3, [pc, #284]	; (80011f8 <IMU_init+0x184>)
 80010da:	4a41      	ldr	r2, [pc, #260]	; (80011e0 <IMU_init+0x16c>)
 80010dc:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <IMU_init+0x184>)
 80010e0:	4a40      	ldr	r2, [pc, #256]	; (80011e4 <IMU_init+0x170>)
 80010e2:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80010e4:	4b44      	ldr	r3, [pc, #272]	; (80011f8 <IMU_init+0x184>)
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <IMU_init+0x174>)
 80010e8:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80010ea:	4b43      	ldr	r3, [pc, #268]	; (80011f8 <IMU_init+0x184>)
 80010ec:	4a3f      	ldr	r2, [pc, #252]	; (80011ec <IMU_init+0x178>)
 80010ee:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 80010f0:	4b41      	ldr	r3, [pc, #260]	; (80011f8 <IMU_init+0x184>)
 80010f2:	4a3f      	ldr	r2, [pc, #252]	; (80011f0 <IMU_init+0x17c>)
 80010f4:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 80010f6:	4940      	ldr	r1, [pc, #256]	; (80011f8 <IMU_init+0x184>)
 80010f8:	4840      	ldr	r0, [pc, #256]	; (80011fc <IMU_init+0x188>)
 80010fa:	f003 f8b5 	bl	8004268 <LSM303AGR_ACC_RegisterBusIO>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d000      	beq.n	8001106 <IMU_init+0x92>
		while(1);
 8001104:	e7fe      	b.n	8001104 <IMU_init+0x90>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <IMU_init+0x184>)
 8001108:	223d      	movs	r2, #61	; 0x3d
 800110a:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 800110c:	493a      	ldr	r1, [pc, #232]	; (80011f8 <IMU_init+0x184>)
 800110e:	483c      	ldr	r0, [pc, #240]	; (8001200 <IMU_init+0x18c>)
 8001110:	f003 fa9a 	bl	8004648 <LSM303AGR_MAG_RegisterBusIO>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d000      	beq.n	800111c <IMU_init+0xa8>
		while(1);
 800111a:	e7fe      	b.n	800111a <IMU_init+0xa6>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 800111c:	4837      	ldr	r0, [pc, #220]	; (80011fc <IMU_init+0x188>)
 800111e:	f003 f90d 	bl	800433c <LSM303AGR_ACC_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d000      	beq.n	800112a <IMU_init+0xb6>
		while (1);
 8001128:	e7fe      	b.n	8001128 <IMU_init+0xb4>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 800112a:	4835      	ldr	r0, [pc, #212]	; (8001200 <IMU_init+0x18c>)
 800112c:	f003 faf0 	bl	8004710 <LSM303AGR_MAG_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d000      	beq.n	8001138 <IMU_init+0xc4>
		while (1);
 8001136:	e7fe      	b.n	8001136 <IMU_init+0xc2>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <IMU_init+0x190>)
 800113a:	22d7      	movs	r2, #215	; 0xd7
 800113c:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <IMU_init+0x190>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <IMU_init+0x190>)
 8001146:	4a25      	ldr	r2, [pc, #148]	; (80011dc <IMU_init+0x168>)
 8001148:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <IMU_init+0x190>)
 800114c:	4a24      	ldr	r2, [pc, #144]	; (80011e0 <IMU_init+0x16c>)
 800114e:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001150:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <IMU_init+0x190>)
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <IMU_init+0x170>)
 8001154:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001156:	4b2b      	ldr	r3, [pc, #172]	; (8001204 <IMU_init+0x190>)
 8001158:	4a23      	ldr	r2, [pc, #140]	; (80011e8 <IMU_init+0x174>)
 800115a:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800115c:	4b29      	ldr	r3, [pc, #164]	; (8001204 <IMU_init+0x190>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <IMU_init+0x178>)
 8001160:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 8001162:	4b28      	ldr	r3, [pc, #160]	; (8001204 <IMU_init+0x190>)
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <IMU_init+0x17c>)
 8001166:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 8001168:	4926      	ldr	r1, [pc, #152]	; (8001204 <IMU_init+0x190>)
 800116a:	4827      	ldr	r0, [pc, #156]	; (8001208 <IMU_init+0x194>)
 800116c:	f003 ffaa 	bl	80050c4 <LSM6DSL_RegisterBusIO>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d000      	beq.n	8001178 <IMU_init+0x104>
		while(1);
 8001176:	e7fe      	b.n	8001176 <IMU_init+0x102>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 8001178:	4823      	ldr	r0, [pc, #140]	; (8001208 <IMU_init+0x194>)
 800117a:	f004 f80d 	bl	8005198 <LSM6DSL_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d000      	beq.n	8001186 <IMU_init+0x112>
		while (1);
 8001184:	e7fe      	b.n	8001184 <IMU_init+0x110>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <IMU_init+0x198>)
 8001188:	22bb      	movs	r2, #187	; 0xbb
 800118a:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 800118c:	4b1f      	ldr	r3, [pc, #124]	; (800120c <IMU_init+0x198>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <IMU_init+0x198>)
 8001194:	4a11      	ldr	r2, [pc, #68]	; (80011dc <IMU_init+0x168>)
 8001196:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001198:	4b1c      	ldr	r3, [pc, #112]	; (800120c <IMU_init+0x198>)
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <IMU_init+0x16c>)
 800119c:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800119e:	4b1b      	ldr	r3, [pc, #108]	; (800120c <IMU_init+0x198>)
 80011a0:	4a10      	ldr	r2, [pc, #64]	; (80011e4 <IMU_init+0x170>)
 80011a2:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <IMU_init+0x198>)
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <IMU_init+0x174>)
 80011a8:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <IMU_init+0x198>)
 80011ac:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <IMU_init+0x178>)
 80011ae:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <IMU_init+0x198>)
 80011b2:	4a0f      	ldr	r2, [pc, #60]	; (80011f0 <IMU_init+0x17c>)
 80011b4:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 80011b6:	4915      	ldr	r1, [pc, #84]	; (800120c <IMU_init+0x198>)
 80011b8:	4815      	ldr	r0, [pc, #84]	; (8001210 <IMU_init+0x19c>)
 80011ba:	f002 fd59 	bl	8003c70 <LPS22HB_RegisterBusIO>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d000      	beq.n	80011c6 <IMU_init+0x152>
		while(1);
 80011c4:	e7fe      	b.n	80011c4 <IMU_init+0x150>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 80011c6:	4812      	ldr	r0, [pc, #72]	; (8001210 <IMU_init+0x19c>)
 80011c8:	f002 fdbc 	bl	8003d44 <LPS22HB_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d000      	beq.n	80011d4 <IMU_init+0x160>
		while (1);
 80011d2:	e7fe      	b.n	80011d2 <IMU_init+0x15e>
	}



}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000388 	.word	0x20000388
 80011dc:	08002dfd 	.word	0x08002dfd
 80011e0:	08002e79 	.word	0x08002e79
 80011e4:	08002f2d 	.word	0x08002f2d
 80011e8:	08002ec9 	.word	0x08002ec9
 80011ec:	0800595d 	.word	0x0800595d
 80011f0:	08005975 	.word	0x08005975
 80011f4:	200003a8 	.word	0x200003a8
 80011f8:	200003dc 	.word	0x200003dc
 80011fc:	200003fc 	.word	0x200003fc
 8001200:	20000430 	.word	0x20000430
 8001204:	20000464 	.word	0x20000464
 8001208:	20000484 	.word	0x20000484
 800120c:	200004bc 	.word	0x200004bc
 8001210:	200004dc 	.word	0x200004dc

08001214 <IMU_enable>:

void IMU_enable(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <IMU_enable+0x6c>)
 800121a:	f002 f8e0 	bl	80033de <HTS221_HUM_Enable>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d000      	beq.n	8001226 <IMU_enable+0x12>
		while (1);
 8001224:	e7fe      	b.n	8001224 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <IMU_enable+0x6c>)
 8001228:	f002 f986 	bl	8003538 <HTS221_TEMP_Enable>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d000      	beq.n	8001234 <IMU_enable+0x20>
		while (1);
 8001232:	e7fe      	b.n	8001232 <IMU_enable+0x1e>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <IMU_enable+0x70>)
 8001236:	f003 f8c2 	bl	80043be <LSM303AGR_ACC_Enable>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d000      	beq.n	8001242 <IMU_enable+0x2e>
		while (1);
 8001240:	e7fe      	b.n	8001240 <IMU_enable+0x2c>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <IMU_enable+0x74>)
 8001244:	f003 faa1 	bl	800478a <LSM303AGR_MAG_Enable>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d000      	beq.n	8001250 <IMU_enable+0x3c>
		while (1);
 800124e:	e7fe      	b.n	800124e <IMU_enable+0x3a>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <IMU_enable+0x78>)
 8001252:	f004 f80a 	bl	800526a <LSM6DSL_ACC_Enable>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d000      	beq.n	800125e <IMU_enable+0x4a>
		while (1);
 800125c:	e7fe      	b.n	800125c <IMU_enable+0x48>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <IMU_enable+0x78>)
 8001260:	f004 f827 	bl	80052b2 <LSM6DSL_GYRO_Enable>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d000      	beq.n	800126c <IMU_enable+0x58>
		while (1);
 800126a:	e7fe      	b.n	800126a <IMU_enable+0x56>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 800126c:	4808      	ldr	r0, [pc, #32]	; (8001290 <IMU_enable+0x7c>)
 800126e:	f002 fd84 	bl	8003d7a <LPS22HB_PRESS_Enable>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d000      	beq.n	800127a <IMU_enable+0x66>
		while (1);
 8001278:	e7fe      	b.n	8001278 <IMU_enable+0x64>
	}
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003a8 	.word	0x200003a8
 8001284:	200003fc 	.word	0x200003fc
 8001288:	20000430 	.word	0x20000430
 800128c:	20000484 	.word	0x20000484
 8001290:	200004dc 	.word	0x200004dc

08001294 <IMU_GetData>:

void IMU_GetData(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af02      	add	r7, sp, #8

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 800129a:	4949      	ldr	r1, [pc, #292]	; (80013c0 <IMU_GetData+0x12c>)
 800129c:	4849      	ldr	r0, [pc, #292]	; (80013c4 <IMU_GetData+0x130>)
 800129e:	f002 f8c3 	bl	8003428 <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 80012a2:	4949      	ldr	r1, [pc, #292]	; (80013c8 <IMU_GetData+0x134>)
 80012a4:	4847      	ldr	r0, [pc, #284]	; (80013c4 <IMU_GetData+0x130>)
 80012a6:	f002 f96c 	bl	8003582 <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 80012aa:	4948      	ldr	r1, [pc, #288]	; (80013cc <IMU_GetData+0x138>)
 80012ac:	4848      	ldr	r0, [pc, #288]	; (80013d0 <IMU_GetData+0x13c>)
 80012ae:	f003 f95b 	bl	8004568 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 80012b2:	4948      	ldr	r1, [pc, #288]	; (80013d4 <IMU_GetData+0x140>)
 80012b4:	4848      	ldr	r0, [pc, #288]	; (80013d8 <IMU_GetData+0x144>)
 80012b6:	f003 fa98 	bl	80047ea <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 80012ba:	4948      	ldr	r1, [pc, #288]	; (80013dc <IMU_GetData+0x148>)
 80012bc:	4848      	ldr	r0, [pc, #288]	; (80013e0 <IMU_GetData+0x14c>)
 80012be:	f002 fd80 	bl	8003dc2 <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <IMU_GetData+0x150>)
 80012c4:	4848      	ldr	r0, [pc, #288]	; (80013e8 <IMU_GetData+0x154>)
 80012c6:	f004 f86b 	bl	80053a0 <LSM6DSL_GYRO_GetAxes>

	 snprintf((char*)message_temp,35,"temperature = %d\r\n",(int)current_temperature_degC);
 80012ca:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <IMU_GetData+0x134>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d4:	ee17 3a90 	vmov	r3, s15
 80012d8:	4a44      	ldr	r2, [pc, #272]	; (80013ec <IMU_GetData+0x158>)
 80012da:	2123      	movs	r1, #35	; 0x23
 80012dc:	4844      	ldr	r0, [pc, #272]	; (80013f0 <IMU_GetData+0x15c>)
 80012de:	f00d f811 	bl	800e304 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_TEMP, NULL,message_temp);
 80012e2:	4b44      	ldr	r3, [pc, #272]	; (80013f4 <IMU_GetData+0x160>)
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	4b42      	ldr	r3, [pc, #264]	; (80013f0 <IMU_GetData+0x15c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	2120      	movs	r1, #32
 80012ec:	f000 f8d2 	bl	8001494 <MESSAGE_SendMailbox>
	 snprintf((char*)message_hum,35,"humidite = %d\r\n",(int)current_humidity_perc);
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <IMU_GetData+0x12c>)
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fa:	ee17 3a90 	vmov	r3, s15
 80012fe:	4a3e      	ldr	r2, [pc, #248]	; (80013f8 <IMU_GetData+0x164>)
 8001300:	2123      	movs	r1, #35	; 0x23
 8001302:	483e      	ldr	r0, [pc, #248]	; (80013fc <IMU_GetData+0x168>)
 8001304:	f00c fffe 	bl	800e304 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_HUM, NULL,message_hum);
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <IMU_GetData+0x160>)
 800130a:	6818      	ldr	r0, [r3, #0]
 800130c:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <IMU_GetData+0x168>)
 800130e:	2200      	movs	r2, #0
 8001310:	2121      	movs	r1, #33	; 0x21
 8001312:	f000 f8bf 	bl	8001494 <MESSAGE_SendMailbox>
	 snprintf((char*)message_press,35,"pression = %d\r\n",(int)current_pressure_hPa);
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <IMU_GetData+0x148>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 3a90 	vmov	r3, s15
 8001324:	4a36      	ldr	r2, [pc, #216]	; (8001400 <IMU_GetData+0x16c>)
 8001326:	2123      	movs	r1, #35	; 0x23
 8001328:	4836      	ldr	r0, [pc, #216]	; (8001404 <IMU_GetData+0x170>)
 800132a:	f00c ffeb 	bl	800e304 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_PRESS, NULL,message_press);
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <IMU_GetData+0x160>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <IMU_GetData+0x170>)
 8001334:	2200      	movs	r2, #0
 8001336:	2125      	movs	r1, #37	; 0x25
 8001338:	f000 f8ac 	bl	8001494 <MESSAGE_SendMailbox>
	 snprintf((char*)message_acc1,50,"accelerometre : x =%d y=%d z=%d\r\n", (int)current_acceleration_mg.x, (int)current_acceleration_mg.y, (int)current_acceleration_mg.z);
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <IMU_GetData+0x138>)
 800133e:	6819      	ldr	r1, [r3, #0]
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <IMU_GetData+0x138>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <IMU_GetData+0x138>)
 8001346:	6892      	ldr	r2, [r2, #8]
 8001348:	9201      	str	r2, [sp, #4]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	460b      	mov	r3, r1
 800134e:	4a2e      	ldr	r2, [pc, #184]	; (8001408 <IMU_GetData+0x174>)
 8001350:	2132      	movs	r1, #50	; 0x32
 8001352:	482e      	ldr	r0, [pc, #184]	; (800140c <IMU_GetData+0x178>)
 8001354:	f00c ffd6 	bl	800e304 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_ACC, NULL,message_acc1);
 8001358:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <IMU_GetData+0x160>)
 800135a:	6818      	ldr	r0, [r3, #0]
 800135c:	4b2b      	ldr	r3, [pc, #172]	; (800140c <IMU_GetData+0x178>)
 800135e:	2200      	movs	r2, #0
 8001360:	2124      	movs	r1, #36	; 0x24
 8001362:	f000 f897 	bl	8001494 <MESSAGE_SendMailbox>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <IMU_GetData+0x150>)
 8001368:	6819      	ldr	r1, [r3, #0]
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <IMU_GetData+0x150>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <IMU_GetData+0x150>)
 8001370:	6892      	ldr	r2, [r2, #8]
 8001372:	9201      	str	r2, [sp, #4]
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	460b      	mov	r3, r1
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <IMU_GetData+0x17c>)
 800137a:	2132      	movs	r1, #50	; 0x32
 800137c:	4825      	ldr	r0, [pc, #148]	; (8001414 <IMU_GetData+0x180>)
 800137e:	f00c ffc1 	bl	800e304 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_GYR, NULL,message_gyro);
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <IMU_GetData+0x160>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <IMU_GetData+0x180>)
 8001388:	2200      	movs	r2, #0
 800138a:	2122      	movs	r1, #34	; 0x22
 800138c:	f000 f882 	bl	8001494 <MESSAGE_SendMailbox>
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <IMU_GetData+0x140>)
 8001392:	6819      	ldr	r1, [r3, #0]
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <IMU_GetData+0x140>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <IMU_GetData+0x140>)
 800139a:	6892      	ldr	r2, [r2, #8]
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	460b      	mov	r3, r1
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <IMU_GetData+0x184>)
 80013a4:	2132      	movs	r1, #50	; 0x32
 80013a6:	481d      	ldr	r0, [pc, #116]	; (800141c <IMU_GetData+0x188>)
 80013a8:	f00c ffac 	bl	800e304 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_MAG, NULL,message_mag);
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <IMU_GetData+0x160>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <IMU_GetData+0x188>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	2123      	movs	r1, #35	; 0x23
 80013b6:	f000 f86d 	bl	8001494 <MESSAGE_SendMailbox>

}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000230 	.word	0x20000230
 80013c4:	200003a8 	.word	0x200003a8
 80013c8:	2000022c 	.word	0x2000022c
 80013cc:	20000204 	.word	0x20000204
 80013d0:	200003fc 	.word	0x200003fc
 80013d4:	2000021c 	.word	0x2000021c
 80013d8:	20000430 	.word	0x20000430
 80013dc:	20000228 	.word	0x20000228
 80013e0:	200004dc 	.word	0x200004dc
 80013e4:	20000210 	.word	0x20000210
 80013e8:	20000484 	.word	0x20000484
 80013ec:	08011578 	.word	0x08011578
 80013f0:	200002b0 	.word	0x200002b0
 80013f4:	20000510 	.word	0x20000510
 80013f8:	0801158c 	.word	0x0801158c
 80013fc:	2000028c 	.word	0x2000028c
 8001400:	0801159c 	.word	0x0801159c
 8001404:	20000268 	.word	0x20000268
 8001408:	080115ac 	.word	0x080115ac
 800140c:	200002d4 	.word	0x200002d4
 8001410:	080115d0 	.word	0x080115d0
 8001414:	20000308 	.word	0x20000308
 8001418:	080115f0 	.word	0x080115f0
 800141c:	2000033c 	.word	0x2000033c

08001420 <MESSAGE_Init>:

//QueueHandle_t IMU_Mailbox;
//QueueHandle_t GPS_Mailbox;
QueueHandle_t Appli_Mailbox;

void  MESSAGE_Init(void) {
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	//IMU_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	//GPS_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	Appli_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
 8001424:	2200      	movs	r2, #0
 8001426:	210c      	movs	r1, #12
 8001428:	2020      	movs	r0, #32
 800142a:	f00a fe63 	bl	800c0f4 <xQueueGenericCreate>
 800142e:	4603      	mov	r3, r0
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <MESSAGE_Init+0x24>)
 8001432:	6013      	str	r3, [r2, #0]

	/* Add queues to registry in order to view them in stm32cube ide */
	//vQueueAddToRegistry(IMU_Mailbox,"IMU Mailbox");
	//vQueueAddToRegistry(GPS_Mailbox,"GPS Mailbox");
	vQueueAddToRegistry(Appli_Mailbox,"Appli Mailbox");
 8001434:	4b03      	ldr	r3, [pc, #12]	; (8001444 <MESSAGE_Init+0x24>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4903      	ldr	r1, [pc, #12]	; (8001448 <MESSAGE_Init+0x28>)
 800143a:	4618      	mov	r0, r3
 800143c:	f00b f9a2 	bl	800c784 <vQueueAddToRegistry>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000510 	.word	0x20000510
 8001448:	08011614 	.word	0x08011614

0800144c <MESSAGE_ReadMailboxNoDelay>:
 *
 * @remark This function is non blocking.
 * If mailbox is empty when calling the function, a message structure is still returned with \ref MSG_ID_NO_MESSAGE
 * in message id field
 */
MESSAGE_Typedef MESSAGE_ReadMailboxNoDelay(QueueHandle_t mbx) {
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
	MESSAGE_Typedef msg= {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]

	if (!xQueueReceive(mbx, &msg, 0))  // Pas de message dans la mailbox
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	2200      	movs	r2, #0
 8001468:	4619      	mov	r1, r3
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f00a ff9a 	bl	800c3a4 <xQueueReceive>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <MESSAGE_ReadMailboxNoDelay+0x2e>
		msg.id=MSG_ID_NO_MESSAGE;
 8001476:	2300      	movs	r3, #0
 8001478:	81bb      	strh	r3, [r7, #12]

	return msg;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	461c      	mov	r4, r3
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001486:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
	...

08001494 <MESSAGE_SendMailbox>:
 * @return None
 *
 * @remark This function is non blocking.
 * If mailbox is full when calling the function, error will be ignored silently
 */
void MESSAGE_SendMailbox(QueueHandle_t mbx_dest, uint16_t id, QueueHandle_t mbx_sender, void *data){
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	460b      	mov	r3, r1
 80014a2:	817b      	strh	r3, [r7, #10]
	MESSAGE_Typedef msg;

	msg.id=id;
 80014a4:	897b      	ldrh	r3, [r7, #10]
 80014a6:	82bb      	strh	r3, [r7, #20]
	msg.sender = &mbx_sender;
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	61bb      	str	r3, [r7, #24]
	msg.data=data;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	61fb      	str	r3, [r7, #28]

	if (!xQueueSend(mbx_dest, &msg, 0)) { // envoi sans attendre
 80014b0:	f107 0114 	add.w	r1, r7, #20
 80014b4:	2300      	movs	r3, #0
 80014b6:	2200      	movs	r2, #0
 80014b8:	68f8      	ldr	r0, [r7, #12]
 80014ba:	f00a fe75 	bl	800c1a8 <xQueueGenericSend>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <MESSAGE_SendMailbox+0x36>
		printf("Failed to send data, Queue full.\r\n");
 80014c4:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MESSAGE_SendMailbox+0x40>)
 80014c6:	f00c ff0f 	bl	800e2e8 <puts>
	}
}
 80014ca:	bf00      	nop
 80014cc:	3720      	adds	r7, #32
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08011624 	.word	0x08011624

080014d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <vApplicationGetIdleTaskMemory+0x2c>)
 80014e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <vApplicationGetIdleTaskMemory+0x30>)
 80014ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000514 	.word	0x20000514
 8001508:	20000568 	.word	0x20000568

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	b09c      	sub	sp, #112	; 0x70
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f004 f9b3 	bl	800587c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f889 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f000 fd95 	bl	8002048 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800151e:	f000 fd33 	bl	8001f88 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8001522:	f000 f8d5 	bl	80016d0 <MX_ADC3_Init>
  MX_CAN1_Init();
 8001526:	f000 f937 	bl	8001798 <MX_CAN1_Init>
  MX_TIM1_Init();
 800152a:	f000 fa6f 	bl	8001a0c <MX_TIM1_Init>
  MX_TIM3_Init();
 800152e:	f000 fac7 	bl	8001ac0 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001532:	f000 fbc9 	bl	8001cc8 <MX_TIM8_Init>
  MX_UART4_Init();
 8001536:	f000 fc97 	bl	8001e68 <MX_UART4_Init>
  MX_USART3_UART_Init();
 800153a:	f000 fd55 	bl	8001fe8 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 800153e:	f000 f98d 	bl	800185c <MX_I2C2_Init>
  MX_UART5_Init();
 8001542:	f000 fcc1 	bl	8001ec8 <MX_UART5_Init>
  MX_COMP2_Init();
 8001546:	f000 f95d 	bl	8001804 <MX_COMP2_Init>
  MX_SPI2_Init();
 800154a:	f000 f9c7 	bl	80018dc <MX_SPI2_Init>
  MX_SPI3_Init();
 800154e:	f000 fa03 	bl	8001958 <MX_SPI3_Init>
  MX_SWPMI1_Init();
 8001552:	f000 fa3b 	bl	80019cc <MX_SWPMI1_Init>
  MX_TIM6_Init();
 8001556:	f000 fb4b 	bl	8001bf0 <MX_TIM6_Init>
  MX_TIM7_Init();
 800155a:	f000 fb7f 	bl	8001c5c <MX_TIM7_Init>
  MX_USART1_UART_Init();
 800155e:	f000 fce3 	bl	8001f28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 8001562:	f7ff fd21 	bl	8000fa8 <GLOBVAR_Init>

  MESSAGE_Init();
 8001566:	f7ff ff5b 	bl	8001420 <MESSAGE_Init>

  IMU_init();
 800156a:	f7ff fd83 	bl	8001074 <IMU_init>
  IMU_enable();
 800156e:	f7ff fe51 	bl	8001214 <IMU_enable>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <main+0x100>)
 8001574:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001578:	461d      	mov	r5, r3
 800157a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001586:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f00a fc34 	bl	800bdfa <osThreadCreate>
 8001592:	4603      	mov	r3, r0
 8001594:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <main+0x104>)
 8001596:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(UART, StartUart, osPriorityNormal, 0, 64);
 8001598:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <main+0x108>)
 800159a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800159e:	461d      	mov	r5, r3
 80015a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UARTHandle = osThreadCreate(osThread(UART), NULL);
 80015ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00a fc21 	bl	800bdfa <osThreadCreate>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <main+0x10c>)
 80015bc:	6013      	str	r3, [r2, #0]

  osThreadDef(IMU, StartIMU, osPriorityHigh, 0, 1024);
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <main+0x110>)
 80015c0:	f107 041c 	add.w	r4, r7, #28
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMUHandle = osThreadCreate(osThread(IMU), NULL);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f00a fc0e 	bl	800bdfa <osThreadCreate>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <main+0x114>)
 80015e2:	6013      	str	r3, [r2, #0]

  osThreadDef(GPS, StartGPS, osPriorityBelowNormal, 0, 64);
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <main+0x118>)
 80015e6:	463c      	mov	r4, r7
 80015e8:	461d      	mov	r5, r3
 80015ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GPSHandle = osThreadCreate(osThread(GPS), NULL);
 80015f6:	463b      	mov	r3, r7
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00a fbfd 	bl	800bdfa <osThreadCreate>
 8001600:	4603      	mov	r3, r0
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <main+0x11c>)
 8001604:	6013      	str	r3, [r2, #0]
  SPIHandle = osThreadCreate(osThread(SPI), NULL);*/

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001606:	f00a fbf1 	bl	800bdec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800160a:	e7fe      	b.n	800160a <main+0xfe>
 800160c:	08011664 	.word	0x08011664
 8001610:	20000d88 	.word	0x20000d88
 8001614:	08011680 	.word	0x08011680
 8001618:	20000d94 	.word	0x20000d94
 800161c:	0801169c 	.word	0x0801169c
 8001620:	20000d8c 	.word	0x20000d8c
 8001624:	080116b8 	.word	0x080116b8
 8001628:	20000d90 	.word	0x20000d90

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b096      	sub	sp, #88	; 0x58
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	2244      	movs	r2, #68	; 0x44
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f00c fbce 	bl	800dddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800164e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001652:	f006 fdb3 	bl	80081bc <HAL_PWREx_ControlVoltageScaling>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800165c:	f000 fe0f 	bl	800227e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001660:	2302      	movs	r3, #2
 8001662:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001668:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800166a:	2310      	movs	r3, #16
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001672:	2302      	movs	r3, #2
 8001674:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800167a:	230a      	movs	r3, #10
 800167c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800167e:	2307      	movs	r3, #7
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001686:	2302      	movs	r3, #2
 8001688:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4618      	mov	r0, r3
 8001690:	f006 fdea 	bl	8008268 <HAL_RCC_OscConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800169a:	f000 fdf0 	bl	800227e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	230f      	movs	r3, #15
 80016a0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2303      	movs	r3, #3
 80016a4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016b2:	463b      	mov	r3, r7
 80016b4:	2104      	movs	r1, #4
 80016b6:	4618      	mov	r0, r3
 80016b8:	f007 f9b2 	bl	8008a20 <HAL_RCC_ClockConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016c2:	f000 fddc 	bl	800227e <Error_Handler>
  }
}
 80016c6:	bf00      	nop
 80016c8:	3758      	adds	r7, #88	; 0x58
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	463b      	mov	r3, r7
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
 80016e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <MX_ADC3_Init+0xbc>)
 80016e8:	4a29      	ldr	r2, [pc, #164]	; (8001790 <MX_ADC3_Init+0xc0>)
 80016ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016ec:	4b27      	ldr	r3, [pc, #156]	; (800178c <MX_ADC3_Init+0xbc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016f2:	4b26      	ldr	r3, [pc, #152]	; (800178c <MX_ADC3_Init+0xbc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <MX_ADC3_Init+0xbc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <MX_ADC3_Init+0xbc>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <MX_ADC3_Init+0xbc>)
 8001706:	2204      	movs	r2, #4
 8001708:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <MX_ADC3_Init+0xbc>)
 800170c:	2200      	movs	r2, #0
 800170e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001710:	4b1e      	ldr	r3, [pc, #120]	; (800178c <MX_ADC3_Init+0xbc>)
 8001712:	2200      	movs	r2, #0
 8001714:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001716:	4b1d      	ldr	r3, [pc, #116]	; (800178c <MX_ADC3_Init+0xbc>)
 8001718:	2201      	movs	r2, #1
 800171a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <MX_ADC3_Init+0xbc>)
 800171e:	2200      	movs	r2, #0
 8001720:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <MX_ADC3_Init+0xbc>)
 8001726:	2200      	movs	r2, #0
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <MX_ADC3_Init+0xbc>)
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <MX_ADC3_Init+0xbc>)
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_ADC3_Init+0xbc>)
 800173a:	2200      	movs	r2, #0
 800173c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_ADC3_Init+0xbc>)
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001746:	4811      	ldr	r0, [pc, #68]	; (800178c <MX_ADC3_Init+0xbc>)
 8001748:	f004 fac4 	bl	8005cd4 <HAL_ADC_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001752:	f000 fd94 	bl	800227e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <MX_ADC3_Init+0xc4>)
 8001758:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800175a:	2306      	movs	r3, #6
 800175c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001762:	237f      	movs	r3, #127	; 0x7f
 8001764:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001766:	2304      	movs	r3, #4
 8001768:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800176e:	463b      	mov	r3, r7
 8001770:	4619      	mov	r1, r3
 8001772:	4806      	ldr	r0, [pc, #24]	; (800178c <MX_ADC3_Init+0xbc>)
 8001774:	f004 fc04 	bl	8005f80 <HAL_ADC_ConfigChannel>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800177e:	f000 fd7e 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000768 	.word	0x20000768
 8001790:	50040200 	.word	0x50040200
 8001794:	04300002 	.word	0x04300002

08001798 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_CAN1_Init+0x64>)
 800179e:	4a18      	ldr	r2, [pc, #96]	; (8001800 <MX_CAN1_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_CAN1_Init+0x64>)
 80017a4:	2210      	movs	r2, #16
 80017a6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_CAN1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <MX_CAN1_Init+0x64>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_CAN1_Init+0x64>)
 80017b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017ba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_CAN1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <MX_CAN1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <MX_CAN1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <MX_CAN1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017d4:	4b09      	ldr	r3, [pc, #36]	; (80017fc <MX_CAN1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <MX_CAN1_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <MX_CAN1_Init+0x64>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_CAN1_Init+0x64>)
 80017e8:	f004 ffba 	bl	8006760 <HAL_CAN_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80017f2:	f000 fd44 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200007cc 	.word	0x200007cc
 8001800:	40006400 	.word	0x40006400

08001804 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <MX_COMP2_Init+0x50>)
 800180a:	4a13      	ldr	r2, [pc, #76]	; (8001858 <MX_COMP2_Init+0x54>)
 800180c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800180e:	4b11      	ldr	r3, [pc, #68]	; (8001854 <MX_COMP2_Init+0x50>)
 8001810:	2270      	movs	r2, #112	; 0x70
 8001812:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_COMP2_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_COMP2_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <MX_COMP2_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <MX_COMP2_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 800182c:	4b09      	ldr	r3, [pc, #36]	; (8001854 <MX_COMP2_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <MX_COMP2_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <MX_COMP2_Init+0x50>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800183e:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_COMP2_Init+0x50>)
 8001840:	f005 f932 	bl	8006aa8 <HAL_COMP_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 800184a:	f000 fd18 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200007f4 	.word	0x200007f4
 8001858:	40010204 	.word	0x40010204

0800185c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001860:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001862:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <MX_I2C2_Init+0x78>)
 8001864:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <MX_I2C2_Init+0x7c>)
 800186a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800186c:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <MX_I2C2_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001874:	2201      	movs	r2, #1
 8001876:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001878:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <MX_I2C2_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <MX_I2C2_Init+0x74>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001890:	4b0f      	ldr	r3, [pc, #60]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001896:	480e      	ldr	r0, [pc, #56]	; (80018d0 <MX_I2C2_Init+0x74>)
 8001898:	f005 fe3e 	bl	8007518 <HAL_I2C_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018a2:	f000 fcec 	bl	800227e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018a6:	2100      	movs	r1, #0
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <MX_I2C2_Init+0x74>)
 80018aa:	f006 fbe1 	bl	8008070 <HAL_I2CEx_ConfigAnalogFilter>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018b4:	f000 fce3 	bl	800227e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018b8:	2100      	movs	r1, #0
 80018ba:	4805      	ldr	r0, [pc, #20]	; (80018d0 <MX_I2C2_Init+0x74>)
 80018bc:	f006 fc23 	bl	8008106 <HAL_I2CEx_ConfigDigitalFilter>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018c6:	f000 fcda 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000820 	.word	0x20000820
 80018d4:	40005800 	.word	0x40005800
 80018d8:	10909cec 	.word	0x10909cec

080018dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018e0:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <MX_SPI2_Init+0x74>)
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <MX_SPI2_Init+0x78>)
 80018e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_SPI2_Init+0x74>)
 80018e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <MX_SPI2_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_SPI2_Init+0x74>)
 80018f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_SPI2_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_SPI2_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_SPI2_Init+0x74>)
 800190a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800190e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_SPI2_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_SPI2_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_SPI2_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_SPI2_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_SPI2_Init+0x74>)
 800192a:	2207      	movs	r2, #7
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_SPI2_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_SPI2_Init+0x74>)
 8001936:	2208      	movs	r2, #8
 8001938:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_SPI2_Init+0x74>)
 800193c:	f007 ff50 	bl	80097e0 <HAL_SPI_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001946:	f000 fc9a 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000874 	.word	0x20000874
 8001954:	40003800 	.word	0x40003800

08001958 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <MX_SPI3_Init+0x6c>)
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <MX_SPI3_Init+0x70>)
 8001960:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_SPI3_Init+0x6c>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001968:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_SPI3_Init+0x6c>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800196e:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <MX_SPI3_Init+0x6c>)
 8001970:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001974:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <MX_SPI3_Init+0x6c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800197c:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_SPI3_Init+0x6c>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001982:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <MX_SPI3_Init+0x6c>)
 8001984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001988:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_SPI3_Init+0x6c>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_SPI3_Init+0x6c>)
 8001992:	2200      	movs	r2, #0
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <MX_SPI3_Init+0x6c>)
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800199c:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_SPI3_Init+0x6c>)
 800199e:	2207      	movs	r2, #7
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <MX_SPI3_Init+0x6c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_SPI3_Init+0x6c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <MX_SPI3_Init+0x6c>)
 80019b0:	f007 ff16 	bl	80097e0 <HAL_SPI_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 80019ba:	f000 fc60 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200008d8 	.word	0x200008d8
 80019c8:	40003c00 	.word	0x40003c00

080019cc <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SWPMI1_Init+0x38>)
 80019d2:	4a0d      	ldr	r2, [pc, #52]	; (8001a08 <MX_SWPMI1_Init+0x3c>)
 80019d4:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_SWPMI1_Init+0x38>)
 80019d8:	2202      	movs	r2, #2
 80019da:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SWPMI1_Init+0x38>)
 80019de:	2213      	movs	r2, #19
 80019e0:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_SWPMI1_Init+0x38>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SWPMI1_Init+0x38>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_SWPMI1_Init+0x38>)
 80019f0:	f007 ff9a 	bl	8009928 <HAL_SWPMI_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 80019fa:	f000 fc40 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000093c 	.word	0x2000093c
 8001a08:	40008800 	.word	0x40008800

08001a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	; 0x30
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2224      	movs	r2, #36	; 0x24
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f00c f9de 	bl	800dddc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <MX_TIM1_Init+0xb0>)
 8001a2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a56:	2301      	movs	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001a82:	f008 f883 	bl	8009b8c <HAL_TIM_Encoder_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a8c:	f000 fbf7 	bl	800227e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM1_Init+0xac>)
 8001aa2:	f008 ff01 	bl	800a8a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001aac:	f000 fbe7 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3730      	adds	r7, #48	; 0x30
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000978 	.word	0x20000978
 8001abc:	40012c00 	.word	0x40012c00

08001ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af2:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001af4:	4a3d      	ldr	r2, [pc, #244]	; (8001bec <MX_TIM3_Init+0x12c>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b18:	4833      	ldr	r0, [pc, #204]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b1a:	f007 ff7f 	bl	8009a1c <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b24:	f000 fbab 	bl	800227e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b32:	4619      	mov	r1, r3
 8001b34:	482c      	ldr	r0, [pc, #176]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b36:	f008 f9e3 	bl	8009f00 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b40:	f000 fb9d 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b44:	4828      	ldr	r0, [pc, #160]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b46:	f007 ffc0 	bl	8009aca <HAL_TIM_PWM_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b50:	f000 fb95 	bl	800227e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4821      	ldr	r0, [pc, #132]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b64:	f008 fea0 	bl	800a8a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b6e:	f000 fb86 	bl	800227e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b72:	2360      	movs	r3, #96	; 0x60
 8001b74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2200      	movs	r2, #0
 8001b86:	4619      	mov	r1, r3
 8001b88:	4817      	ldr	r0, [pc, #92]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001b8a:	f008 f8a5 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b94:	f000 fb73 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4812      	ldr	r0, [pc, #72]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001ba0:	f008 f89a 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001baa:	f000 fb68 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001bb6:	f008 f88f 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001bc0:	f000 fb5d 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bc4:	463b      	mov	r3, r7
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4807      	ldr	r0, [pc, #28]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001bcc:	f008 f884 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001bd6:	f000 fb52 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bda:	4803      	ldr	r0, [pc, #12]	; (8001be8 <MX_TIM3_Init+0x128>)
 8001bdc:	f000 fe90 	bl	8002900 <HAL_TIM_MspPostInit>

}
 8001be0:	bf00      	nop
 8001be2:	3738      	adds	r7, #56	; 0x38
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200009c4 	.word	0x200009c4
 8001bec:	40000400 	.word	0x40000400

08001bf0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_TIM6_Init+0x64>)
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <MX_TIM6_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_TIM6_Init+0x64>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_TIM6_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_TIM6_Init+0x64>)
 8001c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_TIM6_Init+0x64>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <MX_TIM6_Init+0x64>)
 8001c22:	f007 fefb 	bl	8009a1c <HAL_TIM_Base_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c2c:	f000 fb27 	bl	800227e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_TIM6_Init+0x64>)
 8001c3e:	f008 fe33 	bl	800a8a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f000 fb19 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000a10 	.word	0x20000a10
 8001c58:	40001000 	.word	0x40001000

08001c5c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <MX_TIM7_Init+0x64>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	; (8001cc4 <MX_TIM7_Init+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MX_TIM7_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_TIM7_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MX_TIM7_Init+0x64>)
 8001c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c84:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_TIM7_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <MX_TIM7_Init+0x64>)
 8001c8e:	f007 fec5 	bl	8009a1c <HAL_TIM_Base_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c98:	f000 faf1 	bl	800227e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_TIM7_Init+0x64>)
 8001caa:	f008 fdfd 	bl	800a8a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001cb4:	f000 fae3 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000a5c 	.word	0x20000a5c
 8001cc4:	40001400 	.word	0x40001400

08001cc8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b09a      	sub	sp, #104	; 0x68
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
 8001cf8:	615a      	str	r2, [r3, #20]
 8001cfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	222c      	movs	r2, #44	; 0x2c
 8001d00:	2100      	movs	r1, #0
 8001d02:	4618      	mov	r0, r3
 8001d04:	f00c f86a 	bl	800dddc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d08:	4b55      	ldr	r3, [pc, #340]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d0a:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <MX_TIM8_Init+0x19c>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d0e:	4b54      	ldr	r3, [pc, #336]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d20:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2e:	4b4c      	ldr	r3, [pc, #304]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d34:	484a      	ldr	r0, [pc, #296]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d36:	f007 fe71 	bl	8009a1c <HAL_TIM_Base_Init>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001d40:	f000 fa9d 	bl	800227e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4843      	ldr	r0, [pc, #268]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d52:	f008 f8d5 	bl	8009f00 <HAL_TIM_ConfigClockSource>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001d5c:	f000 fa8f 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d60:	483f      	ldr	r0, [pc, #252]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d62:	f007 feb2 	bl	8009aca <HAL_TIM_PWM_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001d6c:	f000 fa87 	bl	800227e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d80:	4619      	mov	r1, r3
 8001d82:	4837      	ldr	r0, [pc, #220]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001d84:	f008 fd90 	bl	800a8a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001d8e:	f000 fa76 	bl	800227e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d92:	2360      	movs	r3, #96	; 0x60
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001db2:	2200      	movs	r2, #0
 8001db4:	4619      	mov	r1, r3
 8001db6:	482a      	ldr	r0, [pc, #168]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001db8:	f007 ff8e 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001dc2:	f000 fa5c 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dca:	2204      	movs	r2, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4824      	ldr	r0, [pc, #144]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001dd0:	f007 ff82 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001dda:	f000 fa50 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de2:	2208      	movs	r2, #8
 8001de4:	4619      	mov	r1, r3
 8001de6:	481e      	ldr	r0, [pc, #120]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001de8:	f007 ff76 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001df2:	f000 fa44 	bl	800227e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001df6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4818      	ldr	r0, [pc, #96]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001e00:	f007 ff6a 	bl	8009cd8 <HAL_TIM_PWM_ConfigChannel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8001e0a:	f000 fa38 	bl	800227e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4807      	ldr	r0, [pc, #28]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001e44:	f008 fdb8 	bl	800a9b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8001e4e:	f000 fa16 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <MX_TIM8_Init+0x198>)
 8001e54:	f000 fd54 	bl	8002900 <HAL_TIM_MspPostInit>

}
 8001e58:	bf00      	nop
 8001e5a:	3768      	adds	r7, #104	; 0x68
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000aa8 	.word	0x20000aa8
 8001e64:	40013400 	.word	0x40013400

08001e68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e6e:	4a15      	ldr	r2, [pc, #84]	; (8001ec4 <MX_UART4_Init+0x5c>)
 8001e70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e98:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eaa:	4805      	ldr	r0, [pc, #20]	; (8001ec0 <MX_UART4_Init+0x58>)
 8001eac:	f008 fe02 	bl	800aab4 <HAL_UART_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001eb6:	f000 f9e2 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000af4 	.word	0x20000af4
 8001ec4:	40004c00 	.word	0x40004c00

08001ec8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_UART5_Init+0x58>)
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <MX_UART5_Init+0x5c>)
 8001ed0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <MX_UART5_Init+0x58>)
 8001ed4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ed8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_UART5_Init+0x58>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_UART5_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_UART5_Init+0x58>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_UART5_Init+0x58>)
 8001eee:	220c      	movs	r2, #12
 8001ef0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_UART5_Init+0x58>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_UART5_Init+0x58>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_UART5_Init+0x58>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_UART5_Init+0x58>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_UART5_Init+0x58>)
 8001f0c:	f008 fdd2 	bl	800aab4 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001f16:	f000 f9b2 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000b78 	.word	0x20000b78
 8001f24:	40005000 	.word	0x40005000

08001f28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f2e:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <MX_USART1_UART_Init+0x5c>)
 8001f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_USART1_UART_Init+0x58>)
 8001f6c:	f008 fda2 	bl	800aab4 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f76:	f000 f982 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000bfc 	.word	0x20000bfc
 8001f84:	40013800 	.word	0x40013800

08001f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <MX_USART2_UART_Init+0x5c>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f92:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_USART2_UART_Init+0x58>)
 8001fcc:	f008 fd72 	bl	800aab4 <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fd6:	f000 f952 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000c80 	.word	0x20000c80
 8001fe4:	40004400 	.word	0x40004400

08001fe8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8001fee:	4a15      	ldr	r2, [pc, #84]	; (8002044 <MX_USART3_UART_Init+0x5c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8001ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_USART3_UART_Init+0x58>)
 800200e:	220c      	movs	r2, #12
 8002010:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_USART3_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_USART3_UART_Init+0x58>)
 8002026:	2200      	movs	r2, #0
 8002028:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202a:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_USART3_UART_Init+0x58>)
 800202c:	f008 fd42 	bl	800aab4 <HAL_UART_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002036:	f000 f922 	bl	800227e <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000d04 	.word	0x20000d04
 8002044:	40004800 	.word	0x40004800

08002048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08a      	sub	sp, #40	; 0x28
 800204c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204e:	f107 0314 	add.w	r3, r7, #20
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	609a      	str	r2, [r3, #8]
 800205a:	60da      	str	r2, [r3, #12]
 800205c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800205e:	4b31      	ldr	r3, [pc, #196]	; (8002124 <MX_GPIO_Init+0xdc>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002062:	4a30      	ldr	r2, [pc, #192]	; (8002124 <MX_GPIO_Init+0xdc>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206a:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <MX_GPIO_Init+0xdc>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002076:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <MX_GPIO_Init+0xdc>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <MX_GPIO_Init+0xdc>)
 800207c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002082:	4b28      	ldr	r3, [pc, #160]	; (8002124 <MX_GPIO_Init+0xdc>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <MX_GPIO_Init+0xdc>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4a24      	ldr	r2, [pc, #144]	; (8002124 <MX_GPIO_Init+0xdc>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209a:	4b22      	ldr	r3, [pc, #136]	; (8002124 <MX_GPIO_Init+0xdc>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <MX_GPIO_Init+0xdc>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a1e      	ldr	r2, [pc, #120]	; (8002124 <MX_GPIO_Init+0xdc>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <MX_GPIO_Init+0xdc>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	4b19      	ldr	r3, [pc, #100]	; (8002124 <MX_GPIO_Init+0xdc>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c2:	4a18      	ldr	r2, [pc, #96]	; (8002124 <MX_GPIO_Init+0xdc>)
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ca:	4b16      	ldr	r3, [pc, #88]	; (8002124 <MX_GPIO_Init+0xdc>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2120      	movs	r1, #32
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f005 fa03 	bl	80074e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	480b      	ldr	r0, [pc, #44]	; (8002128 <MX_GPIO_Init+0xe0>)
 80020fa:	f004 ff57 	bl	8006fac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80020fe:	2320      	movs	r3, #32
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002118:	f004 ff48 	bl	8006fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800211c:	bf00      	nop
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	48000800 	.word	0x48000800

0800212c <IMU_Receive_Transmit_Data>:

/* USER CODE BEGIN 4 */

void IMU_Receive_Transmit_Data()
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	IMU_GetData();
 8002130:	f7ff f8b0 	bl	8001294 <IMU_GetData>
}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_UART_TxCpltCallback>:

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
    	{
    		message_index=0;
    	}

    }*/
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <Transmit_data_to_usb>:
    	HAL_UART_Receive_IT(&huart2, &rxBufferGps, 1);
    }
}

void Transmit_data_to_usb(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
	//MESSAGE_Typedef trame_gps = MESSAGE_ReadMailboxNoDelay(GPS_Mailbox);
	MESSAGE_Typedef message_appli;
	message_appli = MESSAGE_ReadMailboxNoDelay(Appli_Mailbox);
 8002152:	4b30      	ldr	r3, [pc, #192]	; (8002214 <Transmit_data_to_usb+0xc8>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	4611      	mov	r1, r2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f976 	bl	800144c <MESSAGE_ReadMailboxNoDelay>
	switch(message_appli.id){
 8002160:	88bb      	ldrh	r3, [r7, #4]
 8002162:	3b20      	subs	r3, #32
 8002164:	2b10      	cmp	r3, #16
 8002166:	d84f      	bhi.n	8002208 <Transmit_data_to_usb+0xbc>
 8002168:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <Transmit_data_to_usb+0x24>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	080021c1 	.word	0x080021c1
 8002174:	080021cd 	.word	0x080021cd
 8002178:	080021fd 	.word	0x080021fd
 800217c:	080021f1 	.word	0x080021f1
 8002180:	080021e5 	.word	0x080021e5
 8002184:	080021d9 	.word	0x080021d9
 8002188:	08002209 	.word	0x08002209
 800218c:	08002209 	.word	0x08002209
 8002190:	08002209 	.word	0x08002209
 8002194:	08002209 	.word	0x08002209
 8002198:	08002209 	.word	0x08002209
 800219c:	08002209 	.word	0x08002209
 80021a0:	08002209 	.word	0x08002209
 80021a4:	08002209 	.word	0x08002209
 80021a8:	08002209 	.word	0x08002209
 80021ac:	08002209 	.word	0x08002209
 80021b0:	080021b5 	.word	0x080021b5

	case MSG_ID_GPS :
		HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));
 80021b4:	2223      	movs	r2, #35	; 0x23
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <Transmit_data_to_usb+0xcc>)
 80021b8:	4818      	ldr	r0, [pc, #96]	; (800221c <Transmit_data_to_usb+0xd0>)
 80021ba:	f008 fcc9 	bl	800ab50 <HAL_UART_Transmit_IT>
		break;
 80021be:	e024      	b.n	800220a <Transmit_data_to_usb+0xbe>
	case MSG_ID_IMU_TEMP :
		HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));
 80021c0:	2223      	movs	r2, #35	; 0x23
 80021c2:	4915      	ldr	r1, [pc, #84]	; (8002218 <Transmit_data_to_usb+0xcc>)
 80021c4:	4815      	ldr	r0, [pc, #84]	; (800221c <Transmit_data_to_usb+0xd0>)
 80021c6:	f008 fcc3 	bl	800ab50 <HAL_UART_Transmit_IT>
		break;
 80021ca:	e01e      	b.n	800220a <Transmit_data_to_usb+0xbe>
	case MSG_ID_IMU_HUM :
		HAL_UART_Transmit_IT(&huart4, message_hum, sizeof(message_temp));
 80021cc:	2223      	movs	r2, #35	; 0x23
 80021ce:	4914      	ldr	r1, [pc, #80]	; (8002220 <Transmit_data_to_usb+0xd4>)
 80021d0:	4812      	ldr	r0, [pc, #72]	; (800221c <Transmit_data_to_usb+0xd0>)
 80021d2:	f008 fcbd 	bl	800ab50 <HAL_UART_Transmit_IT>
		break;
 80021d6:	e018      	b.n	800220a <Transmit_data_to_usb+0xbe>
	case MSG_ID_IMU_PRESS :
		HAL_UART_Transmit_IT(&huart4, message_press, sizeof(message_temp));
 80021d8:	2223      	movs	r2, #35	; 0x23
 80021da:	4912      	ldr	r1, [pc, #72]	; (8002224 <Transmit_data_to_usb+0xd8>)
 80021dc:	480f      	ldr	r0, [pc, #60]	; (800221c <Transmit_data_to_usb+0xd0>)
 80021de:	f008 fcb7 	bl	800ab50 <HAL_UART_Transmit_IT>
		break;
 80021e2:	e012      	b.n	800220a <Transmit_data_to_usb+0xbe>
	case MSG_ID_IMU_ACC :
		HAL_UART_Transmit_IT(&huart4, message_acc1, sizeof(message_temp));
 80021e4:	2223      	movs	r2, #35	; 0x23
 80021e6:	4910      	ldr	r1, [pc, #64]	; (8002228 <Transmit_data_to_usb+0xdc>)
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <Transmit_data_to_usb+0xd0>)
 80021ea:	f008 fcb1 	bl	800ab50 <HAL_UART_Transmit_IT>
		break;
 80021ee:	e00c      	b.n	800220a <Transmit_data_to_usb+0xbe>
	case MSG_ID_IMU_MAG :
		HAL_UART_Transmit_IT(&huart4, message_mag, sizeof(message_temp));
 80021f0:	2223      	movs	r2, #35	; 0x23
 80021f2:	490e      	ldr	r1, [pc, #56]	; (800222c <Transmit_data_to_usb+0xe0>)
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <Transmit_data_to_usb+0xd0>)
 80021f6:	f008 fcab 	bl	800ab50 <HAL_UART_Transmit_IT>
		break;
 80021fa:	e006      	b.n	800220a <Transmit_data_to_usb+0xbe>
	case MSG_ID_IMU_GYR :
		HAL_UART_Transmit_IT(&huart4, message_gyro,sizeof(message_temp));
 80021fc:	2223      	movs	r2, #35	; 0x23
 80021fe:	490c      	ldr	r1, [pc, #48]	; (8002230 <Transmit_data_to_usb+0xe4>)
 8002200:	4806      	ldr	r0, [pc, #24]	; (800221c <Transmit_data_to_usb+0xd0>)
 8002202:	f008 fca5 	bl	800ab50 <HAL_UART_Transmit_IT>
		break;
 8002206:	e000      	b.n	800220a <Transmit_data_to_usb+0xbe>
	default :
		break;
 8002208:	bf00      	nop
	}
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000510 	.word	0x20000510
 8002218:	200002b0 	.word	0x200002b0
 800221c:	20000af4 	.word	0x20000af4
 8002220:	2000028c 	.word	0x2000028c
 8002224:	20000268 	.word	0x20000268
 8002228:	200002d4 	.word	0x200002d4
 800222c:	2000033c 	.word	0x2000033c
 8002230:	20000308 	.word	0x20000308

08002234 <StartUart>:


void StartUart(void const * argument)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {

	  Transmit_data_to_usb();
 800223c:	f7ff ff86 	bl	800214c <Transmit_data_to_usb>
	  osDelay(200);
 8002240:	20c8      	movs	r0, #200	; 0xc8
 8002242:	f009 fe26 	bl	800be92 <osDelay>
	  Transmit_data_to_usb();
 8002246:	e7f9      	b.n	800223c <StartUart+0x8>

08002248 <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
	IMU_Receive_Transmit_Data();
 8002250:	f7ff ff6c 	bl	800212c <IMU_Receive_Transmit_Data>
    osDelay(200);
 8002254:	20c8      	movs	r0, #200	; 0xc8
 8002256:	f009 fe1c 	bl	800be92 <osDelay>
	IMU_Receive_Transmit_Data();
 800225a:	e7f9      	b.n	8002250 <StartIMU+0x8>

0800225c <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //GetData_GPS();
	  osDelay(200);
 8002264:	20c8      	movs	r0, #200	; 0xc8
 8002266:	f009 fe14 	bl	800be92 <osDelay>
 800226a:	e7fb      	b.n	8002264 <StartGPS+0x8>

0800226c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 8002274:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002278:	f009 fe0b 	bl	800be92 <osDelay>
 800227c:	e7fa      	b.n	8002274 <StartDefaultTask+0x8>

0800227e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002282:	b672      	cpsid	i
}
 8002284:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002286:	e7fe      	b.n	8002286 <Error_Handler+0x8>

08002288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <HAL_MspInit+0x4c>)
 8002290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_MspInit+0x4c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6613      	str	r3, [r2, #96]	; 0x60
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <HAL_MspInit+0x4c>)
 800229c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <HAL_MspInit+0x4c>)
 80022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <HAL_MspInit+0x4c>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b0:	6593      	str	r3, [r2, #88]	; 0x58
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <HAL_MspInit+0x4c>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022be:	2200      	movs	r2, #0
 80022c0:	210f      	movs	r1, #15
 80022c2:	f06f 0001 	mvn.w	r0, #1
 80022c6:	f004 fdbc 	bl	8006e42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0ac      	sub	sp, #176	; 0xb0
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2288      	movs	r2, #136	; 0x88
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00b fd6f 	bl	800dddc <memset>
  if(hadc->Instance==ADC3)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a27      	ldr	r2, [pc, #156]	; (80023a0 <HAL_ADC_MspInit+0xc8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d146      	bne.n	8002396 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800230c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800230e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800231a:	2301      	movs	r3, #1
 800231c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800231e:	2308      	movs	r3, #8
 8002320:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002322:	2307      	movs	r3, #7
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002326:	2302      	movs	r3, #2
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800232a:	2302      	movs	r3, #2
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800232e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002332:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	4618      	mov	r0, r3
 800233a:	f006 fd95 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8002344:	f7ff ff9b 	bl	800227e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 800234e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800236c:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_ADC_MspInit+0xcc>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002378:	2307      	movs	r3, #7
 800237a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800237e:	230b      	movs	r3, #11
 8002380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	; (80023a8 <HAL_ADC_MspInit+0xd0>)
 8002392:	f004 fe0b 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002396:	bf00      	nop
 8002398:	37b0      	adds	r7, #176	; 0xb0
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	50040200 	.word	0x50040200
 80023a4:	40021000 	.word	0x40021000
 80023a8:	48000800 	.word	0x48000800

080023ac <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	; 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a18      	ldr	r2, [pc, #96]	; (800242c <HAL_CAN_MspInit+0x80>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d129      	bne.n	8002422 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_CAN_MspInit+0x84>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <HAL_CAN_MspInit+0x84>)
 80023d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023d8:	6593      	str	r3, [r2, #88]	; 0x58
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_CAN_MspInit+0x84>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_CAN_MspInit+0x84>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <HAL_CAN_MspInit+0x84>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_CAN_MspInit+0x84>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002404:	2302      	movs	r3, #2
 8002406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240c:	2303      	movs	r3, #3
 800240e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002410:	2309      	movs	r3, #9
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800241e:	f004 fdc5 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002422:	bf00      	nop
 8002424:	3728      	adds	r7, #40	; 0x28
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40006400 	.word	0x40006400
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_COMP_MspInit+0x5c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d117      	bne.n	8002486 <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002456:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <HAL_COMP_MspInit+0x60>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245a:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <HAL_COMP_MspInit+0x60>)
 800245c:	f043 0302 	orr.w	r3, r3, #2
 8002460:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <HAL_COMP_MspInit+0x60>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 800246e:	2390      	movs	r3, #144	; 0x90
 8002470:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002472:	2303      	movs	r3, #3
 8002474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <HAL_COMP_MspInit+0x64>)
 8002482:	f004 fd93 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40010204 	.word	0x40010204
 8002494:	40021000 	.word	0x40021000
 8002498:	48000400 	.word	0x48000400

0800249c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0ac      	sub	sp, #176	; 0xb0
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2288      	movs	r2, #136	; 0x88
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f00b fc8d 	bl	800dddc <memset>
  if(hi2c->Instance==I2C2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a21      	ldr	r2, [pc, #132]	; (800254c <HAL_I2C_MspInit+0xb0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d13b      	bne.n	8002544 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024d0:	2300      	movs	r3, #0
 80024d2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4618      	mov	r0, r3
 80024da:	f006 fcc5 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80024e4:	f7ff fecb 	bl	800227e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e8:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_I2C_MspInit+0xb4>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	4a18      	ldr	r2, [pc, #96]	; (8002550 <HAL_I2C_MspInit+0xb4>)
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_I2C_MspInit+0xb4>)
 80024f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002500:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002508:	2312      	movs	r3, #18
 800250a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800251a:	2304      	movs	r3, #4
 800251c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002524:	4619      	mov	r1, r3
 8002526:	480b      	ldr	r0, [pc, #44]	; (8002554 <HAL_I2C_MspInit+0xb8>)
 8002528:	f004 fd40 	bl	8006fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <HAL_I2C_MspInit+0xb4>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a07      	ldr	r2, [pc, #28]	; (8002550 <HAL_I2C_MspInit+0xb4>)
 8002532:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <HAL_I2C_MspInit+0xb4>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002544:	bf00      	nop
 8002546:	37b0      	adds	r7, #176	; 0xb0
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40005800 	.word	0x40005800
 8002550:	40021000 	.word	0x40021000
 8002554:	48000400 	.word	0x48000400

08002558 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <HAL_I2C_MspDeInit+0x3c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10f      	bne.n	800258a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_I2C_MspDeInit+0x40>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <HAL_I2C_MspDeInit+0x40>)
 8002570:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002574:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002576:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800257a:	4808      	ldr	r0, [pc, #32]	; (800259c <HAL_I2C_MspDeInit+0x44>)
 800257c:	f004 fec0 	bl	8007300 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <HAL_I2C_MspDeInit+0x44>)
 8002586:	f004 febb 	bl	8007300 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40005800 	.word	0x40005800
 8002598:	40021000 	.word	0x40021000
 800259c:	48000400 	.word	0x48000400

080025a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08e      	sub	sp, #56	; 0x38
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a4b      	ldr	r2, [pc, #300]	; (80026ec <HAL_SPI_MspInit+0x14c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d145      	bne.n	800264e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025c2:	4b4b      	ldr	r3, [pc, #300]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	4a4a      	ldr	r2, [pc, #296]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025cc:	6593      	str	r3, [r2, #88]	; 0x58
 80025ce:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d6:	623b      	str	r3, [r7, #32]
 80025d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025da:	4b45      	ldr	r3, [pc, #276]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	4a44      	ldr	r2, [pc, #272]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e6:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	61fb      	str	r3, [r7, #28]
 80025f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	4a3e      	ldr	r2, [pc, #248]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 80025f8:	f043 0302 	orr.w	r3, r3, #2
 80025fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025fe:	4b3c      	ldr	r3, [pc, #240]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 8002600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800260a:	2308      	movs	r3, #8
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260e:	2302      	movs	r3, #2
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002616:	2303      	movs	r3, #3
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800261a:	2305      	movs	r3, #5
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	4619      	mov	r1, r3
 8002624:	4833      	ldr	r0, [pc, #204]	; (80026f4 <HAL_SPI_MspInit+0x154>)
 8002626:	f004 fcc1 	bl	8006fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800262a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002630:	2302      	movs	r3, #2
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002638:	2303      	movs	r3, #3
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800263c:	2305      	movs	r3, #5
 800263e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002644:	4619      	mov	r1, r3
 8002646:	482c      	ldr	r0, [pc, #176]	; (80026f8 <HAL_SPI_MspInit+0x158>)
 8002648:	f004 fcb0 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800264c:	e049      	b.n	80026e2 <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2a      	ldr	r2, [pc, #168]	; (80026fc <HAL_SPI_MspInit+0x15c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d144      	bne.n	80026e2 <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 800265e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	4a1e      	ldr	r2, [pc, #120]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800267c:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 800267e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 800268e:	f043 0302 	orr.w	r3, r3, #2
 8002692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002694:	4b16      	ldr	r3, [pc, #88]	; (80026f0 <HAL_SPI_MspInit+0x150>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80026a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026b2:	2306      	movs	r3, #6
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	480d      	ldr	r0, [pc, #52]	; (80026f4 <HAL_SPI_MspInit+0x154>)
 80026be:	f004 fc75 	bl	8006fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80026c2:	2320      	movs	r3, #32
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026d2:	2306      	movs	r3, #6
 80026d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026da:	4619      	mov	r1, r3
 80026dc:	4806      	ldr	r0, [pc, #24]	; (80026f8 <HAL_SPI_MspInit+0x158>)
 80026de:	f004 fc65 	bl	8006fac <HAL_GPIO_Init>
}
 80026e2:	bf00      	nop
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40003800 	.word	0x40003800
 80026f0:	40021000 	.word	0x40021000
 80026f4:	48000800 	.word	0x48000800
 80026f8:	48000400 	.word	0x48000400
 80026fc:	40003c00 	.word	0x40003c00

08002700 <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0ac      	sub	sp, #176	; 0xb0
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2288      	movs	r2, #136	; 0x88
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f00b fb5b 	bl	800dddc <memset>
  if(hswpmi->Instance==SWPMI1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <HAL_SWPMI_MspInit+0xb4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d13d      	bne.n	80027ac <HAL_SWPMI_MspInit+0xac>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 8002730:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002734:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800273c:	f107 0314 	add.w	r3, r7, #20
 8002740:	4618      	mov	r0, r3
 8002742:	f006 fb91 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 800274c:	f7ff fd97 	bl	800227e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_SWPMI_MspInit+0xb8>)
 8002752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002754:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_SWPMI_MspInit+0xb8>)
 8002756:	f043 0304 	orr.w	r3, r3, #4
 800275a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_SWPMI_MspInit+0xb8>)
 800275e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_SWPMI_MspInit+0xb8>)
 800276a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_SWPMI_MspInit+0xb8>)
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_SWPMI_MspInit+0xb8>)
 8002776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    /**SWPMI1 GPIO Configuration
    PB12     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002794:	2303      	movs	r3, #3
 8002796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 800279a:	230c      	movs	r3, #12
 800279c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80027a4:	4619      	mov	r1, r3
 80027a6:	4805      	ldr	r0, [pc, #20]	; (80027bc <HAL_SWPMI_MspInit+0xbc>)
 80027a8:	f004 fc00 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 80027ac:	bf00      	nop
 80027ae:	37b0      	adds	r7, #176	; 0xb0
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40008800 	.word	0x40008800
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48000400 	.word	0x48000400

080027c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	; 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 0314 	add.w	r3, r7, #20
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a18      	ldr	r2, [pc, #96]	; (8002840 <HAL_TIM_Encoder_MspInit+0x80>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d129      	bne.n	8002836 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027e2:	4b18      	ldr	r3, [pc, #96]	; (8002844 <HAL_TIM_Encoder_MspInit+0x84>)
 80027e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e6:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_TIM_Encoder_MspInit+0x84>)
 80027e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ec:	6613      	str	r3, [r2, #96]	; 0x60
 80027ee:	4b15      	ldr	r3, [pc, #84]	; (8002844 <HAL_TIM_Encoder_MspInit+0x84>)
 80027f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_TIM_Encoder_MspInit+0x84>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4a11      	ldr	r2, [pc, #68]	; (8002844 <HAL_TIM_Encoder_MspInit+0x84>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002806:	4b0f      	ldr	r3, [pc, #60]	; (8002844 <HAL_TIM_Encoder_MspInit+0x84>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002812:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002824:	2301      	movs	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002832:	f004 fbbb 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002836:	bf00      	nop
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40021000 	.word	0x40021000

08002848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a25      	ldr	r2, [pc, #148]	; (80028ec <HAL_TIM_Base_MspInit+0xa4>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800285a:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 8002860:	f043 0302 	orr.w	r3, r3, #2
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002872:	e034      	b.n	80028de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <HAL_TIM_Base_MspInit+0xac>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d10c      	bne.n	8002898 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800287e:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	4a1b      	ldr	r2, [pc, #108]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 8002884:	f043 0310 	orr.w	r3, r3, #16
 8002888:	6593      	str	r3, [r2, #88]	; 0x58
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
}
 8002896:	e022      	b.n	80028de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a16      	ldr	r2, [pc, #88]	; (80028f8 <HAL_TIM_Base_MspInit+0xb0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d10c      	bne.n	80028bc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 80028a8:	f043 0320 	orr.w	r3, r3, #32
 80028ac:	6593      	str	r3, [r2, #88]	; 0x58
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 80028b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
}
 80028ba:	e010      	b.n	80028de <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0e      	ldr	r2, [pc, #56]	; (80028fc <HAL_TIM_Base_MspInit+0xb4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10b      	bne.n	80028de <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 80028cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028d0:	6613      	str	r3, [r2, #96]	; 0x60
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <HAL_TIM_Base_MspInit+0xa8>)
 80028d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028da:	60bb      	str	r3, [r7, #8]
 80028dc:	68bb      	ldr	r3, [r7, #8]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40001000 	.word	0x40001000
 80028f8:	40001400 	.word	0x40001400
 80028fc:	40013400 	.word	0x40013400

08002900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a31      	ldr	r2, [pc, #196]	; (80029e4 <HAL_TIM_MspPostInit+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d139      	bne.n	8002996 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002946:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002952:	23c0      	movs	r3, #192	; 0xc0
 8002954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002962:	2302      	movs	r3, #2
 8002964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002966:	f107 0314 	add.w	r3, r7, #20
 800296a:	4619      	mov	r1, r3
 800296c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002970:	f004 fb1c 	bl	8006fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002974:	2303      	movs	r3, #3
 8002976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002984:	2302      	movs	r3, #2
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4619      	mov	r1, r3
 800298e:	4817      	ldr	r0, [pc, #92]	; (80029ec <HAL_TIM_MspPostInit+0xec>)
 8002990:	f004 fb0c 	bl	8006fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002994:	e021      	b.n	80029da <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <HAL_TIM_MspPostInit+0xf0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d11c      	bne.n	80029da <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 80029a6:	f043 0304 	orr.w	r3, r3, #4
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_TIM_MspPostInit+0xe8>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029b8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80029ca:	2303      	movs	r3, #3
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ce:	f107 0314 	add.w	r3, r7, #20
 80029d2:	4619      	mov	r1, r3
 80029d4:	4807      	ldr	r0, [pc, #28]	; (80029f4 <HAL_TIM_MspPostInit+0xf4>)
 80029d6:	f004 fae9 	bl	8006fac <HAL_GPIO_Init>
}
 80029da:	bf00      	nop
 80029dc:	3728      	adds	r7, #40	; 0x28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40021000 	.word	0x40021000
 80029ec:	48000400 	.word	0x48000400
 80029f0:	40013400 	.word	0x40013400
 80029f4:	48000800 	.word	0x48000800

080029f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b0b6      	sub	sp, #216	; 0xd8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a14:	2288      	movs	r2, #136	; 0x88
 8002a16:	2100      	movs	r1, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f00b f9df 	bl	800dddc <memset>
  if(huart->Instance==UART4)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4aad      	ldr	r2, [pc, #692]	; (8002cd8 <HAL_UART_MspInit+0x2e0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d145      	bne.n	8002ab4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002a28:	2308      	movs	r3, #8
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002a36:	4618      	mov	r0, r3
 8002a38:	f006 fa16 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002a42:	f7ff fc1c 	bl	800227e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002a46:	4ba5      	ldr	r3, [pc, #660]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	4aa4      	ldr	r2, [pc, #656]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002a4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002a50:	6593      	str	r3, [r2, #88]	; 0x58
 8002a52:	4ba2      	ldr	r3, [pc, #648]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	4b9f      	ldr	r3, [pc, #636]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	4a9e      	ldr	r2, [pc, #632]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a6a:	4b9c      	ldr	r3, [pc, #624]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a76:	2303      	movs	r3, #3
 8002a78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a9e:	f004 fa85 	bl	8006fac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2105      	movs	r1, #5
 8002aa6:	2034      	movs	r0, #52	; 0x34
 8002aa8:	f004 f9cb 	bl	8006e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002aac:	2034      	movs	r0, #52	; 0x34
 8002aae:	f004 f9e4 	bl	8006e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002ab2:	e161      	b.n	8002d78 <HAL_UART_MspInit+0x380>
  else if(huart->Instance==UART5)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a89      	ldr	r2, [pc, #548]	; (8002ce0 <HAL_UART_MspInit+0x2e8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d15e      	bne.n	8002b7c <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002abe:	2310      	movs	r3, #16
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002acc:	4618      	mov	r0, r3
 8002ace:	f006 f9cb 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8002ad8:	f7ff fbd1 	bl	800227e <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002adc:	4b7f      	ldr	r3, [pc, #508]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	4a7e      	ldr	r2, [pc, #504]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae8:	4b7c      	ldr	r3, [pc, #496]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002af4:	4b79      	ldr	r3, [pc, #484]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	4a78      	ldr	r2, [pc, #480]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b00:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0c:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	4a72      	ldr	r2, [pc, #456]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002b12:	f043 0308 	orr.w	r3, r3, #8
 8002b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b18:	4b70      	ldr	r3, [pc, #448]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4866      	ldr	r0, [pc, #408]	; (8002ce4 <HAL_UART_MspInit+0x2ec>)
 8002b4c:	f004 fa2e 	bl	8006fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b50:	2304      	movs	r3, #4
 8002b52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b6e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002b72:	4619      	mov	r1, r3
 8002b74:	485c      	ldr	r0, [pc, #368]	; (8002ce8 <HAL_UART_MspInit+0x2f0>)
 8002b76:	f004 fa19 	bl	8006fac <HAL_GPIO_Init>
}
 8002b7a:	e0fd      	b.n	8002d78 <HAL_UART_MspInit+0x380>
  else if(huart->Instance==USART1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a5a      	ldr	r2, [pc, #360]	; (8002cec <HAL_UART_MspInit+0x2f4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d15e      	bne.n	8002c44 <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b86:	2301      	movs	r3, #1
 8002b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b92:	4618      	mov	r0, r3
 8002b94:	f006 f968 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8002b9e:	f7ff fb6e 	bl	800227e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ba2:	4b4e      	ldr	r3, [pc, #312]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	4a4d      	ldr	r2, [pc, #308]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6613      	str	r3, [r2, #96]	; 0x60
 8002bae:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b48      	ldr	r3, [pc, #288]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bbe:	4a47      	ldr	r2, [pc, #284]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bc6:	4b45      	ldr	r3, [pc, #276]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bd2:	4b42      	ldr	r3, [pc, #264]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	4a41      	ldr	r2, [pc, #260]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002bd8:	f043 0302 	orr.w	r3, r3, #2
 8002bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bde:	4b3f      	ldr	r3, [pc, #252]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c04:	2307      	movs	r3, #7
 8002c06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c14:	f004 f9ca 	bl	8006fac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c18:	2340      	movs	r3, #64	; 0x40
 8002c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c30:	2307      	movs	r3, #7
 8002c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	482c      	ldr	r0, [pc, #176]	; (8002cf0 <HAL_UART_MspInit+0x2f8>)
 8002c3e:	f004 f9b5 	bl	8006fac <HAL_GPIO_Init>
}
 8002c42:	e099      	b.n	8002d78 <HAL_UART_MspInit+0x380>
  else if(huart->Instance==USART2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a2a      	ldr	r2, [pc, #168]	; (8002cf4 <HAL_UART_MspInit+0x2fc>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d154      	bne.n	8002cf8 <HAL_UART_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c56:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f006 f904 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_UART_MspInit+0x272>
      Error_Handler();
 8002c66:	f7ff fb0a 	bl	800227e <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c74:	6593      	str	r3, [r2, #88]	; 0x58
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	4a15      	ldr	r2, [pc, #84]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_UART_MspInit+0x2e4>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c9a:	230c      	movs	r3, #12
 8002c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cc2:	f004 f973 	bl	8006fac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2105      	movs	r1, #5
 8002cca:	2026      	movs	r0, #38	; 0x26
 8002ccc:	f004 f8b9 	bl	8006e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cd0:	2026      	movs	r0, #38	; 0x26
 8002cd2:	f004 f8d2 	bl	8006e7a <HAL_NVIC_EnableIRQ>
}
 8002cd6:	e04f      	b.n	8002d78 <HAL_UART_MspInit+0x380>
 8002cd8:	40004c00 	.word	0x40004c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40005000 	.word	0x40005000
 8002ce4:	48000800 	.word	0x48000800
 8002ce8:	48000c00 	.word	0x48000c00
 8002cec:	40013800 	.word	0x40013800
 8002cf0:	48000400 	.word	0x48000400
 8002cf4:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a20      	ldr	r2, [pc, #128]	; (8002d80 <HAL_UART_MspInit+0x388>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d13a      	bne.n	8002d78 <HAL_UART_MspInit+0x380>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d02:	2304      	movs	r3, #4
 8002d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002d06:	2300      	movs	r3, #0
 8002d08:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f006 f8aa 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <HAL_UART_MspInit+0x326>
      Error_Handler();
 8002d1a:	f7ff fab0 	bl	800227e <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d1e:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <HAL_UART_MspInit+0x38c>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d22:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <HAL_UART_MspInit+0x38c>)
 8002d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d28:	6593      	str	r3, [r2, #88]	; 0x58
 8002d2a:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <HAL_UART_MspInit+0x38c>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_UART_MspInit+0x38c>)
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_UART_MspInit+0x38c>)
 8002d3c:	f043 0304 	orr.w	r3, r3, #4
 8002d40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_UART_MspInit+0x38c>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d4e:	2330      	movs	r3, #48	; 0x30
 8002d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d66:	2307      	movs	r3, #7
 8002d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d70:	4619      	mov	r1, r3
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <HAL_UART_MspInit+0x390>)
 8002d74:	f004 f91a 	bl	8006fac <HAL_GPIO_Init>
}
 8002d78:	bf00      	nop
 8002d7a:	37d8      	adds	r7, #216	; 0xd8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40004800 	.word	0x40004800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	48000800 	.word	0x48000800

08002d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <NMI_Handler+0x4>

08002d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d96:	e7fe      	b.n	8002d96 <HardFault_Handler+0x4>

08002d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <MemManage_Handler+0x4>

08002d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <BusFault_Handler+0x4>

08002da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <UsageFault_Handler+0x4>

08002daa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dbc:	f002 fdba 	bl	8005934 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002dc0:	f00a fad0 	bl	800d364 <xTaskGetSchedulerState>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d001      	beq.n	8002dce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002dca:	f00a fd95 	bl	800d8f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002dd8:	4802      	ldr	r0, [pc, #8]	; (8002de4 <USART2_IRQHandler+0x10>)
 8002dda:	f007 ff27 	bl	800ac2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000c80 	.word	0x20000c80

08002de8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <UART4_IRQHandler+0x10>)
 8002dee:	f007 ff1d 	bl	800ac2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000af4 	.word	0x20000af4

08002dfc <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002e06:	4b19      	ldr	r3, [pc, #100]	; (8002e6c <BSP_I2C1_Init+0x70>)
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <BSP_I2C1_Init+0x74>)
 8002e0a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <BSP_I2C1_Init+0x78>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	4918      	ldr	r1, [pc, #96]	; (8002e74 <BSP_I2C1_Init+0x78>)
 8002e14:	600a      	str	r2, [r1, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d122      	bne.n	8002e60 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8002e1a:	4814      	ldr	r0, [pc, #80]	; (8002e6c <BSP_I2C1_Init+0x70>)
 8002e1c:	f004 fe68 	bl	8007af0 <HAL_I2C_GetState>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11c      	bne.n	8002e60 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002e26:	4811      	ldr	r0, [pc, #68]	; (8002e6c <BSP_I2C1_Init+0x70>)
 8002e28:	f000 f8f6 	bl	8003018 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d116      	bne.n	8002e60 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002e32:	480e      	ldr	r0, [pc, #56]	; (8002e6c <BSP_I2C1_Init+0x70>)
 8002e34:	f000 f8ac 	bl	8002f90 <MX_I2C1_Init>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002e3e:	f06f 0307 	mvn.w	r3, #7
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	e00c      	b.n	8002e60 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002e46:	2100      	movs	r1, #0
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <BSP_I2C1_Init+0x70>)
 8002e4a:	f005 f911 	bl	8008070 <HAL_I2CEx_ConfigAnalogFilter>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002e54:	f06f 0307 	mvn.w	r3, #7
 8002e58:	607b      	str	r3, [r7, #4]
 8002e5a:	e001      	b.n	8002e60 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000d98 	.word	0x20000d98
 8002e70:	40005400 	.word	0x40005400
 8002e74:	20000dec 	.word	0x20000dec

08002e78 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <BSP_I2C1_DeInit+0x48>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d014      	beq.n	8002eb4 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <BSP_I2C1_DeInit+0x48>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <BSP_I2C1_DeInit+0x48>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <BSP_I2C1_DeInit+0x48>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8002e9c:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <BSP_I2C1_DeInit+0x4c>)
 8002e9e:	f000 f91b 	bl	80030d8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002ea2:	4808      	ldr	r0, [pc, #32]	; (8002ec4 <BSP_I2C1_DeInit+0x4c>)
 8002ea4:	f004 fbc7 	bl	8007636 <HAL_I2C_DeInit>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002eae:	f06f 0307 	mvn.w	r3, #7
 8002eb2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002eb4:	687b      	ldr	r3, [r7, #4]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000dec 	.word	0x20000dec
 8002ec4:	20000d98 	.word	0x20000d98

08002ec8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af04      	add	r7, sp, #16
 8002ece:	60ba      	str	r2, [r7, #8]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	81fb      	strh	r3, [r7, #14]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	81bb      	strh	r3, [r7, #12]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002ee2:	89ba      	ldrh	r2, [r7, #12]
 8002ee4:	89f9      	ldrh	r1, [r7, #14]
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	9302      	str	r3, [sp, #8]
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	480c      	ldr	r0, [pc, #48]	; (8002f28 <BSP_I2C1_WriteReg+0x60>)
 8002ef8:	f004 fbcc 	bl	8007694 <HAL_I2C_Mem_Write>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00c      	beq.n	8002f1c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002f02:	4809      	ldr	r0, [pc, #36]	; (8002f28 <BSP_I2C1_WriteReg+0x60>)
 8002f04:	f004 fe02 	bl	8007b0c <HAL_I2C_GetError>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d103      	bne.n	8002f16 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002f0e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e002      	b.n	8002f1c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002f16:	f06f 0303 	mvn.w	r3, #3
 8002f1a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002f1c:	697b      	ldr	r3, [r7, #20]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000d98 	.word	0x20000d98

08002f2c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af04      	add	r7, sp, #16
 8002f32:	60ba      	str	r2, [r7, #8]
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	81fb      	strh	r3, [r7, #14]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	81bb      	strh	r3, [r7, #12]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002f46:	89ba      	ldrh	r2, [r7, #12]
 8002f48:	89f9      	ldrh	r1, [r7, #14]
 8002f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4e:	9302      	str	r3, [sp, #8]
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	9301      	str	r3, [sp, #4]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	2301      	movs	r3, #1
 8002f5a:	480c      	ldr	r0, [pc, #48]	; (8002f8c <BSP_I2C1_ReadReg+0x60>)
 8002f5c:	f004 fcae 	bl	80078bc <HAL_I2C_Mem_Read>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00c      	beq.n	8002f80 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002f66:	4809      	ldr	r0, [pc, #36]	; (8002f8c <BSP_I2C1_ReadReg+0x60>)
 8002f68:	f004 fdd0 	bl	8007b0c <HAL_I2C_GetError>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d103      	bne.n	8002f7a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002f72:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e002      	b.n	8002f80 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002f7a:	f06f 0303 	mvn.w	r3, #3
 8002f7e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002f80:	697b      	ldr	r3, [r7, #20]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000d98 	.word	0x20000d98

08002f90 <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a1c      	ldr	r2, [pc, #112]	; (8003010 <MX_I2C1_Init+0x80>)
 8002fa0:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <MX_I2C1_Init+0x84>)
 8002fa6:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 faa0 	bl	8007518 <HAL_I2C_Init>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f005 f843 	bl	8008070 <HAL_I2CEx_ConfigAnalogFilter>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f005 f885 	bl	8008106 <HAL_I2CEx_ConfigDigitalFilter>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40005400 	.word	0x40005400
 8003014:	10909cec 	.word	0x10909cec

08003018 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b0ac      	sub	sp, #176	; 0xb0
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	2288      	movs	r2, #136	; 0x88
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f00a fed7 	bl	800dddc <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800302e:	2340      	movs	r3, #64	; 0x40
 8003030:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003032:	2300      	movs	r3, #0
 8003034:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4618      	mov	r0, r3
 800303c:	f005 ff14 	bl	8008e68 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <I2C1_MspInit+0xb8>)
 8003042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003044:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <I2C1_MspInit+0xb8>)
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800304c:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <I2C1_MspInit+0xb8>)
 800304e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800305c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003060:	2312      	movs	r3, #18
 8003062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003072:	2304      	movs	r3, #4
 8003074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003078:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800307c:	4619      	mov	r1, r3
 800307e:	4815      	ldr	r0, [pc, #84]	; (80030d4 <I2C1_MspInit+0xbc>)
 8003080:	f003 ff94 	bl	8006fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003088:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800308c:	2312      	movs	r3, #18
 800308e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003098:	2303      	movs	r3, #3
 800309a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800309e:	2304      	movs	r3, #4
 80030a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80030a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030a8:	4619      	mov	r1, r3
 80030aa:	480a      	ldr	r0, [pc, #40]	; (80030d4 <I2C1_MspInit+0xbc>)
 80030ac:	f003 ff7e 	bl	8006fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <I2C1_MspInit+0xb8>)
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	4a06      	ldr	r2, [pc, #24]	; (80030d0 <I2C1_MspInit+0xb8>)
 80030b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ba:	6593      	str	r3, [r2, #88]	; 0x58
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <I2C1_MspInit+0xb8>)
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80030c8:	bf00      	nop
 80030ca:	37b0      	adds	r7, #176	; 0xb0
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	48000400 	.word	0x48000400

080030d8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80030e0:	4b09      	ldr	r3, [pc, #36]	; (8003108 <I2C1_MspDeInit+0x30>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	4a08      	ldr	r2, [pc, #32]	; (8003108 <I2C1_MspDeInit+0x30>)
 80030e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030ea:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80030ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f0:	4806      	ldr	r0, [pc, #24]	; (800310c <I2C1_MspDeInit+0x34>)
 80030f2:	f004 f905 	bl	8007300 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80030f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030fa:	4804      	ldr	r0, [pc, #16]	; (800310c <I2C1_MspDeInit+0x34>)
 80030fc:	f004 f900 	bl	8007300 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8003100:	bf00      	nop
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	48000400 	.word	0x48000400

08003110 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return 1;
 8003114:	2301      	movs	r3, #1
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <_kill>:

int _kill(int pid, int sig)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800312a:	f00a fe1f 	bl	800dd6c <__errno>
 800312e:	4603      	mov	r3, r0
 8003130:	2216      	movs	r2, #22
 8003132:	601a      	str	r2, [r3, #0]
  return -1;
 8003134:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <_exit>:

void _exit (int status)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003148:	f04f 31ff 	mov.w	r1, #4294967295
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ffe7 	bl	8003120 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003152:	e7fe      	b.n	8003152 <_exit+0x12>

08003154 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e00a      	b.n	800317c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003166:	f3af 8000 	nop.w
 800316a:	4601      	mov	r1, r0
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	60ba      	str	r2, [r7, #8]
 8003172:	b2ca      	uxtb	r2, r1
 8003174:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3301      	adds	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	dbf0      	blt.n	8003166 <_read+0x12>
  }

  return len;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b086      	sub	sp, #24
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	e009      	b.n	80031b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	60ba      	str	r2, [r7, #8]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	dbf1      	blt.n	80031a0 <_write+0x12>
  }
  return len;
 80031bc:	687b      	ldr	r3, [r7, #4]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <_close>:

int _close(int file)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031ee:	605a      	str	r2, [r3, #4]
  return 0;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <_isatty>:

int _isatty(int file)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003206:	2301      	movs	r3, #1
}
 8003208:	4618      	mov	r0, r3
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003238:	4a14      	ldr	r2, [pc, #80]	; (800328c <_sbrk+0x5c>)
 800323a:	4b15      	ldr	r3, [pc, #84]	; (8003290 <_sbrk+0x60>)
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <_sbrk+0x64>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d102      	bne.n	8003252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <_sbrk+0x64>)
 800324e:	4a12      	ldr	r2, [pc, #72]	; (8003298 <_sbrk+0x68>)
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <_sbrk+0x64>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	d207      	bcs.n	8003270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003260:	f00a fd84 	bl	800dd6c <__errno>
 8003264:	4603      	mov	r3, r0
 8003266:	220c      	movs	r2, #12
 8003268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	e009      	b.n	8003284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003270:	4b08      	ldr	r3, [pc, #32]	; (8003294 <_sbrk+0x64>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <_sbrk+0x64>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4413      	add	r3, r2
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <_sbrk+0x64>)
 8003280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20018000 	.word	0x20018000
 8003290:	00000400 	.word	0x00000400
 8003294:	20000df0 	.word	0x20000df0
 8003298:	20002710 	.word	0x20002710

0800329c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <SystemInit+0x20>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	4a05      	ldr	r2, [pc, #20]	; (80032bc <SystemInit+0x20>)
 80032a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
	    bl  SystemInit
 80032c4:	f7ff ffea 	bl	800329c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032c8:	480c      	ldr	r0, [pc, #48]	; (80032fc <LoopForever+0x6>)
  ldr r1, =_edata
 80032ca:	490d      	ldr	r1, [pc, #52]	; (8003300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032cc:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <LoopForever+0xe>)
  movs r3, #0
 80032ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032d0:	e002      	b.n	80032d8 <LoopCopyDataInit>

080032d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d6:	3304      	adds	r3, #4

080032d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032dc:	d3f9      	bcc.n	80032d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032e0:	4c0a      	ldr	r4, [pc, #40]	; (800330c <LoopForever+0x16>)
  movs r3, #0
 80032e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e4:	e001      	b.n	80032ea <LoopFillZerobss>

080032e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e8:	3204      	adds	r2, #4

080032ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032ec:	d3fb      	bcc.n	80032e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ee:	f00a fd43 	bl	800dd78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032f2:	f7fe f90b 	bl	800150c <main>

080032f6 <LoopForever>:

LoopForever:
    b LoopForever
 80032f6:	e7fe      	b.n	80032f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80032f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80032fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003300:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003304:	08011b74 	.word	0x08011b74
  ldr r2, =_sbss
 8003308:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800330c:	2000270c 	.word	0x2000270c

08003310 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003310:	e7fe      	b.n	8003310 <ADC1_2_IRQHandler>
	...

08003314 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8003324:	f04f 33ff 	mov.w	r3, #4294967295
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	e034      	b.n	8003396 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	7b1a      	ldrb	r2, [r3, #12]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	695a      	ldr	r2, [r3, #20]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <HTS221_RegisterBusIO+0x8c>)
 8003368:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a0d      	ldr	r2, [pc, #52]	; (80033a4 <HTS221_RegisterBusIO+0x90>)
 800336e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d004      	beq.n	8003390 <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4798      	blx	r3
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	e002      	b.n	8003396 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	08003781 	.word	0x08003781
 80033a4:	080037e3 	.word	0x080037e3

080033a8 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f97b 	bl	80036b6 <HTS221_Initialize>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	e004      	b.n	80033d6 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d101      	bne.n	80033f4 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	e015      	b.n	8003420 <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10b      	bne.n	8003416 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3320      	adds	r3, #32
 8003402:	2101      	movs	r1, #1
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fadf 	bl	80039c8 <hts221_power_on_set>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 8003410:	f04f 33ff 	mov.w	r3, #4294967295
 8003414:	e004      	b.n	8003420 <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3320      	adds	r3, #32
 8003436:	f107 020c 	add.w	r2, r7, #12
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fb87 	bl	8003b50 <hts221_hum_adc_point_0_get>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003448:	f04f 33ff 	mov.w	r3, #4294967295
 800344c:	e06b      	b.n	8003526 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f103 0220 	add.w	r2, r3, #32
 8003454:	f107 030c 	add.w	r3, r7, #12
 8003458:	3304      	adds	r3, #4
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f000 fad9 	bl	8003a14 <hts221_hum_rh_point_0_get>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
 800346c:	e05b      	b.n	8003526 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f103 0220 	add.w	r2, r3, #32
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	3308      	adds	r3, #8
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f000 fb8b 	bl	8003b98 <hts221_hum_adc_point_1_get>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	e04b      	b.n	8003526 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f103 0220 	add.w	r2, r3, #32
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	330c      	adds	r3, #12
 800349a:	4619      	mov	r1, r3
 800349c:	4610      	mov	r0, r2
 800349e:	f000 fad7 	bl	8003a50 <hts221_hum_rh_point_1_get>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
 80034ac:	e03b      	b.n	8003526 <HTS221_HUM_GetHumidity+0xfe>
 80034ae:	2300      	movs	r3, #0
 80034b0:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3320      	adds	r3, #32
 80034b6:	f107 021c 	add.w	r2, r7, #28
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 fa3d 	bl	800393c <hts221_humidity_raw_get>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	e02b      	b.n	8003526 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80034ce:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034da:	f107 030c 	add.w	r3, r7, #12
 80034de:	eeb0 0a67 	vmov.f32	s0, s15
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f913 	bl	800370e <Linear_Interpolation>
 80034e8:	eef0 7a40 	vmov.f32	s15, s0
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	d503      	bpl.n	800350a <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	edd3 7a00 	vldr	s15, [r3]
 8003510:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003530 <HTS221_HUM_GetHumidity+0x108>
 8003514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351c:	dd02      	ble.n	8003524 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HTS221_HUM_GetHumidity+0x10c>)
 8003522:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	42c80000 	.word	0x42c80000
 8003534:	42c80000 	.word	0x42c80000

08003538 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e015      	b.n	800357a <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3320      	adds	r3, #32
 800355c:	2101      	movs	r1, #1
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa32 	bl	80039c8 <hts221_power_on_set>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e004      	b.n	800357a <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b088      	sub	sp, #32
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3320      	adds	r3, #32
 8003590:	f107 020c 	add.w	r2, r7, #12
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fb22 	bl	8003be0 <hts221_temp_adc_point_0_get>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80035a2:	f04f 33ff 	mov.w	r3, #4294967295
 80035a6:	e052      	b.n	800364e <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f103 0220 	add.w	r2, r3, #32
 80035ae:	f107 030c 	add.w	r3, r7, #12
 80035b2:	3304      	adds	r3, #4
 80035b4:	4619      	mov	r1, r3
 80035b6:	4610      	mov	r0, r2
 80035b8:	f000 fa68 	bl	8003a8c <hts221_temp_deg_point_0_get>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80035c2:	f04f 33ff 	mov.w	r3, #4294967295
 80035c6:	e042      	b.n	800364e <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f103 0220 	add.w	r2, r3, #32
 80035ce:	f107 030c 	add.w	r3, r7, #12
 80035d2:	3308      	adds	r3, #8
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 fb26 	bl	8003c28 <hts221_temp_adc_point_1_get>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
 80035e6:	e032      	b.n	800364e <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f103 0220 	add.w	r2, r3, #32
 80035ee:	f107 030c 	add.w	r3, r7, #12
 80035f2:	330c      	adds	r3, #12
 80035f4:	4619      	mov	r1, r3
 80035f6:	4610      	mov	r0, r2
 80035f8:	f000 fa79 	bl	8003aee <hts221_temp_deg_point_1_get>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003602:	f04f 33ff 	mov.w	r3, #4294967295
 8003606:	e022      	b.n	800364e <HTS221_TEMP_GetTemperature+0xcc>
 8003608:	2300      	movs	r3, #0
 800360a:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3320      	adds	r3, #32
 8003610:	f107 021c 	add.w	r2, r7, #28
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f9b3 	bl	8003982 <hts221_temperature_raw_get>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8003622:	f04f 33ff 	mov.w	r3, #4294967295
 8003626:	e012      	b.n	800364e <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003628:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800362c:	ee07 3a90 	vmov	s15, r3
 8003630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	eeb0 0a67 	vmov.f32	s0, s15
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f866 	bl	800370e <Linear_Interpolation>
 8003642:	eef0 7a40 	vmov.f32	s15, s0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3720      	adds	r7, #32
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003662:	edd7 7a00 	vldr	s15, [r7]
 8003666:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800366a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	d801      	bhi.n	8003678 <HTS221_SetOutputDataRate+0x22>
 8003674:	2301      	movs	r3, #1
 8003676:	e00b      	b.n	8003690 <HTS221_SetOutputDataRate+0x3a>
 8003678:	edd7 7a00 	vldr	s15, [r7]
 800367c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d801      	bhi.n	800368e <HTS221_SetOutputDataRate+0x38>
 800368a:	2302      	movs	r3, #2
 800368c:	e000      	b.n	8003690 <HTS221_SetOutputDataRate+0x3a>
 800368e:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003690:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3320      	adds	r3, #32
 8003696:	7bfa      	ldrb	r2, [r7, #15]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f902 	bl	80038a4 <hts221_data_rate_set>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	e000      	b.n	80036ae <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3320      	adds	r3, #32
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 f97f 	bl	80039c8 <hts221_power_on_set>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 80036d0:	f04f 33ff 	mov.w	r3, #4294967295
 80036d4:	e017      	b.n	8003706 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3320      	adds	r3, #32
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f907 	bl	80038f0 <hts221_block_data_update_set>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 80036e8:	f04f 33ff 	mov.w	r3, #4294967295
 80036ec:	e00b      	b.n	8003706 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 80036ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ffaf 	bl	8003656 <HTS221_SetOutputDataRate>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	e000      	b.n	8003706 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	edd3 7a01 	vldr	s15, [r3, #4]
 8003726:	ee37 7a67 	vsub.f32	s14, s14, s15
 800372a:	edd7 7a00 	vldr	s15, [r7]
 800372e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	edd3 6a02 	vldr	s13, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	edd3 7a01 	vldr	s15, [r3, #4]
 800373e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	ed93 6a00 	vldr	s12, [r3]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	edd3 7a03 	vldr	s15, [r3, #12]
 800374e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003752:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	edd3 7a00 	vldr	s15, [r3]
 8003766:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800376a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800376e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003772:	eeb0 0a67 	vmov.f32	s0, s15
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	461a      	mov	r2, r3
 800378c:	460b      	mov	r3, r1
 800378e:	72fb      	strb	r3, [r7, #11]
 8003790:	4613      	mov	r3, r2
 8003792:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10e      	bne.n	80037be <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	695c      	ldr	r4, [r3, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	7b1b      	ldrb	r3, [r3, #12]
 80037a8:	b298      	uxth	r0, r3
 80037aa:	7afb      	ldrb	r3, [r7, #11]
 80037ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	b299      	uxth	r1, r3
 80037b4:	893b      	ldrh	r3, [r7, #8]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	47a0      	blx	r4
 80037ba:	4603      	mov	r3, r0
 80037bc:	e00d      	b.n	80037da <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	695c      	ldr	r4, [r3, #20]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	7b1b      	ldrb	r3, [r3, #12]
 80037c6:	b298      	uxth	r0, r3
 80037c8:	7afb      	ldrb	r3, [r7, #11]
 80037ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	b299      	uxth	r1, r3
 80037d2:	893b      	ldrh	r3, [r7, #8]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	47a0      	blx	r4
 80037d8:	4603      	mov	r3, r0
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd90      	pop	{r4, r7, pc}

080037e2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037e2:	b590      	push	{r4, r7, lr}
 80037e4:	b087      	sub	sp, #28
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	461a      	mov	r2, r3
 80037ee:	460b      	mov	r3, r1
 80037f0:	72fb      	strb	r3, [r7, #11]
 80037f2:	4613      	mov	r3, r2
 80037f4:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10e      	bne.n	8003820 <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	691c      	ldr	r4, [r3, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	7b1b      	ldrb	r3, [r3, #12]
 800380a:	b298      	uxth	r0, r3
 800380c:	7afb      	ldrb	r3, [r7, #11]
 800380e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003812:	b2db      	uxtb	r3, r3
 8003814:	b299      	uxth	r1, r3
 8003816:	893b      	ldrh	r3, [r7, #8]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	47a0      	blx	r4
 800381c:	4603      	mov	r3, r0
 800381e:	e00d      	b.n	800383c <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	691c      	ldr	r4, [r3, #16]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	7b1b      	ldrb	r3, [r3, #12]
 8003828:	b298      	uxth	r0, r3
 800382a:	7afb      	ldrb	r3, [r7, #11]
 800382c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003830:	b2db      	uxtb	r3, r3
 8003832:	b299      	uxth	r1, r3
 8003834:	893b      	ldrh	r3, [r7, #8]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	47a0      	blx	r4
 800383a:	4603      	mov	r3, r0
  }
}
 800383c:	4618      	mov	r0, r3
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}

08003844 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	461a      	mov	r2, r3
 8003850:	460b      	mov	r3, r1
 8003852:	72fb      	strb	r3, [r7, #11]
 8003854:	4613      	mov	r3, r2
 8003856:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685c      	ldr	r4, [r3, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68d8      	ldr	r0, [r3, #12]
 8003860:	893b      	ldrh	r3, [r7, #8]
 8003862:	7af9      	ldrb	r1, [r7, #11]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	47a0      	blx	r4
 8003868:	6178      	str	r0, [r7, #20]

  return ret;
 800386a:	697b      	ldr	r3, [r7, #20]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bd90      	pop	{r4, r7, pc}

08003874 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	607a      	str	r2, [r7, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	460b      	mov	r3, r1
 8003882:	72fb      	strb	r3, [r7, #11]
 8003884:	4613      	mov	r3, r2
 8003886:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681c      	ldr	r4, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68d8      	ldr	r0, [r3, #12]
 8003890:	893b      	ldrh	r3, [r7, #8]
 8003892:	7af9      	ldrb	r1, [r7, #11]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	47a0      	blx	r4
 8003898:	6178      	str	r0, [r7, #20]

  return ret;
 800389a:	697b      	ldr	r3, [r7, #20]
}
 800389c:	4618      	mov	r0, r3
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd90      	pop	{r4, r7, pc}

080038a4 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80038b0:	f107 0208 	add.w	r2, r7, #8
 80038b4:	2301      	movs	r3, #1
 80038b6:	2120      	movs	r1, #32
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ffc3 	bl	8003844 <hts221_read_reg>
 80038be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	7a3b      	ldrb	r3, [r7, #8]
 80038d0:	f362 0301 	bfi	r3, r2, #0, #2
 80038d4:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80038d6:	f107 0208 	add.w	r2, r7, #8
 80038da:	2301      	movs	r3, #1
 80038dc:	2120      	movs	r1, #32
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ffc8 	bl	8003874 <hts221_write_reg>
 80038e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80038fc:	f107 0208 	add.w	r2, r7, #8
 8003900:	2301      	movs	r3, #1
 8003902:	2120      	movs	r1, #32
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff9d 	bl	8003844 <hts221_read_reg>
 800390a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	7a3b      	ldrb	r3, [r7, #8]
 800391c:	f362 0382 	bfi	r3, r2, #2, #1
 8003920:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003922:	f107 0208 	add.w	r2, r7, #8
 8003926:	2301      	movs	r3, #1
 8003928:	2120      	movs	r1, #32
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffa2 	bl	8003874 <hts221_write_reg>
 8003930:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003946:	f107 0208 	add.w	r2, r7, #8
 800394a:	2302      	movs	r3, #2
 800394c:	2128      	movs	r1, #40	; 0x28
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff78 	bl	8003844 <hts221_read_reg>
 8003954:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003956:	7a7b      	ldrb	r3, [r7, #9]
 8003958:	b21a      	sxth	r2, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003964:	b29b      	uxth	r3, r3
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	b29a      	uxth	r2, r3
 800396a:	7a3b      	ldrb	r3, [r7, #8]
 800396c:	b29b      	uxth	r3, r3
 800396e:	4413      	add	r3, r2
 8003970:	b29b      	uxth	r3, r3
 8003972:	b21a      	sxth	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	801a      	strh	r2, [r3, #0]

  return ret;
 8003978:	68fb      	ldr	r3, [r7, #12]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800398c:	f107 0208 	add.w	r2, r7, #8
 8003990:	2302      	movs	r3, #2
 8003992:	212a      	movs	r1, #42	; 0x2a
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff55 	bl	8003844 <hts221_read_reg>
 800399a:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800399c:	7a7b      	ldrb	r3, [r7, #9]
 800399e:	b21a      	sxth	r2, r3
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	7a3b      	ldrb	r3, [r7, #8]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	b21a      	sxth	r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	801a      	strh	r2, [r3, #0]

  return ret;
 80039be:	68fb      	ldr	r3, [r7, #12]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80039d4:	f107 0208 	add.w	r2, r7, #8
 80039d8:	2301      	movs	r3, #1
 80039da:	2120      	movs	r1, #32
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff ff31 	bl	8003844 <hts221_read_reg>
 80039e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10f      	bne.n	8003a0a <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	7a3b      	ldrb	r3, [r7, #8]
 80039f4:	f362 13c7 	bfi	r3, r2, #7, #1
 80039f8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80039fa:	f107 0208 	add.w	r2, r7, #8
 80039fe:	2301      	movs	r3, #1
 8003a00:	2120      	movs	r1, #32
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ff36 	bl	8003874 <hts221_write_reg>
 8003a08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003a1e:	f107 020b 	add.w	r2, r7, #11
 8003a22:	2301      	movs	r3, #1
 8003a24:	2130      	movs	r1, #48	; 0x30
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ff0c 	bl	8003844 <hts221_read_reg>
 8003a2c:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	ee07 3a90 	vmov	s15, r3
 8003a34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a38:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003a5a:	f107 020b 	add.w	r2, r7, #11
 8003a5e:	2301      	movs	r3, #1
 8003a60:	2131      	movs	r1, #49	; 0x31
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff feee 	bl	8003844 <hts221_read_reg>
 8003a68:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003a82:	68fb      	ldr	r3, [r7, #12]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003a96:	f107 020f 	add.w	r2, r7, #15
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	2132      	movs	r1, #50	; 0x32
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fed0 	bl	8003844 <hts221_read_reg>
 8003aa4:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11b      	bne.n	8003ae4 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003aac:	f107 0210 	add.w	r2, r7, #16
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	2135      	movs	r1, #53	; 0x35
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff fec5 	bl	8003844 <hts221_read_reg>
 8003aba:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003abc:	7c3b      	ldrb	r3, [r7, #16]
 8003abe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	021b      	lsls	r3, r3, #8
 8003aca:	7bfa      	ldrb	r2, [r7, #15]
 8003acc:	4413      	add	r3, r2
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ad6:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003ada:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003ae4:	697b      	ldr	r3, [r7, #20]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003af8:	f107 020f 	add.w	r2, r7, #15
 8003afc:	2301      	movs	r3, #1
 8003afe:	2133      	movs	r1, #51	; 0x33
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fe9f 	bl	8003844 <hts221_read_reg>
 8003b06:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11b      	bne.n	8003b46 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003b0e:	f107 0210 	add.w	r2, r7, #16
 8003b12:	2301      	movs	r3, #1
 8003b14:	2135      	movs	r1, #53	; 0x35
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fe94 	bl	8003844 <hts221_read_reg>
 8003b1c:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003b1e:	7c3b      	ldrb	r3, [r7, #16]
 8003b20:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	4413      	add	r3, r2
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b38:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003b46:	697b      	ldr	r3, [r7, #20]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003b5a:	f107 0208 	add.w	r2, r7, #8
 8003b5e:	2302      	movs	r3, #2
 8003b60:	2136      	movs	r1, #54	; 0x36
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7ff fe6e 	bl	8003844 <hts221_read_reg>
 8003b68:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003b6a:	7a7b      	ldrb	r3, [r7, #9]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	7a3b      	ldrb	r3, [r7, #8]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003b7c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003ba2:	f107 0208 	add.w	r2, r7, #8
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	213a      	movs	r1, #58	; 0x3a
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fe4a 	bl	8003844 <hts221_read_reg>
 8003bb0:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003bb2:	7a7b      	ldrb	r3, [r7, #9]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	021b      	lsls	r3, r3, #8
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	7a3b      	ldrb	r3, [r7, #8]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003bc4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8003bea:	f107 0208 	add.w	r2, r7, #8
 8003bee:	2302      	movs	r3, #2
 8003bf0:	213c      	movs	r1, #60	; 0x3c
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe26 	bl	8003844 <hts221_read_reg>
 8003bf8:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003bfa:	7a7b      	ldrb	r3, [r7, #9]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	7a3b      	ldrb	r3, [r7, #8]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4413      	add	r3, r2
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003c0c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8003c32:	f107 0208 	add.w	r2, r7, #8
 8003c36:	2302      	movs	r3, #2
 8003c38:	213e      	movs	r1, #62	; 0x3e
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff fe02 	bl	8003844 <hts221_read_reg>
 8003c40:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003c42:	7a7b      	ldrb	r3, [r7, #9]
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	7a3b      	ldrb	r3, [r7, #8]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	4413      	add	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003c54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003c58:	ee07 3a90 	vmov	s15, r3
 8003c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003c66:	68fb      	ldr	r3, [r7, #12]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d103      	bne.n	8003c8c <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 8003c84:	f04f 33ff 	mov.w	r3, #4294967295
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	e051      	b.n	8003d30 <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	7b1a      	ldrb	r2, [r3, #12]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695a      	ldr	r2, [r3, #20]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699a      	ldr	r2, [r3, #24]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a1d      	ldr	r2, [pc, #116]	; (8003d3c <LPS22HB_RegisterBusIO+0xcc>)
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	; (8003d40 <LPS22HB_RegisterBusIO+0xd0>)
 8003cce:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e020      	b.n	8003d30 <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4798      	blx	r3
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e016      	b.n	8003d30 <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d112      	bne.n	8003d30 <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10d      	bne.n	8003d30 <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8003d14:	2301      	movs	r3, #1
 8003d16:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2110      	movs	r1, #16
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f877 	bl	8003e12 <LPS22HB_Write_Reg>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8003d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	08003efb 	.word	0x08003efb
 8003d40:	08003f81 	.word	0x08003f81

08003d44 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d108      	bne.n	8003d68 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f876 	bl	8003e48 <LPS22HB_Initialize>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 8003d62:	f04f 33ff 	mov.w	r3, #4294967295
 8003d66:	e004      	b.n	8003d72 <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e014      	b.n	8003dba <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f103 0220 	add.w	r2, r3, #32
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f000 f9c6 	bl	8004130 <lps22hb_data_rate_set>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e004      	b.n	8003dba <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 8003dcc:	f107 030c 	add.w	r3, r7, #12
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f00a f801 	bl	800dddc <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3320      	adds	r3, #32
 8003dde:	f107 020c 	add.w	r2, r7, #12
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f9c9 	bl	800417c <lps22hb_pressure_raw_get>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295
 8003df4:	e009      	b.n	8003e0a <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f935 	bl	8004068 <lps22hb_from_lsb_to_hpa>
 8003dfe:	eef0 7a40 	vmov.f32	s15, s0
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b082      	sub	sp, #8
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	70fb      	strb	r3, [r7, #3]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f103 0020 	add.w	r0, r3, #32
 8003e28:	1cba      	adds	r2, r7, #2
 8003e2a:	78f9      	ldrb	r1, [r7, #3]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f000 f902 	bl	8004036 <lps22hb_write_reg>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d002      	beq.n	8003e3e <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8003e38:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3c:	e000      	b.n	8003e40 <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3320      	adds	r3, #32
 8003e54:	2101      	movs	r1, #1
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f9b9 	bl	80041ce <lps22hb_low_power_set>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295
 8003e66:	e044      	b.n	8003ef2 <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3320      	adds	r3, #32
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 f95e 	bl	8004130 <lps22hb_data_rate_set>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	e038      	b.n	8003ef2 <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3320      	adds	r3, #32
 8003e84:	2102      	movs	r1, #2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 f92c 	bl	80040e4 <lps22hb_low_pass_filter_mode_set>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 8003e92:	f04f 33ff 	mov.w	r3, #4294967295
 8003e96:	e02c      	b.n	8003ef2 <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3320      	adds	r3, #32
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 f8fa 	bl	8004098 <lps22hb_block_data_update_set>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	e020      	b.n	8003ef2 <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3320      	adds	r3, #32
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f9ab 	bl	800421a <lps22hb_auto_add_inc_set>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00e      	beq.n	8003ee8 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8003eca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ece:	e010      	b.n	8003ef2 <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3320      	adds	r3, #32
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f99f 	bl	800421a <lps22hb_auto_add_inc_set>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d002      	beq.n	8003ee8 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	e004      	b.n	8003ef2 <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2203      	movs	r2, #3
 8003eec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003efa:	b590      	push	{r4, r7, lr}
 8003efc:	b089      	sub	sp, #36	; 0x24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	461a      	mov	r2, r3
 8003f06:	460b      	mov	r3, r1
 8003f08:	72fb      	strb	r3, [r7, #11]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d121      	bne.n	8003f62 <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8003f1e:	2300      	movs	r3, #0
 8003f20:	83fb      	strh	r3, [r7, #30]
 8003f22:	e018      	b.n	8003f56 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	695c      	ldr	r4, [r3, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	7b1b      	ldrb	r3, [r3, #12]
 8003f2c:	b298      	uxth	r0, r3
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	8bfb      	ldrh	r3, [r7, #30]
 8003f34:	4413      	add	r3, r2
 8003f36:	b299      	uxth	r1, r3
 8003f38:	8bfb      	ldrh	r3, [r7, #30]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	441a      	add	r2, r3
 8003f3e:	2301      	movs	r3, #1
 8003f40:	47a0      	blx	r4
 8003f42:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8003f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f4e:	e013      	b.n	8003f78 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8003f50:	8bfb      	ldrh	r3, [r7, #30]
 8003f52:	3301      	adds	r3, #1
 8003f54:	83fb      	strh	r3, [r7, #30]
 8003f56:	8bfa      	ldrh	r2, [r7, #30]
 8003f58:	893b      	ldrh	r3, [r7, #8]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d3e2      	bcc.n	8003f24 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	e00a      	b.n	8003f78 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	695c      	ldr	r4, [r3, #20]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	7b1b      	ldrb	r3, [r3, #12]
 8003f6a:	b298      	uxth	r0, r3
 8003f6c:	7afb      	ldrb	r3, [r7, #11]
 8003f6e:	b299      	uxth	r1, r3
 8003f70:	893b      	ldrh	r3, [r7, #8]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	47a0      	blx	r4
 8003f76:	4603      	mov	r3, r0
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3724      	adds	r7, #36	; 0x24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd90      	pop	{r4, r7, pc}

08003f80 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f80:	b590      	push	{r4, r7, lr}
 8003f82:	b089      	sub	sp, #36	; 0x24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	607a      	str	r2, [r7, #4]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	72fb      	strb	r3, [r7, #11]
 8003f90:	4613      	mov	r3, r2
 8003f92:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d121      	bne.n	8003fe8 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	83fb      	strh	r3, [r7, #30]
 8003fa8:	e018      	b.n	8003fdc <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	691c      	ldr	r4, [r3, #16]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	7b1b      	ldrb	r3, [r3, #12]
 8003fb2:	b298      	uxth	r0, r3
 8003fb4:	7afb      	ldrb	r3, [r7, #11]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	8bfb      	ldrh	r3, [r7, #30]
 8003fba:	4413      	add	r3, r2
 8003fbc:	b299      	uxth	r1, r3
 8003fbe:	8bfb      	ldrh	r3, [r7, #30]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	441a      	add	r2, r3
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	47a0      	blx	r4
 8003fc8:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8003fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fd4:	e013      	b.n	8003ffe <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 8003fd6:	8bfb      	ldrh	r3, [r7, #30]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	83fb      	strh	r3, [r7, #30]
 8003fdc:	8bfa      	ldrh	r2, [r7, #30]
 8003fde:	893b      	ldrh	r3, [r7, #8]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d3e2      	bcc.n	8003faa <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	e00a      	b.n	8003ffe <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	691c      	ldr	r4, [r3, #16]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	7b1b      	ldrb	r3, [r3, #12]
 8003ff0:	b298      	uxth	r0, r3
 8003ff2:	7afb      	ldrb	r3, [r7, #11]
 8003ff4:	b299      	uxth	r1, r3
 8003ff6:	893b      	ldrh	r3, [r7, #8]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	47a0      	blx	r4
 8003ffc:	4603      	mov	r3, r0
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3724      	adds	r7, #36	; 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd90      	pop	{r4, r7, pc}

08004006 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004006:	b590      	push	{r4, r7, lr}
 8004008:	b087      	sub	sp, #28
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	461a      	mov	r2, r3
 8004012:	460b      	mov	r3, r1
 8004014:	72fb      	strb	r3, [r7, #11]
 8004016:	4613      	mov	r3, r2
 8004018:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685c      	ldr	r4, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68d8      	ldr	r0, [r3, #12]
 8004022:	893b      	ldrh	r3, [r7, #8]
 8004024:	7af9      	ldrb	r1, [r7, #11]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	47a0      	blx	r4
 800402a:	6178      	str	r0, [r7, #20]

  return ret;
 800402c:	697b      	ldr	r3, [r7, #20]
}
 800402e:	4618      	mov	r0, r3
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	bd90      	pop	{r4, r7, pc}

08004036 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004036:	b590      	push	{r4, r7, lr}
 8004038:	b087      	sub	sp, #28
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	461a      	mov	r2, r3
 8004042:	460b      	mov	r3, r1
 8004044:	72fb      	strb	r3, [r7, #11]
 8004046:	4613      	mov	r3, r2
 8004048:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681c      	ldr	r4, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68d8      	ldr	r0, [r3, #12]
 8004052:	893b      	ldrh	r3, [r7, #8]
 8004054:	7af9      	ldrb	r1, [r7, #11]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	47a0      	blx	r4
 800405a:	6178      	str	r0, [r7, #20]

  return ret;
 800405c:	697b      	ldr	r3, [r7, #20]
}
 800405e:	4618      	mov	r0, r3
 8004060:	371c      	adds	r7, #28
 8004062:	46bd      	mov	sp, r7
 8004064:	bd90      	pop	{r4, r7, pc}
	...

08004068 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004094 <lps22hb_from_lsb_to_hpa+0x2c>
 800407e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004082:	eef0 7a66 	vmov.f32	s15, s13
}
 8004086:	eeb0 0a67 	vmov.f32	s0, s15
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	49800000 	.word	0x49800000

08004098 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80040a4:	f107 0208 	add.w	r2, r7, #8
 80040a8:	2301      	movs	r3, #1
 80040aa:	2110      	movs	r1, #16
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff ffaa 	bl	8004006 <lps22hb_read_reg>
 80040b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 80040ba:	78fb      	ldrb	r3, [r7, #3]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	7a3b      	ldrb	r3, [r7, #8]
 80040c4:	f362 0341 	bfi	r3, r2, #1, #1
 80040c8:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80040ca:	f107 0208 	add.w	r2, r7, #8
 80040ce:	2301      	movs	r3, #1
 80040d0:	2110      	movs	r1, #16
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff ffaf 	bl	8004036 <lps22hb_write_reg>
 80040d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80040f0:	f107 0208 	add.w	r2, r7, #8
 80040f4:	2301      	movs	r3, #1
 80040f6:	2110      	movs	r1, #16
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ff84 	bl	8004006 <lps22hb_read_reg>
 80040fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10f      	bne.n	8004126 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	b2da      	uxtb	r2, r3
 800410e:	7a3b      	ldrb	r3, [r7, #8]
 8004110:	f362 0383 	bfi	r3, r2, #2, #2
 8004114:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004116:	f107 0208 	add.w	r2, r7, #8
 800411a:	2301      	movs	r3, #1
 800411c:	2110      	movs	r1, #16
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff89 	bl	8004036 <lps22hb_write_reg>
 8004124:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004126:	68fb      	ldr	r3, [r7, #12]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3710      	adds	r7, #16
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800413c:	f107 0208 	add.w	r2, r7, #8
 8004140:	2301      	movs	r3, #1
 8004142:	2110      	movs	r1, #16
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff ff5e 	bl	8004006 <lps22hb_read_reg>
 800414a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	b2da      	uxtb	r2, r3
 800415a:	7a3b      	ldrb	r3, [r7, #8]
 800415c:	f362 1306 	bfi	r3, r2, #4, #3
 8004160:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004162:	f107 0208 	add.w	r2, r7, #8
 8004166:	2301      	movs	r3, #1
 8004168:	2110      	movs	r1, #16
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ff63 	bl	8004036 <lps22hb_write_reg>
 8004170:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 8004186:	f107 0208 	add.w	r2, r7, #8
 800418a:	2303      	movs	r3, #3
 800418c:	2128      	movs	r1, #40	; 0x28
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff39 	bl	8004006 <lps22hb_read_reg>
 8004194:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8004196:	7abb      	ldrb	r3, [r7, #10]
 8004198:	461a      	mov	r2, r3
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	7a7a      	ldrb	r2, [r7, #9]
 80041a6:	441a      	add	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	7a3a      	ldrb	r2, [r7, #8]
 80041b4:	441a      	add	r2, r3
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	021a      	lsls	r2, r3, #8
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	601a      	str	r2, [r3, #0]

  return ret;
 80041c4:	68fb      	ldr	r3, [r7, #12]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80041da:	f107 0208 	add.w	r2, r7, #8
 80041de:	2301      	movs	r3, #1
 80041e0:	211a      	movs	r1, #26
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ff0f 	bl	8004006 <lps22hb_read_reg>
 80041e8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10f      	bne.n	8004210 <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	7a3b      	ldrb	r3, [r7, #8]
 80041fa:	f362 0300 	bfi	r3, r2, #0, #1
 80041fe:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 8004200:	f107 0208 	add.w	r2, r7, #8
 8004204:	2301      	movs	r3, #1
 8004206:	211a      	movs	r1, #26
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff14 	bl	8004036 <lps22hb_write_reg>
 800420e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004210:	68fb      	ldr	r3, [r7, #12]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3710      	adds	r7, #16
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	460b      	mov	r3, r1
 8004224:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004226:	f107 0208 	add.w	r2, r7, #8
 800422a:	2301      	movs	r3, #1
 800422c:	2111      	movs	r1, #17
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fee9 	bl	8004006 <lps22hb_read_reg>
 8004234:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10f      	bne.n	800425c <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	b2da      	uxtb	r2, r3
 8004244:	7a3b      	ldrb	r3, [r7, #8]
 8004246:	f362 1304 	bfi	r3, r2, #4, #1
 800424a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800424c:	f107 0208 	add.w	r2, r7, #8
 8004250:	2301      	movs	r3, #1
 8004252:	2111      	movs	r1, #17
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff feee 	bl	8004036 <lps22hb_write_reg>
 800425a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800425c:	68fb      	ldr	r3, [r7, #12]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d103      	bne.n	8004284 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	60fb      	str	r3, [r7, #12]
 8004282:	e051      	b.n	8004328 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	7b1a      	ldrb	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a1d      	ldr	r2, [pc, #116]	; (8004334 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a1c      	ldr	r2, [pc, #112]	; (8004338 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 80042c6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	69da      	ldr	r2, [r3, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	e020      	b.n	8004328 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4798      	blx	r3
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	e016      	b.n	8004328 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d112      	bne.n	8004328 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 800430c:	2301      	movs	r3, #1
 800430e:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8004310:	7afb      	ldrb	r3, [r7, #11]
 8004312:	461a      	mov	r2, r3
 8004314:	2123      	movs	r1, #35	; 0x23
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f97b 	bl	8004612 <LSM303AGR_ACC_Write_Reg>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	e000      	b.n	800432a <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8004328:	68fb      	ldr	r3, [r7, #12]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	08004a2d 	.word	0x08004a2d
 8004338:	08004a8f 	.word	0x08004a8f

0800433c <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3320      	adds	r3, #32
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fd1a 	bl	8004d84 <lsm303agr_xl_block_data_update_set>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d002      	beq.n	800435c <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8004356:	f04f 33ff 	mov.w	r3, #4294967295
 800435a:	e02c      	b.n	80043b6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3320      	adds	r3, #32
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fe62 	bl	800502c <lsm303agr_xl_fifo_mode_set>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800436e:	f04f 33ff 	mov.w	r3, #4294967295
 8004372:	e020      	b.n	80043b6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2205      	movs	r2, #5
 8004378:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3320      	adds	r3, #32
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fc7a 	bl	8004c7c <lsm303agr_xl_data_rate_set>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	e010      	b.n	80043b6 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3320      	adds	r3, #32
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fc94 	bl	8004cc8 <lsm303agr_xl_full_scale_set>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80043a6:	f04f 33ff 	mov.w	r3, #4294967295
 80043aa:	e004      	b.n	80043b6 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e014      	b.n	80043fe <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f103 0220 	add.w	r2, r3, #32
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f000 fc4a 	bl	8004c7c <lsm303agr_xl_data_rate_set>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e004      	b.n	80043fe <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3320      	adds	r3, #32
 8004418:	f107 020b 	add.w	r2, r7, #11
 800441c:	4611      	mov	r1, r2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fbf8 	bl	8004c14 <lsm303agr_xl_operating_mode_get>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e031      	b.n	8004494 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8004430:	7afb      	ldrb	r3, [r7, #11]
 8004432:	2b02      	cmp	r3, #2
 8004434:	d01a      	beq.n	800446c <LSM303AGR_ACC_GetSensitivity+0x66>
 8004436:	2b02      	cmp	r3, #2
 8004438:	dc22      	bgt.n	8004480 <LSM303AGR_ACC_GetSensitivity+0x7a>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <LSM303AGR_ACC_GetSensitivity+0x3e>
 800443e:	2b01      	cmp	r3, #1
 8004440:	d00a      	beq.n	8004458 <LSM303AGR_ACC_GetSensitivity+0x52>
 8004442:	e01d      	b.n	8004480 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8004444:	6839      	ldr	r1, [r7, #0]
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa1e 	bl	8004888 <LSM303AGR_ACC_GetSensitivityHR>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01a      	beq.n	8004488 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	e01d      	b.n	8004494 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8004458:	6839      	ldr	r1, [r7, #0]
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa5a 	bl	8004914 <LSM303AGR_ACC_GetSensitivityNM>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d012      	beq.n	800448c <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e013      	b.n	8004494 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fa96 	bl	80049a0 <LSM303AGR_ACC_GetSensitivityLP>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	e009      	b.n	8004494 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8004480:	f04f 33ff 	mov.w	r3, #4294967295
 8004484:	60fb      	str	r3, [r7, #12]
      break;
 8004486:	e004      	b.n	8004492 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8004488:	bf00      	nop
 800448a:	e002      	b.n	8004492 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 800448c:	bf00      	nop
 800448e:	e000      	b.n	8004492 <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8004490:	bf00      	nop
  }

  return ret;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80044a6:	2301      	movs	r3, #1
 80044a8:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3320      	adds	r3, #32
 80044b2:	f107 020f 	add.w	r2, r7, #15
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fbab 	bl	8004c14 <lsm303agr_xl_operating_mode_get>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80044c4:	f04f 33ff 	mov.w	r3, #4294967295
 80044c8:	e04a      	b.n	8004560 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d00c      	beq.n	80044ea <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	dc0e      	bgt.n	80044f2 <LSM303AGR_ACC_GetAxesRaw+0x56>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <LSM303AGR_ACC_GetAxesRaw+0x42>
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d003      	beq.n	80044e4 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80044dc:	e009      	b.n	80044f2 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80044de:	2310      	movs	r3, #16
 80044e0:	83fb      	strh	r3, [r7, #30]
      break;
 80044e2:	e00a      	b.n	80044fa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 80044e4:	2340      	movs	r3, #64	; 0x40
 80044e6:	83fb      	strh	r3, [r7, #30]
      break;
 80044e8:	e007      	b.n	80044fa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 80044ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ee:	83fb      	strh	r3, [r7, #30]
      break;
 80044f0:	e003      	b.n	80044fa <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	61bb      	str	r3, [r7, #24]
      break;
 80044f8:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004500:	d101      	bne.n	8004506 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	e02c      	b.n	8004560 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3320      	adds	r3, #32
 800450a:	f107 0210 	add.w	r2, r7, #16
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fc5d 	bl	8004dd0 <lsm303agr_acceleration_raw_get>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 800451c:	f04f 33ff 	mov.w	r3, #4294967295
 8004520:	e01e      	b.n	8004560 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8004522:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004526:	461a      	mov	r2, r3
 8004528:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800452c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004530:	b21a      	sxth	r2, r3
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8004536:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800453a:	461a      	mov	r2, r3
 800453c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004540:	fb92 f3f3 	sdiv	r3, r2, r3
 8004544:	b21a      	sxth	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 800454a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800454e:	461a      	mov	r2, r3
 8004550:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004554:	fb92 f3f3 	sdiv	r3, r2, r3
 8004558:	b21a      	sxth	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	809a      	strh	r2, [r3, #4]

  return ret;
 800455e:	69bb      	ldr	r3, [r7, #24]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3720      	adds	r7, #32
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	4619      	mov	r1, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff ff8c 	bl	800449c <LSM303AGR_ACC_GetAxesRaw>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	e03c      	b.n	800460a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff ff35 	bl	8004406 <LSM303AGR_ACC_GetSensitivity>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
 80045a6:	e030      	b.n	800460a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80045a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045ac:	ee07 3a90 	vmov	s15, r3
 80045b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c0:	ee17 2a90 	vmov	r2, s15
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80045c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e0:	ee17 2a90 	vmov	r2, s15
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80045e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004600:	ee17 2a90 	vmov	r2, s15
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	460b      	mov	r3, r1
 800461c:	70fb      	strb	r3, [r7, #3]
 800461e:	4613      	mov	r3, r2
 8004620:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f103 0020 	add.w	r0, r3, #32
 8004628:	1cba      	adds	r2, r7, #2
 800462a:	78f9      	ldrb	r1, [r7, #3]
 800462c:	2301      	movs	r3, #1
 800462e:	f000 fad9 	bl	8004be4 <lsm303agr_write_reg>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	e000      	b.n	8004640 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d103      	bne.n	8004664 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800465c:	f04f 33ff 	mov.w	r3, #4294967295
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e04b      	b.n	80046fc <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	7b1a      	ldrb	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	699a      	ldr	r2, [r3, #24]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a19      	ldr	r2, [pc, #100]	; (800470c <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 80046a6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e01e      	b.n	80046fc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4798      	blx	r3
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	e014      	b.n	80046fc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d010      	beq.n	80046fc <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3320      	adds	r3, #32
 80046e8:	2101      	movs	r1, #1
 80046ea:	4618      	mov	r0, r3
 80046ec:	f000 fcc4 	bl	8005078 <lsm303agr_mag_i2c_interface_set>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295
 80046fa:	e000      	b.n	80046fe <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80046fc:	68fb      	ldr	r3, [r7, #12]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	08004af1 	.word	0x08004af1
 800470c:	08004b53 	.word	0x08004b53

08004710 <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3320      	adds	r3, #32
 800471c:	2101      	movs	r1, #1
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fbed 	bl	8004efe <lsm303agr_mag_block_data_update_set>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	e028      	b.n	8004782 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	3320      	adds	r3, #32
 8004734:	2102      	movs	r1, #2
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fb95 	bl	8004e66 <lsm303agr_mag_operating_mode_set>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	e01c      	b.n	8004782 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3320      	adds	r3, #32
 800474c:	2103      	movs	r1, #3
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fbaf 	bl	8004eb2 <lsm303agr_mag_data_rate_set>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d002      	beq.n	8004760 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295
 800475e:	e010      	b.n	8004782 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3320      	adds	r3, #32
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fc3a 	bl	8004fe0 <lsm303agr_mag_self_test_set>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	e004      	b.n	8004782 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e010      	b.n	80047c2 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3320      	adds	r3, #32
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 fb5d 	bl	8004e66 <lsm303agr_mag_operating_mode_set>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	e004      	b.n	80047c2 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80047da:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3320      	adds	r3, #32
 80047f8:	f107 0210 	add.w	r2, r7, #16
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fba3 	bl	8004f4a <lsm303agr_magnetic_raw_get>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 800480a:	f04f 33ff 	mov.w	r3, #4294967295
 800480e:	e036      	b.n	800487e <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8004810:	f107 030c 	add.w	r3, r7, #12
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ffd7 	bl	80047ca <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800481c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004820:	ee07 3a90 	vmov	s15, r3
 8004824:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004828:	edd7 7a03 	vldr	s15, [r7, #12]
 800482c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004830:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004834:	ee17 2a90 	vmov	r2, s15
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800483c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004840:	ee07 3a90 	vmov	s15, r3
 8004844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004848:	edd7 7a03 	vldr	s15, [r7, #12]
 800484c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004854:	ee17 2a90 	vmov	r2, s15
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800485c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004868:	edd7 7a03 	vldr	s15, [r7, #12]
 800486c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004870:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004874:	ee17 2a90 	vmov	r2, s15
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3320      	adds	r3, #32
 800489a:	f107 020b 	add.w	r2, r7, #11
 800489e:	4611      	mov	r1, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fa37 	bl	8004d14 <lsm303agr_xl_full_scale_get>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	e023      	b.n	80048fa <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d81b      	bhi.n	80048f0 <LSM303AGR_ACC_GetSensitivityHR+0x68>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048d9 	.word	0x080048d9
 80048c8:	080048e1 	.word	0x080048e1
 80048cc:	080048e9 	.word	0x080048e9
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 80048d4:	601a      	str	r2, [r3, #0]
      break;
 80048d6:	e00f      	b.n	80048f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 80048dc:	601a      	str	r2, [r3, #0]
      break;
 80048de:	e00b      	b.n	80048f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 80048e4:	601a      	str	r2, [r3, #0]
      break;
 80048e6:	e007      	b.n	80048f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4a09      	ldr	r2, [pc, #36]	; (8004910 <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 80048ec:	601a      	str	r2, [r3, #0]
      break;
 80048ee:	e003      	b.n	80048f8 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	60fb      	str	r3, [r7, #12]
      break;
 80048f6:	bf00      	nop
  }

  return ret;
 80048f8:	68fb      	ldr	r3, [r7, #12]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	3f7ae148 	.word	0x3f7ae148
 8004908:	3ff9999a 	.word	0x3ff9999a
 800490c:	4079999a 	.word	0x4079999a
 8004910:	413b851f 	.word	0x413b851f

08004914 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3320      	adds	r3, #32
 8004926:	f107 020b 	add.w	r2, r7, #11
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f9f1 	bl	8004d14 <lsm303agr_xl_full_scale_get>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8004938:	f04f 33ff 	mov.w	r3, #4294967295
 800493c:	e023      	b.n	8004986 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800493e:	7afb      	ldrb	r3, [r7, #11]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d81b      	bhi.n	800497c <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	0800495d 	.word	0x0800495d
 8004950:	08004965 	.word	0x08004965
 8004954:	0800496d 	.word	0x0800496d
 8004958:	08004975 	.word	0x08004975
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	4a0c      	ldr	r2, [pc, #48]	; (8004990 <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8004960:	601a      	str	r2, [r3, #0]
      break;
 8004962:	e00f      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	4a0b      	ldr	r2, [pc, #44]	; (8004994 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8004968:	601a      	str	r2, [r3, #0]
      break;
 800496a:	e00b      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8004970:	601a      	str	r2, [r3, #0]
      break;
 8004972:	e007      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4a09      	ldr	r2, [pc, #36]	; (800499c <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8004978:	601a      	str	r2, [r3, #0]
      break;
 800497a:	e003      	b.n	8004984 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295
 8004980:	60fb      	str	r3, [r7, #12]
      break;
 8004982:	bf00      	nop
  }

  return ret;
 8004984:	68fb      	ldr	r3, [r7, #12]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	4079999a 	.word	0x4079999a
 8004994:	40fa3d71 	.word	0x40fa3d71
 8004998:	417a147b 	.word	0x417a147b
 800499c:	423b999a 	.word	0x423b999a

080049a0 <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3320      	adds	r3, #32
 80049b2:	f107 020b 	add.w	r2, r7, #11
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f9ab 	bl	8004d14 <lsm303agr_xl_full_scale_get>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	e023      	b.n	8004a12 <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	2b03      	cmp	r3, #3
 80049ce:	d81b      	bhi.n	8004a08 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 80049d0:	a201      	add	r2, pc, #4	; (adr r2, 80049d8 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 80049d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d6:	bf00      	nop
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f1 	.word	0x080049f1
 80049e0:	080049f9 	.word	0x080049f9
 80049e4:	08004a01 	.word	0x08004a01
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 80049ec:	601a      	str	r2, [r3, #0]
      break;
 80049ee:	e00f      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	4a0b      	ldr	r2, [pc, #44]	; (8004a20 <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80049f4:	601a      	str	r2, [r3, #0]
      break;
 80049f6:	e00b      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80049fc:	601a      	str	r2, [r3, #0]
      break;
 80049fe:	e007      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8004a04:	601a      	str	r2, [r3, #0]
      break;
 8004a06:	e003      	b.n	8004a10 <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	60fb      	str	r3, [r7, #12]
      break;
 8004a0e:	bf00      	nop
  }

  return ret;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	417a147b 	.word	0x417a147b
 8004a20:	41fa147b 	.word	0x41fa147b
 8004a24:	427a147b 	.word	0x427a147b
 8004a28:	433b947b 	.word	0x433b947b

08004a2c <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b087      	sub	sp, #28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	461a      	mov	r2, r3
 8004a38:	460b      	mov	r3, r1
 8004a3a:	72fb      	strb	r3, [r7, #11]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10e      	bne.n	8004a6a <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	695c      	ldr	r4, [r3, #20]
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	7b1b      	ldrb	r3, [r3, #12]
 8004a54:	b298      	uxth	r0, r3
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	b299      	uxth	r1, r3
 8004a60:	893b      	ldrh	r3, [r7, #8]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	47a0      	blx	r4
 8004a66:	4603      	mov	r3, r0
 8004a68:	e00d      	b.n	8004a86 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	695c      	ldr	r4, [r3, #20]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	7b1b      	ldrb	r3, [r3, #12]
 8004a72:	b298      	uxth	r0, r3
 8004a74:	7afb      	ldrb	r3, [r7, #11]
 8004a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	b299      	uxth	r1, r3
 8004a7e:	893b      	ldrh	r3, [r7, #8]
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	47a0      	blx	r4
 8004a84:	4603      	mov	r3, r0
  }
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	371c      	adds	r7, #28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd90      	pop	{r4, r7, pc}

08004a8e <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a8e:	b590      	push	{r4, r7, lr}
 8004a90:	b087      	sub	sp, #28
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	72fb      	strb	r3, [r7, #11]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10e      	bne.n	8004acc <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	691c      	ldr	r4, [r3, #16]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	7b1b      	ldrb	r3, [r3, #12]
 8004ab6:	b298      	uxth	r0, r3
 8004ab8:	7afb      	ldrb	r3, [r7, #11]
 8004aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	b299      	uxth	r1, r3
 8004ac2:	893b      	ldrh	r3, [r7, #8]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	47a0      	blx	r4
 8004ac8:	4603      	mov	r3, r0
 8004aca:	e00d      	b.n	8004ae8 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	691c      	ldr	r4, [r3, #16]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	7b1b      	ldrb	r3, [r3, #12]
 8004ad4:	b298      	uxth	r0, r3
 8004ad6:	7afb      	ldrb	r3, [r7, #11]
 8004ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	b299      	uxth	r1, r3
 8004ae0:	893b      	ldrh	r3, [r7, #8]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	47a0      	blx	r4
 8004ae6:	4603      	mov	r3, r0
  }
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	371c      	adds	r7, #28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd90      	pop	{r4, r7, pc}

08004af0 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	461a      	mov	r2, r3
 8004afc:	460b      	mov	r3, r1
 8004afe:	72fb      	strb	r3, [r7, #11]
 8004b00:	4613      	mov	r3, r2
 8004b02:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10e      	bne.n	8004b2e <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	695c      	ldr	r4, [r3, #20]
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	7b1b      	ldrb	r3, [r3, #12]
 8004b18:	b298      	uxth	r0, r3
 8004b1a:	7afb      	ldrb	r3, [r7, #11]
 8004b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	b299      	uxth	r1, r3
 8004b24:	893b      	ldrh	r3, [r7, #8]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	47a0      	blx	r4
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	e00d      	b.n	8004b4a <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	695c      	ldr	r4, [r3, #20]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	7b1b      	ldrb	r3, [r3, #12]
 8004b36:	b298      	uxth	r0, r3
 8004b38:	7afb      	ldrb	r3, [r7, #11]
 8004b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	b299      	uxth	r1, r3
 8004b42:	893b      	ldrh	r3, [r7, #8]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	47a0      	blx	r4
 8004b48:	4603      	mov	r3, r0
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	371c      	adds	r7, #28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd90      	pop	{r4, r7, pc}

08004b52 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004b52:	b590      	push	{r4, r7, lr}
 8004b54:	b087      	sub	sp, #28
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	60f8      	str	r0, [r7, #12]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	460b      	mov	r3, r1
 8004b60:	72fb      	strb	r3, [r7, #11]
 8004b62:	4613      	mov	r3, r2
 8004b64:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10e      	bne.n	8004b90 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	691c      	ldr	r4, [r3, #16]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	7b1b      	ldrb	r3, [r3, #12]
 8004b7a:	b298      	uxth	r0, r3
 8004b7c:	7afb      	ldrb	r3, [r7, #11]
 8004b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	b299      	uxth	r1, r3
 8004b86:	893b      	ldrh	r3, [r7, #8]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	47a0      	blx	r4
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	e00d      	b.n	8004bac <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	691c      	ldr	r4, [r3, #16]
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	7b1b      	ldrb	r3, [r3, #12]
 8004b98:	b298      	uxth	r0, r3
 8004b9a:	7afb      	ldrb	r3, [r7, #11]
 8004b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	b299      	uxth	r1, r3
 8004ba4:	893b      	ldrh	r3, [r7, #8]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	47a0      	blx	r4
 8004baa:	4603      	mov	r3, r0
  }
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004bb4:	b590      	push	{r4, r7, lr}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	72fb      	strb	r3, [r7, #11]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	685c      	ldr	r4, [r3, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	68d8      	ldr	r0, [r3, #12]
 8004bd0:	893b      	ldrh	r3, [r7, #8]
 8004bd2:	7af9      	ldrb	r1, [r7, #11]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	47a0      	blx	r4
 8004bd8:	6178      	str	r0, [r7, #20]

  return ret;
 8004bda:	697b      	ldr	r3, [r7, #20]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	371c      	adds	r7, #28
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd90      	pop	{r4, r7, pc}

08004be4 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8004be4:	b590      	push	{r4, r7, lr}
 8004be6:	b087      	sub	sp, #28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	72fb      	strb	r3, [r7, #11]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681c      	ldr	r4, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68d8      	ldr	r0, [r3, #12]
 8004c00:	893b      	ldrh	r3, [r7, #8]
 8004c02:	7af9      	ldrb	r1, [r7, #11]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	47a0      	blx	r4
 8004c08:	6178      	str	r0, [r7, #20]

  return ret;
 8004c0a:	697b      	ldr	r3, [r7, #20]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd90      	pop	{r4, r7, pc}

08004c14 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004c1e:	f107 020c 	add.w	r2, r7, #12
 8004c22:	2301      	movs	r3, #1
 8004c24:	2120      	movs	r1, #32
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7ff ffc4 	bl	8004bb4 <lsm303agr_read_reg>
 8004c2c:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004c34:	f107 0210 	add.w	r2, r7, #16
 8004c38:	2301      	movs	r3, #1
 8004c3a:	2123      	movs	r1, #35	; 0x23
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff ffb9 	bl	8004bb4 <lsm303agr_read_reg>
 8004c42:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8004c44:	7b3b      	ldrb	r3, [r7, #12]
 8004c46:	f003 0308 	and.w	r3, r3, #8
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2202      	movs	r2, #2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e00c      	b.n	8004c72 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8004c58:	7c3b      	ldrb	r3, [r7, #16]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e002      	b.n	8004c72 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8004c72:	697b      	ldr	r3, [r7, #20]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004c88:	f107 0208 	add.w	r2, r7, #8
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	2120      	movs	r1, #32
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff8f 	bl	8004bb4 <lsm303agr_read_reg>
 8004c96:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10f      	bne.n	8004cbe <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	7a3b      	ldrb	r3, [r7, #8]
 8004ca8:	f362 1307 	bfi	r3, r2, #4, #4
 8004cac:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8004cae:	f107 0208 	add.w	r2, r7, #8
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff ff94 	bl	8004be4 <lsm303agr_write_reg>
 8004cbc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004cd4:	f107 0208 	add.w	r2, r7, #8
 8004cd8:	2301      	movs	r3, #1
 8004cda:	2123      	movs	r1, #35	; 0x23
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff ff69 	bl	8004bb4 <lsm303agr_read_reg>
 8004ce2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	f003 0303 	and.w	r3, r3, #3
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	7a3b      	ldrb	r3, [r7, #8]
 8004cf4:	f362 1305 	bfi	r3, r2, #4, #2
 8004cf8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004cfa:	f107 0208 	add.w	r2, r7, #8
 8004cfe:	2301      	movs	r3, #1
 8004d00:	2123      	movs	r1, #35	; 0x23
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff ff6e 	bl	8004be4 <lsm303agr_write_reg>
 8004d08:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004d1e:	f107 0208 	add.w	r2, r7, #8
 8004d22:	2301      	movs	r3, #1
 8004d24:	2123      	movs	r1, #35	; 0x23
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7ff ff44 	bl	8004bb4 <lsm303agr_read_reg>
 8004d2c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 8004d2e:	7a3b      	ldrb	r3, [r7, #8]
 8004d30:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d81a      	bhi.n	8004d70 <lsm303agr_xl_full_scale_get+0x5c>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <lsm303agr_xl_full_scale_get+0x2c>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d59 	.word	0x08004d59
 8004d48:	08004d61 	.word	0x08004d61
 8004d4c:	08004d69 	.word	0x08004d69
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
      break;
 8004d56:	e00f      	b.n	8004d78 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	701a      	strb	r2, [r3, #0]
      break;
 8004d5e:	e00b      	b.n	8004d78 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2202      	movs	r2, #2
 8004d64:	701a      	strb	r2, [r3, #0]
      break;
 8004d66:	e007      	b.n	8004d78 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	701a      	strb	r2, [r3, #0]
      break;
 8004d6e:	e003      	b.n	8004d78 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
      break;
 8004d76:	bf00      	nop
  }

  return ret;
 8004d78:	68fb      	ldr	r3, [r7, #12]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop

08004d84 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004d90:	f107 0208 	add.w	r2, r7, #8
 8004d94:	2301      	movs	r3, #1
 8004d96:	2123      	movs	r1, #35	; 0x23
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff ff0b 	bl	8004bb4 <lsm303agr_read_reg>
 8004d9e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10f      	bne.n	8004dc6 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	7a3b      	ldrb	r3, [r7, #8]
 8004db0:	f362 13c7 	bfi	r3, r2, #7, #1
 8004db4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8004db6:	f107 0208 	add.w	r2, r7, #8
 8004dba:	2301      	movs	r3, #1
 8004dbc:	2123      	movs	r1, #35	; 0x23
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff ff10 	bl	8004be4 <lsm303agr_write_reg>
 8004dc4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8004dda:	f107 020c 	add.w	r2, r7, #12
 8004dde:	2306      	movs	r3, #6
 8004de0:	2128      	movs	r1, #40	; 0x28
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff fee6 	bl	8004bb4 <lsm303agr_read_reg>
 8004de8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004dea:	7b7b      	ldrb	r3, [r7, #13]
 8004dec:	b21a      	sxth	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	021b      	lsls	r3, r3, #8
 8004dfc:	b29a      	uxth	r2, r3
 8004dfe:	7b3b      	ldrb	r3, [r7, #12]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	4413      	add	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	b21a      	sxth	r2, r3
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	3302      	adds	r3, #2
 8004e12:	b212      	sxth	r2, r2
 8004e14:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3302      	adds	r3, #2
 8004e1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	7bbb      	ldrb	r3, [r7, #14]
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	3302      	adds	r3, #2
 8004e30:	b212      	sxth	r2, r2
 8004e32:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e34:	7c7a      	ldrb	r2, [r7, #17]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	b212      	sxth	r2, r2
 8004e3c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	3304      	adds	r3, #4
 8004e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	7c3b      	ldrb	r3, [r7, #16]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	3304      	adds	r3, #4
 8004e58:	b212      	sxth	r2, r2
 8004e5a:	801a      	strh	r2, [r3, #0]

  return ret;
 8004e5c:	697b      	ldr	r3, [r7, #20]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004e72:	f107 0208 	add.w	r2, r7, #8
 8004e76:	2301      	movs	r3, #1
 8004e78:	2160      	movs	r1, #96	; 0x60
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fe9a 	bl	8004bb4 <lsm303agr_read_reg>
 8004e80:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10f      	bne.n	8004ea8 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	f003 0303 	and.w	r3, r3, #3
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	7a3b      	ldrb	r3, [r7, #8]
 8004e92:	f362 0301 	bfi	r3, r2, #0, #2
 8004e96:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004e98:	f107 0208 	add.w	r2, r7, #8
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	2160      	movs	r1, #96	; 0x60
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff fe9f 	bl	8004be4 <lsm303agr_write_reg>
 8004ea6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004ebe:	f107 0208 	add.w	r2, r7, #8
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	2160      	movs	r1, #96	; 0x60
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff fe74 	bl	8004bb4 <lsm303agr_read_reg>
 8004ecc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d10f      	bne.n	8004ef4 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	7a3b      	ldrb	r3, [r7, #8]
 8004ede:	f362 0383 	bfi	r3, r2, #2, #2
 8004ee2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8004ee4:	f107 0208 	add.w	r2, r7, #8
 8004ee8:	2301      	movs	r3, #1
 8004eea:	2160      	movs	r1, #96	; 0x60
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff fe79 	bl	8004be4 <lsm303agr_write_reg>
 8004ef2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b084      	sub	sp, #16
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004f0a:	f107 0208 	add.w	r2, r7, #8
 8004f0e:	2301      	movs	r3, #1
 8004f10:	2162      	movs	r1, #98	; 0x62
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe4e 	bl	8004bb4 <lsm303agr_read_reg>
 8004f18:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10f      	bne.n	8004f40 <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	7a3b      	ldrb	r3, [r7, #8]
 8004f2a:	f362 1304 	bfi	r3, r2, #4, #1
 8004f2e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004f30:	f107 0208 	add.w	r2, r7, #8
 8004f34:	2301      	movs	r3, #1
 8004f36:	2162      	movs	r1, #98	; 0x62
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fe53 	bl	8004be4 <lsm303agr_write_reg>
 8004f3e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004f40:	68fb      	ldr	r3, [r7, #12]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b086      	sub	sp, #24
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8004f54:	f107 020c 	add.w	r2, r7, #12
 8004f58:	2306      	movs	r3, #6
 8004f5a:	2168      	movs	r1, #104	; 0x68
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff fe29 	bl	8004bb4 <lsm303agr_read_reg>
 8004f62:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004f64:	7b7b      	ldrb	r3, [r7, #13]
 8004f66:	b21a      	sxth	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	7b3b      	ldrb	r3, [r7, #12]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	4413      	add	r3, r2
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	b21a      	sxth	r2, r3
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004f86:	7bfa      	ldrb	r2, [r7, #15]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	b212      	sxth	r2, r2
 8004f8e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	3302      	adds	r3, #2
 8004f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	021b      	lsls	r3, r3, #8
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	7bbb      	ldrb	r3, [r7, #14]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3302      	adds	r3, #2
 8004faa:	b212      	sxth	r2, r2
 8004fac:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004fae:	7c7a      	ldrb	r2, [r7, #17]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	b212      	sxth	r2, r2
 8004fb6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	7c3b      	ldrb	r3, [r7, #16]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4413      	add	r3, r2
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	b212      	sxth	r2, r2
 8004fd4:	801a      	strh	r2, [r3, #0]

  return ret;
 8004fd6:	697b      	ldr	r3, [r7, #20]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3718      	adds	r7, #24
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004fec:	f107 0208 	add.w	r2, r7, #8
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	2162      	movs	r1, #98	; 0x62
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fddd 	bl	8004bb4 <lsm303agr_read_reg>
 8004ffa:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d10f      	bne.n	8005022 <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	b2da      	uxtb	r2, r3
 800500a:	7a3b      	ldrb	r3, [r7, #8]
 800500c:	f362 0341 	bfi	r3, r2, #1, #1
 8005010:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005012:	f107 0208 	add.w	r2, r7, #8
 8005016:	2301      	movs	r3, #1
 8005018:	2162      	movs	r1, #98	; 0x62
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff fde2 	bl	8004be4 <lsm303agr_write_reg>
 8005020:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8005022:	68fb      	ldr	r3, [r7, #12]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8005038:	f107 0208 	add.w	r2, r7, #8
 800503c:	2301      	movs	r3, #1
 800503e:	212e      	movs	r1, #46	; 0x2e
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fdb7 	bl	8004bb4 <lsm303agr_read_reg>
 8005046:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10f      	bne.n	800506e <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 800504e:	78fb      	ldrb	r3, [r7, #3]
 8005050:	f003 0303 	and.w	r3, r3, #3
 8005054:	b2da      	uxtb	r2, r3
 8005056:	7a3b      	ldrb	r3, [r7, #8]
 8005058:	f362 1387 	bfi	r3, r2, #6, #2
 800505c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800505e:	f107 0208 	add.w	r2, r7, #8
 8005062:	2301      	movs	r3, #1
 8005064:	212e      	movs	r1, #46	; 0x2e
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff fdbc 	bl	8004be4 <lsm303agr_write_reg>
 800506c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 800506e:	68fb      	ldr	r3, [r7, #12]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	460b      	mov	r3, r1
 8005082:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005084:	f107 0208 	add.w	r2, r7, #8
 8005088:	2301      	movs	r3, #1
 800508a:	2162      	movs	r1, #98	; 0x62
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fd91 	bl	8004bb4 <lsm303agr_read_reg>
 8005092:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10f      	bne.n	80050ba <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 800509a:	78fb      	ldrb	r3, [r7, #3]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	7a3b      	ldrb	r3, [r7, #8]
 80050a4:	f362 1345 	bfi	r3, r2, #5, #1
 80050a8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80050aa:	f107 0208 	add.w	r2, r7, #8
 80050ae:	2301      	movs	r3, #1
 80050b0:	2162      	movs	r1, #98	; 0x62
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fd96 	bl	8004be4 <lsm303agr_write_reg>
 80050b8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80050ba:	68fb      	ldr	r3, [r7, #12]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
 80050dc:	60fb      	str	r3, [r7, #12]
 80050de:	e051      	b.n	8005184 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	7b1a      	ldrb	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	691a      	ldr	r2, [r3, #16]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <LSM6DSL_RegisterBusIO+0xcc>)
 800511c:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1c      	ldr	r2, [pc, #112]	; (8005194 <LSM6DSL_RegisterBusIO+0xd0>)
 8005122:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 800513a:	f04f 33ff 	mov.w	r3, #4294967295
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e020      	b.n	8005184 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4798      	blx	r3
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 800514e:	f04f 33ff 	mov.w	r3, #4294967295
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e016      	b.n	8005184 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d112      	bne.n	8005184 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10d      	bne.n	8005184 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005168:	230c      	movs	r3, #12
 800516a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 800516c:	7afb      	ldrb	r3, [r7, #11]
 800516e:	461a      	mov	r2, r3
 8005170:	2112      	movs	r1, #18
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f968 	bl	8005448 <LSM6DSL_Write_Reg>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005184:	68fb      	ldr	r3, [r7, #12]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	0800547f 	.word	0x0800547f
 8005194:	080054b5 	.word	0x080054b5

08005198 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3320      	adds	r3, #32
 80051a4:	2101      	movs	r1, #1
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fb1b 	bl	80057e2 <lsm6dsl_auto_increment_set>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295
 80051b6:	e054      	b.n	8005262 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3320      	adds	r3, #32
 80051bc:	2101      	movs	r1, #1
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa9e 	bl	8005700 <lsm6dsl_block_data_update_set>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	e048      	b.n	8005262 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3320      	adds	r3, #32
 80051d4:	2100      	movs	r1, #0
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fb29 	bl	800582e <lsm6dsl_fifo_mode_set>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	e03c      	b.n	8005262 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3320      	adds	r3, #32
 80051f4:	2100      	movs	r1, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f9cd 	bl	8005596 <lsm6dsl_xl_data_rate_set>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8005202:	f04f 33ff 	mov.w	r3, #4294967295
 8005206:	e02c      	b.n	8005262 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3320      	adds	r3, #32
 800520c:	2100      	movs	r1, #0
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f99b 	bl	800554a <lsm6dsl_xl_full_scale_set>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 800521a:	f04f 33ff 	mov.w	r3, #4294967295
 800521e:	e020      	b.n	8005262 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2204      	movs	r2, #4
 8005224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3320      	adds	r3, #32
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fa40 	bl	80056b4 <lsm6dsl_gy_data_rate_set>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
 800523e:	e010      	b.n	8005262 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3320      	adds	r3, #32
 8005244:	2106      	movs	r1, #6
 8005246:	4618      	mov	r0, r3
 8005248:	f000 f9cb 	bl	80055e2 <lsm6dsl_gy_full_scale_set>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8005252:	f04f 33ff 	mov.w	r3, #4294967295
 8005256:	e004      	b.n	8005262 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e014      	b.n	80052aa <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f103 0220 	add.w	r2, r3, #32
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f000 f981 	bl	8005596 <lsm6dsl_xl_data_rate_set>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800529a:	f04f 33ff 	mov.w	r3, #4294967295
 800529e:	e004      	b.n	80052aa <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	e014      	b.n	80052f2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f103 0220 	add.w	r2, r3, #32
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f000 f9ec 	bl	80056b4 <lsm6dsl_gy_data_rate_set>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80052e2:	f04f 33ff 	mov.w	r3, #4294967295
 80052e6:	e004      	b.n	80052f2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3320      	adds	r3, #32
 800530e:	f107 020b 	add.w	r2, r7, #11
 8005312:	4611      	mov	r1, r2
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f98b 	bl	8005630 <lsm6dsl_gy_full_scale_get>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295
 8005324:	e02d      	b.n	8005382 <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005326:	7afb      	ldrb	r3, [r7, #11]
 8005328:	2b06      	cmp	r3, #6
 800532a:	d825      	bhi.n	8005378 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 800532c:	a201      	add	r2, pc, #4	; (adr r2, 8005334 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005332:	bf00      	nop
 8005334:	08005359 	.word	0x08005359
 8005338:	08005351 	.word	0x08005351
 800533c:	08005361 	.word	0x08005361
 8005340:	08005379 	.word	0x08005379
 8005344:	08005369 	.word	0x08005369
 8005348:	08005379 	.word	0x08005379
 800534c:	08005371 	.word	0x08005371
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	4a0e      	ldr	r2, [pc, #56]	; (800538c <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8005354:	601a      	str	r2, [r3, #0]
      break;
 8005356:	e013      	b.n	8005380 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	4a0d      	ldr	r2, [pc, #52]	; (8005390 <LSM6DSL_GYRO_GetSensitivity+0x94>)
 800535c:	601a      	str	r2, [r3, #0]
      break;
 800535e:	e00f      	b.n	8005380 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4a0c      	ldr	r2, [pc, #48]	; (8005394 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8005364:	601a      	str	r2, [r3, #0]
      break;
 8005366:	e00b      	b.n	8005380 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4a0b      	ldr	r2, [pc, #44]	; (8005398 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 800536c:	601a      	str	r2, [r3, #0]
      break;
 800536e:	e007      	b.n	8005380 <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	4a0a      	ldr	r2, [pc, #40]	; (800539c <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8005374:	601a      	str	r2, [r3, #0]
      break;
 8005376:	e003      	b.n	8005380 <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
 800537c:	60fb      	str	r3, [r7, #12]
      break;
 800537e:	bf00      	nop
  }

  return ret;
 8005380:	68fb      	ldr	r3, [r7, #12]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	408c0000 	.word	0x408c0000
 8005390:	410c0000 	.word	0x410c0000
 8005394:	418c0000 	.word	0x418c0000
 8005398:	420c0000 	.word	0x420c0000
 800539c:	428c0000 	.word	0x428c0000

080053a0 <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3320      	adds	r3, #32
 80053ae:	f107 0210 	add.w	r2, r7, #16
 80053b2:	4611      	mov	r1, r2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f9c9 	bl	800574c <lsm6dsl_angular_rate_raw_get>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80053c0:	f04f 33ff 	mov.w	r3, #4294967295
 80053c4:	e03c      	b.n	8005440 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80053c6:	f107 030c 	add.w	r3, r7, #12
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f7ff ff95 	bl	80052fc <LSM6DSL_GYRO_GetSensitivity>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80053d8:	f04f 33ff 	mov.w	r3, #4294967295
 80053dc:	e030      	b.n	8005440 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80053de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f6:	ee17 2a90 	vmov	r2, s15
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80053fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800540a:	edd7 7a03 	vldr	s15, [r7, #12]
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005416:	ee17 2a90 	vmov	r2, s15
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800541e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800542a:	edd7 7a03 	vldr	s15, [r7, #12]
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005436:	ee17 2a90 	vmov	r2, s15
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3718      	adds	r7, #24
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
 8005454:	4613      	mov	r3, r2
 8005456:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f103 0020 	add.w	r0, r3, #32
 800545e:	1cba      	adds	r2, r7, #2
 8005460:	78f9      	ldrb	r1, [r7, #3]
 8005462:	2301      	movs	r3, #1
 8005464:	f000 f859 	bl	800551a <lsm6dsl_write_reg>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d002      	beq.n	8005474 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
 8005472:	e000      	b.n	8005476 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800547e:	b590      	push	{r4, r7, lr}
 8005480:	b087      	sub	sp, #28
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	461a      	mov	r2, r3
 800548a:	460b      	mov	r3, r1
 800548c:	72fb      	strb	r3, [r7, #11]
 800548e:	4613      	mov	r3, r2
 8005490:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	695c      	ldr	r4, [r3, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	7b1b      	ldrb	r3, [r3, #12]
 800549e:	b298      	uxth	r0, r3
 80054a0:	7afb      	ldrb	r3, [r7, #11]
 80054a2:	b299      	uxth	r1, r3
 80054a4:	893b      	ldrh	r3, [r7, #8]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	47a0      	blx	r4
 80054aa:	4603      	mov	r3, r0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	371c      	adds	r7, #28
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd90      	pop	{r4, r7, pc}

080054b4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80054b4:	b590      	push	{r4, r7, lr}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	461a      	mov	r2, r3
 80054c0:	460b      	mov	r3, r1
 80054c2:	72fb      	strb	r3, [r7, #11]
 80054c4:	4613      	mov	r3, r2
 80054c6:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	691c      	ldr	r4, [r3, #16]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	7b1b      	ldrb	r3, [r3, #12]
 80054d4:	b298      	uxth	r0, r3
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	b299      	uxth	r1, r3
 80054da:	893b      	ldrh	r3, [r7, #8]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	47a0      	blx	r4
 80054e0:	4603      	mov	r3, r0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd90      	pop	{r4, r7, pc}

080054ea <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80054ea:	b590      	push	{r4, r7, lr}
 80054ec:	b087      	sub	sp, #28
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	461a      	mov	r2, r3
 80054f6:	460b      	mov	r3, r1
 80054f8:	72fb      	strb	r3, [r7, #11]
 80054fa:	4613      	mov	r3, r2
 80054fc:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685c      	ldr	r4, [r3, #4]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	68d8      	ldr	r0, [r3, #12]
 8005506:	893b      	ldrh	r3, [r7, #8]
 8005508:	7af9      	ldrb	r1, [r7, #11]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	47a0      	blx	r4
 800550e:	6178      	str	r0, [r7, #20]

  return ret;
 8005510:	697b      	ldr	r3, [r7, #20]
}
 8005512:	4618      	mov	r0, r3
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	bd90      	pop	{r4, r7, pc}

0800551a <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800551a:	b590      	push	{r4, r7, lr}
 800551c:	b087      	sub	sp, #28
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	461a      	mov	r2, r3
 8005526:	460b      	mov	r3, r1
 8005528:	72fb      	strb	r3, [r7, #11]
 800552a:	4613      	mov	r3, r2
 800552c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681c      	ldr	r4, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68d8      	ldr	r0, [r3, #12]
 8005536:	893b      	ldrh	r3, [r7, #8]
 8005538:	7af9      	ldrb	r1, [r7, #11]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	47a0      	blx	r4
 800553e:	6178      	str	r0, [r7, #20]

  return ret;
 8005540:	697b      	ldr	r3, [r7, #20]
}
 8005542:	4618      	mov	r0, r3
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	bd90      	pop	{r4, r7, pc}

0800554a <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	460b      	mov	r3, r1
 8005554:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005556:	f107 0208 	add.w	r2, r7, #8
 800555a:	2301      	movs	r3, #1
 800555c:	2110      	movs	r1, #16
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff ffc3 	bl	80054ea <lsm6dsl_read_reg>
 8005564:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10f      	bne.n	800558c <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	b2da      	uxtb	r2, r3
 8005574:	7a3b      	ldrb	r3, [r7, #8]
 8005576:	f362 0383 	bfi	r3, r2, #2, #2
 800557a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800557c:	f107 0208 	add.w	r2, r7, #8
 8005580:	2301      	movs	r3, #1
 8005582:	2110      	movs	r1, #16
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f7ff ffc8 	bl	800551a <lsm6dsl_write_reg>
 800558a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800558c:	68fb      	ldr	r3, [r7, #12]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80055a2:	f107 0208 	add.w	r2, r7, #8
 80055a6:	2301      	movs	r3, #1
 80055a8:	2110      	movs	r1, #16
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ff9d 	bl	80054ea <lsm6dsl_read_reg>
 80055b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10f      	bne.n	80055d8 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	f003 030f 	and.w	r3, r3, #15
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	7a3b      	ldrb	r3, [r7, #8]
 80055c2:	f362 1307 	bfi	r3, r2, #4, #4
 80055c6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80055c8:	f107 0208 	add.w	r2, r7, #8
 80055cc:	2301      	movs	r3, #1
 80055ce:	2110      	movs	r1, #16
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff ffa2 	bl	800551a <lsm6dsl_write_reg>
 80055d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80055d8:	68fb      	ldr	r3, [r7, #12]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80055ee:	f107 0208 	add.w	r2, r7, #8
 80055f2:	2301      	movs	r3, #1
 80055f4:	2111      	movs	r1, #17
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ff77 	bl	80054ea <lsm6dsl_read_reg>
 80055fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10f      	bne.n	8005624 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8005604:	78fb      	ldrb	r3, [r7, #3]
 8005606:	f003 0307 	and.w	r3, r3, #7
 800560a:	b2da      	uxtb	r2, r3
 800560c:	7a3b      	ldrb	r3, [r7, #8]
 800560e:	f362 0343 	bfi	r3, r2, #1, #3
 8005612:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005614:	f107 0208 	add.w	r2, r7, #8
 8005618:	2301      	movs	r3, #1
 800561a:	2111      	movs	r1, #17
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f7ff ff7c 	bl	800551a <lsm6dsl_write_reg>
 8005622:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005624:	68fb      	ldr	r3, [r7, #12]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800563a:	f107 0208 	add.w	r2, r7, #8
 800563e:	2301      	movs	r3, #1
 8005640:	2111      	movs	r1, #17
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ff51 	bl	80054ea <lsm6dsl_read_reg>
 8005648:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 800564a:	7a3b      	ldrb	r3, [r7, #8]
 800564c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b06      	cmp	r3, #6
 8005654:	d824      	bhi.n	80056a0 <lsm6dsl_gy_full_scale_get+0x70>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <lsm6dsl_gy_full_scale_get+0x2c>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005679 	.word	0x08005679
 8005660:	08005681 	.word	0x08005681
 8005664:	08005689 	.word	0x08005689
 8005668:	080056a1 	.word	0x080056a1
 800566c:	08005691 	.word	0x08005691
 8005670:	080056a1 	.word	0x080056a1
 8005674:	08005699 	.word	0x08005699
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2200      	movs	r2, #0
 800567c:	701a      	strb	r2, [r3, #0]
      break;
 800567e:	e013      	b.n	80056a8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
      break;
 8005686:	e00f      	b.n	80056a8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2202      	movs	r2, #2
 800568c:	701a      	strb	r2, [r3, #0]
      break;
 800568e:	e00b      	b.n	80056a8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2204      	movs	r2, #4
 8005694:	701a      	strb	r2, [r3, #0]
      break;
 8005696:	e007      	b.n	80056a8 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2206      	movs	r2, #6
 800569c:	701a      	strb	r2, [r3, #0]
      break;
 800569e:	e003      	b.n	80056a8 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2207      	movs	r2, #7
 80056a4:	701a      	strb	r2, [r3, #0]
      break;
 80056a6:	bf00      	nop
  }

  return ret;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop

080056b4 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056c0:	f107 0208 	add.w	r2, r7, #8
 80056c4:	2301      	movs	r3, #1
 80056c6:	2111      	movs	r1, #17
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff ff0e 	bl	80054ea <lsm6dsl_read_reg>
 80056ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10f      	bne.n	80056f6 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 030f 	and.w	r3, r3, #15
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	7a3b      	ldrb	r3, [r7, #8]
 80056e0:	f362 1307 	bfi	r3, r2, #4, #4
 80056e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80056e6:	f107 0208 	add.w	r2, r7, #8
 80056ea:	2301      	movs	r3, #1
 80056ec:	2111      	movs	r1, #17
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff ff13 	bl	800551a <lsm6dsl_write_reg>
 80056f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056f6:	68fb      	ldr	r3, [r7, #12]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	460b      	mov	r3, r1
 800570a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800570c:	f107 0208 	add.w	r2, r7, #8
 8005710:	2301      	movs	r3, #1
 8005712:	2112      	movs	r1, #18
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff fee8 	bl	80054ea <lsm6dsl_read_reg>
 800571a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	b2da      	uxtb	r2, r3
 800572a:	7a3b      	ldrb	r3, [r7, #8]
 800572c:	f362 1386 	bfi	r3, r2, #6, #1
 8005730:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005732:	f107 0208 	add.w	r2, r7, #8
 8005736:	2301      	movs	r3, #1
 8005738:	2112      	movs	r1, #18
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff feed 	bl	800551a <lsm6dsl_write_reg>
 8005740:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005742:	68fb      	ldr	r3, [r7, #12]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005756:	f107 020c 	add.w	r2, r7, #12
 800575a:	2306      	movs	r3, #6
 800575c:	2122      	movs	r1, #34	; 0x22
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff fec3 	bl	80054ea <lsm6dsl_read_reg>
 8005764:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005766:	7b7b      	ldrb	r3, [r7, #13]
 8005768:	b21a      	sxth	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005774:	b29b      	uxth	r3, r3
 8005776:	021b      	lsls	r3, r3, #8
 8005778:	b29a      	uxth	r2, r3
 800577a:	7b3b      	ldrb	r3, [r7, #12]
 800577c:	b29b      	uxth	r3, r3
 800577e:	4413      	add	r3, r2
 8005780:	b29b      	uxth	r3, r3
 8005782:	b21a      	sxth	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	3302      	adds	r3, #2
 800578e:	b212      	sxth	r2, r2
 8005790:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	3302      	adds	r3, #2
 8005796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800579a:	b29b      	uxth	r3, r3
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	b29a      	uxth	r2, r3
 80057a0:	7bbb      	ldrb	r3, [r7, #14]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	3302      	adds	r3, #2
 80057ac:	b212      	sxth	r2, r2
 80057ae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80057b0:	7c7a      	ldrb	r2, [r7, #17]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	3304      	adds	r3, #4
 80057b6:	b212      	sxth	r2, r2
 80057b8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	3304      	adds	r3, #4
 80057be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	7c3b      	ldrb	r3, [r7, #16]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	4413      	add	r3, r2
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	3304      	adds	r3, #4
 80057d4:	b212      	sxth	r2, r2
 80057d6:	801a      	strh	r2, [r3, #0]

  return ret;
 80057d8:	697b      	ldr	r3, [r7, #20]
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80057ee:	f107 0208 	add.w	r2, r7, #8
 80057f2:	2301      	movs	r3, #1
 80057f4:	2112      	movs	r1, #18
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fe77 	bl	80054ea <lsm6dsl_read_reg>
 80057fc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10f      	bne.n	8005824 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	b2da      	uxtb	r2, r3
 800580c:	7a3b      	ldrb	r3, [r7, #8]
 800580e:	f362 0382 	bfi	r3, r2, #2, #1
 8005812:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005814:	f107 0208 	add.w	r2, r7, #8
 8005818:	2301      	movs	r3, #1
 800581a:	2112      	movs	r1, #18
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fe7c 	bl	800551a <lsm6dsl_write_reg>
 8005822:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	460b      	mov	r3, r1
 8005838:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 800583a:	f107 0208 	add.w	r2, r7, #8
 800583e:	2301      	movs	r3, #1
 8005840:	210a      	movs	r1, #10
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fe51 	bl	80054ea <lsm6dsl_read_reg>
 8005848:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10f      	bne.n	8005870 <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005850:	78fb      	ldrb	r3, [r7, #3]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	b2da      	uxtb	r2, r3
 8005858:	7a3b      	ldrb	r3, [r7, #8]
 800585a:	f362 0302 	bfi	r3, r2, #0, #3
 800585e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005860:	f107 0208 	add.w	r2, r7, #8
 8005864:	2301      	movs	r3, #1
 8005866:	210a      	movs	r1, #10
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fe56 	bl	800551a <lsm6dsl_write_reg>
 800586e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005870:	68fb      	ldr	r3, [r7, #12]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
	...

0800587c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <HAL_Init+0x3c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a0b      	ldr	r2, [pc, #44]	; (80058b8 <HAL_Init+0x3c>)
 800588c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005890:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005892:	2003      	movs	r0, #3
 8005894:	f001 faca 	bl	8006e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005898:	200f      	movs	r0, #15
 800589a:	f000 f80f 	bl	80058bc <HAL_InitTick>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	71fb      	strb	r3, [r7, #7]
 80058a8:	e001      	b.n	80058ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058aa:	f7fc fced 	bl	8002288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058ae:	79fb      	ldrb	r3, [r7, #7]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40022000 	.word	0x40022000

080058bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80058c8:	4b17      	ldr	r3, [pc, #92]	; (8005928 <HAL_InitTick+0x6c>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d023      	beq.n	8005918 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80058d0:	4b16      	ldr	r3, [pc, #88]	; (800592c <HAL_InitTick+0x70>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b14      	ldr	r3, [pc, #80]	; (8005928 <HAL_InitTick+0x6c>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	4619      	mov	r1, r3
 80058da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058de:	fbb3 f3f1 	udiv	r3, r3, r1
 80058e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fad5 	bl	8006e96 <HAL_SYSTICK_Config>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10f      	bne.n	8005912 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d809      	bhi.n	800590c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058f8:	2200      	movs	r2, #0
 80058fa:	6879      	ldr	r1, [r7, #4]
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005900:	f001 fa9f 	bl	8006e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005904:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_InitTick+0x74>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	e007      	b.n	800591c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e004      	b.n	800591c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
 8005916:	e001      	b.n	800591c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	20000008 	.word	0x20000008
 800592c:	20000000 	.word	0x20000000
 8005930:	20000004 	.word	0x20000004

08005934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005938:	4b06      	ldr	r3, [pc, #24]	; (8005954 <HAL_IncTick+0x20>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	461a      	mov	r2, r3
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <HAL_IncTick+0x24>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4413      	add	r3, r2
 8005944:	4a04      	ldr	r2, [pc, #16]	; (8005958 <HAL_IncTick+0x24>)
 8005946:	6013      	str	r3, [r2, #0]
}
 8005948:	bf00      	nop
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000008 	.word	0x20000008
 8005958:	20000df4 	.word	0x20000df4

0800595c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return uwTick;
 8005960:	4b03      	ldr	r3, [pc, #12]	; (8005970 <HAL_GetTick+0x14>)
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000df4 	.word	0x20000df4

08005974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800597c:	f7ff ffee 	bl	800595c <HAL_GetTick>
 8005980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598c:	d005      	beq.n	800599a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800598e:	4b0a      	ldr	r3, [pc, #40]	; (80059b8 <HAL_Delay+0x44>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800599a:	bf00      	nop
 800599c:	f7ff ffde 	bl	800595c <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d8f7      	bhi.n	800599c <HAL_Delay+0x28>
  {
  }
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000008 	.word	0x20000008

080059bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	609a      	str	r2, [r3, #8]
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	3360      	adds	r3, #96	; 0x60
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4413      	add	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <LL_ADC_SetOffset+0x44>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	03fff000 	.word	0x03fff000

08005a6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	3360      	adds	r3, #96	; 0x60
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3360      	adds	r3, #96	; 0x60
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b087      	sub	sp, #28
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3330      	adds	r3, #48	; 0x30
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	0a1b      	lsrs	r3, r3, #8
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	f003 030c 	and.w	r3, r3, #12
 8005aea:	4413      	add	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	211f      	movs	r1, #31
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	401a      	ands	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0e9b      	lsrs	r3, r3, #26
 8005b06:	f003 011f 	and.w	r1, r3, #31
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 031f 	and.w	r3, r3, #31
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	431a      	orrs	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b087      	sub	sp, #28
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3314      	adds	r3, #20
 8005b36:	461a      	mov	r2, r3
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	0e5b      	lsrs	r3, r3, #25
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	4413      	add	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	0d1b      	lsrs	r3, r3, #20
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2107      	movs	r1, #7
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	43db      	mvns	r3, r3
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	0d1b      	lsrs	r3, r3, #20
 8005b60:	f003 031f 	and.w	r3, r3, #31
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b94:	43db      	mvns	r3, r3
 8005b96:	401a      	ands	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f003 0318 	and.w	r3, r3, #24
 8005b9e:	4908      	ldr	r1, [pc, #32]	; (8005bc0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005ba0:	40d9      	lsrs	r1, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	400b      	ands	r3, r1
 8005ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005baa:	431a      	orrs	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005bb2:	bf00      	nop
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	0007ffff 	.word	0x0007ffff

08005bc4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005bd4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6093      	str	r3, [r2, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfc:	d101      	bne.n	8005c02 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005c24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4c:	d101      	bne.n	8005c52 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <LL_ADC_IsEnabled+0x18>
 8005c74:	2301      	movs	r3, #1
 8005c76:	e000      	b.n	8005c7a <LL_ADC_IsEnabled+0x1a>
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d101      	bne.n	8005c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e000      	b.n	8005ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d101      	bne.n	8005cc4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005cd4:	b590      	push	{r4, r7, lr}
 8005cd6:	b089      	sub	sp, #36	; 0x24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e136      	b.n	8005f5c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fc faeb 	bl	80022d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff ff67 	bl	8005be8 <LL_ADC_IsDeepPowerDownEnabled>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d004      	beq.n	8005d2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff ff4d 	bl	8005bc4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff ff82 	bl	8005c38 <LL_ADC_IsInternalRegulatorEnabled>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d115      	bne.n	8005d66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff ff66 	bl	8005c10 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d44:	4b87      	ldr	r3, [pc, #540]	; (8005f64 <HAL_ADC_Init+0x290>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	099b      	lsrs	r3, r3, #6
 8005d4a:	4a87      	ldr	r2, [pc, #540]	; (8005f68 <HAL_ADC_Init+0x294>)
 8005d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d50:	099b      	lsrs	r3, r3, #6
 8005d52:	3301      	adds	r3, #1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d58:	e002      	b.n	8005d60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f9      	bne.n	8005d5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ff64 	bl	8005c38 <LL_ADC_IsInternalRegulatorEnabled>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d10d      	bne.n	8005d92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7a:	f043 0210 	orr.w	r2, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f043 0201 	orr.w	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff ff75 	bl	8005c86 <LL_ADC_REG_IsConversionOngoing>
 8005d9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f040 80cf 	bne.w	8005f4a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f040 80cb 	bne.w	8005f4a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005dbc:	f043 0202 	orr.w	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff ff49 	bl	8005c60 <LL_ADC_IsEnabled>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d115      	bne.n	8005e00 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dd4:	4865      	ldr	r0, [pc, #404]	; (8005f6c <HAL_ADC_Init+0x298>)
 8005dd6:	f7ff ff43 	bl	8005c60 <LL_ADC_IsEnabled>
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4864      	ldr	r0, [pc, #400]	; (8005f70 <HAL_ADC_Init+0x29c>)
 8005dde:	f7ff ff3f 	bl	8005c60 <LL_ADC_IsEnabled>
 8005de2:	4603      	mov	r3, r0
 8005de4:	431c      	orrs	r4, r3
 8005de6:	4863      	ldr	r0, [pc, #396]	; (8005f74 <HAL_ADC_Init+0x2a0>)
 8005de8:	f7ff ff3a 	bl	8005c60 <LL_ADC_IsEnabled>
 8005dec:	4603      	mov	r3, r0
 8005dee:	4323      	orrs	r3, r4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d105      	bne.n	8005e00 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4619      	mov	r1, r3
 8005dfa:	485f      	ldr	r0, [pc, #380]	; (8005f78 <HAL_ADC_Init+0x2a4>)
 8005dfc:	f7ff fdde 	bl	80059bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	7e5b      	ldrb	r3, [r3, #25]
 8005e04:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e0a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005e10:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005e16:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e1e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d106      	bne.n	8005e3c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	3b01      	subs	r3, #1
 8005e34:	045b      	lsls	r3, r3, #17
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d009      	beq.n	8005e58 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <HAL_ADC_Init+0x2a8>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6812      	ldr	r2, [r2, #0]
 8005e66:	69b9      	ldr	r1, [r7, #24]
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff ff08 	bl	8005c86 <LL_ADC_REG_IsConversionOngoing>
 8005e76:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff ff15 	bl	8005cac <LL_ADC_INJ_IsConversionOngoing>
 8005e82:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d13d      	bne.n	8005f06 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d13a      	bne.n	8005f06 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e94:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e9c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eac:	f023 0302 	bic.w	r3, r3, #2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6812      	ldr	r2, [r2, #0]
 8005eb4:	69b9      	ldr	r1, [r7, #24]
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d118      	bne.n	8005ef6 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ece:	f023 0304 	bic.w	r3, r3, #4
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005eda:	4311      	orrs	r1, r2
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005ee0:	4311      	orrs	r1, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0201 	orr.w	r2, r2, #1
 8005ef2:	611a      	str	r2, [r3, #16]
 8005ef4:	e007      	b.n	8005f06 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d10c      	bne.n	8005f28 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	f023 010f 	bic.w	r1, r3, #15
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	1e5a      	subs	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	631a      	str	r2, [r3, #48]	; 0x30
 8005f26:	e007      	b.n	8005f38 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 020f 	bic.w	r2, r2, #15
 8005f36:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f023 0303 	bic.w	r3, r3, #3
 8005f40:	f043 0201 	orr.w	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	655a      	str	r2, [r3, #84]	; 0x54
 8005f48:	e007      	b.n	8005f5a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f043 0210 	orr.w	r2, r3, #16
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3724      	adds	r7, #36	; 0x24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}
 8005f64:	20000000 	.word	0x20000000
 8005f68:	053e2d63 	.word	0x053e2d63
 8005f6c:	50040000 	.word	0x50040000
 8005f70:	50040100 	.word	0x50040100
 8005f74:	50040200 	.word	0x50040200
 8005f78:	50040300 	.word	0x50040300
 8005f7c:	fff0c007 	.word	0xfff0c007

08005f80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b0b6      	sub	sp, #216	; 0xd8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_ADC_ConfigChannel+0x22>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e3c7      	b.n	8006732 <HAL_ADC_ConfigChannel+0x7b2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fe69 	bl	8005c86 <LL_ADC_REG_IsConversionOngoing>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f040 83a8 	bne.w	800670c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d824      	bhi.n	800600e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	3b02      	subs	r3, #2
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d81b      	bhi.n	8006006 <HAL_ADC_ConfigChannel+0x86>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <HAL_ADC_ConfigChannel+0x54>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005fed 	.word	0x08005fed
 8005fdc:	08005ff5 	.word	0x08005ff5
 8005fe0:	08005ffd 	.word	0x08005ffd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	220c      	movs	r2, #12
 8005fe8:	605a      	str	r2, [r3, #4]
          break;
 8005fea:	e011      	b.n	8006010 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2212      	movs	r2, #18
 8005ff0:	605a      	str	r2, [r3, #4]
          break;
 8005ff2:	e00d      	b.n	8006010 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2218      	movs	r2, #24
 8005ff8:	605a      	str	r2, [r3, #4]
          break;
 8005ffa:	e009      	b.n	8006010 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006002:	605a      	str	r2, [r3, #4]
          break;
 8006004:	e004      	b.n	8006010 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2206      	movs	r2, #6
 800600a:	605a      	str	r2, [r3, #4]
          break;
 800600c:	e000      	b.n	8006010 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800600e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6818      	ldr	r0, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	f7ff fd56 	bl	8005ace <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4618      	mov	r0, r3
 8006028:	f7ff fe2d 	bl	8005c86 <LL_ADC_REG_IsConversionOngoing>
 800602c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fe39 	bl	8005cac <LL_ADC_INJ_IsConversionOngoing>
 800603a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800603e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 81a6 	bne.w	8006394 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006048:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800604c:	2b00      	cmp	r3, #0
 800604e:	f040 81a1 	bne.w	8006394 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	461a      	mov	r2, r3
 8006060:	f7ff fd61 	bl	8005b26 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	08db      	lsrs	r3, r3, #3
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	fa02 f303 	lsl.w	r3, r2, r3
 800607a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d00a      	beq.n	800609c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	6919      	ldr	r1, [r3, #16]
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006096:	f7ff fcc5 	bl	8005a24 <LL_ADC_SetOffset>
 800609a:	e17b      	b.n	8006394 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff fce2 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10a      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x148>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2100      	movs	r1, #0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fcd7 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 80060be:	4603      	mov	r3, r0
 80060c0:	0e9b      	lsrs	r3, r3, #26
 80060c2:	f003 021f 	and.w	r2, r3, #31
 80060c6:	e01e      	b.n	8006106 <HAL_ADC_ConfigChannel+0x186>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff fccc 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 80060d4:	4603      	mov	r3, r0
 80060d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060de:	fa93 f3a3 	rbit	r3, r3
 80060e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80060e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80060ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80060f6:	2320      	movs	r3, #32
 80060f8:	e004      	b.n	8006104 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80060fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060fe:	fab3 f383 	clz	r3, r3
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800610e:	2b00      	cmp	r3, #0
 8006110:	d105      	bne.n	800611e <HAL_ADC_ConfigChannel+0x19e>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	0e9b      	lsrs	r3, r3, #26
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	e018      	b.n	8006150 <HAL_ADC_ConfigChannel+0x1d0>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006126:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800612a:	fa93 f3a3 	rbit	r3, r3
 800612e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800613a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8006142:	2320      	movs	r3, #32
 8006144:	e004      	b.n	8006150 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800614a:	fab3 f383 	clz	r3, r3
 800614e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006150:	429a      	cmp	r2, r3
 8006152:	d106      	bne.n	8006162 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2200      	movs	r2, #0
 800615a:	2100      	movs	r1, #0
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff fc9b 	bl	8005a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2101      	movs	r1, #1
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fc7f 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 800616e:	4603      	mov	r3, r0
 8006170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <HAL_ADC_ConfigChannel+0x20e>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2101      	movs	r1, #1
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff fc74 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 8006184:	4603      	mov	r3, r0
 8006186:	0e9b      	lsrs	r3, r3, #26
 8006188:	f003 021f 	and.w	r2, r3, #31
 800618c:	e01e      	b.n	80061cc <HAL_ADC_ConfigChannel+0x24c>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2101      	movs	r1, #1
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff fc69 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 800619a:	4603      	mov	r3, r0
 800619c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80061a4:	fa93 f3a3 	rbit	r3, r3
 80061a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80061ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80061b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80061bc:	2320      	movs	r3, #32
 80061be:	e004      	b.n	80061ca <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80061c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061c4:	fab3 f383 	clz	r3, r3
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d105      	bne.n	80061e4 <HAL_ADC_ConfigChannel+0x264>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	0e9b      	lsrs	r3, r3, #26
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	e018      	b.n	8006216 <HAL_ADC_ConfigChannel+0x296>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f0:	fa93 f3a3 	rbit	r3, r3
 80061f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80061f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80061fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006208:	2320      	movs	r3, #32
 800620a:	e004      	b.n	8006216 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800620c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006210:	fab3 f383 	clz	r3, r3
 8006214:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006216:	429a      	cmp	r2, r3
 8006218:	d106      	bne.n	8006228 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	2101      	movs	r1, #1
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fc38 	bl	8005a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2102      	movs	r1, #2
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fc1c 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 8006234:	4603      	mov	r3, r0
 8006236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <HAL_ADC_ConfigChannel+0x2d4>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2102      	movs	r1, #2
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff fc11 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 800624a:	4603      	mov	r3, r0
 800624c:	0e9b      	lsrs	r3, r3, #26
 800624e:	f003 021f 	and.w	r2, r3, #31
 8006252:	e01e      	b.n	8006292 <HAL_ADC_ConfigChannel+0x312>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2102      	movs	r1, #2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fc06 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 8006260:	4603      	mov	r3, r0
 8006262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006266:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800626a:	fa93 f3a3 	rbit	r3, r3
 800626e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006272:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006276:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800627a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8006282:	2320      	movs	r3, #32
 8006284:	e004      	b.n	8006290 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
 8006290:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800629a:	2b00      	cmp	r3, #0
 800629c:	d105      	bne.n	80062aa <HAL_ADC_ConfigChannel+0x32a>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	0e9b      	lsrs	r3, r3, #26
 80062a4:	f003 031f 	and.w	r3, r3, #31
 80062a8:	e016      	b.n	80062d8 <HAL_ADC_ConfigChannel+0x358>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062b6:	fa93 f3a3 	rbit	r3, r3
 80062ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80062bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80062c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80062ca:	2320      	movs	r3, #32
 80062cc:	e004      	b.n	80062d8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80062ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062d2:	fab3 f383 	clz	r3, r3
 80062d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062d8:	429a      	cmp	r2, r3
 80062da:	d106      	bne.n	80062ea <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2200      	movs	r2, #0
 80062e2:	2102      	movs	r1, #2
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff fbd7 	bl	8005a98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2103      	movs	r1, #3
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff fbbb 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <HAL_ADC_ConfigChannel+0x396>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2103      	movs	r1, #3
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff fbb0 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 800630c:	4603      	mov	r3, r0
 800630e:	0e9b      	lsrs	r3, r3, #26
 8006310:	f003 021f 	and.w	r2, r3, #31
 8006314:	e017      	b.n	8006346 <HAL_ADC_ConfigChannel+0x3c6>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2103      	movs	r1, #3
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fba5 	bl	8005a6c <LL_ADC_GetOffsetChannel>
 8006322:	4603      	mov	r3, r0
 8006324:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006328:	fa93 f3a3 	rbit	r3, r3
 800632c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800632e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006330:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006332:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006338:	2320      	movs	r3, #32
 800633a:	e003      	b.n	8006344 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800633c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633e:	fab3 f383 	clz	r3, r3
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634e:	2b00      	cmp	r3, #0
 8006350:	d105      	bne.n	800635e <HAL_ADC_ConfigChannel+0x3de>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	0e9b      	lsrs	r3, r3, #26
 8006358:	f003 031f 	and.w	r3, r3, #31
 800635c:	e011      	b.n	8006382 <HAL_ADC_ConfigChannel+0x402>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006366:	fa93 f3a3 	rbit	r3, r3
 800636a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800636c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800636e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006376:	2320      	movs	r3, #32
 8006378:	e003      	b.n	8006382 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800637a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637c:	fab3 f383 	clz	r3, r3
 8006380:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006382:	429a      	cmp	r2, r3
 8006384:	d106      	bne.n	8006394 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2200      	movs	r2, #0
 800638c:	2103      	movs	r1, #3
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fb82 	bl	8005a98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f7ff fc61 	bl	8005c60 <LL_ADC_IsEnabled>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f040 813f 	bne.w	8006624 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	6819      	ldr	r1, [r3, #0]
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f7ff fbe2 	bl	8005b7c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a8e      	ldr	r2, [pc, #568]	; (80065f8 <HAL_ADC_ConfigChannel+0x678>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	f040 8130 	bne.w	8006624 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <HAL_ADC_ConfigChannel+0x46c>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	0e9b      	lsrs	r3, r3, #26
 80063da:	3301      	adds	r3, #1
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2b09      	cmp	r3, #9
 80063e2:	bf94      	ite	ls
 80063e4:	2301      	movls	r3, #1
 80063e6:	2300      	movhi	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	e019      	b.n	8006420 <HAL_ADC_ConfigChannel+0x4a0>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063f4:	fa93 f3a3 	rbit	r3, r3
 80063f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80063fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80063fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006404:	2320      	movs	r3, #32
 8006406:	e003      	b.n	8006410 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800640a:	fab3 f383 	clz	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	3301      	adds	r3, #1
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	2b09      	cmp	r3, #9
 8006418:	bf94      	ite	ls
 800641a:	2301      	movls	r3, #1
 800641c:	2300      	movhi	r3, #0
 800641e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006420:	2b00      	cmp	r3, #0
 8006422:	d079      	beq.n	8006518 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <HAL_ADC_ConfigChannel+0x4c0>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	0e9b      	lsrs	r3, r3, #26
 8006436:	3301      	adds	r3, #1
 8006438:	069b      	lsls	r3, r3, #26
 800643a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800643e:	e015      	b.n	800646c <HAL_ADC_ConfigChannel+0x4ec>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006448:	fa93 f3a3 	rbit	r3, r3
 800644c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800644e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006450:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006458:	2320      	movs	r3, #32
 800645a:	e003      	b.n	8006464 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800645c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800645e:	fab3 f383 	clz	r3, r3
 8006462:	b2db      	uxtb	r3, r3
 8006464:	3301      	adds	r3, #1
 8006466:	069b      	lsls	r3, r3, #26
 8006468:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006474:	2b00      	cmp	r3, #0
 8006476:	d109      	bne.n	800648c <HAL_ADC_ConfigChannel+0x50c>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	0e9b      	lsrs	r3, r3, #26
 800647e:	3301      	adds	r3, #1
 8006480:	f003 031f 	and.w	r3, r3, #31
 8006484:	2101      	movs	r1, #1
 8006486:	fa01 f303 	lsl.w	r3, r1, r3
 800648a:	e017      	b.n	80064bc <HAL_ADC_ConfigChannel+0x53c>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006494:	fa93 f3a3 	rbit	r3, r3
 8006498:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800649a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800649c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800649e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80064a4:	2320      	movs	r3, #32
 80064a6:	e003      	b.n	80064b0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80064a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064aa:	fab3 f383 	clz	r3, r3
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	3301      	adds	r3, #1
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2101      	movs	r1, #1
 80064b8:	fa01 f303 	lsl.w	r3, r1, r3
 80064bc:	ea42 0103 	orr.w	r1, r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10a      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x562>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	0e9b      	lsrs	r3, r3, #26
 80064d2:	3301      	adds	r3, #1
 80064d4:	f003 021f 	and.w	r2, r3, #31
 80064d8:	4613      	mov	r3, r2
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	4413      	add	r3, r2
 80064de:	051b      	lsls	r3, r3, #20
 80064e0:	e018      	b.n	8006514 <HAL_ADC_ConfigChannel+0x594>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ea:	fa93 f3a3 	rbit	r3, r3
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80064f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80064fa:	2320      	movs	r3, #32
 80064fc:	e003      	b.n	8006506 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80064fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006500:	fab3 f383 	clz	r3, r3
 8006504:	b2db      	uxtb	r3, r3
 8006506:	3301      	adds	r3, #1
 8006508:	f003 021f 	and.w	r2, r3, #31
 800650c:	4613      	mov	r3, r2
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4413      	add	r3, r2
 8006512:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006514:	430b      	orrs	r3, r1
 8006516:	e080      	b.n	800661a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x5b4>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	0e9b      	lsrs	r3, r3, #26
 800652a:	3301      	adds	r3, #1
 800652c:	069b      	lsls	r3, r3, #26
 800652e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006532:	e015      	b.n	8006560 <HAL_ADC_ConfigChannel+0x5e0>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653c:	fa93 f3a3 	rbit	r3, r3
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800654c:	2320      	movs	r3, #32
 800654e:	e003      	b.n	8006558 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	fab3 f383 	clz	r3, r3
 8006556:	b2db      	uxtb	r3, r3
 8006558:	3301      	adds	r3, #1
 800655a:	069b      	lsls	r3, r3, #26
 800655c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_ADC_ConfigChannel+0x600>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	0e9b      	lsrs	r3, r3, #26
 8006572:	3301      	adds	r3, #1
 8006574:	f003 031f 	and.w	r3, r3, #31
 8006578:	2101      	movs	r1, #1
 800657a:	fa01 f303 	lsl.w	r3, r1, r3
 800657e:	e017      	b.n	80065b0 <HAL_ADC_ConfigChannel+0x630>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	fa93 f3a3 	rbit	r3, r3
 800658c:	61fb      	str	r3, [r7, #28]
  return result;
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006598:	2320      	movs	r3, #32
 800659a:	e003      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	fab3 f383 	clz	r3, r3
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	3301      	adds	r3, #1
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	2101      	movs	r1, #1
 80065ac:	fa01 f303 	lsl.w	r3, r1, r3
 80065b0:	ea42 0103 	orr.w	r1, r2, r3
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10d      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x65c>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	0e9b      	lsrs	r3, r3, #26
 80065c6:	3301      	adds	r3, #1
 80065c8:	f003 021f 	and.w	r2, r3, #31
 80065cc:	4613      	mov	r3, r2
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	4413      	add	r3, r2
 80065d2:	3b1e      	subs	r3, #30
 80065d4:	051b      	lsls	r3, r3, #20
 80065d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80065da:	e01d      	b.n	8006618 <HAL_ADC_ConfigChannel+0x698>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	fa93 f3a3 	rbit	r3, r3
 80065e8:	613b      	str	r3, [r7, #16]
  return result;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d103      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80065f4:	2320      	movs	r3, #32
 80065f6:	e005      	b.n	8006604 <HAL_ADC_ConfigChannel+0x684>
 80065f8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	fab3 f383 	clz	r3, r3
 8006602:	b2db      	uxtb	r3, r3
 8006604:	3301      	adds	r3, #1
 8006606:	f003 021f 	and.w	r2, r3, #31
 800660a:	4613      	mov	r3, r2
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4413      	add	r3, r2
 8006610:	3b1e      	subs	r3, #30
 8006612:	051b      	lsls	r3, r3, #20
 8006614:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006618:	430b      	orrs	r3, r1
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	6892      	ldr	r2, [r2, #8]
 800661e:	4619      	mov	r1, r3
 8006620:	f7ff fa81 	bl	8005b26 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b44      	ldr	r3, [pc, #272]	; (800673c <HAL_ADC_ConfigChannel+0x7bc>)
 800662a:	4013      	ands	r3, r2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d07a      	beq.n	8006726 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006630:	4843      	ldr	r0, [pc, #268]	; (8006740 <HAL_ADC_ConfigChannel+0x7c0>)
 8006632:	f7ff f9e9 	bl	8005a08 <LL_ADC_GetCommonPathInternalCh>
 8006636:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a41      	ldr	r2, [pc, #260]	; (8006744 <HAL_ADC_ConfigChannel+0x7c4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d12c      	bne.n	800669e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d126      	bne.n	800669e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a3c      	ldr	r2, [pc, #240]	; (8006748 <HAL_ADC_ConfigChannel+0x7c8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_ADC_ConfigChannel+0x6e4>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a3b      	ldr	r2, [pc, #236]	; (800674c <HAL_ADC_ConfigChannel+0x7cc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d15d      	bne.n	8006720 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800666c:	4619      	mov	r1, r3
 800666e:	4834      	ldr	r0, [pc, #208]	; (8006740 <HAL_ADC_ConfigChannel+0x7c0>)
 8006670:	f7ff f9b7 	bl	80059e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006674:	4b36      	ldr	r3, [pc, #216]	; (8006750 <HAL_ADC_ConfigChannel+0x7d0>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	099b      	lsrs	r3, r3, #6
 800667a:	4a36      	ldr	r2, [pc, #216]	; (8006754 <HAL_ADC_ConfigChannel+0x7d4>)
 800667c:	fba2 2303 	umull	r2, r3, r2, r3
 8006680:	099b      	lsrs	r3, r3, #6
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	4613      	mov	r3, r2
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800668e:	e002      	b.n	8006696 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	3b01      	subs	r3, #1
 8006694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f9      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800669c:	e040      	b.n	8006720 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a2d      	ldr	r2, [pc, #180]	; (8006758 <HAL_ADC_ConfigChannel+0x7d8>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d118      	bne.n	80066da <HAL_ADC_ConfigChannel+0x75a>
 80066a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d112      	bne.n	80066da <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a23      	ldr	r2, [pc, #140]	; (8006748 <HAL_ADC_ConfigChannel+0x7c8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_ADC_ConfigChannel+0x748>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a22      	ldr	r2, [pc, #136]	; (800674c <HAL_ADC_ConfigChannel+0x7cc>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d12d      	bne.n	8006724 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066d0:	4619      	mov	r1, r3
 80066d2:	481b      	ldr	r0, [pc, #108]	; (8006740 <HAL_ADC_ConfigChannel+0x7c0>)
 80066d4:	f7ff f985 	bl	80059e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066d8:	e024      	b.n	8006724 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a1f      	ldr	r2, [pc, #124]	; (800675c <HAL_ADC_ConfigChannel+0x7dc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d120      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80066e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11a      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a14      	ldr	r2, [pc, #80]	; (8006748 <HAL_ADC_ConfigChannel+0x7c8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d115      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006702:	4619      	mov	r1, r3
 8006704:	480e      	ldr	r0, [pc, #56]	; (8006740 <HAL_ADC_ConfigChannel+0x7c0>)
 8006706:	f7ff f96c 	bl	80059e2 <LL_ADC_SetCommonPathInternalCh>
 800670a:	e00c      	b.n	8006726 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006710:	f043 0220 	orr.w	r2, r3, #32
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800671e:	e002      	b.n	8006726 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006720:	bf00      	nop
 8006722:	e000      	b.n	8006726 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006724:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800672e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006732:	4618      	mov	r0, r3
 8006734:	37d8      	adds	r7, #216	; 0xd8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	80080000 	.word	0x80080000
 8006740:	50040300 	.word	0x50040300
 8006744:	c7520000 	.word	0xc7520000
 8006748:	50040000 	.word	0x50040000
 800674c:	50040200 	.word	0x50040200
 8006750:	20000000 	.word	0x20000000
 8006754:	053e2d63 	.word	0x053e2d63
 8006758:	cb840000 	.word	0xcb840000
 800675c:	80000001 	.word	0x80000001

08006760 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e0ed      	b.n	800694e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fb fe14 	bl	80023ac <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006794:	f7ff f8e2 	bl	800595c <HAL_GetTick>
 8006798:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800679a:	e012      	b.n	80067c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800679c:	f7ff f8de 	bl	800595c <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b0a      	cmp	r3, #10
 80067a8:	d90b      	bls.n	80067c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2205      	movs	r2, #5
 80067ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0c5      	b.n	800694e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0e5      	beq.n	800679c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0202 	bic.w	r2, r2, #2
 80067de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067e0:	f7ff f8bc 	bl	800595c <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80067e6:	e012      	b.n	800680e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80067e8:	f7ff f8b8 	bl	800595c <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b0a      	cmp	r3, #10
 80067f4:	d90b      	bls.n	800680e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2205      	movs	r2, #5
 8006806:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e09f      	b.n	800694e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1e5      	bne.n	80067e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7e1b      	ldrb	r3, [r3, #24]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d108      	bne.n	8006836 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e007      	b.n	8006846 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006844:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	7e5b      	ldrb	r3, [r3, #25]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d108      	bne.n	8006860 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e007      	b.n	8006870 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7e9b      	ldrb	r3, [r3, #26]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d108      	bne.n	800688a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0220 	orr.w	r2, r2, #32
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	e007      	b.n	800689a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0220 	bic.w	r2, r2, #32
 8006898:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	7edb      	ldrb	r3, [r3, #27]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d108      	bne.n	80068b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0210 	bic.w	r2, r2, #16
 80068b0:	601a      	str	r2, [r3, #0]
 80068b2:	e007      	b.n	80068c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 0210 	orr.w	r2, r2, #16
 80068c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7f1b      	ldrb	r3, [r3, #28]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d108      	bne.n	80068de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0208 	orr.w	r2, r2, #8
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	e007      	b.n	80068ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0208 	bic.w	r2, r2, #8
 80068ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7f5b      	ldrb	r3, [r3, #29]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d108      	bne.n	8006908 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0204 	orr.w	r2, r2, #4
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e007      	b.n	8006918 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f022 0204 	bic.w	r2, r2, #4
 8006916:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	ea42 0103 	orr.w	r1, r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	1e5a      	subs	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006960:	4b05      	ldr	r3, [pc, #20]	; (8006978 <LL_EXTI_EnableIT_0_31+0x20>)
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4904      	ldr	r1, [pc, #16]	; (8006978 <LL_EXTI_EnableIT_0_31+0x20>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	40010400 	.word	0x40010400

0800697c <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <LL_EXTI_DisableIT_0_31+0x24>)
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	43db      	mvns	r3, r3
 800698c:	4904      	ldr	r1, [pc, #16]	; (80069a0 <LL_EXTI_DisableIT_0_31+0x24>)
 800698e:	4013      	ands	r3, r2
 8006990:	600b      	str	r3, [r1, #0]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010400 	.word	0x40010400

080069a4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	4904      	ldr	r1, [pc, #16]	; (80069c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]

}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	40010400 	.word	0x40010400

080069c8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80069d0:	4b06      	ldr	r3, [pc, #24]	; (80069ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	43db      	mvns	r3, r3
 80069d8:	4904      	ldr	r1, [pc, #16]	; (80069ec <LL_EXTI_DisableEvent_0_31+0x24>)
 80069da:	4013      	ands	r3, r2
 80069dc:	604b      	str	r3, [r1, #4]
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40010400 	.word	0x40010400

080069f0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	4904      	ldr	r1, [pc, #16]	; (8006a10 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	608b      	str	r3, [r1, #8]

}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	40010400 	.word	0x40010400

08006a14 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	43db      	mvns	r3, r3
 8006a24:	4904      	ldr	r1, [pc, #16]	; (8006a38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]

}
 8006a2a:	bf00      	nop
 8006a2c:	370c      	adds	r7, #12
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	40010400 	.word	0x40010400

08006a3c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	4904      	ldr	r1, [pc, #16]	; (8006a5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60cb      	str	r3, [r1, #12]
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr
 8006a5c:	40010400 	.word	0x40010400

08006a60 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	43db      	mvns	r3, r3
 8006a70:	4904      	ldr	r1, [pc, #16]	; (8006a84 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006a72:	4013      	ands	r3, r2
 8006a74:	60cb      	str	r3, [r1, #12]
}
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40010400 	.word	0x40010400

08006a88 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006a90:	4a04      	ldr	r2, [pc, #16]	; (8006aa4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6153      	str	r3, [r2, #20]
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40010400 	.word	0x40010400

08006aa8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	77fb      	strb	r3, [r7, #31]
 8006ac2:	e0d1      	b.n	8006c68 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ace:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad2:	d102      	bne.n	8006ada <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e0c6      	b.n	8006c68 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d115      	bne.n	8006b12 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006af4:	4b5f      	ldr	r3, [pc, #380]	; (8006c74 <HAL_COMP_Init+0x1cc>)
 8006af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006af8:	4a5e      	ldr	r2, [pc, #376]	; (8006c74 <HAL_COMP_Init+0x1cc>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6613      	str	r3, [r2, #96]	; 0x60
 8006b00:	4b5c      	ldr	r3, [pc, #368]	; (8006c74 <HAL_COMP_Init+0x1cc>)
 8006b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	60bb      	str	r3, [r7, #8]
 8006b0a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7fb fc91 	bl	8002434 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b1c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	4b4b      	ldr	r3, [pc, #300]	; (8006c78 <HAL_COMP_Init+0x1d0>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	6979      	ldr	r1, [r7, #20]
 8006b52:	430b      	orrs	r3, r1
 8006b54:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5e:	d106      	bne.n	8006b6e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006b60:	4b46      	ldr	r3, [pc, #280]	; (8006c7c <HAL_COMP_Init+0x1d4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a45      	ldr	r2, [pc, #276]	; (8006c7c <HAL_COMP_Init+0x1d4>)
 8006b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	e005      	b.n	8006b7a <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006b6e:	4b43      	ldr	r3, [pc, #268]	; (8006c7c <HAL_COMP_Init+0x1d4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a42      	ldr	r2, [pc, #264]	; (8006c7c <HAL_COMP_Init+0x1d4>)
 8006b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b78:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d016      	beq.n	8006bb6 <HAL_COMP_Init+0x10e>
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d113      	bne.n	8006bb6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006b8e:	4b3c      	ldr	r3, [pc, #240]	; (8006c80 <HAL_COMP_Init+0x1d8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	099b      	lsrs	r3, r3, #6
 8006b94:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <HAL_COMP_Init+0x1dc>)
 8006b96:	fba2 2303 	umull	r2, r3, r2, r3
 8006b9a:	099b      	lsrs	r3, r3, #6
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006ba8:	e002      	b.n	8006bb0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3b01      	subs	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f9      	bne.n	8006baa <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a33      	ldr	r2, [pc, #204]	; (8006c88 <HAL_COMP_Init+0x1e0>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d102      	bne.n	8006bc6 <HAL_COMP_Init+0x11e>
 8006bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006bc4:	e001      	b.n	8006bca <HAL_COMP_Init+0x122>
 8006bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006bca:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d037      	beq.n	8006c48 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006be4:	6938      	ldr	r0, [r7, #16]
 8006be6:	f7ff ff03 	bl	80069f0 <LL_EXTI_EnableRisingTrig_0_31>
 8006bea:	e002      	b.n	8006bf2 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006bec:	6938      	ldr	r0, [r7, #16]
 8006bee:	f7ff ff11 	bl	8006a14 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006bfe:	6938      	ldr	r0, [r7, #16]
 8006c00:	f7ff ff1c 	bl	8006a3c <LL_EXTI_EnableFallingTrig_0_31>
 8006c04:	e002      	b.n	8006c0c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006c06:	6938      	ldr	r0, [r7, #16]
 8006c08:	f7ff ff2a 	bl	8006a60 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006c0c:	6938      	ldr	r0, [r7, #16]
 8006c0e:	f7ff ff3b 	bl	8006a88 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006c1e:	6938      	ldr	r0, [r7, #16]
 8006c20:	f7ff fec0 	bl	80069a4 <LL_EXTI_EnableEvent_0_31>
 8006c24:	e002      	b.n	8006c2c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006c26:	6938      	ldr	r0, [r7, #16]
 8006c28:	f7ff fece 	bl	80069c8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006c38:	6938      	ldr	r0, [r7, #16]
 8006c3a:	f7ff fe8d 	bl	8006958 <LL_EXTI_EnableIT_0_31>
 8006c3e:	e009      	b.n	8006c54 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006c40:	6938      	ldr	r0, [r7, #16]
 8006c42:	f7ff fe9b 	bl	800697c <LL_EXTI_DisableIT_0_31>
 8006c46:	e005      	b.n	8006c54 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006c48:	6938      	ldr	r0, [r7, #16]
 8006c4a:	f7ff febd 	bl	80069c8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006c4e:	6938      	ldr	r0, [r7, #16]
 8006c50:	f7ff fe94 	bl	800697c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d103      	bne.n	8006c68 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006c68:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40021000 	.word	0x40021000
 8006c78:	ff207d03 	.word	0xff207d03
 8006c7c:	40010204 	.word	0x40010204
 8006c80:	20000000 	.word	0x20000000
 8006c84:	053e2d63 	.word	0x053e2d63
 8006c88:	40010200 	.word	0x40010200

08006c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c9c:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ca8:	4013      	ands	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006cbe:	4a04      	ldr	r2, [pc, #16]	; (8006cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	60d3      	str	r3, [r2, #12]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	e000ed00 	.word	0xe000ed00

08006cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cd8:	4b04      	ldr	r3, [pc, #16]	; (8006cec <__NVIC_GetPriorityGrouping+0x18>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	0a1b      	lsrs	r3, r3, #8
 8006cde:	f003 0307 	and.w	r3, r3, #7
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	e000ed00 	.word	0xe000ed00

08006cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	db0b      	blt.n	8006d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d02:	79fb      	ldrb	r3, [r7, #7]
 8006d04:	f003 021f 	and.w	r2, r3, #31
 8006d08:	4907      	ldr	r1, [pc, #28]	; (8006d28 <__NVIC_EnableIRQ+0x38>)
 8006d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d0e:	095b      	lsrs	r3, r3, #5
 8006d10:	2001      	movs	r0, #1
 8006d12:	fa00 f202 	lsl.w	r2, r0, r2
 8006d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	e000e100 	.word	0xe000e100

08006d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	6039      	str	r1, [r7, #0]
 8006d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	db0a      	blt.n	8006d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	490c      	ldr	r1, [pc, #48]	; (8006d78 <__NVIC_SetPriority+0x4c>)
 8006d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4a:	0112      	lsls	r2, r2, #4
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	440b      	add	r3, r1
 8006d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006d54:	e00a      	b.n	8006d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4908      	ldr	r1, [pc, #32]	; (8006d7c <__NVIC_SetPriority+0x50>)
 8006d5c:	79fb      	ldrb	r3, [r7, #7]
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	3b04      	subs	r3, #4
 8006d64:	0112      	lsls	r2, r2, #4
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	440b      	add	r3, r1
 8006d6a:	761a      	strb	r2, [r3, #24]
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	e000e100 	.word	0xe000e100
 8006d7c:	e000ed00 	.word	0xe000ed00

08006d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b089      	sub	sp, #36	; 0x24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f1c3 0307 	rsb	r3, r3, #7
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	bf28      	it	cs
 8006d9e:	2304      	movcs	r3, #4
 8006da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3304      	adds	r3, #4
 8006da6:	2b06      	cmp	r3, #6
 8006da8:	d902      	bls.n	8006db0 <NVIC_EncodePriority+0x30>
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	3b03      	subs	r3, #3
 8006dae:	e000      	b.n	8006db2 <NVIC_EncodePriority+0x32>
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006db4:	f04f 32ff 	mov.w	r2, #4294967295
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbe:	43da      	mvns	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd2:	43d9      	mvns	r1, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006dd8:	4313      	orrs	r3, r2
         );
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3724      	adds	r7, #36	; 0x24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3b01      	subs	r3, #1
 8006df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006df8:	d301      	bcc.n	8006dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e00f      	b.n	8006e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006dfe:	4a0a      	ldr	r2, [pc, #40]	; (8006e28 <SysTick_Config+0x40>)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e06:	210f      	movs	r1, #15
 8006e08:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0c:	f7ff ff8e 	bl	8006d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e10:	4b05      	ldr	r3, [pc, #20]	; (8006e28 <SysTick_Config+0x40>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e16:	4b04      	ldr	r3, [pc, #16]	; (8006e28 <SysTick_Config+0x40>)
 8006e18:	2207      	movs	r2, #7
 8006e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	e000e010 	.word	0xe000e010

08006e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff ff29 	bl	8006c8c <__NVIC_SetPriorityGrouping>
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	4603      	mov	r3, r0
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	607a      	str	r2, [r7, #4]
 8006e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006e54:	f7ff ff3e 	bl	8006cd4 <__NVIC_GetPriorityGrouping>
 8006e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	6978      	ldr	r0, [r7, #20]
 8006e60:	f7ff ff8e 	bl	8006d80 <NVIC_EncodePriority>
 8006e64:	4602      	mov	r2, r0
 8006e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff ff5d 	bl	8006d2c <__NVIC_SetPriority>
}
 8006e72:	bf00      	nop
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	4603      	mov	r3, r0
 8006e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7ff ff31 	bl	8006cf0 <__NVIC_EnableIRQ>
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7ff ffa2 	bl	8006de8 <SysTick_Config>
 8006ea4:	4603      	mov	r3, r0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3708      	adds	r7, #8
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d008      	beq.n	8006ed8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2204      	movs	r2, #4
 8006eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e022      	b.n	8006f1e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 020e 	bic.w	r2, r2, #14
 8006ee6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0201 	bic.w	r2, r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efc:	f003 021c 	and.w	r2, r3, #28
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	2101      	movs	r1, #1
 8006f06:	fa01 f202 	lsl.w	r2, r1, r2
 8006f0a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f32:	2300      	movs	r3, #0
 8006f34:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d005      	beq.n	8006f4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2204      	movs	r2, #4
 8006f46:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e029      	b.n	8006fa2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 020e 	bic.w	r2, r2, #14
 8006f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f022 0201 	bic.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	f003 021c 	and.w	r2, r3, #28
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f80:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
    }
  }
  return status;
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b087      	sub	sp, #28
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fba:	e17f      	b.n	80072bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fc8:	4013      	ands	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 8171 	beq.w	80072b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f003 0303 	and.w	r3, r3, #3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d005      	beq.n	8006fec <HAL_GPIO_Init+0x40>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f003 0303 	and.w	r3, r3, #3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d130      	bne.n	800704e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	005b      	lsls	r3, r3, #1
 8006ff6:	2203      	movs	r2, #3
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	43db      	mvns	r3, r3
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	4013      	ands	r3, r2
 8007002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	005b      	lsls	r3, r3, #1
 800700c:	fa02 f303 	lsl.w	r3, r2, r3
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007022:	2201      	movs	r2, #1
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	43db      	mvns	r3, r3
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4013      	ands	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	091b      	lsrs	r3, r3, #4
 8007038:	f003 0201 	and.w	r2, r3, #1
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	2b03      	cmp	r3, #3
 8007058:	d118      	bne.n	800708c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8007060:	2201      	movs	r2, #1
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	fa02 f303 	lsl.w	r3, r2, r3
 8007068:	43db      	mvns	r3, r3
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	4013      	ands	r3, r2
 800706e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	08db      	lsrs	r3, r3, #3
 8007076:	f003 0201 	and.w	r2, r3, #1
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 0303 	and.w	r3, r3, #3
 8007094:	2b03      	cmp	r3, #3
 8007096:	d017      	beq.n	80070c8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	2203      	movs	r2, #3
 80070a4:	fa02 f303 	lsl.w	r3, r2, r3
 80070a8:	43db      	mvns	r3, r3
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	4013      	ands	r3, r2
 80070ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d123      	bne.n	800711c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	08da      	lsrs	r2, r3, #3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	3208      	adds	r2, #8
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	220f      	movs	r2, #15
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	43db      	mvns	r3, r3
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4013      	ands	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	08da      	lsrs	r2, r3, #3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3208      	adds	r2, #8
 8007116:	6939      	ldr	r1, [r7, #16]
 8007118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	2203      	movs	r2, #3
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	43db      	mvns	r3, r3
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4013      	ands	r3, r2
 8007132:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	f003 0203 	and.w	r2, r3, #3
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	fa02 f303 	lsl.w	r3, r2, r3
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80ac 	beq.w	80072b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800715e:	4b5f      	ldr	r3, [pc, #380]	; (80072dc <HAL_GPIO_Init+0x330>)
 8007160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007162:	4a5e      	ldr	r2, [pc, #376]	; (80072dc <HAL_GPIO_Init+0x330>)
 8007164:	f043 0301 	orr.w	r3, r3, #1
 8007168:	6613      	str	r3, [r2, #96]	; 0x60
 800716a:	4b5c      	ldr	r3, [pc, #368]	; (80072dc <HAL_GPIO_Init+0x330>)
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	f003 0301 	and.w	r3, r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
 8007174:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007176:	4a5a      	ldr	r2, [pc, #360]	; (80072e0 <HAL_GPIO_Init+0x334>)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	089b      	lsrs	r3, r3, #2
 800717c:	3302      	adds	r3, #2
 800717e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007182:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	220f      	movs	r2, #15
 800718e:	fa02 f303 	lsl.w	r3, r2, r3
 8007192:	43db      	mvns	r3, r3
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4013      	ands	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80071a0:	d025      	beq.n	80071ee <HAL_GPIO_Init+0x242>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a4f      	ldr	r2, [pc, #316]	; (80072e4 <HAL_GPIO_Init+0x338>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01f      	beq.n	80071ea <HAL_GPIO_Init+0x23e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a4e      	ldr	r2, [pc, #312]	; (80072e8 <HAL_GPIO_Init+0x33c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d019      	beq.n	80071e6 <HAL_GPIO_Init+0x23a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a4d      	ldr	r2, [pc, #308]	; (80072ec <HAL_GPIO_Init+0x340>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d013      	beq.n	80071e2 <HAL_GPIO_Init+0x236>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a4c      	ldr	r2, [pc, #304]	; (80072f0 <HAL_GPIO_Init+0x344>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00d      	beq.n	80071de <HAL_GPIO_Init+0x232>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a4b      	ldr	r2, [pc, #300]	; (80072f4 <HAL_GPIO_Init+0x348>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d007      	beq.n	80071da <HAL_GPIO_Init+0x22e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a4a      	ldr	r2, [pc, #296]	; (80072f8 <HAL_GPIO_Init+0x34c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d101      	bne.n	80071d6 <HAL_GPIO_Init+0x22a>
 80071d2:	2306      	movs	r3, #6
 80071d4:	e00c      	b.n	80071f0 <HAL_GPIO_Init+0x244>
 80071d6:	2307      	movs	r3, #7
 80071d8:	e00a      	b.n	80071f0 <HAL_GPIO_Init+0x244>
 80071da:	2305      	movs	r3, #5
 80071dc:	e008      	b.n	80071f0 <HAL_GPIO_Init+0x244>
 80071de:	2304      	movs	r3, #4
 80071e0:	e006      	b.n	80071f0 <HAL_GPIO_Init+0x244>
 80071e2:	2303      	movs	r3, #3
 80071e4:	e004      	b.n	80071f0 <HAL_GPIO_Init+0x244>
 80071e6:	2302      	movs	r3, #2
 80071e8:	e002      	b.n	80071f0 <HAL_GPIO_Init+0x244>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <HAL_GPIO_Init+0x244>
 80071ee:	2300      	movs	r3, #0
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	f002 0203 	and.w	r2, r2, #3
 80071f6:	0092      	lsls	r2, r2, #2
 80071f8:	4093      	lsls	r3, r2
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007200:	4937      	ldr	r1, [pc, #220]	; (80072e0 <HAL_GPIO_Init+0x334>)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	3302      	adds	r3, #2
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800720e:	4b3b      	ldr	r3, [pc, #236]	; (80072fc <HAL_GPIO_Init+0x350>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	43db      	mvns	r3, r3
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4013      	ands	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007232:	4a32      	ldr	r2, [pc, #200]	; (80072fc <HAL_GPIO_Init+0x350>)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007238:	4b30      	ldr	r3, [pc, #192]	; (80072fc <HAL_GPIO_Init+0x350>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	43db      	mvns	r3, r3
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4013      	ands	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800725c:	4a27      	ldr	r2, [pc, #156]	; (80072fc <HAL_GPIO_Init+0x350>)
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007262:	4b26      	ldr	r3, [pc, #152]	; (80072fc <HAL_GPIO_Init+0x350>)
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	43db      	mvns	r3, r3
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	4013      	ands	r3, r2
 8007270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007286:	4a1d      	ldr	r2, [pc, #116]	; (80072fc <HAL_GPIO_Init+0x350>)
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800728c:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <HAL_GPIO_Init+0x350>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	43db      	mvns	r3, r3
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4013      	ands	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80072b0:	4a12      	ldr	r2, [pc, #72]	; (80072fc <HAL_GPIO_Init+0x350>)
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	3301      	adds	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f47f ae78 	bne.w	8006fbc <HAL_GPIO_Init+0x10>
  }
}
 80072cc:	bf00      	nop
 80072ce:	bf00      	nop
 80072d0:	371c      	adds	r7, #28
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40021000 	.word	0x40021000
 80072e0:	40010000 	.word	0x40010000
 80072e4:	48000400 	.word	0x48000400
 80072e8:	48000800 	.word	0x48000800
 80072ec:	48000c00 	.word	0x48000c00
 80072f0:	48001000 	.word	0x48001000
 80072f4:	48001400 	.word	0x48001400
 80072f8:	48001800 	.word	0x48001800
 80072fc:	40010400 	.word	0x40010400

08007300 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800730e:	e0cd      	b.n	80074ac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8007310:	2201      	movs	r2, #1
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	4013      	ands	r3, r2
 800731c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80c0 	beq.w	80074a6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007326:	4a68      	ldr	r2, [pc, #416]	; (80074c8 <HAL_GPIO_DeInit+0x1c8>)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	089b      	lsrs	r3, r3, #2
 800732c:	3302      	adds	r3, #2
 800732e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007332:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f003 0303 	and.w	r3, r3, #3
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	220f      	movs	r2, #15
 800733e:	fa02 f303 	lsl.w	r3, r2, r3
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4013      	ands	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800734e:	d025      	beq.n	800739c <HAL_GPIO_DeInit+0x9c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a5e      	ldr	r2, [pc, #376]	; (80074cc <HAL_GPIO_DeInit+0x1cc>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d01f      	beq.n	8007398 <HAL_GPIO_DeInit+0x98>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a5d      	ldr	r2, [pc, #372]	; (80074d0 <HAL_GPIO_DeInit+0x1d0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d019      	beq.n	8007394 <HAL_GPIO_DeInit+0x94>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a5c      	ldr	r2, [pc, #368]	; (80074d4 <HAL_GPIO_DeInit+0x1d4>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d013      	beq.n	8007390 <HAL_GPIO_DeInit+0x90>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a5b      	ldr	r2, [pc, #364]	; (80074d8 <HAL_GPIO_DeInit+0x1d8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00d      	beq.n	800738c <HAL_GPIO_DeInit+0x8c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a5a      	ldr	r2, [pc, #360]	; (80074dc <HAL_GPIO_DeInit+0x1dc>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d007      	beq.n	8007388 <HAL_GPIO_DeInit+0x88>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a59      	ldr	r2, [pc, #356]	; (80074e0 <HAL_GPIO_DeInit+0x1e0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d101      	bne.n	8007384 <HAL_GPIO_DeInit+0x84>
 8007380:	2306      	movs	r3, #6
 8007382:	e00c      	b.n	800739e <HAL_GPIO_DeInit+0x9e>
 8007384:	2307      	movs	r3, #7
 8007386:	e00a      	b.n	800739e <HAL_GPIO_DeInit+0x9e>
 8007388:	2305      	movs	r3, #5
 800738a:	e008      	b.n	800739e <HAL_GPIO_DeInit+0x9e>
 800738c:	2304      	movs	r3, #4
 800738e:	e006      	b.n	800739e <HAL_GPIO_DeInit+0x9e>
 8007390:	2303      	movs	r3, #3
 8007392:	e004      	b.n	800739e <HAL_GPIO_DeInit+0x9e>
 8007394:	2302      	movs	r3, #2
 8007396:	e002      	b.n	800739e <HAL_GPIO_DeInit+0x9e>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <HAL_GPIO_DeInit+0x9e>
 800739c:	2300      	movs	r3, #0
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	f002 0203 	and.w	r2, r2, #3
 80073a4:	0092      	lsls	r2, r2, #2
 80073a6:	4093      	lsls	r3, r2
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d132      	bne.n	8007414 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80073ae:	4b4d      	ldr	r3, [pc, #308]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	494b      	ldr	r1, [pc, #300]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80073bc:	4b49      	ldr	r3, [pc, #292]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	43db      	mvns	r3, r3
 80073c4:	4947      	ldr	r1, [pc, #284]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073c6:	4013      	ands	r3, r2
 80073c8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80073ca:	4b46      	ldr	r3, [pc, #280]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	43db      	mvns	r3, r3
 80073d2:	4944      	ldr	r1, [pc, #272]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	43db      	mvns	r3, r3
 80073e0:	4940      	ldr	r1, [pc, #256]	; (80074e4 <HAL_GPIO_DeInit+0x1e4>)
 80073e2:	4013      	ands	r3, r2
 80073e4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f003 0303 	and.w	r3, r3, #3
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	220f      	movs	r2, #15
 80073f0:	fa02 f303 	lsl.w	r3, r2, r3
 80073f4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80073f6:	4a34      	ldr	r2, [pc, #208]	; (80074c8 <HAL_GPIO_DeInit+0x1c8>)
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	089b      	lsrs	r3, r3, #2
 80073fc:	3302      	adds	r3, #2
 80073fe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	43da      	mvns	r2, r3
 8007406:	4830      	ldr	r0, [pc, #192]	; (80074c8 <HAL_GPIO_DeInit+0x1c8>)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	089b      	lsrs	r3, r3, #2
 800740c:	400a      	ands	r2, r1
 800740e:	3302      	adds	r3, #2
 8007410:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	005b      	lsls	r3, r3, #1
 800741c:	2103      	movs	r1, #3
 800741e:	fa01 f303 	lsl.w	r3, r1, r3
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	08da      	lsrs	r2, r3, #3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	3208      	adds	r2, #8
 8007430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	220f      	movs	r2, #15
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	43db      	mvns	r3, r3
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	08d2      	lsrs	r2, r2, #3
 8007448:	4019      	ands	r1, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3208      	adds	r2, #8
 800744e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	2103      	movs	r1, #3
 800745c:	fa01 f303 	lsl.w	r3, r1, r3
 8007460:	43db      	mvns	r3, r3
 8007462:	401a      	ands	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	2101      	movs	r1, #1
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	43db      	mvns	r3, r3
 8007476:	401a      	ands	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	2103      	movs	r1, #3
 8007486:	fa01 f303 	lsl.w	r3, r1, r3
 800748a:	43db      	mvns	r3, r3
 800748c:	401a      	ands	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	2101      	movs	r1, #1
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	fa01 f303 	lsl.w	r3, r1, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	401a      	ands	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	3301      	adds	r3, #1
 80074aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f47f af2b 	bne.w	8007310 <HAL_GPIO_DeInit+0x10>
  }
}
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	40010000 	.word	0x40010000
 80074cc:	48000400 	.word	0x48000400
 80074d0:	48000800 	.word	0x48000800
 80074d4:	48000c00 	.word	0x48000c00
 80074d8:	48001000 	.word	0x48001000
 80074dc:	48001400 	.word	0x48001400
 80074e0:	48001800 	.word	0x48001800
 80074e4:	40010400 	.word	0x40010400

080074e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	807b      	strh	r3, [r7, #2]
 80074f4:	4613      	mov	r3, r2
 80074f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074f8:	787b      	ldrb	r3, [r7, #1]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80074fe:	887a      	ldrh	r2, [r7, #2]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007504:	e002      	b.n	800750c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007506:	887a      	ldrh	r2, [r7, #2]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e081      	b.n	800762e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fa ffac 	bl	800249c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2224      	movs	r2, #36	; 0x24
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007568:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007578:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d107      	bne.n	8007592 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800758e:	609a      	str	r2, [r3, #8]
 8007590:	e006      	b.n	80075a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689a      	ldr	r2, [r3, #8]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800759e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d104      	bne.n	80075b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6812      	ldr	r2, [r2, #0]
 80075bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80075c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691a      	ldr	r2, [r3, #16]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	430a      	orrs	r2, r1
 80075ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69d9      	ldr	r1, [r3, #28]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1a      	ldr	r2, [r3, #32]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0201 	orr.w	r2, r2, #1
 800760e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e021      	b.n	800768c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2224      	movs	r2, #36	; 0x24
 800764c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f022 0201 	bic.w	r2, r2, #1
 800765e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fa ff79 	bl	8002558 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	4608      	mov	r0, r1
 800769e:	4611      	mov	r1, r2
 80076a0:	461a      	mov	r2, r3
 80076a2:	4603      	mov	r3, r0
 80076a4:	817b      	strh	r3, [r7, #10]
 80076a6:	460b      	mov	r3, r1
 80076a8:	813b      	strh	r3, [r7, #8]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b20      	cmp	r3, #32
 80076b8:	f040 80f9 	bne.w	80078ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_I2C_Mem_Write+0x34>
 80076c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d105      	bne.n	80076d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e0ed      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_I2C_Mem_Write+0x4e>
 80076de:	2302      	movs	r3, #2
 80076e0:	e0e6      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80076ea:	f7fe f937 	bl	800595c <HAL_GetTick>
 80076ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	2319      	movs	r3, #25
 80076f6:	2201      	movs	r2, #1
 80076f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fadd 	bl	8007cbc <I2C_WaitOnFlagUntilTimeout>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e0d1      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2221      	movs	r2, #33	; 0x21
 8007710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2240      	movs	r2, #64	; 0x40
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6a3a      	ldr	r2, [r7, #32]
 8007726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800772c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007734:	88f8      	ldrh	r0, [r7, #6]
 8007736:	893a      	ldrh	r2, [r7, #8]
 8007738:	8979      	ldrh	r1, [r7, #10]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	9301      	str	r3, [sp, #4]
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	4603      	mov	r3, r0
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f9ed 	bl	8007b24 <I2C_RequestMemoryWrite>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e0a9      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007760:	b29b      	uxth	r3, r3
 8007762:	2bff      	cmp	r3, #255	; 0xff
 8007764:	d90e      	bls.n	8007784 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	22ff      	movs	r2, #255	; 0xff
 800776a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007770:	b2da      	uxtb	r2, r3
 8007772:	8979      	ldrh	r1, [r7, #10]
 8007774:	2300      	movs	r3, #0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f000 fc45 	bl	800800c <I2C_TransferConfig>
 8007782:	e00f      	b.n	80077a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007788:	b29a      	uxth	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007792:	b2da      	uxtb	r2, r3
 8007794:	8979      	ldrh	r1, [r7, #10]
 8007796:	2300      	movs	r3, #0
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 fc34 	bl	800800c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fac7 	bl	8007d3c <I2C_WaitOnTXISFlagUntilTimeout>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e07b      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	781a      	ldrb	r2, [r3, #0]
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e0:	3b01      	subs	r3, #1
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d034      	beq.n	800785c <HAL_I2C_Mem_Write+0x1c8>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d130      	bne.n	800785c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007800:	2200      	movs	r2, #0
 8007802:	2180      	movs	r1, #128	; 0x80
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fa59 	bl	8007cbc <I2C_WaitOnFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e04d      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007818:	b29b      	uxth	r3, r3
 800781a:	2bff      	cmp	r3, #255	; 0xff
 800781c:	d90e      	bls.n	800783c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	22ff      	movs	r2, #255	; 0xff
 8007822:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007828:	b2da      	uxtb	r2, r3
 800782a:	8979      	ldrh	r1, [r7, #10]
 800782c:	2300      	movs	r3, #0
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fbe9 	bl	800800c <I2C_TransferConfig>
 800783a:	e00f      	b.n	800785c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800784a:	b2da      	uxtb	r2, r3
 800784c:	8979      	ldrh	r1, [r7, #10]
 800784e:	2300      	movs	r3, #0
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fbd8 	bl	800800c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007860:	b29b      	uxth	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d19e      	bne.n	80077a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 faa6 	bl	8007dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e01a      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2220      	movs	r2, #32
 8007880:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6859      	ldr	r1, [r3, #4]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	4b0a      	ldr	r3, [pc, #40]	; (80078b8 <HAL_I2C_Mem_Write+0x224>)
 800788e:	400b      	ands	r3, r1
 8007890:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e000      	b.n	80078b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
  }
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	fe00e800 	.word	0xfe00e800

080078bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	4608      	mov	r0, r1
 80078c6:	4611      	mov	r1, r2
 80078c8:	461a      	mov	r2, r3
 80078ca:	4603      	mov	r3, r0
 80078cc:	817b      	strh	r3, [r7, #10]
 80078ce:	460b      	mov	r3, r1
 80078d0:	813b      	strh	r3, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b20      	cmp	r3, #32
 80078e0:	f040 80fd 	bne.w	8007ade <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80078e4:	6a3b      	ldr	r3, [r7, #32]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_I2C_Mem_Read+0x34>
 80078ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d105      	bne.n	80078fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0f1      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_I2C_Mem_Read+0x4e>
 8007906:	2302      	movs	r3, #2
 8007908:	e0ea      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007912:	f7fe f823 	bl	800595c <HAL_GetTick>
 8007916:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	2319      	movs	r3, #25
 800791e:	2201      	movs	r2, #1
 8007920:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f9c9 	bl	8007cbc <I2C_WaitOnFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e0d5      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2222      	movs	r2, #34	; 0x22
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2240      	movs	r2, #64	; 0x40
 8007940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007954:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800795c:	88f8      	ldrh	r0, [r7, #6]
 800795e:	893a      	ldrh	r2, [r7, #8]
 8007960:	8979      	ldrh	r1, [r7, #10]
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	9301      	str	r3, [sp, #4]
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	4603      	mov	r3, r0
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 f92d 	bl	8007bcc <I2C_RequestMemoryRead>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d005      	beq.n	8007984 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0ad      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007988:	b29b      	uxth	r3, r3
 800798a:	2bff      	cmp	r3, #255	; 0xff
 800798c:	d90e      	bls.n	80079ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	22ff      	movs	r2, #255	; 0xff
 8007992:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007998:	b2da      	uxtb	r2, r3
 800799a:	8979      	ldrh	r1, [r7, #10]
 800799c:	4b52      	ldr	r3, [pc, #328]	; (8007ae8 <HAL_I2C_Mem_Read+0x22c>)
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fb31 	bl	800800c <I2C_TransferConfig>
 80079aa:	e00f      	b.n	80079cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	8979      	ldrh	r1, [r7, #10]
 80079be:	4b4a      	ldr	r3, [pc, #296]	; (8007ae8 <HAL_I2C_Mem_Read+0x22c>)
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fb20 	bl	800800c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	2200      	movs	r2, #0
 80079d4:	2104      	movs	r1, #4
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 f970 	bl	8007cbc <I2C_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e07c      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d034      	beq.n	8007a8c <HAL_I2C_Mem_Read+0x1d0>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d130      	bne.n	8007a8c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	2200      	movs	r2, #0
 8007a32:	2180      	movs	r1, #128	; 0x80
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f941 	bl	8007cbc <I2C_WaitOnFlagUntilTimeout>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e04d      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	2bff      	cmp	r3, #255	; 0xff
 8007a4c:	d90e      	bls.n	8007a6c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	22ff      	movs	r2, #255	; 0xff
 8007a52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	8979      	ldrh	r1, [r7, #10]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f000 fad1 	bl	800800c <I2C_TransferConfig>
 8007a6a:	e00f      	b.n	8007a8c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	8979      	ldrh	r1, [r7, #10]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 fac0 	bl	800800c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d19a      	bne.n	80079cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a9a:	68f8      	ldr	r0, [r7, #12]
 8007a9c:	f000 f98e 	bl	8007dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e01a      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6859      	ldr	r1, [r3, #4]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	4b0b      	ldr	r3, [pc, #44]	; (8007aec <HAL_I2C_Mem_Read+0x230>)
 8007abe:	400b      	ands	r3, r1
 8007ac0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	e000      	b.n	8007ae0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007ade:	2302      	movs	r3, #2
  }
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	80002400 	.word	0x80002400
 8007aec:	fe00e800 	.word	0xfe00e800

08007af0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007afe:	b2db      	uxtb	r3, r3
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	4608      	mov	r0, r1
 8007b2e:	4611      	mov	r1, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	817b      	strh	r3, [r7, #10]
 8007b36:	460b      	mov	r3, r1
 8007b38:	813b      	strh	r3, [r7, #8]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	8979      	ldrh	r1, [r7, #10]
 8007b44:	4b20      	ldr	r3, [pc, #128]	; (8007bc8 <I2C_RequestMemoryWrite+0xa4>)
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fa5d 	bl	800800c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b52:	69fa      	ldr	r2, [r7, #28]
 8007b54:	69b9      	ldr	r1, [r7, #24]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 f8f0 	bl	8007d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e02c      	b.n	8007bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b66:	88fb      	ldrh	r3, [r7, #6]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d105      	bne.n	8007b78 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b6c:	893b      	ldrh	r3, [r7, #8]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	629a      	str	r2, [r3, #40]	; 0x28
 8007b76:	e015      	b.n	8007ba4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b78:	893b      	ldrh	r3, [r7, #8]
 8007b7a:	0a1b      	lsrs	r3, r3, #8
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	b2da      	uxtb	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	69b9      	ldr	r1, [r7, #24]
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 f8d6 	bl	8007d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e012      	b.n	8007bc0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b9a:	893b      	ldrh	r3, [r7, #8]
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	2200      	movs	r2, #0
 8007bac:	2180      	movs	r1, #128	; 0x80
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f884 	bl	8007cbc <I2C_WaitOnFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	80002000 	.word	0x80002000

08007bcc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	4608      	mov	r0, r1
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	461a      	mov	r2, r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	817b      	strh	r3, [r7, #10]
 8007bde:	460b      	mov	r3, r1
 8007be0:	813b      	strh	r3, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	8979      	ldrh	r1, [r7, #10]
 8007bec:	4b20      	ldr	r3, [pc, #128]	; (8007c70 <I2C_RequestMemoryRead+0xa4>)
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 fa0a 	bl	800800c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bf8:	69fa      	ldr	r2, [r7, #28]
 8007bfa:	69b9      	ldr	r1, [r7, #24]
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f000 f89d 	bl	8007d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e02c      	b.n	8007c66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c0c:	88fb      	ldrh	r3, [r7, #6]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d105      	bne.n	8007c1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c12:	893b      	ldrh	r3, [r7, #8]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c1c:	e015      	b.n	8007c4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c1e:	893b      	ldrh	r3, [r7, #8]
 8007c20:	0a1b      	lsrs	r3, r3, #8
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	69b9      	ldr	r1, [r7, #24]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f883 	bl	8007d3c <I2C_WaitOnTXISFlagUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e012      	b.n	8007c66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c40:	893b      	ldrh	r3, [r7, #8]
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	2200      	movs	r2, #0
 8007c52:	2140      	movs	r1, #64	; 0x40
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f831 	bl	8007cbc <I2C_WaitOnFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	80002000 	.word	0x80002000

08007c74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d103      	bne.n	8007c92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d007      	beq.n	8007cb0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	619a      	str	r2, [r3, #24]
  }
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ccc:	e022      	b.n	8007d14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd4:	d01e      	beq.n	8007d14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cd6:	f7fd fe41 	bl	800595c <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d302      	bcc.n	8007cec <I2C_WaitOnFlagUntilTimeout+0x30>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d113      	bne.n	8007d14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf0:	f043 0220 	orr.w	r2, r3, #32
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2220      	movs	r2, #32
 8007cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e00f      	b.n	8007d34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d0cd      	beq.n	8007cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d48:	e02c      	b.n	8007da4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f870 	bl	8007e34 <I2C_IsErrorOccurred>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d001      	beq.n	8007d5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e02a      	b.n	8007db4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d64:	d01e      	beq.n	8007da4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d66:	f7fd fdf9 	bl	800595c <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d302      	bcc.n	8007d7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d113      	bne.n	8007da4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d80:	f043 0220 	orr.w	r2, r3, #32
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	e007      	b.n	8007db4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f003 0302 	and.w	r3, r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d1cb      	bne.n	8007d4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007dc8:	e028      	b.n	8007e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	68b9      	ldr	r1, [r7, #8]
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f000 f830 	bl	8007e34 <I2C_IsErrorOccurred>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d001      	beq.n	8007dde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e026      	b.n	8007e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dde:	f7fd fdbd 	bl	800595c <HAL_GetTick>
 8007de2:	4602      	mov	r2, r0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	1ad3      	subs	r3, r2, r3
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d302      	bcc.n	8007df4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d113      	bne.n	8007e1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df8:	f043 0220 	orr.w	r2, r3, #32
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e007      	b.n	8007e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f003 0320 	and.w	r3, r3, #32
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d1cf      	bne.n	8007dca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	; 0x28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	f003 0310 	and.w	r3, r3, #16
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d075      	beq.n	8007f4c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2210      	movs	r2, #16
 8007e66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e68:	e056      	b.n	8007f18 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d052      	beq.n	8007f18 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007e72:	f7fd fd73 	bl	800595c <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d302      	bcc.n	8007e88 <I2C_IsErrorOccurred+0x54>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d147      	bne.n	8007f18 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eaa:	d12e      	bne.n	8007f0a <I2C_IsErrorOccurred+0xd6>
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eb2:	d02a      	beq.n	8007f0a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007eb4:	7cfb      	ldrb	r3, [r7, #19]
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	d027      	beq.n	8007f0a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ec8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007eca:	f7fd fd47 	bl	800595c <HAL_GetTick>
 8007ece:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ed0:	e01b      	b.n	8007f0a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007ed2:	f7fd fd43 	bl	800595c <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b19      	cmp	r3, #25
 8007ede:	d914      	bls.n	8007f0a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	f003 0320 	and.w	r3, r3, #32
 8007f14:	2b20      	cmp	r3, #32
 8007f16:	d1dc      	bne.n	8007ed2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b20      	cmp	r3, #32
 8007f24:	d003      	beq.n	8007f2e <I2C_IsErrorOccurred+0xfa>
 8007f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d09d      	beq.n	8007e6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d103      	bne.n	8007f3e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	f043 0304 	orr.w	r3, r3, #4
 8007f44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007f80:	6a3b      	ldr	r3, [r7, #32]
 8007f82:	f043 0308 	orr.w	r3, r3, #8
 8007f86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007fa2:	6a3b      	ldr	r3, [r7, #32]
 8007fa4:	f043 0302 	orr.w	r3, r3, #2
 8007fa8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d01c      	beq.n	8007ffc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff fe56 	bl	8007c74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6859      	ldr	r1, [r3, #4]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	; (8008008 <I2C_IsErrorOccurred+0x1d4>)
 8007fd4:	400b      	ands	r3, r1
 8007fd6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fdc:	6a3b      	ldr	r3, [r7, #32]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008000:	4618      	mov	r0, r3
 8008002:	3728      	adds	r7, #40	; 0x28
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	fe00e800 	.word	0xfe00e800

0800800c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	817b      	strh	r3, [r7, #10]
 800801a:	4613      	mov	r3, r2
 800801c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800801e:	897b      	ldrh	r3, [r7, #10]
 8008020:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008024:	7a7b      	ldrb	r3, [r7, #9]
 8008026:	041b      	lsls	r3, r3, #16
 8008028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800802c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	4313      	orrs	r3, r2
 8008036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800803a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	0d5b      	lsrs	r3, r3, #21
 8008046:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800804a:	4b08      	ldr	r3, [pc, #32]	; (800806c <I2C_TransferConfig+0x60>)
 800804c:	430b      	orrs	r3, r1
 800804e:	43db      	mvns	r3, r3
 8008050:	ea02 0103 	and.w	r1, r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800805e:	bf00      	nop
 8008060:	371c      	adds	r7, #28
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	03ff63ff 	.word	0x03ff63ff

08008070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b20      	cmp	r3, #32
 8008084:	d138      	bne.n	80080f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800808c:	2b01      	cmp	r3, #1
 800808e:	d101      	bne.n	8008094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008090:	2302      	movs	r3, #2
 8008092:	e032      	b.n	80080fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2224      	movs	r2, #36	; 0x24
 80080a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6819      	ldr	r1, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	e000      	b.n	80080fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080f8:	2302      	movs	r3, #2
  }
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b20      	cmp	r3, #32
 800811a:	d139      	bne.n	8008190 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008122:	2b01      	cmp	r3, #1
 8008124:	d101      	bne.n	800812a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008126:	2302      	movs	r3, #2
 8008128:	e033      	b.n	8008192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2224      	movs	r2, #36	; 0x24
 8008136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 0201 	bic.w	r2, r2, #1
 8008148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008158:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	021b      	lsls	r3, r3, #8
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e000      	b.n	8008192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
	...

080081a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	40007000 	.word	0x40007000

080081bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ca:	d130      	bne.n	800822e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80081cc:	4b23      	ldr	r3, [pc, #140]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081d8:	d038      	beq.n	800824c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081da:	4b20      	ldr	r3, [pc, #128]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80081e2:	4a1e      	ldr	r2, [pc, #120]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80081e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80081ea:	4b1d      	ldr	r3, [pc, #116]	; (8008260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2232      	movs	r2, #50	; 0x32
 80081f0:	fb02 f303 	mul.w	r3, r2, r3
 80081f4:	4a1b      	ldr	r2, [pc, #108]	; (8008264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80081f6:	fba2 2303 	umull	r2, r3, r2, r3
 80081fa:	0c9b      	lsrs	r3, r3, #18
 80081fc:	3301      	adds	r3, #1
 80081fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008200:	e002      	b.n	8008208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3b01      	subs	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008208:	4b14      	ldr	r3, [pc, #80]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008214:	d102      	bne.n	800821c <HAL_PWREx_ControlVoltageScaling+0x60>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f2      	bne.n	8008202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800821c:	4b0f      	ldr	r3, [pc, #60]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008228:	d110      	bne.n	800824c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e00f      	b.n	800824e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800822e:	4b0b      	ldr	r3, [pc, #44]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800823a:	d007      	beq.n	800824c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800823c:	4b07      	ldr	r3, [pc, #28]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008244:	4a05      	ldr	r2, [pc, #20]	; (800825c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800824a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40007000 	.word	0x40007000
 8008260:	20000000 	.word	0x20000000
 8008264:	431bde83 	.word	0x431bde83

08008268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e3ca      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800827a:	4b97      	ldr	r3, [pc, #604]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f003 030c 	and.w	r3, r3, #12
 8008282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008284:	4b94      	ldr	r3, [pc, #592]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0303 	and.w	r3, r3, #3
 800828c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0310 	and.w	r3, r3, #16
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 80e4 	beq.w	8008464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <HAL_RCC_OscConfig+0x4a>
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	f040 808b 	bne.w	80083c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	f040 8087 	bne.w	80083c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80082b2:	4b89      	ldr	r3, [pc, #548]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d005      	beq.n	80082ca <HAL_RCC_OscConfig+0x62>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d101      	bne.n	80082ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e3a2      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a1a      	ldr	r2, [r3, #32]
 80082ce:	4b82      	ldr	r3, [pc, #520]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <HAL_RCC_OscConfig+0x7c>
 80082da:	4b7f      	ldr	r3, [pc, #508]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082e2:	e005      	b.n	80082f0 <HAL_RCC_OscConfig+0x88>
 80082e4:	4b7c      	ldr	r3, [pc, #496]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80082e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082ea:	091b      	lsrs	r3, r3, #4
 80082ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d223      	bcs.n	800833c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 fd55 	bl	8008da8 <RCC_SetFlashLatencyFromMSIRange>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e383      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008308:	4b73      	ldr	r3, [pc, #460]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a72      	ldr	r2, [pc, #456]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800830e:	f043 0308 	orr.w	r3, r3, #8
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	4b70      	ldr	r3, [pc, #448]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	496d      	ldr	r1, [pc, #436]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008322:	4313      	orrs	r3, r2
 8008324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008326:	4b6c      	ldr	r3, [pc, #432]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	4968      	ldr	r1, [pc, #416]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008336:	4313      	orrs	r3, r2
 8008338:	604b      	str	r3, [r1, #4]
 800833a:	e025      	b.n	8008388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800833c:	4b66      	ldr	r3, [pc, #408]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a65      	ldr	r2, [pc, #404]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008342:	f043 0308 	orr.w	r3, r3, #8
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	4b63      	ldr	r3, [pc, #396]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	4960      	ldr	r1, [pc, #384]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008356:	4313      	orrs	r3, r2
 8008358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800835a:	4b5f      	ldr	r3, [pc, #380]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	021b      	lsls	r3, r3, #8
 8008368:	495b      	ldr	r1, [pc, #364]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800836a:	4313      	orrs	r3, r2
 800836c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d109      	bne.n	8008388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	4618      	mov	r0, r3
 800837a:	f000 fd15 	bl	8008da8 <RCC_SetFlashLatencyFromMSIRange>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e343      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008388:	f000 fc4a 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 800838c:	4602      	mov	r2, r0
 800838e:	4b52      	ldr	r3, [pc, #328]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	091b      	lsrs	r3, r3, #4
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	4950      	ldr	r1, [pc, #320]	; (80084dc <HAL_RCC_OscConfig+0x274>)
 800839a:	5ccb      	ldrb	r3, [r1, r3]
 800839c:	f003 031f 	and.w	r3, r3, #31
 80083a0:	fa22 f303 	lsr.w	r3, r2, r3
 80083a4:	4a4e      	ldr	r2, [pc, #312]	; (80084e0 <HAL_RCC_OscConfig+0x278>)
 80083a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80083a8:	4b4e      	ldr	r3, [pc, #312]	; (80084e4 <HAL_RCC_OscConfig+0x27c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7fd fa85 	bl	80058bc <HAL_InitTick>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d052      	beq.n	8008462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80083bc:	7bfb      	ldrb	r3, [r7, #15]
 80083be:	e327      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d032      	beq.n	800842e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80083c8:	4b43      	ldr	r3, [pc, #268]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a42      	ldr	r2, [pc, #264]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80083d4:	f7fd fac2 	bl	800595c <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083dc:	f7fd fabe 	bl	800595c <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e310      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80083ee:	4b3a      	ldr	r3, [pc, #232]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0302 	and.w	r3, r3, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f0      	beq.n	80083dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083fa:	4b37      	ldr	r3, [pc, #220]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a36      	ldr	r2, [pc, #216]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008400:	f043 0308 	orr.w	r3, r3, #8
 8008404:	6013      	str	r3, [r2, #0]
 8008406:	4b34      	ldr	r3, [pc, #208]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	4931      	ldr	r1, [pc, #196]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008414:	4313      	orrs	r3, r2
 8008416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008418:	4b2f      	ldr	r3, [pc, #188]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	492c      	ldr	r1, [pc, #176]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008428:	4313      	orrs	r3, r2
 800842a:	604b      	str	r3, [r1, #4]
 800842c:	e01a      	b.n	8008464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800842e:	4b2a      	ldr	r3, [pc, #168]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a29      	ldr	r2, [pc, #164]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800843a:	f7fd fa8f 	bl	800595c <HAL_GetTick>
 800843e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008440:	e008      	b.n	8008454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008442:	f7fd fa8b 	bl	800595c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d901      	bls.n	8008454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e2dd      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008454:	4b20      	ldr	r3, [pc, #128]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0302 	and.w	r3, r3, #2
 800845c:	2b00      	cmp	r3, #0
 800845e:	d1f0      	bne.n	8008442 <HAL_RCC_OscConfig+0x1da>
 8008460:	e000      	b.n	8008464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d074      	beq.n	800855a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	2b08      	cmp	r3, #8
 8008474:	d005      	beq.n	8008482 <HAL_RCC_OscConfig+0x21a>
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	2b0c      	cmp	r3, #12
 800847a:	d10e      	bne.n	800849a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b03      	cmp	r3, #3
 8008480:	d10b      	bne.n	800849a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008482:	4b15      	ldr	r3, [pc, #84]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d064      	beq.n	8008558 <HAL_RCC_OscConfig+0x2f0>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d160      	bne.n	8008558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e2ba      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084a2:	d106      	bne.n	80084b2 <HAL_RCC_OscConfig+0x24a>
 80084a4:	4b0c      	ldr	r3, [pc, #48]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a0b      	ldr	r2, [pc, #44]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80084aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	e026      	b.n	8008500 <HAL_RCC_OscConfig+0x298>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084ba:	d115      	bne.n	80084e8 <HAL_RCC_OscConfig+0x280>
 80084bc:	4b06      	ldr	r3, [pc, #24]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a05      	ldr	r2, [pc, #20]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80084c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a02      	ldr	r2, [pc, #8]	; (80084d8 <HAL_RCC_OscConfig+0x270>)
 80084ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e014      	b.n	8008500 <HAL_RCC_OscConfig+0x298>
 80084d6:	bf00      	nop
 80084d8:	40021000 	.word	0x40021000
 80084dc:	080116dc 	.word	0x080116dc
 80084e0:	20000000 	.word	0x20000000
 80084e4:	20000004 	.word	0x20000004
 80084e8:	4ba0      	ldr	r3, [pc, #640]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a9f      	ldr	r2, [pc, #636]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80084ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4b9d      	ldr	r3, [pc, #628]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a9c      	ldr	r2, [pc, #624]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80084fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d013      	beq.n	8008530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008508:	f7fd fa28 	bl	800595c <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008510:	f7fd fa24 	bl	800595c <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b64      	cmp	r3, #100	; 0x64
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e276      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008522:	4b92      	ldr	r3, [pc, #584]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f0      	beq.n	8008510 <HAL_RCC_OscConfig+0x2a8>
 800852e:	e014      	b.n	800855a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008530:	f7fd fa14 	bl	800595c <HAL_GetTick>
 8008534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008536:	e008      	b.n	800854a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008538:	f7fd fa10 	bl	800595c <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	2b64      	cmp	r3, #100	; 0x64
 8008544:	d901      	bls.n	800854a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e262      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800854a:	4b88      	ldr	r3, [pc, #544]	; (800876c <HAL_RCC_OscConfig+0x504>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008552:	2b00      	cmp	r3, #0
 8008554:	d1f0      	bne.n	8008538 <HAL_RCC_OscConfig+0x2d0>
 8008556:	e000      	b.n	800855a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d060      	beq.n	8008628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b04      	cmp	r3, #4
 800856a:	d005      	beq.n	8008578 <HAL_RCC_OscConfig+0x310>
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	2b0c      	cmp	r3, #12
 8008570:	d119      	bne.n	80085a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d116      	bne.n	80085a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008578:	4b7c      	ldr	r3, [pc, #496]	; (800876c <HAL_RCC_OscConfig+0x504>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_RCC_OscConfig+0x328>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e23f      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008590:	4b76      	ldr	r3, [pc, #472]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	061b      	lsls	r3, r3, #24
 800859e:	4973      	ldr	r1, [pc, #460]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085a4:	e040      	b.n	8008628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d023      	beq.n	80085f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085ae:	4b6f      	ldr	r3, [pc, #444]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a6e      	ldr	r2, [pc, #440]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ba:	f7fd f9cf 	bl	800595c <HAL_GetTick>
 80085be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085c0:	e008      	b.n	80085d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085c2:	f7fd f9cb 	bl	800595c <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e21d      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085d4:	4b65      	ldr	r3, [pc, #404]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0f0      	beq.n	80085c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e0:	4b62      	ldr	r3, [pc, #392]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	061b      	lsls	r3, r3, #24
 80085ee:	495f      	ldr	r1, [pc, #380]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	604b      	str	r3, [r1, #4]
 80085f4:	e018      	b.n	8008628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085f6:	4b5d      	ldr	r3, [pc, #372]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a5c      	ldr	r2, [pc, #368]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80085fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008602:	f7fd f9ab 	bl	800595c <HAL_GetTick>
 8008606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008608:	e008      	b.n	800861c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800860a:	f7fd f9a7 	bl	800595c <HAL_GetTick>
 800860e:	4602      	mov	r2, r0
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	2b02      	cmp	r3, #2
 8008616:	d901      	bls.n	800861c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	e1f9      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800861c:	4b53      	ldr	r3, [pc, #332]	; (800876c <HAL_RCC_OscConfig+0x504>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1f0      	bne.n	800860a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b00      	cmp	r3, #0
 8008632:	d03c      	beq.n	80086ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d01c      	beq.n	8008676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800863c:	4b4b      	ldr	r3, [pc, #300]	; (800876c <HAL_RCC_OscConfig+0x504>)
 800863e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008642:	4a4a      	ldr	r2, [pc, #296]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008644:	f043 0301 	orr.w	r3, r3, #1
 8008648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864c:	f7fd f986 	bl	800595c <HAL_GetTick>
 8008650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008652:	e008      	b.n	8008666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008654:	f7fd f982 	bl	800595c <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b02      	cmp	r3, #2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e1d4      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008666:	4b41      	ldr	r3, [pc, #260]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d0ef      	beq.n	8008654 <HAL_RCC_OscConfig+0x3ec>
 8008674:	e01b      	b.n	80086ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008676:	4b3d      	ldr	r3, [pc, #244]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800867c:	4a3b      	ldr	r2, [pc, #236]	; (800876c <HAL_RCC_OscConfig+0x504>)
 800867e:	f023 0301 	bic.w	r3, r3, #1
 8008682:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008686:	f7fd f969 	bl	800595c <HAL_GetTick>
 800868a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800868c:	e008      	b.n	80086a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800868e:	f7fd f965 	bl	800595c <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	2b02      	cmp	r3, #2
 800869a:	d901      	bls.n	80086a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e1b7      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086a0:	4b32      	ldr	r3, [pc, #200]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80086a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086a6:	f003 0302 	and.w	r3, r3, #2
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1ef      	bne.n	800868e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0304 	and.w	r3, r3, #4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 80a6 	beq.w	8008808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086bc:	2300      	movs	r3, #0
 80086be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80086c0:	4b2a      	ldr	r3, [pc, #168]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80086c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10d      	bne.n	80086e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086cc:	4b27      	ldr	r3, [pc, #156]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80086ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d0:	4a26      	ldr	r2, [pc, #152]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80086d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d6:	6593      	str	r3, [r2, #88]	; 0x58
 80086d8:	4b24      	ldr	r3, [pc, #144]	; (800876c <HAL_RCC_OscConfig+0x504>)
 80086da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086e4:	2301      	movs	r3, #1
 80086e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086e8:	4b21      	ldr	r3, [pc, #132]	; (8008770 <HAL_RCC_OscConfig+0x508>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d118      	bne.n	8008726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086f4:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <HAL_RCC_OscConfig+0x508>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1d      	ldr	r2, [pc, #116]	; (8008770 <HAL_RCC_OscConfig+0x508>)
 80086fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008700:	f7fd f92c 	bl	800595c <HAL_GetTick>
 8008704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008706:	e008      	b.n	800871a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008708:	f7fd f928 	bl	800595c <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d901      	bls.n	800871a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e17a      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800871a:	4b15      	ldr	r3, [pc, #84]	; (8008770 <HAL_RCC_OscConfig+0x508>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0f0      	beq.n	8008708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d108      	bne.n	8008740 <HAL_RCC_OscConfig+0x4d8>
 800872e:	4b0f      	ldr	r3, [pc, #60]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008734:	4a0d      	ldr	r2, [pc, #52]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800873e:	e029      	b.n	8008794 <HAL_RCC_OscConfig+0x52c>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	2b05      	cmp	r3, #5
 8008746:	d115      	bne.n	8008774 <HAL_RCC_OscConfig+0x50c>
 8008748:	4b08      	ldr	r3, [pc, #32]	; (800876c <HAL_RCC_OscConfig+0x504>)
 800874a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874e:	4a07      	ldr	r2, [pc, #28]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008750:	f043 0304 	orr.w	r3, r3, #4
 8008754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <HAL_RCC_OscConfig+0x504>)
 800875a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875e:	4a03      	ldr	r2, [pc, #12]	; (800876c <HAL_RCC_OscConfig+0x504>)
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008768:	e014      	b.n	8008794 <HAL_RCC_OscConfig+0x52c>
 800876a:	bf00      	nop
 800876c:	40021000 	.word	0x40021000
 8008770:	40007000 	.word	0x40007000
 8008774:	4b9c      	ldr	r3, [pc, #624]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800877a:	4a9b      	ldr	r2, [pc, #620]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800877c:	f023 0301 	bic.w	r3, r3, #1
 8008780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008784:	4b98      	ldr	r3, [pc, #608]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878a:	4a97      	ldr	r2, [pc, #604]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800878c:	f023 0304 	bic.w	r3, r3, #4
 8008790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d016      	beq.n	80087ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800879c:	f7fd f8de 	bl	800595c <HAL_GetTick>
 80087a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087a2:	e00a      	b.n	80087ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087a4:	f7fd f8da 	bl	800595c <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e12a      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087ba:	4b8b      	ldr	r3, [pc, #556]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80087bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d0ed      	beq.n	80087a4 <HAL_RCC_OscConfig+0x53c>
 80087c8:	e015      	b.n	80087f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ca:	f7fd f8c7 	bl	800595c <HAL_GetTick>
 80087ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087d0:	e00a      	b.n	80087e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087d2:	f7fd f8c3 	bl	800595c <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d901      	bls.n	80087e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e113      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087e8:	4b7f      	ldr	r3, [pc, #508]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80087ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1ed      	bne.n	80087d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087f6:	7ffb      	ldrb	r3, [r7, #31]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d105      	bne.n	8008808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087fc:	4b7a      	ldr	r3, [pc, #488]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80087fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008800:	4a79      	ldr	r2, [pc, #484]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008806:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80fe 	beq.w	8008a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	2b02      	cmp	r3, #2
 8008818:	f040 80d0 	bne.w	80089bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800881c:	4b72      	ldr	r3, [pc, #456]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	f003 0203 	and.w	r2, r3, #3
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	429a      	cmp	r2, r3
 800882e:	d130      	bne.n	8008892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883a:	3b01      	subs	r3, #1
 800883c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800883e:	429a      	cmp	r2, r3
 8008840:	d127      	bne.n	8008892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800884e:	429a      	cmp	r2, r3
 8008850:	d11f      	bne.n	8008892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800885c:	2a07      	cmp	r2, #7
 800885e:	bf14      	ite	ne
 8008860:	2201      	movne	r2, #1
 8008862:	2200      	moveq	r2, #0
 8008864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008866:	4293      	cmp	r3, r2
 8008868:	d113      	bne.n	8008892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008874:	085b      	lsrs	r3, r3, #1
 8008876:	3b01      	subs	r3, #1
 8008878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800887a:	429a      	cmp	r2, r3
 800887c:	d109      	bne.n	8008892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008888:	085b      	lsrs	r3, r3, #1
 800888a:	3b01      	subs	r3, #1
 800888c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800888e:	429a      	cmp	r2, r3
 8008890:	d06e      	beq.n	8008970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b0c      	cmp	r3, #12
 8008896:	d069      	beq.n	800896c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008898:	4b53      	ldr	r3, [pc, #332]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80088a4:	4b50      	ldr	r3, [pc, #320]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e0ad      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80088b4:	4b4c      	ldr	r3, [pc, #304]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a4b      	ldr	r2, [pc, #300]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80088ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80088c0:	f7fd f84c 	bl	800595c <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088c8:	f7fd f848 	bl	800595c <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e09a      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088da:	4b43      	ldr	r3, [pc, #268]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1f0      	bne.n	80088c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088e6:	4b40      	ldr	r3, [pc, #256]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	4b40      	ldr	r3, [pc, #256]	; (80089ec <HAL_RCC_OscConfig+0x784>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80088f6:	3a01      	subs	r2, #1
 80088f8:	0112      	lsls	r2, r2, #4
 80088fa:	4311      	orrs	r1, r2
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008900:	0212      	lsls	r2, r2, #8
 8008902:	4311      	orrs	r1, r2
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008908:	0852      	lsrs	r2, r2, #1
 800890a:	3a01      	subs	r2, #1
 800890c:	0552      	lsls	r2, r2, #21
 800890e:	4311      	orrs	r1, r2
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008914:	0852      	lsrs	r2, r2, #1
 8008916:	3a01      	subs	r2, #1
 8008918:	0652      	lsls	r2, r2, #25
 800891a:	4311      	orrs	r1, r2
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008920:	0912      	lsrs	r2, r2, #4
 8008922:	0452      	lsls	r2, r2, #17
 8008924:	430a      	orrs	r2, r1
 8008926:	4930      	ldr	r1, [pc, #192]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008928:	4313      	orrs	r3, r2
 800892a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800892c:	4b2e      	ldr	r3, [pc, #184]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a2d      	ldr	r2, [pc, #180]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008938:	4b2b      	ldr	r3, [pc, #172]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800893e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008944:	f7fd f80a 	bl	800595c <HAL_GetTick>
 8008948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800894a:	e008      	b.n	800895e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800894c:	f7fd f806 	bl	800595c <HAL_GetTick>
 8008950:	4602      	mov	r2, r0
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	2b02      	cmp	r3, #2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e058      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800895e:	4b22      	ldr	r3, [pc, #136]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0f0      	beq.n	800894c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800896a:	e050      	b.n	8008a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e04f      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008970:	4b1d      	ldr	r3, [pc, #116]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d148      	bne.n	8008a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800897c:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a19      	ldr	r2, [pc, #100]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 8008982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008988:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	4a16      	ldr	r2, [pc, #88]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 800898e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008994:	f7fc ffe2 	bl	800595c <HAL_GetTick>
 8008998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800899c:	f7fc ffde 	bl	800595c <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e030      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089ae:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0f0      	beq.n	800899c <HAL_RCC_OscConfig+0x734>
 80089ba:	e028      	b.n	8008a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	2b0c      	cmp	r3, #12
 80089c0:	d023      	beq.n	8008a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089c2:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <HAL_RCC_OscConfig+0x780>)
 80089c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089ce:	f7fc ffc5 	bl	800595c <HAL_GetTick>
 80089d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089d4:	e00c      	b.n	80089f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089d6:	f7fc ffc1 	bl	800595c <HAL_GetTick>
 80089da:	4602      	mov	r2, r0
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d905      	bls.n	80089f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e013      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
 80089e8:	40021000 	.word	0x40021000
 80089ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089f0:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <HAL_RCC_OscConfig+0x7b0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1ec      	bne.n	80089d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <HAL_RCC_OscConfig+0x7b0>)
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	4905      	ldr	r1, [pc, #20]	; (8008a18 <HAL_RCC_OscConfig+0x7b0>)
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <HAL_RCC_OscConfig+0x7b4>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	60cb      	str	r3, [r1, #12]
 8008a08:	e001      	b.n	8008a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e000      	b.n	8008a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3720      	adds	r7, #32
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	40021000 	.word	0x40021000
 8008a1c:	feeefffc 	.word	0xfeeefffc

08008a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e0e7      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a34:	4b75      	ldr	r3, [pc, #468]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d910      	bls.n	8008a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a42:	4b72      	ldr	r3, [pc, #456]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f023 0207 	bic.w	r2, r3, #7
 8008a4a:	4970      	ldr	r1, [pc, #448]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a52:	4b6e      	ldr	r3, [pc, #440]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d001      	beq.n	8008a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e0cf      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0302 	and.w	r3, r3, #2
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d010      	beq.n	8008a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	4b66      	ldr	r3, [pc, #408]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d908      	bls.n	8008a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a80:	4b63      	ldr	r3, [pc, #396]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	4960      	ldr	r1, [pc, #384]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d04c      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	2b03      	cmp	r3, #3
 8008aa4:	d107      	bne.n	8008ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008aa6:	4b5a      	ldr	r3, [pc, #360]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d121      	bne.n	8008af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e0a6      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d107      	bne.n	8008ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008abe:	4b54      	ldr	r3, [pc, #336]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d115      	bne.n	8008af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e09a      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d107      	bne.n	8008ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ad6:	4b4e      	ldr	r3, [pc, #312]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d109      	bne.n	8008af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e08e      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008ae6:	4b4a      	ldr	r3, [pc, #296]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e086      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008af6:	4b46      	ldr	r3, [pc, #280]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f023 0203 	bic.w	r2, r3, #3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4943      	ldr	r1, [pc, #268]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b08:	f7fc ff28 	bl	800595c <HAL_GetTick>
 8008b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b0e:	e00a      	b.n	8008b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b10:	f7fc ff24 	bl	800595c <HAL_GetTick>
 8008b14:	4602      	mov	r2, r0
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	1ad3      	subs	r3, r2, r3
 8008b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d901      	bls.n	8008b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e06e      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b26:	4b3a      	ldr	r3, [pc, #232]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 020c 	and.w	r2, r3, #12
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d1eb      	bne.n	8008b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d010      	beq.n	8008b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d208      	bcs.n	8008b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b54:	4b2e      	ldr	r3, [pc, #184]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	492b      	ldr	r1, [pc, #172]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b66:	4b29      	ldr	r3, [pc, #164]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d210      	bcs.n	8008b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b74:	4b25      	ldr	r3, [pc, #148]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f023 0207 	bic.w	r2, r3, #7
 8008b7c:	4923      	ldr	r1, [pc, #140]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b84:	4b21      	ldr	r3, [pc, #132]	; (8008c0c <HAL_RCC_ClockConfig+0x1ec>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0307 	and.w	r3, r3, #7
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d001      	beq.n	8008b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e036      	b.n	8008c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0304 	and.w	r3, r3, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d008      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	4918      	ldr	r1, [pc, #96]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d009      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bc0:	4b13      	ldr	r3, [pc, #76]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	4910      	ldr	r1, [pc, #64]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008bd4:	f000 f824 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	4b0d      	ldr	r3, [pc, #52]	; (8008c10 <HAL_RCC_ClockConfig+0x1f0>)
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	091b      	lsrs	r3, r3, #4
 8008be0:	f003 030f 	and.w	r3, r3, #15
 8008be4:	490b      	ldr	r1, [pc, #44]	; (8008c14 <HAL_RCC_ClockConfig+0x1f4>)
 8008be6:	5ccb      	ldrb	r3, [r1, r3]
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf0:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <HAL_RCC_ClockConfig+0x1f8>)
 8008bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008bf4:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <HAL_RCC_ClockConfig+0x1fc>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fc fe5f 	bl	80058bc <HAL_InitTick>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8008c02:	7afb      	ldrb	r3, [r7, #11]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	40022000 	.word	0x40022000
 8008c10:	40021000 	.word	0x40021000
 8008c14:	080116dc 	.word	0x080116dc
 8008c18:	20000000 	.word	0x20000000
 8008c1c:	20000004 	.word	0x20000004

08008c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b089      	sub	sp, #36	; 0x24
 8008c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008c26:	2300      	movs	r3, #0
 8008c28:	61fb      	str	r3, [r7, #28]
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c2e:	4b3e      	ldr	r3, [pc, #248]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
 8008c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c38:	4b3b      	ldr	r3, [pc, #236]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f003 0303 	and.w	r3, r3, #3
 8008c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d005      	beq.n	8008c54 <HAL_RCC_GetSysClockFreq+0x34>
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	2b0c      	cmp	r3, #12
 8008c4c:	d121      	bne.n	8008c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d11e      	bne.n	8008c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008c54:	4b34      	ldr	r3, [pc, #208]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d107      	bne.n	8008c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008c60:	4b31      	ldr	r3, [pc, #196]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c66:	0a1b      	lsrs	r3, r3, #8
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	61fb      	str	r3, [r7, #28]
 8008c6e:	e005      	b.n	8008c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008c70:	4b2d      	ldr	r3, [pc, #180]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	091b      	lsrs	r3, r3, #4
 8008c76:	f003 030f 	and.w	r3, r3, #15
 8008c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008c7c:	4a2b      	ldr	r2, [pc, #172]	; (8008d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10d      	bne.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008c90:	e00a      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b04      	cmp	r3, #4
 8008c96:	d102      	bne.n	8008c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c98:	4b25      	ldr	r3, [pc, #148]	; (8008d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8008c9a:	61bb      	str	r3, [r7, #24]
 8008c9c:	e004      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d101      	bne.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ca4:	4b23      	ldr	r3, [pc, #140]	; (8008d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8008ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	2b0c      	cmp	r3, #12
 8008cac:	d134      	bne.n	8008d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008cae:	4b1e      	ldr	r3, [pc, #120]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d003      	beq.n	8008cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d003      	beq.n	8008ccc <HAL_RCC_GetSysClockFreq+0xac>
 8008cc4:	e005      	b.n	8008cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008cc6:	4b1a      	ldr	r3, [pc, #104]	; (8008d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8008cc8:	617b      	str	r3, [r7, #20]
      break;
 8008cca:	e005      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008ccc:	4b19      	ldr	r3, [pc, #100]	; (8008d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8008cce:	617b      	str	r3, [r7, #20]
      break;
 8008cd0:	e002      	b.n	8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	617b      	str	r3, [r7, #20]
      break;
 8008cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	091b      	lsrs	r3, r3, #4
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	0a1b      	lsrs	r3, r3, #8
 8008cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	fb03 f202 	mul.w	r2, r3, r2
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008cfe:	4b0a      	ldr	r3, [pc, #40]	; (8008d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	0e5b      	lsrs	r3, r3, #25
 8008d04:	f003 0303 	and.w	r3, r3, #3
 8008d08:	3301      	adds	r3, #1
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008d18:	69bb      	ldr	r3, [r7, #24]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3724      	adds	r7, #36	; 0x24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	40021000 	.word	0x40021000
 8008d2c:	080116f4 	.word	0x080116f4
 8008d30:	00f42400 	.word	0x00f42400
 8008d34:	007a1200 	.word	0x007a1200

08008d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	20000000 	.word	0x20000000

08008d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008d54:	f7ff fff0 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	0a1b      	lsrs	r3, r3, #8
 8008d60:	f003 0307 	and.w	r3, r3, #7
 8008d64:	4904      	ldr	r1, [pc, #16]	; (8008d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d66:	5ccb      	ldrb	r3, [r1, r3]
 8008d68:	f003 031f 	and.w	r3, r3, #31
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40021000 	.word	0x40021000
 8008d78:	080116ec 	.word	0x080116ec

08008d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008d80:	f7ff ffda 	bl	8008d38 <HAL_RCC_GetHCLKFreq>
 8008d84:	4602      	mov	r2, r0
 8008d86:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	0adb      	lsrs	r3, r3, #11
 8008d8c:	f003 0307 	and.w	r3, r3, #7
 8008d90:	4904      	ldr	r1, [pc, #16]	; (8008da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d92:	5ccb      	ldrb	r3, [r1, r3]
 8008d94:	f003 031f 	and.w	r3, r3, #31
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40021000 	.word	0x40021000
 8008da4:	080116ec 	.word	0x080116ec

08008da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8008db0:	2300      	movs	r3, #0
 8008db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008db4:	4b2a      	ldr	r3, [pc, #168]	; (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d003      	beq.n	8008dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008dc0:	f7ff f9ee 	bl	80081a0 <HAL_PWREx_GetVoltageRange>
 8008dc4:	6178      	str	r0, [r7, #20]
 8008dc6:	e014      	b.n	8008df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008dc8:	4b25      	ldr	r3, [pc, #148]	; (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dcc:	4a24      	ldr	r2, [pc, #144]	; (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8008dd4:	4b22      	ldr	r3, [pc, #136]	; (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ddc:	60fb      	str	r3, [r7, #12]
 8008dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008de0:	f7ff f9de 	bl	80081a0 <HAL_PWREx_GetVoltageRange>
 8008de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008de6:	4b1e      	ldr	r3, [pc, #120]	; (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dea:	4a1d      	ldr	r2, [pc, #116]	; (8008e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008df0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008df8:	d10b      	bne.n	8008e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b80      	cmp	r3, #128	; 0x80
 8008dfe:	d919      	bls.n	8008e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2ba0      	cmp	r3, #160	; 0xa0
 8008e04:	d902      	bls.n	8008e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008e06:	2302      	movs	r3, #2
 8008e08:	613b      	str	r3, [r7, #16]
 8008e0a:	e013      	b.n	8008e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	e010      	b.n	8008e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b80      	cmp	r3, #128	; 0x80
 8008e16:	d902      	bls.n	8008e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008e18:	2303      	movs	r3, #3
 8008e1a:	613b      	str	r3, [r7, #16]
 8008e1c:	e00a      	b.n	8008e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b80      	cmp	r3, #128	; 0x80
 8008e22:	d102      	bne.n	8008e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008e24:	2302      	movs	r3, #2
 8008e26:	613b      	str	r3, [r7, #16]
 8008e28:	e004      	b.n	8008e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b70      	cmp	r3, #112	; 0x70
 8008e2e:	d101      	bne.n	8008e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008e30:	2301      	movs	r3, #1
 8008e32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008e34:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f023 0207 	bic.w	r2, r3, #7
 8008e3c:	4909      	ldr	r1, [pc, #36]	; (8008e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008e44:	4b07      	ldr	r3, [pc, #28]	; (8008e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0307 	and.w	r3, r3, #7
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d001      	beq.n	8008e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e000      	b.n	8008e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	40021000 	.word	0x40021000
 8008e64:	40022000 	.word	0x40022000

08008e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e70:	2300      	movs	r3, #0
 8008e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e74:	2300      	movs	r3, #0
 8008e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d041      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e8c:	d02a      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008e8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008e92:	d824      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008e94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e98:	d008      	beq.n	8008eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e9e:	d81e      	bhi.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d00a      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ea8:	d010      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008eaa:	e018      	b.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008eac:	4b86      	ldr	r3, [pc, #536]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	4a85      	ldr	r2, [pc, #532]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008eb8:	e015      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fabb 	bl	800943c <RCCEx_PLLSAI1_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008eca:	e00c      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3320      	adds	r3, #32
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 fba6 	bl	8009624 <RCCEx_PLLSAI2_Config>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008edc:	e003      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8008ee2:	e000      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ee6:	7cfb      	ldrb	r3, [r7, #19]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10b      	bne.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008eec:	4b76      	ldr	r3, [pc, #472]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008efa:	4973      	ldr	r1, [pc, #460]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008f02:	e001      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f04:	7cfb      	ldrb	r3, [r7, #19]
 8008f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d041      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f1c:	d02a      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008f1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f22:	d824      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f28:	d008      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f2e:	d81e      	bhi.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f38:	d010      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008f3a:	e018      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008f3c:	4b62      	ldr	r3, [pc, #392]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	4a61      	ldr	r2, [pc, #388]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008f48:	e015      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	2100      	movs	r1, #0
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fa73 	bl	800943c <RCCEx_PLLSAI1_Config>
 8008f56:	4603      	mov	r3, r0
 8008f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008f5a:	e00c      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3320      	adds	r3, #32
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f000 fb5e 	bl	8009624 <RCCEx_PLLSAI2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008f6c:	e003      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	74fb      	strb	r3, [r7, #19]
      break;
 8008f72:	e000      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f76:	7cfb      	ldrb	r3, [r7, #19]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d10b      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f7c:	4b52      	ldr	r3, [pc, #328]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f8a:	494f      	ldr	r1, [pc, #316]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008f92:	e001      	b.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	7cfb      	ldrb	r3, [r7, #19]
 8008f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 80a0 	beq.w	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008faa:	4b47      	ldr	r3, [pc, #284]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d101      	bne.n	8008fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00d      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fc0:	4b41      	ldr	r3, [pc, #260]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc4:	4a40      	ldr	r2, [pc, #256]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fca:	6593      	str	r3, [r2, #88]	; 0x58
 8008fcc:	4b3e      	ldr	r3, [pc, #248]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fdc:	4b3b      	ldr	r3, [pc, #236]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a3a      	ldr	r2, [pc, #232]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fe8:	f7fc fcb8 	bl	800595c <HAL_GetTick>
 8008fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008fee:	e009      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ff0:	f7fc fcb4 	bl	800595c <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d902      	bls.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008ffe:	2303      	movs	r3, #3
 8009000:	74fb      	strb	r3, [r7, #19]
        break;
 8009002:	e005      	b.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009004:	4b31      	ldr	r3, [pc, #196]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0ef      	beq.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8009010:	7cfb      	ldrb	r3, [r7, #19]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d15c      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009016:	4b2c      	ldr	r3, [pc, #176]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d01f      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	429a      	cmp	r2, r3
 8009032:	d019      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009034:	4b24      	ldr	r3, [pc, #144]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800903a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800903e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009040:	4b21      	ldr	r3, [pc, #132]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009046:	4a20      	ldr	r2, [pc, #128]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800904c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009050:	4b1d      	ldr	r3, [pc, #116]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009056:	4a1c      	ldr	r2, [pc, #112]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800905c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009060:	4a19      	ldr	r2, [pc, #100]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d016      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009072:	f7fc fc73 	bl	800595c <HAL_GetTick>
 8009076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009078:	e00b      	b.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800907a:	f7fc fc6f 	bl	800595c <HAL_GetTick>
 800907e:	4602      	mov	r2, r0
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	f241 3288 	movw	r2, #5000	; 0x1388
 8009088:	4293      	cmp	r3, r2
 800908a:	d902      	bls.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800908c:	2303      	movs	r3, #3
 800908e:	74fb      	strb	r3, [r7, #19]
            break;
 8009090:	e006      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009092:	4b0d      	ldr	r3, [pc, #52]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0ec      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80090a0:	7cfb      	ldrb	r3, [r7, #19]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10c      	bne.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090a6:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b6:	4904      	ldr	r1, [pc, #16]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80090be:	e009      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090c0:	7cfb      	ldrb	r3, [r7, #19]
 80090c2:	74bb      	strb	r3, [r7, #18]
 80090c4:	e006      	b.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80090c6:	bf00      	nop
 80090c8:	40021000 	.word	0x40021000
 80090cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d0:	7cfb      	ldrb	r3, [r7, #19]
 80090d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090d4:	7c7b      	ldrb	r3, [r7, #17]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d105      	bne.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090da:	4b9e      	ldr	r3, [pc, #632]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090de:	4a9d      	ldr	r2, [pc, #628]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090f2:	4b98      	ldr	r3, [pc, #608]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80090f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f8:	f023 0203 	bic.w	r2, r3, #3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009100:	4994      	ldr	r1, [pc, #592]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009102:	4313      	orrs	r3, r2
 8009104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0302 	and.w	r3, r3, #2
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00a      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009114:	4b8f      	ldr	r3, [pc, #572]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800911a:	f023 020c 	bic.w	r2, r3, #12
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009122:	498c      	ldr	r1, [pc, #560]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009124:	4313      	orrs	r3, r2
 8009126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0304 	and.w	r3, r3, #4
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00a      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009136:	4b87      	ldr	r3, [pc, #540]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009144:	4983      	ldr	r1, [pc, #524]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009146:	4313      	orrs	r3, r2
 8009148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0308 	and.w	r3, r3, #8
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00a      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009158:	4b7e      	ldr	r3, [pc, #504]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800915a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009166:	497b      	ldr	r1, [pc, #492]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009168:	4313      	orrs	r3, r2
 800916a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0310 	and.w	r3, r3, #16
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800917a:	4b76      	ldr	r3, [pc, #472]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800917c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009188:	4972      	ldr	r1, [pc, #456]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800918a:	4313      	orrs	r3, r2
 800918c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0320 	and.w	r3, r3, #32
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00a      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800919c:	4b6d      	ldr	r3, [pc, #436]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800919e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	496a      	ldr	r1, [pc, #424]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80091be:	4b65      	ldr	r3, [pc, #404]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091cc:	4961      	ldr	r1, [pc, #388]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00a      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091e0:	4b5c      	ldr	r3, [pc, #368]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ee:	4959      	ldr	r1, [pc, #356]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009202:	4b54      	ldr	r3, [pc, #336]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009210:	4950      	ldr	r1, [pc, #320]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009212:	4313      	orrs	r3, r2
 8009214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00a      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009224:	4b4b      	ldr	r3, [pc, #300]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800922a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009232:	4948      	ldr	r1, [pc, #288]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009234:	4313      	orrs	r3, r2
 8009236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009246:	4b43      	ldr	r3, [pc, #268]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800924c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009254:	493f      	ldr	r1, [pc, #252]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009256:	4313      	orrs	r3, r2
 8009258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009264:	2b00      	cmp	r3, #0
 8009266:	d028      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009268:	4b3a      	ldr	r3, [pc, #232]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800926a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009276:	4937      	ldr	r1, [pc, #220]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009278:	4313      	orrs	r3, r2
 800927a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009286:	d106      	bne.n	8009296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009288:	4b32      	ldr	r3, [pc, #200]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	4a31      	ldr	r2, [pc, #196]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800928e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009292:	60d3      	str	r3, [r2, #12]
 8009294:	e011      	b.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800929a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800929e:	d10c      	bne.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3304      	adds	r3, #4
 80092a4:	2101      	movs	r1, #1
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f8c8 	bl	800943c <RCCEx_PLLSAI1_Config>
 80092ac:	4603      	mov	r3, r0
 80092ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80092b0:	7cfb      	ldrb	r3, [r7, #19]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80092b6:	7cfb      	ldrb	r3, [r7, #19]
 80092b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d028      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80092c6:	4b23      	ldr	r3, [pc, #140]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d4:	491f      	ldr	r1, [pc, #124]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092d6:	4313      	orrs	r3, r2
 80092d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092e4:	d106      	bne.n	80092f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092e6:	4b1b      	ldr	r3, [pc, #108]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	4a1a      	ldr	r2, [pc, #104]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80092ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092f0:	60d3      	str	r3, [r2, #12]
 80092f2:	e011      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092fc:	d10c      	bne.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	3304      	adds	r3, #4
 8009302:	2101      	movs	r1, #1
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f899 	bl	800943c <RCCEx_PLLSAI1_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800930e:	7cfb      	ldrb	r3, [r7, #19]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d001      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009314:	7cfb      	ldrb	r3, [r7, #19]
 8009316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d02b      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009324:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009332:	4908      	ldr	r1, [pc, #32]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009334:	4313      	orrs	r3, r2
 8009336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800933e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009342:	d109      	bne.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009344:	4b03      	ldr	r3, [pc, #12]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	4a02      	ldr	r2, [pc, #8]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800934a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800934e:	60d3      	str	r3, [r2, #12]
 8009350:	e014      	b.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8009352:	bf00      	nop
 8009354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800935c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009360:	d10c      	bne.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	3304      	adds	r3, #4
 8009366:	2101      	movs	r1, #1
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f867 	bl	800943c <RCCEx_PLLSAI1_Config>
 800936e:	4603      	mov	r3, r0
 8009370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009372:	7cfb      	ldrb	r3, [r7, #19]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009378:	7cfb      	ldrb	r3, [r7, #19]
 800937a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d02f      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009388:	4b2b      	ldr	r3, [pc, #172]	; (8009438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800938a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800938e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009396:	4928      	ldr	r1, [pc, #160]	; (8009438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009398:	4313      	orrs	r3, r2
 800939a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093a6:	d10d      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3304      	adds	r3, #4
 80093ac:	2102      	movs	r1, #2
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f844 	bl	800943c <RCCEx_PLLSAI1_Config>
 80093b4:	4603      	mov	r3, r0
 80093b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093b8:	7cfb      	ldrb	r3, [r7, #19]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d014      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80093be:	7cfb      	ldrb	r3, [r7, #19]
 80093c0:	74bb      	strb	r3, [r7, #18]
 80093c2:	e011      	b.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093cc:	d10c      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3320      	adds	r3, #32
 80093d2:	2102      	movs	r1, #2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f000 f925 	bl	8009624 <RCCEx_PLLSAI2_Config>
 80093da:	4603      	mov	r3, r0
 80093dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80093de:	7cfb      	ldrb	r3, [r7, #19]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80093e4:	7cfb      	ldrb	r3, [r7, #19]
 80093e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093f4:	4b10      	ldr	r3, [pc, #64]	; (8009438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009402:	490d      	ldr	r1, [pc, #52]	; (8009438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009404:	4313      	orrs	r3, r2
 8009406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009416:	4b08      	ldr	r3, [pc, #32]	; (8009438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009426:	4904      	ldr	r1, [pc, #16]	; (8009438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009428:	4313      	orrs	r3, r2
 800942a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800942e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009430:	4618      	mov	r0, r3
 8009432:	3718      	adds	r7, #24
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	40021000 	.word	0x40021000

0800943c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b084      	sub	sp, #16
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800944a:	4b75      	ldr	r3, [pc, #468]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d018      	beq.n	8009488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009456:	4b72      	ldr	r3, [pc, #456]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009458:	68db      	ldr	r3, [r3, #12]
 800945a:	f003 0203 	and.w	r2, r3, #3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	429a      	cmp	r2, r3
 8009464:	d10d      	bne.n	8009482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
       ||
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800946e:	4b6c      	ldr	r3, [pc, #432]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	091b      	lsrs	r3, r3, #4
 8009474:	f003 0307 	and.w	r3, r3, #7
 8009478:	1c5a      	adds	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
       ||
 800947e:	429a      	cmp	r2, r3
 8009480:	d047      	beq.n	8009512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	73fb      	strb	r3, [r7, #15]
 8009486:	e044      	b.n	8009512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	2b03      	cmp	r3, #3
 800948e:	d018      	beq.n	80094c2 <RCCEx_PLLSAI1_Config+0x86>
 8009490:	2b03      	cmp	r3, #3
 8009492:	d825      	bhi.n	80094e0 <RCCEx_PLLSAI1_Config+0xa4>
 8009494:	2b01      	cmp	r3, #1
 8009496:	d002      	beq.n	800949e <RCCEx_PLLSAI1_Config+0x62>
 8009498:	2b02      	cmp	r3, #2
 800949a:	d009      	beq.n	80094b0 <RCCEx_PLLSAI1_Config+0x74>
 800949c:	e020      	b.n	80094e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800949e:	4b60      	ldr	r3, [pc, #384]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11d      	bne.n	80094e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094ae:	e01a      	b.n	80094e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80094b0:	4b5b      	ldr	r3, [pc, #364]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d116      	bne.n	80094ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094c0:	e013      	b.n	80094ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80094c2:	4b57      	ldr	r3, [pc, #348]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10f      	bne.n	80094ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80094ce:	4b54      	ldr	r3, [pc, #336]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80094de:	e006      	b.n	80094ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
      break;
 80094e4:	e004      	b.n	80094f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80094e6:	bf00      	nop
 80094e8:	e002      	b.n	80094f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80094ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80094f6:	4b4a      	ldr	r3, [pc, #296]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6819      	ldr	r1, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	3b01      	subs	r3, #1
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	430b      	orrs	r3, r1
 800950c:	4944      	ldr	r1, [pc, #272]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800950e:	4313      	orrs	r3, r2
 8009510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009512:	7bfb      	ldrb	r3, [r7, #15]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d17d      	bne.n	8009614 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009518:	4b41      	ldr	r3, [pc, #260]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a40      	ldr	r2, [pc, #256]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800951e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009524:	f7fc fa1a 	bl	800595c <HAL_GetTick>
 8009528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800952a:	e009      	b.n	8009540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800952c:	f7fc fa16 	bl	800595c <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d902      	bls.n	8009540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	73fb      	strb	r3, [r7, #15]
        break;
 800953e:	e005      	b.n	800954c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009540:	4b37      	ldr	r3, [pc, #220]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1ef      	bne.n	800952c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d160      	bne.n	8009614 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d111      	bne.n	800957c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009558:	4b31      	ldr	r3, [pc, #196]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	6892      	ldr	r2, [r2, #8]
 8009568:	0211      	lsls	r1, r2, #8
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	68d2      	ldr	r2, [r2, #12]
 800956e:	0912      	lsrs	r2, r2, #4
 8009570:	0452      	lsls	r2, r2, #17
 8009572:	430a      	orrs	r2, r1
 8009574:	492a      	ldr	r1, [pc, #168]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009576:	4313      	orrs	r3, r2
 8009578:	610b      	str	r3, [r1, #16]
 800957a:	e027      	b.n	80095cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d112      	bne.n	80095a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009582:	4b27      	ldr	r3, [pc, #156]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800958a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	6892      	ldr	r2, [r2, #8]
 8009592:	0211      	lsls	r1, r2, #8
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	6912      	ldr	r2, [r2, #16]
 8009598:	0852      	lsrs	r2, r2, #1
 800959a:	3a01      	subs	r2, #1
 800959c:	0552      	lsls	r2, r2, #21
 800959e:	430a      	orrs	r2, r1
 80095a0:	491f      	ldr	r1, [pc, #124]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	610b      	str	r3, [r1, #16]
 80095a6:	e011      	b.n	80095cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80095a8:	4b1d      	ldr	r3, [pc, #116]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80095b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	6892      	ldr	r2, [r2, #8]
 80095b8:	0211      	lsls	r1, r2, #8
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	6952      	ldr	r2, [r2, #20]
 80095be:	0852      	lsrs	r2, r2, #1
 80095c0:	3a01      	subs	r2, #1
 80095c2:	0652      	lsls	r2, r2, #25
 80095c4:	430a      	orrs	r2, r1
 80095c6:	4916      	ldr	r1, [pc, #88]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80095cc:	4b14      	ldr	r3, [pc, #80]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a13      	ldr	r2, [pc, #76]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80095d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095d8:	f7fc f9c0 	bl	800595c <HAL_GetTick>
 80095dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80095de:	e009      	b.n	80095f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80095e0:	f7fc f9bc 	bl	800595c <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d902      	bls.n	80095f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	73fb      	strb	r3, [r7, #15]
          break;
 80095f2:	e005      	b.n	8009600 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d0ef      	beq.n	80095e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009606:	4b06      	ldr	r3, [pc, #24]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	4904      	ldr	r1, [pc, #16]	; (8009620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009610:	4313      	orrs	r3, r2
 8009612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009614:	7bfb      	ldrb	r3, [r7, #15]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40021000 	.word	0x40021000

08009624 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009632:	4b6a      	ldr	r3, [pc, #424]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d018      	beq.n	8009670 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800963e:	4b67      	ldr	r3, [pc, #412]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f003 0203 	and.w	r2, r3, #3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	429a      	cmp	r2, r3
 800964c:	d10d      	bne.n	800966a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
       ||
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009656:	4b61      	ldr	r3, [pc, #388]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	091b      	lsrs	r3, r3, #4
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	685b      	ldr	r3, [r3, #4]
       ||
 8009666:	429a      	cmp	r2, r3
 8009668:	d047      	beq.n	80096fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]
 800966e:	e044      	b.n	80096fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b03      	cmp	r3, #3
 8009676:	d018      	beq.n	80096aa <RCCEx_PLLSAI2_Config+0x86>
 8009678:	2b03      	cmp	r3, #3
 800967a:	d825      	bhi.n	80096c8 <RCCEx_PLLSAI2_Config+0xa4>
 800967c:	2b01      	cmp	r3, #1
 800967e:	d002      	beq.n	8009686 <RCCEx_PLLSAI2_Config+0x62>
 8009680:	2b02      	cmp	r3, #2
 8009682:	d009      	beq.n	8009698 <RCCEx_PLLSAI2_Config+0x74>
 8009684:	e020      	b.n	80096c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009686:	4b55      	ldr	r3, [pc, #340]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d11d      	bne.n	80096ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009696:	e01a      	b.n	80096ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009698:	4b50      	ldr	r3, [pc, #320]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d116      	bne.n	80096d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80096a8:	e013      	b.n	80096d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80096aa:	4b4c      	ldr	r3, [pc, #304]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10f      	bne.n	80096d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80096b6:	4b49      	ldr	r3, [pc, #292]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d109      	bne.n	80096d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80096c6:	e006      	b.n	80096d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	73fb      	strb	r3, [r7, #15]
      break;
 80096cc:	e004      	b.n	80096d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80096ce:	bf00      	nop
 80096d0:	e002      	b.n	80096d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80096d2:	bf00      	nop
 80096d4:	e000      	b.n	80096d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80096d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10d      	bne.n	80096fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80096de:	4b3f      	ldr	r3, [pc, #252]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6819      	ldr	r1, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	3b01      	subs	r3, #1
 80096f0:	011b      	lsls	r3, r3, #4
 80096f2:	430b      	orrs	r3, r1
 80096f4:	4939      	ldr	r1, [pc, #228]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80096f6:	4313      	orrs	r3, r2
 80096f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d167      	bne.n	80097d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009700:	4b36      	ldr	r3, [pc, #216]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a35      	ldr	r2, [pc, #212]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800970a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800970c:	f7fc f926 	bl	800595c <HAL_GetTick>
 8009710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009712:	e009      	b.n	8009728 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009714:	f7fc f922 	bl	800595c <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b02      	cmp	r3, #2
 8009720:	d902      	bls.n	8009728 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	73fb      	strb	r3, [r7, #15]
        break;
 8009726:	e005      	b.n	8009734 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009728:	4b2c      	ldr	r3, [pc, #176]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1ef      	bne.n	8009714 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d14a      	bne.n	80097d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d111      	bne.n	8009764 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009740:	4b26      	ldr	r3, [pc, #152]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009742:	695b      	ldr	r3, [r3, #20]
 8009744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	6892      	ldr	r2, [r2, #8]
 8009750:	0211      	lsls	r1, r2, #8
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	68d2      	ldr	r2, [r2, #12]
 8009756:	0912      	lsrs	r2, r2, #4
 8009758:	0452      	lsls	r2, r2, #17
 800975a:	430a      	orrs	r2, r1
 800975c:	491f      	ldr	r1, [pc, #124]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800975e:	4313      	orrs	r3, r2
 8009760:	614b      	str	r3, [r1, #20]
 8009762:	e011      	b.n	8009788 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009764:	4b1d      	ldr	r3, [pc, #116]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800976c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6892      	ldr	r2, [r2, #8]
 8009774:	0211      	lsls	r1, r2, #8
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	6912      	ldr	r2, [r2, #16]
 800977a:	0852      	lsrs	r2, r2, #1
 800977c:	3a01      	subs	r2, #1
 800977e:	0652      	lsls	r2, r2, #25
 8009780:	430a      	orrs	r2, r1
 8009782:	4916      	ldr	r1, [pc, #88]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8009784:	4313      	orrs	r3, r2
 8009786:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009788:	4b14      	ldr	r3, [pc, #80]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a13      	ldr	r2, [pc, #76]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800978e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009794:	f7fc f8e2 	bl	800595c <HAL_GetTick>
 8009798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800979a:	e009      	b.n	80097b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800979c:	f7fc f8de 	bl	800595c <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d902      	bls.n	80097b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80097aa:	2303      	movs	r3, #3
 80097ac:	73fb      	strb	r3, [r7, #15]
          break;
 80097ae:	e005      	b.n	80097bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80097b0:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0ef      	beq.n	800979c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80097c2:	4b06      	ldr	r3, [pc, #24]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80097c4:	695a      	ldr	r2, [r3, #20]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	4904      	ldr	r1, [pc, #16]	; (80097dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40021000 	.word	0x40021000

080097e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e095      	b.n	800991e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d108      	bne.n	800980c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009802:	d009      	beq.n	8009818 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	61da      	str	r2, [r3, #28]
 800980a:	e005      	b.n	8009818 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7f8 feb4 	bl	80025a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800984e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68db      	ldr	r3, [r3, #12]
 8009854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009858:	d902      	bls.n	8009860 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800985a:	2300      	movs	r3, #0
 800985c:	60fb      	str	r3, [r7, #12]
 800985e:	e002      	b.n	8009866 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009864:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800986e:	d007      	beq.n	8009880 <HAL_SPI_Init+0xa0>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009878:	d002      	beq.n	8009880 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009890:	431a      	orrs	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	f003 0302 	and.w	r3, r3, #2
 800989a:	431a      	orrs	r2, r3
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b8:	431a      	orrs	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c2:	ea42 0103 	orr.w	r1, r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	0c1b      	lsrs	r3, r3, #16
 80098dc:	f003 0204 	and.w	r2, r3, #4
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	f003 0310 	and.w	r3, r3, #16
 80098e8:	431a      	orrs	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ee:	f003 0308 	and.w	r3, r3, #8
 80098f2:	431a      	orrs	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80098fc:	ea42 0103 	orr.w	r1, r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8009934:	2300      	movs	r3, #0
 8009936:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	73fb      	strb	r3, [r7, #15]
 8009942:	e061      	b.n	8009a08 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d106      	bne.n	800995e <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2200      	movs	r2, #0
 8009954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7f8 fed1 	bl	8002700 <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2202      	movs	r2, #2
 8009962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0220 	bic.w	r2, r2, #32
 8009974:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f240 129f 	movw	r2, #415	; 0x19f
 800997e:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009986:	f023 0102 	bic.w	r1, r3, #2
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	685a      	ldr	r2, [r3, #4]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	430a      	orrs	r2, r1
 8009994:	625a      	str	r2, [r3, #36]	; 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d112      	bne.n	80099c4 <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 800999e:	4b1d      	ldr	r3, [pc, #116]	; (8009a14 <HAL_SWPMI_Init+0xec>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a1d      	ldr	r2, [pc, #116]	; (8009a18 <HAL_SWPMI_Init+0xf0>)
 80099a4:	fba2 2303 	umull	r2, r3, r2, r3
 80099a8:	0d1b      	lsrs	r3, r3, #20
 80099aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80099ae:	fb02 f303 	mul.w	r3, r2, r3
 80099b2:	3396      	adds	r3, #150	; 0x96
 80099b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 80099b6:	e002      	b.n	80099be <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1f9      	bne.n	80099b8 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	6892      	ldr	r2, [r2, #8]
 80099cc:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f023 010f 	bic.w	r1, r3, #15
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68da      	ldr	r2, [r3, #12]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	431a      	orrs	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	430a      	orrs	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	639a      	str	r2, [r3, #56]	; 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f042 0220 	orr.w	r2, r2, #32
 8009a06:	601a      	str	r2, [r3, #0]
  }

  return status;
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3710      	adds	r7, #16
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000000 	.word	0x20000000
 8009a18:	431bde83 	.word	0x431bde83

08009a1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d101      	bne.n	8009a2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e049      	b.n	8009ac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d106      	bne.n	8009a48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7f8 ff00 	bl	8002848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f000 fb1a 	bl	800a094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2201      	movs	r2, #1
 8009a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b082      	sub	sp, #8
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d101      	bne.n	8009adc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e049      	b.n	8009b70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d106      	bne.n	8009af6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f841 	bl	8009b78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2202      	movs	r2, #2
 8009afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f000 fac3 	bl	800a094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2201      	movs	r2, #1
 8009b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3708      	adds	r7, #8
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b80:	bf00      	nop
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e097      	b.n	8009cd0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7f8 fe03 	bl	80027c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009bd0:	f023 0307 	bic.w	r3, r3, #7
 8009bd4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4619      	mov	r1, r3
 8009be0:	4610      	mov	r0, r2
 8009be2:	f000 fa57 	bl	800a094 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6a1b      	ldr	r3, [r3, #32]
 8009bfc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	697a      	ldr	r2, [r7, #20]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c0e:	f023 0303 	bic.w	r3, r3, #3
 8009c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009c2c:	f023 030c 	bic.w	r3, r3, #12
 8009c30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	011a      	lsls	r2, r3, #4
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	031b      	lsls	r3, r3, #12
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	693a      	ldr	r2, [r7, #16]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009c6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009c72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	68fa      	ldr	r2, [r7, #12]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3718      	adds	r7, #24
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e0ff      	b.n	8009ef6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b14      	cmp	r3, #20
 8009d02:	f200 80f0 	bhi.w	8009ee6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009d61 	.word	0x08009d61
 8009d10:	08009ee7 	.word	0x08009ee7
 8009d14:	08009ee7 	.word	0x08009ee7
 8009d18:	08009ee7 	.word	0x08009ee7
 8009d1c:	08009da1 	.word	0x08009da1
 8009d20:	08009ee7 	.word	0x08009ee7
 8009d24:	08009ee7 	.word	0x08009ee7
 8009d28:	08009ee7 	.word	0x08009ee7
 8009d2c:	08009de3 	.word	0x08009de3
 8009d30:	08009ee7 	.word	0x08009ee7
 8009d34:	08009ee7 	.word	0x08009ee7
 8009d38:	08009ee7 	.word	0x08009ee7
 8009d3c:	08009e23 	.word	0x08009e23
 8009d40:	08009ee7 	.word	0x08009ee7
 8009d44:	08009ee7 	.word	0x08009ee7
 8009d48:	08009ee7 	.word	0x08009ee7
 8009d4c:	08009e65 	.word	0x08009e65
 8009d50:	08009ee7 	.word	0x08009ee7
 8009d54:	08009ee7 	.word	0x08009ee7
 8009d58:	08009ee7 	.word	0x08009ee7
 8009d5c:	08009ea5 	.word	0x08009ea5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 fa2e 	bl	800a1c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	699a      	ldr	r2, [r3, #24]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f042 0208 	orr.w	r2, r2, #8
 8009d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699a      	ldr	r2, [r3, #24]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f022 0204 	bic.w	r2, r2, #4
 8009d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6999      	ldr	r1, [r3, #24]
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	691a      	ldr	r2, [r3, #16]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	430a      	orrs	r2, r1
 8009d9c:	619a      	str	r2, [r3, #24]
      break;
 8009d9e:	e0a5      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	68b9      	ldr	r1, [r7, #8]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f000 fa9e 	bl	800a2e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	699a      	ldr	r2, [r3, #24]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	699a      	ldr	r2, [r3, #24]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6999      	ldr	r1, [r3, #24]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	021a      	lsls	r2, r3, #8
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	619a      	str	r2, [r3, #24]
      break;
 8009de0:	e084      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68b9      	ldr	r1, [r7, #8]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fb07 	bl	800a3fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	69da      	ldr	r2, [r3, #28]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f042 0208 	orr.w	r2, r2, #8
 8009dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	69da      	ldr	r2, [r3, #28]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0204 	bic.w	r2, r2, #4
 8009e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	69d9      	ldr	r1, [r3, #28]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	691a      	ldr	r2, [r3, #16]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	430a      	orrs	r2, r1
 8009e1e:	61da      	str	r2, [r3, #28]
      break;
 8009e20:	e064      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 fb6f 	bl	800a50c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	69da      	ldr	r2, [r3, #28]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	69d9      	ldr	r1, [r3, #28]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	021a      	lsls	r2, r3, #8
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	61da      	str	r2, [r3, #28]
      break;
 8009e62:	e043      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 fbb8 	bl	800a5e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0208 	orr.w	r2, r2, #8
 8009e7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0204 	bic.w	r2, r2, #4
 8009e8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ea2:	e023      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 fbfc 	bl	800a6a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ebe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ece:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	021a      	lsls	r2, r3, #8
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009ee4:	e002      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop

08009f00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d101      	bne.n	8009f1c <HAL_TIM_ConfigClockSource+0x1c>
 8009f18:	2302      	movs	r3, #2
 8009f1a:	e0b6      	b.n	800a08a <HAL_TIM_ConfigClockSource+0x18a>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f58:	d03e      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0xd8>
 8009f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f5e:	f200 8087 	bhi.w	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f66:	f000 8086 	beq.w	800a076 <HAL_TIM_ConfigClockSource+0x176>
 8009f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f6e:	d87f      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009f70:	2b70      	cmp	r3, #112	; 0x70
 8009f72:	d01a      	beq.n	8009faa <HAL_TIM_ConfigClockSource+0xaa>
 8009f74:	2b70      	cmp	r3, #112	; 0x70
 8009f76:	d87b      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009f78:	2b60      	cmp	r3, #96	; 0x60
 8009f7a:	d050      	beq.n	800a01e <HAL_TIM_ConfigClockSource+0x11e>
 8009f7c:	2b60      	cmp	r3, #96	; 0x60
 8009f7e:	d877      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009f80:	2b50      	cmp	r3, #80	; 0x50
 8009f82:	d03c      	beq.n	8009ffe <HAL_TIM_ConfigClockSource+0xfe>
 8009f84:	2b50      	cmp	r3, #80	; 0x50
 8009f86:	d873      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009f88:	2b40      	cmp	r3, #64	; 0x40
 8009f8a:	d058      	beq.n	800a03e <HAL_TIM_ConfigClockSource+0x13e>
 8009f8c:	2b40      	cmp	r3, #64	; 0x40
 8009f8e:	d86f      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009f90:	2b30      	cmp	r3, #48	; 0x30
 8009f92:	d064      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15e>
 8009f94:	2b30      	cmp	r3, #48	; 0x30
 8009f96:	d86b      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	d060      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15e>
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	d867      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d05c      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15e>
 8009fa4:	2b10      	cmp	r3, #16
 8009fa6:	d05a      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15e>
 8009fa8:	e062      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	6899      	ldr	r1, [r3, #8]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f000 fc55 	bl	800a868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	609a      	str	r2, [r3, #8]
      break;
 8009fd6:	e04f      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	6899      	ldr	r1, [r3, #8]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f000 fc3e 	bl	800a868 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ffa:	609a      	str	r2, [r3, #8]
      break;
 8009ffc:	e03c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6818      	ldr	r0, [r3, #0]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	6859      	ldr	r1, [r3, #4]
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f000 fbb2 	bl	800a774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2150      	movs	r1, #80	; 0x50
 800a016:	4618      	mov	r0, r3
 800a018:	f000 fc0b 	bl	800a832 <TIM_ITRx_SetConfig>
      break;
 800a01c:	e02c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6818      	ldr	r0, [r3, #0]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	6859      	ldr	r1, [r3, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	461a      	mov	r2, r3
 800a02c:	f000 fbd1 	bl	800a7d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2160      	movs	r1, #96	; 0x60
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fbfb 	bl	800a832 <TIM_ITRx_SetConfig>
      break;
 800a03c:	e01c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	6859      	ldr	r1, [r3, #4]
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	461a      	mov	r2, r3
 800a04c:	f000 fb92 	bl	800a774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2140      	movs	r1, #64	; 0x40
 800a056:	4618      	mov	r0, r3
 800a058:	f000 fbeb 	bl	800a832 <TIM_ITRx_SetConfig>
      break;
 800a05c:	e00c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4619      	mov	r1, r3
 800a068:	4610      	mov	r0, r2
 800a06a:	f000 fbe2 	bl	800a832 <TIM_ITRx_SetConfig>
      break;
 800a06e:	e003      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
      break;
 800a074:	e000      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a088:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a40      	ldr	r2, [pc, #256]	; (800a1a8 <TIM_Base_SetConfig+0x114>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d013      	beq.n	800a0d4 <TIM_Base_SetConfig+0x40>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b2:	d00f      	beq.n	800a0d4 <TIM_Base_SetConfig+0x40>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a3d      	ldr	r2, [pc, #244]	; (800a1ac <TIM_Base_SetConfig+0x118>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d00b      	beq.n	800a0d4 <TIM_Base_SetConfig+0x40>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a3c      	ldr	r2, [pc, #240]	; (800a1b0 <TIM_Base_SetConfig+0x11c>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d007      	beq.n	800a0d4 <TIM_Base_SetConfig+0x40>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a3b      	ldr	r2, [pc, #236]	; (800a1b4 <TIM_Base_SetConfig+0x120>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_Base_SetConfig+0x40>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a3a      	ldr	r2, [pc, #232]	; (800a1b8 <TIM_Base_SetConfig+0x124>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d108      	bne.n	800a0e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	68fa      	ldr	r2, [r7, #12]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a2f      	ldr	r2, [pc, #188]	; (800a1a8 <TIM_Base_SetConfig+0x114>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d01f      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0f4:	d01b      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a2c      	ldr	r2, [pc, #176]	; (800a1ac <TIM_Base_SetConfig+0x118>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d017      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a2b      	ldr	r2, [pc, #172]	; (800a1b0 <TIM_Base_SetConfig+0x11c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d013      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a2a      	ldr	r2, [pc, #168]	; (800a1b4 <TIM_Base_SetConfig+0x120>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d00f      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a29      	ldr	r2, [pc, #164]	; (800a1b8 <TIM_Base_SetConfig+0x124>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00b      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a28      	ldr	r2, [pc, #160]	; (800a1bc <TIM_Base_SetConfig+0x128>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d007      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a27      	ldr	r2, [pc, #156]	; (800a1c0 <TIM_Base_SetConfig+0x12c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d003      	beq.n	800a12e <TIM_Base_SetConfig+0x9a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a26      	ldr	r2, [pc, #152]	; (800a1c4 <TIM_Base_SetConfig+0x130>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d108      	bne.n	800a140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a10      	ldr	r2, [pc, #64]	; (800a1a8 <TIM_Base_SetConfig+0x114>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00f      	beq.n	800a18c <TIM_Base_SetConfig+0xf8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a12      	ldr	r2, [pc, #72]	; (800a1b8 <TIM_Base_SetConfig+0x124>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00b      	beq.n	800a18c <TIM_Base_SetConfig+0xf8>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a11      	ldr	r2, [pc, #68]	; (800a1bc <TIM_Base_SetConfig+0x128>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d007      	beq.n	800a18c <TIM_Base_SetConfig+0xf8>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a10      	ldr	r2, [pc, #64]	; (800a1c0 <TIM_Base_SetConfig+0x12c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_Base_SetConfig+0xf8>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a0f      	ldr	r2, [pc, #60]	; (800a1c4 <TIM_Base_SetConfig+0x130>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d103      	bne.n	800a194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	615a      	str	r2, [r3, #20]
}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	40012c00 	.word	0x40012c00
 800a1ac:	40000400 	.word	0x40000400
 800a1b0:	40000800 	.word	0x40000800
 800a1b4:	40000c00 	.word	0x40000c00
 800a1b8:	40013400 	.word	0x40013400
 800a1bc:	40014000 	.word	0x40014000
 800a1c0:	40014400 	.word	0x40014400
 800a1c4:	40014800 	.word	0x40014800

0800a1c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	f023 0201 	bic.w	r2, r3, #1
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	699b      	ldr	r3, [r3, #24]
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f023 0303 	bic.w	r3, r3, #3
 800a202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68fa      	ldr	r2, [r7, #12]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f023 0302 	bic.w	r3, r3, #2
 800a214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4313      	orrs	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a2c      	ldr	r2, [pc, #176]	; (800a2d4 <TIM_OC1_SetConfig+0x10c>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d00f      	beq.n	800a248 <TIM_OC1_SetConfig+0x80>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a2b      	ldr	r2, [pc, #172]	; (800a2d8 <TIM_OC1_SetConfig+0x110>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d00b      	beq.n	800a248 <TIM_OC1_SetConfig+0x80>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a2a      	ldr	r2, [pc, #168]	; (800a2dc <TIM_OC1_SetConfig+0x114>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d007      	beq.n	800a248 <TIM_OC1_SetConfig+0x80>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a29      	ldr	r2, [pc, #164]	; (800a2e0 <TIM_OC1_SetConfig+0x118>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d003      	beq.n	800a248 <TIM_OC1_SetConfig+0x80>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	4a28      	ldr	r2, [pc, #160]	; (800a2e4 <TIM_OC1_SetConfig+0x11c>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d10c      	bne.n	800a262 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	f023 0308 	bic.w	r3, r3, #8
 800a24e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	4313      	orrs	r3, r2
 800a258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f023 0304 	bic.w	r3, r3, #4
 800a260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a1b      	ldr	r2, [pc, #108]	; (800a2d4 <TIM_OC1_SetConfig+0x10c>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d00f      	beq.n	800a28a <TIM_OC1_SetConfig+0xc2>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a1a      	ldr	r2, [pc, #104]	; (800a2d8 <TIM_OC1_SetConfig+0x110>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00b      	beq.n	800a28a <TIM_OC1_SetConfig+0xc2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a19      	ldr	r2, [pc, #100]	; (800a2dc <TIM_OC1_SetConfig+0x114>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d007      	beq.n	800a28a <TIM_OC1_SetConfig+0xc2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a18      	ldr	r2, [pc, #96]	; (800a2e0 <TIM_OC1_SetConfig+0x118>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d003      	beq.n	800a28a <TIM_OC1_SetConfig+0xc2>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a17      	ldr	r2, [pc, #92]	; (800a2e4 <TIM_OC1_SetConfig+0x11c>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d111      	bne.n	800a2ae <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	693a      	ldr	r2, [r7, #16]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	699b      	ldr	r3, [r3, #24]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	621a      	str	r2, [r3, #32]
}
 800a2c8:	bf00      	nop
 800a2ca:	371c      	adds	r7, #28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr
 800a2d4:	40012c00 	.word	0x40012c00
 800a2d8:	40013400 	.word	0x40013400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40014400 	.word	0x40014400
 800a2e4:	40014800 	.word	0x40014800

0800a2e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f023 0210 	bic.w	r2, r3, #16
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	699b      	ldr	r3, [r3, #24]
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	021b      	lsls	r3, r3, #8
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f023 0320 	bic.w	r3, r3, #32
 800a336:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a28      	ldr	r2, [pc, #160]	; (800a3e8 <TIM_OC2_SetConfig+0x100>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d003      	beq.n	800a354 <TIM_OC2_SetConfig+0x6c>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a27      	ldr	r2, [pc, #156]	; (800a3ec <TIM_OC2_SetConfig+0x104>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d10d      	bne.n	800a370 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	011b      	lsls	r3, r3, #4
 800a362:	697a      	ldr	r2, [r7, #20]
 800a364:	4313      	orrs	r3, r2
 800a366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a36e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a1d      	ldr	r2, [pc, #116]	; (800a3e8 <TIM_OC2_SetConfig+0x100>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d00f      	beq.n	800a398 <TIM_OC2_SetConfig+0xb0>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a1c      	ldr	r2, [pc, #112]	; (800a3ec <TIM_OC2_SetConfig+0x104>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00b      	beq.n	800a398 <TIM_OC2_SetConfig+0xb0>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a1b      	ldr	r2, [pc, #108]	; (800a3f0 <TIM_OC2_SetConfig+0x108>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d007      	beq.n	800a398 <TIM_OC2_SetConfig+0xb0>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a1a      	ldr	r2, [pc, #104]	; (800a3f4 <TIM_OC2_SetConfig+0x10c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d003      	beq.n	800a398 <TIM_OC2_SetConfig+0xb0>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a19      	ldr	r2, [pc, #100]	; (800a3f8 <TIM_OC2_SetConfig+0x110>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d113      	bne.n	800a3c0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a39e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	695b      	ldr	r3, [r3, #20]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	699b      	ldr	r3, [r3, #24]
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	693a      	ldr	r2, [r7, #16]
 800a3c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	621a      	str	r2, [r3, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr
 800a3e6:	bf00      	nop
 800a3e8:	40012c00 	.word	0x40012c00
 800a3ec:	40013400 	.word	0x40013400
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	40014800 	.word	0x40014800

0800a3fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f023 0303 	bic.w	r3, r3, #3
 800a436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	021b      	lsls	r3, r3, #8
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a27      	ldr	r2, [pc, #156]	; (800a4f8 <TIM_OC3_SetConfig+0xfc>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d003      	beq.n	800a466 <TIM_OC3_SetConfig+0x6a>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a26      	ldr	r2, [pc, #152]	; (800a4fc <TIM_OC3_SetConfig+0x100>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d10d      	bne.n	800a482 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a46c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	021b      	lsls	r3, r3, #8
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a1c      	ldr	r2, [pc, #112]	; (800a4f8 <TIM_OC3_SetConfig+0xfc>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d00f      	beq.n	800a4aa <TIM_OC3_SetConfig+0xae>
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4a1b      	ldr	r2, [pc, #108]	; (800a4fc <TIM_OC3_SetConfig+0x100>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d00b      	beq.n	800a4aa <TIM_OC3_SetConfig+0xae>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a1a      	ldr	r2, [pc, #104]	; (800a500 <TIM_OC3_SetConfig+0x104>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d007      	beq.n	800a4aa <TIM_OC3_SetConfig+0xae>
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	4a19      	ldr	r2, [pc, #100]	; (800a504 <TIM_OC3_SetConfig+0x108>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d003      	beq.n	800a4aa <TIM_OC3_SetConfig+0xae>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	4a18      	ldr	r2, [pc, #96]	; (800a508 <TIM_OC3_SetConfig+0x10c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d113      	bne.n	800a4d2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a4b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	011b      	lsls	r3, r3, #4
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	685a      	ldr	r2, [r3, #4]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	621a      	str	r2, [r3, #32]
}
 800a4ec:	bf00      	nop
 800a4ee:	371c      	adds	r7, #28
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	40012c00 	.word	0x40012c00
 800a4fc:	40013400 	.word	0x40013400
 800a500:	40014000 	.word	0x40014000
 800a504:	40014400 	.word	0x40014400
 800a508:	40014800 	.word	0x40014800

0800a50c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a1b      	ldr	r3, [r3, #32]
 800a526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a53a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a53e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	021b      	lsls	r3, r3, #8
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	4313      	orrs	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a55a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	031b      	lsls	r3, r3, #12
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	4313      	orrs	r3, r2
 800a566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a18      	ldr	r2, [pc, #96]	; (800a5cc <TIM_OC4_SetConfig+0xc0>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d00f      	beq.n	800a590 <TIM_OC4_SetConfig+0x84>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a17      	ldr	r2, [pc, #92]	; (800a5d0 <TIM_OC4_SetConfig+0xc4>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d00b      	beq.n	800a590 <TIM_OC4_SetConfig+0x84>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a16      	ldr	r2, [pc, #88]	; (800a5d4 <TIM_OC4_SetConfig+0xc8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d007      	beq.n	800a590 <TIM_OC4_SetConfig+0x84>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a15      	ldr	r2, [pc, #84]	; (800a5d8 <TIM_OC4_SetConfig+0xcc>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d003      	beq.n	800a590 <TIM_OC4_SetConfig+0x84>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a14      	ldr	r2, [pc, #80]	; (800a5dc <TIM_OC4_SetConfig+0xd0>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d109      	bne.n	800a5a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	019b      	lsls	r3, r3, #6
 800a59e:	697a      	ldr	r2, [r7, #20]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685a      	ldr	r2, [r3, #4]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	621a      	str	r2, [r3, #32]
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	40012c00 	.word	0x40012c00
 800a5d0:	40013400 	.word	0x40013400
 800a5d4:	40014000 	.word	0x40014000
 800a5d8:	40014400 	.word	0x40014400
 800a5dc:	40014800 	.word	0x40014800

0800a5e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a1b      	ldr	r3, [r3, #32]
 800a5fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a624:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	041b      	lsls	r3, r3, #16
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	4313      	orrs	r3, r2
 800a630:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a17      	ldr	r2, [pc, #92]	; (800a694 <TIM_OC5_SetConfig+0xb4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d00f      	beq.n	800a65a <TIM_OC5_SetConfig+0x7a>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a16      	ldr	r2, [pc, #88]	; (800a698 <TIM_OC5_SetConfig+0xb8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d00b      	beq.n	800a65a <TIM_OC5_SetConfig+0x7a>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a15      	ldr	r2, [pc, #84]	; (800a69c <TIM_OC5_SetConfig+0xbc>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d007      	beq.n	800a65a <TIM_OC5_SetConfig+0x7a>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4a14      	ldr	r2, [pc, #80]	; (800a6a0 <TIM_OC5_SetConfig+0xc0>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d003      	beq.n	800a65a <TIM_OC5_SetConfig+0x7a>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4a13      	ldr	r2, [pc, #76]	; (800a6a4 <TIM_OC5_SetConfig+0xc4>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d109      	bne.n	800a66e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a660:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	021b      	lsls	r3, r3, #8
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	693a      	ldr	r2, [r7, #16]
 800a686:	621a      	str	r2, [r3, #32]
}
 800a688:	bf00      	nop
 800a68a:	371c      	adds	r7, #28
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	40012c00 	.word	0x40012c00
 800a698:	40013400 	.word	0x40013400
 800a69c:	40014000 	.word	0x40014000
 800a6a0:	40014400 	.word	0x40014400
 800a6a4:	40014800 	.word	0x40014800

0800a6a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b087      	sub	sp, #28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	051b      	lsls	r3, r3, #20
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a18      	ldr	r2, [pc, #96]	; (800a760 <TIM_OC6_SetConfig+0xb8>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d00f      	beq.n	800a724 <TIM_OC6_SetConfig+0x7c>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	4a17      	ldr	r2, [pc, #92]	; (800a764 <TIM_OC6_SetConfig+0xbc>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d00b      	beq.n	800a724 <TIM_OC6_SetConfig+0x7c>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a16      	ldr	r2, [pc, #88]	; (800a768 <TIM_OC6_SetConfig+0xc0>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d007      	beq.n	800a724 <TIM_OC6_SetConfig+0x7c>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a15      	ldr	r2, [pc, #84]	; (800a76c <TIM_OC6_SetConfig+0xc4>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d003      	beq.n	800a724 <TIM_OC6_SetConfig+0x7c>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a14      	ldr	r2, [pc, #80]	; (800a770 <TIM_OC6_SetConfig+0xc8>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d109      	bne.n	800a738 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a72a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	029b      	lsls	r3, r3, #10
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685a      	ldr	r2, [r3, #4]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	621a      	str	r2, [r3, #32]
}
 800a752:	bf00      	nop
 800a754:	371c      	adds	r7, #28
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	40012c00 	.word	0x40012c00
 800a764:	40013400 	.word	0x40013400
 800a768:	40014000 	.word	0x40014000
 800a76c:	40014400 	.word	0x40014400
 800a770:	40014800 	.word	0x40014800

0800a774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a774:	b480      	push	{r7}
 800a776:	b087      	sub	sp, #28
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6a1b      	ldr	r3, [r3, #32]
 800a784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	f023 0201 	bic.w	r2, r3, #1
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a79e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	011b      	lsls	r3, r3, #4
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f023 030a 	bic.w	r3, r3, #10
 800a7b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	621a      	str	r2, [r3, #32]
}
 800a7c6:	bf00      	nop
 800a7c8:	371c      	adds	r7, #28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7d2:	b480      	push	{r7}
 800a7d4:	b087      	sub	sp, #28
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	f023 0210 	bic.w	r2, r3, #16
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	031b      	lsls	r3, r3, #12
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	4313      	orrs	r3, r2
 800a806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a80e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	4313      	orrs	r3, r2
 800a818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	693a      	ldr	r2, [r7, #16]
 800a824:	621a      	str	r2, [r3, #32]
}
 800a826:	bf00      	nop
 800a828:	371c      	adds	r7, #28
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr

0800a832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a832:	b480      	push	{r7}
 800a834:	b085      	sub	sp, #20
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
 800a83a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4313      	orrs	r3, r2
 800a850:	f043 0307 	orr.w	r3, r3, #7
 800a854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	609a      	str	r2, [r3, #8]
}
 800a85c:	bf00      	nop
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a882:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	021a      	lsls	r2, r3, #8
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	431a      	orrs	r2, r3
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	4313      	orrs	r3, r2
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	4313      	orrs	r3, r2
 800a894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	697a      	ldr	r2, [r7, #20]
 800a89a:	609a      	str	r2, [r3, #8]
}
 800a89c:	bf00      	nop
 800a89e:	371c      	adds	r7, #28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e068      	b.n	800a992 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a2e      	ldr	r2, [pc, #184]	; (800a9a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d004      	beq.n	800a8f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a2d      	ldr	r2, [pc, #180]	; (800a9a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d108      	bne.n	800a906 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a8fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a90c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	4313      	orrs	r3, r2
 800a916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a1e      	ldr	r2, [pc, #120]	; (800a9a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d01d      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a932:	d018      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a1b      	ldr	r2, [pc, #108]	; (800a9a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d013      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a1a      	ldr	r2, [pc, #104]	; (800a9ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00e      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a18      	ldr	r2, [pc, #96]	; (800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d009      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4a13      	ldr	r2, [pc, #76]	; (800a9a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d004      	beq.n	800a966 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a14      	ldr	r2, [pc, #80]	; (800a9b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d10c      	bne.n	800a980 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a96c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	4313      	orrs	r3, r2
 800a976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3714      	adds	r7, #20
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	40012c00 	.word	0x40012c00
 800a9a4:	40013400 	.word	0x40013400
 800a9a8:	40000400 	.word	0x40000400
 800a9ac:	40000800 	.word	0x40000800
 800a9b0:	40000c00 	.word	0x40000c00
 800a9b4:	40014000 	.word	0x40014000

0800a9b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d101      	bne.n	800a9d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	e065      	b.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	68db      	ldr	r3, [r3, #12]
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	689b      	ldr	r3, [r3, #8]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	699b      	ldr	r3, [r3, #24]
 800aa48:	041b      	lsls	r3, r3, #16
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a16      	ldr	r2, [pc, #88]	; (800aaac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d004      	beq.n	800aa62 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a14      	ldr	r2, [pc, #80]	; (800aab0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d115      	bne.n	800aa8e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	051b      	lsls	r3, r3, #20
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa9e:	2300      	movs	r3, #0
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3714      	adds	r7, #20
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	40012c00 	.word	0x40012c00
 800aab0:	40013400 	.word	0x40013400

0800aab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e040      	b.n	800ab48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7f7 ff8e 	bl	80029f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2224      	movs	r2, #36	; 0x24
 800aae0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 0201 	bic.w	r2, r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fb92 	bl	800b21c <UART_SetConfig>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d101      	bne.n	800ab02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	e022      	b.n	800ab48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 fe3e 	bl	800b78c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	685a      	ldr	r2, [r3, #4]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	689a      	ldr	r2, [r3, #8]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f042 0201 	orr.w	r2, r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fec5 	bl	800b8d0 <UART_CheckIdleState>
 800ab46:	4603      	mov	r3, r0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b08b      	sub	sp, #44	; 0x2c
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	4613      	mov	r3, r2
 800ab5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab62:	2b20      	cmp	r3, #32
 800ab64:	d156      	bne.n	800ac14 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <HAL_UART_Transmit_IT+0x22>
 800ab6c:	88fb      	ldrh	r3, [r7, #6]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800ab72:	2301      	movs	r3, #1
 800ab74:	e04f      	b.n	800ac16 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d101      	bne.n	800ab84 <HAL_UART_Transmit_IT+0x34>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e048      	b.n	800ac16 <HAL_UART_Transmit_IT+0xc6>
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	88fa      	ldrh	r2, [r7, #6]
 800ab96:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	88fa      	ldrh	r2, [r7, #6]
 800ab9e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2200      	movs	r2, #0
 800aba6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2221      	movs	r2, #33	; 0x21
 800abb4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abbe:	d107      	bne.n	800abd0 <HAL_UART_Transmit_IT+0x80>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d103      	bne.n	800abd0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4a16      	ldr	r2, [pc, #88]	; (800ac24 <HAL_UART_Transmit_IT+0xd4>)
 800abcc:	669a      	str	r2, [r3, #104]	; 0x68
 800abce:	e002      	b.n	800abd6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a15      	ldr	r2, [pc, #84]	; (800ac28 <HAL_UART_Transmit_IT+0xd8>)
 800abd4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	613b      	str	r3, [r7, #16]
   return(result);
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf2:	627b      	str	r3, [r7, #36]	; 0x24
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	461a      	mov	r2, r3
 800abfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfc:	623b      	str	r3, [r7, #32]
 800abfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac00:	69f9      	ldr	r1, [r7, #28]
 800ac02:	6a3a      	ldr	r2, [r7, #32]
 800ac04:	e841 2300 	strex	r3, r2, [r1]
 800ac08:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1e6      	bne.n	800abde <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800ac10:	2300      	movs	r3, #0
 800ac12:	e000      	b.n	800ac16 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800ac14:	2302      	movs	r3, #2
  }
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	372c      	adds	r7, #44	; 0x2c
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	0800bc95 	.word	0x0800bc95
 800ac28:	0800bbdd 	.word	0x0800bbdd

0800ac2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b0ba      	sub	sp, #232	; 0xe8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ac56:	f640 030f 	movw	r3, #2063	; 0x80f
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ac60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d115      	bne.n	800ac94 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ac68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac6c:	f003 0320 	and.w	r3, r3, #32
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00f      	beq.n	800ac94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ac74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac78:	f003 0320 	and.w	r3, r3, #32
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d009      	beq.n	800ac94 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 82a6 	beq.w	800b1d6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	4798      	blx	r3
      }
      return;
 800ac92:	e2a0      	b.n	800b1d6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800ac94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 8117 	beq.w	800aecc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ac9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aca2:	f003 0301 	and.w	r3, r3, #1
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d106      	bne.n	800acb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800acaa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800acae:	4b85      	ldr	r3, [pc, #532]	; (800aec4 <HAL_UART_IRQHandler+0x298>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 810a 	beq.w	800aecc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d011      	beq.n	800ace8 <HAL_UART_IRQHandler+0xbc>
 800acc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2201      	movs	r2, #1
 800acd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acde:	f043 0201 	orr.w	r2, r3, #1
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ace8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acec:	f003 0302 	and.w	r3, r3, #2
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d011      	beq.n	800ad18 <HAL_UART_IRQHandler+0xec>
 800acf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acf8:	f003 0301 	and.w	r3, r3, #1
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00b      	beq.n	800ad18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2202      	movs	r2, #2
 800ad06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad0e:	f043 0204 	orr.w	r2, r3, #4
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d011      	beq.n	800ad48 <HAL_UART_IRQHandler+0x11c>
 800ad24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00b      	beq.n	800ad48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2204      	movs	r2, #4
 800ad36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad3e:	f043 0202 	orr.w	r2, r3, #2
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad4c:	f003 0308 	and.w	r3, r3, #8
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d017      	beq.n	800ad84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ad54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad58:	f003 0320 	and.w	r3, r3, #32
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d105      	bne.n	800ad6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ad60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2208      	movs	r2, #8
 800ad72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad7a:	f043 0208 	orr.w	r2, r3, #8
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d012      	beq.n	800adb6 <HAL_UART_IRQHandler+0x18a>
 800ad90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d00c      	beq.n	800adb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ada4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adac:	f043 0220 	orr.w	r2, r3, #32
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 820c 	beq.w	800b1da <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800adc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adc6:	f003 0320 	and.w	r3, r3, #32
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00d      	beq.n	800adea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800adce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800add2:	f003 0320 	and.w	r3, r3, #32
 800add6:	2b00      	cmp	r3, #0
 800add8:	d007      	beq.n	800adea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d003      	beq.n	800adea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adfe:	2b40      	cmp	r3, #64	; 0x40
 800ae00:	d005      	beq.n	800ae0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d04f      	beq.n	800aeae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fe6b 	bl	800baea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1e:	2b40      	cmp	r3, #64	; 0x40
 800ae20:	d141      	bne.n	800aea6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	3308      	adds	r3, #8
 800ae28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	3308      	adds	r3, #8
 800ae4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d1d9      	bne.n	800ae22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d013      	beq.n	800ae9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae7a:	4a13      	ldr	r2, [pc, #76]	; (800aec8 <HAL_UART_IRQHandler+0x29c>)
 800ae7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fc f851 	bl	8006f2a <HAL_DMA_Abort_IT>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d017      	beq.n	800aebe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ae98:	4610      	mov	r0, r2
 800ae9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae9c:	e00f      	b.n	800aebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9a6 	bl	800b1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aea4:	e00b      	b.n	800aebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f9a2 	bl	800b1f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeac:	e007      	b.n	800aebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f000 f99e 	bl	800b1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800aebc:	e18d      	b.n	800b1da <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aebe:	bf00      	nop
    return;
 800aec0:	e18b      	b.n	800b1da <HAL_UART_IRQHandler+0x5ae>
 800aec2:	bf00      	nop
 800aec4:	04000120 	.word	0x04000120
 800aec8:	0800bbb1 	.word	0x0800bbb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	f040 8146 	bne.w	800b162 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeda:	f003 0310 	and.w	r3, r3, #16
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 813f 	beq.w	800b162 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800aee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f000 8138 	beq.w	800b162 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2210      	movs	r2, #16
 800aef8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	689b      	ldr	r3, [r3, #8]
 800af00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af04:	2b40      	cmp	r3, #64	; 0x40
 800af06:	f040 80b4 	bne.w	800b072 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f000 815f 	beq.w	800b1de <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800af26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af2a:	429a      	cmp	r2, r3
 800af2c:	f080 8157 	bcs.w	800b1de <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0320 	and.w	r3, r3, #32
 800af46:	2b00      	cmp	r3, #0
 800af48:	f040 8085 	bne.w	800b056 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af58:	e853 3f00 	ldrex	r3, [r3]
 800af5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	461a      	mov	r2, r3
 800af72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800af7a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800af82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800af8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800af92:	2b00      	cmp	r3, #0
 800af94:	d1da      	bne.n	800af4c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3308      	adds	r3, #8
 800af9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800afa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afa8:	f023 0301 	bic.w	r3, r3, #1
 800afac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3308      	adds	r3, #8
 800afb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800afba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800afbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800afc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800afcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e1      	bne.n	800af96 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	3308      	adds	r3, #8
 800afd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afdc:	e853 3f00 	ldrex	r3, [r3]
 800afe0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800afe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3308      	adds	r3, #8
 800aff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aff6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aff8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800affc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e3      	bne.n	800afd2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2220      	movs	r2, #32
 800b00e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01e:	e853 3f00 	ldrex	r3, [r3]
 800b022:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b026:	f023 0310 	bic.w	r3, r3, #16
 800b02a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	461a      	mov	r2, r3
 800b034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b038:	65bb      	str	r3, [r7, #88]	; 0x58
 800b03a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b03c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b03e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b040:	e841 2300 	strex	r3, r2, [r1]
 800b044:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1e4      	bne.n	800b016 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b050:	4618      	mov	r0, r3
 800b052:	f7fb ff2c 	bl	8006eae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b062:	b29b      	uxth	r3, r3
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	b29b      	uxth	r3, r3
 800b068:	4619      	mov	r1, r3
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f8ca 	bl	800b204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b070:	e0b5      	b.n	800b1de <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b07e:	b29b      	uxth	r3, r3
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 80a7 	beq.w	800b1e2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 80a2 	beq.w	800b1e2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	e853 3f00 	ldrex	r3, [r3]
 800b0aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b0c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e4      	bne.n	800b09e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3308      	adds	r3, #8
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	e853 3f00 	ldrex	r3, [r3]
 800b0e2:	623b      	str	r3, [r7, #32]
   return(result);
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	f023 0301 	bic.w	r3, r3, #1
 800b0ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b0f8:	633a      	str	r2, [r7, #48]	; 0x30
 800b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b100:	e841 2300 	strex	r3, r2, [r1]
 800b104:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d1e3      	bne.n	800b0d4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2220      	movs	r2, #32
 800b110:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f023 0310 	bic.w	r3, r3, #16
 800b132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	461a      	mov	r2, r3
 800b13c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b140:	61fb      	str	r3, [r7, #28]
 800b142:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	69b9      	ldr	r1, [r7, #24]
 800b146:	69fa      	ldr	r2, [r7, #28]
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	617b      	str	r3, [r7, #20]
   return(result);
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e4      	bne.n	800b11e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b158:	4619      	mov	r1, r3
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f852 	bl	800b204 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b160:	e03f      	b.n	800b1e2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00e      	beq.n	800b18c <HAL_UART_IRQHandler+0x560>
 800b16e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b176:	2b00      	cmp	r3, #0
 800b178:	d008      	beq.n	800b18c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b182:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fe0f 	bl	800bda8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b18a:	e02d      	b.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00e      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b19c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d008      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d01c      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	4798      	blx	r3
    }
    return;
 800b1b4:	e017      	b.n	800b1e6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b1b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d012      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
 800b1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00c      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fdc0 	bl	800bd54 <UART_EndTransmit_IT>
    return;
 800b1d4:	e008      	b.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b1d6:	bf00      	nop
 800b1d8:	e006      	b.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b1da:	bf00      	nop
 800b1dc:	e004      	b.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b1de:	bf00      	nop
 800b1e0:	e002      	b.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b1e2:	bf00      	nop
 800b1e4:	e000      	b.n	800b1e8 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b1e6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b1e8:	37e8      	adds	r7, #232	; 0xe8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	bf00      	nop

0800b1f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b21c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b220:	b08a      	sub	sp, #40	; 0x28
 800b222:	af00      	add	r7, sp, #0
 800b224:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b226:	2300      	movs	r3, #0
 800b228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	691b      	ldr	r3, [r3, #16]
 800b234:	431a      	orrs	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	431a      	orrs	r2, r3
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	4313      	orrs	r3, r2
 800b242:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	4ba4      	ldr	r3, [pc, #656]	; (800b4dc <UART_SetConfig+0x2c0>)
 800b24c:	4013      	ands	r3, r2
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	6812      	ldr	r2, [r2, #0]
 800b252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b254:	430b      	orrs	r3, r1
 800b256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	68da      	ldr	r2, [r3, #12]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	430a      	orrs	r2, r1
 800b26c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a99      	ldr	r2, [pc, #612]	; (800b4e0 <UART_SetConfig+0x2c4>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d004      	beq.n	800b288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b284:	4313      	orrs	r3, r2
 800b286:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b298:	430a      	orrs	r2, r1
 800b29a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a90      	ldr	r2, [pc, #576]	; (800b4e4 <UART_SetConfig+0x2c8>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d126      	bne.n	800b2f4 <UART_SetConfig+0xd8>
 800b2a6:	4b90      	ldr	r3, [pc, #576]	; (800b4e8 <UART_SetConfig+0x2cc>)
 800b2a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ac:	f003 0303 	and.w	r3, r3, #3
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d81b      	bhi.n	800b2ec <UART_SetConfig+0xd0>
 800b2b4:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <UART_SetConfig+0xa0>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b2cd 	.word	0x0800b2cd
 800b2c0:	0800b2dd 	.word	0x0800b2dd
 800b2c4:	0800b2d5 	.word	0x0800b2d5
 800b2c8:	0800b2e5 	.word	0x0800b2e5
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2d2:	e116      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b2d4:	2302      	movs	r3, #2
 800b2d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2da:	e112      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b2dc:	2304      	movs	r3, #4
 800b2de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2e2:	e10e      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b2e4:	2308      	movs	r3, #8
 800b2e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2ea:	e10a      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b2ec:	2310      	movs	r3, #16
 800b2ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b2f2:	e106      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a7c      	ldr	r2, [pc, #496]	; (800b4ec <UART_SetConfig+0x2d0>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d138      	bne.n	800b370 <UART_SetConfig+0x154>
 800b2fe:	4b7a      	ldr	r3, [pc, #488]	; (800b4e8 <UART_SetConfig+0x2cc>)
 800b300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b304:	f003 030c 	and.w	r3, r3, #12
 800b308:	2b0c      	cmp	r3, #12
 800b30a:	d82d      	bhi.n	800b368 <UART_SetConfig+0x14c>
 800b30c:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <UART_SetConfig+0xf8>)
 800b30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b312:	bf00      	nop
 800b314:	0800b349 	.word	0x0800b349
 800b318:	0800b369 	.word	0x0800b369
 800b31c:	0800b369 	.word	0x0800b369
 800b320:	0800b369 	.word	0x0800b369
 800b324:	0800b359 	.word	0x0800b359
 800b328:	0800b369 	.word	0x0800b369
 800b32c:	0800b369 	.word	0x0800b369
 800b330:	0800b369 	.word	0x0800b369
 800b334:	0800b351 	.word	0x0800b351
 800b338:	0800b369 	.word	0x0800b369
 800b33c:	0800b369 	.word	0x0800b369
 800b340:	0800b369 	.word	0x0800b369
 800b344:	0800b361 	.word	0x0800b361
 800b348:	2300      	movs	r3, #0
 800b34a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b34e:	e0d8      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b350:	2302      	movs	r3, #2
 800b352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b356:	e0d4      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b358:	2304      	movs	r3, #4
 800b35a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b35e:	e0d0      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b360:	2308      	movs	r3, #8
 800b362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b366:	e0cc      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b368:	2310      	movs	r3, #16
 800b36a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b36e:	e0c8      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a5e      	ldr	r2, [pc, #376]	; (800b4f0 <UART_SetConfig+0x2d4>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d125      	bne.n	800b3c6 <UART_SetConfig+0x1aa>
 800b37a:	4b5b      	ldr	r3, [pc, #364]	; (800b4e8 <UART_SetConfig+0x2cc>)
 800b37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b384:	2b30      	cmp	r3, #48	; 0x30
 800b386:	d016      	beq.n	800b3b6 <UART_SetConfig+0x19a>
 800b388:	2b30      	cmp	r3, #48	; 0x30
 800b38a:	d818      	bhi.n	800b3be <UART_SetConfig+0x1a2>
 800b38c:	2b20      	cmp	r3, #32
 800b38e:	d00a      	beq.n	800b3a6 <UART_SetConfig+0x18a>
 800b390:	2b20      	cmp	r3, #32
 800b392:	d814      	bhi.n	800b3be <UART_SetConfig+0x1a2>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <UART_SetConfig+0x182>
 800b398:	2b10      	cmp	r3, #16
 800b39a:	d008      	beq.n	800b3ae <UART_SetConfig+0x192>
 800b39c:	e00f      	b.n	800b3be <UART_SetConfig+0x1a2>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3a4:	e0ad      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3ac:	e0a9      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b3ae:	2304      	movs	r3, #4
 800b3b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3b4:	e0a5      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b3b6:	2308      	movs	r3, #8
 800b3b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3bc:	e0a1      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b3be:	2310      	movs	r3, #16
 800b3c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3c4:	e09d      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a4a      	ldr	r2, [pc, #296]	; (800b4f4 <UART_SetConfig+0x2d8>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d125      	bne.n	800b41c <UART_SetConfig+0x200>
 800b3d0:	4b45      	ldr	r3, [pc, #276]	; (800b4e8 <UART_SetConfig+0x2cc>)
 800b3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b3da:	2bc0      	cmp	r3, #192	; 0xc0
 800b3dc:	d016      	beq.n	800b40c <UART_SetConfig+0x1f0>
 800b3de:	2bc0      	cmp	r3, #192	; 0xc0
 800b3e0:	d818      	bhi.n	800b414 <UART_SetConfig+0x1f8>
 800b3e2:	2b80      	cmp	r3, #128	; 0x80
 800b3e4:	d00a      	beq.n	800b3fc <UART_SetConfig+0x1e0>
 800b3e6:	2b80      	cmp	r3, #128	; 0x80
 800b3e8:	d814      	bhi.n	800b414 <UART_SetConfig+0x1f8>
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d002      	beq.n	800b3f4 <UART_SetConfig+0x1d8>
 800b3ee:	2b40      	cmp	r3, #64	; 0x40
 800b3f0:	d008      	beq.n	800b404 <UART_SetConfig+0x1e8>
 800b3f2:	e00f      	b.n	800b414 <UART_SetConfig+0x1f8>
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b3fa:	e082      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b3fc:	2302      	movs	r3, #2
 800b3fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b402:	e07e      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b404:	2304      	movs	r3, #4
 800b406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b40a:	e07a      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b40c:	2308      	movs	r3, #8
 800b40e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b412:	e076      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b414:	2310      	movs	r3, #16
 800b416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b41a:	e072      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a35      	ldr	r2, [pc, #212]	; (800b4f8 <UART_SetConfig+0x2dc>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d12a      	bne.n	800b47c <UART_SetConfig+0x260>
 800b426:	4b30      	ldr	r3, [pc, #192]	; (800b4e8 <UART_SetConfig+0x2cc>)
 800b428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b42c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b434:	d01a      	beq.n	800b46c <UART_SetConfig+0x250>
 800b436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b43a:	d81b      	bhi.n	800b474 <UART_SetConfig+0x258>
 800b43c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b440:	d00c      	beq.n	800b45c <UART_SetConfig+0x240>
 800b442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b446:	d815      	bhi.n	800b474 <UART_SetConfig+0x258>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d003      	beq.n	800b454 <UART_SetConfig+0x238>
 800b44c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b450:	d008      	beq.n	800b464 <UART_SetConfig+0x248>
 800b452:	e00f      	b.n	800b474 <UART_SetConfig+0x258>
 800b454:	2300      	movs	r3, #0
 800b456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b45a:	e052      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b45c:	2302      	movs	r3, #2
 800b45e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b462:	e04e      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b464:	2304      	movs	r3, #4
 800b466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b46a:	e04a      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b46c:	2308      	movs	r3, #8
 800b46e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b472:	e046      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b474:	2310      	movs	r3, #16
 800b476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b47a:	e042      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a17      	ldr	r2, [pc, #92]	; (800b4e0 <UART_SetConfig+0x2c4>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d13a      	bne.n	800b4fc <UART_SetConfig+0x2e0>
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <UART_SetConfig+0x2cc>)
 800b488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b48c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b494:	d01a      	beq.n	800b4cc <UART_SetConfig+0x2b0>
 800b496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b49a:	d81b      	bhi.n	800b4d4 <UART_SetConfig+0x2b8>
 800b49c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4a0:	d00c      	beq.n	800b4bc <UART_SetConfig+0x2a0>
 800b4a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4a6:	d815      	bhi.n	800b4d4 <UART_SetConfig+0x2b8>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <UART_SetConfig+0x298>
 800b4ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4b0:	d008      	beq.n	800b4c4 <UART_SetConfig+0x2a8>
 800b4b2:	e00f      	b.n	800b4d4 <UART_SetConfig+0x2b8>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ba:	e022      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b4bc:	2302      	movs	r3, #2
 800b4be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4c2:	e01e      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b4c4:	2304      	movs	r3, #4
 800b4c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ca:	e01a      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b4cc:	2308      	movs	r3, #8
 800b4ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4d2:	e016      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4da:	e012      	b.n	800b502 <UART_SetConfig+0x2e6>
 800b4dc:	efff69f3 	.word	0xefff69f3
 800b4e0:	40008000 	.word	0x40008000
 800b4e4:	40013800 	.word	0x40013800
 800b4e8:	40021000 	.word	0x40021000
 800b4ec:	40004400 	.word	0x40004400
 800b4f0:	40004800 	.word	0x40004800
 800b4f4:	40004c00 	.word	0x40004c00
 800b4f8:	40005000 	.word	0x40005000
 800b4fc:	2310      	movs	r3, #16
 800b4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a9f      	ldr	r2, [pc, #636]	; (800b784 <UART_SetConfig+0x568>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d17a      	bne.n	800b602 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b50c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b510:	2b08      	cmp	r3, #8
 800b512:	d824      	bhi.n	800b55e <UART_SetConfig+0x342>
 800b514:	a201      	add	r2, pc, #4	; (adr r2, 800b51c <UART_SetConfig+0x300>)
 800b516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b51a:	bf00      	nop
 800b51c:	0800b541 	.word	0x0800b541
 800b520:	0800b55f 	.word	0x0800b55f
 800b524:	0800b549 	.word	0x0800b549
 800b528:	0800b55f 	.word	0x0800b55f
 800b52c:	0800b54f 	.word	0x0800b54f
 800b530:	0800b55f 	.word	0x0800b55f
 800b534:	0800b55f 	.word	0x0800b55f
 800b538:	0800b55f 	.word	0x0800b55f
 800b53c:	0800b557 	.word	0x0800b557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b540:	f7fd fc06 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800b544:	61f8      	str	r0, [r7, #28]
        break;
 800b546:	e010      	b.n	800b56a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b548:	4b8f      	ldr	r3, [pc, #572]	; (800b788 <UART_SetConfig+0x56c>)
 800b54a:	61fb      	str	r3, [r7, #28]
        break;
 800b54c:	e00d      	b.n	800b56a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b54e:	f7fd fb67 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 800b552:	61f8      	str	r0, [r7, #28]
        break;
 800b554:	e009      	b.n	800b56a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b55a:	61fb      	str	r3, [r7, #28]
        break;
 800b55c:	e005      	b.n	800b56a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800b55e:	2300      	movs	r3, #0
 800b560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 80fb 	beq.w	800b768 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	4613      	mov	r3, r2
 800b578:	005b      	lsls	r3, r3, #1
 800b57a:	4413      	add	r3, r2
 800b57c:	69fa      	ldr	r2, [r7, #28]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d305      	bcc.n	800b58e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b588:	69fa      	ldr	r2, [r7, #28]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d903      	bls.n	800b596 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b594:	e0e8      	b.n	800b768 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	2200      	movs	r2, #0
 800b59a:	461c      	mov	r4, r3
 800b59c:	4615      	mov	r5, r2
 800b59e:	f04f 0200 	mov.w	r2, #0
 800b5a2:	f04f 0300 	mov.w	r3, #0
 800b5a6:	022b      	lsls	r3, r5, #8
 800b5a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b5ac:	0222      	lsls	r2, r4, #8
 800b5ae:	68f9      	ldr	r1, [r7, #12]
 800b5b0:	6849      	ldr	r1, [r1, #4]
 800b5b2:	0849      	lsrs	r1, r1, #1
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	4688      	mov	r8, r1
 800b5b8:	4681      	mov	r9, r0
 800b5ba:	eb12 0a08 	adds.w	sl, r2, r8
 800b5be:	eb43 0b09 	adc.w	fp, r3, r9
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	603b      	str	r3, [r7, #0]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d0:	4650      	mov	r0, sl
 800b5d2:	4659      	mov	r1, fp
 800b5d4:	f7f5 fb30 	bl	8000c38 <__aeabi_uldivmod>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4613      	mov	r3, r2
 800b5de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5e0:	69bb      	ldr	r3, [r7, #24]
 800b5e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5e6:	d308      	bcc.n	800b5fa <UART_SetConfig+0x3de>
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ee:	d204      	bcs.n	800b5fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69ba      	ldr	r2, [r7, #24]
 800b5f6:	60da      	str	r2, [r3, #12]
 800b5f8:	e0b6      	b.n	800b768 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b600:	e0b2      	b.n	800b768 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b60a:	d15e      	bne.n	800b6ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800b60c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b610:	2b08      	cmp	r3, #8
 800b612:	d828      	bhi.n	800b666 <UART_SetConfig+0x44a>
 800b614:	a201      	add	r2, pc, #4	; (adr r2, 800b61c <UART_SetConfig+0x400>)
 800b616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61a:	bf00      	nop
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b649 	.word	0x0800b649
 800b624:	0800b651 	.word	0x0800b651
 800b628:	0800b667 	.word	0x0800b667
 800b62c:	0800b657 	.word	0x0800b657
 800b630:	0800b667 	.word	0x0800b667
 800b634:	0800b667 	.word	0x0800b667
 800b638:	0800b667 	.word	0x0800b667
 800b63c:	0800b65f 	.word	0x0800b65f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b640:	f7fd fb86 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800b644:	61f8      	str	r0, [r7, #28]
        break;
 800b646:	e014      	b.n	800b672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b648:	f7fd fb98 	bl	8008d7c <HAL_RCC_GetPCLK2Freq>
 800b64c:	61f8      	str	r0, [r7, #28]
        break;
 800b64e:	e010      	b.n	800b672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b650:	4b4d      	ldr	r3, [pc, #308]	; (800b788 <UART_SetConfig+0x56c>)
 800b652:	61fb      	str	r3, [r7, #28]
        break;
 800b654:	e00d      	b.n	800b672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b656:	f7fd fae3 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 800b65a:	61f8      	str	r0, [r7, #28]
        break;
 800b65c:	e009      	b.n	800b672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b65e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b662:	61fb      	str	r3, [r7, #28]
        break;
 800b664:	e005      	b.n	800b672 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800b666:	2300      	movs	r3, #0
 800b668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d077      	beq.n	800b768 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	005a      	lsls	r2, r3, #1
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	085b      	lsrs	r3, r3, #1
 800b682:	441a      	add	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	fbb2 f3f3 	udiv	r3, r2, r3
 800b68c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	2b0f      	cmp	r3, #15
 800b692:	d916      	bls.n	800b6c2 <UART_SetConfig+0x4a6>
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b69a:	d212      	bcs.n	800b6c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	f023 030f 	bic.w	r3, r3, #15
 800b6a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	085b      	lsrs	r3, r3, #1
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	8afb      	ldrh	r3, [r7, #22]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	8afa      	ldrh	r2, [r7, #22]
 800b6be:	60da      	str	r2, [r3, #12]
 800b6c0:	e052      	b.n	800b768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b6c8:	e04e      	b.n	800b768 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b6ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6ce:	2b08      	cmp	r3, #8
 800b6d0:	d827      	bhi.n	800b722 <UART_SetConfig+0x506>
 800b6d2:	a201      	add	r2, pc, #4	; (adr r2, 800b6d8 <UART_SetConfig+0x4bc>)
 800b6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d8:	0800b6fd 	.word	0x0800b6fd
 800b6dc:	0800b705 	.word	0x0800b705
 800b6e0:	0800b70d 	.word	0x0800b70d
 800b6e4:	0800b723 	.word	0x0800b723
 800b6e8:	0800b713 	.word	0x0800b713
 800b6ec:	0800b723 	.word	0x0800b723
 800b6f0:	0800b723 	.word	0x0800b723
 800b6f4:	0800b723 	.word	0x0800b723
 800b6f8:	0800b71b 	.word	0x0800b71b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6fc:	f7fd fb28 	bl	8008d50 <HAL_RCC_GetPCLK1Freq>
 800b700:	61f8      	str	r0, [r7, #28]
        break;
 800b702:	e014      	b.n	800b72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b704:	f7fd fb3a 	bl	8008d7c <HAL_RCC_GetPCLK2Freq>
 800b708:	61f8      	str	r0, [r7, #28]
        break;
 800b70a:	e010      	b.n	800b72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b70c:	4b1e      	ldr	r3, [pc, #120]	; (800b788 <UART_SetConfig+0x56c>)
 800b70e:	61fb      	str	r3, [r7, #28]
        break;
 800b710:	e00d      	b.n	800b72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b712:	f7fd fa85 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 800b716:	61f8      	str	r0, [r7, #28]
        break;
 800b718:	e009      	b.n	800b72e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b71a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b71e:	61fb      	str	r3, [r7, #28]
        break;
 800b720:	e005      	b.n	800b72e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800b722:	2300      	movs	r3, #0
 800b724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b72c:	bf00      	nop
    }

    if (pclk != 0U)
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d019      	beq.n	800b768 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	085a      	lsrs	r2, r3, #1
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	441a      	add	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	fbb2 f3f3 	udiv	r3, r2, r3
 800b746:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b0f      	cmp	r3, #15
 800b74c:	d909      	bls.n	800b762 <UART_SetConfig+0x546>
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b754:	d205      	bcs.n	800b762 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60da      	str	r2, [r3, #12]
 800b760:	e002      	b.n	800b768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2200      	movs	r2, #0
 800b772:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b774:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3728      	adds	r7, #40	; 0x28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b782:	bf00      	nop
 800b784:	40008000 	.word	0x40008000
 800b788:	00f42400 	.word	0x00f42400

0800b78c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00a      	beq.n	800b7b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	430a      	orrs	r2, r1
 800b7b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ba:	f003 0302 	and.w	r3, r3, #2
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	430a      	orrs	r2, r1
 800b7d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7dc:	f003 0304 	and.w	r3, r3, #4
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d00a      	beq.n	800b7fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fe:	f003 0308 	and.w	r3, r3, #8
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00a      	beq.n	800b81c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	430a      	orrs	r2, r1
 800b81a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b820:	f003 0310 	and.w	r3, r3, #16
 800b824:	2b00      	cmp	r3, #0
 800b826:	d00a      	beq.n	800b83e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	430a      	orrs	r2, r1
 800b83c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b842:	f003 0320 	and.w	r3, r3, #32
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00a      	beq.n	800b860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	430a      	orrs	r2, r1
 800b85e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d01a      	beq.n	800b8a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	430a      	orrs	r2, r1
 800b880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b88a:	d10a      	bne.n	800b8a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d00a      	beq.n	800b8c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	605a      	str	r2, [r3, #4]
  }
}
 800b8c4:	bf00      	nop
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8e0:	f7fa f83c 	bl	800595c <HAL_GetTick>
 800b8e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f003 0308 	and.w	r3, r3, #8
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d10e      	bne.n	800b912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f82d 	bl	800b962 <UART_WaitOnFlagUntilTimeout>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d001      	beq.n	800b912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e023      	b.n	800b95a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f003 0304 	and.w	r3, r3, #4
 800b91c:	2b04      	cmp	r3, #4
 800b91e:	d10e      	bne.n	800b93e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f817 	bl	800b962 <UART_WaitOnFlagUntilTimeout>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b93a:	2303      	movs	r3, #3
 800b93c:	e00d      	b.n	800b95a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2220      	movs	r2, #32
 800b942:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2220      	movs	r2, #32
 800b948:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}

0800b962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b09c      	sub	sp, #112	; 0x70
 800b966:	af00      	add	r7, sp, #0
 800b968:	60f8      	str	r0, [r7, #12]
 800b96a:	60b9      	str	r1, [r7, #8]
 800b96c:	603b      	str	r3, [r7, #0]
 800b96e:	4613      	mov	r3, r2
 800b970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b972:	e0a5      	b.n	800bac0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	f000 80a1 	beq.w	800bac0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b97e:	f7f9 ffed 	bl	800595c <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d302      	bcc.n	800b994 <UART_WaitOnFlagUntilTimeout+0x32>
 800b98e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b990:	2b00      	cmp	r3, #0
 800b992:	d13e      	bne.n	800ba12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b99c:	e853 3f00 	ldrex	r3, [r3]
 800b9a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b9a8:	667b      	str	r3, [r7, #100]	; 0x64
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9b4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b9b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b9ba:	e841 2300 	strex	r3, r2, [r1]
 800b9be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b9c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d1e6      	bne.n	800b994 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d8:	f023 0301 	bic.w	r3, r3, #1
 800b9dc:	663b      	str	r3, [r7, #96]	; 0x60
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3308      	adds	r3, #8
 800b9e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9e6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b9e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b9ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e5      	bne.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2220      	movs	r2, #32
 800ba04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e067      	b.n	800bae2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0304 	and.w	r3, r3, #4
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d04f      	beq.n	800bac0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba2e:	d147      	bne.n	800bac0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	e853 3f00 	ldrex	r3, [r3]
 800ba46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	461a      	mov	r2, r3
 800ba56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba58:	637b      	str	r3, [r7, #52]	; 0x34
 800ba5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba60:	e841 2300 	strex	r3, r2, [r1]
 800ba64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1e6      	bne.n	800ba3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3308      	adds	r3, #8
 800ba72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	e853 3f00 	ldrex	r3, [r3]
 800ba7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	f023 0301 	bic.w	r3, r3, #1
 800ba82:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3308      	adds	r3, #8
 800ba8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ba8c:	623a      	str	r2, [r7, #32]
 800ba8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba90:	69f9      	ldr	r1, [r7, #28]
 800ba92:	6a3a      	ldr	r2, [r7, #32]
 800ba94:	e841 2300 	strex	r3, r2, [r1]
 800ba98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1e5      	bne.n	800ba6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2220      	movs	r2, #32
 800baa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2220      	movs	r2, #32
 800baaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2220      	movs	r2, #32
 800bab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800babc:	2303      	movs	r3, #3
 800babe:	e010      	b.n	800bae2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	69da      	ldr	r2, [r3, #28]
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	4013      	ands	r3, r2
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	429a      	cmp	r2, r3
 800bace:	bf0c      	ite	eq
 800bad0:	2301      	moveq	r3, #1
 800bad2:	2300      	movne	r3, #0
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	461a      	mov	r2, r3
 800bad8:	79fb      	ldrb	r3, [r7, #7]
 800bada:	429a      	cmp	r2, r3
 800badc:	f43f af4a 	beq.w	800b974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3770      	adds	r7, #112	; 0x70
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800baea:	b480      	push	{r7}
 800baec:	b095      	sub	sp, #84	; 0x54
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bafa:	e853 3f00 	ldrex	r3, [r3]
 800bafe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bb06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb10:	643b      	str	r3, [r7, #64]	; 0x40
 800bb12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb18:	e841 2300 	strex	r3, r2, [r1]
 800bb1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e6      	bne.n	800baf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	3308      	adds	r3, #8
 800bb2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2c:	6a3b      	ldr	r3, [r7, #32]
 800bb2e:	e853 3f00 	ldrex	r3, [r3]
 800bb32:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	f023 0301 	bic.w	r3, r3, #1
 800bb3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3308      	adds	r3, #8
 800bb42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb4c:	e841 2300 	strex	r3, r2, [r1]
 800bb50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1e5      	bne.n	800bb24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d118      	bne.n	800bb92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	e853 3f00 	ldrex	r3, [r3]
 800bb6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	f023 0310 	bic.w	r3, r3, #16
 800bb74:	647b      	str	r3, [r7, #68]	; 0x44
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb7e:	61bb      	str	r3, [r7, #24]
 800bb80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb82:	6979      	ldr	r1, [r7, #20]
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	e841 2300 	strex	r3, r2, [r1]
 800bb8a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1e6      	bne.n	800bb60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2220      	movs	r2, #32
 800bb96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	665a      	str	r2, [r3, #100]	; 0x64
}
 800bba4:	bf00      	nop
 800bba6:	3754      	adds	r7, #84	; 0x54
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f7ff fb0e 	bl	800b1f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbd4:	bf00      	nop
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b08f      	sub	sp, #60	; 0x3c
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbe8:	2b21      	cmp	r3, #33	; 0x21
 800bbea:	d14d      	bne.n	800bc88 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d132      	bne.n	800bc5e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	e853 3f00 	ldrex	r3, [r3]
 800bc04:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc18:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc1e:	e841 2300 	strex	r3, r2, [r1]
 800bc22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d1e6      	bne.n	800bbf8 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc3e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	461a      	mov	r2, r3
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	61bb      	str	r3, [r7, #24]
 800bc4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4c:	6979      	ldr	r1, [r7, #20]
 800bc4e:	69ba      	ldr	r2, [r7, #24]
 800bc50:	e841 2300 	strex	r3, r2, [r1]
 800bc54:	613b      	str	r3, [r7, #16]
   return(result);
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d1e6      	bne.n	800bc2a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bc5c:	e014      	b.n	800bc88 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc62:	781a      	ldrb	r2, [r3, #0]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	b292      	uxth	r2, r2
 800bc6a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bc88:	bf00      	nop
 800bc8a:	373c      	adds	r7, #60	; 0x3c
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b091      	sub	sp, #68	; 0x44
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bca0:	2b21      	cmp	r3, #33	; 0x21
 800bca2:	d151      	bne.n	800bd48 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d132      	bne.n	800bd16 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	623b      	str	r3, [r7, #32]
   return(result);
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcce:	633b      	str	r3, [r7, #48]	; 0x30
 800bcd0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcd6:	e841 2300 	strex	r3, r2, [r1]
 800bcda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bcdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e6      	bne.n	800bcb0 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	e853 3f00 	ldrex	r3, [r3]
 800bcee:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd00:	61fb      	str	r3, [r7, #28]
 800bd02:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd04:	69b9      	ldr	r1, [r7, #24]
 800bd06:	69fa      	ldr	r2, [r7, #28]
 800bd08:	e841 2300 	strex	r3, r2, [r1]
 800bd0c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1e6      	bne.n	800bce2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bd14:	e018      	b.n	800bd48 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd1e:	881a      	ldrh	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd28:	b292      	uxth	r2, r2
 800bd2a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd30:	1c9a      	adds	r2, r3, #2
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800bd48:	bf00      	nop
 800bd4a:	3744      	adds	r7, #68	; 0x44
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	e853 3f00 	ldrex	r3, [r3]
 800bd68:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd70:	61fb      	str	r3, [r7, #28]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	61bb      	str	r3, [r7, #24]
 800bd7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	6979      	ldr	r1, [r7, #20]
 800bd80:	69ba      	ldr	r2, [r7, #24]
 800bd82:	e841 2300 	strex	r3, r2, [r1]
 800bd86:	613b      	str	r3, [r7, #16]
   return(result);
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d1e6      	bne.n	800bd5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f7f6 f9cc 	bl	8002138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bda0:	bf00      	nop
 800bda2:	3720      	adds	r7, #32
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b083      	sub	sp, #12
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bdb0:	bf00      	nop
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bdca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdce:	2b84      	cmp	r3, #132	; 0x84
 800bdd0:	d005      	beq.n	800bdde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bdd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	4413      	add	r3, r2
 800bdda:	3303      	adds	r3, #3
 800bddc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bdde:	68fb      	ldr	r3, [r7, #12]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bdf0:	f000 feba 	bl	800cb68 <vTaskStartScheduler>
  
  return osOK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bdfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdfc:	b089      	sub	sp, #36	; 0x24
 800bdfe:	af04      	add	r7, sp, #16
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d020      	beq.n	800be4e <osThreadCreate+0x54>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01c      	beq.n	800be4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685c      	ldr	r4, [r3, #4]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681d      	ldr	r5, [r3, #0]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	691e      	ldr	r6, [r3, #16]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff ffc8 	bl	800bdbc <makeFreeRtosPriority>
 800be2c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	695b      	ldr	r3, [r3, #20]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be36:	9202      	str	r2, [sp, #8]
 800be38:	9301      	str	r3, [sp, #4]
 800be3a:	9100      	str	r1, [sp, #0]
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	4632      	mov	r2, r6
 800be40:	4629      	mov	r1, r5
 800be42:	4620      	mov	r0, r4
 800be44:	f000 fcc8 	bl	800c7d8 <xTaskCreateStatic>
 800be48:	4603      	mov	r3, r0
 800be4a:	60fb      	str	r3, [r7, #12]
 800be4c:	e01c      	b.n	800be88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	685c      	ldr	r4, [r3, #4]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be5a:	b29e      	uxth	r6, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be62:	4618      	mov	r0, r3
 800be64:	f7ff ffaa 	bl	800bdbc <makeFreeRtosPriority>
 800be68:	4602      	mov	r2, r0
 800be6a:	f107 030c 	add.w	r3, r7, #12
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	9200      	str	r2, [sp, #0]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	4632      	mov	r2, r6
 800be76:	4629      	mov	r1, r5
 800be78:	4620      	mov	r0, r4
 800be7a:	f000 fd0a 	bl	800c892 <xTaskCreate>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b01      	cmp	r3, #1
 800be82:	d001      	beq.n	800be88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be84:	2300      	movs	r3, #0
 800be86:	e000      	b.n	800be8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be88:	68fb      	ldr	r3, [r7, #12]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800be92:	b580      	push	{r7, lr}
 800be94:	b084      	sub	sp, #16
 800be96:	af00      	add	r7, sp, #0
 800be98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <osDelay+0x16>
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	e000      	b.n	800beaa <osDelay+0x18>
 800bea8:	2301      	movs	r3, #1
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 fe28 	bl	800cb00 <vTaskDelay>
  
  return osOK;
 800beb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800beba:	b480      	push	{r7}
 800bebc:	b083      	sub	sp, #12
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f103 0208 	add.w	r2, r3, #8
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f103 0208 	add.w	r2, r3, #8
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f103 0208 	add.w	r2, r3, #8
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800beee:	bf00      	nop
 800bef0:	370c      	adds	r7, #12
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800befa:	b480      	push	{r7}
 800befc:	b083      	sub	sp, #12
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf08:	bf00      	nop
 800bf0a:	370c      	adds	r7, #12
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	1c5a      	adds	r2, r3, #1
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
}
 800bf50:	bf00      	nop
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
 800bf64:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d103      	bne.n	800bf7c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	691b      	ldr	r3, [r3, #16]
 800bf78:	60fb      	str	r3, [r7, #12]
 800bf7a:	e00c      	b.n	800bf96 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	e002      	b.n	800bf8a <vListInsert+0x2e>
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68ba      	ldr	r2, [r7, #8]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d2f6      	bcs.n	800bf84 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	685a      	ldr	r2, [r3, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	687a      	ldr	r2, [r7, #4]
 800bfb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	1c5a      	adds	r2, r3, #1
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	601a      	str	r2, [r3, #0]
}
 800bfc2:	bf00      	nop
 800bfc4:	3714      	adds	r7, #20
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b085      	sub	sp, #20
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	691b      	ldr	r3, [r3, #16]
 800bfda:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	6892      	ldr	r2, [r2, #8]
 800bfe4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	6852      	ldr	r2, [r2, #4]
 800bfee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d103      	bne.n	800c002 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	689a      	ldr	r2, [r3, #8]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	1e5a      	subs	r2, r3, #1
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr
	...

0800c024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c03c:	f383 8811 	msr	BASEPRI, r3
 800c040:	f3bf 8f6f 	isb	sy
 800c044:	f3bf 8f4f 	dsb	sy
 800c048:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c04a:	bf00      	nop
 800c04c:	e7fe      	b.n	800c04c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c04e:	f001 fbc1 	bl	800d7d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c05a:	68f9      	ldr	r1, [r7, #12]
 800c05c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c05e:	fb01 f303 	mul.w	r3, r1, r3
 800c062:	441a      	add	r2, r3
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681a      	ldr	r2, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07e:	3b01      	subs	r3, #1
 800c080:	68f9      	ldr	r1, [r7, #12]
 800c082:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c084:	fb01 f303 	mul.w	r3, r1, r3
 800c088:	441a      	add	r2, r3
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	22ff      	movs	r2, #255	; 0xff
 800c092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	22ff      	movs	r2, #255	; 0xff
 800c09a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d114      	bne.n	800c0ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d01a      	beq.n	800c0e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	3310      	adds	r3, #16
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 ff9b 	bl	800cfec <xTaskRemoveFromEventList>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d012      	beq.n	800c0e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0bc:	4b0c      	ldr	r3, [pc, #48]	; (800c0f0 <xQueueGenericReset+0xcc>)
 800c0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	e009      	b.n	800c0e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3310      	adds	r3, #16
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7ff fef1 	bl	800beba <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3324      	adds	r3, #36	; 0x24
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f7ff feec 	bl	800beba <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c0e2:	f001 fba7 	bl	800d834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c0e6:	2301      	movs	r3, #1
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	e000ed04 	.word	0xe000ed04

0800c0f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b08a      	sub	sp, #40	; 0x28
 800c0f8:	af02      	add	r7, sp, #8
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	4613      	mov	r3, r2
 800c100:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10a      	bne.n	800c11e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10c:	f383 8811 	msr	BASEPRI, r3
 800c110:	f3bf 8f6f 	isb	sy
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	613b      	str	r3, [r7, #16]
}
 800c11a:	bf00      	nop
 800c11c:	e7fe      	b.n	800c11c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	fb02 f303 	mul.w	r3, r2, r3
 800c126:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	3348      	adds	r3, #72	; 0x48
 800c12c:	4618      	mov	r0, r3
 800c12e:	f001 fc33 	bl	800d998 <pvPortMalloc>
 800c132:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d011      	beq.n	800c15e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	3348      	adds	r3, #72	; 0x48
 800c142:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c14c:	79fa      	ldrb	r2, [r7, #7]
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	4613      	mov	r3, r2
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 f805 	bl	800c168 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c15e:	69bb      	ldr	r3, [r7, #24]
	}
 800c160:	4618      	mov	r0, r3
 800c162:	3720      	adds	r7, #32
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d103      	bne.n	800c184 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c17c:	69bb      	ldr	r3, [r7, #24]
 800c17e:	69ba      	ldr	r2, [r7, #24]
 800c180:	601a      	str	r2, [r3, #0]
 800c182:	e002      	b.n	800c18a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c196:	2101      	movs	r1, #1
 800c198:	69b8      	ldr	r0, [r7, #24]
 800c19a:	f7ff ff43 	bl	800c024 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c19e:	bf00      	nop
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
	...

0800c1a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b08e      	sub	sp, #56	; 0x38
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
 800c1b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10a      	bne.n	800c1da <xQueueGenericSend+0x32>
	__asm volatile
 800c1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c8:	f383 8811 	msr	BASEPRI, r3
 800c1cc:	f3bf 8f6f 	isb	sy
 800c1d0:	f3bf 8f4f 	dsb	sy
 800c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c1d6:	bf00      	nop
 800c1d8:	e7fe      	b.n	800c1d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d103      	bne.n	800c1e8 <xQueueGenericSend+0x40>
 800c1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <xQueueGenericSend+0x44>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <xQueueGenericSend+0x46>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10a      	bne.n	800c208 <xQueueGenericSend+0x60>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c204:	bf00      	nop
 800c206:	e7fe      	b.n	800c206 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b02      	cmp	r3, #2
 800c20c:	d103      	bne.n	800c216 <xQueueGenericSend+0x6e>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <xQueueGenericSend+0x72>
 800c216:	2301      	movs	r3, #1
 800c218:	e000      	b.n	800c21c <xQueueGenericSend+0x74>
 800c21a:	2300      	movs	r3, #0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10a      	bne.n	800c236 <xQueueGenericSend+0x8e>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	623b      	str	r3, [r7, #32]
}
 800c232:	bf00      	nop
 800c234:	e7fe      	b.n	800c234 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c236:	f001 f895 	bl	800d364 <xTaskGetSchedulerState>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <xQueueGenericSend+0x9e>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <xQueueGenericSend+0xa2>
 800c246:	2301      	movs	r3, #1
 800c248:	e000      	b.n	800c24c <xQueueGenericSend+0xa4>
 800c24a:	2300      	movs	r3, #0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d10a      	bne.n	800c266 <xQueueGenericSend+0xbe>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	61fb      	str	r3, [r7, #28]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c266:	f001 fab5 	bl	800d7d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c272:	429a      	cmp	r2, r3
 800c274:	d302      	bcc.n	800c27c <xQueueGenericSend+0xd4>
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d129      	bne.n	800c2d0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	68b9      	ldr	r1, [r7, #8]
 800c280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c282:	f000 f96f 	bl	800c564 <prvCopyDataToQueue>
 800c286:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d010      	beq.n	800c2b2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	3324      	adds	r3, #36	; 0x24
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fea9 	bl	800cfec <xTaskRemoveFromEventList>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d013      	beq.n	800c2c8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c2a0:	4b3f      	ldr	r3, [pc, #252]	; (800c3a0 <xQueueGenericSend+0x1f8>)
 800c2a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	e00a      	b.n	800c2c8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d007      	beq.n	800c2c8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c2b8:	4b39      	ldr	r3, [pc, #228]	; (800c3a0 <xQueueGenericSend+0x1f8>)
 800c2ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2be:	601a      	str	r2, [r3, #0]
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c2c8:	f001 fab4 	bl	800d834 <vPortExitCritical>
				return pdPASS;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e063      	b.n	800c398 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d103      	bne.n	800c2de <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2d6:	f001 faad 	bl	800d834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e05c      	b.n	800c398 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2e4:	f107 0314 	add.w	r3, r7, #20
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fee1 	bl	800d0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2f2:	f001 fa9f 	bl	800d834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2f6:	f000 fc97 	bl	800cc28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2fa:	f001 fa6b 	bl	800d7d4 <vPortEnterCritical>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c304:	b25b      	sxtb	r3, r3
 800c306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30a:	d103      	bne.n	800c314 <xQueueGenericSend+0x16c>
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	2200      	movs	r2, #0
 800c310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c316:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c31a:	b25b      	sxtb	r3, r3
 800c31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c320:	d103      	bne.n	800c32a <xQueueGenericSend+0x182>
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	2200      	movs	r2, #0
 800c326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c32a:	f001 fa83 	bl	800d834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c32e:	1d3a      	adds	r2, r7, #4
 800c330:	f107 0314 	add.w	r3, r7, #20
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f000 fed0 	bl	800d0dc <xTaskCheckForTimeOut>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d124      	bne.n	800c38c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c344:	f000 fa06 	bl	800c754 <prvIsQueueFull>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d018      	beq.n	800c380 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	3310      	adds	r3, #16
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f000 fe24 	bl	800cfa4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c35c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c35e:	f000 f991 	bl	800c684 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c362:	f000 fc6f 	bl	800cc44 <xTaskResumeAll>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	f47f af7c 	bne.w	800c266 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c36e:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <xQueueGenericSend+0x1f8>)
 800c370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c374:	601a      	str	r2, [r3, #0]
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	e772      	b.n	800c266 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c382:	f000 f97f 	bl	800c684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c386:	f000 fc5d 	bl	800cc44 <xTaskResumeAll>
 800c38a:	e76c      	b.n	800c266 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c38c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c38e:	f000 f979 	bl	800c684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c392:	f000 fc57 	bl	800cc44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c396:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3738      	adds	r7, #56	; 0x38
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	e000ed04 	.word	0xe000ed04

0800c3a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08c      	sub	sp, #48	; 0x30
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	60f8      	str	r0, [r7, #12]
 800c3ac:	60b9      	str	r1, [r7, #8]
 800c3ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10a      	bne.n	800c3d4 <xQueueReceive+0x30>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	623b      	str	r3, [r7, #32]
}
 800c3d0:	bf00      	nop
 800c3d2:	e7fe      	b.n	800c3d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d103      	bne.n	800c3e2 <xQueueReceive+0x3e>
 800c3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <xQueueReceive+0x42>
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e000      	b.n	800c3e8 <xQueueReceive+0x44>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d10a      	bne.n	800c402 <xQueueReceive+0x5e>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	61fb      	str	r3, [r7, #28]
}
 800c3fe:	bf00      	nop
 800c400:	e7fe      	b.n	800c400 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c402:	f000 ffaf 	bl	800d364 <xTaskGetSchedulerState>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d102      	bne.n	800c412 <xQueueReceive+0x6e>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <xQueueReceive+0x72>
 800c412:	2301      	movs	r3, #1
 800c414:	e000      	b.n	800c418 <xQueueReceive+0x74>
 800c416:	2300      	movs	r3, #0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10a      	bne.n	800c432 <xQueueReceive+0x8e>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	61bb      	str	r3, [r7, #24]
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c432:	f001 f9cf 	bl	800d7d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d01f      	beq.n	800c482 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c442:	68b9      	ldr	r1, [r7, #8]
 800c444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c446:	f000 f8f7 	bl	800c638 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	1e5a      	subs	r2, r3, #1
 800c44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c450:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00f      	beq.n	800c47a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45c:	3310      	adds	r3, #16
 800c45e:	4618      	mov	r0, r3
 800c460:	f000 fdc4 	bl	800cfec <xTaskRemoveFromEventList>
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d007      	beq.n	800c47a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c46a:	4b3d      	ldr	r3, [pc, #244]	; (800c560 <xQueueReceive+0x1bc>)
 800c46c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c470:	601a      	str	r2, [r3, #0]
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c47a:	f001 f9db 	bl	800d834 <vPortExitCritical>
				return pdPASS;
 800c47e:	2301      	movs	r3, #1
 800c480:	e069      	b.n	800c556 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c488:	f001 f9d4 	bl	800d834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c48c:	2300      	movs	r3, #0
 800c48e:	e062      	b.n	800c556 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	2b00      	cmp	r3, #0
 800c494:	d106      	bne.n	800c4a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c496:	f107 0310 	add.w	r3, r7, #16
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 fe08 	bl	800d0b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4a4:	f001 f9c6 	bl	800d834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4a8:	f000 fbbe 	bl	800cc28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4ac:	f001 f992 	bl	800d7d4 <vPortEnterCritical>
 800c4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4b6:	b25b      	sxtb	r3, r3
 800c4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4bc:	d103      	bne.n	800c4c6 <xQueueReceive+0x122>
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4cc:	b25b      	sxtb	r3, r3
 800c4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d2:	d103      	bne.n	800c4dc <xQueueReceive+0x138>
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4dc:	f001 f9aa 	bl	800d834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4e0:	1d3a      	adds	r2, r7, #4
 800c4e2:	f107 0310 	add.w	r3, r7, #16
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 fdf7 	bl	800d0dc <xTaskCheckForTimeOut>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d123      	bne.n	800c53c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f6:	f000 f917 	bl	800c728 <prvIsQueueEmpty>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d017      	beq.n	800c530 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c502:	3324      	adds	r3, #36	; 0x24
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	4611      	mov	r1, r2
 800c508:	4618      	mov	r0, r3
 800c50a:	f000 fd4b 	bl	800cfa4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c510:	f000 f8b8 	bl	800c684 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c514:	f000 fb96 	bl	800cc44 <xTaskResumeAll>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d189      	bne.n	800c432 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c51e:	4b10      	ldr	r3, [pc, #64]	; (800c560 <xQueueReceive+0x1bc>)
 800c520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	f3bf 8f4f 	dsb	sy
 800c52a:	f3bf 8f6f 	isb	sy
 800c52e:	e780      	b.n	800c432 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c532:	f000 f8a7 	bl	800c684 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c536:	f000 fb85 	bl	800cc44 <xTaskResumeAll>
 800c53a:	e77a      	b.n	800c432 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c53e:	f000 f8a1 	bl	800c684 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c542:	f000 fb7f 	bl	800cc44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c546:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c548:	f000 f8ee 	bl	800c728 <prvIsQueueEmpty>
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f43f af6f 	beq.w	800c432 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c554:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c556:	4618      	mov	r0, r3
 800c558:	3730      	adds	r7, #48	; 0x30
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	e000ed04 	.word	0xe000ed04

0800c564 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	60f8      	str	r0, [r7, #12]
 800c56c:	60b9      	str	r1, [r7, #8]
 800c56e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c570:	2300      	movs	r3, #0
 800c572:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c578:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10d      	bne.n	800c59e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d14d      	bne.n	800c626 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 ff06 	bl	800d3a0 <xTaskPriorityDisinherit>
 800c594:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	609a      	str	r2, [r3, #8]
 800c59c:	e043      	b.n	800c626 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d119      	bne.n	800c5d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	6858      	ldr	r0, [r3, #4]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	68b9      	ldr	r1, [r7, #8]
 800c5b0:	f001 fc06 	bl	800ddc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	685a      	ldr	r2, [r3, #4]
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5bc:	441a      	add	r2, r3
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	429a      	cmp	r2, r3
 800c5cc:	d32b      	bcc.n	800c626 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	605a      	str	r2, [r3, #4]
 800c5d6:	e026      	b.n	800c626 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	68d8      	ldr	r0, [r3, #12]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	68b9      	ldr	r1, [r7, #8]
 800c5e4:	f001 fbec 	bl	800ddc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	68da      	ldr	r2, [r3, #12]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f0:	425b      	negs	r3, r3
 800c5f2:	441a      	add	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	68da      	ldr	r2, [r3, #12]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d207      	bcs.n	800c614 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	689a      	ldr	r2, [r3, #8]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	425b      	negs	r3, r3
 800c60e:	441a      	add	r2, r3
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b02      	cmp	r3, #2
 800c618:	d105      	bne.n	800c626 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d002      	beq.n	800c626 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	3b01      	subs	r3, #1
 800c624:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c62e:	697b      	ldr	r3, [r7, #20]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c646:	2b00      	cmp	r3, #0
 800c648:	d018      	beq.n	800c67c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68da      	ldr	r2, [r3, #12]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c652:	441a      	add	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	68da      	ldr	r2, [r3, #12]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	429a      	cmp	r2, r3
 800c662:	d303      	bcc.n	800c66c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	68d9      	ldr	r1, [r3, #12]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c674:	461a      	mov	r2, r3
 800c676:	6838      	ldr	r0, [r7, #0]
 800c678:	f001 fba2 	bl	800ddc0 <memcpy>
	}
}
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c68c:	f001 f8a2 	bl	800d7d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c696:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c698:	e011      	b.n	800c6be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d012      	beq.n	800c6c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	3324      	adds	r3, #36	; 0x24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f000 fca0 	bl	800cfec <xTaskRemoveFromEventList>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d001      	beq.n	800c6b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c6b2:	f000 fd75 	bl	800d1a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c6b6:	7bfb      	ldrb	r3, [r7, #15]
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	b2db      	uxtb	r3, r3
 800c6bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	dce9      	bgt.n	800c69a <prvUnlockQueue+0x16>
 800c6c6:	e000      	b.n	800c6ca <prvUnlockQueue+0x46>
					break;
 800c6c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	22ff      	movs	r2, #255	; 0xff
 800c6ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c6d2:	f001 f8af 	bl	800d834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6d6:	f001 f87d 	bl	800d7d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6e2:	e011      	b.n	800c708 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	691b      	ldr	r3, [r3, #16]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d012      	beq.n	800c712 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	3310      	adds	r3, #16
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 fc7b 	bl	800cfec <xTaskRemoveFromEventList>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d001      	beq.n	800c700 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6fc:	f000 fd50 	bl	800d1a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c700:	7bbb      	ldrb	r3, [r7, #14]
 800c702:	3b01      	subs	r3, #1
 800c704:	b2db      	uxtb	r3, r3
 800c706:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c708:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	dce9      	bgt.n	800c6e4 <prvUnlockQueue+0x60>
 800c710:	e000      	b.n	800c714 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c712:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	22ff      	movs	r2, #255	; 0xff
 800c718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c71c:	f001 f88a 	bl	800d834 <vPortExitCritical>
}
 800c720:	bf00      	nop
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c730:	f001 f850 	bl	800d7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d102      	bne.n	800c742 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c73c:	2301      	movs	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
 800c740:	e001      	b.n	800c746 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c742:	2300      	movs	r3, #0
 800c744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c746:	f001 f875 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800c74a:	68fb      	ldr	r3, [r7, #12]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c75c:	f001 f83a 	bl	800d7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c768:	429a      	cmp	r2, r3
 800c76a:	d102      	bne.n	800c772 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c76c:	2301      	movs	r3, #1
 800c76e:	60fb      	str	r3, [r7, #12]
 800c770:	e001      	b.n	800c776 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c772:	2300      	movs	r3, #0
 800c774:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c776:	f001 f85d 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800c77a:	68fb      	ldr	r3, [r7, #12]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3710      	adds	r7, #16
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c784:	b480      	push	{r7}
 800c786:	b085      	sub	sp, #20
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c78e:	2300      	movs	r3, #0
 800c790:	60fb      	str	r3, [r7, #12]
 800c792:	e014      	b.n	800c7be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c794:	4a0f      	ldr	r2, [pc, #60]	; (800c7d4 <vQueueAddToRegistry+0x50>)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10b      	bne.n	800c7b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c7a0:	490c      	ldr	r1, [pc, #48]	; (800c7d4 <vQueueAddToRegistry+0x50>)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c7aa:	4a0a      	ldr	r2, [pc, #40]	; (800c7d4 <vQueueAddToRegistry+0x50>)
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	00db      	lsls	r3, r3, #3
 800c7b0:	4413      	add	r3, r2
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c7b6:	e006      	b.n	800c7c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	60fb      	str	r3, [r7, #12]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2b07      	cmp	r3, #7
 800c7c2:	d9e7      	bls.n	800c794 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	20000df8 	.word	0x20000df8

0800c7d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08e      	sub	sp, #56	; 0x38
 800c7dc:	af04      	add	r7, sp, #16
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
 800c7e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10a      	bne.n	800c802 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	623b      	str	r3, [r7, #32]
}
 800c7fe:	bf00      	nop
 800c800:	e7fe      	b.n	800c800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10a      	bne.n	800c81e <xTaskCreateStatic+0x46>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	61fb      	str	r3, [r7, #28]
}
 800c81a:	bf00      	nop
 800c81c:	e7fe      	b.n	800c81c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c81e:	2354      	movs	r3, #84	; 0x54
 800c820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	2b54      	cmp	r3, #84	; 0x54
 800c826:	d00a      	beq.n	800c83e <xTaskCreateStatic+0x66>
	__asm volatile
 800c828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	61bb      	str	r3, [r7, #24]
}
 800c83a:	bf00      	nop
 800c83c:	e7fe      	b.n	800c83c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c83e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c842:	2b00      	cmp	r3, #0
 800c844:	d01e      	beq.n	800c884 <xTaskCreateStatic+0xac>
 800c846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d01b      	beq.n	800c884 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	2202      	movs	r2, #2
 800c85a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c85e:	2300      	movs	r3, #0
 800c860:	9303      	str	r3, [sp, #12]
 800c862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c864:	9302      	str	r3, [sp, #8]
 800c866:	f107 0314 	add.w	r3, r7, #20
 800c86a:	9301      	str	r3, [sp, #4]
 800c86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86e:	9300      	str	r3, [sp, #0]
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	68f8      	ldr	r0, [r7, #12]
 800c878:	f000 f850 	bl	800c91c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c87c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c87e:	f000 f8d5 	bl	800ca2c <prvAddNewTaskToReadyList>
 800c882:	e001      	b.n	800c888 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c884:	2300      	movs	r3, #0
 800c886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c888:	697b      	ldr	r3, [r7, #20]
	}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3728      	adds	r7, #40	; 0x28
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c892:	b580      	push	{r7, lr}
 800c894:	b08c      	sub	sp, #48	; 0x30
 800c896:	af04      	add	r7, sp, #16
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	603b      	str	r3, [r7, #0]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8a2:	88fb      	ldrh	r3, [r7, #6]
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f001 f876 	bl	800d998 <pvPortMalloc>
 800c8ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00e      	beq.n	800c8d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8b4:	2054      	movs	r0, #84	; 0x54
 800c8b6:	f001 f86f 	bl	800d998 <pvPortMalloc>
 800c8ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8bc:	69fb      	ldr	r3, [r7, #28]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	631a      	str	r2, [r3, #48]	; 0x30
 800c8c8:	e005      	b.n	800c8d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c8ca:	6978      	ldr	r0, [r7, #20]
 800c8cc:	f001 f930 	bl	800db30 <vPortFree>
 800c8d0:	e001      	b.n	800c8d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d017      	beq.n	800c90c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c8e4:	88fa      	ldrh	r2, [r7, #6]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9303      	str	r3, [sp, #12]
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	9302      	str	r3, [sp, #8]
 800c8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f4:	9300      	str	r3, [sp, #0]
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	68b9      	ldr	r1, [r7, #8]
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 f80e 	bl	800c91c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c900:	69f8      	ldr	r0, [r7, #28]
 800c902:	f000 f893 	bl	800ca2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c906:	2301      	movs	r3, #1
 800c908:	61bb      	str	r3, [r7, #24]
 800c90a:	e002      	b.n	800c912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c90c:	f04f 33ff 	mov.w	r3, #4294967295
 800c910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c912:	69bb      	ldr	r3, [r7, #24]
	}
 800c914:	4618      	mov	r0, r3
 800c916:	3720      	adds	r7, #32
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}

0800c91c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
 800c928:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c934:	3b01      	subs	r3, #1
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	4413      	add	r3, r2
 800c93a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	f023 0307 	bic.w	r3, r3, #7
 800c942:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d00a      	beq.n	800c964 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	617b      	str	r3, [r7, #20]
}
 800c960:	bf00      	nop
 800c962:	e7fe      	b.n	800c962 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d01f      	beq.n	800c9aa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c96a:	2300      	movs	r3, #0
 800c96c:	61fb      	str	r3, [r7, #28]
 800c96e:	e012      	b.n	800c996 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	4413      	add	r3, r2
 800c976:	7819      	ldrb	r1, [r3, #0]
 800c978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	4413      	add	r3, r2
 800c97e:	3334      	adds	r3, #52	; 0x34
 800c980:	460a      	mov	r2, r1
 800c982:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	69fb      	ldr	r3, [r7, #28]
 800c988:	4413      	add	r3, r2
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d006      	beq.n	800c99e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	3301      	adds	r3, #1
 800c994:	61fb      	str	r3, [r7, #28]
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	2b0f      	cmp	r3, #15
 800c99a:	d9e9      	bls.n	800c970 <prvInitialiseNewTask+0x54>
 800c99c:	e000      	b.n	800c9a0 <prvInitialiseNewTask+0x84>
			{
				break;
 800c99e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9a8:	e003      	b.n	800c9b2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b4:	2b06      	cmp	r3, #6
 800c9b6:	d901      	bls.n	800c9bc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c9b8:	2306      	movs	r3, #6
 800c9ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7ff fa91 	bl	800befa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9da:	3318      	adds	r3, #24
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7ff fa8c 	bl	800befa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ea:	f1c3 0207 	rsb	r2, r3, #7
 800c9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	2200      	movs	r2, #0
 800ca02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca06:	683a      	ldr	r2, [r7, #0]
 800ca08:	68f9      	ldr	r1, [r7, #12]
 800ca0a:	69b8      	ldr	r0, [r7, #24]
 800ca0c:	f000 fdb4 	bl	800d578 <pxPortInitialiseStack>
 800ca10:	4602      	mov	r2, r0
 800ca12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca22:	bf00      	nop
 800ca24:	3720      	adds	r7, #32
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
	...

0800ca2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ca34:	f000 fece 	bl	800d7d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ca38:	4b2a      	ldr	r3, [pc, #168]	; (800cae4 <prvAddNewTaskToReadyList+0xb8>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	4a29      	ldr	r2, [pc, #164]	; (800cae4 <prvAddNewTaskToReadyList+0xb8>)
 800ca40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ca42:	4b29      	ldr	r3, [pc, #164]	; (800cae8 <prvAddNewTaskToReadyList+0xbc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d109      	bne.n	800ca5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ca4a:	4a27      	ldr	r2, [pc, #156]	; (800cae8 <prvAddNewTaskToReadyList+0xbc>)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ca50:	4b24      	ldr	r3, [pc, #144]	; (800cae4 <prvAddNewTaskToReadyList+0xb8>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d110      	bne.n	800ca7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca58:	f000 fbc6 	bl	800d1e8 <prvInitialiseTaskLists>
 800ca5c:	e00d      	b.n	800ca7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca5e:	4b23      	ldr	r3, [pc, #140]	; (800caec <prvAddNewTaskToReadyList+0xc0>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d109      	bne.n	800ca7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca66:	4b20      	ldr	r3, [pc, #128]	; (800cae8 <prvAddNewTaskToReadyList+0xbc>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d802      	bhi.n	800ca7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca74:	4a1c      	ldr	r2, [pc, #112]	; (800cae8 <prvAddNewTaskToReadyList+0xbc>)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca7a:	4b1d      	ldr	r3, [pc, #116]	; (800caf0 <prvAddNewTaskToReadyList+0xc4>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	4a1b      	ldr	r2, [pc, #108]	; (800caf0 <prvAddNewTaskToReadyList+0xc4>)
 800ca82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca88:	2201      	movs	r2, #1
 800ca8a:	409a      	lsls	r2, r3
 800ca8c:	4b19      	ldr	r3, [pc, #100]	; (800caf4 <prvAddNewTaskToReadyList+0xc8>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	4a18      	ldr	r2, [pc, #96]	; (800caf4 <prvAddNewTaskToReadyList+0xc8>)
 800ca94:	6013      	str	r3, [r2, #0]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4a15      	ldr	r2, [pc, #84]	; (800caf8 <prvAddNewTaskToReadyList+0xcc>)
 800caa4:	441a      	add	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	3304      	adds	r3, #4
 800caaa:	4619      	mov	r1, r3
 800caac:	4610      	mov	r0, r2
 800caae:	f7ff fa31 	bl	800bf14 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cab2:	f000 febf 	bl	800d834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cab6:	4b0d      	ldr	r3, [pc, #52]	; (800caec <prvAddNewTaskToReadyList+0xc0>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00e      	beq.n	800cadc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cabe:	4b0a      	ldr	r3, [pc, #40]	; (800cae8 <prvAddNewTaskToReadyList+0xbc>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	429a      	cmp	r2, r3
 800caca:	d207      	bcs.n	800cadc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cacc:	4b0b      	ldr	r3, [pc, #44]	; (800cafc <prvAddNewTaskToReadyList+0xd0>)
 800cace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad2:	601a      	str	r2, [r3, #0]
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	20000f38 	.word	0x20000f38
 800cae8:	20000e38 	.word	0x20000e38
 800caec:	20000f44 	.word	0x20000f44
 800caf0:	20000f54 	.word	0x20000f54
 800caf4:	20000f40 	.word	0x20000f40
 800caf8:	20000e3c 	.word	0x20000e3c
 800cafc:	e000ed04 	.word	0xe000ed04

0800cb00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d017      	beq.n	800cb42 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <vTaskDelay+0x60>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00a      	beq.n	800cb30 <vTaskDelay+0x30>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	f383 8811 	msr	BASEPRI, r3
 800cb22:	f3bf 8f6f 	isb	sy
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	60bb      	str	r3, [r7, #8]
}
 800cb2c:	bf00      	nop
 800cb2e:	e7fe      	b.n	800cb2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cb30:	f000 f87a 	bl	800cc28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb34:	2100      	movs	r1, #0
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f000 fcb8 	bl	800d4ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb3c:	f000 f882 	bl	800cc44 <xTaskResumeAll>
 800cb40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d107      	bne.n	800cb58 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cb48:	4b06      	ldr	r3, [pc, #24]	; (800cb64 <vTaskDelay+0x64>)
 800cb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb58:	bf00      	nop
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	20000f60 	.word	0x20000f60
 800cb64:	e000ed04 	.word	0xe000ed04

0800cb68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08a      	sub	sp, #40	; 0x28
 800cb6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cb72:	2300      	movs	r3, #0
 800cb74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cb76:	463a      	mov	r2, r7
 800cb78:	1d39      	adds	r1, r7, #4
 800cb7a:	f107 0308 	add.w	r3, r7, #8
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7f4 fcaa 	bl	80014d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68ba      	ldr	r2, [r7, #8]
 800cb8a:	9202      	str	r2, [sp, #8]
 800cb8c:	9301      	str	r3, [sp, #4]
 800cb8e:	2300      	movs	r3, #0
 800cb90:	9300      	str	r3, [sp, #0]
 800cb92:	2300      	movs	r3, #0
 800cb94:	460a      	mov	r2, r1
 800cb96:	491e      	ldr	r1, [pc, #120]	; (800cc10 <vTaskStartScheduler+0xa8>)
 800cb98:	481e      	ldr	r0, [pc, #120]	; (800cc14 <vTaskStartScheduler+0xac>)
 800cb9a:	f7ff fe1d 	bl	800c7d8 <xTaskCreateStatic>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	4a1d      	ldr	r2, [pc, #116]	; (800cc18 <vTaskStartScheduler+0xb0>)
 800cba2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cba4:	4b1c      	ldr	r3, [pc, #112]	; (800cc18 <vTaskStartScheduler+0xb0>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cbac:	2301      	movs	r3, #1
 800cbae:	617b      	str	r3, [r7, #20]
 800cbb0:	e001      	b.n	800cbb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d116      	bne.n	800cbea <vTaskStartScheduler+0x82>
	__asm volatile
 800cbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc0:	f383 8811 	msr	BASEPRI, r3
 800cbc4:	f3bf 8f6f 	isb	sy
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	613b      	str	r3, [r7, #16]
}
 800cbce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cbd0:	4b12      	ldr	r3, [pc, #72]	; (800cc1c <vTaskStartScheduler+0xb4>)
 800cbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cbd8:	4b11      	ldr	r3, [pc, #68]	; (800cc20 <vTaskStartScheduler+0xb8>)
 800cbda:	2201      	movs	r2, #1
 800cbdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cbde:	4b11      	ldr	r3, [pc, #68]	; (800cc24 <vTaskStartScheduler+0xbc>)
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cbe4:	f000 fd54 	bl	800d690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cbe8:	e00e      	b.n	800cc08 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbf0:	d10a      	bne.n	800cc08 <vTaskStartScheduler+0xa0>
	__asm volatile
 800cbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf6:	f383 8811 	msr	BASEPRI, r3
 800cbfa:	f3bf 8f6f 	isb	sy
 800cbfe:	f3bf 8f4f 	dsb	sy
 800cc02:	60fb      	str	r3, [r7, #12]
}
 800cc04:	bf00      	nop
 800cc06:	e7fe      	b.n	800cc06 <vTaskStartScheduler+0x9e>
}
 800cc08:	bf00      	nop
 800cc0a:	3718      	adds	r7, #24
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}
 800cc10:	080116d4 	.word	0x080116d4
 800cc14:	0800d1b9 	.word	0x0800d1b9
 800cc18:	20000f5c 	.word	0x20000f5c
 800cc1c:	20000f58 	.word	0x20000f58
 800cc20:	20000f44 	.word	0x20000f44
 800cc24:	20000f3c 	.word	0x20000f3c

0800cc28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cc28:	b480      	push	{r7}
 800cc2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cc2c:	4b04      	ldr	r3, [pc, #16]	; (800cc40 <vTaskSuspendAll+0x18>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	3301      	adds	r3, #1
 800cc32:	4a03      	ldr	r2, [pc, #12]	; (800cc40 <vTaskSuspendAll+0x18>)
 800cc34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cc36:	bf00      	nop
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr
 800cc40:	20000f60 	.word	0x20000f60

0800cc44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cc52:	4b41      	ldr	r3, [pc, #260]	; (800cd58 <xTaskResumeAll+0x114>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d10a      	bne.n	800cc70 <xTaskResumeAll+0x2c>
	__asm volatile
 800cc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	603b      	str	r3, [r7, #0]
}
 800cc6c:	bf00      	nop
 800cc6e:	e7fe      	b.n	800cc6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cc70:	f000 fdb0 	bl	800d7d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cc74:	4b38      	ldr	r3, [pc, #224]	; (800cd58 <xTaskResumeAll+0x114>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	4a37      	ldr	r2, [pc, #220]	; (800cd58 <xTaskResumeAll+0x114>)
 800cc7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc7e:	4b36      	ldr	r3, [pc, #216]	; (800cd58 <xTaskResumeAll+0x114>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d161      	bne.n	800cd4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cc86:	4b35      	ldr	r3, [pc, #212]	; (800cd5c <xTaskResumeAll+0x118>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d05d      	beq.n	800cd4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cc8e:	e02e      	b.n	800ccee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc90:	4b33      	ldr	r3, [pc, #204]	; (800cd60 <xTaskResumeAll+0x11c>)
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3318      	adds	r3, #24
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7ff f996 	bl	800bfce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	3304      	adds	r3, #4
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff f991 	bl	800bfce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	409a      	lsls	r2, r3
 800ccb4:	4b2b      	ldr	r3, [pc, #172]	; (800cd64 <xTaskResumeAll+0x120>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	4a2a      	ldr	r2, [pc, #168]	; (800cd64 <xTaskResumeAll+0x120>)
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4a27      	ldr	r2, [pc, #156]	; (800cd68 <xTaskResumeAll+0x124>)
 800cccc:	441a      	add	r2, r3
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4610      	mov	r0, r2
 800ccd6:	f7ff f91d 	bl	800bf14 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccde:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <xTaskResumeAll+0x128>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d302      	bcc.n	800ccee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cce8:	4b21      	ldr	r3, [pc, #132]	; (800cd70 <xTaskResumeAll+0x12c>)
 800ccea:	2201      	movs	r2, #1
 800ccec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ccee:	4b1c      	ldr	r3, [pc, #112]	; (800cd60 <xTaskResumeAll+0x11c>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1cc      	bne.n	800cc90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d001      	beq.n	800cd00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ccfc:	f000 fb12 	bl	800d324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cd00:	4b1c      	ldr	r3, [pc, #112]	; (800cd74 <xTaskResumeAll+0x130>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d010      	beq.n	800cd2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cd0c:	f000 f836 	bl	800cd7c <xTaskIncrementTick>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cd16:	4b16      	ldr	r3, [pc, #88]	; (800cd70 <xTaskResumeAll+0x12c>)
 800cd18:	2201      	movs	r2, #1
 800cd1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1f1      	bne.n	800cd0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cd28:	4b12      	ldr	r3, [pc, #72]	; (800cd74 <xTaskResumeAll+0x130>)
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cd2e:	4b10      	ldr	r3, [pc, #64]	; (800cd70 <xTaskResumeAll+0x12c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d009      	beq.n	800cd4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cd36:	2301      	movs	r3, #1
 800cd38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cd3a:	4b0f      	ldr	r3, [pc, #60]	; (800cd78 <xTaskResumeAll+0x134>)
 800cd3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	f3bf 8f4f 	dsb	sy
 800cd46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd4a:	f000 fd73 	bl	800d834 <vPortExitCritical>

	return xAlreadyYielded;
 800cd4e:	68bb      	ldr	r3, [r7, #8]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3710      	adds	r7, #16
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}
 800cd58:	20000f60 	.word	0x20000f60
 800cd5c:	20000f38 	.word	0x20000f38
 800cd60:	20000ef8 	.word	0x20000ef8
 800cd64:	20000f40 	.word	0x20000f40
 800cd68:	20000e3c 	.word	0x20000e3c
 800cd6c:	20000e38 	.word	0x20000e38
 800cd70:	20000f4c 	.word	0x20000f4c
 800cd74:	20000f48 	.word	0x20000f48
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b086      	sub	sp, #24
 800cd80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd86:	4b4e      	ldr	r3, [pc, #312]	; (800cec0 <xTaskIncrementTick+0x144>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	f040 808e 	bne.w	800ceac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cd90:	4b4c      	ldr	r3, [pc, #304]	; (800cec4 <xTaskIncrementTick+0x148>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	3301      	adds	r3, #1
 800cd96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cd98:	4a4a      	ldr	r2, [pc, #296]	; (800cec4 <xTaskIncrementTick+0x148>)
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d120      	bne.n	800cde6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cda4:	4b48      	ldr	r3, [pc, #288]	; (800cec8 <xTaskIncrementTick+0x14c>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00a      	beq.n	800cdc4 <xTaskIncrementTick+0x48>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	603b      	str	r3, [r7, #0]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <xTaskIncrementTick+0x46>
 800cdc4:	4b40      	ldr	r3, [pc, #256]	; (800cec8 <xTaskIncrementTick+0x14c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	60fb      	str	r3, [r7, #12]
 800cdca:	4b40      	ldr	r3, [pc, #256]	; (800cecc <xTaskIncrementTick+0x150>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a3e      	ldr	r2, [pc, #248]	; (800cec8 <xTaskIncrementTick+0x14c>)
 800cdd0:	6013      	str	r3, [r2, #0]
 800cdd2:	4a3e      	ldr	r2, [pc, #248]	; (800cecc <xTaskIncrementTick+0x150>)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6013      	str	r3, [r2, #0]
 800cdd8:	4b3d      	ldr	r3, [pc, #244]	; (800ced0 <xTaskIncrementTick+0x154>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	3301      	adds	r3, #1
 800cdde:	4a3c      	ldr	r2, [pc, #240]	; (800ced0 <xTaskIncrementTick+0x154>)
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	f000 fa9f 	bl	800d324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cde6:	4b3b      	ldr	r3, [pc, #236]	; (800ced4 <xTaskIncrementTick+0x158>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d348      	bcc.n	800ce82 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cdf0:	4b35      	ldr	r3, [pc, #212]	; (800cec8 <xTaskIncrementTick+0x14c>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d104      	bne.n	800ce04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdfa:	4b36      	ldr	r3, [pc, #216]	; (800ced4 <xTaskIncrementTick+0x158>)
 800cdfc:	f04f 32ff 	mov.w	r2, #4294967295
 800ce00:	601a      	str	r2, [r3, #0]
					break;
 800ce02:	e03e      	b.n	800ce82 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce04:	4b30      	ldr	r3, [pc, #192]	; (800cec8 <xTaskIncrementTick+0x14c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ce14:	693a      	ldr	r2, [r7, #16]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d203      	bcs.n	800ce24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ce1c:	4a2d      	ldr	r2, [pc, #180]	; (800ced4 <xTaskIncrementTick+0x158>)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ce22:	e02e      	b.n	800ce82 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	3304      	adds	r3, #4
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff f8d0 	bl	800bfce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d004      	beq.n	800ce40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	3318      	adds	r3, #24
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7ff f8c7 	bl	800bfce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce44:	2201      	movs	r2, #1
 800ce46:	409a      	lsls	r2, r3
 800ce48:	4b23      	ldr	r3, [pc, #140]	; (800ced8 <xTaskIncrementTick+0x15c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	4a22      	ldr	r2, [pc, #136]	; (800ced8 <xTaskIncrementTick+0x15c>)
 800ce50:	6013      	str	r3, [r2, #0]
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce56:	4613      	mov	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	4a1f      	ldr	r2, [pc, #124]	; (800cedc <xTaskIncrementTick+0x160>)
 800ce60:	441a      	add	r2, r3
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	3304      	adds	r3, #4
 800ce66:	4619      	mov	r1, r3
 800ce68:	4610      	mov	r0, r2
 800ce6a:	f7ff f853 	bl	800bf14 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce72:	4b1b      	ldr	r3, [pc, #108]	; (800cee0 <xTaskIncrementTick+0x164>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3b9      	bcc.n	800cdf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ce80:	e7b6      	b.n	800cdf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ce82:	4b17      	ldr	r3, [pc, #92]	; (800cee0 <xTaskIncrementTick+0x164>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce88:	4914      	ldr	r1, [pc, #80]	; (800cedc <xTaskIncrementTick+0x160>)
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	440b      	add	r3, r1
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d901      	bls.n	800ce9e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ce9e:	4b11      	ldr	r3, [pc, #68]	; (800cee4 <xTaskIncrementTick+0x168>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d007      	beq.n	800ceb6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cea6:	2301      	movs	r3, #1
 800cea8:	617b      	str	r3, [r7, #20]
 800ceaa:	e004      	b.n	800ceb6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ceac:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <xTaskIncrementTick+0x16c>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	4a0d      	ldr	r2, [pc, #52]	; (800cee8 <xTaskIncrementTick+0x16c>)
 800ceb4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ceb6:	697b      	ldr	r3, [r7, #20]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3718      	adds	r7, #24
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	20000f60 	.word	0x20000f60
 800cec4:	20000f3c 	.word	0x20000f3c
 800cec8:	20000ef0 	.word	0x20000ef0
 800cecc:	20000ef4 	.word	0x20000ef4
 800ced0:	20000f50 	.word	0x20000f50
 800ced4:	20000f58 	.word	0x20000f58
 800ced8:	20000f40 	.word	0x20000f40
 800cedc:	20000e3c 	.word	0x20000e3c
 800cee0:	20000e38 	.word	0x20000e38
 800cee4:	20000f4c 	.word	0x20000f4c
 800cee8:	20000f48 	.word	0x20000f48

0800ceec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ceec:	b480      	push	{r7}
 800ceee:	b087      	sub	sp, #28
 800cef0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cef2:	4b27      	ldr	r3, [pc, #156]	; (800cf90 <vTaskSwitchContext+0xa4>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d003      	beq.n	800cf02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cefa:	4b26      	ldr	r3, [pc, #152]	; (800cf94 <vTaskSwitchContext+0xa8>)
 800cefc:	2201      	movs	r2, #1
 800cefe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cf00:	e03f      	b.n	800cf82 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800cf02:	4b24      	ldr	r3, [pc, #144]	; (800cf94 <vTaskSwitchContext+0xa8>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf08:	4b23      	ldr	r3, [pc, #140]	; (800cf98 <vTaskSwitchContext+0xac>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	fab3 f383 	clz	r3, r3
 800cf14:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cf16:	7afb      	ldrb	r3, [r7, #11]
 800cf18:	f1c3 031f 	rsb	r3, r3, #31
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	491f      	ldr	r1, [pc, #124]	; (800cf9c <vTaskSwitchContext+0xb0>)
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	4613      	mov	r3, r2
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	4413      	add	r3, r2
 800cf28:	009b      	lsls	r3, r3, #2
 800cf2a:	440b      	add	r3, r1
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d10a      	bne.n	800cf48 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cf32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf36:	f383 8811 	msr	BASEPRI, r3
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	607b      	str	r3, [r7, #4]
}
 800cf44:	bf00      	nop
 800cf46:	e7fe      	b.n	800cf46 <vTaskSwitchContext+0x5a>
 800cf48:	697a      	ldr	r2, [r7, #20]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	009b      	lsls	r3, r3, #2
 800cf4e:	4413      	add	r3, r2
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4a12      	ldr	r2, [pc, #72]	; (800cf9c <vTaskSwitchContext+0xb0>)
 800cf54:	4413      	add	r3, r2
 800cf56:	613b      	str	r3, [r7, #16]
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	605a      	str	r2, [r3, #4]
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	693b      	ldr	r3, [r7, #16]
 800cf68:	3308      	adds	r3, #8
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d104      	bne.n	800cf78 <vTaskSwitchContext+0x8c>
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	685b      	ldr	r3, [r3, #4]
 800cf72:	685a      	ldr	r2, [r3, #4]
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	605a      	str	r2, [r3, #4]
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	4a08      	ldr	r2, [pc, #32]	; (800cfa0 <vTaskSwitchContext+0xb4>)
 800cf80:	6013      	str	r3, [r2, #0]
}
 800cf82:	bf00      	nop
 800cf84:	371c      	adds	r7, #28
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20000f60 	.word	0x20000f60
 800cf94:	20000f4c 	.word	0x20000f4c
 800cf98:	20000f40 	.word	0x20000f40
 800cf9c:	20000e3c 	.word	0x20000e3c
 800cfa0:	20000e38 	.word	0x20000e38

0800cfa4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d10a      	bne.n	800cfca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb8:	f383 8811 	msr	BASEPRI, r3
 800cfbc:	f3bf 8f6f 	isb	sy
 800cfc0:	f3bf 8f4f 	dsb	sy
 800cfc4:	60fb      	str	r3, [r7, #12]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cfca:	4b07      	ldr	r3, [pc, #28]	; (800cfe8 <vTaskPlaceOnEventList+0x44>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3318      	adds	r3, #24
 800cfd0:	4619      	mov	r1, r3
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7fe ffc2 	bl	800bf5c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cfd8:	2101      	movs	r1, #1
 800cfda:	6838      	ldr	r0, [r7, #0]
 800cfdc:	f000 fa66 	bl	800d4ac <prvAddCurrentTaskToDelayedList>
}
 800cfe0:	bf00      	nop
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	20000e38 	.word	0x20000e38

0800cfec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b086      	sub	sp, #24
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10a      	bne.n	800d018 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	60fb      	str	r3, [r7, #12]
}
 800d014:	bf00      	nop
 800d016:	e7fe      	b.n	800d016 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	3318      	adds	r3, #24
 800d01c:	4618      	mov	r0, r3
 800d01e:	f7fe ffd6 	bl	800bfce <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d022:	4b1d      	ldr	r3, [pc, #116]	; (800d098 <xTaskRemoveFromEventList+0xac>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d11c      	bne.n	800d064 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe ffcd 	bl	800bfce <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d038:	2201      	movs	r2, #1
 800d03a:	409a      	lsls	r2, r3
 800d03c:	4b17      	ldr	r3, [pc, #92]	; (800d09c <xTaskRemoveFromEventList+0xb0>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4313      	orrs	r3, r2
 800d042:	4a16      	ldr	r2, [pc, #88]	; (800d09c <xTaskRemoveFromEventList+0xb0>)
 800d044:	6013      	str	r3, [r2, #0]
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04a:	4613      	mov	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4a13      	ldr	r2, [pc, #76]	; (800d0a0 <xTaskRemoveFromEventList+0xb4>)
 800d054:	441a      	add	r2, r3
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	3304      	adds	r3, #4
 800d05a:	4619      	mov	r1, r3
 800d05c:	4610      	mov	r0, r2
 800d05e:	f7fe ff59 	bl	800bf14 <vListInsertEnd>
 800d062:	e005      	b.n	800d070 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	3318      	adds	r3, #24
 800d068:	4619      	mov	r1, r3
 800d06a:	480e      	ldr	r0, [pc, #56]	; (800d0a4 <xTaskRemoveFromEventList+0xb8>)
 800d06c:	f7fe ff52 	bl	800bf14 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d074:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <xTaskRemoveFromEventList+0xbc>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d905      	bls.n	800d08a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d07e:	2301      	movs	r3, #1
 800d080:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d082:	4b0a      	ldr	r3, [pc, #40]	; (800d0ac <xTaskRemoveFromEventList+0xc0>)
 800d084:	2201      	movs	r2, #1
 800d086:	601a      	str	r2, [r3, #0]
 800d088:	e001      	b.n	800d08e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d08a:	2300      	movs	r3, #0
 800d08c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d08e:	697b      	ldr	r3, [r7, #20]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3718      	adds	r7, #24
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20000f60 	.word	0x20000f60
 800d09c:	20000f40 	.word	0x20000f40
 800d0a0:	20000e3c 	.word	0x20000e3c
 800d0a4:	20000ef8 	.word	0x20000ef8
 800d0a8:	20000e38 	.word	0x20000e38
 800d0ac:	20000f4c 	.word	0x20000f4c

0800d0b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d0b8:	4b06      	ldr	r3, [pc, #24]	; (800d0d4 <vTaskInternalSetTimeOutState+0x24>)
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d0c0:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <vTaskInternalSetTimeOutState+0x28>)
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	605a      	str	r2, [r3, #4]
}
 800d0c8:	bf00      	nop
 800d0ca:	370c      	adds	r7, #12
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	20000f50 	.word	0x20000f50
 800d0d8:	20000f3c 	.word	0x20000f3c

0800d0dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b088      	sub	sp, #32
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	613b      	str	r3, [r7, #16]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	60fb      	str	r3, [r7, #12]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d11e:	f000 fb59 	bl	800d7d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d122:	4b1d      	ldr	r3, [pc, #116]	; (800d198 <xTaskCheckForTimeOut+0xbc>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13a:	d102      	bne.n	800d142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d13c:	2300      	movs	r3, #0
 800d13e:	61fb      	str	r3, [r7, #28]
 800d140:	e023      	b.n	800d18a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	4b15      	ldr	r3, [pc, #84]	; (800d19c <xTaskCheckForTimeOut+0xc0>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d007      	beq.n	800d15e <xTaskCheckForTimeOut+0x82>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	69ba      	ldr	r2, [r7, #24]
 800d154:	429a      	cmp	r2, r3
 800d156:	d302      	bcc.n	800d15e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d158:	2301      	movs	r3, #1
 800d15a:	61fb      	str	r3, [r7, #28]
 800d15c:	e015      	b.n	800d18a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	429a      	cmp	r2, r3
 800d166:	d20b      	bcs.n	800d180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	1ad2      	subs	r2, r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f7ff ff9b 	bl	800d0b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d17a:	2300      	movs	r3, #0
 800d17c:	61fb      	str	r3, [r7, #28]
 800d17e:	e004      	b.n	800d18a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	2200      	movs	r2, #0
 800d184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d186:	2301      	movs	r3, #1
 800d188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d18a:	f000 fb53 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800d18e:	69fb      	ldr	r3, [r7, #28]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3720      	adds	r7, #32
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	20000f3c 	.word	0x20000f3c
 800d19c:	20000f50 	.word	0x20000f50

0800d1a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d1a4:	4b03      	ldr	r3, [pc, #12]	; (800d1b4 <vTaskMissedYield+0x14>)
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	601a      	str	r2, [r3, #0]
}
 800d1aa:	bf00      	nop
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b2:	4770      	bx	lr
 800d1b4:	20000f4c 	.word	0x20000f4c

0800d1b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d1c0:	f000 f852 	bl	800d268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d1c4:	4b06      	ldr	r3, [pc, #24]	; (800d1e0 <prvIdleTask+0x28>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d9f9      	bls.n	800d1c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d1cc:	4b05      	ldr	r3, [pc, #20]	; (800d1e4 <prvIdleTask+0x2c>)
 800d1ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1d2:	601a      	str	r2, [r3, #0]
 800d1d4:	f3bf 8f4f 	dsb	sy
 800d1d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d1dc:	e7f0      	b.n	800d1c0 <prvIdleTask+0x8>
 800d1de:	bf00      	nop
 800d1e0:	20000e3c 	.word	0x20000e3c
 800d1e4:	e000ed04 	.word	0xe000ed04

0800d1e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	607b      	str	r3, [r7, #4]
 800d1f2:	e00c      	b.n	800d20e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4a12      	ldr	r2, [pc, #72]	; (800d248 <prvInitialiseTaskLists+0x60>)
 800d200:	4413      	add	r3, r2
 800d202:	4618      	mov	r0, r3
 800d204:	f7fe fe59 	bl	800beba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3301      	adds	r3, #1
 800d20c:	607b      	str	r3, [r7, #4]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b06      	cmp	r3, #6
 800d212:	d9ef      	bls.n	800d1f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d214:	480d      	ldr	r0, [pc, #52]	; (800d24c <prvInitialiseTaskLists+0x64>)
 800d216:	f7fe fe50 	bl	800beba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d21a:	480d      	ldr	r0, [pc, #52]	; (800d250 <prvInitialiseTaskLists+0x68>)
 800d21c:	f7fe fe4d 	bl	800beba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d220:	480c      	ldr	r0, [pc, #48]	; (800d254 <prvInitialiseTaskLists+0x6c>)
 800d222:	f7fe fe4a 	bl	800beba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d226:	480c      	ldr	r0, [pc, #48]	; (800d258 <prvInitialiseTaskLists+0x70>)
 800d228:	f7fe fe47 	bl	800beba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d22c:	480b      	ldr	r0, [pc, #44]	; (800d25c <prvInitialiseTaskLists+0x74>)
 800d22e:	f7fe fe44 	bl	800beba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d232:	4b0b      	ldr	r3, [pc, #44]	; (800d260 <prvInitialiseTaskLists+0x78>)
 800d234:	4a05      	ldr	r2, [pc, #20]	; (800d24c <prvInitialiseTaskLists+0x64>)
 800d236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d238:	4b0a      	ldr	r3, [pc, #40]	; (800d264 <prvInitialiseTaskLists+0x7c>)
 800d23a:	4a05      	ldr	r2, [pc, #20]	; (800d250 <prvInitialiseTaskLists+0x68>)
 800d23c:	601a      	str	r2, [r3, #0]
}
 800d23e:	bf00      	nop
 800d240:	3708      	adds	r7, #8
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20000e3c 	.word	0x20000e3c
 800d24c:	20000ec8 	.word	0x20000ec8
 800d250:	20000edc 	.word	0x20000edc
 800d254:	20000ef8 	.word	0x20000ef8
 800d258:	20000f0c 	.word	0x20000f0c
 800d25c:	20000f24 	.word	0x20000f24
 800d260:	20000ef0 	.word	0x20000ef0
 800d264:	20000ef4 	.word	0x20000ef4

0800d268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d26e:	e019      	b.n	800d2a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d270:	f000 fab0 	bl	800d7d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d274:	4b10      	ldr	r3, [pc, #64]	; (800d2b8 <prvCheckTasksWaitingTermination+0x50>)
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	68db      	ldr	r3, [r3, #12]
 800d27a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	3304      	adds	r3, #4
 800d280:	4618      	mov	r0, r3
 800d282:	f7fe fea4 	bl	800bfce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d286:	4b0d      	ldr	r3, [pc, #52]	; (800d2bc <prvCheckTasksWaitingTermination+0x54>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	3b01      	subs	r3, #1
 800d28c:	4a0b      	ldr	r2, [pc, #44]	; (800d2bc <prvCheckTasksWaitingTermination+0x54>)
 800d28e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d290:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <prvCheckTasksWaitingTermination+0x58>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3b01      	subs	r3, #1
 800d296:	4a0a      	ldr	r2, [pc, #40]	; (800d2c0 <prvCheckTasksWaitingTermination+0x58>)
 800d298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d29a:	f000 facb 	bl	800d834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f000 f810 	bl	800d2c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2a4:	4b06      	ldr	r3, [pc, #24]	; (800d2c0 <prvCheckTasksWaitingTermination+0x58>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d1e1      	bne.n	800d270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d2ac:	bf00      	nop
 800d2ae:	bf00      	nop
 800d2b0:	3708      	adds	r7, #8
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
 800d2b6:	bf00      	nop
 800d2b8:	20000f0c 	.word	0x20000f0c
 800d2bc:	20000f38 	.word	0x20000f38
 800d2c0:	20000f20 	.word	0x20000f20

0800d2c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d108      	bne.n	800d2e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2da:	4618      	mov	r0, r3
 800d2dc:	f000 fc28 	bl	800db30 <vPortFree>
				vPortFree( pxTCB );
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fc25 	bl	800db30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d2e6:	e018      	b.n	800d31a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d103      	bne.n	800d2fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fc1c 	bl	800db30 <vPortFree>
	}
 800d2f8:	e00f      	b.n	800d31a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d300:	2b02      	cmp	r3, #2
 800d302:	d00a      	beq.n	800d31a <prvDeleteTCB+0x56>
	__asm volatile
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	60fb      	str	r3, [r7, #12]
}
 800d316:	bf00      	nop
 800d318:	e7fe      	b.n	800d318 <prvDeleteTCB+0x54>
	}
 800d31a:	bf00      	nop
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d32a:	4b0c      	ldr	r3, [pc, #48]	; (800d35c <prvResetNextTaskUnblockTime+0x38>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d104      	bne.n	800d33e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d334:	4b0a      	ldr	r3, [pc, #40]	; (800d360 <prvResetNextTaskUnblockTime+0x3c>)
 800d336:	f04f 32ff 	mov.w	r2, #4294967295
 800d33a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d33c:	e008      	b.n	800d350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d33e:	4b07      	ldr	r3, [pc, #28]	; (800d35c <prvResetNextTaskUnblockTime+0x38>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	4a04      	ldr	r2, [pc, #16]	; (800d360 <prvResetNextTaskUnblockTime+0x3c>)
 800d34e:	6013      	str	r3, [r2, #0]
}
 800d350:	bf00      	nop
 800d352:	370c      	adds	r7, #12
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20000ef0 	.word	0x20000ef0
 800d360:	20000f58 	.word	0x20000f58

0800d364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d36a:	4b0b      	ldr	r3, [pc, #44]	; (800d398 <xTaskGetSchedulerState+0x34>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d102      	bne.n	800d378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d372:	2301      	movs	r3, #1
 800d374:	607b      	str	r3, [r7, #4]
 800d376:	e008      	b.n	800d38a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d378:	4b08      	ldr	r3, [pc, #32]	; (800d39c <xTaskGetSchedulerState+0x38>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d102      	bne.n	800d386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d380:	2302      	movs	r3, #2
 800d382:	607b      	str	r3, [r7, #4]
 800d384:	e001      	b.n	800d38a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d386:	2300      	movs	r3, #0
 800d388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d38a:	687b      	ldr	r3, [r7, #4]
	}
 800d38c:	4618      	mov	r0, r3
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr
 800d398:	20000f44 	.word	0x20000f44
 800d39c:	20000f60 	.word	0x20000f60

0800d3a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d06e      	beq.n	800d494 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d3b6:	4b3a      	ldr	r3, [pc, #232]	; (800d4a0 <xTaskPriorityDisinherit+0x100>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	693a      	ldr	r2, [r7, #16]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d00a      	beq.n	800d3d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	60fb      	str	r3, [r7, #12]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10a      	bne.n	800d3f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	60bb      	str	r3, [r7, #8]
}
 800d3f0:	bf00      	nop
 800d3f2:	e7fe      	b.n	800d3f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3f8:	1e5a      	subs	r2, r3, #1
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d406:	429a      	cmp	r2, r3
 800d408:	d044      	beq.n	800d494 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d140      	bne.n	800d494 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	3304      	adds	r3, #4
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe fdd9 	bl	800bfce <uxListRemove>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d115      	bne.n	800d44e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d426:	491f      	ldr	r1, [pc, #124]	; (800d4a4 <xTaskPriorityDisinherit+0x104>)
 800d428:	4613      	mov	r3, r2
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	4413      	add	r3, r2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	440b      	add	r3, r1
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d10a      	bne.n	800d44e <xTaskPriorityDisinherit+0xae>
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43c:	2201      	movs	r2, #1
 800d43e:	fa02 f303 	lsl.w	r3, r2, r3
 800d442:	43da      	mvns	r2, r3
 800d444:	4b18      	ldr	r3, [pc, #96]	; (800d4a8 <xTaskPriorityDisinherit+0x108>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4013      	ands	r3, r2
 800d44a:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <xTaskPriorityDisinherit+0x108>)
 800d44c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45a:	f1c3 0207 	rsb	r2, r3, #7
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d466:	2201      	movs	r2, #1
 800d468:	409a      	lsls	r2, r3
 800d46a:	4b0f      	ldr	r3, [pc, #60]	; (800d4a8 <xTaskPriorityDisinherit+0x108>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4313      	orrs	r3, r2
 800d470:	4a0d      	ldr	r2, [pc, #52]	; (800d4a8 <xTaskPriorityDisinherit+0x108>)
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	693b      	ldr	r3, [r7, #16]
 800d476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d478:	4613      	mov	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4413      	add	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4a08      	ldr	r2, [pc, #32]	; (800d4a4 <xTaskPriorityDisinherit+0x104>)
 800d482:	441a      	add	r2, r3
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	3304      	adds	r3, #4
 800d488:	4619      	mov	r1, r3
 800d48a:	4610      	mov	r0, r2
 800d48c:	f7fe fd42 	bl	800bf14 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d490:	2301      	movs	r3, #1
 800d492:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d494:	697b      	ldr	r3, [r7, #20]
	}
 800d496:	4618      	mov	r0, r3
 800d498:	3718      	adds	r7, #24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
 800d49e:	bf00      	nop
 800d4a0:	20000e38 	.word	0x20000e38
 800d4a4:	20000e3c 	.word	0x20000e3c
 800d4a8:	20000f40 	.word	0x20000f40

0800d4ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d4b6:	4b29      	ldr	r3, [pc, #164]	; (800d55c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4bc:	4b28      	ldr	r3, [pc, #160]	; (800d560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3304      	adds	r3, #4
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe fd83 	bl	800bfce <uxListRemove>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10b      	bne.n	800d4e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d4ce:	4b24      	ldr	r3, [pc, #144]	; (800d560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4da:	43da      	mvns	r2, r3
 800d4dc:	4b21      	ldr	r3, [pc, #132]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	4a20      	ldr	r2, [pc, #128]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ec:	d10a      	bne.n	800d504 <prvAddCurrentTaskToDelayedList+0x58>
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d007      	beq.n	800d504 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f4:	4b1a      	ldr	r3, [pc, #104]	; (800d560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	481a      	ldr	r0, [pc, #104]	; (800d568 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d4fe:	f7fe fd09 	bl	800bf14 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d502:	e026      	b.n	800d552 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d504:	68fa      	ldr	r2, [r7, #12]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4413      	add	r3, r2
 800d50a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d50c:	4b14      	ldr	r3, [pc, #80]	; (800d560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68ba      	ldr	r2, [r7, #8]
 800d512:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d209      	bcs.n	800d530 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d51c:	4b13      	ldr	r3, [pc, #76]	; (800d56c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3304      	adds	r3, #4
 800d526:	4619      	mov	r1, r3
 800d528:	4610      	mov	r0, r2
 800d52a:	f7fe fd17 	bl	800bf5c <vListInsert>
}
 800d52e:	e010      	b.n	800d552 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d530:	4b0f      	ldr	r3, [pc, #60]	; (800d570 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3304      	adds	r3, #4
 800d53a:	4619      	mov	r1, r3
 800d53c:	4610      	mov	r0, r2
 800d53e:	f7fe fd0d 	bl	800bf5c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d542:	4b0c      	ldr	r3, [pc, #48]	; (800d574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	68ba      	ldr	r2, [r7, #8]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d202      	bcs.n	800d552 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d54c:	4a09      	ldr	r2, [pc, #36]	; (800d574 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	6013      	str	r3, [r2, #0]
}
 800d552:	bf00      	nop
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	20000f3c 	.word	0x20000f3c
 800d560:	20000e38 	.word	0x20000e38
 800d564:	20000f40 	.word	0x20000f40
 800d568:	20000f24 	.word	0x20000f24
 800d56c:	20000ef4 	.word	0x20000ef4
 800d570:	20000ef0 	.word	0x20000ef0
 800d574:	20000f58 	.word	0x20000f58

0800d578 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d578:	b480      	push	{r7}
 800d57a:	b085      	sub	sp, #20
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	3b04      	subs	r3, #4
 800d588:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d590:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	3b04      	subs	r3, #4
 800d596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	f023 0201 	bic.w	r2, r3, #1
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3b04      	subs	r3, #4
 800d5a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5a8:	4a0c      	ldr	r2, [pc, #48]	; (800d5dc <pxPortInitialiseStack+0x64>)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	3b14      	subs	r3, #20
 800d5b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5b4:	687a      	ldr	r2, [r7, #4]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	3b04      	subs	r3, #4
 800d5be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f06f 0202 	mvn.w	r2, #2
 800d5c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	3b20      	subs	r3, #32
 800d5cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr
 800d5dc:	0800d5e1 	.word	0x0800d5e1

0800d5e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d5ea:	4b12      	ldr	r3, [pc, #72]	; (800d634 <prvTaskExitError+0x54>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f2:	d00a      	beq.n	800d60a <prvTaskExitError+0x2a>
	__asm volatile
 800d5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	60fb      	str	r3, [r7, #12]
}
 800d606:	bf00      	nop
 800d608:	e7fe      	b.n	800d608 <prvTaskExitError+0x28>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	60bb      	str	r3, [r7, #8]
}
 800d61c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d61e:	bf00      	nop
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0fc      	beq.n	800d620 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d626:	bf00      	nop
 800d628:	bf00      	nop
 800d62a:	3714      	adds	r7, #20
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	2000000c 	.word	0x2000000c
	...

0800d640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d640:	4b07      	ldr	r3, [pc, #28]	; (800d660 <pxCurrentTCBConst2>)
 800d642:	6819      	ldr	r1, [r3, #0]
 800d644:	6808      	ldr	r0, [r1, #0]
 800d646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64a:	f380 8809 	msr	PSP, r0
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f04f 0000 	mov.w	r0, #0
 800d656:	f380 8811 	msr	BASEPRI, r0
 800d65a:	4770      	bx	lr
 800d65c:	f3af 8000 	nop.w

0800d660 <pxCurrentTCBConst2>:
 800d660:	20000e38 	.word	0x20000e38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d664:	bf00      	nop
 800d666:	bf00      	nop

0800d668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d668:	4808      	ldr	r0, [pc, #32]	; (800d68c <prvPortStartFirstTask+0x24>)
 800d66a:	6800      	ldr	r0, [r0, #0]
 800d66c:	6800      	ldr	r0, [r0, #0]
 800d66e:	f380 8808 	msr	MSP, r0
 800d672:	f04f 0000 	mov.w	r0, #0
 800d676:	f380 8814 	msr	CONTROL, r0
 800d67a:	b662      	cpsie	i
 800d67c:	b661      	cpsie	f
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	df00      	svc	0
 800d688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d68a:	bf00      	nop
 800d68c:	e000ed08 	.word	0xe000ed08

0800d690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d696:	4b46      	ldr	r3, [pc, #280]	; (800d7b0 <xPortStartScheduler+0x120>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a46      	ldr	r2, [pc, #280]	; (800d7b4 <xPortStartScheduler+0x124>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d10a      	bne.n	800d6b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	613b      	str	r3, [r7, #16]
}
 800d6b2:	bf00      	nop
 800d6b4:	e7fe      	b.n	800d6b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d6b6:	4b3e      	ldr	r3, [pc, #248]	; (800d7b0 <xPortStartScheduler+0x120>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a3f      	ldr	r2, [pc, #252]	; (800d7b8 <xPortStartScheduler+0x128>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d10a      	bne.n	800d6d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	60fb      	str	r3, [r7, #12]
}
 800d6d2:	bf00      	nop
 800d6d4:	e7fe      	b.n	800d6d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d6d6:	4b39      	ldr	r3, [pc, #228]	; (800d7bc <xPortStartScheduler+0x12c>)
 800d6d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	22ff      	movs	r2, #255	; 0xff
 800d6e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	4b31      	ldr	r3, [pc, #196]	; (800d7c0 <xPortStartScheduler+0x130>)
 800d6fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6fe:	4b31      	ldr	r3, [pc, #196]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d700:	2207      	movs	r2, #7
 800d702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d704:	e009      	b.n	800d71a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d706:	4b2f      	ldr	r3, [pc, #188]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	4a2d      	ldr	r2, [pc, #180]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d70e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	b2db      	uxtb	r3, r3
 800d718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d71a:	78fb      	ldrb	r3, [r7, #3]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d722:	2b80      	cmp	r3, #128	; 0x80
 800d724:	d0ef      	beq.n	800d706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d726:	4b27      	ldr	r3, [pc, #156]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f1c3 0307 	rsb	r3, r3, #7
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d00a      	beq.n	800d748 <xPortStartScheduler+0xb8>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	60bb      	str	r3, [r7, #8]
}
 800d744:	bf00      	nop
 800d746:	e7fe      	b.n	800d746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d748:	4b1e      	ldr	r3, [pc, #120]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	4a1d      	ldr	r2, [pc, #116]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d752:	4b1c      	ldr	r3, [pc, #112]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d75a:	4a1a      	ldr	r2, [pc, #104]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d75c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	b2da      	uxtb	r2, r3
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d766:	4b18      	ldr	r3, [pc, #96]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a17      	ldr	r2, [pc, #92]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d76c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d772:	4b15      	ldr	r3, [pc, #84]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a14      	ldr	r2, [pc, #80]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d77c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d77e:	f000 f8dd 	bl	800d93c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d782:	4b12      	ldr	r3, [pc, #72]	; (800d7cc <xPortStartScheduler+0x13c>)
 800d784:	2200      	movs	r2, #0
 800d786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d788:	f000 f8fc 	bl	800d984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d78c:	4b10      	ldr	r3, [pc, #64]	; (800d7d0 <xPortStartScheduler+0x140>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a0f      	ldr	r2, [pc, #60]	; (800d7d0 <xPortStartScheduler+0x140>)
 800d792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d798:	f7ff ff66 	bl	800d668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d79c:	f7ff fba6 	bl	800ceec <vTaskSwitchContext>
	prvTaskExitError();
 800d7a0:	f7ff ff1e 	bl	800d5e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3718      	adds	r7, #24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	e000ed00 	.word	0xe000ed00
 800d7b4:	410fc271 	.word	0x410fc271
 800d7b8:	410fc270 	.word	0x410fc270
 800d7bc:	e000e400 	.word	0xe000e400
 800d7c0:	20000f64 	.word	0x20000f64
 800d7c4:	20000f68 	.word	0x20000f68
 800d7c8:	e000ed20 	.word	0xe000ed20
 800d7cc:	2000000c 	.word	0x2000000c
 800d7d0:	e000ef34 	.word	0xe000ef34

0800d7d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7de:	f383 8811 	msr	BASEPRI, r3
 800d7e2:	f3bf 8f6f 	isb	sy
 800d7e6:	f3bf 8f4f 	dsb	sy
 800d7ea:	607b      	str	r3, [r7, #4]
}
 800d7ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <vPortEnterCritical+0x58>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	4a0d      	ldr	r2, [pc, #52]	; (800d82c <vPortEnterCritical+0x58>)
 800d7f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d7f8:	4b0c      	ldr	r3, [pc, #48]	; (800d82c <vPortEnterCritical+0x58>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d10f      	bne.n	800d820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d800:	4b0b      	ldr	r3, [pc, #44]	; (800d830 <vPortEnterCritical+0x5c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <vPortEnterCritical+0x4c>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	603b      	str	r3, [r7, #0]
}
 800d81c:	bf00      	nop
 800d81e:	e7fe      	b.n	800d81e <vPortEnterCritical+0x4a>
	}
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	2000000c 	.word	0x2000000c
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d83a:	4b12      	ldr	r3, [pc, #72]	; (800d884 <vPortExitCritical+0x50>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10a      	bne.n	800d858 <vPortExitCritical+0x24>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	607b      	str	r3, [r7, #4]
}
 800d854:	bf00      	nop
 800d856:	e7fe      	b.n	800d856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d858:	4b0a      	ldr	r3, [pc, #40]	; (800d884 <vPortExitCritical+0x50>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3b01      	subs	r3, #1
 800d85e:	4a09      	ldr	r2, [pc, #36]	; (800d884 <vPortExitCritical+0x50>)
 800d860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d862:	4b08      	ldr	r3, [pc, #32]	; (800d884 <vPortExitCritical+0x50>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d105      	bne.n	800d876 <vPortExitCritical+0x42>
 800d86a:	2300      	movs	r3, #0
 800d86c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	2000000c 	.word	0x2000000c
	...

0800d890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d890:	f3ef 8009 	mrs	r0, PSP
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	4b15      	ldr	r3, [pc, #84]	; (800d8f0 <pxCurrentTCBConst>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	f01e 0f10 	tst.w	lr, #16
 800d8a0:	bf08      	it	eq
 800d8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8aa:	6010      	str	r0, [r2, #0]
 800d8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8b4:	f380 8811 	msr	BASEPRI, r0
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f7ff fb14 	bl	800ceec <vTaskSwitchContext>
 800d8c4:	f04f 0000 	mov.w	r0, #0
 800d8c8:	f380 8811 	msr	BASEPRI, r0
 800d8cc:	bc09      	pop	{r0, r3}
 800d8ce:	6819      	ldr	r1, [r3, #0]
 800d8d0:	6808      	ldr	r0, [r1, #0]
 800d8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d6:	f01e 0f10 	tst.w	lr, #16
 800d8da:	bf08      	it	eq
 800d8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8e0:	f380 8809 	msr	PSP, r0
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	f3af 8000 	nop.w

0800d8f0 <pxCurrentTCBConst>:
 800d8f0:	20000e38 	.word	0x20000e38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop

0800d8f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	607b      	str	r3, [r7, #4]
}
 800d910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d912:	f7ff fa33 	bl	800cd7c <xTaskIncrementTick>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d003      	beq.n	800d924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d91c:	4b06      	ldr	r3, [pc, #24]	; (800d938 <xPortSysTickHandler+0x40>)
 800d91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	2300      	movs	r3, #0
 800d926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	f383 8811 	msr	BASEPRI, r3
}
 800d92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	e000ed04 	.word	0xe000ed04

0800d93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d940:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <vPortSetupTimerInterrupt+0x34>)
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d946:	4b0b      	ldr	r3, [pc, #44]	; (800d974 <vPortSetupTimerInterrupt+0x38>)
 800d948:	2200      	movs	r2, #0
 800d94a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d94c:	4b0a      	ldr	r3, [pc, #40]	; (800d978 <vPortSetupTimerInterrupt+0x3c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a0a      	ldr	r2, [pc, #40]	; (800d97c <vPortSetupTimerInterrupt+0x40>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	099b      	lsrs	r3, r3, #6
 800d958:	4a09      	ldr	r2, [pc, #36]	; (800d980 <vPortSetupTimerInterrupt+0x44>)
 800d95a:	3b01      	subs	r3, #1
 800d95c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d95e:	4b04      	ldr	r3, [pc, #16]	; (800d970 <vPortSetupTimerInterrupt+0x34>)
 800d960:	2207      	movs	r2, #7
 800d962:	601a      	str	r2, [r3, #0]
}
 800d964:	bf00      	nop
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	e000e010 	.word	0xe000e010
 800d974:	e000e018 	.word	0xe000e018
 800d978:	20000000 	.word	0x20000000
 800d97c:	10624dd3 	.word	0x10624dd3
 800d980:	e000e014 	.word	0xe000e014

0800d984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d994 <vPortEnableVFP+0x10>
 800d988:	6801      	ldr	r1, [r0, #0]
 800d98a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d98e:	6001      	str	r1, [r0, #0]
 800d990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d992:	bf00      	nop
 800d994:	e000ed88 	.word	0xe000ed88

0800d998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b08a      	sub	sp, #40	; 0x28
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9a4:	f7ff f940 	bl	800cc28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9a8:	4b5b      	ldr	r3, [pc, #364]	; (800db18 <pvPortMalloc+0x180>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d101      	bne.n	800d9b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9b0:	f000 f920 	bl	800dbf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9b4:	4b59      	ldr	r3, [pc, #356]	; (800db1c <pvPortMalloc+0x184>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	4013      	ands	r3, r2
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	f040 8093 	bne.w	800dae8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d01d      	beq.n	800da04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d9c8:	2208      	movs	r2, #8
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d014      	beq.n	800da04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f023 0307 	bic.w	r3, r3, #7
 800d9e0:	3308      	adds	r3, #8
 800d9e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d00a      	beq.n	800da04 <pvPortMalloc+0x6c>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	617b      	str	r3, [r7, #20]
}
 800da00:	bf00      	nop
 800da02:	e7fe      	b.n	800da02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d06e      	beq.n	800dae8 <pvPortMalloc+0x150>
 800da0a:	4b45      	ldr	r3, [pc, #276]	; (800db20 <pvPortMalloc+0x188>)
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	429a      	cmp	r2, r3
 800da12:	d869      	bhi.n	800dae8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da14:	4b43      	ldr	r3, [pc, #268]	; (800db24 <pvPortMalloc+0x18c>)
 800da16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da18:	4b42      	ldr	r3, [pc, #264]	; (800db24 <pvPortMalloc+0x18c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da1e:	e004      	b.n	800da2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	429a      	cmp	r2, r3
 800da32:	d903      	bls.n	800da3c <pvPortMalloc+0xa4>
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d1f1      	bne.n	800da20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da3c:	4b36      	ldr	r3, [pc, #216]	; (800db18 <pvPortMalloc+0x180>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da42:	429a      	cmp	r2, r3
 800da44:	d050      	beq.n	800dae8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da46:	6a3b      	ldr	r3, [r7, #32]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	2208      	movs	r2, #8
 800da4c:	4413      	add	r3, r2
 800da4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5a:	685a      	ldr	r2, [r3, #4]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	1ad2      	subs	r2, r2, r3
 800da60:	2308      	movs	r3, #8
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	429a      	cmp	r2, r3
 800da66:	d91f      	bls.n	800daa8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800da68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4413      	add	r3, r2
 800da6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	f003 0307 	and.w	r3, r3, #7
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <pvPortMalloc+0xf8>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	613b      	str	r3, [r7, #16]
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800da90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da92:	685a      	ldr	r2, [r3, #4]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	1ad2      	subs	r2, r2, r3
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800daa2:	69b8      	ldr	r0, [r7, #24]
 800daa4:	f000 f908 	bl	800dcb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800daa8:	4b1d      	ldr	r3, [pc, #116]	; (800db20 <pvPortMalloc+0x188>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	4a1b      	ldr	r2, [pc, #108]	; (800db20 <pvPortMalloc+0x188>)
 800dab4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dab6:	4b1a      	ldr	r3, [pc, #104]	; (800db20 <pvPortMalloc+0x188>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4b1b      	ldr	r3, [pc, #108]	; (800db28 <pvPortMalloc+0x190>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d203      	bcs.n	800daca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dac2:	4b17      	ldr	r3, [pc, #92]	; (800db20 <pvPortMalloc+0x188>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	4a18      	ldr	r2, [pc, #96]	; (800db28 <pvPortMalloc+0x190>)
 800dac8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	685a      	ldr	r2, [r3, #4]
 800dace:	4b13      	ldr	r3, [pc, #76]	; (800db1c <pvPortMalloc+0x184>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	431a      	orrs	r2, r3
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dade:	4b13      	ldr	r3, [pc, #76]	; (800db2c <pvPortMalloc+0x194>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3301      	adds	r3, #1
 800dae4:	4a11      	ldr	r2, [pc, #68]	; (800db2c <pvPortMalloc+0x194>)
 800dae6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dae8:	f7ff f8ac 	bl	800cc44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800daec:	69fb      	ldr	r3, [r7, #28]
 800daee:	f003 0307 	and.w	r3, r3, #7
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00a      	beq.n	800db0c <pvPortMalloc+0x174>
	__asm volatile
 800daf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	60fb      	str	r3, [r7, #12]
}
 800db08:	bf00      	nop
 800db0a:	e7fe      	b.n	800db0a <pvPortMalloc+0x172>
	return pvReturn;
 800db0c:	69fb      	ldr	r3, [r7, #28]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3728      	adds	r7, #40	; 0x28
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	200026e4 	.word	0x200026e4
 800db1c:	200026f8 	.word	0x200026f8
 800db20:	200026e8 	.word	0x200026e8
 800db24:	200026dc 	.word	0x200026dc
 800db28:	200026ec 	.word	0x200026ec
 800db2c:	200026f0 	.word	0x200026f0

0800db30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d04d      	beq.n	800dbde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db42:	2308      	movs	r3, #8
 800db44:	425b      	negs	r3, r3
 800db46:	697a      	ldr	r2, [r7, #20]
 800db48:	4413      	add	r3, r2
 800db4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	4b24      	ldr	r3, [pc, #144]	; (800dbe8 <vPortFree+0xb8>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4013      	ands	r3, r2
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10a      	bne.n	800db74 <vPortFree+0x44>
	__asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	60fb      	str	r3, [r7, #12]
}
 800db70:	bf00      	nop
 800db72:	e7fe      	b.n	800db72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00a      	beq.n	800db92 <vPortFree+0x62>
	__asm volatile
 800db7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db80:	f383 8811 	msr	BASEPRI, r3
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	f3bf 8f4f 	dsb	sy
 800db8c:	60bb      	str	r3, [r7, #8]
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	685a      	ldr	r2, [r3, #4]
 800db96:	4b14      	ldr	r3, [pc, #80]	; (800dbe8 <vPortFree+0xb8>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4013      	ands	r3, r2
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d01e      	beq.n	800dbde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d11a      	bne.n	800dbde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	685a      	ldr	r2, [r3, #4]
 800dbac:	4b0e      	ldr	r3, [pc, #56]	; (800dbe8 <vPortFree+0xb8>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	43db      	mvns	r3, r3
 800dbb2:	401a      	ands	r2, r3
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dbb8:	f7ff f836 	bl	800cc28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	685a      	ldr	r2, [r3, #4]
 800dbc0:	4b0a      	ldr	r3, [pc, #40]	; (800dbec <vPortFree+0xbc>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	4a09      	ldr	r2, [pc, #36]	; (800dbec <vPortFree+0xbc>)
 800dbc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dbca:	6938      	ldr	r0, [r7, #16]
 800dbcc:	f000 f874 	bl	800dcb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dbd0:	4b07      	ldr	r3, [pc, #28]	; (800dbf0 <vPortFree+0xc0>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	4a06      	ldr	r2, [pc, #24]	; (800dbf0 <vPortFree+0xc0>)
 800dbd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dbda:	f7ff f833 	bl	800cc44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dbde:	bf00      	nop
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	200026f8 	.word	0x200026f8
 800dbec:	200026e8 	.word	0x200026e8
 800dbf0:	200026f4 	.word	0x200026f4

0800dbf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b085      	sub	sp, #20
 800dbf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dbfa:	f241 7370 	movw	r3, #6000	; 0x1770
 800dbfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc00:	4b27      	ldr	r3, [pc, #156]	; (800dca0 <prvHeapInit+0xac>)
 800dc02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	f003 0307 	and.w	r3, r3, #7
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00c      	beq.n	800dc28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	3307      	adds	r3, #7
 800dc12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f023 0307 	bic.w	r3, r3, #7
 800dc1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	1ad3      	subs	r3, r2, r3
 800dc22:	4a1f      	ldr	r2, [pc, #124]	; (800dca0 <prvHeapInit+0xac>)
 800dc24:	4413      	add	r3, r2
 800dc26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc2c:	4a1d      	ldr	r2, [pc, #116]	; (800dca4 <prvHeapInit+0xb0>)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc32:	4b1c      	ldr	r3, [pc, #112]	; (800dca4 <prvHeapInit+0xb0>)
 800dc34:	2200      	movs	r2, #0
 800dc36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc40:	2208      	movs	r2, #8
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	1a9b      	subs	r3, r3, r2
 800dc46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f023 0307 	bic.w	r3, r3, #7
 800dc4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	4a15      	ldr	r2, [pc, #84]	; (800dca8 <prvHeapInit+0xb4>)
 800dc54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc56:	4b14      	ldr	r3, [pc, #80]	; (800dca8 <prvHeapInit+0xb4>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc5e:	4b12      	ldr	r3, [pc, #72]	; (800dca8 <prvHeapInit+0xb4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2200      	movs	r2, #0
 800dc64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	1ad2      	subs	r2, r2, r3
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dc74:	4b0c      	ldr	r3, [pc, #48]	; (800dca8 <prvHeapInit+0xb4>)
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	4a0a      	ldr	r2, [pc, #40]	; (800dcac <prvHeapInit+0xb8>)
 800dc82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	685b      	ldr	r3, [r3, #4]
 800dc88:	4a09      	ldr	r2, [pc, #36]	; (800dcb0 <prvHeapInit+0xbc>)
 800dc8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dc8c:	4b09      	ldr	r3, [pc, #36]	; (800dcb4 <prvHeapInit+0xc0>)
 800dc8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dc92:	601a      	str	r2, [r3, #0]
}
 800dc94:	bf00      	nop
 800dc96:	3714      	adds	r7, #20
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	20000f6c 	.word	0x20000f6c
 800dca4:	200026dc 	.word	0x200026dc
 800dca8:	200026e4 	.word	0x200026e4
 800dcac:	200026ec 	.word	0x200026ec
 800dcb0:	200026e8 	.word	0x200026e8
 800dcb4:	200026f8 	.word	0x200026f8

0800dcb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcc0:	4b28      	ldr	r3, [pc, #160]	; (800dd64 <prvInsertBlockIntoFreeList+0xac>)
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	e002      	b.n	800dccc <prvInsertBlockIntoFreeList+0x14>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d8f7      	bhi.n	800dcc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	4413      	add	r3, r2
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d108      	bne.n	800dcfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	685a      	ldr	r2, [r3, #4]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	685b      	ldr	r3, [r3, #4]
 800dcf0:	441a      	add	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	441a      	add	r2, r3
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d118      	bne.n	800dd40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	4b15      	ldr	r3, [pc, #84]	; (800dd68 <prvInsertBlockIntoFreeList+0xb0>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d00d      	beq.n	800dd36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	685a      	ldr	r2, [r3, #4]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	441a      	add	r2, r3
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	e008      	b.n	800dd48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd36:	4b0c      	ldr	r3, [pc, #48]	; (800dd68 <prvInsertBlockIntoFreeList+0xb0>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	e003      	b.n	800dd48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d002      	beq.n	800dd56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd56:	bf00      	nop
 800dd58:	3714      	adds	r7, #20
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	200026dc 	.word	0x200026dc
 800dd68:	200026e4 	.word	0x200026e4

0800dd6c <__errno>:
 800dd6c:	4b01      	ldr	r3, [pc, #4]	; (800dd74 <__errno+0x8>)
 800dd6e:	6818      	ldr	r0, [r3, #0]
 800dd70:	4770      	bx	lr
 800dd72:	bf00      	nop
 800dd74:	20000010 	.word	0x20000010

0800dd78 <__libc_init_array>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	4d0d      	ldr	r5, [pc, #52]	; (800ddb0 <__libc_init_array+0x38>)
 800dd7c:	4c0d      	ldr	r4, [pc, #52]	; (800ddb4 <__libc_init_array+0x3c>)
 800dd7e:	1b64      	subs	r4, r4, r5
 800dd80:	10a4      	asrs	r4, r4, #2
 800dd82:	2600      	movs	r6, #0
 800dd84:	42a6      	cmp	r6, r4
 800dd86:	d109      	bne.n	800dd9c <__libc_init_array+0x24>
 800dd88:	4d0b      	ldr	r5, [pc, #44]	; (800ddb8 <__libc_init_array+0x40>)
 800dd8a:	4c0c      	ldr	r4, [pc, #48]	; (800ddbc <__libc_init_array+0x44>)
 800dd8c:	f003 fbe6 	bl	801155c <_init>
 800dd90:	1b64      	subs	r4, r4, r5
 800dd92:	10a4      	asrs	r4, r4, #2
 800dd94:	2600      	movs	r6, #0
 800dd96:	42a6      	cmp	r6, r4
 800dd98:	d105      	bne.n	800dda6 <__libc_init_array+0x2e>
 800dd9a:	bd70      	pop	{r4, r5, r6, pc}
 800dd9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dda0:	4798      	blx	r3
 800dda2:	3601      	adds	r6, #1
 800dda4:	e7ee      	b.n	800dd84 <__libc_init_array+0xc>
 800dda6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddaa:	4798      	blx	r3
 800ddac:	3601      	adds	r6, #1
 800ddae:	e7f2      	b.n	800dd96 <__libc_init_array+0x1e>
 800ddb0:	08011b6c 	.word	0x08011b6c
 800ddb4:	08011b6c 	.word	0x08011b6c
 800ddb8:	08011b6c 	.word	0x08011b6c
 800ddbc:	08011b70 	.word	0x08011b70

0800ddc0 <memcpy>:
 800ddc0:	440a      	add	r2, r1
 800ddc2:	4291      	cmp	r1, r2
 800ddc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddc8:	d100      	bne.n	800ddcc <memcpy+0xc>
 800ddca:	4770      	bx	lr
 800ddcc:	b510      	push	{r4, lr}
 800ddce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddd6:	4291      	cmp	r1, r2
 800ddd8:	d1f9      	bne.n	800ddce <memcpy+0xe>
 800ddda:	bd10      	pop	{r4, pc}

0800dddc <memset>:
 800dddc:	4402      	add	r2, r0
 800ddde:	4603      	mov	r3, r0
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d100      	bne.n	800dde6 <memset+0xa>
 800dde4:	4770      	bx	lr
 800dde6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddea:	e7f9      	b.n	800dde0 <memset+0x4>

0800ddec <_scanf_float>:
 800ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	b087      	sub	sp, #28
 800ddf2:	4617      	mov	r7, r2
 800ddf4:	9303      	str	r3, [sp, #12]
 800ddf6:	688b      	ldr	r3, [r1, #8]
 800ddf8:	1e5a      	subs	r2, r3, #1
 800ddfa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ddfe:	bf83      	ittte	hi
 800de00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800de04:	195b      	addhi	r3, r3, r5
 800de06:	9302      	strhi	r3, [sp, #8]
 800de08:	2300      	movls	r3, #0
 800de0a:	bf86      	itte	hi
 800de0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800de10:	608b      	strhi	r3, [r1, #8]
 800de12:	9302      	strls	r3, [sp, #8]
 800de14:	680b      	ldr	r3, [r1, #0]
 800de16:	468b      	mov	fp, r1
 800de18:	2500      	movs	r5, #0
 800de1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800de1e:	f84b 3b1c 	str.w	r3, [fp], #28
 800de22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800de26:	4680      	mov	r8, r0
 800de28:	460c      	mov	r4, r1
 800de2a:	465e      	mov	r6, fp
 800de2c:	46aa      	mov	sl, r5
 800de2e:	46a9      	mov	r9, r5
 800de30:	9501      	str	r5, [sp, #4]
 800de32:	68a2      	ldr	r2, [r4, #8]
 800de34:	b152      	cbz	r2, 800de4c <_scanf_float+0x60>
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	2b4e      	cmp	r3, #78	; 0x4e
 800de3c:	d864      	bhi.n	800df08 <_scanf_float+0x11c>
 800de3e:	2b40      	cmp	r3, #64	; 0x40
 800de40:	d83c      	bhi.n	800debc <_scanf_float+0xd0>
 800de42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800de46:	b2c8      	uxtb	r0, r1
 800de48:	280e      	cmp	r0, #14
 800de4a:	d93a      	bls.n	800dec2 <_scanf_float+0xd6>
 800de4c:	f1b9 0f00 	cmp.w	r9, #0
 800de50:	d003      	beq.n	800de5a <_scanf_float+0x6e>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de5e:	f1ba 0f01 	cmp.w	sl, #1
 800de62:	f200 8113 	bhi.w	800e08c <_scanf_float+0x2a0>
 800de66:	455e      	cmp	r6, fp
 800de68:	f200 8105 	bhi.w	800e076 <_scanf_float+0x28a>
 800de6c:	2501      	movs	r5, #1
 800de6e:	4628      	mov	r0, r5
 800de70:	b007      	add	sp, #28
 800de72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800de7a:	2a0d      	cmp	r2, #13
 800de7c:	d8e6      	bhi.n	800de4c <_scanf_float+0x60>
 800de7e:	a101      	add	r1, pc, #4	; (adr r1, 800de84 <_scanf_float+0x98>)
 800de80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de84:	0800dfc3 	.word	0x0800dfc3
 800de88:	0800de4d 	.word	0x0800de4d
 800de8c:	0800de4d 	.word	0x0800de4d
 800de90:	0800de4d 	.word	0x0800de4d
 800de94:	0800e023 	.word	0x0800e023
 800de98:	0800dffb 	.word	0x0800dffb
 800de9c:	0800de4d 	.word	0x0800de4d
 800dea0:	0800de4d 	.word	0x0800de4d
 800dea4:	0800dfd1 	.word	0x0800dfd1
 800dea8:	0800de4d 	.word	0x0800de4d
 800deac:	0800de4d 	.word	0x0800de4d
 800deb0:	0800de4d 	.word	0x0800de4d
 800deb4:	0800de4d 	.word	0x0800de4d
 800deb8:	0800df89 	.word	0x0800df89
 800debc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800dec0:	e7db      	b.n	800de7a <_scanf_float+0x8e>
 800dec2:	290e      	cmp	r1, #14
 800dec4:	d8c2      	bhi.n	800de4c <_scanf_float+0x60>
 800dec6:	a001      	add	r0, pc, #4	; (adr r0, 800decc <_scanf_float+0xe0>)
 800dec8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800decc:	0800df7b 	.word	0x0800df7b
 800ded0:	0800de4d 	.word	0x0800de4d
 800ded4:	0800df7b 	.word	0x0800df7b
 800ded8:	0800e00f 	.word	0x0800e00f
 800dedc:	0800de4d 	.word	0x0800de4d
 800dee0:	0800df29 	.word	0x0800df29
 800dee4:	0800df65 	.word	0x0800df65
 800dee8:	0800df65 	.word	0x0800df65
 800deec:	0800df65 	.word	0x0800df65
 800def0:	0800df65 	.word	0x0800df65
 800def4:	0800df65 	.word	0x0800df65
 800def8:	0800df65 	.word	0x0800df65
 800defc:	0800df65 	.word	0x0800df65
 800df00:	0800df65 	.word	0x0800df65
 800df04:	0800df65 	.word	0x0800df65
 800df08:	2b6e      	cmp	r3, #110	; 0x6e
 800df0a:	d809      	bhi.n	800df20 <_scanf_float+0x134>
 800df0c:	2b60      	cmp	r3, #96	; 0x60
 800df0e:	d8b2      	bhi.n	800de76 <_scanf_float+0x8a>
 800df10:	2b54      	cmp	r3, #84	; 0x54
 800df12:	d077      	beq.n	800e004 <_scanf_float+0x218>
 800df14:	2b59      	cmp	r3, #89	; 0x59
 800df16:	d199      	bne.n	800de4c <_scanf_float+0x60>
 800df18:	2d07      	cmp	r5, #7
 800df1a:	d197      	bne.n	800de4c <_scanf_float+0x60>
 800df1c:	2508      	movs	r5, #8
 800df1e:	e029      	b.n	800df74 <_scanf_float+0x188>
 800df20:	2b74      	cmp	r3, #116	; 0x74
 800df22:	d06f      	beq.n	800e004 <_scanf_float+0x218>
 800df24:	2b79      	cmp	r3, #121	; 0x79
 800df26:	e7f6      	b.n	800df16 <_scanf_float+0x12a>
 800df28:	6821      	ldr	r1, [r4, #0]
 800df2a:	05c8      	lsls	r0, r1, #23
 800df2c:	d51a      	bpl.n	800df64 <_scanf_float+0x178>
 800df2e:	9b02      	ldr	r3, [sp, #8]
 800df30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800df34:	6021      	str	r1, [r4, #0]
 800df36:	f109 0901 	add.w	r9, r9, #1
 800df3a:	b11b      	cbz	r3, 800df44 <_scanf_float+0x158>
 800df3c:	3b01      	subs	r3, #1
 800df3e:	3201      	adds	r2, #1
 800df40:	9302      	str	r3, [sp, #8]
 800df42:	60a2      	str	r2, [r4, #8]
 800df44:	68a3      	ldr	r3, [r4, #8]
 800df46:	3b01      	subs	r3, #1
 800df48:	60a3      	str	r3, [r4, #8]
 800df4a:	6923      	ldr	r3, [r4, #16]
 800df4c:	3301      	adds	r3, #1
 800df4e:	6123      	str	r3, [r4, #16]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	3b01      	subs	r3, #1
 800df54:	2b00      	cmp	r3, #0
 800df56:	607b      	str	r3, [r7, #4]
 800df58:	f340 8084 	ble.w	800e064 <_scanf_float+0x278>
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	3301      	adds	r3, #1
 800df60:	603b      	str	r3, [r7, #0]
 800df62:	e766      	b.n	800de32 <_scanf_float+0x46>
 800df64:	eb1a 0f05 	cmn.w	sl, r5
 800df68:	f47f af70 	bne.w	800de4c <_scanf_float+0x60>
 800df6c:	6822      	ldr	r2, [r4, #0]
 800df6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800df72:	6022      	str	r2, [r4, #0]
 800df74:	f806 3b01 	strb.w	r3, [r6], #1
 800df78:	e7e4      	b.n	800df44 <_scanf_float+0x158>
 800df7a:	6822      	ldr	r2, [r4, #0]
 800df7c:	0610      	lsls	r0, r2, #24
 800df7e:	f57f af65 	bpl.w	800de4c <_scanf_float+0x60>
 800df82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800df86:	e7f4      	b.n	800df72 <_scanf_float+0x186>
 800df88:	f1ba 0f00 	cmp.w	sl, #0
 800df8c:	d10e      	bne.n	800dfac <_scanf_float+0x1c0>
 800df8e:	f1b9 0f00 	cmp.w	r9, #0
 800df92:	d10e      	bne.n	800dfb2 <_scanf_float+0x1c6>
 800df94:	6822      	ldr	r2, [r4, #0]
 800df96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800df9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800df9e:	d108      	bne.n	800dfb2 <_scanf_float+0x1c6>
 800dfa0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dfa4:	6022      	str	r2, [r4, #0]
 800dfa6:	f04f 0a01 	mov.w	sl, #1
 800dfaa:	e7e3      	b.n	800df74 <_scanf_float+0x188>
 800dfac:	f1ba 0f02 	cmp.w	sl, #2
 800dfb0:	d055      	beq.n	800e05e <_scanf_float+0x272>
 800dfb2:	2d01      	cmp	r5, #1
 800dfb4:	d002      	beq.n	800dfbc <_scanf_float+0x1d0>
 800dfb6:	2d04      	cmp	r5, #4
 800dfb8:	f47f af48 	bne.w	800de4c <_scanf_float+0x60>
 800dfbc:	3501      	adds	r5, #1
 800dfbe:	b2ed      	uxtb	r5, r5
 800dfc0:	e7d8      	b.n	800df74 <_scanf_float+0x188>
 800dfc2:	f1ba 0f01 	cmp.w	sl, #1
 800dfc6:	f47f af41 	bne.w	800de4c <_scanf_float+0x60>
 800dfca:	f04f 0a02 	mov.w	sl, #2
 800dfce:	e7d1      	b.n	800df74 <_scanf_float+0x188>
 800dfd0:	b97d      	cbnz	r5, 800dff2 <_scanf_float+0x206>
 800dfd2:	f1b9 0f00 	cmp.w	r9, #0
 800dfd6:	f47f af3c 	bne.w	800de52 <_scanf_float+0x66>
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800dfe0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800dfe4:	f47f af39 	bne.w	800de5a <_scanf_float+0x6e>
 800dfe8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dfec:	6022      	str	r2, [r4, #0]
 800dfee:	2501      	movs	r5, #1
 800dff0:	e7c0      	b.n	800df74 <_scanf_float+0x188>
 800dff2:	2d03      	cmp	r5, #3
 800dff4:	d0e2      	beq.n	800dfbc <_scanf_float+0x1d0>
 800dff6:	2d05      	cmp	r5, #5
 800dff8:	e7de      	b.n	800dfb8 <_scanf_float+0x1cc>
 800dffa:	2d02      	cmp	r5, #2
 800dffc:	f47f af26 	bne.w	800de4c <_scanf_float+0x60>
 800e000:	2503      	movs	r5, #3
 800e002:	e7b7      	b.n	800df74 <_scanf_float+0x188>
 800e004:	2d06      	cmp	r5, #6
 800e006:	f47f af21 	bne.w	800de4c <_scanf_float+0x60>
 800e00a:	2507      	movs	r5, #7
 800e00c:	e7b2      	b.n	800df74 <_scanf_float+0x188>
 800e00e:	6822      	ldr	r2, [r4, #0]
 800e010:	0591      	lsls	r1, r2, #22
 800e012:	f57f af1b 	bpl.w	800de4c <_scanf_float+0x60>
 800e016:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e01a:	6022      	str	r2, [r4, #0]
 800e01c:	f8cd 9004 	str.w	r9, [sp, #4]
 800e020:	e7a8      	b.n	800df74 <_scanf_float+0x188>
 800e022:	6822      	ldr	r2, [r4, #0]
 800e024:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e028:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e02c:	d006      	beq.n	800e03c <_scanf_float+0x250>
 800e02e:	0550      	lsls	r0, r2, #21
 800e030:	f57f af0c 	bpl.w	800de4c <_scanf_float+0x60>
 800e034:	f1b9 0f00 	cmp.w	r9, #0
 800e038:	f43f af0f 	beq.w	800de5a <_scanf_float+0x6e>
 800e03c:	0591      	lsls	r1, r2, #22
 800e03e:	bf58      	it	pl
 800e040:	9901      	ldrpl	r1, [sp, #4]
 800e042:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e046:	bf58      	it	pl
 800e048:	eba9 0101 	subpl.w	r1, r9, r1
 800e04c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e050:	bf58      	it	pl
 800e052:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e056:	6022      	str	r2, [r4, #0]
 800e058:	f04f 0900 	mov.w	r9, #0
 800e05c:	e78a      	b.n	800df74 <_scanf_float+0x188>
 800e05e:	f04f 0a03 	mov.w	sl, #3
 800e062:	e787      	b.n	800df74 <_scanf_float+0x188>
 800e064:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e068:	4639      	mov	r1, r7
 800e06a:	4640      	mov	r0, r8
 800e06c:	4798      	blx	r3
 800e06e:	2800      	cmp	r0, #0
 800e070:	f43f aedf 	beq.w	800de32 <_scanf_float+0x46>
 800e074:	e6ea      	b.n	800de4c <_scanf_float+0x60>
 800e076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e07a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e07e:	463a      	mov	r2, r7
 800e080:	4640      	mov	r0, r8
 800e082:	4798      	blx	r3
 800e084:	6923      	ldr	r3, [r4, #16]
 800e086:	3b01      	subs	r3, #1
 800e088:	6123      	str	r3, [r4, #16]
 800e08a:	e6ec      	b.n	800de66 <_scanf_float+0x7a>
 800e08c:	1e6b      	subs	r3, r5, #1
 800e08e:	2b06      	cmp	r3, #6
 800e090:	d825      	bhi.n	800e0de <_scanf_float+0x2f2>
 800e092:	2d02      	cmp	r5, #2
 800e094:	d836      	bhi.n	800e104 <_scanf_float+0x318>
 800e096:	455e      	cmp	r6, fp
 800e098:	f67f aee8 	bls.w	800de6c <_scanf_float+0x80>
 800e09c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0a4:	463a      	mov	r2, r7
 800e0a6:	4640      	mov	r0, r8
 800e0a8:	4798      	blx	r3
 800e0aa:	6923      	ldr	r3, [r4, #16]
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	6123      	str	r3, [r4, #16]
 800e0b0:	e7f1      	b.n	800e096 <_scanf_float+0x2aa>
 800e0b2:	9802      	ldr	r0, [sp, #8]
 800e0b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e0bc:	9002      	str	r0, [sp, #8]
 800e0be:	463a      	mov	r2, r7
 800e0c0:	4640      	mov	r0, r8
 800e0c2:	4798      	blx	r3
 800e0c4:	6923      	ldr	r3, [r4, #16]
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	6123      	str	r3, [r4, #16]
 800e0ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0ce:	fa5f fa8a 	uxtb.w	sl, sl
 800e0d2:	f1ba 0f02 	cmp.w	sl, #2
 800e0d6:	d1ec      	bne.n	800e0b2 <_scanf_float+0x2c6>
 800e0d8:	3d03      	subs	r5, #3
 800e0da:	b2ed      	uxtb	r5, r5
 800e0dc:	1b76      	subs	r6, r6, r5
 800e0de:	6823      	ldr	r3, [r4, #0]
 800e0e0:	05da      	lsls	r2, r3, #23
 800e0e2:	d52f      	bpl.n	800e144 <_scanf_float+0x358>
 800e0e4:	055b      	lsls	r3, r3, #21
 800e0e6:	d510      	bpl.n	800e10a <_scanf_float+0x31e>
 800e0e8:	455e      	cmp	r6, fp
 800e0ea:	f67f aebf 	bls.w	800de6c <_scanf_float+0x80>
 800e0ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e0f6:	463a      	mov	r2, r7
 800e0f8:	4640      	mov	r0, r8
 800e0fa:	4798      	blx	r3
 800e0fc:	6923      	ldr	r3, [r4, #16]
 800e0fe:	3b01      	subs	r3, #1
 800e100:	6123      	str	r3, [r4, #16]
 800e102:	e7f1      	b.n	800e0e8 <_scanf_float+0x2fc>
 800e104:	46aa      	mov	sl, r5
 800e106:	9602      	str	r6, [sp, #8]
 800e108:	e7df      	b.n	800e0ca <_scanf_float+0x2de>
 800e10a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e10e:	6923      	ldr	r3, [r4, #16]
 800e110:	2965      	cmp	r1, #101	; 0x65
 800e112:	f103 33ff 	add.w	r3, r3, #4294967295
 800e116:	f106 35ff 	add.w	r5, r6, #4294967295
 800e11a:	6123      	str	r3, [r4, #16]
 800e11c:	d00c      	beq.n	800e138 <_scanf_float+0x34c>
 800e11e:	2945      	cmp	r1, #69	; 0x45
 800e120:	d00a      	beq.n	800e138 <_scanf_float+0x34c>
 800e122:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e126:	463a      	mov	r2, r7
 800e128:	4640      	mov	r0, r8
 800e12a:	4798      	blx	r3
 800e12c:	6923      	ldr	r3, [r4, #16]
 800e12e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e132:	3b01      	subs	r3, #1
 800e134:	1eb5      	subs	r5, r6, #2
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e13c:	463a      	mov	r2, r7
 800e13e:	4640      	mov	r0, r8
 800e140:	4798      	blx	r3
 800e142:	462e      	mov	r6, r5
 800e144:	6825      	ldr	r5, [r4, #0]
 800e146:	f015 0510 	ands.w	r5, r5, #16
 800e14a:	d159      	bne.n	800e200 <_scanf_float+0x414>
 800e14c:	7035      	strb	r5, [r6, #0]
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e158:	d11b      	bne.n	800e192 <_scanf_float+0x3a6>
 800e15a:	9b01      	ldr	r3, [sp, #4]
 800e15c:	454b      	cmp	r3, r9
 800e15e:	eba3 0209 	sub.w	r2, r3, r9
 800e162:	d123      	bne.n	800e1ac <_scanf_float+0x3c0>
 800e164:	2200      	movs	r2, #0
 800e166:	4659      	mov	r1, fp
 800e168:	4640      	mov	r0, r8
 800e16a:	f000 ff9b 	bl	800f0a4 <_strtod_r>
 800e16e:	6822      	ldr	r2, [r4, #0]
 800e170:	9b03      	ldr	r3, [sp, #12]
 800e172:	f012 0f02 	tst.w	r2, #2
 800e176:	ec57 6b10 	vmov	r6, r7, d0
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	d021      	beq.n	800e1c2 <_scanf_float+0x3d6>
 800e17e:	9903      	ldr	r1, [sp, #12]
 800e180:	1d1a      	adds	r2, r3, #4
 800e182:	600a      	str	r2, [r1, #0]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	e9c3 6700 	strd	r6, r7, [r3]
 800e18a:	68e3      	ldr	r3, [r4, #12]
 800e18c:	3301      	adds	r3, #1
 800e18e:	60e3      	str	r3, [r4, #12]
 800e190:	e66d      	b.n	800de6e <_scanf_float+0x82>
 800e192:	9b04      	ldr	r3, [sp, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d0e5      	beq.n	800e164 <_scanf_float+0x378>
 800e198:	9905      	ldr	r1, [sp, #20]
 800e19a:	230a      	movs	r3, #10
 800e19c:	462a      	mov	r2, r5
 800e19e:	3101      	adds	r1, #1
 800e1a0:	4640      	mov	r0, r8
 800e1a2:	f001 f807 	bl	800f1b4 <_strtol_r>
 800e1a6:	9b04      	ldr	r3, [sp, #16]
 800e1a8:	9e05      	ldr	r6, [sp, #20]
 800e1aa:	1ac2      	subs	r2, r0, r3
 800e1ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e1b0:	429e      	cmp	r6, r3
 800e1b2:	bf28      	it	cs
 800e1b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e1b8:	4912      	ldr	r1, [pc, #72]	; (800e204 <_scanf_float+0x418>)
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f000 f8d6 	bl	800e36c <siprintf>
 800e1c0:	e7d0      	b.n	800e164 <_scanf_float+0x378>
 800e1c2:	9903      	ldr	r1, [sp, #12]
 800e1c4:	f012 0f04 	tst.w	r2, #4
 800e1c8:	f103 0204 	add.w	r2, r3, #4
 800e1cc:	600a      	str	r2, [r1, #0]
 800e1ce:	d1d9      	bne.n	800e184 <_scanf_float+0x398>
 800e1d0:	f8d3 8000 	ldr.w	r8, [r3]
 800e1d4:	ee10 2a10 	vmov	r2, s0
 800e1d8:	ee10 0a10 	vmov	r0, s0
 800e1dc:	463b      	mov	r3, r7
 800e1de:	4639      	mov	r1, r7
 800e1e0:	f7f2 fca4 	bl	8000b2c <__aeabi_dcmpun>
 800e1e4:	b128      	cbz	r0, 800e1f2 <_scanf_float+0x406>
 800e1e6:	4808      	ldr	r0, [pc, #32]	; (800e208 <_scanf_float+0x41c>)
 800e1e8:	f000 f886 	bl	800e2f8 <nanf>
 800e1ec:	ed88 0a00 	vstr	s0, [r8]
 800e1f0:	e7cb      	b.n	800e18a <_scanf_float+0x39e>
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	f7f2 fccf 	bl	8000b98 <__aeabi_d2f>
 800e1fa:	f8c8 0000 	str.w	r0, [r8]
 800e1fe:	e7c4      	b.n	800e18a <_scanf_float+0x39e>
 800e200:	2500      	movs	r5, #0
 800e202:	e634      	b.n	800de6e <_scanf_float+0x82>
 800e204:	08011728 	.word	0x08011728
 800e208:	08011b62 	.word	0x08011b62

0800e20c <_puts_r>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	460e      	mov	r6, r1
 800e210:	4605      	mov	r5, r0
 800e212:	b118      	cbz	r0, 800e21c <_puts_r+0x10>
 800e214:	6983      	ldr	r3, [r0, #24]
 800e216:	b90b      	cbnz	r3, 800e21c <_puts_r+0x10>
 800e218:	f001 f9ca 	bl	800f5b0 <__sinit>
 800e21c:	69ab      	ldr	r3, [r5, #24]
 800e21e:	68ac      	ldr	r4, [r5, #8]
 800e220:	b913      	cbnz	r3, 800e228 <_puts_r+0x1c>
 800e222:	4628      	mov	r0, r5
 800e224:	f001 f9c4 	bl	800f5b0 <__sinit>
 800e228:	4b2c      	ldr	r3, [pc, #176]	; (800e2dc <_puts_r+0xd0>)
 800e22a:	429c      	cmp	r4, r3
 800e22c:	d120      	bne.n	800e270 <_puts_r+0x64>
 800e22e:	686c      	ldr	r4, [r5, #4]
 800e230:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e232:	07db      	lsls	r3, r3, #31
 800e234:	d405      	bmi.n	800e242 <_puts_r+0x36>
 800e236:	89a3      	ldrh	r3, [r4, #12]
 800e238:	0598      	lsls	r0, r3, #22
 800e23a:	d402      	bmi.n	800e242 <_puts_r+0x36>
 800e23c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e23e:	f001 fdc4 	bl	800fdca <__retarget_lock_acquire_recursive>
 800e242:	89a3      	ldrh	r3, [r4, #12]
 800e244:	0719      	lsls	r1, r3, #28
 800e246:	d51d      	bpl.n	800e284 <_puts_r+0x78>
 800e248:	6923      	ldr	r3, [r4, #16]
 800e24a:	b1db      	cbz	r3, 800e284 <_puts_r+0x78>
 800e24c:	3e01      	subs	r6, #1
 800e24e:	68a3      	ldr	r3, [r4, #8]
 800e250:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e254:	3b01      	subs	r3, #1
 800e256:	60a3      	str	r3, [r4, #8]
 800e258:	bb39      	cbnz	r1, 800e2aa <_puts_r+0x9e>
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	da38      	bge.n	800e2d0 <_puts_r+0xc4>
 800e25e:	4622      	mov	r2, r4
 800e260:	210a      	movs	r1, #10
 800e262:	4628      	mov	r0, r5
 800e264:	f000 ffa8 	bl	800f1b8 <__swbuf_r>
 800e268:	3001      	adds	r0, #1
 800e26a:	d011      	beq.n	800e290 <_puts_r+0x84>
 800e26c:	250a      	movs	r5, #10
 800e26e:	e011      	b.n	800e294 <_puts_r+0x88>
 800e270:	4b1b      	ldr	r3, [pc, #108]	; (800e2e0 <_puts_r+0xd4>)
 800e272:	429c      	cmp	r4, r3
 800e274:	d101      	bne.n	800e27a <_puts_r+0x6e>
 800e276:	68ac      	ldr	r4, [r5, #8]
 800e278:	e7da      	b.n	800e230 <_puts_r+0x24>
 800e27a:	4b1a      	ldr	r3, [pc, #104]	; (800e2e4 <_puts_r+0xd8>)
 800e27c:	429c      	cmp	r4, r3
 800e27e:	bf08      	it	eq
 800e280:	68ec      	ldreq	r4, [r5, #12]
 800e282:	e7d5      	b.n	800e230 <_puts_r+0x24>
 800e284:	4621      	mov	r1, r4
 800e286:	4628      	mov	r0, r5
 800e288:	f000 fffa 	bl	800f280 <__swsetup_r>
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d0dd      	beq.n	800e24c <_puts_r+0x40>
 800e290:	f04f 35ff 	mov.w	r5, #4294967295
 800e294:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e296:	07da      	lsls	r2, r3, #31
 800e298:	d405      	bmi.n	800e2a6 <_puts_r+0x9a>
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	059b      	lsls	r3, r3, #22
 800e29e:	d402      	bmi.n	800e2a6 <_puts_r+0x9a>
 800e2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2a2:	f001 fd93 	bl	800fdcc <__retarget_lock_release_recursive>
 800e2a6:	4628      	mov	r0, r5
 800e2a8:	bd70      	pop	{r4, r5, r6, pc}
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	da04      	bge.n	800e2b8 <_puts_r+0xac>
 800e2ae:	69a2      	ldr	r2, [r4, #24]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	dc06      	bgt.n	800e2c2 <_puts_r+0xb6>
 800e2b4:	290a      	cmp	r1, #10
 800e2b6:	d004      	beq.n	800e2c2 <_puts_r+0xb6>
 800e2b8:	6823      	ldr	r3, [r4, #0]
 800e2ba:	1c5a      	adds	r2, r3, #1
 800e2bc:	6022      	str	r2, [r4, #0]
 800e2be:	7019      	strb	r1, [r3, #0]
 800e2c0:	e7c5      	b.n	800e24e <_puts_r+0x42>
 800e2c2:	4622      	mov	r2, r4
 800e2c4:	4628      	mov	r0, r5
 800e2c6:	f000 ff77 	bl	800f1b8 <__swbuf_r>
 800e2ca:	3001      	adds	r0, #1
 800e2cc:	d1bf      	bne.n	800e24e <_puts_r+0x42>
 800e2ce:	e7df      	b.n	800e290 <_puts_r+0x84>
 800e2d0:	6823      	ldr	r3, [r4, #0]
 800e2d2:	250a      	movs	r5, #10
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	6022      	str	r2, [r4, #0]
 800e2d8:	701d      	strb	r5, [r3, #0]
 800e2da:	e7db      	b.n	800e294 <_puts_r+0x88>
 800e2dc:	080118b4 	.word	0x080118b4
 800e2e0:	080118d4 	.word	0x080118d4
 800e2e4:	08011894 	.word	0x08011894

0800e2e8 <puts>:
 800e2e8:	4b02      	ldr	r3, [pc, #8]	; (800e2f4 <puts+0xc>)
 800e2ea:	4601      	mov	r1, r0
 800e2ec:	6818      	ldr	r0, [r3, #0]
 800e2ee:	f7ff bf8d 	b.w	800e20c <_puts_r>
 800e2f2:	bf00      	nop
 800e2f4:	20000010 	.word	0x20000010

0800e2f8 <nanf>:
 800e2f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e300 <nanf+0x8>
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	7fc00000 	.word	0x7fc00000

0800e304 <sniprintf>:
 800e304:	b40c      	push	{r2, r3}
 800e306:	b530      	push	{r4, r5, lr}
 800e308:	4b17      	ldr	r3, [pc, #92]	; (800e368 <sniprintf+0x64>)
 800e30a:	1e0c      	subs	r4, r1, #0
 800e30c:	681d      	ldr	r5, [r3, #0]
 800e30e:	b09d      	sub	sp, #116	; 0x74
 800e310:	da08      	bge.n	800e324 <sniprintf+0x20>
 800e312:	238b      	movs	r3, #139	; 0x8b
 800e314:	602b      	str	r3, [r5, #0]
 800e316:	f04f 30ff 	mov.w	r0, #4294967295
 800e31a:	b01d      	add	sp, #116	; 0x74
 800e31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e320:	b002      	add	sp, #8
 800e322:	4770      	bx	lr
 800e324:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e328:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e32c:	bf14      	ite	ne
 800e32e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e332:	4623      	moveq	r3, r4
 800e334:	9304      	str	r3, [sp, #16]
 800e336:	9307      	str	r3, [sp, #28]
 800e338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e33c:	9002      	str	r0, [sp, #8]
 800e33e:	9006      	str	r0, [sp, #24]
 800e340:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e344:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e346:	ab21      	add	r3, sp, #132	; 0x84
 800e348:	a902      	add	r1, sp, #8
 800e34a:	4628      	mov	r0, r5
 800e34c:	9301      	str	r3, [sp, #4]
 800e34e:	f002 fbdd 	bl	8010b0c <_svfiprintf_r>
 800e352:	1c43      	adds	r3, r0, #1
 800e354:	bfbc      	itt	lt
 800e356:	238b      	movlt	r3, #139	; 0x8b
 800e358:	602b      	strlt	r3, [r5, #0]
 800e35a:	2c00      	cmp	r4, #0
 800e35c:	d0dd      	beq.n	800e31a <sniprintf+0x16>
 800e35e:	9b02      	ldr	r3, [sp, #8]
 800e360:	2200      	movs	r2, #0
 800e362:	701a      	strb	r2, [r3, #0]
 800e364:	e7d9      	b.n	800e31a <sniprintf+0x16>
 800e366:	bf00      	nop
 800e368:	20000010 	.word	0x20000010

0800e36c <siprintf>:
 800e36c:	b40e      	push	{r1, r2, r3}
 800e36e:	b500      	push	{lr}
 800e370:	b09c      	sub	sp, #112	; 0x70
 800e372:	ab1d      	add	r3, sp, #116	; 0x74
 800e374:	9002      	str	r0, [sp, #8]
 800e376:	9006      	str	r0, [sp, #24]
 800e378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e37c:	4809      	ldr	r0, [pc, #36]	; (800e3a4 <siprintf+0x38>)
 800e37e:	9107      	str	r1, [sp, #28]
 800e380:	9104      	str	r1, [sp, #16]
 800e382:	4909      	ldr	r1, [pc, #36]	; (800e3a8 <siprintf+0x3c>)
 800e384:	f853 2b04 	ldr.w	r2, [r3], #4
 800e388:	9105      	str	r1, [sp, #20]
 800e38a:	6800      	ldr	r0, [r0, #0]
 800e38c:	9301      	str	r3, [sp, #4]
 800e38e:	a902      	add	r1, sp, #8
 800e390:	f002 fbbc 	bl	8010b0c <_svfiprintf_r>
 800e394:	9b02      	ldr	r3, [sp, #8]
 800e396:	2200      	movs	r2, #0
 800e398:	701a      	strb	r2, [r3, #0]
 800e39a:	b01c      	add	sp, #112	; 0x70
 800e39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3a0:	b003      	add	sp, #12
 800e3a2:	4770      	bx	lr
 800e3a4:	20000010 	.word	0x20000010
 800e3a8:	ffff0208 	.word	0xffff0208

0800e3ac <__sread>:
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	460c      	mov	r4, r1
 800e3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b4:	f002 fe3e 	bl	8011034 <_read_r>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	bfab      	itete	ge
 800e3bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3be:	89a3      	ldrhlt	r3, [r4, #12]
 800e3c0:	181b      	addge	r3, r3, r0
 800e3c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e3c6:	bfac      	ite	ge
 800e3c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e3ca:	81a3      	strhlt	r3, [r4, #12]
 800e3cc:	bd10      	pop	{r4, pc}

0800e3ce <__swrite>:
 800e3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d2:	461f      	mov	r7, r3
 800e3d4:	898b      	ldrh	r3, [r1, #12]
 800e3d6:	05db      	lsls	r3, r3, #23
 800e3d8:	4605      	mov	r5, r0
 800e3da:	460c      	mov	r4, r1
 800e3dc:	4616      	mov	r6, r2
 800e3de:	d505      	bpl.n	800e3ec <__swrite+0x1e>
 800e3e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f001 fcf2 	bl	800fdd0 <_lseek_r>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	4632      	mov	r2, r6
 800e3fa:	463b      	mov	r3, r7
 800e3fc:	4628      	mov	r0, r5
 800e3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e402:	f000 bf2b 	b.w	800f25c <_write_r>

0800e406 <__sseek>:
 800e406:	b510      	push	{r4, lr}
 800e408:	460c      	mov	r4, r1
 800e40a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e40e:	f001 fcdf 	bl	800fdd0 <_lseek_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	bf15      	itete	ne
 800e418:	6560      	strne	r0, [r4, #84]	; 0x54
 800e41a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e41e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e422:	81a3      	strheq	r3, [r4, #12]
 800e424:	bf18      	it	ne
 800e426:	81a3      	strhne	r3, [r4, #12]
 800e428:	bd10      	pop	{r4, pc}

0800e42a <__sclose>:
 800e42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e42e:	f000 bf95 	b.w	800f35c <_close_r>

0800e432 <strncmp>:
 800e432:	b510      	push	{r4, lr}
 800e434:	b17a      	cbz	r2, 800e456 <strncmp+0x24>
 800e436:	4603      	mov	r3, r0
 800e438:	3901      	subs	r1, #1
 800e43a:	1884      	adds	r4, r0, r2
 800e43c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e440:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e444:	4290      	cmp	r0, r2
 800e446:	d101      	bne.n	800e44c <strncmp+0x1a>
 800e448:	42a3      	cmp	r3, r4
 800e44a:	d101      	bne.n	800e450 <strncmp+0x1e>
 800e44c:	1a80      	subs	r0, r0, r2
 800e44e:	bd10      	pop	{r4, pc}
 800e450:	2800      	cmp	r0, #0
 800e452:	d1f3      	bne.n	800e43c <strncmp+0xa>
 800e454:	e7fa      	b.n	800e44c <strncmp+0x1a>
 800e456:	4610      	mov	r0, r2
 800e458:	e7f9      	b.n	800e44e <strncmp+0x1c>

0800e45a <sulp>:
 800e45a:	b570      	push	{r4, r5, r6, lr}
 800e45c:	4604      	mov	r4, r0
 800e45e:	460d      	mov	r5, r1
 800e460:	ec45 4b10 	vmov	d0, r4, r5
 800e464:	4616      	mov	r6, r2
 800e466:	f002 f8af 	bl	80105c8 <__ulp>
 800e46a:	ec51 0b10 	vmov	r0, r1, d0
 800e46e:	b17e      	cbz	r6, 800e490 <sulp+0x36>
 800e470:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e474:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e478:	2b00      	cmp	r3, #0
 800e47a:	dd09      	ble.n	800e490 <sulp+0x36>
 800e47c:	051b      	lsls	r3, r3, #20
 800e47e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e482:	2400      	movs	r4, #0
 800e484:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e488:	4622      	mov	r2, r4
 800e48a:	462b      	mov	r3, r5
 800e48c:	f7f2 f8b4 	bl	80005f8 <__aeabi_dmul>
 800e490:	bd70      	pop	{r4, r5, r6, pc}
 800e492:	0000      	movs	r0, r0
 800e494:	0000      	movs	r0, r0
	...

0800e498 <_strtod_l>:
 800e498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49c:	ed2d 8b02 	vpush	{d8}
 800e4a0:	b09d      	sub	sp, #116	; 0x74
 800e4a2:	461f      	mov	r7, r3
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9318      	str	r3, [sp, #96]	; 0x60
 800e4a8:	4ba2      	ldr	r3, [pc, #648]	; (800e734 <_strtod_l+0x29c>)
 800e4aa:	9213      	str	r2, [sp, #76]	; 0x4c
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	9305      	str	r3, [sp, #20]
 800e4b0:	4604      	mov	r4, r0
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	4688      	mov	r8, r1
 800e4b6:	f7f1 fe8b 	bl	80001d0 <strlen>
 800e4ba:	f04f 0a00 	mov.w	sl, #0
 800e4be:	4605      	mov	r5, r0
 800e4c0:	f04f 0b00 	mov.w	fp, #0
 800e4c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e4c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4ca:	781a      	ldrb	r2, [r3, #0]
 800e4cc:	2a2b      	cmp	r2, #43	; 0x2b
 800e4ce:	d04e      	beq.n	800e56e <_strtod_l+0xd6>
 800e4d0:	d83b      	bhi.n	800e54a <_strtod_l+0xb2>
 800e4d2:	2a0d      	cmp	r2, #13
 800e4d4:	d834      	bhi.n	800e540 <_strtod_l+0xa8>
 800e4d6:	2a08      	cmp	r2, #8
 800e4d8:	d834      	bhi.n	800e544 <_strtod_l+0xac>
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	d03e      	beq.n	800e55c <_strtod_l+0xc4>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	930a      	str	r3, [sp, #40]	; 0x28
 800e4e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e4e4:	7833      	ldrb	r3, [r6, #0]
 800e4e6:	2b30      	cmp	r3, #48	; 0x30
 800e4e8:	f040 80b0 	bne.w	800e64c <_strtod_l+0x1b4>
 800e4ec:	7873      	ldrb	r3, [r6, #1]
 800e4ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4f2:	2b58      	cmp	r3, #88	; 0x58
 800e4f4:	d168      	bne.n	800e5c8 <_strtod_l+0x130>
 800e4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	ab18      	add	r3, sp, #96	; 0x60
 800e4fc:	9702      	str	r7, [sp, #8]
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	4a8d      	ldr	r2, [pc, #564]	; (800e738 <_strtod_l+0x2a0>)
 800e502:	ab19      	add	r3, sp, #100	; 0x64
 800e504:	a917      	add	r1, sp, #92	; 0x5c
 800e506:	4620      	mov	r0, r4
 800e508:	f001 f956 	bl	800f7b8 <__gethex>
 800e50c:	f010 0707 	ands.w	r7, r0, #7
 800e510:	4605      	mov	r5, r0
 800e512:	d005      	beq.n	800e520 <_strtod_l+0x88>
 800e514:	2f06      	cmp	r7, #6
 800e516:	d12c      	bne.n	800e572 <_strtod_l+0xda>
 800e518:	3601      	adds	r6, #1
 800e51a:	2300      	movs	r3, #0
 800e51c:	9617      	str	r6, [sp, #92]	; 0x5c
 800e51e:	930a      	str	r3, [sp, #40]	; 0x28
 800e520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e522:	2b00      	cmp	r3, #0
 800e524:	f040 8590 	bne.w	800f048 <_strtod_l+0xbb0>
 800e528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e52a:	b1eb      	cbz	r3, 800e568 <_strtod_l+0xd0>
 800e52c:	4652      	mov	r2, sl
 800e52e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e532:	ec43 2b10 	vmov	d0, r2, r3
 800e536:	b01d      	add	sp, #116	; 0x74
 800e538:	ecbd 8b02 	vpop	{d8}
 800e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e540:	2a20      	cmp	r2, #32
 800e542:	d1cc      	bne.n	800e4de <_strtod_l+0x46>
 800e544:	3301      	adds	r3, #1
 800e546:	9317      	str	r3, [sp, #92]	; 0x5c
 800e548:	e7be      	b.n	800e4c8 <_strtod_l+0x30>
 800e54a:	2a2d      	cmp	r2, #45	; 0x2d
 800e54c:	d1c7      	bne.n	800e4de <_strtod_l+0x46>
 800e54e:	2201      	movs	r2, #1
 800e550:	920a      	str	r2, [sp, #40]	; 0x28
 800e552:	1c5a      	adds	r2, r3, #1
 800e554:	9217      	str	r2, [sp, #92]	; 0x5c
 800e556:	785b      	ldrb	r3, [r3, #1]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d1c2      	bne.n	800e4e2 <_strtod_l+0x4a>
 800e55c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e55e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e562:	2b00      	cmp	r3, #0
 800e564:	f040 856e 	bne.w	800f044 <_strtod_l+0xbac>
 800e568:	4652      	mov	r2, sl
 800e56a:	465b      	mov	r3, fp
 800e56c:	e7e1      	b.n	800e532 <_strtod_l+0x9a>
 800e56e:	2200      	movs	r2, #0
 800e570:	e7ee      	b.n	800e550 <_strtod_l+0xb8>
 800e572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e574:	b13a      	cbz	r2, 800e586 <_strtod_l+0xee>
 800e576:	2135      	movs	r1, #53	; 0x35
 800e578:	a81a      	add	r0, sp, #104	; 0x68
 800e57a:	f002 f930 	bl	80107de <__copybits>
 800e57e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e580:	4620      	mov	r0, r4
 800e582:	f001 fcef 	bl	800ff64 <_Bfree>
 800e586:	3f01      	subs	r7, #1
 800e588:	2f04      	cmp	r7, #4
 800e58a:	d806      	bhi.n	800e59a <_strtod_l+0x102>
 800e58c:	e8df f007 	tbb	[pc, r7]
 800e590:	1714030a 	.word	0x1714030a
 800e594:	0a          	.byte	0x0a
 800e595:	00          	.byte	0x00
 800e596:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800e59a:	0728      	lsls	r0, r5, #28
 800e59c:	d5c0      	bpl.n	800e520 <_strtod_l+0x88>
 800e59e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e5a2:	e7bd      	b.n	800e520 <_strtod_l+0x88>
 800e5a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800e5a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e5aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e5ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e5b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e5b6:	e7f0      	b.n	800e59a <_strtod_l+0x102>
 800e5b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800e73c <_strtod_l+0x2a4>
 800e5bc:	e7ed      	b.n	800e59a <_strtod_l+0x102>
 800e5be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e5c2:	f04f 3aff 	mov.w	sl, #4294967295
 800e5c6:	e7e8      	b.n	800e59a <_strtod_l+0x102>
 800e5c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5ca:	1c5a      	adds	r2, r3, #1
 800e5cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800e5ce:	785b      	ldrb	r3, [r3, #1]
 800e5d0:	2b30      	cmp	r3, #48	; 0x30
 800e5d2:	d0f9      	beq.n	800e5c8 <_strtod_l+0x130>
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0a3      	beq.n	800e520 <_strtod_l+0x88>
 800e5d8:	2301      	movs	r3, #1
 800e5da:	f04f 0900 	mov.w	r9, #0
 800e5de:	9304      	str	r3, [sp, #16]
 800e5e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e5e2:	9308      	str	r3, [sp, #32]
 800e5e4:	f8cd 901c 	str.w	r9, [sp, #28]
 800e5e8:	464f      	mov	r7, r9
 800e5ea:	220a      	movs	r2, #10
 800e5ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e5ee:	7806      	ldrb	r6, [r0, #0]
 800e5f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800e5f4:	b2d9      	uxtb	r1, r3
 800e5f6:	2909      	cmp	r1, #9
 800e5f8:	d92a      	bls.n	800e650 <_strtod_l+0x1b8>
 800e5fa:	9905      	ldr	r1, [sp, #20]
 800e5fc:	462a      	mov	r2, r5
 800e5fe:	f7ff ff18 	bl	800e432 <strncmp>
 800e602:	b398      	cbz	r0, 800e66c <_strtod_l+0x1d4>
 800e604:	2000      	movs	r0, #0
 800e606:	4632      	mov	r2, r6
 800e608:	463d      	mov	r5, r7
 800e60a:	9005      	str	r0, [sp, #20]
 800e60c:	4603      	mov	r3, r0
 800e60e:	2a65      	cmp	r2, #101	; 0x65
 800e610:	d001      	beq.n	800e616 <_strtod_l+0x17e>
 800e612:	2a45      	cmp	r2, #69	; 0x45
 800e614:	d118      	bne.n	800e648 <_strtod_l+0x1b0>
 800e616:	b91d      	cbnz	r5, 800e620 <_strtod_l+0x188>
 800e618:	9a04      	ldr	r2, [sp, #16]
 800e61a:	4302      	orrs	r2, r0
 800e61c:	d09e      	beq.n	800e55c <_strtod_l+0xc4>
 800e61e:	2500      	movs	r5, #0
 800e620:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e624:	f108 0201 	add.w	r2, r8, #1
 800e628:	9217      	str	r2, [sp, #92]	; 0x5c
 800e62a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800e62e:	2a2b      	cmp	r2, #43	; 0x2b
 800e630:	d075      	beq.n	800e71e <_strtod_l+0x286>
 800e632:	2a2d      	cmp	r2, #45	; 0x2d
 800e634:	d07b      	beq.n	800e72e <_strtod_l+0x296>
 800e636:	f04f 0c00 	mov.w	ip, #0
 800e63a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e63e:	2909      	cmp	r1, #9
 800e640:	f240 8082 	bls.w	800e748 <_strtod_l+0x2b0>
 800e644:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e648:	2600      	movs	r6, #0
 800e64a:	e09d      	b.n	800e788 <_strtod_l+0x2f0>
 800e64c:	2300      	movs	r3, #0
 800e64e:	e7c4      	b.n	800e5da <_strtod_l+0x142>
 800e650:	2f08      	cmp	r7, #8
 800e652:	bfd8      	it	le
 800e654:	9907      	ldrle	r1, [sp, #28]
 800e656:	f100 0001 	add.w	r0, r0, #1
 800e65a:	bfda      	itte	le
 800e65c:	fb02 3301 	mlale	r3, r2, r1, r3
 800e660:	9307      	strle	r3, [sp, #28]
 800e662:	fb02 3909 	mlagt	r9, r2, r9, r3
 800e666:	3701      	adds	r7, #1
 800e668:	9017      	str	r0, [sp, #92]	; 0x5c
 800e66a:	e7bf      	b.n	800e5ec <_strtod_l+0x154>
 800e66c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e66e:	195a      	adds	r2, r3, r5
 800e670:	9217      	str	r2, [sp, #92]	; 0x5c
 800e672:	5d5a      	ldrb	r2, [r3, r5]
 800e674:	2f00      	cmp	r7, #0
 800e676:	d037      	beq.n	800e6e8 <_strtod_l+0x250>
 800e678:	9005      	str	r0, [sp, #20]
 800e67a:	463d      	mov	r5, r7
 800e67c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800e680:	2b09      	cmp	r3, #9
 800e682:	d912      	bls.n	800e6aa <_strtod_l+0x212>
 800e684:	2301      	movs	r3, #1
 800e686:	e7c2      	b.n	800e60e <_strtod_l+0x176>
 800e688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e68a:	1c5a      	adds	r2, r3, #1
 800e68c:	9217      	str	r2, [sp, #92]	; 0x5c
 800e68e:	785a      	ldrb	r2, [r3, #1]
 800e690:	3001      	adds	r0, #1
 800e692:	2a30      	cmp	r2, #48	; 0x30
 800e694:	d0f8      	beq.n	800e688 <_strtod_l+0x1f0>
 800e696:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e69a:	2b08      	cmp	r3, #8
 800e69c:	f200 84d9 	bhi.w	800f052 <_strtod_l+0xbba>
 800e6a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e6a2:	9005      	str	r0, [sp, #20]
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	9308      	str	r3, [sp, #32]
 800e6a8:	4605      	mov	r5, r0
 800e6aa:	3a30      	subs	r2, #48	; 0x30
 800e6ac:	f100 0301 	add.w	r3, r0, #1
 800e6b0:	d014      	beq.n	800e6dc <_strtod_l+0x244>
 800e6b2:	9905      	ldr	r1, [sp, #20]
 800e6b4:	4419      	add	r1, r3
 800e6b6:	9105      	str	r1, [sp, #20]
 800e6b8:	462b      	mov	r3, r5
 800e6ba:	eb00 0e05 	add.w	lr, r0, r5
 800e6be:	210a      	movs	r1, #10
 800e6c0:	4573      	cmp	r3, lr
 800e6c2:	d113      	bne.n	800e6ec <_strtod_l+0x254>
 800e6c4:	182b      	adds	r3, r5, r0
 800e6c6:	2b08      	cmp	r3, #8
 800e6c8:	f105 0501 	add.w	r5, r5, #1
 800e6cc:	4405      	add	r5, r0
 800e6ce:	dc1c      	bgt.n	800e70a <_strtod_l+0x272>
 800e6d0:	9907      	ldr	r1, [sp, #28]
 800e6d2:	230a      	movs	r3, #10
 800e6d4:	fb03 2301 	mla	r3, r3, r1, r2
 800e6d8:	9307      	str	r3, [sp, #28]
 800e6da:	2300      	movs	r3, #0
 800e6dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e6de:	1c51      	adds	r1, r2, #1
 800e6e0:	9117      	str	r1, [sp, #92]	; 0x5c
 800e6e2:	7852      	ldrb	r2, [r2, #1]
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	e7c9      	b.n	800e67c <_strtod_l+0x1e4>
 800e6e8:	4638      	mov	r0, r7
 800e6ea:	e7d2      	b.n	800e692 <_strtod_l+0x1fa>
 800e6ec:	2b08      	cmp	r3, #8
 800e6ee:	dc04      	bgt.n	800e6fa <_strtod_l+0x262>
 800e6f0:	9e07      	ldr	r6, [sp, #28]
 800e6f2:	434e      	muls	r6, r1
 800e6f4:	9607      	str	r6, [sp, #28]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	e7e2      	b.n	800e6c0 <_strtod_l+0x228>
 800e6fa:	f103 0c01 	add.w	ip, r3, #1
 800e6fe:	f1bc 0f10 	cmp.w	ip, #16
 800e702:	bfd8      	it	le
 800e704:	fb01 f909 	mulle.w	r9, r1, r9
 800e708:	e7f5      	b.n	800e6f6 <_strtod_l+0x25e>
 800e70a:	2d10      	cmp	r5, #16
 800e70c:	bfdc      	itt	le
 800e70e:	230a      	movle	r3, #10
 800e710:	fb03 2909 	mlale	r9, r3, r9, r2
 800e714:	e7e1      	b.n	800e6da <_strtod_l+0x242>
 800e716:	2300      	movs	r3, #0
 800e718:	9305      	str	r3, [sp, #20]
 800e71a:	2301      	movs	r3, #1
 800e71c:	e77c      	b.n	800e618 <_strtod_l+0x180>
 800e71e:	f04f 0c00 	mov.w	ip, #0
 800e722:	f108 0202 	add.w	r2, r8, #2
 800e726:	9217      	str	r2, [sp, #92]	; 0x5c
 800e728:	f898 2002 	ldrb.w	r2, [r8, #2]
 800e72c:	e785      	b.n	800e63a <_strtod_l+0x1a2>
 800e72e:	f04f 0c01 	mov.w	ip, #1
 800e732:	e7f6      	b.n	800e722 <_strtod_l+0x28a>
 800e734:	0801196c 	.word	0x0801196c
 800e738:	0801173c 	.word	0x0801173c
 800e73c:	7ff00000 	.word	0x7ff00000
 800e740:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e742:	1c51      	adds	r1, r2, #1
 800e744:	9117      	str	r1, [sp, #92]	; 0x5c
 800e746:	7852      	ldrb	r2, [r2, #1]
 800e748:	2a30      	cmp	r2, #48	; 0x30
 800e74a:	d0f9      	beq.n	800e740 <_strtod_l+0x2a8>
 800e74c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800e750:	2908      	cmp	r1, #8
 800e752:	f63f af79 	bhi.w	800e648 <_strtod_l+0x1b0>
 800e756:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800e75a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e75c:	9206      	str	r2, [sp, #24]
 800e75e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e760:	1c51      	adds	r1, r2, #1
 800e762:	9117      	str	r1, [sp, #92]	; 0x5c
 800e764:	7852      	ldrb	r2, [r2, #1]
 800e766:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e76a:	2e09      	cmp	r6, #9
 800e76c:	d937      	bls.n	800e7de <_strtod_l+0x346>
 800e76e:	9e06      	ldr	r6, [sp, #24]
 800e770:	1b89      	subs	r1, r1, r6
 800e772:	2908      	cmp	r1, #8
 800e774:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800e778:	dc02      	bgt.n	800e780 <_strtod_l+0x2e8>
 800e77a:	4576      	cmp	r6, lr
 800e77c:	bfa8      	it	ge
 800e77e:	4676      	movge	r6, lr
 800e780:	f1bc 0f00 	cmp.w	ip, #0
 800e784:	d000      	beq.n	800e788 <_strtod_l+0x2f0>
 800e786:	4276      	negs	r6, r6
 800e788:	2d00      	cmp	r5, #0
 800e78a:	d14d      	bne.n	800e828 <_strtod_l+0x390>
 800e78c:	9904      	ldr	r1, [sp, #16]
 800e78e:	4301      	orrs	r1, r0
 800e790:	f47f aec6 	bne.w	800e520 <_strtod_l+0x88>
 800e794:	2b00      	cmp	r3, #0
 800e796:	f47f aee1 	bne.w	800e55c <_strtod_l+0xc4>
 800e79a:	2a69      	cmp	r2, #105	; 0x69
 800e79c:	d027      	beq.n	800e7ee <_strtod_l+0x356>
 800e79e:	dc24      	bgt.n	800e7ea <_strtod_l+0x352>
 800e7a0:	2a49      	cmp	r2, #73	; 0x49
 800e7a2:	d024      	beq.n	800e7ee <_strtod_l+0x356>
 800e7a4:	2a4e      	cmp	r2, #78	; 0x4e
 800e7a6:	f47f aed9 	bne.w	800e55c <_strtod_l+0xc4>
 800e7aa:	499f      	ldr	r1, [pc, #636]	; (800ea28 <_strtod_l+0x590>)
 800e7ac:	a817      	add	r0, sp, #92	; 0x5c
 800e7ae:	f001 fa5b 	bl	800fc68 <__match>
 800e7b2:	2800      	cmp	r0, #0
 800e7b4:	f43f aed2 	beq.w	800e55c <_strtod_l+0xc4>
 800e7b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	2b28      	cmp	r3, #40	; 0x28
 800e7be:	d12d      	bne.n	800e81c <_strtod_l+0x384>
 800e7c0:	499a      	ldr	r1, [pc, #616]	; (800ea2c <_strtod_l+0x594>)
 800e7c2:	aa1a      	add	r2, sp, #104	; 0x68
 800e7c4:	a817      	add	r0, sp, #92	; 0x5c
 800e7c6:	f001 fa63 	bl	800fc90 <__hexnan>
 800e7ca:	2805      	cmp	r0, #5
 800e7cc:	d126      	bne.n	800e81c <_strtod_l+0x384>
 800e7ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800e7d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e7d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e7dc:	e6a0      	b.n	800e520 <_strtod_l+0x88>
 800e7de:	210a      	movs	r1, #10
 800e7e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800e7e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e7e8:	e7b9      	b.n	800e75e <_strtod_l+0x2c6>
 800e7ea:	2a6e      	cmp	r2, #110	; 0x6e
 800e7ec:	e7db      	b.n	800e7a6 <_strtod_l+0x30e>
 800e7ee:	4990      	ldr	r1, [pc, #576]	; (800ea30 <_strtod_l+0x598>)
 800e7f0:	a817      	add	r0, sp, #92	; 0x5c
 800e7f2:	f001 fa39 	bl	800fc68 <__match>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	f43f aeb0 	beq.w	800e55c <_strtod_l+0xc4>
 800e7fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7fe:	498d      	ldr	r1, [pc, #564]	; (800ea34 <_strtod_l+0x59c>)
 800e800:	3b01      	subs	r3, #1
 800e802:	a817      	add	r0, sp, #92	; 0x5c
 800e804:	9317      	str	r3, [sp, #92]	; 0x5c
 800e806:	f001 fa2f 	bl	800fc68 <__match>
 800e80a:	b910      	cbnz	r0, 800e812 <_strtod_l+0x37a>
 800e80c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e80e:	3301      	adds	r3, #1
 800e810:	9317      	str	r3, [sp, #92]	; 0x5c
 800e812:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ea44 <_strtod_l+0x5ac>
 800e816:	f04f 0a00 	mov.w	sl, #0
 800e81a:	e681      	b.n	800e520 <_strtod_l+0x88>
 800e81c:	4886      	ldr	r0, [pc, #536]	; (800ea38 <_strtod_l+0x5a0>)
 800e81e:	f002 fc1b 	bl	8011058 <nan>
 800e822:	ec5b ab10 	vmov	sl, fp, d0
 800e826:	e67b      	b.n	800e520 <_strtod_l+0x88>
 800e828:	9b05      	ldr	r3, [sp, #20]
 800e82a:	9807      	ldr	r0, [sp, #28]
 800e82c:	1af3      	subs	r3, r6, r3
 800e82e:	2f00      	cmp	r7, #0
 800e830:	bf08      	it	eq
 800e832:	462f      	moveq	r7, r5
 800e834:	2d10      	cmp	r5, #16
 800e836:	9306      	str	r3, [sp, #24]
 800e838:	46a8      	mov	r8, r5
 800e83a:	bfa8      	it	ge
 800e83c:	f04f 0810 	movge.w	r8, #16
 800e840:	f7f1 fe60 	bl	8000504 <__aeabi_ui2d>
 800e844:	2d09      	cmp	r5, #9
 800e846:	4682      	mov	sl, r0
 800e848:	468b      	mov	fp, r1
 800e84a:	dd13      	ble.n	800e874 <_strtod_l+0x3dc>
 800e84c:	4b7b      	ldr	r3, [pc, #492]	; (800ea3c <_strtod_l+0x5a4>)
 800e84e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e852:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e856:	f7f1 fecf 	bl	80005f8 <__aeabi_dmul>
 800e85a:	4682      	mov	sl, r0
 800e85c:	4648      	mov	r0, r9
 800e85e:	468b      	mov	fp, r1
 800e860:	f7f1 fe50 	bl	8000504 <__aeabi_ui2d>
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	4650      	mov	r0, sl
 800e86a:	4659      	mov	r1, fp
 800e86c:	f7f1 fd0e 	bl	800028c <__adddf3>
 800e870:	4682      	mov	sl, r0
 800e872:	468b      	mov	fp, r1
 800e874:	2d0f      	cmp	r5, #15
 800e876:	dc38      	bgt.n	800e8ea <_strtod_l+0x452>
 800e878:	9b06      	ldr	r3, [sp, #24]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	f43f ae50 	beq.w	800e520 <_strtod_l+0x88>
 800e880:	dd24      	ble.n	800e8cc <_strtod_l+0x434>
 800e882:	2b16      	cmp	r3, #22
 800e884:	dc0b      	bgt.n	800e89e <_strtod_l+0x406>
 800e886:	496d      	ldr	r1, [pc, #436]	; (800ea3c <_strtod_l+0x5a4>)
 800e888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e88c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e890:	4652      	mov	r2, sl
 800e892:	465b      	mov	r3, fp
 800e894:	f7f1 feb0 	bl	80005f8 <__aeabi_dmul>
 800e898:	4682      	mov	sl, r0
 800e89a:	468b      	mov	fp, r1
 800e89c:	e640      	b.n	800e520 <_strtod_l+0x88>
 800e89e:	9a06      	ldr	r2, [sp, #24]
 800e8a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	db20      	blt.n	800e8ea <_strtod_l+0x452>
 800e8a8:	4c64      	ldr	r4, [pc, #400]	; (800ea3c <_strtod_l+0x5a4>)
 800e8aa:	f1c5 050f 	rsb	r5, r5, #15
 800e8ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e8b2:	4652      	mov	r2, sl
 800e8b4:	465b      	mov	r3, fp
 800e8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8ba:	f7f1 fe9d 	bl	80005f8 <__aeabi_dmul>
 800e8be:	9b06      	ldr	r3, [sp, #24]
 800e8c0:	1b5d      	subs	r5, r3, r5
 800e8c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e8c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e8ca:	e7e3      	b.n	800e894 <_strtod_l+0x3fc>
 800e8cc:	9b06      	ldr	r3, [sp, #24]
 800e8ce:	3316      	adds	r3, #22
 800e8d0:	db0b      	blt.n	800e8ea <_strtod_l+0x452>
 800e8d2:	9b05      	ldr	r3, [sp, #20]
 800e8d4:	1b9e      	subs	r6, r3, r6
 800e8d6:	4b59      	ldr	r3, [pc, #356]	; (800ea3c <_strtod_l+0x5a4>)
 800e8d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e8dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e8e0:	4650      	mov	r0, sl
 800e8e2:	4659      	mov	r1, fp
 800e8e4:	f7f1 ffb2 	bl	800084c <__aeabi_ddiv>
 800e8e8:	e7d6      	b.n	800e898 <_strtod_l+0x400>
 800e8ea:	9b06      	ldr	r3, [sp, #24]
 800e8ec:	eba5 0808 	sub.w	r8, r5, r8
 800e8f0:	4498      	add	r8, r3
 800e8f2:	f1b8 0f00 	cmp.w	r8, #0
 800e8f6:	dd74      	ble.n	800e9e2 <_strtod_l+0x54a>
 800e8f8:	f018 030f 	ands.w	r3, r8, #15
 800e8fc:	d00a      	beq.n	800e914 <_strtod_l+0x47c>
 800e8fe:	494f      	ldr	r1, [pc, #316]	; (800ea3c <_strtod_l+0x5a4>)
 800e900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e904:	4652      	mov	r2, sl
 800e906:	465b      	mov	r3, fp
 800e908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e90c:	f7f1 fe74 	bl	80005f8 <__aeabi_dmul>
 800e910:	4682      	mov	sl, r0
 800e912:	468b      	mov	fp, r1
 800e914:	f038 080f 	bics.w	r8, r8, #15
 800e918:	d04f      	beq.n	800e9ba <_strtod_l+0x522>
 800e91a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e91e:	dd22      	ble.n	800e966 <_strtod_l+0x4ce>
 800e920:	2500      	movs	r5, #0
 800e922:	462e      	mov	r6, r5
 800e924:	9507      	str	r5, [sp, #28]
 800e926:	9505      	str	r5, [sp, #20]
 800e928:	2322      	movs	r3, #34	; 0x22
 800e92a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ea44 <_strtod_l+0x5ac>
 800e92e:	6023      	str	r3, [r4, #0]
 800e930:	f04f 0a00 	mov.w	sl, #0
 800e934:	9b07      	ldr	r3, [sp, #28]
 800e936:	2b00      	cmp	r3, #0
 800e938:	f43f adf2 	beq.w	800e520 <_strtod_l+0x88>
 800e93c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e93e:	4620      	mov	r0, r4
 800e940:	f001 fb10 	bl	800ff64 <_Bfree>
 800e944:	9905      	ldr	r1, [sp, #20]
 800e946:	4620      	mov	r0, r4
 800e948:	f001 fb0c 	bl	800ff64 <_Bfree>
 800e94c:	4631      	mov	r1, r6
 800e94e:	4620      	mov	r0, r4
 800e950:	f001 fb08 	bl	800ff64 <_Bfree>
 800e954:	9907      	ldr	r1, [sp, #28]
 800e956:	4620      	mov	r0, r4
 800e958:	f001 fb04 	bl	800ff64 <_Bfree>
 800e95c:	4629      	mov	r1, r5
 800e95e:	4620      	mov	r0, r4
 800e960:	f001 fb00 	bl	800ff64 <_Bfree>
 800e964:	e5dc      	b.n	800e520 <_strtod_l+0x88>
 800e966:	4b36      	ldr	r3, [pc, #216]	; (800ea40 <_strtod_l+0x5a8>)
 800e968:	9304      	str	r3, [sp, #16]
 800e96a:	2300      	movs	r3, #0
 800e96c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e970:	4650      	mov	r0, sl
 800e972:	4659      	mov	r1, fp
 800e974:	4699      	mov	r9, r3
 800e976:	f1b8 0f01 	cmp.w	r8, #1
 800e97a:	dc21      	bgt.n	800e9c0 <_strtod_l+0x528>
 800e97c:	b10b      	cbz	r3, 800e982 <_strtod_l+0x4ea>
 800e97e:	4682      	mov	sl, r0
 800e980:	468b      	mov	fp, r1
 800e982:	4b2f      	ldr	r3, [pc, #188]	; (800ea40 <_strtod_l+0x5a8>)
 800e984:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e988:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e98c:	4652      	mov	r2, sl
 800e98e:	465b      	mov	r3, fp
 800e990:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e994:	f7f1 fe30 	bl	80005f8 <__aeabi_dmul>
 800e998:	4b2a      	ldr	r3, [pc, #168]	; (800ea44 <_strtod_l+0x5ac>)
 800e99a:	460a      	mov	r2, r1
 800e99c:	400b      	ands	r3, r1
 800e99e:	492a      	ldr	r1, [pc, #168]	; (800ea48 <_strtod_l+0x5b0>)
 800e9a0:	428b      	cmp	r3, r1
 800e9a2:	4682      	mov	sl, r0
 800e9a4:	d8bc      	bhi.n	800e920 <_strtod_l+0x488>
 800e9a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e9aa:	428b      	cmp	r3, r1
 800e9ac:	bf86      	itte	hi
 800e9ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ea4c <_strtod_l+0x5b4>
 800e9b2:	f04f 3aff 	movhi.w	sl, #4294967295
 800e9b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	9304      	str	r3, [sp, #16]
 800e9be:	e084      	b.n	800eaca <_strtod_l+0x632>
 800e9c0:	f018 0f01 	tst.w	r8, #1
 800e9c4:	d005      	beq.n	800e9d2 <_strtod_l+0x53a>
 800e9c6:	9b04      	ldr	r3, [sp, #16]
 800e9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9cc:	f7f1 fe14 	bl	80005f8 <__aeabi_dmul>
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	9a04      	ldr	r2, [sp, #16]
 800e9d4:	3208      	adds	r2, #8
 800e9d6:	f109 0901 	add.w	r9, r9, #1
 800e9da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9de:	9204      	str	r2, [sp, #16]
 800e9e0:	e7c9      	b.n	800e976 <_strtod_l+0x4de>
 800e9e2:	d0ea      	beq.n	800e9ba <_strtod_l+0x522>
 800e9e4:	f1c8 0800 	rsb	r8, r8, #0
 800e9e8:	f018 020f 	ands.w	r2, r8, #15
 800e9ec:	d00a      	beq.n	800ea04 <_strtod_l+0x56c>
 800e9ee:	4b13      	ldr	r3, [pc, #76]	; (800ea3c <_strtod_l+0x5a4>)
 800e9f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9f4:	4650      	mov	r0, sl
 800e9f6:	4659      	mov	r1, fp
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	f7f1 ff26 	bl	800084c <__aeabi_ddiv>
 800ea00:	4682      	mov	sl, r0
 800ea02:	468b      	mov	fp, r1
 800ea04:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ea08:	d0d7      	beq.n	800e9ba <_strtod_l+0x522>
 800ea0a:	f1b8 0f1f 	cmp.w	r8, #31
 800ea0e:	dd1f      	ble.n	800ea50 <_strtod_l+0x5b8>
 800ea10:	2500      	movs	r5, #0
 800ea12:	462e      	mov	r6, r5
 800ea14:	9507      	str	r5, [sp, #28]
 800ea16:	9505      	str	r5, [sp, #20]
 800ea18:	2322      	movs	r3, #34	; 0x22
 800ea1a:	f04f 0a00 	mov.w	sl, #0
 800ea1e:	f04f 0b00 	mov.w	fp, #0
 800ea22:	6023      	str	r3, [r4, #0]
 800ea24:	e786      	b.n	800e934 <_strtod_l+0x49c>
 800ea26:	bf00      	nop
 800ea28:	08011736 	.word	0x08011736
 800ea2c:	08011750 	.word	0x08011750
 800ea30:	0801172d 	.word	0x0801172d
 800ea34:	08011730 	.word	0x08011730
 800ea38:	08011b62 	.word	0x08011b62
 800ea3c:	08011a20 	.word	0x08011a20
 800ea40:	080119f8 	.word	0x080119f8
 800ea44:	7ff00000 	.word	0x7ff00000
 800ea48:	7ca00000 	.word	0x7ca00000
 800ea4c:	7fefffff 	.word	0x7fefffff
 800ea50:	f018 0310 	ands.w	r3, r8, #16
 800ea54:	bf18      	it	ne
 800ea56:	236a      	movne	r3, #106	; 0x6a
 800ea58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ee08 <_strtod_l+0x970>
 800ea5c:	9304      	str	r3, [sp, #16]
 800ea5e:	4650      	mov	r0, sl
 800ea60:	4659      	mov	r1, fp
 800ea62:	2300      	movs	r3, #0
 800ea64:	f018 0f01 	tst.w	r8, #1
 800ea68:	d004      	beq.n	800ea74 <_strtod_l+0x5dc>
 800ea6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ea6e:	f7f1 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ea72:	2301      	movs	r3, #1
 800ea74:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ea78:	f109 0908 	add.w	r9, r9, #8
 800ea7c:	d1f2      	bne.n	800ea64 <_strtod_l+0x5cc>
 800ea7e:	b10b      	cbz	r3, 800ea84 <_strtod_l+0x5ec>
 800ea80:	4682      	mov	sl, r0
 800ea82:	468b      	mov	fp, r1
 800ea84:	9b04      	ldr	r3, [sp, #16]
 800ea86:	b1c3      	cbz	r3, 800eaba <_strtod_l+0x622>
 800ea88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ea8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	4659      	mov	r1, fp
 800ea94:	dd11      	ble.n	800eaba <_strtod_l+0x622>
 800ea96:	2b1f      	cmp	r3, #31
 800ea98:	f340 8124 	ble.w	800ece4 <_strtod_l+0x84c>
 800ea9c:	2b34      	cmp	r3, #52	; 0x34
 800ea9e:	bfde      	ittt	le
 800eaa0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800eaa4:	f04f 33ff 	movle.w	r3, #4294967295
 800eaa8:	fa03 f202 	lslle.w	r2, r3, r2
 800eaac:	f04f 0a00 	mov.w	sl, #0
 800eab0:	bfcc      	ite	gt
 800eab2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eab6:	ea02 0b01 	andle.w	fp, r2, r1
 800eaba:	2200      	movs	r2, #0
 800eabc:	2300      	movs	r3, #0
 800eabe:	4650      	mov	r0, sl
 800eac0:	4659      	mov	r1, fp
 800eac2:	f7f2 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d1a2      	bne.n	800ea10 <_strtod_l+0x578>
 800eaca:	9b07      	ldr	r3, [sp, #28]
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	9908      	ldr	r1, [sp, #32]
 800ead0:	462b      	mov	r3, r5
 800ead2:	463a      	mov	r2, r7
 800ead4:	4620      	mov	r0, r4
 800ead6:	f001 faad 	bl	8010034 <__s2b>
 800eada:	9007      	str	r0, [sp, #28]
 800eadc:	2800      	cmp	r0, #0
 800eade:	f43f af1f 	beq.w	800e920 <_strtod_l+0x488>
 800eae2:	9b05      	ldr	r3, [sp, #20]
 800eae4:	1b9e      	subs	r6, r3, r6
 800eae6:	9b06      	ldr	r3, [sp, #24]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	bfb4      	ite	lt
 800eaec:	4633      	movlt	r3, r6
 800eaee:	2300      	movge	r3, #0
 800eaf0:	930c      	str	r3, [sp, #48]	; 0x30
 800eaf2:	9b06      	ldr	r3, [sp, #24]
 800eaf4:	2500      	movs	r5, #0
 800eaf6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eafa:	9312      	str	r3, [sp, #72]	; 0x48
 800eafc:	462e      	mov	r6, r5
 800eafe:	9b07      	ldr	r3, [sp, #28]
 800eb00:	4620      	mov	r0, r4
 800eb02:	6859      	ldr	r1, [r3, #4]
 800eb04:	f001 f9ee 	bl	800fee4 <_Balloc>
 800eb08:	9005      	str	r0, [sp, #20]
 800eb0a:	2800      	cmp	r0, #0
 800eb0c:	f43f af0c 	beq.w	800e928 <_strtod_l+0x490>
 800eb10:	9b07      	ldr	r3, [sp, #28]
 800eb12:	691a      	ldr	r2, [r3, #16]
 800eb14:	3202      	adds	r2, #2
 800eb16:	f103 010c 	add.w	r1, r3, #12
 800eb1a:	0092      	lsls	r2, r2, #2
 800eb1c:	300c      	adds	r0, #12
 800eb1e:	f7ff f94f 	bl	800ddc0 <memcpy>
 800eb22:	ec4b ab10 	vmov	d0, sl, fp
 800eb26:	aa1a      	add	r2, sp, #104	; 0x68
 800eb28:	a919      	add	r1, sp, #100	; 0x64
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f001 fdc8 	bl	80106c0 <__d2b>
 800eb30:	ec4b ab18 	vmov	d8, sl, fp
 800eb34:	9018      	str	r0, [sp, #96]	; 0x60
 800eb36:	2800      	cmp	r0, #0
 800eb38:	f43f aef6 	beq.w	800e928 <_strtod_l+0x490>
 800eb3c:	2101      	movs	r1, #1
 800eb3e:	4620      	mov	r0, r4
 800eb40:	f001 fb12 	bl	8010168 <__i2b>
 800eb44:	4606      	mov	r6, r0
 800eb46:	2800      	cmp	r0, #0
 800eb48:	f43f aeee 	beq.w	800e928 <_strtod_l+0x490>
 800eb4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800eb4e:	9904      	ldr	r1, [sp, #16]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	bfab      	itete	ge
 800eb54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800eb56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800eb58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800eb5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800eb5e:	bfac      	ite	ge
 800eb60:	eb03 0902 	addge.w	r9, r3, r2
 800eb64:	1ad7      	sublt	r7, r2, r3
 800eb66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800eb68:	eba3 0801 	sub.w	r8, r3, r1
 800eb6c:	4490      	add	r8, r2
 800eb6e:	4ba1      	ldr	r3, [pc, #644]	; (800edf4 <_strtod_l+0x95c>)
 800eb70:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb74:	4598      	cmp	r8, r3
 800eb76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb7a:	f280 80c7 	bge.w	800ed0c <_strtod_l+0x874>
 800eb7e:	eba3 0308 	sub.w	r3, r3, r8
 800eb82:	2b1f      	cmp	r3, #31
 800eb84:	eba2 0203 	sub.w	r2, r2, r3
 800eb88:	f04f 0101 	mov.w	r1, #1
 800eb8c:	f300 80b1 	bgt.w	800ecf2 <_strtod_l+0x85a>
 800eb90:	fa01 f303 	lsl.w	r3, r1, r3
 800eb94:	930d      	str	r3, [sp, #52]	; 0x34
 800eb96:	2300      	movs	r3, #0
 800eb98:	9308      	str	r3, [sp, #32]
 800eb9a:	eb09 0802 	add.w	r8, r9, r2
 800eb9e:	9b04      	ldr	r3, [sp, #16]
 800eba0:	45c1      	cmp	r9, r8
 800eba2:	4417      	add	r7, r2
 800eba4:	441f      	add	r7, r3
 800eba6:	464b      	mov	r3, r9
 800eba8:	bfa8      	it	ge
 800ebaa:	4643      	movge	r3, r8
 800ebac:	42bb      	cmp	r3, r7
 800ebae:	bfa8      	it	ge
 800ebb0:	463b      	movge	r3, r7
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	bfc2      	ittt	gt
 800ebb6:	eba8 0803 	subgt.w	r8, r8, r3
 800ebba:	1aff      	subgt	r7, r7, r3
 800ebbc:	eba9 0903 	subgt.w	r9, r9, r3
 800ebc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	dd17      	ble.n	800ebf6 <_strtod_l+0x75e>
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	461a      	mov	r2, r3
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f001 fb8c 	bl	80102e8 <__pow5mult>
 800ebd0:	4606      	mov	r6, r0
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	f43f aea8 	beq.w	800e928 <_strtod_l+0x490>
 800ebd8:	4601      	mov	r1, r0
 800ebda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f001 fad9 	bl	8010194 <__multiply>
 800ebe2:	900b      	str	r0, [sp, #44]	; 0x2c
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	f43f ae9f 	beq.w	800e928 <_strtod_l+0x490>
 800ebea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ebec:	4620      	mov	r0, r4
 800ebee:	f001 f9b9 	bl	800ff64 <_Bfree>
 800ebf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebf4:	9318      	str	r3, [sp, #96]	; 0x60
 800ebf6:	f1b8 0f00 	cmp.w	r8, #0
 800ebfa:	f300 808c 	bgt.w	800ed16 <_strtod_l+0x87e>
 800ebfe:	9b06      	ldr	r3, [sp, #24]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	dd08      	ble.n	800ec16 <_strtod_l+0x77e>
 800ec04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ec06:	9905      	ldr	r1, [sp, #20]
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f001 fb6d 	bl	80102e8 <__pow5mult>
 800ec0e:	9005      	str	r0, [sp, #20]
 800ec10:	2800      	cmp	r0, #0
 800ec12:	f43f ae89 	beq.w	800e928 <_strtod_l+0x490>
 800ec16:	2f00      	cmp	r7, #0
 800ec18:	dd08      	ble.n	800ec2c <_strtod_l+0x794>
 800ec1a:	9905      	ldr	r1, [sp, #20]
 800ec1c:	463a      	mov	r2, r7
 800ec1e:	4620      	mov	r0, r4
 800ec20:	f001 fbbc 	bl	801039c <__lshift>
 800ec24:	9005      	str	r0, [sp, #20]
 800ec26:	2800      	cmp	r0, #0
 800ec28:	f43f ae7e 	beq.w	800e928 <_strtod_l+0x490>
 800ec2c:	f1b9 0f00 	cmp.w	r9, #0
 800ec30:	dd08      	ble.n	800ec44 <_strtod_l+0x7ac>
 800ec32:	4631      	mov	r1, r6
 800ec34:	464a      	mov	r2, r9
 800ec36:	4620      	mov	r0, r4
 800ec38:	f001 fbb0 	bl	801039c <__lshift>
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	2800      	cmp	r0, #0
 800ec40:	f43f ae72 	beq.w	800e928 <_strtod_l+0x490>
 800ec44:	9a05      	ldr	r2, [sp, #20]
 800ec46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ec48:	4620      	mov	r0, r4
 800ec4a:	f001 fc33 	bl	80104b4 <__mdiff>
 800ec4e:	4605      	mov	r5, r0
 800ec50:	2800      	cmp	r0, #0
 800ec52:	f43f ae69 	beq.w	800e928 <_strtod_l+0x490>
 800ec56:	68c3      	ldr	r3, [r0, #12]
 800ec58:	930b      	str	r3, [sp, #44]	; 0x2c
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	60c3      	str	r3, [r0, #12]
 800ec5e:	4631      	mov	r1, r6
 800ec60:	f001 fc0c 	bl	801047c <__mcmp>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	da60      	bge.n	800ed2a <_strtod_l+0x892>
 800ec68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ec6e:	f040 8082 	bne.w	800ed76 <_strtod_l+0x8de>
 800ec72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d17d      	bne.n	800ed76 <_strtod_l+0x8de>
 800ec7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec7e:	0d1b      	lsrs	r3, r3, #20
 800ec80:	051b      	lsls	r3, r3, #20
 800ec82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec86:	d976      	bls.n	800ed76 <_strtod_l+0x8de>
 800ec88:	696b      	ldr	r3, [r5, #20]
 800ec8a:	b913      	cbnz	r3, 800ec92 <_strtod_l+0x7fa>
 800ec8c:	692b      	ldr	r3, [r5, #16]
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	dd71      	ble.n	800ed76 <_strtod_l+0x8de>
 800ec92:	4629      	mov	r1, r5
 800ec94:	2201      	movs	r2, #1
 800ec96:	4620      	mov	r0, r4
 800ec98:	f001 fb80 	bl	801039c <__lshift>
 800ec9c:	4631      	mov	r1, r6
 800ec9e:	4605      	mov	r5, r0
 800eca0:	f001 fbec 	bl	801047c <__mcmp>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	dd66      	ble.n	800ed76 <_strtod_l+0x8de>
 800eca8:	9904      	ldr	r1, [sp, #16]
 800ecaa:	4a53      	ldr	r2, [pc, #332]	; (800edf8 <_strtod_l+0x960>)
 800ecac:	465b      	mov	r3, fp
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	f000 8081 	beq.w	800edb6 <_strtod_l+0x91e>
 800ecb4:	ea02 010b 	and.w	r1, r2, fp
 800ecb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ecbc:	dc7b      	bgt.n	800edb6 <_strtod_l+0x91e>
 800ecbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ecc2:	f77f aea9 	ble.w	800ea18 <_strtod_l+0x580>
 800ecc6:	4b4d      	ldr	r3, [pc, #308]	; (800edfc <_strtod_l+0x964>)
 800ecc8:	4650      	mov	r0, sl
 800ecca:	4659      	mov	r1, fp
 800eccc:	2200      	movs	r2, #0
 800ecce:	f7f1 fc93 	bl	80005f8 <__aeabi_dmul>
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	4303      	orrs	r3, r0
 800ecd6:	bf08      	it	eq
 800ecd8:	2322      	moveq	r3, #34	; 0x22
 800ecda:	4682      	mov	sl, r0
 800ecdc:	468b      	mov	fp, r1
 800ecde:	bf08      	it	eq
 800ece0:	6023      	streq	r3, [r4, #0]
 800ece2:	e62b      	b.n	800e93c <_strtod_l+0x4a4>
 800ece4:	f04f 32ff 	mov.w	r2, #4294967295
 800ece8:	fa02 f303 	lsl.w	r3, r2, r3
 800ecec:	ea03 0a0a 	and.w	sl, r3, sl
 800ecf0:	e6e3      	b.n	800eaba <_strtod_l+0x622>
 800ecf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ecf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ecfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ecfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ed02:	fa01 f308 	lsl.w	r3, r1, r8
 800ed06:	9308      	str	r3, [sp, #32]
 800ed08:	910d      	str	r1, [sp, #52]	; 0x34
 800ed0a:	e746      	b.n	800eb9a <_strtod_l+0x702>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	9308      	str	r3, [sp, #32]
 800ed10:	2301      	movs	r3, #1
 800ed12:	930d      	str	r3, [sp, #52]	; 0x34
 800ed14:	e741      	b.n	800eb9a <_strtod_l+0x702>
 800ed16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ed18:	4642      	mov	r2, r8
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	f001 fb3e 	bl	801039c <__lshift>
 800ed20:	9018      	str	r0, [sp, #96]	; 0x60
 800ed22:	2800      	cmp	r0, #0
 800ed24:	f47f af6b 	bne.w	800ebfe <_strtod_l+0x766>
 800ed28:	e5fe      	b.n	800e928 <_strtod_l+0x490>
 800ed2a:	465f      	mov	r7, fp
 800ed2c:	d16e      	bne.n	800ee0c <_strtod_l+0x974>
 800ed2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed34:	b342      	cbz	r2, 800ed88 <_strtod_l+0x8f0>
 800ed36:	4a32      	ldr	r2, [pc, #200]	; (800ee00 <_strtod_l+0x968>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d128      	bne.n	800ed8e <_strtod_l+0x8f6>
 800ed3c:	9b04      	ldr	r3, [sp, #16]
 800ed3e:	4651      	mov	r1, sl
 800ed40:	b1eb      	cbz	r3, 800ed7e <_strtod_l+0x8e6>
 800ed42:	4b2d      	ldr	r3, [pc, #180]	; (800edf8 <_strtod_l+0x960>)
 800ed44:	403b      	ands	r3, r7
 800ed46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ed4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4e:	d819      	bhi.n	800ed84 <_strtod_l+0x8ec>
 800ed50:	0d1b      	lsrs	r3, r3, #20
 800ed52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ed56:	fa02 f303 	lsl.w	r3, r2, r3
 800ed5a:	4299      	cmp	r1, r3
 800ed5c:	d117      	bne.n	800ed8e <_strtod_l+0x8f6>
 800ed5e:	4b29      	ldr	r3, [pc, #164]	; (800ee04 <_strtod_l+0x96c>)
 800ed60:	429f      	cmp	r7, r3
 800ed62:	d102      	bne.n	800ed6a <_strtod_l+0x8d2>
 800ed64:	3101      	adds	r1, #1
 800ed66:	f43f addf 	beq.w	800e928 <_strtod_l+0x490>
 800ed6a:	4b23      	ldr	r3, [pc, #140]	; (800edf8 <_strtod_l+0x960>)
 800ed6c:	403b      	ands	r3, r7
 800ed6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ed72:	f04f 0a00 	mov.w	sl, #0
 800ed76:	9b04      	ldr	r3, [sp, #16]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1a4      	bne.n	800ecc6 <_strtod_l+0x82e>
 800ed7c:	e5de      	b.n	800e93c <_strtod_l+0x4a4>
 800ed7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed82:	e7ea      	b.n	800ed5a <_strtod_l+0x8c2>
 800ed84:	4613      	mov	r3, r2
 800ed86:	e7e8      	b.n	800ed5a <_strtod_l+0x8c2>
 800ed88:	ea53 030a 	orrs.w	r3, r3, sl
 800ed8c:	d08c      	beq.n	800eca8 <_strtod_l+0x810>
 800ed8e:	9b08      	ldr	r3, [sp, #32]
 800ed90:	b1db      	cbz	r3, 800edca <_strtod_l+0x932>
 800ed92:	423b      	tst	r3, r7
 800ed94:	d0ef      	beq.n	800ed76 <_strtod_l+0x8de>
 800ed96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed98:	9a04      	ldr	r2, [sp, #16]
 800ed9a:	4650      	mov	r0, sl
 800ed9c:	4659      	mov	r1, fp
 800ed9e:	b1c3      	cbz	r3, 800edd2 <_strtod_l+0x93a>
 800eda0:	f7ff fb5b 	bl	800e45a <sulp>
 800eda4:	4602      	mov	r2, r0
 800eda6:	460b      	mov	r3, r1
 800eda8:	ec51 0b18 	vmov	r0, r1, d8
 800edac:	f7f1 fa6e 	bl	800028c <__adddf3>
 800edb0:	4682      	mov	sl, r0
 800edb2:	468b      	mov	fp, r1
 800edb4:	e7df      	b.n	800ed76 <_strtod_l+0x8de>
 800edb6:	4013      	ands	r3, r2
 800edb8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800edbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800edc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800edc4:	f04f 3aff 	mov.w	sl, #4294967295
 800edc8:	e7d5      	b.n	800ed76 <_strtod_l+0x8de>
 800edca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edcc:	ea13 0f0a 	tst.w	r3, sl
 800edd0:	e7e0      	b.n	800ed94 <_strtod_l+0x8fc>
 800edd2:	f7ff fb42 	bl	800e45a <sulp>
 800edd6:	4602      	mov	r2, r0
 800edd8:	460b      	mov	r3, r1
 800edda:	ec51 0b18 	vmov	r0, r1, d8
 800edde:	f7f1 fa53 	bl	8000288 <__aeabi_dsub>
 800ede2:	2200      	movs	r2, #0
 800ede4:	2300      	movs	r3, #0
 800ede6:	4682      	mov	sl, r0
 800ede8:	468b      	mov	fp, r1
 800edea:	f7f1 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800edee:	2800      	cmp	r0, #0
 800edf0:	d0c1      	beq.n	800ed76 <_strtod_l+0x8de>
 800edf2:	e611      	b.n	800ea18 <_strtod_l+0x580>
 800edf4:	fffffc02 	.word	0xfffffc02
 800edf8:	7ff00000 	.word	0x7ff00000
 800edfc:	39500000 	.word	0x39500000
 800ee00:	000fffff 	.word	0x000fffff
 800ee04:	7fefffff 	.word	0x7fefffff
 800ee08:	08011768 	.word	0x08011768
 800ee0c:	4631      	mov	r1, r6
 800ee0e:	4628      	mov	r0, r5
 800ee10:	f001 fcb2 	bl	8010778 <__ratio>
 800ee14:	ec59 8b10 	vmov	r8, r9, d0
 800ee18:	ee10 0a10 	vmov	r0, s0
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee22:	4649      	mov	r1, r9
 800ee24:	f7f1 fe64 	bl	8000af0 <__aeabi_dcmple>
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d07a      	beq.n	800ef22 <_strtod_l+0xa8a>
 800ee2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d04a      	beq.n	800eec8 <_strtod_l+0xa30>
 800ee32:	4b95      	ldr	r3, [pc, #596]	; (800f088 <_strtod_l+0xbf0>)
 800ee34:	2200      	movs	r2, #0
 800ee36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ee3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f088 <_strtod_l+0xbf0>
 800ee3e:	f04f 0800 	mov.w	r8, #0
 800ee42:	4b92      	ldr	r3, [pc, #584]	; (800f08c <_strtod_l+0xbf4>)
 800ee44:	403b      	ands	r3, r7
 800ee46:	930d      	str	r3, [sp, #52]	; 0x34
 800ee48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ee4a:	4b91      	ldr	r3, [pc, #580]	; (800f090 <_strtod_l+0xbf8>)
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	f040 80b0 	bne.w	800efb2 <_strtod_l+0xb1a>
 800ee52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ee5a:	ec4b ab10 	vmov	d0, sl, fp
 800ee5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee62:	f001 fbb1 	bl	80105c8 <__ulp>
 800ee66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ee6a:	ec53 2b10 	vmov	r2, r3, d0
 800ee6e:	f7f1 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ee72:	4652      	mov	r2, sl
 800ee74:	465b      	mov	r3, fp
 800ee76:	f7f1 fa09 	bl	800028c <__adddf3>
 800ee7a:	460b      	mov	r3, r1
 800ee7c:	4983      	ldr	r1, [pc, #524]	; (800f08c <_strtod_l+0xbf4>)
 800ee7e:	4a85      	ldr	r2, [pc, #532]	; (800f094 <_strtod_l+0xbfc>)
 800ee80:	4019      	ands	r1, r3
 800ee82:	4291      	cmp	r1, r2
 800ee84:	4682      	mov	sl, r0
 800ee86:	d960      	bls.n	800ef4a <_strtod_l+0xab2>
 800ee88:	ee18 3a90 	vmov	r3, s17
 800ee8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d104      	bne.n	800ee9e <_strtod_l+0xa06>
 800ee94:	ee18 3a10 	vmov	r3, s16
 800ee98:	3301      	adds	r3, #1
 800ee9a:	f43f ad45 	beq.w	800e928 <_strtod_l+0x490>
 800ee9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f0a0 <_strtod_l+0xc08>
 800eea2:	f04f 3aff 	mov.w	sl, #4294967295
 800eea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eea8:	4620      	mov	r0, r4
 800eeaa:	f001 f85b 	bl	800ff64 <_Bfree>
 800eeae:	9905      	ldr	r1, [sp, #20]
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f001 f857 	bl	800ff64 <_Bfree>
 800eeb6:	4631      	mov	r1, r6
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f001 f853 	bl	800ff64 <_Bfree>
 800eebe:	4629      	mov	r1, r5
 800eec0:	4620      	mov	r0, r4
 800eec2:	f001 f84f 	bl	800ff64 <_Bfree>
 800eec6:	e61a      	b.n	800eafe <_strtod_l+0x666>
 800eec8:	f1ba 0f00 	cmp.w	sl, #0
 800eecc:	d11b      	bne.n	800ef06 <_strtod_l+0xa6e>
 800eece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eed2:	b9f3      	cbnz	r3, 800ef12 <_strtod_l+0xa7a>
 800eed4:	4b6c      	ldr	r3, [pc, #432]	; (800f088 <_strtod_l+0xbf0>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	4640      	mov	r0, r8
 800eeda:	4649      	mov	r1, r9
 800eedc:	f7f1 fdfe 	bl	8000adc <__aeabi_dcmplt>
 800eee0:	b9d0      	cbnz	r0, 800ef18 <_strtod_l+0xa80>
 800eee2:	4640      	mov	r0, r8
 800eee4:	4649      	mov	r1, r9
 800eee6:	4b6c      	ldr	r3, [pc, #432]	; (800f098 <_strtod_l+0xc00>)
 800eee8:	2200      	movs	r2, #0
 800eeea:	f7f1 fb85 	bl	80005f8 <__aeabi_dmul>
 800eeee:	4680      	mov	r8, r0
 800eef0:	4689      	mov	r9, r1
 800eef2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eef6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800eefa:	9315      	str	r3, [sp, #84]	; 0x54
 800eefc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ef00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ef04:	e79d      	b.n	800ee42 <_strtod_l+0x9aa>
 800ef06:	f1ba 0f01 	cmp.w	sl, #1
 800ef0a:	d102      	bne.n	800ef12 <_strtod_l+0xa7a>
 800ef0c:	2f00      	cmp	r7, #0
 800ef0e:	f43f ad83 	beq.w	800ea18 <_strtod_l+0x580>
 800ef12:	4b62      	ldr	r3, [pc, #392]	; (800f09c <_strtod_l+0xc04>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	e78e      	b.n	800ee36 <_strtod_l+0x99e>
 800ef18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f098 <_strtod_l+0xc00>
 800ef1c:	f04f 0800 	mov.w	r8, #0
 800ef20:	e7e7      	b.n	800eef2 <_strtod_l+0xa5a>
 800ef22:	4b5d      	ldr	r3, [pc, #372]	; (800f098 <_strtod_l+0xc00>)
 800ef24:	4640      	mov	r0, r8
 800ef26:	4649      	mov	r1, r9
 800ef28:	2200      	movs	r2, #0
 800ef2a:	f7f1 fb65 	bl	80005f8 <__aeabi_dmul>
 800ef2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef30:	4680      	mov	r8, r0
 800ef32:	4689      	mov	r9, r1
 800ef34:	b933      	cbnz	r3, 800ef44 <_strtod_l+0xaac>
 800ef36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef3a:	900e      	str	r0, [sp, #56]	; 0x38
 800ef3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ef42:	e7dd      	b.n	800ef00 <_strtod_l+0xa68>
 800ef44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ef48:	e7f9      	b.n	800ef3e <_strtod_l+0xaa6>
 800ef4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ef4e:	9b04      	ldr	r3, [sp, #16]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d1a8      	bne.n	800eea6 <_strtod_l+0xa0e>
 800ef54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef5a:	0d1b      	lsrs	r3, r3, #20
 800ef5c:	051b      	lsls	r3, r3, #20
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d1a1      	bne.n	800eea6 <_strtod_l+0xa0e>
 800ef62:	4640      	mov	r0, r8
 800ef64:	4649      	mov	r1, r9
 800ef66:	f7f1 fe7f 	bl	8000c68 <__aeabi_d2lz>
 800ef6a:	f7f1 fb17 	bl	800059c <__aeabi_l2d>
 800ef6e:	4602      	mov	r2, r0
 800ef70:	460b      	mov	r3, r1
 800ef72:	4640      	mov	r0, r8
 800ef74:	4649      	mov	r1, r9
 800ef76:	f7f1 f987 	bl	8000288 <__aeabi_dsub>
 800ef7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef80:	ea43 030a 	orr.w	r3, r3, sl
 800ef84:	4313      	orrs	r3, r2
 800ef86:	4680      	mov	r8, r0
 800ef88:	4689      	mov	r9, r1
 800ef8a:	d055      	beq.n	800f038 <_strtod_l+0xba0>
 800ef8c:	a336      	add	r3, pc, #216	; (adr r3, 800f068 <_strtod_l+0xbd0>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f7f1 fda3 	bl	8000adc <__aeabi_dcmplt>
 800ef96:	2800      	cmp	r0, #0
 800ef98:	f47f acd0 	bne.w	800e93c <_strtod_l+0x4a4>
 800ef9c:	a334      	add	r3, pc, #208	; (adr r3, 800f070 <_strtod_l+0xbd8>)
 800ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa2:	4640      	mov	r0, r8
 800efa4:	4649      	mov	r1, r9
 800efa6:	f7f1 fdb7 	bl	8000b18 <__aeabi_dcmpgt>
 800efaa:	2800      	cmp	r0, #0
 800efac:	f43f af7b 	beq.w	800eea6 <_strtod_l+0xa0e>
 800efb0:	e4c4      	b.n	800e93c <_strtod_l+0x4a4>
 800efb2:	9b04      	ldr	r3, [sp, #16]
 800efb4:	b333      	cbz	r3, 800f004 <_strtod_l+0xb6c>
 800efb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800efbc:	d822      	bhi.n	800f004 <_strtod_l+0xb6c>
 800efbe:	a32e      	add	r3, pc, #184	; (adr r3, 800f078 <_strtod_l+0xbe0>)
 800efc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc4:	4640      	mov	r0, r8
 800efc6:	4649      	mov	r1, r9
 800efc8:	f7f1 fd92 	bl	8000af0 <__aeabi_dcmple>
 800efcc:	b1a0      	cbz	r0, 800eff8 <_strtod_l+0xb60>
 800efce:	4649      	mov	r1, r9
 800efd0:	4640      	mov	r0, r8
 800efd2:	f7f1 fdc1 	bl	8000b58 <__aeabi_d2uiz>
 800efd6:	2801      	cmp	r0, #1
 800efd8:	bf38      	it	cc
 800efda:	2001      	movcc	r0, #1
 800efdc:	f7f1 fa92 	bl	8000504 <__aeabi_ui2d>
 800efe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efe2:	4680      	mov	r8, r0
 800efe4:	4689      	mov	r9, r1
 800efe6:	bb23      	cbnz	r3, 800f032 <_strtod_l+0xb9a>
 800efe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efec:	9010      	str	r0, [sp, #64]	; 0x40
 800efee:	9311      	str	r3, [sp, #68]	; 0x44
 800eff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800effa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800effc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f000:	1a9b      	subs	r3, r3, r2
 800f002:	9309      	str	r3, [sp, #36]	; 0x24
 800f004:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f008:	eeb0 0a48 	vmov.f32	s0, s16
 800f00c:	eef0 0a68 	vmov.f32	s1, s17
 800f010:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f014:	f001 fad8 	bl	80105c8 <__ulp>
 800f018:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f01c:	ec53 2b10 	vmov	r2, r3, d0
 800f020:	f7f1 faea 	bl	80005f8 <__aeabi_dmul>
 800f024:	ec53 2b18 	vmov	r2, r3, d8
 800f028:	f7f1 f930 	bl	800028c <__adddf3>
 800f02c:	4682      	mov	sl, r0
 800f02e:	468b      	mov	fp, r1
 800f030:	e78d      	b.n	800ef4e <_strtod_l+0xab6>
 800f032:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f036:	e7db      	b.n	800eff0 <_strtod_l+0xb58>
 800f038:	a311      	add	r3, pc, #68	; (adr r3, 800f080 <_strtod_l+0xbe8>)
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f7f1 fd4d 	bl	8000adc <__aeabi_dcmplt>
 800f042:	e7b2      	b.n	800efaa <_strtod_l+0xb12>
 800f044:	2300      	movs	r3, #0
 800f046:	930a      	str	r3, [sp, #40]	; 0x28
 800f048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f04a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	f7ff ba6b 	b.w	800e528 <_strtod_l+0x90>
 800f052:	2a65      	cmp	r2, #101	; 0x65
 800f054:	f43f ab5f 	beq.w	800e716 <_strtod_l+0x27e>
 800f058:	2a45      	cmp	r2, #69	; 0x45
 800f05a:	f43f ab5c 	beq.w	800e716 <_strtod_l+0x27e>
 800f05e:	2301      	movs	r3, #1
 800f060:	f7ff bb94 	b.w	800e78c <_strtod_l+0x2f4>
 800f064:	f3af 8000 	nop.w
 800f068:	94a03595 	.word	0x94a03595
 800f06c:	3fdfffff 	.word	0x3fdfffff
 800f070:	35afe535 	.word	0x35afe535
 800f074:	3fe00000 	.word	0x3fe00000
 800f078:	ffc00000 	.word	0xffc00000
 800f07c:	41dfffff 	.word	0x41dfffff
 800f080:	94a03595 	.word	0x94a03595
 800f084:	3fcfffff 	.word	0x3fcfffff
 800f088:	3ff00000 	.word	0x3ff00000
 800f08c:	7ff00000 	.word	0x7ff00000
 800f090:	7fe00000 	.word	0x7fe00000
 800f094:	7c9fffff 	.word	0x7c9fffff
 800f098:	3fe00000 	.word	0x3fe00000
 800f09c:	bff00000 	.word	0xbff00000
 800f0a0:	7fefffff 	.word	0x7fefffff

0800f0a4 <_strtod_r>:
 800f0a4:	4b01      	ldr	r3, [pc, #4]	; (800f0ac <_strtod_r+0x8>)
 800f0a6:	f7ff b9f7 	b.w	800e498 <_strtod_l>
 800f0aa:	bf00      	nop
 800f0ac:	20000078 	.word	0x20000078

0800f0b0 <_strtol_l.constprop.0>:
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0b6:	d001      	beq.n	800f0bc <_strtol_l.constprop.0+0xc>
 800f0b8:	2b24      	cmp	r3, #36	; 0x24
 800f0ba:	d906      	bls.n	800f0ca <_strtol_l.constprop.0+0x1a>
 800f0bc:	f7fe fe56 	bl	800dd6c <__errno>
 800f0c0:	2316      	movs	r3, #22
 800f0c2:	6003      	str	r3, [r0, #0]
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f1b0 <_strtol_l.constprop.0+0x100>
 800f0ce:	460d      	mov	r5, r1
 800f0d0:	462e      	mov	r6, r5
 800f0d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f0da:	f017 0708 	ands.w	r7, r7, #8
 800f0de:	d1f7      	bne.n	800f0d0 <_strtol_l.constprop.0+0x20>
 800f0e0:	2c2d      	cmp	r4, #45	; 0x2d
 800f0e2:	d132      	bne.n	800f14a <_strtol_l.constprop.0+0x9a>
 800f0e4:	782c      	ldrb	r4, [r5, #0]
 800f0e6:	2701      	movs	r7, #1
 800f0e8:	1cb5      	adds	r5, r6, #2
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d05b      	beq.n	800f1a6 <_strtol_l.constprop.0+0xf6>
 800f0ee:	2b10      	cmp	r3, #16
 800f0f0:	d109      	bne.n	800f106 <_strtol_l.constprop.0+0x56>
 800f0f2:	2c30      	cmp	r4, #48	; 0x30
 800f0f4:	d107      	bne.n	800f106 <_strtol_l.constprop.0+0x56>
 800f0f6:	782c      	ldrb	r4, [r5, #0]
 800f0f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f0fc:	2c58      	cmp	r4, #88	; 0x58
 800f0fe:	d14d      	bne.n	800f19c <_strtol_l.constprop.0+0xec>
 800f100:	786c      	ldrb	r4, [r5, #1]
 800f102:	2310      	movs	r3, #16
 800f104:	3502      	adds	r5, #2
 800f106:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f10a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f10e:	f04f 0c00 	mov.w	ip, #0
 800f112:	fbb8 f9f3 	udiv	r9, r8, r3
 800f116:	4666      	mov	r6, ip
 800f118:	fb03 8a19 	mls	sl, r3, r9, r8
 800f11c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f120:	f1be 0f09 	cmp.w	lr, #9
 800f124:	d816      	bhi.n	800f154 <_strtol_l.constprop.0+0xa4>
 800f126:	4674      	mov	r4, lr
 800f128:	42a3      	cmp	r3, r4
 800f12a:	dd24      	ble.n	800f176 <_strtol_l.constprop.0+0xc6>
 800f12c:	f1bc 0f00 	cmp.w	ip, #0
 800f130:	db1e      	blt.n	800f170 <_strtol_l.constprop.0+0xc0>
 800f132:	45b1      	cmp	r9, r6
 800f134:	d31c      	bcc.n	800f170 <_strtol_l.constprop.0+0xc0>
 800f136:	d101      	bne.n	800f13c <_strtol_l.constprop.0+0x8c>
 800f138:	45a2      	cmp	sl, r4
 800f13a:	db19      	blt.n	800f170 <_strtol_l.constprop.0+0xc0>
 800f13c:	fb06 4603 	mla	r6, r6, r3, r4
 800f140:	f04f 0c01 	mov.w	ip, #1
 800f144:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f148:	e7e8      	b.n	800f11c <_strtol_l.constprop.0+0x6c>
 800f14a:	2c2b      	cmp	r4, #43	; 0x2b
 800f14c:	bf04      	itt	eq
 800f14e:	782c      	ldrbeq	r4, [r5, #0]
 800f150:	1cb5      	addeq	r5, r6, #2
 800f152:	e7ca      	b.n	800f0ea <_strtol_l.constprop.0+0x3a>
 800f154:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f158:	f1be 0f19 	cmp.w	lr, #25
 800f15c:	d801      	bhi.n	800f162 <_strtol_l.constprop.0+0xb2>
 800f15e:	3c37      	subs	r4, #55	; 0x37
 800f160:	e7e2      	b.n	800f128 <_strtol_l.constprop.0+0x78>
 800f162:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f166:	f1be 0f19 	cmp.w	lr, #25
 800f16a:	d804      	bhi.n	800f176 <_strtol_l.constprop.0+0xc6>
 800f16c:	3c57      	subs	r4, #87	; 0x57
 800f16e:	e7db      	b.n	800f128 <_strtol_l.constprop.0+0x78>
 800f170:	f04f 3cff 	mov.w	ip, #4294967295
 800f174:	e7e6      	b.n	800f144 <_strtol_l.constprop.0+0x94>
 800f176:	f1bc 0f00 	cmp.w	ip, #0
 800f17a:	da05      	bge.n	800f188 <_strtol_l.constprop.0+0xd8>
 800f17c:	2322      	movs	r3, #34	; 0x22
 800f17e:	6003      	str	r3, [r0, #0]
 800f180:	4646      	mov	r6, r8
 800f182:	b942      	cbnz	r2, 800f196 <_strtol_l.constprop.0+0xe6>
 800f184:	4630      	mov	r0, r6
 800f186:	e79e      	b.n	800f0c6 <_strtol_l.constprop.0+0x16>
 800f188:	b107      	cbz	r7, 800f18c <_strtol_l.constprop.0+0xdc>
 800f18a:	4276      	negs	r6, r6
 800f18c:	2a00      	cmp	r2, #0
 800f18e:	d0f9      	beq.n	800f184 <_strtol_l.constprop.0+0xd4>
 800f190:	f1bc 0f00 	cmp.w	ip, #0
 800f194:	d000      	beq.n	800f198 <_strtol_l.constprop.0+0xe8>
 800f196:	1e69      	subs	r1, r5, #1
 800f198:	6011      	str	r1, [r2, #0]
 800f19a:	e7f3      	b.n	800f184 <_strtol_l.constprop.0+0xd4>
 800f19c:	2430      	movs	r4, #48	; 0x30
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1b1      	bne.n	800f106 <_strtol_l.constprop.0+0x56>
 800f1a2:	2308      	movs	r3, #8
 800f1a4:	e7af      	b.n	800f106 <_strtol_l.constprop.0+0x56>
 800f1a6:	2c30      	cmp	r4, #48	; 0x30
 800f1a8:	d0a5      	beq.n	800f0f6 <_strtol_l.constprop.0+0x46>
 800f1aa:	230a      	movs	r3, #10
 800f1ac:	e7ab      	b.n	800f106 <_strtol_l.constprop.0+0x56>
 800f1ae:	bf00      	nop
 800f1b0:	08011791 	.word	0x08011791

0800f1b4 <_strtol_r>:
 800f1b4:	f7ff bf7c 	b.w	800f0b0 <_strtol_l.constprop.0>

0800f1b8 <__swbuf_r>:
 800f1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ba:	460e      	mov	r6, r1
 800f1bc:	4614      	mov	r4, r2
 800f1be:	4605      	mov	r5, r0
 800f1c0:	b118      	cbz	r0, 800f1ca <__swbuf_r+0x12>
 800f1c2:	6983      	ldr	r3, [r0, #24]
 800f1c4:	b90b      	cbnz	r3, 800f1ca <__swbuf_r+0x12>
 800f1c6:	f000 f9f3 	bl	800f5b0 <__sinit>
 800f1ca:	4b21      	ldr	r3, [pc, #132]	; (800f250 <__swbuf_r+0x98>)
 800f1cc:	429c      	cmp	r4, r3
 800f1ce:	d12b      	bne.n	800f228 <__swbuf_r+0x70>
 800f1d0:	686c      	ldr	r4, [r5, #4]
 800f1d2:	69a3      	ldr	r3, [r4, #24]
 800f1d4:	60a3      	str	r3, [r4, #8]
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	071a      	lsls	r2, r3, #28
 800f1da:	d52f      	bpl.n	800f23c <__swbuf_r+0x84>
 800f1dc:	6923      	ldr	r3, [r4, #16]
 800f1de:	b36b      	cbz	r3, 800f23c <__swbuf_r+0x84>
 800f1e0:	6923      	ldr	r3, [r4, #16]
 800f1e2:	6820      	ldr	r0, [r4, #0]
 800f1e4:	1ac0      	subs	r0, r0, r3
 800f1e6:	6963      	ldr	r3, [r4, #20]
 800f1e8:	b2f6      	uxtb	r6, r6
 800f1ea:	4283      	cmp	r3, r0
 800f1ec:	4637      	mov	r7, r6
 800f1ee:	dc04      	bgt.n	800f1fa <__swbuf_r+0x42>
 800f1f0:	4621      	mov	r1, r4
 800f1f2:	4628      	mov	r0, r5
 800f1f4:	f000 f948 	bl	800f488 <_fflush_r>
 800f1f8:	bb30      	cbnz	r0, 800f248 <__swbuf_r+0x90>
 800f1fa:	68a3      	ldr	r3, [r4, #8]
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	60a3      	str	r3, [r4, #8]
 800f200:	6823      	ldr	r3, [r4, #0]
 800f202:	1c5a      	adds	r2, r3, #1
 800f204:	6022      	str	r2, [r4, #0]
 800f206:	701e      	strb	r6, [r3, #0]
 800f208:	6963      	ldr	r3, [r4, #20]
 800f20a:	3001      	adds	r0, #1
 800f20c:	4283      	cmp	r3, r0
 800f20e:	d004      	beq.n	800f21a <__swbuf_r+0x62>
 800f210:	89a3      	ldrh	r3, [r4, #12]
 800f212:	07db      	lsls	r3, r3, #31
 800f214:	d506      	bpl.n	800f224 <__swbuf_r+0x6c>
 800f216:	2e0a      	cmp	r6, #10
 800f218:	d104      	bne.n	800f224 <__swbuf_r+0x6c>
 800f21a:	4621      	mov	r1, r4
 800f21c:	4628      	mov	r0, r5
 800f21e:	f000 f933 	bl	800f488 <_fflush_r>
 800f222:	b988      	cbnz	r0, 800f248 <__swbuf_r+0x90>
 800f224:	4638      	mov	r0, r7
 800f226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f228:	4b0a      	ldr	r3, [pc, #40]	; (800f254 <__swbuf_r+0x9c>)
 800f22a:	429c      	cmp	r4, r3
 800f22c:	d101      	bne.n	800f232 <__swbuf_r+0x7a>
 800f22e:	68ac      	ldr	r4, [r5, #8]
 800f230:	e7cf      	b.n	800f1d2 <__swbuf_r+0x1a>
 800f232:	4b09      	ldr	r3, [pc, #36]	; (800f258 <__swbuf_r+0xa0>)
 800f234:	429c      	cmp	r4, r3
 800f236:	bf08      	it	eq
 800f238:	68ec      	ldreq	r4, [r5, #12]
 800f23a:	e7ca      	b.n	800f1d2 <__swbuf_r+0x1a>
 800f23c:	4621      	mov	r1, r4
 800f23e:	4628      	mov	r0, r5
 800f240:	f000 f81e 	bl	800f280 <__swsetup_r>
 800f244:	2800      	cmp	r0, #0
 800f246:	d0cb      	beq.n	800f1e0 <__swbuf_r+0x28>
 800f248:	f04f 37ff 	mov.w	r7, #4294967295
 800f24c:	e7ea      	b.n	800f224 <__swbuf_r+0x6c>
 800f24e:	bf00      	nop
 800f250:	080118b4 	.word	0x080118b4
 800f254:	080118d4 	.word	0x080118d4
 800f258:	08011894 	.word	0x08011894

0800f25c <_write_r>:
 800f25c:	b538      	push	{r3, r4, r5, lr}
 800f25e:	4d07      	ldr	r5, [pc, #28]	; (800f27c <_write_r+0x20>)
 800f260:	4604      	mov	r4, r0
 800f262:	4608      	mov	r0, r1
 800f264:	4611      	mov	r1, r2
 800f266:	2200      	movs	r2, #0
 800f268:	602a      	str	r2, [r5, #0]
 800f26a:	461a      	mov	r2, r3
 800f26c:	f7f3 ff8f 	bl	800318e <_write>
 800f270:	1c43      	adds	r3, r0, #1
 800f272:	d102      	bne.n	800f27a <_write_r+0x1e>
 800f274:	682b      	ldr	r3, [r5, #0]
 800f276:	b103      	cbz	r3, 800f27a <_write_r+0x1e>
 800f278:	6023      	str	r3, [r4, #0]
 800f27a:	bd38      	pop	{r3, r4, r5, pc}
 800f27c:	20002708 	.word	0x20002708

0800f280 <__swsetup_r>:
 800f280:	4b32      	ldr	r3, [pc, #200]	; (800f34c <__swsetup_r+0xcc>)
 800f282:	b570      	push	{r4, r5, r6, lr}
 800f284:	681d      	ldr	r5, [r3, #0]
 800f286:	4606      	mov	r6, r0
 800f288:	460c      	mov	r4, r1
 800f28a:	b125      	cbz	r5, 800f296 <__swsetup_r+0x16>
 800f28c:	69ab      	ldr	r3, [r5, #24]
 800f28e:	b913      	cbnz	r3, 800f296 <__swsetup_r+0x16>
 800f290:	4628      	mov	r0, r5
 800f292:	f000 f98d 	bl	800f5b0 <__sinit>
 800f296:	4b2e      	ldr	r3, [pc, #184]	; (800f350 <__swsetup_r+0xd0>)
 800f298:	429c      	cmp	r4, r3
 800f29a:	d10f      	bne.n	800f2bc <__swsetup_r+0x3c>
 800f29c:	686c      	ldr	r4, [r5, #4]
 800f29e:	89a3      	ldrh	r3, [r4, #12]
 800f2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2a4:	0719      	lsls	r1, r3, #28
 800f2a6:	d42c      	bmi.n	800f302 <__swsetup_r+0x82>
 800f2a8:	06dd      	lsls	r5, r3, #27
 800f2aa:	d411      	bmi.n	800f2d0 <__swsetup_r+0x50>
 800f2ac:	2309      	movs	r3, #9
 800f2ae:	6033      	str	r3, [r6, #0]
 800f2b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f2b4:	81a3      	strh	r3, [r4, #12]
 800f2b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ba:	e03e      	b.n	800f33a <__swsetup_r+0xba>
 800f2bc:	4b25      	ldr	r3, [pc, #148]	; (800f354 <__swsetup_r+0xd4>)
 800f2be:	429c      	cmp	r4, r3
 800f2c0:	d101      	bne.n	800f2c6 <__swsetup_r+0x46>
 800f2c2:	68ac      	ldr	r4, [r5, #8]
 800f2c4:	e7eb      	b.n	800f29e <__swsetup_r+0x1e>
 800f2c6:	4b24      	ldr	r3, [pc, #144]	; (800f358 <__swsetup_r+0xd8>)
 800f2c8:	429c      	cmp	r4, r3
 800f2ca:	bf08      	it	eq
 800f2cc:	68ec      	ldreq	r4, [r5, #12]
 800f2ce:	e7e6      	b.n	800f29e <__swsetup_r+0x1e>
 800f2d0:	0758      	lsls	r0, r3, #29
 800f2d2:	d512      	bpl.n	800f2fa <__swsetup_r+0x7a>
 800f2d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2d6:	b141      	cbz	r1, 800f2ea <__swsetup_r+0x6a>
 800f2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2dc:	4299      	cmp	r1, r3
 800f2de:	d002      	beq.n	800f2e6 <__swsetup_r+0x66>
 800f2e0:	4630      	mov	r0, r6
 800f2e2:	f001 fad7 	bl	8010894 <_free_r>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	6363      	str	r3, [r4, #52]	; 0x34
 800f2ea:	89a3      	ldrh	r3, [r4, #12]
 800f2ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f2f0:	81a3      	strh	r3, [r4, #12]
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	6063      	str	r3, [r4, #4]
 800f2f6:	6923      	ldr	r3, [r4, #16]
 800f2f8:	6023      	str	r3, [r4, #0]
 800f2fa:	89a3      	ldrh	r3, [r4, #12]
 800f2fc:	f043 0308 	orr.w	r3, r3, #8
 800f300:	81a3      	strh	r3, [r4, #12]
 800f302:	6923      	ldr	r3, [r4, #16]
 800f304:	b94b      	cbnz	r3, 800f31a <__swsetup_r+0x9a>
 800f306:	89a3      	ldrh	r3, [r4, #12]
 800f308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f310:	d003      	beq.n	800f31a <__swsetup_r+0x9a>
 800f312:	4621      	mov	r1, r4
 800f314:	4630      	mov	r0, r6
 800f316:	f000 fd93 	bl	800fe40 <__smakebuf_r>
 800f31a:	89a0      	ldrh	r0, [r4, #12]
 800f31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f320:	f010 0301 	ands.w	r3, r0, #1
 800f324:	d00a      	beq.n	800f33c <__swsetup_r+0xbc>
 800f326:	2300      	movs	r3, #0
 800f328:	60a3      	str	r3, [r4, #8]
 800f32a:	6963      	ldr	r3, [r4, #20]
 800f32c:	425b      	negs	r3, r3
 800f32e:	61a3      	str	r3, [r4, #24]
 800f330:	6923      	ldr	r3, [r4, #16]
 800f332:	b943      	cbnz	r3, 800f346 <__swsetup_r+0xc6>
 800f334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f338:	d1ba      	bne.n	800f2b0 <__swsetup_r+0x30>
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
 800f33c:	0781      	lsls	r1, r0, #30
 800f33e:	bf58      	it	pl
 800f340:	6963      	ldrpl	r3, [r4, #20]
 800f342:	60a3      	str	r3, [r4, #8]
 800f344:	e7f4      	b.n	800f330 <__swsetup_r+0xb0>
 800f346:	2000      	movs	r0, #0
 800f348:	e7f7      	b.n	800f33a <__swsetup_r+0xba>
 800f34a:	bf00      	nop
 800f34c:	20000010 	.word	0x20000010
 800f350:	080118b4 	.word	0x080118b4
 800f354:	080118d4 	.word	0x080118d4
 800f358:	08011894 	.word	0x08011894

0800f35c <_close_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	4d06      	ldr	r5, [pc, #24]	; (800f378 <_close_r+0x1c>)
 800f360:	2300      	movs	r3, #0
 800f362:	4604      	mov	r4, r0
 800f364:	4608      	mov	r0, r1
 800f366:	602b      	str	r3, [r5, #0]
 800f368:	f7f3 ff2d 	bl	80031c6 <_close>
 800f36c:	1c43      	adds	r3, r0, #1
 800f36e:	d102      	bne.n	800f376 <_close_r+0x1a>
 800f370:	682b      	ldr	r3, [r5, #0]
 800f372:	b103      	cbz	r3, 800f376 <_close_r+0x1a>
 800f374:	6023      	str	r3, [r4, #0]
 800f376:	bd38      	pop	{r3, r4, r5, pc}
 800f378:	20002708 	.word	0x20002708

0800f37c <__sflush_r>:
 800f37c:	898a      	ldrh	r2, [r1, #12]
 800f37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f382:	4605      	mov	r5, r0
 800f384:	0710      	lsls	r0, r2, #28
 800f386:	460c      	mov	r4, r1
 800f388:	d458      	bmi.n	800f43c <__sflush_r+0xc0>
 800f38a:	684b      	ldr	r3, [r1, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	dc05      	bgt.n	800f39c <__sflush_r+0x20>
 800f390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f392:	2b00      	cmp	r3, #0
 800f394:	dc02      	bgt.n	800f39c <__sflush_r+0x20>
 800f396:	2000      	movs	r0, #0
 800f398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f39e:	2e00      	cmp	r6, #0
 800f3a0:	d0f9      	beq.n	800f396 <__sflush_r+0x1a>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f3a8:	682f      	ldr	r7, [r5, #0]
 800f3aa:	602b      	str	r3, [r5, #0]
 800f3ac:	d032      	beq.n	800f414 <__sflush_r+0x98>
 800f3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f3b0:	89a3      	ldrh	r3, [r4, #12]
 800f3b2:	075a      	lsls	r2, r3, #29
 800f3b4:	d505      	bpl.n	800f3c2 <__sflush_r+0x46>
 800f3b6:	6863      	ldr	r3, [r4, #4]
 800f3b8:	1ac0      	subs	r0, r0, r3
 800f3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f3bc:	b10b      	cbz	r3, 800f3c2 <__sflush_r+0x46>
 800f3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f3c0:	1ac0      	subs	r0, r0, r3
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3c8:	6a21      	ldr	r1, [r4, #32]
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	47b0      	blx	r6
 800f3ce:	1c43      	adds	r3, r0, #1
 800f3d0:	89a3      	ldrh	r3, [r4, #12]
 800f3d2:	d106      	bne.n	800f3e2 <__sflush_r+0x66>
 800f3d4:	6829      	ldr	r1, [r5, #0]
 800f3d6:	291d      	cmp	r1, #29
 800f3d8:	d82c      	bhi.n	800f434 <__sflush_r+0xb8>
 800f3da:	4a2a      	ldr	r2, [pc, #168]	; (800f484 <__sflush_r+0x108>)
 800f3dc:	40ca      	lsrs	r2, r1
 800f3de:	07d6      	lsls	r6, r2, #31
 800f3e0:	d528      	bpl.n	800f434 <__sflush_r+0xb8>
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	6062      	str	r2, [r4, #4]
 800f3e6:	04d9      	lsls	r1, r3, #19
 800f3e8:	6922      	ldr	r2, [r4, #16]
 800f3ea:	6022      	str	r2, [r4, #0]
 800f3ec:	d504      	bpl.n	800f3f8 <__sflush_r+0x7c>
 800f3ee:	1c42      	adds	r2, r0, #1
 800f3f0:	d101      	bne.n	800f3f6 <__sflush_r+0x7a>
 800f3f2:	682b      	ldr	r3, [r5, #0]
 800f3f4:	b903      	cbnz	r3, 800f3f8 <__sflush_r+0x7c>
 800f3f6:	6560      	str	r0, [r4, #84]	; 0x54
 800f3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3fa:	602f      	str	r7, [r5, #0]
 800f3fc:	2900      	cmp	r1, #0
 800f3fe:	d0ca      	beq.n	800f396 <__sflush_r+0x1a>
 800f400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f404:	4299      	cmp	r1, r3
 800f406:	d002      	beq.n	800f40e <__sflush_r+0x92>
 800f408:	4628      	mov	r0, r5
 800f40a:	f001 fa43 	bl	8010894 <_free_r>
 800f40e:	2000      	movs	r0, #0
 800f410:	6360      	str	r0, [r4, #52]	; 0x34
 800f412:	e7c1      	b.n	800f398 <__sflush_r+0x1c>
 800f414:	6a21      	ldr	r1, [r4, #32]
 800f416:	2301      	movs	r3, #1
 800f418:	4628      	mov	r0, r5
 800f41a:	47b0      	blx	r6
 800f41c:	1c41      	adds	r1, r0, #1
 800f41e:	d1c7      	bne.n	800f3b0 <__sflush_r+0x34>
 800f420:	682b      	ldr	r3, [r5, #0]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d0c4      	beq.n	800f3b0 <__sflush_r+0x34>
 800f426:	2b1d      	cmp	r3, #29
 800f428:	d001      	beq.n	800f42e <__sflush_r+0xb2>
 800f42a:	2b16      	cmp	r3, #22
 800f42c:	d101      	bne.n	800f432 <__sflush_r+0xb6>
 800f42e:	602f      	str	r7, [r5, #0]
 800f430:	e7b1      	b.n	800f396 <__sflush_r+0x1a>
 800f432:	89a3      	ldrh	r3, [r4, #12]
 800f434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f438:	81a3      	strh	r3, [r4, #12]
 800f43a:	e7ad      	b.n	800f398 <__sflush_r+0x1c>
 800f43c:	690f      	ldr	r7, [r1, #16]
 800f43e:	2f00      	cmp	r7, #0
 800f440:	d0a9      	beq.n	800f396 <__sflush_r+0x1a>
 800f442:	0793      	lsls	r3, r2, #30
 800f444:	680e      	ldr	r6, [r1, #0]
 800f446:	bf08      	it	eq
 800f448:	694b      	ldreq	r3, [r1, #20]
 800f44a:	600f      	str	r7, [r1, #0]
 800f44c:	bf18      	it	ne
 800f44e:	2300      	movne	r3, #0
 800f450:	eba6 0807 	sub.w	r8, r6, r7
 800f454:	608b      	str	r3, [r1, #8]
 800f456:	f1b8 0f00 	cmp.w	r8, #0
 800f45a:	dd9c      	ble.n	800f396 <__sflush_r+0x1a>
 800f45c:	6a21      	ldr	r1, [r4, #32]
 800f45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f460:	4643      	mov	r3, r8
 800f462:	463a      	mov	r2, r7
 800f464:	4628      	mov	r0, r5
 800f466:	47b0      	blx	r6
 800f468:	2800      	cmp	r0, #0
 800f46a:	dc06      	bgt.n	800f47a <__sflush_r+0xfe>
 800f46c:	89a3      	ldrh	r3, [r4, #12]
 800f46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f472:	81a3      	strh	r3, [r4, #12]
 800f474:	f04f 30ff 	mov.w	r0, #4294967295
 800f478:	e78e      	b.n	800f398 <__sflush_r+0x1c>
 800f47a:	4407      	add	r7, r0
 800f47c:	eba8 0800 	sub.w	r8, r8, r0
 800f480:	e7e9      	b.n	800f456 <__sflush_r+0xda>
 800f482:	bf00      	nop
 800f484:	20400001 	.word	0x20400001

0800f488 <_fflush_r>:
 800f488:	b538      	push	{r3, r4, r5, lr}
 800f48a:	690b      	ldr	r3, [r1, #16]
 800f48c:	4605      	mov	r5, r0
 800f48e:	460c      	mov	r4, r1
 800f490:	b913      	cbnz	r3, 800f498 <_fflush_r+0x10>
 800f492:	2500      	movs	r5, #0
 800f494:	4628      	mov	r0, r5
 800f496:	bd38      	pop	{r3, r4, r5, pc}
 800f498:	b118      	cbz	r0, 800f4a2 <_fflush_r+0x1a>
 800f49a:	6983      	ldr	r3, [r0, #24]
 800f49c:	b90b      	cbnz	r3, 800f4a2 <_fflush_r+0x1a>
 800f49e:	f000 f887 	bl	800f5b0 <__sinit>
 800f4a2:	4b14      	ldr	r3, [pc, #80]	; (800f4f4 <_fflush_r+0x6c>)
 800f4a4:	429c      	cmp	r4, r3
 800f4a6:	d11b      	bne.n	800f4e0 <_fflush_r+0x58>
 800f4a8:	686c      	ldr	r4, [r5, #4]
 800f4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d0ef      	beq.n	800f492 <_fflush_r+0xa>
 800f4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4b4:	07d0      	lsls	r0, r2, #31
 800f4b6:	d404      	bmi.n	800f4c2 <_fflush_r+0x3a>
 800f4b8:	0599      	lsls	r1, r3, #22
 800f4ba:	d402      	bmi.n	800f4c2 <_fflush_r+0x3a>
 800f4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4be:	f000 fc84 	bl	800fdca <__retarget_lock_acquire_recursive>
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	4621      	mov	r1, r4
 800f4c6:	f7ff ff59 	bl	800f37c <__sflush_r>
 800f4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4cc:	07da      	lsls	r2, r3, #31
 800f4ce:	4605      	mov	r5, r0
 800f4d0:	d4e0      	bmi.n	800f494 <_fflush_r+0xc>
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	059b      	lsls	r3, r3, #22
 800f4d6:	d4dd      	bmi.n	800f494 <_fflush_r+0xc>
 800f4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4da:	f000 fc77 	bl	800fdcc <__retarget_lock_release_recursive>
 800f4de:	e7d9      	b.n	800f494 <_fflush_r+0xc>
 800f4e0:	4b05      	ldr	r3, [pc, #20]	; (800f4f8 <_fflush_r+0x70>)
 800f4e2:	429c      	cmp	r4, r3
 800f4e4:	d101      	bne.n	800f4ea <_fflush_r+0x62>
 800f4e6:	68ac      	ldr	r4, [r5, #8]
 800f4e8:	e7df      	b.n	800f4aa <_fflush_r+0x22>
 800f4ea:	4b04      	ldr	r3, [pc, #16]	; (800f4fc <_fflush_r+0x74>)
 800f4ec:	429c      	cmp	r4, r3
 800f4ee:	bf08      	it	eq
 800f4f0:	68ec      	ldreq	r4, [r5, #12]
 800f4f2:	e7da      	b.n	800f4aa <_fflush_r+0x22>
 800f4f4:	080118b4 	.word	0x080118b4
 800f4f8:	080118d4 	.word	0x080118d4
 800f4fc:	08011894 	.word	0x08011894

0800f500 <std>:
 800f500:	2300      	movs	r3, #0
 800f502:	b510      	push	{r4, lr}
 800f504:	4604      	mov	r4, r0
 800f506:	e9c0 3300 	strd	r3, r3, [r0]
 800f50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f50e:	6083      	str	r3, [r0, #8]
 800f510:	8181      	strh	r1, [r0, #12]
 800f512:	6643      	str	r3, [r0, #100]	; 0x64
 800f514:	81c2      	strh	r2, [r0, #14]
 800f516:	6183      	str	r3, [r0, #24]
 800f518:	4619      	mov	r1, r3
 800f51a:	2208      	movs	r2, #8
 800f51c:	305c      	adds	r0, #92	; 0x5c
 800f51e:	f7fe fc5d 	bl	800dddc <memset>
 800f522:	4b05      	ldr	r3, [pc, #20]	; (800f538 <std+0x38>)
 800f524:	6263      	str	r3, [r4, #36]	; 0x24
 800f526:	4b05      	ldr	r3, [pc, #20]	; (800f53c <std+0x3c>)
 800f528:	62a3      	str	r3, [r4, #40]	; 0x28
 800f52a:	4b05      	ldr	r3, [pc, #20]	; (800f540 <std+0x40>)
 800f52c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f52e:	4b05      	ldr	r3, [pc, #20]	; (800f544 <std+0x44>)
 800f530:	6224      	str	r4, [r4, #32]
 800f532:	6323      	str	r3, [r4, #48]	; 0x30
 800f534:	bd10      	pop	{r4, pc}
 800f536:	bf00      	nop
 800f538:	0800e3ad 	.word	0x0800e3ad
 800f53c:	0800e3cf 	.word	0x0800e3cf
 800f540:	0800e407 	.word	0x0800e407
 800f544:	0800e42b 	.word	0x0800e42b

0800f548 <_cleanup_r>:
 800f548:	4901      	ldr	r1, [pc, #4]	; (800f550 <_cleanup_r+0x8>)
 800f54a:	f000 b8af 	b.w	800f6ac <_fwalk_reent>
 800f54e:	bf00      	nop
 800f550:	0800f489 	.word	0x0800f489

0800f554 <__sfmoreglue>:
 800f554:	b570      	push	{r4, r5, r6, lr}
 800f556:	2268      	movs	r2, #104	; 0x68
 800f558:	1e4d      	subs	r5, r1, #1
 800f55a:	4355      	muls	r5, r2
 800f55c:	460e      	mov	r6, r1
 800f55e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f562:	f001 fa03 	bl	801096c <_malloc_r>
 800f566:	4604      	mov	r4, r0
 800f568:	b140      	cbz	r0, 800f57c <__sfmoreglue+0x28>
 800f56a:	2100      	movs	r1, #0
 800f56c:	e9c0 1600 	strd	r1, r6, [r0]
 800f570:	300c      	adds	r0, #12
 800f572:	60a0      	str	r0, [r4, #8]
 800f574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f578:	f7fe fc30 	bl	800dddc <memset>
 800f57c:	4620      	mov	r0, r4
 800f57e:	bd70      	pop	{r4, r5, r6, pc}

0800f580 <__sfp_lock_acquire>:
 800f580:	4801      	ldr	r0, [pc, #4]	; (800f588 <__sfp_lock_acquire+0x8>)
 800f582:	f000 bc22 	b.w	800fdca <__retarget_lock_acquire_recursive>
 800f586:	bf00      	nop
 800f588:	200026fd 	.word	0x200026fd

0800f58c <__sfp_lock_release>:
 800f58c:	4801      	ldr	r0, [pc, #4]	; (800f594 <__sfp_lock_release+0x8>)
 800f58e:	f000 bc1d 	b.w	800fdcc <__retarget_lock_release_recursive>
 800f592:	bf00      	nop
 800f594:	200026fd 	.word	0x200026fd

0800f598 <__sinit_lock_acquire>:
 800f598:	4801      	ldr	r0, [pc, #4]	; (800f5a0 <__sinit_lock_acquire+0x8>)
 800f59a:	f000 bc16 	b.w	800fdca <__retarget_lock_acquire_recursive>
 800f59e:	bf00      	nop
 800f5a0:	200026fe 	.word	0x200026fe

0800f5a4 <__sinit_lock_release>:
 800f5a4:	4801      	ldr	r0, [pc, #4]	; (800f5ac <__sinit_lock_release+0x8>)
 800f5a6:	f000 bc11 	b.w	800fdcc <__retarget_lock_release_recursive>
 800f5aa:	bf00      	nop
 800f5ac:	200026fe 	.word	0x200026fe

0800f5b0 <__sinit>:
 800f5b0:	b510      	push	{r4, lr}
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	f7ff fff0 	bl	800f598 <__sinit_lock_acquire>
 800f5b8:	69a3      	ldr	r3, [r4, #24]
 800f5ba:	b11b      	cbz	r3, 800f5c4 <__sinit+0x14>
 800f5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5c0:	f7ff bff0 	b.w	800f5a4 <__sinit_lock_release>
 800f5c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f5c8:	6523      	str	r3, [r4, #80]	; 0x50
 800f5ca:	4b13      	ldr	r3, [pc, #76]	; (800f618 <__sinit+0x68>)
 800f5cc:	4a13      	ldr	r2, [pc, #76]	; (800f61c <__sinit+0x6c>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f5d2:	42a3      	cmp	r3, r4
 800f5d4:	bf04      	itt	eq
 800f5d6:	2301      	moveq	r3, #1
 800f5d8:	61a3      	streq	r3, [r4, #24]
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f000 f820 	bl	800f620 <__sfp>
 800f5e0:	6060      	str	r0, [r4, #4]
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f000 f81c 	bl	800f620 <__sfp>
 800f5e8:	60a0      	str	r0, [r4, #8]
 800f5ea:	4620      	mov	r0, r4
 800f5ec:	f000 f818 	bl	800f620 <__sfp>
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	60e0      	str	r0, [r4, #12]
 800f5f4:	2104      	movs	r1, #4
 800f5f6:	6860      	ldr	r0, [r4, #4]
 800f5f8:	f7ff ff82 	bl	800f500 <std>
 800f5fc:	68a0      	ldr	r0, [r4, #8]
 800f5fe:	2201      	movs	r2, #1
 800f600:	2109      	movs	r1, #9
 800f602:	f7ff ff7d 	bl	800f500 <std>
 800f606:	68e0      	ldr	r0, [r4, #12]
 800f608:	2202      	movs	r2, #2
 800f60a:	2112      	movs	r1, #18
 800f60c:	f7ff ff78 	bl	800f500 <std>
 800f610:	2301      	movs	r3, #1
 800f612:	61a3      	str	r3, [r4, #24]
 800f614:	e7d2      	b.n	800f5bc <__sinit+0xc>
 800f616:	bf00      	nop
 800f618:	08011724 	.word	0x08011724
 800f61c:	0800f549 	.word	0x0800f549

0800f620 <__sfp>:
 800f620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f622:	4607      	mov	r7, r0
 800f624:	f7ff ffac 	bl	800f580 <__sfp_lock_acquire>
 800f628:	4b1e      	ldr	r3, [pc, #120]	; (800f6a4 <__sfp+0x84>)
 800f62a:	681e      	ldr	r6, [r3, #0]
 800f62c:	69b3      	ldr	r3, [r6, #24]
 800f62e:	b913      	cbnz	r3, 800f636 <__sfp+0x16>
 800f630:	4630      	mov	r0, r6
 800f632:	f7ff ffbd 	bl	800f5b0 <__sinit>
 800f636:	3648      	adds	r6, #72	; 0x48
 800f638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f63c:	3b01      	subs	r3, #1
 800f63e:	d503      	bpl.n	800f648 <__sfp+0x28>
 800f640:	6833      	ldr	r3, [r6, #0]
 800f642:	b30b      	cbz	r3, 800f688 <__sfp+0x68>
 800f644:	6836      	ldr	r6, [r6, #0]
 800f646:	e7f7      	b.n	800f638 <__sfp+0x18>
 800f648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f64c:	b9d5      	cbnz	r5, 800f684 <__sfp+0x64>
 800f64e:	4b16      	ldr	r3, [pc, #88]	; (800f6a8 <__sfp+0x88>)
 800f650:	60e3      	str	r3, [r4, #12]
 800f652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f656:	6665      	str	r5, [r4, #100]	; 0x64
 800f658:	f000 fbb6 	bl	800fdc8 <__retarget_lock_init_recursive>
 800f65c:	f7ff ff96 	bl	800f58c <__sfp_lock_release>
 800f660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f668:	6025      	str	r5, [r4, #0]
 800f66a:	61a5      	str	r5, [r4, #24]
 800f66c:	2208      	movs	r2, #8
 800f66e:	4629      	mov	r1, r5
 800f670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f674:	f7fe fbb2 	bl	800dddc <memset>
 800f678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f67c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f680:	4620      	mov	r0, r4
 800f682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f684:	3468      	adds	r4, #104	; 0x68
 800f686:	e7d9      	b.n	800f63c <__sfp+0x1c>
 800f688:	2104      	movs	r1, #4
 800f68a:	4638      	mov	r0, r7
 800f68c:	f7ff ff62 	bl	800f554 <__sfmoreglue>
 800f690:	4604      	mov	r4, r0
 800f692:	6030      	str	r0, [r6, #0]
 800f694:	2800      	cmp	r0, #0
 800f696:	d1d5      	bne.n	800f644 <__sfp+0x24>
 800f698:	f7ff ff78 	bl	800f58c <__sfp_lock_release>
 800f69c:	230c      	movs	r3, #12
 800f69e:	603b      	str	r3, [r7, #0]
 800f6a0:	e7ee      	b.n	800f680 <__sfp+0x60>
 800f6a2:	bf00      	nop
 800f6a4:	08011724 	.word	0x08011724
 800f6a8:	ffff0001 	.word	0xffff0001

0800f6ac <_fwalk_reent>:
 800f6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b0:	4606      	mov	r6, r0
 800f6b2:	4688      	mov	r8, r1
 800f6b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6b8:	2700      	movs	r7, #0
 800f6ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f6be:	f1b9 0901 	subs.w	r9, r9, #1
 800f6c2:	d505      	bpl.n	800f6d0 <_fwalk_reent+0x24>
 800f6c4:	6824      	ldr	r4, [r4, #0]
 800f6c6:	2c00      	cmp	r4, #0
 800f6c8:	d1f7      	bne.n	800f6ba <_fwalk_reent+0xe>
 800f6ca:	4638      	mov	r0, r7
 800f6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6d0:	89ab      	ldrh	r3, [r5, #12]
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d907      	bls.n	800f6e6 <_fwalk_reent+0x3a>
 800f6d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	d003      	beq.n	800f6e6 <_fwalk_reent+0x3a>
 800f6de:	4629      	mov	r1, r5
 800f6e0:	4630      	mov	r0, r6
 800f6e2:	47c0      	blx	r8
 800f6e4:	4307      	orrs	r7, r0
 800f6e6:	3568      	adds	r5, #104	; 0x68
 800f6e8:	e7e9      	b.n	800f6be <_fwalk_reent+0x12>

0800f6ea <rshift>:
 800f6ea:	6903      	ldr	r3, [r0, #16]
 800f6ec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f6f4:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f6f8:	f100 0414 	add.w	r4, r0, #20
 800f6fc:	dd45      	ble.n	800f78a <rshift+0xa0>
 800f6fe:	f011 011f 	ands.w	r1, r1, #31
 800f702:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f706:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f70a:	d10c      	bne.n	800f726 <rshift+0x3c>
 800f70c:	f100 0710 	add.w	r7, r0, #16
 800f710:	4629      	mov	r1, r5
 800f712:	42b1      	cmp	r1, r6
 800f714:	d334      	bcc.n	800f780 <rshift+0x96>
 800f716:	1a9b      	subs	r3, r3, r2
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	1eea      	subs	r2, r5, #3
 800f71c:	4296      	cmp	r6, r2
 800f71e:	bf38      	it	cc
 800f720:	2300      	movcc	r3, #0
 800f722:	4423      	add	r3, r4
 800f724:	e015      	b.n	800f752 <rshift+0x68>
 800f726:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f72a:	f1c1 0820 	rsb	r8, r1, #32
 800f72e:	40cf      	lsrs	r7, r1
 800f730:	f105 0e04 	add.w	lr, r5, #4
 800f734:	46a1      	mov	r9, r4
 800f736:	4576      	cmp	r6, lr
 800f738:	46f4      	mov	ip, lr
 800f73a:	d815      	bhi.n	800f768 <rshift+0x7e>
 800f73c:	1a9a      	subs	r2, r3, r2
 800f73e:	0092      	lsls	r2, r2, #2
 800f740:	3a04      	subs	r2, #4
 800f742:	3501      	adds	r5, #1
 800f744:	42ae      	cmp	r6, r5
 800f746:	bf38      	it	cc
 800f748:	2200      	movcc	r2, #0
 800f74a:	18a3      	adds	r3, r4, r2
 800f74c:	50a7      	str	r7, [r4, r2]
 800f74e:	b107      	cbz	r7, 800f752 <rshift+0x68>
 800f750:	3304      	adds	r3, #4
 800f752:	1b1a      	subs	r2, r3, r4
 800f754:	42a3      	cmp	r3, r4
 800f756:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f75a:	bf08      	it	eq
 800f75c:	2300      	moveq	r3, #0
 800f75e:	6102      	str	r2, [r0, #16]
 800f760:	bf08      	it	eq
 800f762:	6143      	streq	r3, [r0, #20]
 800f764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f768:	f8dc c000 	ldr.w	ip, [ip]
 800f76c:	fa0c fc08 	lsl.w	ip, ip, r8
 800f770:	ea4c 0707 	orr.w	r7, ip, r7
 800f774:	f849 7b04 	str.w	r7, [r9], #4
 800f778:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f77c:	40cf      	lsrs	r7, r1
 800f77e:	e7da      	b.n	800f736 <rshift+0x4c>
 800f780:	f851 cb04 	ldr.w	ip, [r1], #4
 800f784:	f847 cf04 	str.w	ip, [r7, #4]!
 800f788:	e7c3      	b.n	800f712 <rshift+0x28>
 800f78a:	4623      	mov	r3, r4
 800f78c:	e7e1      	b.n	800f752 <rshift+0x68>

0800f78e <__hexdig_fun>:
 800f78e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f792:	2b09      	cmp	r3, #9
 800f794:	d802      	bhi.n	800f79c <__hexdig_fun+0xe>
 800f796:	3820      	subs	r0, #32
 800f798:	b2c0      	uxtb	r0, r0
 800f79a:	4770      	bx	lr
 800f79c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f7a0:	2b05      	cmp	r3, #5
 800f7a2:	d801      	bhi.n	800f7a8 <__hexdig_fun+0x1a>
 800f7a4:	3847      	subs	r0, #71	; 0x47
 800f7a6:	e7f7      	b.n	800f798 <__hexdig_fun+0xa>
 800f7a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f7ac:	2b05      	cmp	r3, #5
 800f7ae:	d801      	bhi.n	800f7b4 <__hexdig_fun+0x26>
 800f7b0:	3827      	subs	r0, #39	; 0x27
 800f7b2:	e7f1      	b.n	800f798 <__hexdig_fun+0xa>
 800f7b4:	2000      	movs	r0, #0
 800f7b6:	4770      	bx	lr

0800f7b8 <__gethex>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	ed2d 8b02 	vpush	{d8}
 800f7c0:	b089      	sub	sp, #36	; 0x24
 800f7c2:	ee08 0a10 	vmov	s16, r0
 800f7c6:	9304      	str	r3, [sp, #16]
 800f7c8:	4bb4      	ldr	r3, [pc, #720]	; (800fa9c <__gethex+0x2e4>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	9301      	str	r3, [sp, #4]
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	468b      	mov	fp, r1
 800f7d2:	4690      	mov	r8, r2
 800f7d4:	f7f0 fcfc 	bl	80001d0 <strlen>
 800f7d8:	9b01      	ldr	r3, [sp, #4]
 800f7da:	f8db 2000 	ldr.w	r2, [fp]
 800f7de:	4403      	add	r3, r0
 800f7e0:	4682      	mov	sl, r0
 800f7e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f7e6:	9305      	str	r3, [sp, #20]
 800f7e8:	1c93      	adds	r3, r2, #2
 800f7ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f7ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f7f2:	32fe      	adds	r2, #254	; 0xfe
 800f7f4:	18d1      	adds	r1, r2, r3
 800f7f6:	461f      	mov	r7, r3
 800f7f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f7fc:	9100      	str	r1, [sp, #0]
 800f7fe:	2830      	cmp	r0, #48	; 0x30
 800f800:	d0f8      	beq.n	800f7f4 <__gethex+0x3c>
 800f802:	f7ff ffc4 	bl	800f78e <__hexdig_fun>
 800f806:	4604      	mov	r4, r0
 800f808:	2800      	cmp	r0, #0
 800f80a:	d13a      	bne.n	800f882 <__gethex+0xca>
 800f80c:	9901      	ldr	r1, [sp, #4]
 800f80e:	4652      	mov	r2, sl
 800f810:	4638      	mov	r0, r7
 800f812:	f7fe fe0e 	bl	800e432 <strncmp>
 800f816:	4605      	mov	r5, r0
 800f818:	2800      	cmp	r0, #0
 800f81a:	d168      	bne.n	800f8ee <__gethex+0x136>
 800f81c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f820:	eb07 060a 	add.w	r6, r7, sl
 800f824:	f7ff ffb3 	bl	800f78e <__hexdig_fun>
 800f828:	2800      	cmp	r0, #0
 800f82a:	d062      	beq.n	800f8f2 <__gethex+0x13a>
 800f82c:	4633      	mov	r3, r6
 800f82e:	7818      	ldrb	r0, [r3, #0]
 800f830:	2830      	cmp	r0, #48	; 0x30
 800f832:	461f      	mov	r7, r3
 800f834:	f103 0301 	add.w	r3, r3, #1
 800f838:	d0f9      	beq.n	800f82e <__gethex+0x76>
 800f83a:	f7ff ffa8 	bl	800f78e <__hexdig_fun>
 800f83e:	2301      	movs	r3, #1
 800f840:	fab0 f480 	clz	r4, r0
 800f844:	0964      	lsrs	r4, r4, #5
 800f846:	4635      	mov	r5, r6
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	463a      	mov	r2, r7
 800f84c:	4616      	mov	r6, r2
 800f84e:	3201      	adds	r2, #1
 800f850:	7830      	ldrb	r0, [r6, #0]
 800f852:	f7ff ff9c 	bl	800f78e <__hexdig_fun>
 800f856:	2800      	cmp	r0, #0
 800f858:	d1f8      	bne.n	800f84c <__gethex+0x94>
 800f85a:	9901      	ldr	r1, [sp, #4]
 800f85c:	4652      	mov	r2, sl
 800f85e:	4630      	mov	r0, r6
 800f860:	f7fe fde7 	bl	800e432 <strncmp>
 800f864:	b980      	cbnz	r0, 800f888 <__gethex+0xd0>
 800f866:	b94d      	cbnz	r5, 800f87c <__gethex+0xc4>
 800f868:	eb06 050a 	add.w	r5, r6, sl
 800f86c:	462a      	mov	r2, r5
 800f86e:	4616      	mov	r6, r2
 800f870:	3201      	adds	r2, #1
 800f872:	7830      	ldrb	r0, [r6, #0]
 800f874:	f7ff ff8b 	bl	800f78e <__hexdig_fun>
 800f878:	2800      	cmp	r0, #0
 800f87a:	d1f8      	bne.n	800f86e <__gethex+0xb6>
 800f87c:	1bad      	subs	r5, r5, r6
 800f87e:	00ad      	lsls	r5, r5, #2
 800f880:	e004      	b.n	800f88c <__gethex+0xd4>
 800f882:	2400      	movs	r4, #0
 800f884:	4625      	mov	r5, r4
 800f886:	e7e0      	b.n	800f84a <__gethex+0x92>
 800f888:	2d00      	cmp	r5, #0
 800f88a:	d1f7      	bne.n	800f87c <__gethex+0xc4>
 800f88c:	7833      	ldrb	r3, [r6, #0]
 800f88e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f892:	2b50      	cmp	r3, #80	; 0x50
 800f894:	d13b      	bne.n	800f90e <__gethex+0x156>
 800f896:	7873      	ldrb	r3, [r6, #1]
 800f898:	2b2b      	cmp	r3, #43	; 0x2b
 800f89a:	d02c      	beq.n	800f8f6 <__gethex+0x13e>
 800f89c:	2b2d      	cmp	r3, #45	; 0x2d
 800f89e:	d02e      	beq.n	800f8fe <__gethex+0x146>
 800f8a0:	1c71      	adds	r1, r6, #1
 800f8a2:	f04f 0900 	mov.w	r9, #0
 800f8a6:	7808      	ldrb	r0, [r1, #0]
 800f8a8:	f7ff ff71 	bl	800f78e <__hexdig_fun>
 800f8ac:	1e43      	subs	r3, r0, #1
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b18      	cmp	r3, #24
 800f8b2:	d82c      	bhi.n	800f90e <__gethex+0x156>
 800f8b4:	f1a0 0210 	sub.w	r2, r0, #16
 800f8b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f8bc:	f7ff ff67 	bl	800f78e <__hexdig_fun>
 800f8c0:	1e43      	subs	r3, r0, #1
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	2b18      	cmp	r3, #24
 800f8c6:	d91d      	bls.n	800f904 <__gethex+0x14c>
 800f8c8:	f1b9 0f00 	cmp.w	r9, #0
 800f8cc:	d000      	beq.n	800f8d0 <__gethex+0x118>
 800f8ce:	4252      	negs	r2, r2
 800f8d0:	4415      	add	r5, r2
 800f8d2:	f8cb 1000 	str.w	r1, [fp]
 800f8d6:	b1e4      	cbz	r4, 800f912 <__gethex+0x15a>
 800f8d8:	9b00      	ldr	r3, [sp, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	bf14      	ite	ne
 800f8de:	2700      	movne	r7, #0
 800f8e0:	2706      	moveq	r7, #6
 800f8e2:	4638      	mov	r0, r7
 800f8e4:	b009      	add	sp, #36	; 0x24
 800f8e6:	ecbd 8b02 	vpop	{d8}
 800f8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8ee:	463e      	mov	r6, r7
 800f8f0:	4625      	mov	r5, r4
 800f8f2:	2401      	movs	r4, #1
 800f8f4:	e7ca      	b.n	800f88c <__gethex+0xd4>
 800f8f6:	f04f 0900 	mov.w	r9, #0
 800f8fa:	1cb1      	adds	r1, r6, #2
 800f8fc:	e7d3      	b.n	800f8a6 <__gethex+0xee>
 800f8fe:	f04f 0901 	mov.w	r9, #1
 800f902:	e7fa      	b.n	800f8fa <__gethex+0x142>
 800f904:	230a      	movs	r3, #10
 800f906:	fb03 0202 	mla	r2, r3, r2, r0
 800f90a:	3a10      	subs	r2, #16
 800f90c:	e7d4      	b.n	800f8b8 <__gethex+0x100>
 800f90e:	4631      	mov	r1, r6
 800f910:	e7df      	b.n	800f8d2 <__gethex+0x11a>
 800f912:	1bf3      	subs	r3, r6, r7
 800f914:	3b01      	subs	r3, #1
 800f916:	4621      	mov	r1, r4
 800f918:	2b07      	cmp	r3, #7
 800f91a:	dc0b      	bgt.n	800f934 <__gethex+0x17c>
 800f91c:	ee18 0a10 	vmov	r0, s16
 800f920:	f000 fae0 	bl	800fee4 <_Balloc>
 800f924:	4604      	mov	r4, r0
 800f926:	b940      	cbnz	r0, 800f93a <__gethex+0x182>
 800f928:	4b5d      	ldr	r3, [pc, #372]	; (800faa0 <__gethex+0x2e8>)
 800f92a:	4602      	mov	r2, r0
 800f92c:	21de      	movs	r1, #222	; 0xde
 800f92e:	485d      	ldr	r0, [pc, #372]	; (800faa4 <__gethex+0x2ec>)
 800f930:	f001 fbb8 	bl	80110a4 <__assert_func>
 800f934:	3101      	adds	r1, #1
 800f936:	105b      	asrs	r3, r3, #1
 800f938:	e7ee      	b.n	800f918 <__gethex+0x160>
 800f93a:	f100 0914 	add.w	r9, r0, #20
 800f93e:	f04f 0b00 	mov.w	fp, #0
 800f942:	f1ca 0301 	rsb	r3, sl, #1
 800f946:	f8cd 9008 	str.w	r9, [sp, #8]
 800f94a:	f8cd b000 	str.w	fp, [sp]
 800f94e:	9306      	str	r3, [sp, #24]
 800f950:	42b7      	cmp	r7, r6
 800f952:	d340      	bcc.n	800f9d6 <__gethex+0x21e>
 800f954:	9802      	ldr	r0, [sp, #8]
 800f956:	9b00      	ldr	r3, [sp, #0]
 800f958:	f840 3b04 	str.w	r3, [r0], #4
 800f95c:	eba0 0009 	sub.w	r0, r0, r9
 800f960:	1080      	asrs	r0, r0, #2
 800f962:	0146      	lsls	r6, r0, #5
 800f964:	6120      	str	r0, [r4, #16]
 800f966:	4618      	mov	r0, r3
 800f968:	f000 fbae 	bl	80100c8 <__hi0bits>
 800f96c:	1a30      	subs	r0, r6, r0
 800f96e:	f8d8 6000 	ldr.w	r6, [r8]
 800f972:	42b0      	cmp	r0, r6
 800f974:	dd63      	ble.n	800fa3e <__gethex+0x286>
 800f976:	1b87      	subs	r7, r0, r6
 800f978:	4639      	mov	r1, r7
 800f97a:	4620      	mov	r0, r4
 800f97c:	f000 ff52 	bl	8010824 <__any_on>
 800f980:	4682      	mov	sl, r0
 800f982:	b1a8      	cbz	r0, 800f9b0 <__gethex+0x1f8>
 800f984:	1e7b      	subs	r3, r7, #1
 800f986:	1159      	asrs	r1, r3, #5
 800f988:	f003 021f 	and.w	r2, r3, #31
 800f98c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f990:	f04f 0a01 	mov.w	sl, #1
 800f994:	fa0a f202 	lsl.w	r2, sl, r2
 800f998:	420a      	tst	r2, r1
 800f99a:	d009      	beq.n	800f9b0 <__gethex+0x1f8>
 800f99c:	4553      	cmp	r3, sl
 800f99e:	dd05      	ble.n	800f9ac <__gethex+0x1f4>
 800f9a0:	1eb9      	subs	r1, r7, #2
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	f000 ff3e 	bl	8010824 <__any_on>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	d145      	bne.n	800fa38 <__gethex+0x280>
 800f9ac:	f04f 0a02 	mov.w	sl, #2
 800f9b0:	4639      	mov	r1, r7
 800f9b2:	4620      	mov	r0, r4
 800f9b4:	f7ff fe99 	bl	800f6ea <rshift>
 800f9b8:	443d      	add	r5, r7
 800f9ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f9be:	42ab      	cmp	r3, r5
 800f9c0:	da4c      	bge.n	800fa5c <__gethex+0x2a4>
 800f9c2:	ee18 0a10 	vmov	r0, s16
 800f9c6:	4621      	mov	r1, r4
 800f9c8:	f000 facc 	bl	800ff64 <_Bfree>
 800f9cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	6013      	str	r3, [r2, #0]
 800f9d2:	27a3      	movs	r7, #163	; 0xa3
 800f9d4:	e785      	b.n	800f8e2 <__gethex+0x12a>
 800f9d6:	1e73      	subs	r3, r6, #1
 800f9d8:	9a05      	ldr	r2, [sp, #20]
 800f9da:	9303      	str	r3, [sp, #12]
 800f9dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d019      	beq.n	800fa18 <__gethex+0x260>
 800f9e4:	f1bb 0f20 	cmp.w	fp, #32
 800f9e8:	d107      	bne.n	800f9fa <__gethex+0x242>
 800f9ea:	9b02      	ldr	r3, [sp, #8]
 800f9ec:	9a00      	ldr	r2, [sp, #0]
 800f9ee:	f843 2b04 	str.w	r2, [r3], #4
 800f9f2:	9302      	str	r3, [sp, #8]
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	9300      	str	r3, [sp, #0]
 800f9f8:	469b      	mov	fp, r3
 800f9fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f9fe:	f7ff fec6 	bl	800f78e <__hexdig_fun>
 800fa02:	9b00      	ldr	r3, [sp, #0]
 800fa04:	f000 000f 	and.w	r0, r0, #15
 800fa08:	fa00 f00b 	lsl.w	r0, r0, fp
 800fa0c:	4303      	orrs	r3, r0
 800fa0e:	9300      	str	r3, [sp, #0]
 800fa10:	f10b 0b04 	add.w	fp, fp, #4
 800fa14:	9b03      	ldr	r3, [sp, #12]
 800fa16:	e00d      	b.n	800fa34 <__gethex+0x27c>
 800fa18:	9b03      	ldr	r3, [sp, #12]
 800fa1a:	9a06      	ldr	r2, [sp, #24]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	42bb      	cmp	r3, r7
 800fa20:	d3e0      	bcc.n	800f9e4 <__gethex+0x22c>
 800fa22:	4618      	mov	r0, r3
 800fa24:	9901      	ldr	r1, [sp, #4]
 800fa26:	9307      	str	r3, [sp, #28]
 800fa28:	4652      	mov	r2, sl
 800fa2a:	f7fe fd02 	bl	800e432 <strncmp>
 800fa2e:	9b07      	ldr	r3, [sp, #28]
 800fa30:	2800      	cmp	r0, #0
 800fa32:	d1d7      	bne.n	800f9e4 <__gethex+0x22c>
 800fa34:	461e      	mov	r6, r3
 800fa36:	e78b      	b.n	800f950 <__gethex+0x198>
 800fa38:	f04f 0a03 	mov.w	sl, #3
 800fa3c:	e7b8      	b.n	800f9b0 <__gethex+0x1f8>
 800fa3e:	da0a      	bge.n	800fa56 <__gethex+0x29e>
 800fa40:	1a37      	subs	r7, r6, r0
 800fa42:	4621      	mov	r1, r4
 800fa44:	ee18 0a10 	vmov	r0, s16
 800fa48:	463a      	mov	r2, r7
 800fa4a:	f000 fca7 	bl	801039c <__lshift>
 800fa4e:	1bed      	subs	r5, r5, r7
 800fa50:	4604      	mov	r4, r0
 800fa52:	f100 0914 	add.w	r9, r0, #20
 800fa56:	f04f 0a00 	mov.w	sl, #0
 800fa5a:	e7ae      	b.n	800f9ba <__gethex+0x202>
 800fa5c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fa60:	42a8      	cmp	r0, r5
 800fa62:	dd72      	ble.n	800fb4a <__gethex+0x392>
 800fa64:	1b45      	subs	r5, r0, r5
 800fa66:	42ae      	cmp	r6, r5
 800fa68:	dc36      	bgt.n	800fad8 <__gethex+0x320>
 800fa6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fa6e:	2b02      	cmp	r3, #2
 800fa70:	d02a      	beq.n	800fac8 <__gethex+0x310>
 800fa72:	2b03      	cmp	r3, #3
 800fa74:	d02c      	beq.n	800fad0 <__gethex+0x318>
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d11c      	bne.n	800fab4 <__gethex+0x2fc>
 800fa7a:	42ae      	cmp	r6, r5
 800fa7c:	d11a      	bne.n	800fab4 <__gethex+0x2fc>
 800fa7e:	2e01      	cmp	r6, #1
 800fa80:	d112      	bne.n	800faa8 <__gethex+0x2f0>
 800fa82:	9a04      	ldr	r2, [sp, #16]
 800fa84:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fa88:	6013      	str	r3, [r2, #0]
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	6123      	str	r3, [r4, #16]
 800fa8e:	f8c9 3000 	str.w	r3, [r9]
 800fa92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa94:	2762      	movs	r7, #98	; 0x62
 800fa96:	601c      	str	r4, [r3, #0]
 800fa98:	e723      	b.n	800f8e2 <__gethex+0x12a>
 800fa9a:	bf00      	nop
 800fa9c:	0801196c 	.word	0x0801196c
 800faa0:	080118f4 	.word	0x080118f4
 800faa4:	08011905 	.word	0x08011905
 800faa8:	1e71      	subs	r1, r6, #1
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 feba 	bl	8010824 <__any_on>
 800fab0:	2800      	cmp	r0, #0
 800fab2:	d1e6      	bne.n	800fa82 <__gethex+0x2ca>
 800fab4:	ee18 0a10 	vmov	r0, s16
 800fab8:	4621      	mov	r1, r4
 800faba:	f000 fa53 	bl	800ff64 <_Bfree>
 800fabe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fac0:	2300      	movs	r3, #0
 800fac2:	6013      	str	r3, [r2, #0]
 800fac4:	2750      	movs	r7, #80	; 0x50
 800fac6:	e70c      	b.n	800f8e2 <__gethex+0x12a>
 800fac8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800faca:	2b00      	cmp	r3, #0
 800facc:	d1f2      	bne.n	800fab4 <__gethex+0x2fc>
 800face:	e7d8      	b.n	800fa82 <__gethex+0x2ca>
 800fad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1d5      	bne.n	800fa82 <__gethex+0x2ca>
 800fad6:	e7ed      	b.n	800fab4 <__gethex+0x2fc>
 800fad8:	1e6f      	subs	r7, r5, #1
 800fada:	f1ba 0f00 	cmp.w	sl, #0
 800fade:	d131      	bne.n	800fb44 <__gethex+0x38c>
 800fae0:	b127      	cbz	r7, 800faec <__gethex+0x334>
 800fae2:	4639      	mov	r1, r7
 800fae4:	4620      	mov	r0, r4
 800fae6:	f000 fe9d 	bl	8010824 <__any_on>
 800faea:	4682      	mov	sl, r0
 800faec:	117b      	asrs	r3, r7, #5
 800faee:	2101      	movs	r1, #1
 800faf0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800faf4:	f007 071f 	and.w	r7, r7, #31
 800faf8:	fa01 f707 	lsl.w	r7, r1, r7
 800fafc:	421f      	tst	r7, r3
 800fafe:	4629      	mov	r1, r5
 800fb00:	4620      	mov	r0, r4
 800fb02:	bf18      	it	ne
 800fb04:	f04a 0a02 	orrne.w	sl, sl, #2
 800fb08:	1b76      	subs	r6, r6, r5
 800fb0a:	f7ff fdee 	bl	800f6ea <rshift>
 800fb0e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fb12:	2702      	movs	r7, #2
 800fb14:	f1ba 0f00 	cmp.w	sl, #0
 800fb18:	d048      	beq.n	800fbac <__gethex+0x3f4>
 800fb1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d015      	beq.n	800fb4e <__gethex+0x396>
 800fb22:	2b03      	cmp	r3, #3
 800fb24:	d017      	beq.n	800fb56 <__gethex+0x39e>
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d109      	bne.n	800fb3e <__gethex+0x386>
 800fb2a:	f01a 0f02 	tst.w	sl, #2
 800fb2e:	d006      	beq.n	800fb3e <__gethex+0x386>
 800fb30:	f8d9 0000 	ldr.w	r0, [r9]
 800fb34:	ea4a 0a00 	orr.w	sl, sl, r0
 800fb38:	f01a 0f01 	tst.w	sl, #1
 800fb3c:	d10e      	bne.n	800fb5c <__gethex+0x3a4>
 800fb3e:	f047 0710 	orr.w	r7, r7, #16
 800fb42:	e033      	b.n	800fbac <__gethex+0x3f4>
 800fb44:	f04f 0a01 	mov.w	sl, #1
 800fb48:	e7d0      	b.n	800faec <__gethex+0x334>
 800fb4a:	2701      	movs	r7, #1
 800fb4c:	e7e2      	b.n	800fb14 <__gethex+0x35c>
 800fb4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb50:	f1c3 0301 	rsb	r3, r3, #1
 800fb54:	9315      	str	r3, [sp, #84]	; 0x54
 800fb56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d0f0      	beq.n	800fb3e <__gethex+0x386>
 800fb5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fb60:	f104 0314 	add.w	r3, r4, #20
 800fb64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fb68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fb6c:	f04f 0c00 	mov.w	ip, #0
 800fb70:	4618      	mov	r0, r3
 800fb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb76:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fb7a:	d01c      	beq.n	800fbb6 <__gethex+0x3fe>
 800fb7c:	3201      	adds	r2, #1
 800fb7e:	6002      	str	r2, [r0, #0]
 800fb80:	2f02      	cmp	r7, #2
 800fb82:	f104 0314 	add.w	r3, r4, #20
 800fb86:	d13f      	bne.n	800fc08 <__gethex+0x450>
 800fb88:	f8d8 2000 	ldr.w	r2, [r8]
 800fb8c:	3a01      	subs	r2, #1
 800fb8e:	42b2      	cmp	r2, r6
 800fb90:	d10a      	bne.n	800fba8 <__gethex+0x3f0>
 800fb92:	1171      	asrs	r1, r6, #5
 800fb94:	2201      	movs	r2, #1
 800fb96:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb9a:	f006 061f 	and.w	r6, r6, #31
 800fb9e:	fa02 f606 	lsl.w	r6, r2, r6
 800fba2:	421e      	tst	r6, r3
 800fba4:	bf18      	it	ne
 800fba6:	4617      	movne	r7, r2
 800fba8:	f047 0720 	orr.w	r7, r7, #32
 800fbac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbae:	601c      	str	r4, [r3, #0]
 800fbb0:	9b04      	ldr	r3, [sp, #16]
 800fbb2:	601d      	str	r5, [r3, #0]
 800fbb4:	e695      	b.n	800f8e2 <__gethex+0x12a>
 800fbb6:	4299      	cmp	r1, r3
 800fbb8:	f843 cc04 	str.w	ip, [r3, #-4]
 800fbbc:	d8d8      	bhi.n	800fb70 <__gethex+0x3b8>
 800fbbe:	68a3      	ldr	r3, [r4, #8]
 800fbc0:	459b      	cmp	fp, r3
 800fbc2:	db19      	blt.n	800fbf8 <__gethex+0x440>
 800fbc4:	6861      	ldr	r1, [r4, #4]
 800fbc6:	ee18 0a10 	vmov	r0, s16
 800fbca:	3101      	adds	r1, #1
 800fbcc:	f000 f98a 	bl	800fee4 <_Balloc>
 800fbd0:	4681      	mov	r9, r0
 800fbd2:	b918      	cbnz	r0, 800fbdc <__gethex+0x424>
 800fbd4:	4b1a      	ldr	r3, [pc, #104]	; (800fc40 <__gethex+0x488>)
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	2184      	movs	r1, #132	; 0x84
 800fbda:	e6a8      	b.n	800f92e <__gethex+0x176>
 800fbdc:	6922      	ldr	r2, [r4, #16]
 800fbde:	3202      	adds	r2, #2
 800fbe0:	f104 010c 	add.w	r1, r4, #12
 800fbe4:	0092      	lsls	r2, r2, #2
 800fbe6:	300c      	adds	r0, #12
 800fbe8:	f7fe f8ea 	bl	800ddc0 <memcpy>
 800fbec:	4621      	mov	r1, r4
 800fbee:	ee18 0a10 	vmov	r0, s16
 800fbf2:	f000 f9b7 	bl	800ff64 <_Bfree>
 800fbf6:	464c      	mov	r4, r9
 800fbf8:	6923      	ldr	r3, [r4, #16]
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc00:	6122      	str	r2, [r4, #16]
 800fc02:	2201      	movs	r2, #1
 800fc04:	615a      	str	r2, [r3, #20]
 800fc06:	e7bb      	b.n	800fb80 <__gethex+0x3c8>
 800fc08:	6922      	ldr	r2, [r4, #16]
 800fc0a:	455a      	cmp	r2, fp
 800fc0c:	dd0b      	ble.n	800fc26 <__gethex+0x46e>
 800fc0e:	2101      	movs	r1, #1
 800fc10:	4620      	mov	r0, r4
 800fc12:	f7ff fd6a 	bl	800f6ea <rshift>
 800fc16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc1a:	3501      	adds	r5, #1
 800fc1c:	42ab      	cmp	r3, r5
 800fc1e:	f6ff aed0 	blt.w	800f9c2 <__gethex+0x20a>
 800fc22:	2701      	movs	r7, #1
 800fc24:	e7c0      	b.n	800fba8 <__gethex+0x3f0>
 800fc26:	f016 061f 	ands.w	r6, r6, #31
 800fc2a:	d0fa      	beq.n	800fc22 <__gethex+0x46a>
 800fc2c:	4453      	add	r3, sl
 800fc2e:	f1c6 0620 	rsb	r6, r6, #32
 800fc32:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fc36:	f000 fa47 	bl	80100c8 <__hi0bits>
 800fc3a:	42b0      	cmp	r0, r6
 800fc3c:	dbe7      	blt.n	800fc0e <__gethex+0x456>
 800fc3e:	e7f0      	b.n	800fc22 <__gethex+0x46a>
 800fc40:	080118f4 	.word	0x080118f4

0800fc44 <L_shift>:
 800fc44:	f1c2 0208 	rsb	r2, r2, #8
 800fc48:	0092      	lsls	r2, r2, #2
 800fc4a:	b570      	push	{r4, r5, r6, lr}
 800fc4c:	f1c2 0620 	rsb	r6, r2, #32
 800fc50:	6843      	ldr	r3, [r0, #4]
 800fc52:	6804      	ldr	r4, [r0, #0]
 800fc54:	fa03 f506 	lsl.w	r5, r3, r6
 800fc58:	432c      	orrs	r4, r5
 800fc5a:	40d3      	lsrs	r3, r2
 800fc5c:	6004      	str	r4, [r0, #0]
 800fc5e:	f840 3f04 	str.w	r3, [r0, #4]!
 800fc62:	4288      	cmp	r0, r1
 800fc64:	d3f4      	bcc.n	800fc50 <L_shift+0xc>
 800fc66:	bd70      	pop	{r4, r5, r6, pc}

0800fc68 <__match>:
 800fc68:	b530      	push	{r4, r5, lr}
 800fc6a:	6803      	ldr	r3, [r0, #0]
 800fc6c:	3301      	adds	r3, #1
 800fc6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc72:	b914      	cbnz	r4, 800fc7a <__match+0x12>
 800fc74:	6003      	str	r3, [r0, #0]
 800fc76:	2001      	movs	r0, #1
 800fc78:	bd30      	pop	{r4, r5, pc}
 800fc7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fc82:	2d19      	cmp	r5, #25
 800fc84:	bf98      	it	ls
 800fc86:	3220      	addls	r2, #32
 800fc88:	42a2      	cmp	r2, r4
 800fc8a:	d0f0      	beq.n	800fc6e <__match+0x6>
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	e7f3      	b.n	800fc78 <__match+0x10>

0800fc90 <__hexnan>:
 800fc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc94:	680b      	ldr	r3, [r1, #0]
 800fc96:	115e      	asrs	r6, r3, #5
 800fc98:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fc9c:	f013 031f 	ands.w	r3, r3, #31
 800fca0:	b087      	sub	sp, #28
 800fca2:	bf18      	it	ne
 800fca4:	3604      	addne	r6, #4
 800fca6:	2500      	movs	r5, #0
 800fca8:	1f37      	subs	r7, r6, #4
 800fcaa:	4690      	mov	r8, r2
 800fcac:	6802      	ldr	r2, [r0, #0]
 800fcae:	9301      	str	r3, [sp, #4]
 800fcb0:	4682      	mov	sl, r0
 800fcb2:	f846 5c04 	str.w	r5, [r6, #-4]
 800fcb6:	46b9      	mov	r9, r7
 800fcb8:	463c      	mov	r4, r7
 800fcba:	9502      	str	r5, [sp, #8]
 800fcbc:	46ab      	mov	fp, r5
 800fcbe:	7851      	ldrb	r1, [r2, #1]
 800fcc0:	1c53      	adds	r3, r2, #1
 800fcc2:	9303      	str	r3, [sp, #12]
 800fcc4:	b341      	cbz	r1, 800fd18 <__hexnan+0x88>
 800fcc6:	4608      	mov	r0, r1
 800fcc8:	9205      	str	r2, [sp, #20]
 800fcca:	9104      	str	r1, [sp, #16]
 800fccc:	f7ff fd5f 	bl	800f78e <__hexdig_fun>
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	d14f      	bne.n	800fd74 <__hexnan+0xe4>
 800fcd4:	9904      	ldr	r1, [sp, #16]
 800fcd6:	9a05      	ldr	r2, [sp, #20]
 800fcd8:	2920      	cmp	r1, #32
 800fcda:	d818      	bhi.n	800fd0e <__hexnan+0x7e>
 800fcdc:	9b02      	ldr	r3, [sp, #8]
 800fcde:	459b      	cmp	fp, r3
 800fce0:	dd13      	ble.n	800fd0a <__hexnan+0x7a>
 800fce2:	454c      	cmp	r4, r9
 800fce4:	d206      	bcs.n	800fcf4 <__hexnan+0x64>
 800fce6:	2d07      	cmp	r5, #7
 800fce8:	dc04      	bgt.n	800fcf4 <__hexnan+0x64>
 800fcea:	462a      	mov	r2, r5
 800fcec:	4649      	mov	r1, r9
 800fcee:	4620      	mov	r0, r4
 800fcf0:	f7ff ffa8 	bl	800fc44 <L_shift>
 800fcf4:	4544      	cmp	r4, r8
 800fcf6:	d950      	bls.n	800fd9a <__hexnan+0x10a>
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f1a4 0904 	sub.w	r9, r4, #4
 800fcfe:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd02:	f8cd b008 	str.w	fp, [sp, #8]
 800fd06:	464c      	mov	r4, r9
 800fd08:	461d      	mov	r5, r3
 800fd0a:	9a03      	ldr	r2, [sp, #12]
 800fd0c:	e7d7      	b.n	800fcbe <__hexnan+0x2e>
 800fd0e:	2929      	cmp	r1, #41	; 0x29
 800fd10:	d156      	bne.n	800fdc0 <__hexnan+0x130>
 800fd12:	3202      	adds	r2, #2
 800fd14:	f8ca 2000 	str.w	r2, [sl]
 800fd18:	f1bb 0f00 	cmp.w	fp, #0
 800fd1c:	d050      	beq.n	800fdc0 <__hexnan+0x130>
 800fd1e:	454c      	cmp	r4, r9
 800fd20:	d206      	bcs.n	800fd30 <__hexnan+0xa0>
 800fd22:	2d07      	cmp	r5, #7
 800fd24:	dc04      	bgt.n	800fd30 <__hexnan+0xa0>
 800fd26:	462a      	mov	r2, r5
 800fd28:	4649      	mov	r1, r9
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f7ff ff8a 	bl	800fc44 <L_shift>
 800fd30:	4544      	cmp	r4, r8
 800fd32:	d934      	bls.n	800fd9e <__hexnan+0x10e>
 800fd34:	f1a8 0204 	sub.w	r2, r8, #4
 800fd38:	4623      	mov	r3, r4
 800fd3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800fd3e:	f842 1f04 	str.w	r1, [r2, #4]!
 800fd42:	429f      	cmp	r7, r3
 800fd44:	d2f9      	bcs.n	800fd3a <__hexnan+0xaa>
 800fd46:	1b3b      	subs	r3, r7, r4
 800fd48:	f023 0303 	bic.w	r3, r3, #3
 800fd4c:	3304      	adds	r3, #4
 800fd4e:	3401      	adds	r4, #1
 800fd50:	3e03      	subs	r6, #3
 800fd52:	42b4      	cmp	r4, r6
 800fd54:	bf88      	it	hi
 800fd56:	2304      	movhi	r3, #4
 800fd58:	4443      	add	r3, r8
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	f843 2b04 	str.w	r2, [r3], #4
 800fd60:	429f      	cmp	r7, r3
 800fd62:	d2fb      	bcs.n	800fd5c <__hexnan+0xcc>
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	b91b      	cbnz	r3, 800fd70 <__hexnan+0xe0>
 800fd68:	4547      	cmp	r7, r8
 800fd6a:	d127      	bne.n	800fdbc <__hexnan+0x12c>
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	603b      	str	r3, [r7, #0]
 800fd70:	2005      	movs	r0, #5
 800fd72:	e026      	b.n	800fdc2 <__hexnan+0x132>
 800fd74:	3501      	adds	r5, #1
 800fd76:	2d08      	cmp	r5, #8
 800fd78:	f10b 0b01 	add.w	fp, fp, #1
 800fd7c:	dd06      	ble.n	800fd8c <__hexnan+0xfc>
 800fd7e:	4544      	cmp	r4, r8
 800fd80:	d9c3      	bls.n	800fd0a <__hexnan+0x7a>
 800fd82:	2300      	movs	r3, #0
 800fd84:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd88:	2501      	movs	r5, #1
 800fd8a:	3c04      	subs	r4, #4
 800fd8c:	6822      	ldr	r2, [r4, #0]
 800fd8e:	f000 000f 	and.w	r0, r0, #15
 800fd92:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fd96:	6022      	str	r2, [r4, #0]
 800fd98:	e7b7      	b.n	800fd0a <__hexnan+0x7a>
 800fd9a:	2508      	movs	r5, #8
 800fd9c:	e7b5      	b.n	800fd0a <__hexnan+0x7a>
 800fd9e:	9b01      	ldr	r3, [sp, #4]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d0df      	beq.n	800fd64 <__hexnan+0xd4>
 800fda4:	f04f 32ff 	mov.w	r2, #4294967295
 800fda8:	f1c3 0320 	rsb	r3, r3, #32
 800fdac:	fa22 f303 	lsr.w	r3, r2, r3
 800fdb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fdb4:	401a      	ands	r2, r3
 800fdb6:	f846 2c04 	str.w	r2, [r6, #-4]
 800fdba:	e7d3      	b.n	800fd64 <__hexnan+0xd4>
 800fdbc:	3f04      	subs	r7, #4
 800fdbe:	e7d1      	b.n	800fd64 <__hexnan+0xd4>
 800fdc0:	2004      	movs	r0, #4
 800fdc2:	b007      	add	sp, #28
 800fdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdc8 <__retarget_lock_init_recursive>:
 800fdc8:	4770      	bx	lr

0800fdca <__retarget_lock_acquire_recursive>:
 800fdca:	4770      	bx	lr

0800fdcc <__retarget_lock_release_recursive>:
 800fdcc:	4770      	bx	lr
	...

0800fdd0 <_lseek_r>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	4d07      	ldr	r5, [pc, #28]	; (800fdf0 <_lseek_r+0x20>)
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	4608      	mov	r0, r1
 800fdd8:	4611      	mov	r1, r2
 800fdda:	2200      	movs	r2, #0
 800fddc:	602a      	str	r2, [r5, #0]
 800fdde:	461a      	mov	r2, r3
 800fde0:	f7f3 fa18 	bl	8003214 <_lseek>
 800fde4:	1c43      	adds	r3, r0, #1
 800fde6:	d102      	bne.n	800fdee <_lseek_r+0x1e>
 800fde8:	682b      	ldr	r3, [r5, #0]
 800fdea:	b103      	cbz	r3, 800fdee <_lseek_r+0x1e>
 800fdec:	6023      	str	r3, [r4, #0]
 800fdee:	bd38      	pop	{r3, r4, r5, pc}
 800fdf0:	20002708 	.word	0x20002708

0800fdf4 <__swhatbuf_r>:
 800fdf4:	b570      	push	{r4, r5, r6, lr}
 800fdf6:	460e      	mov	r6, r1
 800fdf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdfc:	2900      	cmp	r1, #0
 800fdfe:	b096      	sub	sp, #88	; 0x58
 800fe00:	4614      	mov	r4, r2
 800fe02:	461d      	mov	r5, r3
 800fe04:	da08      	bge.n	800fe18 <__swhatbuf_r+0x24>
 800fe06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	602a      	str	r2, [r5, #0]
 800fe0e:	061a      	lsls	r2, r3, #24
 800fe10:	d410      	bmi.n	800fe34 <__swhatbuf_r+0x40>
 800fe12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe16:	e00e      	b.n	800fe36 <__swhatbuf_r+0x42>
 800fe18:	466a      	mov	r2, sp
 800fe1a:	f001 f973 	bl	8011104 <_fstat_r>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	dbf1      	blt.n	800fe06 <__swhatbuf_r+0x12>
 800fe22:	9a01      	ldr	r2, [sp, #4]
 800fe24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe2c:	425a      	negs	r2, r3
 800fe2e:	415a      	adcs	r2, r3
 800fe30:	602a      	str	r2, [r5, #0]
 800fe32:	e7ee      	b.n	800fe12 <__swhatbuf_r+0x1e>
 800fe34:	2340      	movs	r3, #64	; 0x40
 800fe36:	2000      	movs	r0, #0
 800fe38:	6023      	str	r3, [r4, #0]
 800fe3a:	b016      	add	sp, #88	; 0x58
 800fe3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fe40 <__smakebuf_r>:
 800fe40:	898b      	ldrh	r3, [r1, #12]
 800fe42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe44:	079d      	lsls	r5, r3, #30
 800fe46:	4606      	mov	r6, r0
 800fe48:	460c      	mov	r4, r1
 800fe4a:	d507      	bpl.n	800fe5c <__smakebuf_r+0x1c>
 800fe4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	6123      	str	r3, [r4, #16]
 800fe54:	2301      	movs	r3, #1
 800fe56:	6163      	str	r3, [r4, #20]
 800fe58:	b002      	add	sp, #8
 800fe5a:	bd70      	pop	{r4, r5, r6, pc}
 800fe5c:	ab01      	add	r3, sp, #4
 800fe5e:	466a      	mov	r2, sp
 800fe60:	f7ff ffc8 	bl	800fdf4 <__swhatbuf_r>
 800fe64:	9900      	ldr	r1, [sp, #0]
 800fe66:	4605      	mov	r5, r0
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f000 fd7f 	bl	801096c <_malloc_r>
 800fe6e:	b948      	cbnz	r0, 800fe84 <__smakebuf_r+0x44>
 800fe70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe74:	059a      	lsls	r2, r3, #22
 800fe76:	d4ef      	bmi.n	800fe58 <__smakebuf_r+0x18>
 800fe78:	f023 0303 	bic.w	r3, r3, #3
 800fe7c:	f043 0302 	orr.w	r3, r3, #2
 800fe80:	81a3      	strh	r3, [r4, #12]
 800fe82:	e7e3      	b.n	800fe4c <__smakebuf_r+0xc>
 800fe84:	4b0d      	ldr	r3, [pc, #52]	; (800febc <__smakebuf_r+0x7c>)
 800fe86:	62b3      	str	r3, [r6, #40]	; 0x28
 800fe88:	89a3      	ldrh	r3, [r4, #12]
 800fe8a:	6020      	str	r0, [r4, #0]
 800fe8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe90:	81a3      	strh	r3, [r4, #12]
 800fe92:	9b00      	ldr	r3, [sp, #0]
 800fe94:	6163      	str	r3, [r4, #20]
 800fe96:	9b01      	ldr	r3, [sp, #4]
 800fe98:	6120      	str	r0, [r4, #16]
 800fe9a:	b15b      	cbz	r3, 800feb4 <__smakebuf_r+0x74>
 800fe9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fea0:	4630      	mov	r0, r6
 800fea2:	f001 f941 	bl	8011128 <_isatty_r>
 800fea6:	b128      	cbz	r0, 800feb4 <__smakebuf_r+0x74>
 800fea8:	89a3      	ldrh	r3, [r4, #12]
 800feaa:	f023 0303 	bic.w	r3, r3, #3
 800feae:	f043 0301 	orr.w	r3, r3, #1
 800feb2:	81a3      	strh	r3, [r4, #12]
 800feb4:	89a0      	ldrh	r0, [r4, #12]
 800feb6:	4305      	orrs	r5, r0
 800feb8:	81a5      	strh	r5, [r4, #12]
 800feba:	e7cd      	b.n	800fe58 <__smakebuf_r+0x18>
 800febc:	0800f549 	.word	0x0800f549

0800fec0 <__ascii_mbtowc>:
 800fec0:	b082      	sub	sp, #8
 800fec2:	b901      	cbnz	r1, 800fec6 <__ascii_mbtowc+0x6>
 800fec4:	a901      	add	r1, sp, #4
 800fec6:	b142      	cbz	r2, 800feda <__ascii_mbtowc+0x1a>
 800fec8:	b14b      	cbz	r3, 800fede <__ascii_mbtowc+0x1e>
 800feca:	7813      	ldrb	r3, [r2, #0]
 800fecc:	600b      	str	r3, [r1, #0]
 800fece:	7812      	ldrb	r2, [r2, #0]
 800fed0:	1e10      	subs	r0, r2, #0
 800fed2:	bf18      	it	ne
 800fed4:	2001      	movne	r0, #1
 800fed6:	b002      	add	sp, #8
 800fed8:	4770      	bx	lr
 800feda:	4610      	mov	r0, r2
 800fedc:	e7fb      	b.n	800fed6 <__ascii_mbtowc+0x16>
 800fede:	f06f 0001 	mvn.w	r0, #1
 800fee2:	e7f8      	b.n	800fed6 <__ascii_mbtowc+0x16>

0800fee4 <_Balloc>:
 800fee4:	b570      	push	{r4, r5, r6, lr}
 800fee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fee8:	4604      	mov	r4, r0
 800feea:	460d      	mov	r5, r1
 800feec:	b976      	cbnz	r6, 800ff0c <_Balloc+0x28>
 800feee:	2010      	movs	r0, #16
 800fef0:	f001 f92a 	bl	8011148 <malloc>
 800fef4:	4602      	mov	r2, r0
 800fef6:	6260      	str	r0, [r4, #36]	; 0x24
 800fef8:	b920      	cbnz	r0, 800ff04 <_Balloc+0x20>
 800fefa:	4b18      	ldr	r3, [pc, #96]	; (800ff5c <_Balloc+0x78>)
 800fefc:	4818      	ldr	r0, [pc, #96]	; (800ff60 <_Balloc+0x7c>)
 800fefe:	2166      	movs	r1, #102	; 0x66
 800ff00:	f001 f8d0 	bl	80110a4 <__assert_func>
 800ff04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff08:	6006      	str	r6, [r0, #0]
 800ff0a:	60c6      	str	r6, [r0, #12]
 800ff0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff0e:	68f3      	ldr	r3, [r6, #12]
 800ff10:	b183      	cbz	r3, 800ff34 <_Balloc+0x50>
 800ff12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff1a:	b9b8      	cbnz	r0, 800ff4c <_Balloc+0x68>
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ff22:	1d72      	adds	r2, r6, #5
 800ff24:	0092      	lsls	r2, r2, #2
 800ff26:	4620      	mov	r0, r4
 800ff28:	f000 fc9d 	bl	8010866 <_calloc_r>
 800ff2c:	b160      	cbz	r0, 800ff48 <_Balloc+0x64>
 800ff2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff32:	e00e      	b.n	800ff52 <_Balloc+0x6e>
 800ff34:	2221      	movs	r2, #33	; 0x21
 800ff36:	2104      	movs	r1, #4
 800ff38:	4620      	mov	r0, r4
 800ff3a:	f000 fc94 	bl	8010866 <_calloc_r>
 800ff3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff40:	60f0      	str	r0, [r6, #12]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d1e4      	bne.n	800ff12 <_Balloc+0x2e>
 800ff48:	2000      	movs	r0, #0
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
 800ff4c:	6802      	ldr	r2, [r0, #0]
 800ff4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff52:	2300      	movs	r3, #0
 800ff54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff58:	e7f7      	b.n	800ff4a <_Balloc+0x66>
 800ff5a:	bf00      	nop
 800ff5c:	08011980 	.word	0x08011980
 800ff60:	08011997 	.word	0x08011997

0800ff64 <_Bfree>:
 800ff64:	b570      	push	{r4, r5, r6, lr}
 800ff66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff68:	4605      	mov	r5, r0
 800ff6a:	460c      	mov	r4, r1
 800ff6c:	b976      	cbnz	r6, 800ff8c <_Bfree+0x28>
 800ff6e:	2010      	movs	r0, #16
 800ff70:	f001 f8ea 	bl	8011148 <malloc>
 800ff74:	4602      	mov	r2, r0
 800ff76:	6268      	str	r0, [r5, #36]	; 0x24
 800ff78:	b920      	cbnz	r0, 800ff84 <_Bfree+0x20>
 800ff7a:	4b09      	ldr	r3, [pc, #36]	; (800ffa0 <_Bfree+0x3c>)
 800ff7c:	4809      	ldr	r0, [pc, #36]	; (800ffa4 <_Bfree+0x40>)
 800ff7e:	218a      	movs	r1, #138	; 0x8a
 800ff80:	f001 f890 	bl	80110a4 <__assert_func>
 800ff84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff88:	6006      	str	r6, [r0, #0]
 800ff8a:	60c6      	str	r6, [r0, #12]
 800ff8c:	b13c      	cbz	r4, 800ff9e <_Bfree+0x3a>
 800ff8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ff90:	6862      	ldr	r2, [r4, #4]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff98:	6021      	str	r1, [r4, #0]
 800ff9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
 800ffa0:	08011980 	.word	0x08011980
 800ffa4:	08011997 	.word	0x08011997

0800ffa8 <__multadd>:
 800ffa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffac:	690d      	ldr	r5, [r1, #16]
 800ffae:	4607      	mov	r7, r0
 800ffb0:	460c      	mov	r4, r1
 800ffb2:	461e      	mov	r6, r3
 800ffb4:	f101 0c14 	add.w	ip, r1, #20
 800ffb8:	2000      	movs	r0, #0
 800ffba:	f8dc 3000 	ldr.w	r3, [ip]
 800ffbe:	b299      	uxth	r1, r3
 800ffc0:	fb02 6101 	mla	r1, r2, r1, r6
 800ffc4:	0c1e      	lsrs	r6, r3, #16
 800ffc6:	0c0b      	lsrs	r3, r1, #16
 800ffc8:	fb02 3306 	mla	r3, r2, r6, r3
 800ffcc:	b289      	uxth	r1, r1
 800ffce:	3001      	adds	r0, #1
 800ffd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ffd4:	4285      	cmp	r5, r0
 800ffd6:	f84c 1b04 	str.w	r1, [ip], #4
 800ffda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ffde:	dcec      	bgt.n	800ffba <__multadd+0x12>
 800ffe0:	b30e      	cbz	r6, 8010026 <__multadd+0x7e>
 800ffe2:	68a3      	ldr	r3, [r4, #8]
 800ffe4:	42ab      	cmp	r3, r5
 800ffe6:	dc19      	bgt.n	801001c <__multadd+0x74>
 800ffe8:	6861      	ldr	r1, [r4, #4]
 800ffea:	4638      	mov	r0, r7
 800ffec:	3101      	adds	r1, #1
 800ffee:	f7ff ff79 	bl	800fee4 <_Balloc>
 800fff2:	4680      	mov	r8, r0
 800fff4:	b928      	cbnz	r0, 8010002 <__multadd+0x5a>
 800fff6:	4602      	mov	r2, r0
 800fff8:	4b0c      	ldr	r3, [pc, #48]	; (801002c <__multadd+0x84>)
 800fffa:	480d      	ldr	r0, [pc, #52]	; (8010030 <__multadd+0x88>)
 800fffc:	21b5      	movs	r1, #181	; 0xb5
 800fffe:	f001 f851 	bl	80110a4 <__assert_func>
 8010002:	6922      	ldr	r2, [r4, #16]
 8010004:	3202      	adds	r2, #2
 8010006:	f104 010c 	add.w	r1, r4, #12
 801000a:	0092      	lsls	r2, r2, #2
 801000c:	300c      	adds	r0, #12
 801000e:	f7fd fed7 	bl	800ddc0 <memcpy>
 8010012:	4621      	mov	r1, r4
 8010014:	4638      	mov	r0, r7
 8010016:	f7ff ffa5 	bl	800ff64 <_Bfree>
 801001a:	4644      	mov	r4, r8
 801001c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010020:	3501      	adds	r5, #1
 8010022:	615e      	str	r6, [r3, #20]
 8010024:	6125      	str	r5, [r4, #16]
 8010026:	4620      	mov	r0, r4
 8010028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801002c:	080118f4 	.word	0x080118f4
 8010030:	08011997 	.word	0x08011997

08010034 <__s2b>:
 8010034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010038:	460c      	mov	r4, r1
 801003a:	4615      	mov	r5, r2
 801003c:	461f      	mov	r7, r3
 801003e:	2209      	movs	r2, #9
 8010040:	3308      	adds	r3, #8
 8010042:	4606      	mov	r6, r0
 8010044:	fb93 f3f2 	sdiv	r3, r3, r2
 8010048:	2100      	movs	r1, #0
 801004a:	2201      	movs	r2, #1
 801004c:	429a      	cmp	r2, r3
 801004e:	db09      	blt.n	8010064 <__s2b+0x30>
 8010050:	4630      	mov	r0, r6
 8010052:	f7ff ff47 	bl	800fee4 <_Balloc>
 8010056:	b940      	cbnz	r0, 801006a <__s2b+0x36>
 8010058:	4602      	mov	r2, r0
 801005a:	4b19      	ldr	r3, [pc, #100]	; (80100c0 <__s2b+0x8c>)
 801005c:	4819      	ldr	r0, [pc, #100]	; (80100c4 <__s2b+0x90>)
 801005e:	21ce      	movs	r1, #206	; 0xce
 8010060:	f001 f820 	bl	80110a4 <__assert_func>
 8010064:	0052      	lsls	r2, r2, #1
 8010066:	3101      	adds	r1, #1
 8010068:	e7f0      	b.n	801004c <__s2b+0x18>
 801006a:	9b08      	ldr	r3, [sp, #32]
 801006c:	6143      	str	r3, [r0, #20]
 801006e:	2d09      	cmp	r5, #9
 8010070:	f04f 0301 	mov.w	r3, #1
 8010074:	6103      	str	r3, [r0, #16]
 8010076:	dd16      	ble.n	80100a6 <__s2b+0x72>
 8010078:	f104 0909 	add.w	r9, r4, #9
 801007c:	46c8      	mov	r8, r9
 801007e:	442c      	add	r4, r5
 8010080:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010084:	4601      	mov	r1, r0
 8010086:	3b30      	subs	r3, #48	; 0x30
 8010088:	220a      	movs	r2, #10
 801008a:	4630      	mov	r0, r6
 801008c:	f7ff ff8c 	bl	800ffa8 <__multadd>
 8010090:	45a0      	cmp	r8, r4
 8010092:	d1f5      	bne.n	8010080 <__s2b+0x4c>
 8010094:	f1a5 0408 	sub.w	r4, r5, #8
 8010098:	444c      	add	r4, r9
 801009a:	1b2d      	subs	r5, r5, r4
 801009c:	1963      	adds	r3, r4, r5
 801009e:	42bb      	cmp	r3, r7
 80100a0:	db04      	blt.n	80100ac <__s2b+0x78>
 80100a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100a6:	340a      	adds	r4, #10
 80100a8:	2509      	movs	r5, #9
 80100aa:	e7f6      	b.n	801009a <__s2b+0x66>
 80100ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80100b0:	4601      	mov	r1, r0
 80100b2:	3b30      	subs	r3, #48	; 0x30
 80100b4:	220a      	movs	r2, #10
 80100b6:	4630      	mov	r0, r6
 80100b8:	f7ff ff76 	bl	800ffa8 <__multadd>
 80100bc:	e7ee      	b.n	801009c <__s2b+0x68>
 80100be:	bf00      	nop
 80100c0:	080118f4 	.word	0x080118f4
 80100c4:	08011997 	.word	0x08011997

080100c8 <__hi0bits>:
 80100c8:	0c03      	lsrs	r3, r0, #16
 80100ca:	041b      	lsls	r3, r3, #16
 80100cc:	b9d3      	cbnz	r3, 8010104 <__hi0bits+0x3c>
 80100ce:	0400      	lsls	r0, r0, #16
 80100d0:	2310      	movs	r3, #16
 80100d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80100d6:	bf04      	itt	eq
 80100d8:	0200      	lsleq	r0, r0, #8
 80100da:	3308      	addeq	r3, #8
 80100dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80100e0:	bf04      	itt	eq
 80100e2:	0100      	lsleq	r0, r0, #4
 80100e4:	3304      	addeq	r3, #4
 80100e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80100ea:	bf04      	itt	eq
 80100ec:	0080      	lsleq	r0, r0, #2
 80100ee:	3302      	addeq	r3, #2
 80100f0:	2800      	cmp	r0, #0
 80100f2:	db05      	blt.n	8010100 <__hi0bits+0x38>
 80100f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80100f8:	f103 0301 	add.w	r3, r3, #1
 80100fc:	bf08      	it	eq
 80100fe:	2320      	moveq	r3, #32
 8010100:	4618      	mov	r0, r3
 8010102:	4770      	bx	lr
 8010104:	2300      	movs	r3, #0
 8010106:	e7e4      	b.n	80100d2 <__hi0bits+0xa>

08010108 <__lo0bits>:
 8010108:	6803      	ldr	r3, [r0, #0]
 801010a:	f013 0207 	ands.w	r2, r3, #7
 801010e:	4601      	mov	r1, r0
 8010110:	d00b      	beq.n	801012a <__lo0bits+0x22>
 8010112:	07da      	lsls	r2, r3, #31
 8010114:	d423      	bmi.n	801015e <__lo0bits+0x56>
 8010116:	0798      	lsls	r0, r3, #30
 8010118:	bf49      	itett	mi
 801011a:	085b      	lsrmi	r3, r3, #1
 801011c:	089b      	lsrpl	r3, r3, #2
 801011e:	2001      	movmi	r0, #1
 8010120:	600b      	strmi	r3, [r1, #0]
 8010122:	bf5c      	itt	pl
 8010124:	600b      	strpl	r3, [r1, #0]
 8010126:	2002      	movpl	r0, #2
 8010128:	4770      	bx	lr
 801012a:	b298      	uxth	r0, r3
 801012c:	b9a8      	cbnz	r0, 801015a <__lo0bits+0x52>
 801012e:	0c1b      	lsrs	r3, r3, #16
 8010130:	2010      	movs	r0, #16
 8010132:	b2da      	uxtb	r2, r3
 8010134:	b90a      	cbnz	r2, 801013a <__lo0bits+0x32>
 8010136:	3008      	adds	r0, #8
 8010138:	0a1b      	lsrs	r3, r3, #8
 801013a:	071a      	lsls	r2, r3, #28
 801013c:	bf04      	itt	eq
 801013e:	091b      	lsreq	r3, r3, #4
 8010140:	3004      	addeq	r0, #4
 8010142:	079a      	lsls	r2, r3, #30
 8010144:	bf04      	itt	eq
 8010146:	089b      	lsreq	r3, r3, #2
 8010148:	3002      	addeq	r0, #2
 801014a:	07da      	lsls	r2, r3, #31
 801014c:	d403      	bmi.n	8010156 <__lo0bits+0x4e>
 801014e:	085b      	lsrs	r3, r3, #1
 8010150:	f100 0001 	add.w	r0, r0, #1
 8010154:	d005      	beq.n	8010162 <__lo0bits+0x5a>
 8010156:	600b      	str	r3, [r1, #0]
 8010158:	4770      	bx	lr
 801015a:	4610      	mov	r0, r2
 801015c:	e7e9      	b.n	8010132 <__lo0bits+0x2a>
 801015e:	2000      	movs	r0, #0
 8010160:	4770      	bx	lr
 8010162:	2020      	movs	r0, #32
 8010164:	4770      	bx	lr
	...

08010168 <__i2b>:
 8010168:	b510      	push	{r4, lr}
 801016a:	460c      	mov	r4, r1
 801016c:	2101      	movs	r1, #1
 801016e:	f7ff feb9 	bl	800fee4 <_Balloc>
 8010172:	4602      	mov	r2, r0
 8010174:	b928      	cbnz	r0, 8010182 <__i2b+0x1a>
 8010176:	4b05      	ldr	r3, [pc, #20]	; (801018c <__i2b+0x24>)
 8010178:	4805      	ldr	r0, [pc, #20]	; (8010190 <__i2b+0x28>)
 801017a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801017e:	f000 ff91 	bl	80110a4 <__assert_func>
 8010182:	2301      	movs	r3, #1
 8010184:	6144      	str	r4, [r0, #20]
 8010186:	6103      	str	r3, [r0, #16]
 8010188:	bd10      	pop	{r4, pc}
 801018a:	bf00      	nop
 801018c:	080118f4 	.word	0x080118f4
 8010190:	08011997 	.word	0x08011997

08010194 <__multiply>:
 8010194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010198:	4691      	mov	r9, r2
 801019a:	690a      	ldr	r2, [r1, #16]
 801019c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	bfb8      	it	lt
 80101a4:	460b      	movlt	r3, r1
 80101a6:	460c      	mov	r4, r1
 80101a8:	bfbc      	itt	lt
 80101aa:	464c      	movlt	r4, r9
 80101ac:	4699      	movlt	r9, r3
 80101ae:	6927      	ldr	r7, [r4, #16]
 80101b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80101b4:	68a3      	ldr	r3, [r4, #8]
 80101b6:	6861      	ldr	r1, [r4, #4]
 80101b8:	eb07 060a 	add.w	r6, r7, sl
 80101bc:	42b3      	cmp	r3, r6
 80101be:	b085      	sub	sp, #20
 80101c0:	bfb8      	it	lt
 80101c2:	3101      	addlt	r1, #1
 80101c4:	f7ff fe8e 	bl	800fee4 <_Balloc>
 80101c8:	b930      	cbnz	r0, 80101d8 <__multiply+0x44>
 80101ca:	4602      	mov	r2, r0
 80101cc:	4b44      	ldr	r3, [pc, #272]	; (80102e0 <__multiply+0x14c>)
 80101ce:	4845      	ldr	r0, [pc, #276]	; (80102e4 <__multiply+0x150>)
 80101d0:	f240 115d 	movw	r1, #349	; 0x15d
 80101d4:	f000 ff66 	bl	80110a4 <__assert_func>
 80101d8:	f100 0514 	add.w	r5, r0, #20
 80101dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80101e0:	462b      	mov	r3, r5
 80101e2:	2200      	movs	r2, #0
 80101e4:	4543      	cmp	r3, r8
 80101e6:	d321      	bcc.n	801022c <__multiply+0x98>
 80101e8:	f104 0314 	add.w	r3, r4, #20
 80101ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80101f0:	f109 0314 	add.w	r3, r9, #20
 80101f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80101f8:	9202      	str	r2, [sp, #8]
 80101fa:	1b3a      	subs	r2, r7, r4
 80101fc:	3a15      	subs	r2, #21
 80101fe:	f022 0203 	bic.w	r2, r2, #3
 8010202:	3204      	adds	r2, #4
 8010204:	f104 0115 	add.w	r1, r4, #21
 8010208:	428f      	cmp	r7, r1
 801020a:	bf38      	it	cc
 801020c:	2204      	movcc	r2, #4
 801020e:	9201      	str	r2, [sp, #4]
 8010210:	9a02      	ldr	r2, [sp, #8]
 8010212:	9303      	str	r3, [sp, #12]
 8010214:	429a      	cmp	r2, r3
 8010216:	d80c      	bhi.n	8010232 <__multiply+0x9e>
 8010218:	2e00      	cmp	r6, #0
 801021a:	dd03      	ble.n	8010224 <__multiply+0x90>
 801021c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010220:	2b00      	cmp	r3, #0
 8010222:	d05a      	beq.n	80102da <__multiply+0x146>
 8010224:	6106      	str	r6, [r0, #16]
 8010226:	b005      	add	sp, #20
 8010228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022c:	f843 2b04 	str.w	r2, [r3], #4
 8010230:	e7d8      	b.n	80101e4 <__multiply+0x50>
 8010232:	f8b3 a000 	ldrh.w	sl, [r3]
 8010236:	f1ba 0f00 	cmp.w	sl, #0
 801023a:	d024      	beq.n	8010286 <__multiply+0xf2>
 801023c:	f104 0e14 	add.w	lr, r4, #20
 8010240:	46a9      	mov	r9, r5
 8010242:	f04f 0c00 	mov.w	ip, #0
 8010246:	f85e 2b04 	ldr.w	r2, [lr], #4
 801024a:	f8d9 1000 	ldr.w	r1, [r9]
 801024e:	fa1f fb82 	uxth.w	fp, r2
 8010252:	b289      	uxth	r1, r1
 8010254:	fb0a 110b 	mla	r1, sl, fp, r1
 8010258:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801025c:	f8d9 2000 	ldr.w	r2, [r9]
 8010260:	4461      	add	r1, ip
 8010262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010266:	fb0a c20b 	mla	r2, sl, fp, ip
 801026a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801026e:	b289      	uxth	r1, r1
 8010270:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010274:	4577      	cmp	r7, lr
 8010276:	f849 1b04 	str.w	r1, [r9], #4
 801027a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801027e:	d8e2      	bhi.n	8010246 <__multiply+0xb2>
 8010280:	9a01      	ldr	r2, [sp, #4]
 8010282:	f845 c002 	str.w	ip, [r5, r2]
 8010286:	9a03      	ldr	r2, [sp, #12]
 8010288:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801028c:	3304      	adds	r3, #4
 801028e:	f1b9 0f00 	cmp.w	r9, #0
 8010292:	d020      	beq.n	80102d6 <__multiply+0x142>
 8010294:	6829      	ldr	r1, [r5, #0]
 8010296:	f104 0c14 	add.w	ip, r4, #20
 801029a:	46ae      	mov	lr, r5
 801029c:	f04f 0a00 	mov.w	sl, #0
 80102a0:	f8bc b000 	ldrh.w	fp, [ip]
 80102a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80102a8:	fb09 220b 	mla	r2, r9, fp, r2
 80102ac:	4492      	add	sl, r2
 80102ae:	b289      	uxth	r1, r1
 80102b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80102b4:	f84e 1b04 	str.w	r1, [lr], #4
 80102b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80102bc:	f8be 1000 	ldrh.w	r1, [lr]
 80102c0:	0c12      	lsrs	r2, r2, #16
 80102c2:	fb09 1102 	mla	r1, r9, r2, r1
 80102c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80102ca:	4567      	cmp	r7, ip
 80102cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80102d0:	d8e6      	bhi.n	80102a0 <__multiply+0x10c>
 80102d2:	9a01      	ldr	r2, [sp, #4]
 80102d4:	50a9      	str	r1, [r5, r2]
 80102d6:	3504      	adds	r5, #4
 80102d8:	e79a      	b.n	8010210 <__multiply+0x7c>
 80102da:	3e01      	subs	r6, #1
 80102dc:	e79c      	b.n	8010218 <__multiply+0x84>
 80102de:	bf00      	nop
 80102e0:	080118f4 	.word	0x080118f4
 80102e4:	08011997 	.word	0x08011997

080102e8 <__pow5mult>:
 80102e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102ec:	4615      	mov	r5, r2
 80102ee:	f012 0203 	ands.w	r2, r2, #3
 80102f2:	4606      	mov	r6, r0
 80102f4:	460f      	mov	r7, r1
 80102f6:	d007      	beq.n	8010308 <__pow5mult+0x20>
 80102f8:	4c25      	ldr	r4, [pc, #148]	; (8010390 <__pow5mult+0xa8>)
 80102fa:	3a01      	subs	r2, #1
 80102fc:	2300      	movs	r3, #0
 80102fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010302:	f7ff fe51 	bl	800ffa8 <__multadd>
 8010306:	4607      	mov	r7, r0
 8010308:	10ad      	asrs	r5, r5, #2
 801030a:	d03d      	beq.n	8010388 <__pow5mult+0xa0>
 801030c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801030e:	b97c      	cbnz	r4, 8010330 <__pow5mult+0x48>
 8010310:	2010      	movs	r0, #16
 8010312:	f000 ff19 	bl	8011148 <malloc>
 8010316:	4602      	mov	r2, r0
 8010318:	6270      	str	r0, [r6, #36]	; 0x24
 801031a:	b928      	cbnz	r0, 8010328 <__pow5mult+0x40>
 801031c:	4b1d      	ldr	r3, [pc, #116]	; (8010394 <__pow5mult+0xac>)
 801031e:	481e      	ldr	r0, [pc, #120]	; (8010398 <__pow5mult+0xb0>)
 8010320:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010324:	f000 febe 	bl	80110a4 <__assert_func>
 8010328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801032c:	6004      	str	r4, [r0, #0]
 801032e:	60c4      	str	r4, [r0, #12]
 8010330:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010334:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010338:	b94c      	cbnz	r4, 801034e <__pow5mult+0x66>
 801033a:	f240 2171 	movw	r1, #625	; 0x271
 801033e:	4630      	mov	r0, r6
 8010340:	f7ff ff12 	bl	8010168 <__i2b>
 8010344:	2300      	movs	r3, #0
 8010346:	f8c8 0008 	str.w	r0, [r8, #8]
 801034a:	4604      	mov	r4, r0
 801034c:	6003      	str	r3, [r0, #0]
 801034e:	f04f 0900 	mov.w	r9, #0
 8010352:	07eb      	lsls	r3, r5, #31
 8010354:	d50a      	bpl.n	801036c <__pow5mult+0x84>
 8010356:	4639      	mov	r1, r7
 8010358:	4622      	mov	r2, r4
 801035a:	4630      	mov	r0, r6
 801035c:	f7ff ff1a 	bl	8010194 <__multiply>
 8010360:	4639      	mov	r1, r7
 8010362:	4680      	mov	r8, r0
 8010364:	4630      	mov	r0, r6
 8010366:	f7ff fdfd 	bl	800ff64 <_Bfree>
 801036a:	4647      	mov	r7, r8
 801036c:	106d      	asrs	r5, r5, #1
 801036e:	d00b      	beq.n	8010388 <__pow5mult+0xa0>
 8010370:	6820      	ldr	r0, [r4, #0]
 8010372:	b938      	cbnz	r0, 8010384 <__pow5mult+0x9c>
 8010374:	4622      	mov	r2, r4
 8010376:	4621      	mov	r1, r4
 8010378:	4630      	mov	r0, r6
 801037a:	f7ff ff0b 	bl	8010194 <__multiply>
 801037e:	6020      	str	r0, [r4, #0]
 8010380:	f8c0 9000 	str.w	r9, [r0]
 8010384:	4604      	mov	r4, r0
 8010386:	e7e4      	b.n	8010352 <__pow5mult+0x6a>
 8010388:	4638      	mov	r0, r7
 801038a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801038e:	bf00      	nop
 8010390:	08011ae8 	.word	0x08011ae8
 8010394:	08011980 	.word	0x08011980
 8010398:	08011997 	.word	0x08011997

0801039c <__lshift>:
 801039c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a0:	460c      	mov	r4, r1
 80103a2:	6849      	ldr	r1, [r1, #4]
 80103a4:	6923      	ldr	r3, [r4, #16]
 80103a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80103aa:	68a3      	ldr	r3, [r4, #8]
 80103ac:	4607      	mov	r7, r0
 80103ae:	4691      	mov	r9, r2
 80103b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80103b4:	f108 0601 	add.w	r6, r8, #1
 80103b8:	42b3      	cmp	r3, r6
 80103ba:	db0b      	blt.n	80103d4 <__lshift+0x38>
 80103bc:	4638      	mov	r0, r7
 80103be:	f7ff fd91 	bl	800fee4 <_Balloc>
 80103c2:	4605      	mov	r5, r0
 80103c4:	b948      	cbnz	r0, 80103da <__lshift+0x3e>
 80103c6:	4602      	mov	r2, r0
 80103c8:	4b2a      	ldr	r3, [pc, #168]	; (8010474 <__lshift+0xd8>)
 80103ca:	482b      	ldr	r0, [pc, #172]	; (8010478 <__lshift+0xdc>)
 80103cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80103d0:	f000 fe68 	bl	80110a4 <__assert_func>
 80103d4:	3101      	adds	r1, #1
 80103d6:	005b      	lsls	r3, r3, #1
 80103d8:	e7ee      	b.n	80103b8 <__lshift+0x1c>
 80103da:	2300      	movs	r3, #0
 80103dc:	f100 0114 	add.w	r1, r0, #20
 80103e0:	f100 0210 	add.w	r2, r0, #16
 80103e4:	4618      	mov	r0, r3
 80103e6:	4553      	cmp	r3, sl
 80103e8:	db37      	blt.n	801045a <__lshift+0xbe>
 80103ea:	6920      	ldr	r0, [r4, #16]
 80103ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80103f0:	f104 0314 	add.w	r3, r4, #20
 80103f4:	f019 091f 	ands.w	r9, r9, #31
 80103f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80103fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010400:	d02f      	beq.n	8010462 <__lshift+0xc6>
 8010402:	f1c9 0e20 	rsb	lr, r9, #32
 8010406:	468a      	mov	sl, r1
 8010408:	f04f 0c00 	mov.w	ip, #0
 801040c:	681a      	ldr	r2, [r3, #0]
 801040e:	fa02 f209 	lsl.w	r2, r2, r9
 8010412:	ea42 020c 	orr.w	r2, r2, ip
 8010416:	f84a 2b04 	str.w	r2, [sl], #4
 801041a:	f853 2b04 	ldr.w	r2, [r3], #4
 801041e:	4298      	cmp	r0, r3
 8010420:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010424:	d8f2      	bhi.n	801040c <__lshift+0x70>
 8010426:	1b03      	subs	r3, r0, r4
 8010428:	3b15      	subs	r3, #21
 801042a:	f023 0303 	bic.w	r3, r3, #3
 801042e:	3304      	adds	r3, #4
 8010430:	f104 0215 	add.w	r2, r4, #21
 8010434:	4290      	cmp	r0, r2
 8010436:	bf38      	it	cc
 8010438:	2304      	movcc	r3, #4
 801043a:	f841 c003 	str.w	ip, [r1, r3]
 801043e:	f1bc 0f00 	cmp.w	ip, #0
 8010442:	d001      	beq.n	8010448 <__lshift+0xac>
 8010444:	f108 0602 	add.w	r6, r8, #2
 8010448:	3e01      	subs	r6, #1
 801044a:	4638      	mov	r0, r7
 801044c:	612e      	str	r6, [r5, #16]
 801044e:	4621      	mov	r1, r4
 8010450:	f7ff fd88 	bl	800ff64 <_Bfree>
 8010454:	4628      	mov	r0, r5
 8010456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801045a:	f842 0f04 	str.w	r0, [r2, #4]!
 801045e:	3301      	adds	r3, #1
 8010460:	e7c1      	b.n	80103e6 <__lshift+0x4a>
 8010462:	3904      	subs	r1, #4
 8010464:	f853 2b04 	ldr.w	r2, [r3], #4
 8010468:	f841 2f04 	str.w	r2, [r1, #4]!
 801046c:	4298      	cmp	r0, r3
 801046e:	d8f9      	bhi.n	8010464 <__lshift+0xc8>
 8010470:	e7ea      	b.n	8010448 <__lshift+0xac>
 8010472:	bf00      	nop
 8010474:	080118f4 	.word	0x080118f4
 8010478:	08011997 	.word	0x08011997

0801047c <__mcmp>:
 801047c:	b530      	push	{r4, r5, lr}
 801047e:	6902      	ldr	r2, [r0, #16]
 8010480:	690c      	ldr	r4, [r1, #16]
 8010482:	1b12      	subs	r2, r2, r4
 8010484:	d10e      	bne.n	80104a4 <__mcmp+0x28>
 8010486:	f100 0314 	add.w	r3, r0, #20
 801048a:	3114      	adds	r1, #20
 801048c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010490:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010494:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010498:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801049c:	42a5      	cmp	r5, r4
 801049e:	d003      	beq.n	80104a8 <__mcmp+0x2c>
 80104a0:	d305      	bcc.n	80104ae <__mcmp+0x32>
 80104a2:	2201      	movs	r2, #1
 80104a4:	4610      	mov	r0, r2
 80104a6:	bd30      	pop	{r4, r5, pc}
 80104a8:	4283      	cmp	r3, r0
 80104aa:	d3f3      	bcc.n	8010494 <__mcmp+0x18>
 80104ac:	e7fa      	b.n	80104a4 <__mcmp+0x28>
 80104ae:	f04f 32ff 	mov.w	r2, #4294967295
 80104b2:	e7f7      	b.n	80104a4 <__mcmp+0x28>

080104b4 <__mdiff>:
 80104b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b8:	460c      	mov	r4, r1
 80104ba:	4606      	mov	r6, r0
 80104bc:	4611      	mov	r1, r2
 80104be:	4620      	mov	r0, r4
 80104c0:	4690      	mov	r8, r2
 80104c2:	f7ff ffdb 	bl	801047c <__mcmp>
 80104c6:	1e05      	subs	r5, r0, #0
 80104c8:	d110      	bne.n	80104ec <__mdiff+0x38>
 80104ca:	4629      	mov	r1, r5
 80104cc:	4630      	mov	r0, r6
 80104ce:	f7ff fd09 	bl	800fee4 <_Balloc>
 80104d2:	b930      	cbnz	r0, 80104e2 <__mdiff+0x2e>
 80104d4:	4b3a      	ldr	r3, [pc, #232]	; (80105c0 <__mdiff+0x10c>)
 80104d6:	4602      	mov	r2, r0
 80104d8:	f240 2132 	movw	r1, #562	; 0x232
 80104dc:	4839      	ldr	r0, [pc, #228]	; (80105c4 <__mdiff+0x110>)
 80104de:	f000 fde1 	bl	80110a4 <__assert_func>
 80104e2:	2301      	movs	r3, #1
 80104e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80104e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ec:	bfa4      	itt	ge
 80104ee:	4643      	movge	r3, r8
 80104f0:	46a0      	movge	r8, r4
 80104f2:	4630      	mov	r0, r6
 80104f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80104f8:	bfa6      	itte	ge
 80104fa:	461c      	movge	r4, r3
 80104fc:	2500      	movge	r5, #0
 80104fe:	2501      	movlt	r5, #1
 8010500:	f7ff fcf0 	bl	800fee4 <_Balloc>
 8010504:	b920      	cbnz	r0, 8010510 <__mdiff+0x5c>
 8010506:	4b2e      	ldr	r3, [pc, #184]	; (80105c0 <__mdiff+0x10c>)
 8010508:	4602      	mov	r2, r0
 801050a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801050e:	e7e5      	b.n	80104dc <__mdiff+0x28>
 8010510:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010514:	6926      	ldr	r6, [r4, #16]
 8010516:	60c5      	str	r5, [r0, #12]
 8010518:	f104 0914 	add.w	r9, r4, #20
 801051c:	f108 0514 	add.w	r5, r8, #20
 8010520:	f100 0e14 	add.w	lr, r0, #20
 8010524:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010528:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801052c:	f108 0210 	add.w	r2, r8, #16
 8010530:	46f2      	mov	sl, lr
 8010532:	2100      	movs	r1, #0
 8010534:	f859 3b04 	ldr.w	r3, [r9], #4
 8010538:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801053c:	fa1f f883 	uxth.w	r8, r3
 8010540:	fa11 f18b 	uxtah	r1, r1, fp
 8010544:	0c1b      	lsrs	r3, r3, #16
 8010546:	eba1 0808 	sub.w	r8, r1, r8
 801054a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801054e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010552:	fa1f f888 	uxth.w	r8, r8
 8010556:	1419      	asrs	r1, r3, #16
 8010558:	454e      	cmp	r6, r9
 801055a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801055e:	f84a 3b04 	str.w	r3, [sl], #4
 8010562:	d8e7      	bhi.n	8010534 <__mdiff+0x80>
 8010564:	1b33      	subs	r3, r6, r4
 8010566:	3b15      	subs	r3, #21
 8010568:	f023 0303 	bic.w	r3, r3, #3
 801056c:	3304      	adds	r3, #4
 801056e:	3415      	adds	r4, #21
 8010570:	42a6      	cmp	r6, r4
 8010572:	bf38      	it	cc
 8010574:	2304      	movcc	r3, #4
 8010576:	441d      	add	r5, r3
 8010578:	4473      	add	r3, lr
 801057a:	469e      	mov	lr, r3
 801057c:	462e      	mov	r6, r5
 801057e:	4566      	cmp	r6, ip
 8010580:	d30e      	bcc.n	80105a0 <__mdiff+0xec>
 8010582:	f10c 0203 	add.w	r2, ip, #3
 8010586:	1b52      	subs	r2, r2, r5
 8010588:	f022 0203 	bic.w	r2, r2, #3
 801058c:	3d03      	subs	r5, #3
 801058e:	45ac      	cmp	ip, r5
 8010590:	bf38      	it	cc
 8010592:	2200      	movcc	r2, #0
 8010594:	441a      	add	r2, r3
 8010596:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801059a:	b17b      	cbz	r3, 80105bc <__mdiff+0x108>
 801059c:	6107      	str	r7, [r0, #16]
 801059e:	e7a3      	b.n	80104e8 <__mdiff+0x34>
 80105a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80105a4:	fa11 f288 	uxtah	r2, r1, r8
 80105a8:	1414      	asrs	r4, r2, #16
 80105aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80105ae:	b292      	uxth	r2, r2
 80105b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80105b4:	f84e 2b04 	str.w	r2, [lr], #4
 80105b8:	1421      	asrs	r1, r4, #16
 80105ba:	e7e0      	b.n	801057e <__mdiff+0xca>
 80105bc:	3f01      	subs	r7, #1
 80105be:	e7ea      	b.n	8010596 <__mdiff+0xe2>
 80105c0:	080118f4 	.word	0x080118f4
 80105c4:	08011997 	.word	0x08011997

080105c8 <__ulp>:
 80105c8:	b082      	sub	sp, #8
 80105ca:	ed8d 0b00 	vstr	d0, [sp]
 80105ce:	9b01      	ldr	r3, [sp, #4]
 80105d0:	4912      	ldr	r1, [pc, #72]	; (801061c <__ulp+0x54>)
 80105d2:	4019      	ands	r1, r3
 80105d4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80105d8:	2900      	cmp	r1, #0
 80105da:	dd05      	ble.n	80105e8 <__ulp+0x20>
 80105dc:	2200      	movs	r2, #0
 80105de:	460b      	mov	r3, r1
 80105e0:	ec43 2b10 	vmov	d0, r2, r3
 80105e4:	b002      	add	sp, #8
 80105e6:	4770      	bx	lr
 80105e8:	4249      	negs	r1, r1
 80105ea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80105ee:	ea4f 5021 	mov.w	r0, r1, asr #20
 80105f2:	f04f 0200 	mov.w	r2, #0
 80105f6:	f04f 0300 	mov.w	r3, #0
 80105fa:	da04      	bge.n	8010606 <__ulp+0x3e>
 80105fc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010600:	fa41 f300 	asr.w	r3, r1, r0
 8010604:	e7ec      	b.n	80105e0 <__ulp+0x18>
 8010606:	f1a0 0114 	sub.w	r1, r0, #20
 801060a:	291e      	cmp	r1, #30
 801060c:	bfda      	itte	le
 801060e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010612:	fa20 f101 	lsrle.w	r1, r0, r1
 8010616:	2101      	movgt	r1, #1
 8010618:	460a      	mov	r2, r1
 801061a:	e7e1      	b.n	80105e0 <__ulp+0x18>
 801061c:	7ff00000 	.word	0x7ff00000

08010620 <__b2d>:
 8010620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010622:	6905      	ldr	r5, [r0, #16]
 8010624:	f100 0714 	add.w	r7, r0, #20
 8010628:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801062c:	1f2e      	subs	r6, r5, #4
 801062e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010632:	4620      	mov	r0, r4
 8010634:	f7ff fd48 	bl	80100c8 <__hi0bits>
 8010638:	f1c0 0320 	rsb	r3, r0, #32
 801063c:	280a      	cmp	r0, #10
 801063e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80106bc <__b2d+0x9c>
 8010642:	600b      	str	r3, [r1, #0]
 8010644:	dc14      	bgt.n	8010670 <__b2d+0x50>
 8010646:	f1c0 0e0b 	rsb	lr, r0, #11
 801064a:	fa24 f10e 	lsr.w	r1, r4, lr
 801064e:	42b7      	cmp	r7, r6
 8010650:	ea41 030c 	orr.w	r3, r1, ip
 8010654:	bf34      	ite	cc
 8010656:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801065a:	2100      	movcs	r1, #0
 801065c:	3015      	adds	r0, #21
 801065e:	fa04 f000 	lsl.w	r0, r4, r0
 8010662:	fa21 f10e 	lsr.w	r1, r1, lr
 8010666:	ea40 0201 	orr.w	r2, r0, r1
 801066a:	ec43 2b10 	vmov	d0, r2, r3
 801066e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010670:	42b7      	cmp	r7, r6
 8010672:	bf3a      	itte	cc
 8010674:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010678:	f1a5 0608 	subcc.w	r6, r5, #8
 801067c:	2100      	movcs	r1, #0
 801067e:	380b      	subs	r0, #11
 8010680:	d017      	beq.n	80106b2 <__b2d+0x92>
 8010682:	f1c0 0c20 	rsb	ip, r0, #32
 8010686:	fa04 f500 	lsl.w	r5, r4, r0
 801068a:	42be      	cmp	r6, r7
 801068c:	fa21 f40c 	lsr.w	r4, r1, ip
 8010690:	ea45 0504 	orr.w	r5, r5, r4
 8010694:	bf8c      	ite	hi
 8010696:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801069a:	2400      	movls	r4, #0
 801069c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80106a0:	fa01 f000 	lsl.w	r0, r1, r0
 80106a4:	fa24 f40c 	lsr.w	r4, r4, ip
 80106a8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80106ac:	ea40 0204 	orr.w	r2, r0, r4
 80106b0:	e7db      	b.n	801066a <__b2d+0x4a>
 80106b2:	ea44 030c 	orr.w	r3, r4, ip
 80106b6:	460a      	mov	r2, r1
 80106b8:	e7d7      	b.n	801066a <__b2d+0x4a>
 80106ba:	bf00      	nop
 80106bc:	3ff00000 	.word	0x3ff00000

080106c0 <__d2b>:
 80106c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80106c4:	4689      	mov	r9, r1
 80106c6:	2101      	movs	r1, #1
 80106c8:	ec57 6b10 	vmov	r6, r7, d0
 80106cc:	4690      	mov	r8, r2
 80106ce:	f7ff fc09 	bl	800fee4 <_Balloc>
 80106d2:	4604      	mov	r4, r0
 80106d4:	b930      	cbnz	r0, 80106e4 <__d2b+0x24>
 80106d6:	4602      	mov	r2, r0
 80106d8:	4b25      	ldr	r3, [pc, #148]	; (8010770 <__d2b+0xb0>)
 80106da:	4826      	ldr	r0, [pc, #152]	; (8010774 <__d2b+0xb4>)
 80106dc:	f240 310a 	movw	r1, #778	; 0x30a
 80106e0:	f000 fce0 	bl	80110a4 <__assert_func>
 80106e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80106e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80106ec:	bb35      	cbnz	r5, 801073c <__d2b+0x7c>
 80106ee:	2e00      	cmp	r6, #0
 80106f0:	9301      	str	r3, [sp, #4]
 80106f2:	d028      	beq.n	8010746 <__d2b+0x86>
 80106f4:	4668      	mov	r0, sp
 80106f6:	9600      	str	r6, [sp, #0]
 80106f8:	f7ff fd06 	bl	8010108 <__lo0bits>
 80106fc:	9900      	ldr	r1, [sp, #0]
 80106fe:	b300      	cbz	r0, 8010742 <__d2b+0x82>
 8010700:	9a01      	ldr	r2, [sp, #4]
 8010702:	f1c0 0320 	rsb	r3, r0, #32
 8010706:	fa02 f303 	lsl.w	r3, r2, r3
 801070a:	430b      	orrs	r3, r1
 801070c:	40c2      	lsrs	r2, r0
 801070e:	6163      	str	r3, [r4, #20]
 8010710:	9201      	str	r2, [sp, #4]
 8010712:	9b01      	ldr	r3, [sp, #4]
 8010714:	61a3      	str	r3, [r4, #24]
 8010716:	2b00      	cmp	r3, #0
 8010718:	bf14      	ite	ne
 801071a:	2202      	movne	r2, #2
 801071c:	2201      	moveq	r2, #1
 801071e:	6122      	str	r2, [r4, #16]
 8010720:	b1d5      	cbz	r5, 8010758 <__d2b+0x98>
 8010722:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010726:	4405      	add	r5, r0
 8010728:	f8c9 5000 	str.w	r5, [r9]
 801072c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010730:	f8c8 0000 	str.w	r0, [r8]
 8010734:	4620      	mov	r0, r4
 8010736:	b003      	add	sp, #12
 8010738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801073c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010740:	e7d5      	b.n	80106ee <__d2b+0x2e>
 8010742:	6161      	str	r1, [r4, #20]
 8010744:	e7e5      	b.n	8010712 <__d2b+0x52>
 8010746:	a801      	add	r0, sp, #4
 8010748:	f7ff fcde 	bl	8010108 <__lo0bits>
 801074c:	9b01      	ldr	r3, [sp, #4]
 801074e:	6163      	str	r3, [r4, #20]
 8010750:	2201      	movs	r2, #1
 8010752:	6122      	str	r2, [r4, #16]
 8010754:	3020      	adds	r0, #32
 8010756:	e7e3      	b.n	8010720 <__d2b+0x60>
 8010758:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801075c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010760:	f8c9 0000 	str.w	r0, [r9]
 8010764:	6918      	ldr	r0, [r3, #16]
 8010766:	f7ff fcaf 	bl	80100c8 <__hi0bits>
 801076a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801076e:	e7df      	b.n	8010730 <__d2b+0x70>
 8010770:	080118f4 	.word	0x080118f4
 8010774:	08011997 	.word	0x08011997

08010778 <__ratio>:
 8010778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801077c:	4688      	mov	r8, r1
 801077e:	4669      	mov	r1, sp
 8010780:	4681      	mov	r9, r0
 8010782:	f7ff ff4d 	bl	8010620 <__b2d>
 8010786:	a901      	add	r1, sp, #4
 8010788:	4640      	mov	r0, r8
 801078a:	ec55 4b10 	vmov	r4, r5, d0
 801078e:	f7ff ff47 	bl	8010620 <__b2d>
 8010792:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010796:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801079a:	eba3 0c02 	sub.w	ip, r3, r2
 801079e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80107a2:	1a9b      	subs	r3, r3, r2
 80107a4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80107a8:	ec51 0b10 	vmov	r0, r1, d0
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	bfd6      	itet	le
 80107b0:	460a      	movle	r2, r1
 80107b2:	462a      	movgt	r2, r5
 80107b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80107b8:	468b      	mov	fp, r1
 80107ba:	462f      	mov	r7, r5
 80107bc:	bfd4      	ite	le
 80107be:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80107c2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80107c6:	4620      	mov	r0, r4
 80107c8:	ee10 2a10 	vmov	r2, s0
 80107cc:	465b      	mov	r3, fp
 80107ce:	4639      	mov	r1, r7
 80107d0:	f7f0 f83c 	bl	800084c <__aeabi_ddiv>
 80107d4:	ec41 0b10 	vmov	d0, r0, r1
 80107d8:	b003      	add	sp, #12
 80107da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080107de <__copybits>:
 80107de:	3901      	subs	r1, #1
 80107e0:	b570      	push	{r4, r5, r6, lr}
 80107e2:	1149      	asrs	r1, r1, #5
 80107e4:	6914      	ldr	r4, [r2, #16]
 80107e6:	3101      	adds	r1, #1
 80107e8:	f102 0314 	add.w	r3, r2, #20
 80107ec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80107f0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80107f4:	1f05      	subs	r5, r0, #4
 80107f6:	42a3      	cmp	r3, r4
 80107f8:	d30c      	bcc.n	8010814 <__copybits+0x36>
 80107fa:	1aa3      	subs	r3, r4, r2
 80107fc:	3b11      	subs	r3, #17
 80107fe:	f023 0303 	bic.w	r3, r3, #3
 8010802:	3211      	adds	r2, #17
 8010804:	42a2      	cmp	r2, r4
 8010806:	bf88      	it	hi
 8010808:	2300      	movhi	r3, #0
 801080a:	4418      	add	r0, r3
 801080c:	2300      	movs	r3, #0
 801080e:	4288      	cmp	r0, r1
 8010810:	d305      	bcc.n	801081e <__copybits+0x40>
 8010812:	bd70      	pop	{r4, r5, r6, pc}
 8010814:	f853 6b04 	ldr.w	r6, [r3], #4
 8010818:	f845 6f04 	str.w	r6, [r5, #4]!
 801081c:	e7eb      	b.n	80107f6 <__copybits+0x18>
 801081e:	f840 3b04 	str.w	r3, [r0], #4
 8010822:	e7f4      	b.n	801080e <__copybits+0x30>

08010824 <__any_on>:
 8010824:	f100 0214 	add.w	r2, r0, #20
 8010828:	6900      	ldr	r0, [r0, #16]
 801082a:	114b      	asrs	r3, r1, #5
 801082c:	4298      	cmp	r0, r3
 801082e:	b510      	push	{r4, lr}
 8010830:	db11      	blt.n	8010856 <__any_on+0x32>
 8010832:	dd0a      	ble.n	801084a <__any_on+0x26>
 8010834:	f011 011f 	ands.w	r1, r1, #31
 8010838:	d007      	beq.n	801084a <__any_on+0x26>
 801083a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801083e:	fa24 f001 	lsr.w	r0, r4, r1
 8010842:	fa00 f101 	lsl.w	r1, r0, r1
 8010846:	428c      	cmp	r4, r1
 8010848:	d10b      	bne.n	8010862 <__any_on+0x3e>
 801084a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801084e:	4293      	cmp	r3, r2
 8010850:	d803      	bhi.n	801085a <__any_on+0x36>
 8010852:	2000      	movs	r0, #0
 8010854:	bd10      	pop	{r4, pc}
 8010856:	4603      	mov	r3, r0
 8010858:	e7f7      	b.n	801084a <__any_on+0x26>
 801085a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801085e:	2900      	cmp	r1, #0
 8010860:	d0f5      	beq.n	801084e <__any_on+0x2a>
 8010862:	2001      	movs	r0, #1
 8010864:	e7f6      	b.n	8010854 <__any_on+0x30>

08010866 <_calloc_r>:
 8010866:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010868:	fba1 2402 	umull	r2, r4, r1, r2
 801086c:	b94c      	cbnz	r4, 8010882 <_calloc_r+0x1c>
 801086e:	4611      	mov	r1, r2
 8010870:	9201      	str	r2, [sp, #4]
 8010872:	f000 f87b 	bl	801096c <_malloc_r>
 8010876:	9a01      	ldr	r2, [sp, #4]
 8010878:	4605      	mov	r5, r0
 801087a:	b930      	cbnz	r0, 801088a <_calloc_r+0x24>
 801087c:	4628      	mov	r0, r5
 801087e:	b003      	add	sp, #12
 8010880:	bd30      	pop	{r4, r5, pc}
 8010882:	220c      	movs	r2, #12
 8010884:	6002      	str	r2, [r0, #0]
 8010886:	2500      	movs	r5, #0
 8010888:	e7f8      	b.n	801087c <_calloc_r+0x16>
 801088a:	4621      	mov	r1, r4
 801088c:	f7fd faa6 	bl	800dddc <memset>
 8010890:	e7f4      	b.n	801087c <_calloc_r+0x16>
	...

08010894 <_free_r>:
 8010894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010896:	2900      	cmp	r1, #0
 8010898:	d044      	beq.n	8010924 <_free_r+0x90>
 801089a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801089e:	9001      	str	r0, [sp, #4]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	f1a1 0404 	sub.w	r4, r1, #4
 80108a6:	bfb8      	it	lt
 80108a8:	18e4      	addlt	r4, r4, r3
 80108aa:	f000 fc6f 	bl	801118c <__malloc_lock>
 80108ae:	4a1e      	ldr	r2, [pc, #120]	; (8010928 <_free_r+0x94>)
 80108b0:	9801      	ldr	r0, [sp, #4]
 80108b2:	6813      	ldr	r3, [r2, #0]
 80108b4:	b933      	cbnz	r3, 80108c4 <_free_r+0x30>
 80108b6:	6063      	str	r3, [r4, #4]
 80108b8:	6014      	str	r4, [r2, #0]
 80108ba:	b003      	add	sp, #12
 80108bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108c0:	f000 bc6a 	b.w	8011198 <__malloc_unlock>
 80108c4:	42a3      	cmp	r3, r4
 80108c6:	d908      	bls.n	80108da <_free_r+0x46>
 80108c8:	6825      	ldr	r5, [r4, #0]
 80108ca:	1961      	adds	r1, r4, r5
 80108cc:	428b      	cmp	r3, r1
 80108ce:	bf01      	itttt	eq
 80108d0:	6819      	ldreq	r1, [r3, #0]
 80108d2:	685b      	ldreq	r3, [r3, #4]
 80108d4:	1949      	addeq	r1, r1, r5
 80108d6:	6021      	streq	r1, [r4, #0]
 80108d8:	e7ed      	b.n	80108b6 <_free_r+0x22>
 80108da:	461a      	mov	r2, r3
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	b10b      	cbz	r3, 80108e4 <_free_r+0x50>
 80108e0:	42a3      	cmp	r3, r4
 80108e2:	d9fa      	bls.n	80108da <_free_r+0x46>
 80108e4:	6811      	ldr	r1, [r2, #0]
 80108e6:	1855      	adds	r5, r2, r1
 80108e8:	42a5      	cmp	r5, r4
 80108ea:	d10b      	bne.n	8010904 <_free_r+0x70>
 80108ec:	6824      	ldr	r4, [r4, #0]
 80108ee:	4421      	add	r1, r4
 80108f0:	1854      	adds	r4, r2, r1
 80108f2:	42a3      	cmp	r3, r4
 80108f4:	6011      	str	r1, [r2, #0]
 80108f6:	d1e0      	bne.n	80108ba <_free_r+0x26>
 80108f8:	681c      	ldr	r4, [r3, #0]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	6053      	str	r3, [r2, #4]
 80108fe:	4421      	add	r1, r4
 8010900:	6011      	str	r1, [r2, #0]
 8010902:	e7da      	b.n	80108ba <_free_r+0x26>
 8010904:	d902      	bls.n	801090c <_free_r+0x78>
 8010906:	230c      	movs	r3, #12
 8010908:	6003      	str	r3, [r0, #0]
 801090a:	e7d6      	b.n	80108ba <_free_r+0x26>
 801090c:	6825      	ldr	r5, [r4, #0]
 801090e:	1961      	adds	r1, r4, r5
 8010910:	428b      	cmp	r3, r1
 8010912:	bf04      	itt	eq
 8010914:	6819      	ldreq	r1, [r3, #0]
 8010916:	685b      	ldreq	r3, [r3, #4]
 8010918:	6063      	str	r3, [r4, #4]
 801091a:	bf04      	itt	eq
 801091c:	1949      	addeq	r1, r1, r5
 801091e:	6021      	streq	r1, [r4, #0]
 8010920:	6054      	str	r4, [r2, #4]
 8010922:	e7ca      	b.n	80108ba <_free_r+0x26>
 8010924:	b003      	add	sp, #12
 8010926:	bd30      	pop	{r4, r5, pc}
 8010928:	20002700 	.word	0x20002700

0801092c <sbrk_aligned>:
 801092c:	b570      	push	{r4, r5, r6, lr}
 801092e:	4e0e      	ldr	r6, [pc, #56]	; (8010968 <sbrk_aligned+0x3c>)
 8010930:	460c      	mov	r4, r1
 8010932:	6831      	ldr	r1, [r6, #0]
 8010934:	4605      	mov	r5, r0
 8010936:	b911      	cbnz	r1, 801093e <sbrk_aligned+0x12>
 8010938:	f000 fb96 	bl	8011068 <_sbrk_r>
 801093c:	6030      	str	r0, [r6, #0]
 801093e:	4621      	mov	r1, r4
 8010940:	4628      	mov	r0, r5
 8010942:	f000 fb91 	bl	8011068 <_sbrk_r>
 8010946:	1c43      	adds	r3, r0, #1
 8010948:	d00a      	beq.n	8010960 <sbrk_aligned+0x34>
 801094a:	1cc4      	adds	r4, r0, #3
 801094c:	f024 0403 	bic.w	r4, r4, #3
 8010950:	42a0      	cmp	r0, r4
 8010952:	d007      	beq.n	8010964 <sbrk_aligned+0x38>
 8010954:	1a21      	subs	r1, r4, r0
 8010956:	4628      	mov	r0, r5
 8010958:	f000 fb86 	bl	8011068 <_sbrk_r>
 801095c:	3001      	adds	r0, #1
 801095e:	d101      	bne.n	8010964 <sbrk_aligned+0x38>
 8010960:	f04f 34ff 	mov.w	r4, #4294967295
 8010964:	4620      	mov	r0, r4
 8010966:	bd70      	pop	{r4, r5, r6, pc}
 8010968:	20002704 	.word	0x20002704

0801096c <_malloc_r>:
 801096c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010970:	1ccd      	adds	r5, r1, #3
 8010972:	f025 0503 	bic.w	r5, r5, #3
 8010976:	3508      	adds	r5, #8
 8010978:	2d0c      	cmp	r5, #12
 801097a:	bf38      	it	cc
 801097c:	250c      	movcc	r5, #12
 801097e:	2d00      	cmp	r5, #0
 8010980:	4607      	mov	r7, r0
 8010982:	db01      	blt.n	8010988 <_malloc_r+0x1c>
 8010984:	42a9      	cmp	r1, r5
 8010986:	d905      	bls.n	8010994 <_malloc_r+0x28>
 8010988:	230c      	movs	r3, #12
 801098a:	603b      	str	r3, [r7, #0]
 801098c:	2600      	movs	r6, #0
 801098e:	4630      	mov	r0, r6
 8010990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010994:	4e2e      	ldr	r6, [pc, #184]	; (8010a50 <_malloc_r+0xe4>)
 8010996:	f000 fbf9 	bl	801118c <__malloc_lock>
 801099a:	6833      	ldr	r3, [r6, #0]
 801099c:	461c      	mov	r4, r3
 801099e:	bb34      	cbnz	r4, 80109ee <_malloc_r+0x82>
 80109a0:	4629      	mov	r1, r5
 80109a2:	4638      	mov	r0, r7
 80109a4:	f7ff ffc2 	bl	801092c <sbrk_aligned>
 80109a8:	1c43      	adds	r3, r0, #1
 80109aa:	4604      	mov	r4, r0
 80109ac:	d14d      	bne.n	8010a4a <_malloc_r+0xde>
 80109ae:	6834      	ldr	r4, [r6, #0]
 80109b0:	4626      	mov	r6, r4
 80109b2:	2e00      	cmp	r6, #0
 80109b4:	d140      	bne.n	8010a38 <_malloc_r+0xcc>
 80109b6:	6823      	ldr	r3, [r4, #0]
 80109b8:	4631      	mov	r1, r6
 80109ba:	4638      	mov	r0, r7
 80109bc:	eb04 0803 	add.w	r8, r4, r3
 80109c0:	f000 fb52 	bl	8011068 <_sbrk_r>
 80109c4:	4580      	cmp	r8, r0
 80109c6:	d13a      	bne.n	8010a3e <_malloc_r+0xd2>
 80109c8:	6821      	ldr	r1, [r4, #0]
 80109ca:	3503      	adds	r5, #3
 80109cc:	1a6d      	subs	r5, r5, r1
 80109ce:	f025 0503 	bic.w	r5, r5, #3
 80109d2:	3508      	adds	r5, #8
 80109d4:	2d0c      	cmp	r5, #12
 80109d6:	bf38      	it	cc
 80109d8:	250c      	movcc	r5, #12
 80109da:	4629      	mov	r1, r5
 80109dc:	4638      	mov	r0, r7
 80109de:	f7ff ffa5 	bl	801092c <sbrk_aligned>
 80109e2:	3001      	adds	r0, #1
 80109e4:	d02b      	beq.n	8010a3e <_malloc_r+0xd2>
 80109e6:	6823      	ldr	r3, [r4, #0]
 80109e8:	442b      	add	r3, r5
 80109ea:	6023      	str	r3, [r4, #0]
 80109ec:	e00e      	b.n	8010a0c <_malloc_r+0xa0>
 80109ee:	6822      	ldr	r2, [r4, #0]
 80109f0:	1b52      	subs	r2, r2, r5
 80109f2:	d41e      	bmi.n	8010a32 <_malloc_r+0xc6>
 80109f4:	2a0b      	cmp	r2, #11
 80109f6:	d916      	bls.n	8010a26 <_malloc_r+0xba>
 80109f8:	1961      	adds	r1, r4, r5
 80109fa:	42a3      	cmp	r3, r4
 80109fc:	6025      	str	r5, [r4, #0]
 80109fe:	bf18      	it	ne
 8010a00:	6059      	strne	r1, [r3, #4]
 8010a02:	6863      	ldr	r3, [r4, #4]
 8010a04:	bf08      	it	eq
 8010a06:	6031      	streq	r1, [r6, #0]
 8010a08:	5162      	str	r2, [r4, r5]
 8010a0a:	604b      	str	r3, [r1, #4]
 8010a0c:	4638      	mov	r0, r7
 8010a0e:	f104 060b 	add.w	r6, r4, #11
 8010a12:	f000 fbc1 	bl	8011198 <__malloc_unlock>
 8010a16:	f026 0607 	bic.w	r6, r6, #7
 8010a1a:	1d23      	adds	r3, r4, #4
 8010a1c:	1af2      	subs	r2, r6, r3
 8010a1e:	d0b6      	beq.n	801098e <_malloc_r+0x22>
 8010a20:	1b9b      	subs	r3, r3, r6
 8010a22:	50a3      	str	r3, [r4, r2]
 8010a24:	e7b3      	b.n	801098e <_malloc_r+0x22>
 8010a26:	6862      	ldr	r2, [r4, #4]
 8010a28:	42a3      	cmp	r3, r4
 8010a2a:	bf0c      	ite	eq
 8010a2c:	6032      	streq	r2, [r6, #0]
 8010a2e:	605a      	strne	r2, [r3, #4]
 8010a30:	e7ec      	b.n	8010a0c <_malloc_r+0xa0>
 8010a32:	4623      	mov	r3, r4
 8010a34:	6864      	ldr	r4, [r4, #4]
 8010a36:	e7b2      	b.n	801099e <_malloc_r+0x32>
 8010a38:	4634      	mov	r4, r6
 8010a3a:	6876      	ldr	r6, [r6, #4]
 8010a3c:	e7b9      	b.n	80109b2 <_malloc_r+0x46>
 8010a3e:	230c      	movs	r3, #12
 8010a40:	603b      	str	r3, [r7, #0]
 8010a42:	4638      	mov	r0, r7
 8010a44:	f000 fba8 	bl	8011198 <__malloc_unlock>
 8010a48:	e7a1      	b.n	801098e <_malloc_r+0x22>
 8010a4a:	6025      	str	r5, [r4, #0]
 8010a4c:	e7de      	b.n	8010a0c <_malloc_r+0xa0>
 8010a4e:	bf00      	nop
 8010a50:	20002700 	.word	0x20002700

08010a54 <__ssputs_r>:
 8010a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a58:	688e      	ldr	r6, [r1, #8]
 8010a5a:	429e      	cmp	r6, r3
 8010a5c:	4682      	mov	sl, r0
 8010a5e:	460c      	mov	r4, r1
 8010a60:	4690      	mov	r8, r2
 8010a62:	461f      	mov	r7, r3
 8010a64:	d838      	bhi.n	8010ad8 <__ssputs_r+0x84>
 8010a66:	898a      	ldrh	r2, [r1, #12]
 8010a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a6c:	d032      	beq.n	8010ad4 <__ssputs_r+0x80>
 8010a6e:	6825      	ldr	r5, [r4, #0]
 8010a70:	6909      	ldr	r1, [r1, #16]
 8010a72:	eba5 0901 	sub.w	r9, r5, r1
 8010a76:	6965      	ldr	r5, [r4, #20]
 8010a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a80:	3301      	adds	r3, #1
 8010a82:	444b      	add	r3, r9
 8010a84:	106d      	asrs	r5, r5, #1
 8010a86:	429d      	cmp	r5, r3
 8010a88:	bf38      	it	cc
 8010a8a:	461d      	movcc	r5, r3
 8010a8c:	0553      	lsls	r3, r2, #21
 8010a8e:	d531      	bpl.n	8010af4 <__ssputs_r+0xa0>
 8010a90:	4629      	mov	r1, r5
 8010a92:	f7ff ff6b 	bl	801096c <_malloc_r>
 8010a96:	4606      	mov	r6, r0
 8010a98:	b950      	cbnz	r0, 8010ab0 <__ssputs_r+0x5c>
 8010a9a:	230c      	movs	r3, #12
 8010a9c:	f8ca 3000 	str.w	r3, [sl]
 8010aa0:	89a3      	ldrh	r3, [r4, #12]
 8010aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010aa6:	81a3      	strh	r3, [r4, #12]
 8010aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ab0:	6921      	ldr	r1, [r4, #16]
 8010ab2:	464a      	mov	r2, r9
 8010ab4:	f7fd f984 	bl	800ddc0 <memcpy>
 8010ab8:	89a3      	ldrh	r3, [r4, #12]
 8010aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ac2:	81a3      	strh	r3, [r4, #12]
 8010ac4:	6126      	str	r6, [r4, #16]
 8010ac6:	6165      	str	r5, [r4, #20]
 8010ac8:	444e      	add	r6, r9
 8010aca:	eba5 0509 	sub.w	r5, r5, r9
 8010ace:	6026      	str	r6, [r4, #0]
 8010ad0:	60a5      	str	r5, [r4, #8]
 8010ad2:	463e      	mov	r6, r7
 8010ad4:	42be      	cmp	r6, r7
 8010ad6:	d900      	bls.n	8010ada <__ssputs_r+0x86>
 8010ad8:	463e      	mov	r6, r7
 8010ada:	6820      	ldr	r0, [r4, #0]
 8010adc:	4632      	mov	r2, r6
 8010ade:	4641      	mov	r1, r8
 8010ae0:	f000 fb3a 	bl	8011158 <memmove>
 8010ae4:	68a3      	ldr	r3, [r4, #8]
 8010ae6:	1b9b      	subs	r3, r3, r6
 8010ae8:	60a3      	str	r3, [r4, #8]
 8010aea:	6823      	ldr	r3, [r4, #0]
 8010aec:	4433      	add	r3, r6
 8010aee:	6023      	str	r3, [r4, #0]
 8010af0:	2000      	movs	r0, #0
 8010af2:	e7db      	b.n	8010aac <__ssputs_r+0x58>
 8010af4:	462a      	mov	r2, r5
 8010af6:	f000 fb55 	bl	80111a4 <_realloc_r>
 8010afa:	4606      	mov	r6, r0
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d1e1      	bne.n	8010ac4 <__ssputs_r+0x70>
 8010b00:	6921      	ldr	r1, [r4, #16]
 8010b02:	4650      	mov	r0, sl
 8010b04:	f7ff fec6 	bl	8010894 <_free_r>
 8010b08:	e7c7      	b.n	8010a9a <__ssputs_r+0x46>
	...

08010b0c <_svfiprintf_r>:
 8010b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b10:	4698      	mov	r8, r3
 8010b12:	898b      	ldrh	r3, [r1, #12]
 8010b14:	061b      	lsls	r3, r3, #24
 8010b16:	b09d      	sub	sp, #116	; 0x74
 8010b18:	4607      	mov	r7, r0
 8010b1a:	460d      	mov	r5, r1
 8010b1c:	4614      	mov	r4, r2
 8010b1e:	d50e      	bpl.n	8010b3e <_svfiprintf_r+0x32>
 8010b20:	690b      	ldr	r3, [r1, #16]
 8010b22:	b963      	cbnz	r3, 8010b3e <_svfiprintf_r+0x32>
 8010b24:	2140      	movs	r1, #64	; 0x40
 8010b26:	f7ff ff21 	bl	801096c <_malloc_r>
 8010b2a:	6028      	str	r0, [r5, #0]
 8010b2c:	6128      	str	r0, [r5, #16]
 8010b2e:	b920      	cbnz	r0, 8010b3a <_svfiprintf_r+0x2e>
 8010b30:	230c      	movs	r3, #12
 8010b32:	603b      	str	r3, [r7, #0]
 8010b34:	f04f 30ff 	mov.w	r0, #4294967295
 8010b38:	e0d1      	b.n	8010cde <_svfiprintf_r+0x1d2>
 8010b3a:	2340      	movs	r3, #64	; 0x40
 8010b3c:	616b      	str	r3, [r5, #20]
 8010b3e:	2300      	movs	r3, #0
 8010b40:	9309      	str	r3, [sp, #36]	; 0x24
 8010b42:	2320      	movs	r3, #32
 8010b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b4c:	2330      	movs	r3, #48	; 0x30
 8010b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cf8 <_svfiprintf_r+0x1ec>
 8010b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b56:	f04f 0901 	mov.w	r9, #1
 8010b5a:	4623      	mov	r3, r4
 8010b5c:	469a      	mov	sl, r3
 8010b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b62:	b10a      	cbz	r2, 8010b68 <_svfiprintf_r+0x5c>
 8010b64:	2a25      	cmp	r2, #37	; 0x25
 8010b66:	d1f9      	bne.n	8010b5c <_svfiprintf_r+0x50>
 8010b68:	ebba 0b04 	subs.w	fp, sl, r4
 8010b6c:	d00b      	beq.n	8010b86 <_svfiprintf_r+0x7a>
 8010b6e:	465b      	mov	r3, fp
 8010b70:	4622      	mov	r2, r4
 8010b72:	4629      	mov	r1, r5
 8010b74:	4638      	mov	r0, r7
 8010b76:	f7ff ff6d 	bl	8010a54 <__ssputs_r>
 8010b7a:	3001      	adds	r0, #1
 8010b7c:	f000 80aa 	beq.w	8010cd4 <_svfiprintf_r+0x1c8>
 8010b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b82:	445a      	add	r2, fp
 8010b84:	9209      	str	r2, [sp, #36]	; 0x24
 8010b86:	f89a 3000 	ldrb.w	r3, [sl]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	f000 80a2 	beq.w	8010cd4 <_svfiprintf_r+0x1c8>
 8010b90:	2300      	movs	r3, #0
 8010b92:	f04f 32ff 	mov.w	r2, #4294967295
 8010b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b9a:	f10a 0a01 	add.w	sl, sl, #1
 8010b9e:	9304      	str	r3, [sp, #16]
 8010ba0:	9307      	str	r3, [sp, #28]
 8010ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8010ba8:	4654      	mov	r4, sl
 8010baa:	2205      	movs	r2, #5
 8010bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bb0:	4851      	ldr	r0, [pc, #324]	; (8010cf8 <_svfiprintf_r+0x1ec>)
 8010bb2:	f7ef fb15 	bl	80001e0 <memchr>
 8010bb6:	9a04      	ldr	r2, [sp, #16]
 8010bb8:	b9d8      	cbnz	r0, 8010bf2 <_svfiprintf_r+0xe6>
 8010bba:	06d0      	lsls	r0, r2, #27
 8010bbc:	bf44      	itt	mi
 8010bbe:	2320      	movmi	r3, #32
 8010bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bc4:	0711      	lsls	r1, r2, #28
 8010bc6:	bf44      	itt	mi
 8010bc8:	232b      	movmi	r3, #43	; 0x2b
 8010bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bce:	f89a 3000 	ldrb.w	r3, [sl]
 8010bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8010bd4:	d015      	beq.n	8010c02 <_svfiprintf_r+0xf6>
 8010bd6:	9a07      	ldr	r2, [sp, #28]
 8010bd8:	4654      	mov	r4, sl
 8010bda:	2000      	movs	r0, #0
 8010bdc:	f04f 0c0a 	mov.w	ip, #10
 8010be0:	4621      	mov	r1, r4
 8010be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010be6:	3b30      	subs	r3, #48	; 0x30
 8010be8:	2b09      	cmp	r3, #9
 8010bea:	d94e      	bls.n	8010c8a <_svfiprintf_r+0x17e>
 8010bec:	b1b0      	cbz	r0, 8010c1c <_svfiprintf_r+0x110>
 8010bee:	9207      	str	r2, [sp, #28]
 8010bf0:	e014      	b.n	8010c1c <_svfiprintf_r+0x110>
 8010bf2:	eba0 0308 	sub.w	r3, r0, r8
 8010bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	9304      	str	r3, [sp, #16]
 8010bfe:	46a2      	mov	sl, r4
 8010c00:	e7d2      	b.n	8010ba8 <_svfiprintf_r+0x9c>
 8010c02:	9b03      	ldr	r3, [sp, #12]
 8010c04:	1d19      	adds	r1, r3, #4
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	9103      	str	r1, [sp, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	bfbb      	ittet	lt
 8010c0e:	425b      	neglt	r3, r3
 8010c10:	f042 0202 	orrlt.w	r2, r2, #2
 8010c14:	9307      	strge	r3, [sp, #28]
 8010c16:	9307      	strlt	r3, [sp, #28]
 8010c18:	bfb8      	it	lt
 8010c1a:	9204      	strlt	r2, [sp, #16]
 8010c1c:	7823      	ldrb	r3, [r4, #0]
 8010c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8010c20:	d10c      	bne.n	8010c3c <_svfiprintf_r+0x130>
 8010c22:	7863      	ldrb	r3, [r4, #1]
 8010c24:	2b2a      	cmp	r3, #42	; 0x2a
 8010c26:	d135      	bne.n	8010c94 <_svfiprintf_r+0x188>
 8010c28:	9b03      	ldr	r3, [sp, #12]
 8010c2a:	1d1a      	adds	r2, r3, #4
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	9203      	str	r2, [sp, #12]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	bfb8      	it	lt
 8010c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c38:	3402      	adds	r4, #2
 8010c3a:	9305      	str	r3, [sp, #20]
 8010c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010d08 <_svfiprintf_r+0x1fc>
 8010c40:	7821      	ldrb	r1, [r4, #0]
 8010c42:	2203      	movs	r2, #3
 8010c44:	4650      	mov	r0, sl
 8010c46:	f7ef facb 	bl	80001e0 <memchr>
 8010c4a:	b140      	cbz	r0, 8010c5e <_svfiprintf_r+0x152>
 8010c4c:	2340      	movs	r3, #64	; 0x40
 8010c4e:	eba0 000a 	sub.w	r0, r0, sl
 8010c52:	fa03 f000 	lsl.w	r0, r3, r0
 8010c56:	9b04      	ldr	r3, [sp, #16]
 8010c58:	4303      	orrs	r3, r0
 8010c5a:	3401      	adds	r4, #1
 8010c5c:	9304      	str	r3, [sp, #16]
 8010c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c62:	4826      	ldr	r0, [pc, #152]	; (8010cfc <_svfiprintf_r+0x1f0>)
 8010c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c68:	2206      	movs	r2, #6
 8010c6a:	f7ef fab9 	bl	80001e0 <memchr>
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	d038      	beq.n	8010ce4 <_svfiprintf_r+0x1d8>
 8010c72:	4b23      	ldr	r3, [pc, #140]	; (8010d00 <_svfiprintf_r+0x1f4>)
 8010c74:	bb1b      	cbnz	r3, 8010cbe <_svfiprintf_r+0x1b2>
 8010c76:	9b03      	ldr	r3, [sp, #12]
 8010c78:	3307      	adds	r3, #7
 8010c7a:	f023 0307 	bic.w	r3, r3, #7
 8010c7e:	3308      	adds	r3, #8
 8010c80:	9303      	str	r3, [sp, #12]
 8010c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c84:	4433      	add	r3, r6
 8010c86:	9309      	str	r3, [sp, #36]	; 0x24
 8010c88:	e767      	b.n	8010b5a <_svfiprintf_r+0x4e>
 8010c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c8e:	460c      	mov	r4, r1
 8010c90:	2001      	movs	r0, #1
 8010c92:	e7a5      	b.n	8010be0 <_svfiprintf_r+0xd4>
 8010c94:	2300      	movs	r3, #0
 8010c96:	3401      	adds	r4, #1
 8010c98:	9305      	str	r3, [sp, #20]
 8010c9a:	4619      	mov	r1, r3
 8010c9c:	f04f 0c0a 	mov.w	ip, #10
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ca6:	3a30      	subs	r2, #48	; 0x30
 8010ca8:	2a09      	cmp	r2, #9
 8010caa:	d903      	bls.n	8010cb4 <_svfiprintf_r+0x1a8>
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d0c5      	beq.n	8010c3c <_svfiprintf_r+0x130>
 8010cb0:	9105      	str	r1, [sp, #20]
 8010cb2:	e7c3      	b.n	8010c3c <_svfiprintf_r+0x130>
 8010cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cb8:	4604      	mov	r4, r0
 8010cba:	2301      	movs	r3, #1
 8010cbc:	e7f0      	b.n	8010ca0 <_svfiprintf_r+0x194>
 8010cbe:	ab03      	add	r3, sp, #12
 8010cc0:	9300      	str	r3, [sp, #0]
 8010cc2:	462a      	mov	r2, r5
 8010cc4:	4b0f      	ldr	r3, [pc, #60]	; (8010d04 <_svfiprintf_r+0x1f8>)
 8010cc6:	a904      	add	r1, sp, #16
 8010cc8:	4638      	mov	r0, r7
 8010cca:	f3af 8000 	nop.w
 8010cce:	1c42      	adds	r2, r0, #1
 8010cd0:	4606      	mov	r6, r0
 8010cd2:	d1d6      	bne.n	8010c82 <_svfiprintf_r+0x176>
 8010cd4:	89ab      	ldrh	r3, [r5, #12]
 8010cd6:	065b      	lsls	r3, r3, #25
 8010cd8:	f53f af2c 	bmi.w	8010b34 <_svfiprintf_r+0x28>
 8010cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cde:	b01d      	add	sp, #116	; 0x74
 8010ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce4:	ab03      	add	r3, sp, #12
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	462a      	mov	r2, r5
 8010cea:	4b06      	ldr	r3, [pc, #24]	; (8010d04 <_svfiprintf_r+0x1f8>)
 8010cec:	a904      	add	r1, sp, #16
 8010cee:	4638      	mov	r0, r7
 8010cf0:	f000 f87a 	bl	8010de8 <_printf_i>
 8010cf4:	e7eb      	b.n	8010cce <_svfiprintf_r+0x1c2>
 8010cf6:	bf00      	nop
 8010cf8:	08011af4 	.word	0x08011af4
 8010cfc:	08011afe 	.word	0x08011afe
 8010d00:	00000000 	.word	0x00000000
 8010d04:	08010a55 	.word	0x08010a55
 8010d08:	08011afa 	.word	0x08011afa

08010d0c <_printf_common>:
 8010d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d10:	4616      	mov	r6, r2
 8010d12:	4699      	mov	r9, r3
 8010d14:	688a      	ldr	r2, [r1, #8]
 8010d16:	690b      	ldr	r3, [r1, #16]
 8010d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	bfb8      	it	lt
 8010d20:	4613      	movlt	r3, r2
 8010d22:	6033      	str	r3, [r6, #0]
 8010d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d28:	4607      	mov	r7, r0
 8010d2a:	460c      	mov	r4, r1
 8010d2c:	b10a      	cbz	r2, 8010d32 <_printf_common+0x26>
 8010d2e:	3301      	adds	r3, #1
 8010d30:	6033      	str	r3, [r6, #0]
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	0699      	lsls	r1, r3, #26
 8010d36:	bf42      	ittt	mi
 8010d38:	6833      	ldrmi	r3, [r6, #0]
 8010d3a:	3302      	addmi	r3, #2
 8010d3c:	6033      	strmi	r3, [r6, #0]
 8010d3e:	6825      	ldr	r5, [r4, #0]
 8010d40:	f015 0506 	ands.w	r5, r5, #6
 8010d44:	d106      	bne.n	8010d54 <_printf_common+0x48>
 8010d46:	f104 0a19 	add.w	sl, r4, #25
 8010d4a:	68e3      	ldr	r3, [r4, #12]
 8010d4c:	6832      	ldr	r2, [r6, #0]
 8010d4e:	1a9b      	subs	r3, r3, r2
 8010d50:	42ab      	cmp	r3, r5
 8010d52:	dc26      	bgt.n	8010da2 <_printf_common+0x96>
 8010d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d58:	1e13      	subs	r3, r2, #0
 8010d5a:	6822      	ldr	r2, [r4, #0]
 8010d5c:	bf18      	it	ne
 8010d5e:	2301      	movne	r3, #1
 8010d60:	0692      	lsls	r2, r2, #26
 8010d62:	d42b      	bmi.n	8010dbc <_printf_common+0xb0>
 8010d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d68:	4649      	mov	r1, r9
 8010d6a:	4638      	mov	r0, r7
 8010d6c:	47c0      	blx	r8
 8010d6e:	3001      	adds	r0, #1
 8010d70:	d01e      	beq.n	8010db0 <_printf_common+0xa4>
 8010d72:	6823      	ldr	r3, [r4, #0]
 8010d74:	68e5      	ldr	r5, [r4, #12]
 8010d76:	6832      	ldr	r2, [r6, #0]
 8010d78:	f003 0306 	and.w	r3, r3, #6
 8010d7c:	2b04      	cmp	r3, #4
 8010d7e:	bf08      	it	eq
 8010d80:	1aad      	subeq	r5, r5, r2
 8010d82:	68a3      	ldr	r3, [r4, #8]
 8010d84:	6922      	ldr	r2, [r4, #16]
 8010d86:	bf0c      	ite	eq
 8010d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d8c:	2500      	movne	r5, #0
 8010d8e:	4293      	cmp	r3, r2
 8010d90:	bfc4      	itt	gt
 8010d92:	1a9b      	subgt	r3, r3, r2
 8010d94:	18ed      	addgt	r5, r5, r3
 8010d96:	2600      	movs	r6, #0
 8010d98:	341a      	adds	r4, #26
 8010d9a:	42b5      	cmp	r5, r6
 8010d9c:	d11a      	bne.n	8010dd4 <_printf_common+0xc8>
 8010d9e:	2000      	movs	r0, #0
 8010da0:	e008      	b.n	8010db4 <_printf_common+0xa8>
 8010da2:	2301      	movs	r3, #1
 8010da4:	4652      	mov	r2, sl
 8010da6:	4649      	mov	r1, r9
 8010da8:	4638      	mov	r0, r7
 8010daa:	47c0      	blx	r8
 8010dac:	3001      	adds	r0, #1
 8010dae:	d103      	bne.n	8010db8 <_printf_common+0xac>
 8010db0:	f04f 30ff 	mov.w	r0, #4294967295
 8010db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010db8:	3501      	adds	r5, #1
 8010dba:	e7c6      	b.n	8010d4a <_printf_common+0x3e>
 8010dbc:	18e1      	adds	r1, r4, r3
 8010dbe:	1c5a      	adds	r2, r3, #1
 8010dc0:	2030      	movs	r0, #48	; 0x30
 8010dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010dc6:	4422      	add	r2, r4
 8010dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010dd0:	3302      	adds	r3, #2
 8010dd2:	e7c7      	b.n	8010d64 <_printf_common+0x58>
 8010dd4:	2301      	movs	r3, #1
 8010dd6:	4622      	mov	r2, r4
 8010dd8:	4649      	mov	r1, r9
 8010dda:	4638      	mov	r0, r7
 8010ddc:	47c0      	blx	r8
 8010dde:	3001      	adds	r0, #1
 8010de0:	d0e6      	beq.n	8010db0 <_printf_common+0xa4>
 8010de2:	3601      	adds	r6, #1
 8010de4:	e7d9      	b.n	8010d9a <_printf_common+0x8e>
	...

08010de8 <_printf_i>:
 8010de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010dec:	7e0f      	ldrb	r7, [r1, #24]
 8010dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010df0:	2f78      	cmp	r7, #120	; 0x78
 8010df2:	4691      	mov	r9, r2
 8010df4:	4680      	mov	r8, r0
 8010df6:	460c      	mov	r4, r1
 8010df8:	469a      	mov	sl, r3
 8010dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010dfe:	d807      	bhi.n	8010e10 <_printf_i+0x28>
 8010e00:	2f62      	cmp	r7, #98	; 0x62
 8010e02:	d80a      	bhi.n	8010e1a <_printf_i+0x32>
 8010e04:	2f00      	cmp	r7, #0
 8010e06:	f000 80d8 	beq.w	8010fba <_printf_i+0x1d2>
 8010e0a:	2f58      	cmp	r7, #88	; 0x58
 8010e0c:	f000 80a3 	beq.w	8010f56 <_printf_i+0x16e>
 8010e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e18:	e03a      	b.n	8010e90 <_printf_i+0xa8>
 8010e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e1e:	2b15      	cmp	r3, #21
 8010e20:	d8f6      	bhi.n	8010e10 <_printf_i+0x28>
 8010e22:	a101      	add	r1, pc, #4	; (adr r1, 8010e28 <_printf_i+0x40>)
 8010e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e28:	08010e81 	.word	0x08010e81
 8010e2c:	08010e95 	.word	0x08010e95
 8010e30:	08010e11 	.word	0x08010e11
 8010e34:	08010e11 	.word	0x08010e11
 8010e38:	08010e11 	.word	0x08010e11
 8010e3c:	08010e11 	.word	0x08010e11
 8010e40:	08010e95 	.word	0x08010e95
 8010e44:	08010e11 	.word	0x08010e11
 8010e48:	08010e11 	.word	0x08010e11
 8010e4c:	08010e11 	.word	0x08010e11
 8010e50:	08010e11 	.word	0x08010e11
 8010e54:	08010fa1 	.word	0x08010fa1
 8010e58:	08010ec5 	.word	0x08010ec5
 8010e5c:	08010f83 	.word	0x08010f83
 8010e60:	08010e11 	.word	0x08010e11
 8010e64:	08010e11 	.word	0x08010e11
 8010e68:	08010fc3 	.word	0x08010fc3
 8010e6c:	08010e11 	.word	0x08010e11
 8010e70:	08010ec5 	.word	0x08010ec5
 8010e74:	08010e11 	.word	0x08010e11
 8010e78:	08010e11 	.word	0x08010e11
 8010e7c:	08010f8b 	.word	0x08010f8b
 8010e80:	682b      	ldr	r3, [r5, #0]
 8010e82:	1d1a      	adds	r2, r3, #4
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	602a      	str	r2, [r5, #0]
 8010e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e90:	2301      	movs	r3, #1
 8010e92:	e0a3      	b.n	8010fdc <_printf_i+0x1f4>
 8010e94:	6820      	ldr	r0, [r4, #0]
 8010e96:	6829      	ldr	r1, [r5, #0]
 8010e98:	0606      	lsls	r6, r0, #24
 8010e9a:	f101 0304 	add.w	r3, r1, #4
 8010e9e:	d50a      	bpl.n	8010eb6 <_printf_i+0xce>
 8010ea0:	680e      	ldr	r6, [r1, #0]
 8010ea2:	602b      	str	r3, [r5, #0]
 8010ea4:	2e00      	cmp	r6, #0
 8010ea6:	da03      	bge.n	8010eb0 <_printf_i+0xc8>
 8010ea8:	232d      	movs	r3, #45	; 0x2d
 8010eaa:	4276      	negs	r6, r6
 8010eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010eb0:	485e      	ldr	r0, [pc, #376]	; (801102c <_printf_i+0x244>)
 8010eb2:	230a      	movs	r3, #10
 8010eb4:	e019      	b.n	8010eea <_printf_i+0x102>
 8010eb6:	680e      	ldr	r6, [r1, #0]
 8010eb8:	602b      	str	r3, [r5, #0]
 8010eba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ebe:	bf18      	it	ne
 8010ec0:	b236      	sxthne	r6, r6
 8010ec2:	e7ef      	b.n	8010ea4 <_printf_i+0xbc>
 8010ec4:	682b      	ldr	r3, [r5, #0]
 8010ec6:	6820      	ldr	r0, [r4, #0]
 8010ec8:	1d19      	adds	r1, r3, #4
 8010eca:	6029      	str	r1, [r5, #0]
 8010ecc:	0601      	lsls	r1, r0, #24
 8010ece:	d501      	bpl.n	8010ed4 <_printf_i+0xec>
 8010ed0:	681e      	ldr	r6, [r3, #0]
 8010ed2:	e002      	b.n	8010eda <_printf_i+0xf2>
 8010ed4:	0646      	lsls	r6, r0, #25
 8010ed6:	d5fb      	bpl.n	8010ed0 <_printf_i+0xe8>
 8010ed8:	881e      	ldrh	r6, [r3, #0]
 8010eda:	4854      	ldr	r0, [pc, #336]	; (801102c <_printf_i+0x244>)
 8010edc:	2f6f      	cmp	r7, #111	; 0x6f
 8010ede:	bf0c      	ite	eq
 8010ee0:	2308      	moveq	r3, #8
 8010ee2:	230a      	movne	r3, #10
 8010ee4:	2100      	movs	r1, #0
 8010ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010eea:	6865      	ldr	r5, [r4, #4]
 8010eec:	60a5      	str	r5, [r4, #8]
 8010eee:	2d00      	cmp	r5, #0
 8010ef0:	bfa2      	ittt	ge
 8010ef2:	6821      	ldrge	r1, [r4, #0]
 8010ef4:	f021 0104 	bicge.w	r1, r1, #4
 8010ef8:	6021      	strge	r1, [r4, #0]
 8010efa:	b90e      	cbnz	r6, 8010f00 <_printf_i+0x118>
 8010efc:	2d00      	cmp	r5, #0
 8010efe:	d04d      	beq.n	8010f9c <_printf_i+0x1b4>
 8010f00:	4615      	mov	r5, r2
 8010f02:	fbb6 f1f3 	udiv	r1, r6, r3
 8010f06:	fb03 6711 	mls	r7, r3, r1, r6
 8010f0a:	5dc7      	ldrb	r7, [r0, r7]
 8010f0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f10:	4637      	mov	r7, r6
 8010f12:	42bb      	cmp	r3, r7
 8010f14:	460e      	mov	r6, r1
 8010f16:	d9f4      	bls.n	8010f02 <_printf_i+0x11a>
 8010f18:	2b08      	cmp	r3, #8
 8010f1a:	d10b      	bne.n	8010f34 <_printf_i+0x14c>
 8010f1c:	6823      	ldr	r3, [r4, #0]
 8010f1e:	07de      	lsls	r6, r3, #31
 8010f20:	d508      	bpl.n	8010f34 <_printf_i+0x14c>
 8010f22:	6923      	ldr	r3, [r4, #16]
 8010f24:	6861      	ldr	r1, [r4, #4]
 8010f26:	4299      	cmp	r1, r3
 8010f28:	bfde      	ittt	le
 8010f2a:	2330      	movle	r3, #48	; 0x30
 8010f2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f34:	1b52      	subs	r2, r2, r5
 8010f36:	6122      	str	r2, [r4, #16]
 8010f38:	f8cd a000 	str.w	sl, [sp]
 8010f3c:	464b      	mov	r3, r9
 8010f3e:	aa03      	add	r2, sp, #12
 8010f40:	4621      	mov	r1, r4
 8010f42:	4640      	mov	r0, r8
 8010f44:	f7ff fee2 	bl	8010d0c <_printf_common>
 8010f48:	3001      	adds	r0, #1
 8010f4a:	d14c      	bne.n	8010fe6 <_printf_i+0x1fe>
 8010f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010f50:	b004      	add	sp, #16
 8010f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f56:	4835      	ldr	r0, [pc, #212]	; (801102c <_printf_i+0x244>)
 8010f58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010f5c:	6829      	ldr	r1, [r5, #0]
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f64:	6029      	str	r1, [r5, #0]
 8010f66:	061d      	lsls	r5, r3, #24
 8010f68:	d514      	bpl.n	8010f94 <_printf_i+0x1ac>
 8010f6a:	07df      	lsls	r7, r3, #31
 8010f6c:	bf44      	itt	mi
 8010f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8010f72:	6023      	strmi	r3, [r4, #0]
 8010f74:	b91e      	cbnz	r6, 8010f7e <_printf_i+0x196>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	f023 0320 	bic.w	r3, r3, #32
 8010f7c:	6023      	str	r3, [r4, #0]
 8010f7e:	2310      	movs	r3, #16
 8010f80:	e7b0      	b.n	8010ee4 <_printf_i+0xfc>
 8010f82:	6823      	ldr	r3, [r4, #0]
 8010f84:	f043 0320 	orr.w	r3, r3, #32
 8010f88:	6023      	str	r3, [r4, #0]
 8010f8a:	2378      	movs	r3, #120	; 0x78
 8010f8c:	4828      	ldr	r0, [pc, #160]	; (8011030 <_printf_i+0x248>)
 8010f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f92:	e7e3      	b.n	8010f5c <_printf_i+0x174>
 8010f94:	0659      	lsls	r1, r3, #25
 8010f96:	bf48      	it	mi
 8010f98:	b2b6      	uxthmi	r6, r6
 8010f9a:	e7e6      	b.n	8010f6a <_printf_i+0x182>
 8010f9c:	4615      	mov	r5, r2
 8010f9e:	e7bb      	b.n	8010f18 <_printf_i+0x130>
 8010fa0:	682b      	ldr	r3, [r5, #0]
 8010fa2:	6826      	ldr	r6, [r4, #0]
 8010fa4:	6961      	ldr	r1, [r4, #20]
 8010fa6:	1d18      	adds	r0, r3, #4
 8010fa8:	6028      	str	r0, [r5, #0]
 8010faa:	0635      	lsls	r5, r6, #24
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	d501      	bpl.n	8010fb4 <_printf_i+0x1cc>
 8010fb0:	6019      	str	r1, [r3, #0]
 8010fb2:	e002      	b.n	8010fba <_printf_i+0x1d2>
 8010fb4:	0670      	lsls	r0, r6, #25
 8010fb6:	d5fb      	bpl.n	8010fb0 <_printf_i+0x1c8>
 8010fb8:	8019      	strh	r1, [r3, #0]
 8010fba:	2300      	movs	r3, #0
 8010fbc:	6123      	str	r3, [r4, #16]
 8010fbe:	4615      	mov	r5, r2
 8010fc0:	e7ba      	b.n	8010f38 <_printf_i+0x150>
 8010fc2:	682b      	ldr	r3, [r5, #0]
 8010fc4:	1d1a      	adds	r2, r3, #4
 8010fc6:	602a      	str	r2, [r5, #0]
 8010fc8:	681d      	ldr	r5, [r3, #0]
 8010fca:	6862      	ldr	r2, [r4, #4]
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f7ef f906 	bl	80001e0 <memchr>
 8010fd4:	b108      	cbz	r0, 8010fda <_printf_i+0x1f2>
 8010fd6:	1b40      	subs	r0, r0, r5
 8010fd8:	6060      	str	r0, [r4, #4]
 8010fda:	6863      	ldr	r3, [r4, #4]
 8010fdc:	6123      	str	r3, [r4, #16]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fe4:	e7a8      	b.n	8010f38 <_printf_i+0x150>
 8010fe6:	6923      	ldr	r3, [r4, #16]
 8010fe8:	462a      	mov	r2, r5
 8010fea:	4649      	mov	r1, r9
 8010fec:	4640      	mov	r0, r8
 8010fee:	47d0      	blx	sl
 8010ff0:	3001      	adds	r0, #1
 8010ff2:	d0ab      	beq.n	8010f4c <_printf_i+0x164>
 8010ff4:	6823      	ldr	r3, [r4, #0]
 8010ff6:	079b      	lsls	r3, r3, #30
 8010ff8:	d413      	bmi.n	8011022 <_printf_i+0x23a>
 8010ffa:	68e0      	ldr	r0, [r4, #12]
 8010ffc:	9b03      	ldr	r3, [sp, #12]
 8010ffe:	4298      	cmp	r0, r3
 8011000:	bfb8      	it	lt
 8011002:	4618      	movlt	r0, r3
 8011004:	e7a4      	b.n	8010f50 <_printf_i+0x168>
 8011006:	2301      	movs	r3, #1
 8011008:	4632      	mov	r2, r6
 801100a:	4649      	mov	r1, r9
 801100c:	4640      	mov	r0, r8
 801100e:	47d0      	blx	sl
 8011010:	3001      	adds	r0, #1
 8011012:	d09b      	beq.n	8010f4c <_printf_i+0x164>
 8011014:	3501      	adds	r5, #1
 8011016:	68e3      	ldr	r3, [r4, #12]
 8011018:	9903      	ldr	r1, [sp, #12]
 801101a:	1a5b      	subs	r3, r3, r1
 801101c:	42ab      	cmp	r3, r5
 801101e:	dcf2      	bgt.n	8011006 <_printf_i+0x21e>
 8011020:	e7eb      	b.n	8010ffa <_printf_i+0x212>
 8011022:	2500      	movs	r5, #0
 8011024:	f104 0619 	add.w	r6, r4, #25
 8011028:	e7f5      	b.n	8011016 <_printf_i+0x22e>
 801102a:	bf00      	nop
 801102c:	08011b05 	.word	0x08011b05
 8011030:	08011b16 	.word	0x08011b16

08011034 <_read_r>:
 8011034:	b538      	push	{r3, r4, r5, lr}
 8011036:	4d07      	ldr	r5, [pc, #28]	; (8011054 <_read_r+0x20>)
 8011038:	4604      	mov	r4, r0
 801103a:	4608      	mov	r0, r1
 801103c:	4611      	mov	r1, r2
 801103e:	2200      	movs	r2, #0
 8011040:	602a      	str	r2, [r5, #0]
 8011042:	461a      	mov	r2, r3
 8011044:	f7f2 f886 	bl	8003154 <_read>
 8011048:	1c43      	adds	r3, r0, #1
 801104a:	d102      	bne.n	8011052 <_read_r+0x1e>
 801104c:	682b      	ldr	r3, [r5, #0]
 801104e:	b103      	cbz	r3, 8011052 <_read_r+0x1e>
 8011050:	6023      	str	r3, [r4, #0]
 8011052:	bd38      	pop	{r3, r4, r5, pc}
 8011054:	20002708 	.word	0x20002708

08011058 <nan>:
 8011058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011060 <nan+0x8>
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	00000000 	.word	0x00000000
 8011064:	7ff80000 	.word	0x7ff80000

08011068 <_sbrk_r>:
 8011068:	b538      	push	{r3, r4, r5, lr}
 801106a:	4d06      	ldr	r5, [pc, #24]	; (8011084 <_sbrk_r+0x1c>)
 801106c:	2300      	movs	r3, #0
 801106e:	4604      	mov	r4, r0
 8011070:	4608      	mov	r0, r1
 8011072:	602b      	str	r3, [r5, #0]
 8011074:	f7f2 f8dc 	bl	8003230 <_sbrk>
 8011078:	1c43      	adds	r3, r0, #1
 801107a:	d102      	bne.n	8011082 <_sbrk_r+0x1a>
 801107c:	682b      	ldr	r3, [r5, #0]
 801107e:	b103      	cbz	r3, 8011082 <_sbrk_r+0x1a>
 8011080:	6023      	str	r3, [r4, #0]
 8011082:	bd38      	pop	{r3, r4, r5, pc}
 8011084:	20002708 	.word	0x20002708

08011088 <__ascii_wctomb>:
 8011088:	b149      	cbz	r1, 801109e <__ascii_wctomb+0x16>
 801108a:	2aff      	cmp	r2, #255	; 0xff
 801108c:	bf85      	ittet	hi
 801108e:	238a      	movhi	r3, #138	; 0x8a
 8011090:	6003      	strhi	r3, [r0, #0]
 8011092:	700a      	strbls	r2, [r1, #0]
 8011094:	f04f 30ff 	movhi.w	r0, #4294967295
 8011098:	bf98      	it	ls
 801109a:	2001      	movls	r0, #1
 801109c:	4770      	bx	lr
 801109e:	4608      	mov	r0, r1
 80110a0:	4770      	bx	lr
	...

080110a4 <__assert_func>:
 80110a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110a6:	4614      	mov	r4, r2
 80110a8:	461a      	mov	r2, r3
 80110aa:	4b09      	ldr	r3, [pc, #36]	; (80110d0 <__assert_func+0x2c>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	4605      	mov	r5, r0
 80110b0:	68d8      	ldr	r0, [r3, #12]
 80110b2:	b14c      	cbz	r4, 80110c8 <__assert_func+0x24>
 80110b4:	4b07      	ldr	r3, [pc, #28]	; (80110d4 <__assert_func+0x30>)
 80110b6:	9100      	str	r1, [sp, #0]
 80110b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80110bc:	4906      	ldr	r1, [pc, #24]	; (80110d8 <__assert_func+0x34>)
 80110be:	462b      	mov	r3, r5
 80110c0:	f000 f80e 	bl	80110e0 <fiprintf>
 80110c4:	f000 f9f6 	bl	80114b4 <abort>
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <__assert_func+0x38>)
 80110ca:	461c      	mov	r4, r3
 80110cc:	e7f3      	b.n	80110b6 <__assert_func+0x12>
 80110ce:	bf00      	nop
 80110d0:	20000010 	.word	0x20000010
 80110d4:	08011b27 	.word	0x08011b27
 80110d8:	08011b34 	.word	0x08011b34
 80110dc:	08011b62 	.word	0x08011b62

080110e0 <fiprintf>:
 80110e0:	b40e      	push	{r1, r2, r3}
 80110e2:	b503      	push	{r0, r1, lr}
 80110e4:	4601      	mov	r1, r0
 80110e6:	ab03      	add	r3, sp, #12
 80110e8:	4805      	ldr	r0, [pc, #20]	; (8011100 <fiprintf+0x20>)
 80110ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80110ee:	6800      	ldr	r0, [r0, #0]
 80110f0:	9301      	str	r3, [sp, #4]
 80110f2:	f000 f8af 	bl	8011254 <_vfiprintf_r>
 80110f6:	b002      	add	sp, #8
 80110f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80110fc:	b003      	add	sp, #12
 80110fe:	4770      	bx	lr
 8011100:	20000010 	.word	0x20000010

08011104 <_fstat_r>:
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	4d07      	ldr	r5, [pc, #28]	; (8011124 <_fstat_r+0x20>)
 8011108:	2300      	movs	r3, #0
 801110a:	4604      	mov	r4, r0
 801110c:	4608      	mov	r0, r1
 801110e:	4611      	mov	r1, r2
 8011110:	602b      	str	r3, [r5, #0]
 8011112:	f7f2 f864 	bl	80031de <_fstat>
 8011116:	1c43      	adds	r3, r0, #1
 8011118:	d102      	bne.n	8011120 <_fstat_r+0x1c>
 801111a:	682b      	ldr	r3, [r5, #0]
 801111c:	b103      	cbz	r3, 8011120 <_fstat_r+0x1c>
 801111e:	6023      	str	r3, [r4, #0]
 8011120:	bd38      	pop	{r3, r4, r5, pc}
 8011122:	bf00      	nop
 8011124:	20002708 	.word	0x20002708

08011128 <_isatty_r>:
 8011128:	b538      	push	{r3, r4, r5, lr}
 801112a:	4d06      	ldr	r5, [pc, #24]	; (8011144 <_isatty_r+0x1c>)
 801112c:	2300      	movs	r3, #0
 801112e:	4604      	mov	r4, r0
 8011130:	4608      	mov	r0, r1
 8011132:	602b      	str	r3, [r5, #0]
 8011134:	f7f2 f863 	bl	80031fe <_isatty>
 8011138:	1c43      	adds	r3, r0, #1
 801113a:	d102      	bne.n	8011142 <_isatty_r+0x1a>
 801113c:	682b      	ldr	r3, [r5, #0]
 801113e:	b103      	cbz	r3, 8011142 <_isatty_r+0x1a>
 8011140:	6023      	str	r3, [r4, #0]
 8011142:	bd38      	pop	{r3, r4, r5, pc}
 8011144:	20002708 	.word	0x20002708

08011148 <malloc>:
 8011148:	4b02      	ldr	r3, [pc, #8]	; (8011154 <malloc+0xc>)
 801114a:	4601      	mov	r1, r0
 801114c:	6818      	ldr	r0, [r3, #0]
 801114e:	f7ff bc0d 	b.w	801096c <_malloc_r>
 8011152:	bf00      	nop
 8011154:	20000010 	.word	0x20000010

08011158 <memmove>:
 8011158:	4288      	cmp	r0, r1
 801115a:	b510      	push	{r4, lr}
 801115c:	eb01 0402 	add.w	r4, r1, r2
 8011160:	d902      	bls.n	8011168 <memmove+0x10>
 8011162:	4284      	cmp	r4, r0
 8011164:	4623      	mov	r3, r4
 8011166:	d807      	bhi.n	8011178 <memmove+0x20>
 8011168:	1e43      	subs	r3, r0, #1
 801116a:	42a1      	cmp	r1, r4
 801116c:	d008      	beq.n	8011180 <memmove+0x28>
 801116e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011176:	e7f8      	b.n	801116a <memmove+0x12>
 8011178:	4402      	add	r2, r0
 801117a:	4601      	mov	r1, r0
 801117c:	428a      	cmp	r2, r1
 801117e:	d100      	bne.n	8011182 <memmove+0x2a>
 8011180:	bd10      	pop	{r4, pc}
 8011182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801118a:	e7f7      	b.n	801117c <memmove+0x24>

0801118c <__malloc_lock>:
 801118c:	4801      	ldr	r0, [pc, #4]	; (8011194 <__malloc_lock+0x8>)
 801118e:	f7fe be1c 	b.w	800fdca <__retarget_lock_acquire_recursive>
 8011192:	bf00      	nop
 8011194:	200026fc 	.word	0x200026fc

08011198 <__malloc_unlock>:
 8011198:	4801      	ldr	r0, [pc, #4]	; (80111a0 <__malloc_unlock+0x8>)
 801119a:	f7fe be17 	b.w	800fdcc <__retarget_lock_release_recursive>
 801119e:	bf00      	nop
 80111a0:	200026fc 	.word	0x200026fc

080111a4 <_realloc_r>:
 80111a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a8:	4680      	mov	r8, r0
 80111aa:	4614      	mov	r4, r2
 80111ac:	460e      	mov	r6, r1
 80111ae:	b921      	cbnz	r1, 80111ba <_realloc_r+0x16>
 80111b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111b4:	4611      	mov	r1, r2
 80111b6:	f7ff bbd9 	b.w	801096c <_malloc_r>
 80111ba:	b92a      	cbnz	r2, 80111c8 <_realloc_r+0x24>
 80111bc:	f7ff fb6a 	bl	8010894 <_free_r>
 80111c0:	4625      	mov	r5, r4
 80111c2:	4628      	mov	r0, r5
 80111c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111c8:	f000 f97b 	bl	80114c2 <_malloc_usable_size_r>
 80111cc:	4284      	cmp	r4, r0
 80111ce:	4607      	mov	r7, r0
 80111d0:	d802      	bhi.n	80111d8 <_realloc_r+0x34>
 80111d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80111d6:	d812      	bhi.n	80111fe <_realloc_r+0x5a>
 80111d8:	4621      	mov	r1, r4
 80111da:	4640      	mov	r0, r8
 80111dc:	f7ff fbc6 	bl	801096c <_malloc_r>
 80111e0:	4605      	mov	r5, r0
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d0ed      	beq.n	80111c2 <_realloc_r+0x1e>
 80111e6:	42bc      	cmp	r4, r7
 80111e8:	4622      	mov	r2, r4
 80111ea:	4631      	mov	r1, r6
 80111ec:	bf28      	it	cs
 80111ee:	463a      	movcs	r2, r7
 80111f0:	f7fc fde6 	bl	800ddc0 <memcpy>
 80111f4:	4631      	mov	r1, r6
 80111f6:	4640      	mov	r0, r8
 80111f8:	f7ff fb4c 	bl	8010894 <_free_r>
 80111fc:	e7e1      	b.n	80111c2 <_realloc_r+0x1e>
 80111fe:	4635      	mov	r5, r6
 8011200:	e7df      	b.n	80111c2 <_realloc_r+0x1e>

08011202 <__sfputc_r>:
 8011202:	6893      	ldr	r3, [r2, #8]
 8011204:	3b01      	subs	r3, #1
 8011206:	2b00      	cmp	r3, #0
 8011208:	b410      	push	{r4}
 801120a:	6093      	str	r3, [r2, #8]
 801120c:	da08      	bge.n	8011220 <__sfputc_r+0x1e>
 801120e:	6994      	ldr	r4, [r2, #24]
 8011210:	42a3      	cmp	r3, r4
 8011212:	db01      	blt.n	8011218 <__sfputc_r+0x16>
 8011214:	290a      	cmp	r1, #10
 8011216:	d103      	bne.n	8011220 <__sfputc_r+0x1e>
 8011218:	f85d 4b04 	ldr.w	r4, [sp], #4
 801121c:	f7fd bfcc 	b.w	800f1b8 <__swbuf_r>
 8011220:	6813      	ldr	r3, [r2, #0]
 8011222:	1c58      	adds	r0, r3, #1
 8011224:	6010      	str	r0, [r2, #0]
 8011226:	7019      	strb	r1, [r3, #0]
 8011228:	4608      	mov	r0, r1
 801122a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801122e:	4770      	bx	lr

08011230 <__sfputs_r>:
 8011230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011232:	4606      	mov	r6, r0
 8011234:	460f      	mov	r7, r1
 8011236:	4614      	mov	r4, r2
 8011238:	18d5      	adds	r5, r2, r3
 801123a:	42ac      	cmp	r4, r5
 801123c:	d101      	bne.n	8011242 <__sfputs_r+0x12>
 801123e:	2000      	movs	r0, #0
 8011240:	e007      	b.n	8011252 <__sfputs_r+0x22>
 8011242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011246:	463a      	mov	r2, r7
 8011248:	4630      	mov	r0, r6
 801124a:	f7ff ffda 	bl	8011202 <__sfputc_r>
 801124e:	1c43      	adds	r3, r0, #1
 8011250:	d1f3      	bne.n	801123a <__sfputs_r+0xa>
 8011252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011254 <_vfiprintf_r>:
 8011254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011258:	460d      	mov	r5, r1
 801125a:	b09d      	sub	sp, #116	; 0x74
 801125c:	4614      	mov	r4, r2
 801125e:	4698      	mov	r8, r3
 8011260:	4606      	mov	r6, r0
 8011262:	b118      	cbz	r0, 801126c <_vfiprintf_r+0x18>
 8011264:	6983      	ldr	r3, [r0, #24]
 8011266:	b90b      	cbnz	r3, 801126c <_vfiprintf_r+0x18>
 8011268:	f7fe f9a2 	bl	800f5b0 <__sinit>
 801126c:	4b89      	ldr	r3, [pc, #548]	; (8011494 <_vfiprintf_r+0x240>)
 801126e:	429d      	cmp	r5, r3
 8011270:	d11b      	bne.n	80112aa <_vfiprintf_r+0x56>
 8011272:	6875      	ldr	r5, [r6, #4]
 8011274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011276:	07d9      	lsls	r1, r3, #31
 8011278:	d405      	bmi.n	8011286 <_vfiprintf_r+0x32>
 801127a:	89ab      	ldrh	r3, [r5, #12]
 801127c:	059a      	lsls	r2, r3, #22
 801127e:	d402      	bmi.n	8011286 <_vfiprintf_r+0x32>
 8011280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011282:	f7fe fda2 	bl	800fdca <__retarget_lock_acquire_recursive>
 8011286:	89ab      	ldrh	r3, [r5, #12]
 8011288:	071b      	lsls	r3, r3, #28
 801128a:	d501      	bpl.n	8011290 <_vfiprintf_r+0x3c>
 801128c:	692b      	ldr	r3, [r5, #16]
 801128e:	b9eb      	cbnz	r3, 80112cc <_vfiprintf_r+0x78>
 8011290:	4629      	mov	r1, r5
 8011292:	4630      	mov	r0, r6
 8011294:	f7fd fff4 	bl	800f280 <__swsetup_r>
 8011298:	b1c0      	cbz	r0, 80112cc <_vfiprintf_r+0x78>
 801129a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801129c:	07dc      	lsls	r4, r3, #31
 801129e:	d50e      	bpl.n	80112be <_vfiprintf_r+0x6a>
 80112a0:	f04f 30ff 	mov.w	r0, #4294967295
 80112a4:	b01d      	add	sp, #116	; 0x74
 80112a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112aa:	4b7b      	ldr	r3, [pc, #492]	; (8011498 <_vfiprintf_r+0x244>)
 80112ac:	429d      	cmp	r5, r3
 80112ae:	d101      	bne.n	80112b4 <_vfiprintf_r+0x60>
 80112b0:	68b5      	ldr	r5, [r6, #8]
 80112b2:	e7df      	b.n	8011274 <_vfiprintf_r+0x20>
 80112b4:	4b79      	ldr	r3, [pc, #484]	; (801149c <_vfiprintf_r+0x248>)
 80112b6:	429d      	cmp	r5, r3
 80112b8:	bf08      	it	eq
 80112ba:	68f5      	ldreq	r5, [r6, #12]
 80112bc:	e7da      	b.n	8011274 <_vfiprintf_r+0x20>
 80112be:	89ab      	ldrh	r3, [r5, #12]
 80112c0:	0598      	lsls	r0, r3, #22
 80112c2:	d4ed      	bmi.n	80112a0 <_vfiprintf_r+0x4c>
 80112c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112c6:	f7fe fd81 	bl	800fdcc <__retarget_lock_release_recursive>
 80112ca:	e7e9      	b.n	80112a0 <_vfiprintf_r+0x4c>
 80112cc:	2300      	movs	r3, #0
 80112ce:	9309      	str	r3, [sp, #36]	; 0x24
 80112d0:	2320      	movs	r3, #32
 80112d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80112da:	2330      	movs	r3, #48	; 0x30
 80112dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80114a0 <_vfiprintf_r+0x24c>
 80112e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112e4:	f04f 0901 	mov.w	r9, #1
 80112e8:	4623      	mov	r3, r4
 80112ea:	469a      	mov	sl, r3
 80112ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112f0:	b10a      	cbz	r2, 80112f6 <_vfiprintf_r+0xa2>
 80112f2:	2a25      	cmp	r2, #37	; 0x25
 80112f4:	d1f9      	bne.n	80112ea <_vfiprintf_r+0x96>
 80112f6:	ebba 0b04 	subs.w	fp, sl, r4
 80112fa:	d00b      	beq.n	8011314 <_vfiprintf_r+0xc0>
 80112fc:	465b      	mov	r3, fp
 80112fe:	4622      	mov	r2, r4
 8011300:	4629      	mov	r1, r5
 8011302:	4630      	mov	r0, r6
 8011304:	f7ff ff94 	bl	8011230 <__sfputs_r>
 8011308:	3001      	adds	r0, #1
 801130a:	f000 80aa 	beq.w	8011462 <_vfiprintf_r+0x20e>
 801130e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011310:	445a      	add	r2, fp
 8011312:	9209      	str	r2, [sp, #36]	; 0x24
 8011314:	f89a 3000 	ldrb.w	r3, [sl]
 8011318:	2b00      	cmp	r3, #0
 801131a:	f000 80a2 	beq.w	8011462 <_vfiprintf_r+0x20e>
 801131e:	2300      	movs	r3, #0
 8011320:	f04f 32ff 	mov.w	r2, #4294967295
 8011324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011328:	f10a 0a01 	add.w	sl, sl, #1
 801132c:	9304      	str	r3, [sp, #16]
 801132e:	9307      	str	r3, [sp, #28]
 8011330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011334:	931a      	str	r3, [sp, #104]	; 0x68
 8011336:	4654      	mov	r4, sl
 8011338:	2205      	movs	r2, #5
 801133a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133e:	4858      	ldr	r0, [pc, #352]	; (80114a0 <_vfiprintf_r+0x24c>)
 8011340:	f7ee ff4e 	bl	80001e0 <memchr>
 8011344:	9a04      	ldr	r2, [sp, #16]
 8011346:	b9d8      	cbnz	r0, 8011380 <_vfiprintf_r+0x12c>
 8011348:	06d1      	lsls	r1, r2, #27
 801134a:	bf44      	itt	mi
 801134c:	2320      	movmi	r3, #32
 801134e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011352:	0713      	lsls	r3, r2, #28
 8011354:	bf44      	itt	mi
 8011356:	232b      	movmi	r3, #43	; 0x2b
 8011358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801135c:	f89a 3000 	ldrb.w	r3, [sl]
 8011360:	2b2a      	cmp	r3, #42	; 0x2a
 8011362:	d015      	beq.n	8011390 <_vfiprintf_r+0x13c>
 8011364:	9a07      	ldr	r2, [sp, #28]
 8011366:	4654      	mov	r4, sl
 8011368:	2000      	movs	r0, #0
 801136a:	f04f 0c0a 	mov.w	ip, #10
 801136e:	4621      	mov	r1, r4
 8011370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011374:	3b30      	subs	r3, #48	; 0x30
 8011376:	2b09      	cmp	r3, #9
 8011378:	d94e      	bls.n	8011418 <_vfiprintf_r+0x1c4>
 801137a:	b1b0      	cbz	r0, 80113aa <_vfiprintf_r+0x156>
 801137c:	9207      	str	r2, [sp, #28]
 801137e:	e014      	b.n	80113aa <_vfiprintf_r+0x156>
 8011380:	eba0 0308 	sub.w	r3, r0, r8
 8011384:	fa09 f303 	lsl.w	r3, r9, r3
 8011388:	4313      	orrs	r3, r2
 801138a:	9304      	str	r3, [sp, #16]
 801138c:	46a2      	mov	sl, r4
 801138e:	e7d2      	b.n	8011336 <_vfiprintf_r+0xe2>
 8011390:	9b03      	ldr	r3, [sp, #12]
 8011392:	1d19      	adds	r1, r3, #4
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	9103      	str	r1, [sp, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	bfbb      	ittet	lt
 801139c:	425b      	neglt	r3, r3
 801139e:	f042 0202 	orrlt.w	r2, r2, #2
 80113a2:	9307      	strge	r3, [sp, #28]
 80113a4:	9307      	strlt	r3, [sp, #28]
 80113a6:	bfb8      	it	lt
 80113a8:	9204      	strlt	r2, [sp, #16]
 80113aa:	7823      	ldrb	r3, [r4, #0]
 80113ac:	2b2e      	cmp	r3, #46	; 0x2e
 80113ae:	d10c      	bne.n	80113ca <_vfiprintf_r+0x176>
 80113b0:	7863      	ldrb	r3, [r4, #1]
 80113b2:	2b2a      	cmp	r3, #42	; 0x2a
 80113b4:	d135      	bne.n	8011422 <_vfiprintf_r+0x1ce>
 80113b6:	9b03      	ldr	r3, [sp, #12]
 80113b8:	1d1a      	adds	r2, r3, #4
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	9203      	str	r2, [sp, #12]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	bfb8      	it	lt
 80113c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80113c6:	3402      	adds	r4, #2
 80113c8:	9305      	str	r3, [sp, #20]
 80113ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80114b0 <_vfiprintf_r+0x25c>
 80113ce:	7821      	ldrb	r1, [r4, #0]
 80113d0:	2203      	movs	r2, #3
 80113d2:	4650      	mov	r0, sl
 80113d4:	f7ee ff04 	bl	80001e0 <memchr>
 80113d8:	b140      	cbz	r0, 80113ec <_vfiprintf_r+0x198>
 80113da:	2340      	movs	r3, #64	; 0x40
 80113dc:	eba0 000a 	sub.w	r0, r0, sl
 80113e0:	fa03 f000 	lsl.w	r0, r3, r0
 80113e4:	9b04      	ldr	r3, [sp, #16]
 80113e6:	4303      	orrs	r3, r0
 80113e8:	3401      	adds	r4, #1
 80113ea:	9304      	str	r3, [sp, #16]
 80113ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113f0:	482c      	ldr	r0, [pc, #176]	; (80114a4 <_vfiprintf_r+0x250>)
 80113f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80113f6:	2206      	movs	r2, #6
 80113f8:	f7ee fef2 	bl	80001e0 <memchr>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d03f      	beq.n	8011480 <_vfiprintf_r+0x22c>
 8011400:	4b29      	ldr	r3, [pc, #164]	; (80114a8 <_vfiprintf_r+0x254>)
 8011402:	bb1b      	cbnz	r3, 801144c <_vfiprintf_r+0x1f8>
 8011404:	9b03      	ldr	r3, [sp, #12]
 8011406:	3307      	adds	r3, #7
 8011408:	f023 0307 	bic.w	r3, r3, #7
 801140c:	3308      	adds	r3, #8
 801140e:	9303      	str	r3, [sp, #12]
 8011410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011412:	443b      	add	r3, r7
 8011414:	9309      	str	r3, [sp, #36]	; 0x24
 8011416:	e767      	b.n	80112e8 <_vfiprintf_r+0x94>
 8011418:	fb0c 3202 	mla	r2, ip, r2, r3
 801141c:	460c      	mov	r4, r1
 801141e:	2001      	movs	r0, #1
 8011420:	e7a5      	b.n	801136e <_vfiprintf_r+0x11a>
 8011422:	2300      	movs	r3, #0
 8011424:	3401      	adds	r4, #1
 8011426:	9305      	str	r3, [sp, #20]
 8011428:	4619      	mov	r1, r3
 801142a:	f04f 0c0a 	mov.w	ip, #10
 801142e:	4620      	mov	r0, r4
 8011430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011434:	3a30      	subs	r2, #48	; 0x30
 8011436:	2a09      	cmp	r2, #9
 8011438:	d903      	bls.n	8011442 <_vfiprintf_r+0x1ee>
 801143a:	2b00      	cmp	r3, #0
 801143c:	d0c5      	beq.n	80113ca <_vfiprintf_r+0x176>
 801143e:	9105      	str	r1, [sp, #20]
 8011440:	e7c3      	b.n	80113ca <_vfiprintf_r+0x176>
 8011442:	fb0c 2101 	mla	r1, ip, r1, r2
 8011446:	4604      	mov	r4, r0
 8011448:	2301      	movs	r3, #1
 801144a:	e7f0      	b.n	801142e <_vfiprintf_r+0x1da>
 801144c:	ab03      	add	r3, sp, #12
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	462a      	mov	r2, r5
 8011452:	4b16      	ldr	r3, [pc, #88]	; (80114ac <_vfiprintf_r+0x258>)
 8011454:	a904      	add	r1, sp, #16
 8011456:	4630      	mov	r0, r6
 8011458:	f3af 8000 	nop.w
 801145c:	4607      	mov	r7, r0
 801145e:	1c78      	adds	r0, r7, #1
 8011460:	d1d6      	bne.n	8011410 <_vfiprintf_r+0x1bc>
 8011462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011464:	07d9      	lsls	r1, r3, #31
 8011466:	d405      	bmi.n	8011474 <_vfiprintf_r+0x220>
 8011468:	89ab      	ldrh	r3, [r5, #12]
 801146a:	059a      	lsls	r2, r3, #22
 801146c:	d402      	bmi.n	8011474 <_vfiprintf_r+0x220>
 801146e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011470:	f7fe fcac 	bl	800fdcc <__retarget_lock_release_recursive>
 8011474:	89ab      	ldrh	r3, [r5, #12]
 8011476:	065b      	lsls	r3, r3, #25
 8011478:	f53f af12 	bmi.w	80112a0 <_vfiprintf_r+0x4c>
 801147c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801147e:	e711      	b.n	80112a4 <_vfiprintf_r+0x50>
 8011480:	ab03      	add	r3, sp, #12
 8011482:	9300      	str	r3, [sp, #0]
 8011484:	462a      	mov	r2, r5
 8011486:	4b09      	ldr	r3, [pc, #36]	; (80114ac <_vfiprintf_r+0x258>)
 8011488:	a904      	add	r1, sp, #16
 801148a:	4630      	mov	r0, r6
 801148c:	f7ff fcac 	bl	8010de8 <_printf_i>
 8011490:	e7e4      	b.n	801145c <_vfiprintf_r+0x208>
 8011492:	bf00      	nop
 8011494:	080118b4 	.word	0x080118b4
 8011498:	080118d4 	.word	0x080118d4
 801149c:	08011894 	.word	0x08011894
 80114a0:	08011af4 	.word	0x08011af4
 80114a4:	08011afe 	.word	0x08011afe
 80114a8:	00000000 	.word	0x00000000
 80114ac:	08011231 	.word	0x08011231
 80114b0:	08011afa 	.word	0x08011afa

080114b4 <abort>:
 80114b4:	b508      	push	{r3, lr}
 80114b6:	2006      	movs	r0, #6
 80114b8:	f000 f834 	bl	8011524 <raise>
 80114bc:	2001      	movs	r0, #1
 80114be:	f7f1 fe3f 	bl	8003140 <_exit>

080114c2 <_malloc_usable_size_r>:
 80114c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114c6:	1f18      	subs	r0, r3, #4
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	bfbc      	itt	lt
 80114cc:	580b      	ldrlt	r3, [r1, r0]
 80114ce:	18c0      	addlt	r0, r0, r3
 80114d0:	4770      	bx	lr

080114d2 <_raise_r>:
 80114d2:	291f      	cmp	r1, #31
 80114d4:	b538      	push	{r3, r4, r5, lr}
 80114d6:	4604      	mov	r4, r0
 80114d8:	460d      	mov	r5, r1
 80114da:	d904      	bls.n	80114e6 <_raise_r+0x14>
 80114dc:	2316      	movs	r3, #22
 80114de:	6003      	str	r3, [r0, #0]
 80114e0:	f04f 30ff 	mov.w	r0, #4294967295
 80114e4:	bd38      	pop	{r3, r4, r5, pc}
 80114e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114e8:	b112      	cbz	r2, 80114f0 <_raise_r+0x1e>
 80114ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114ee:	b94b      	cbnz	r3, 8011504 <_raise_r+0x32>
 80114f0:	4620      	mov	r0, r4
 80114f2:	f000 f831 	bl	8011558 <_getpid_r>
 80114f6:	462a      	mov	r2, r5
 80114f8:	4601      	mov	r1, r0
 80114fa:	4620      	mov	r0, r4
 80114fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011500:	f000 b818 	b.w	8011534 <_kill_r>
 8011504:	2b01      	cmp	r3, #1
 8011506:	d00a      	beq.n	801151e <_raise_r+0x4c>
 8011508:	1c59      	adds	r1, r3, #1
 801150a:	d103      	bne.n	8011514 <_raise_r+0x42>
 801150c:	2316      	movs	r3, #22
 801150e:	6003      	str	r3, [r0, #0]
 8011510:	2001      	movs	r0, #1
 8011512:	e7e7      	b.n	80114e4 <_raise_r+0x12>
 8011514:	2400      	movs	r4, #0
 8011516:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801151a:	4628      	mov	r0, r5
 801151c:	4798      	blx	r3
 801151e:	2000      	movs	r0, #0
 8011520:	e7e0      	b.n	80114e4 <_raise_r+0x12>
	...

08011524 <raise>:
 8011524:	4b02      	ldr	r3, [pc, #8]	; (8011530 <raise+0xc>)
 8011526:	4601      	mov	r1, r0
 8011528:	6818      	ldr	r0, [r3, #0]
 801152a:	f7ff bfd2 	b.w	80114d2 <_raise_r>
 801152e:	bf00      	nop
 8011530:	20000010 	.word	0x20000010

08011534 <_kill_r>:
 8011534:	b538      	push	{r3, r4, r5, lr}
 8011536:	4d07      	ldr	r5, [pc, #28]	; (8011554 <_kill_r+0x20>)
 8011538:	2300      	movs	r3, #0
 801153a:	4604      	mov	r4, r0
 801153c:	4608      	mov	r0, r1
 801153e:	4611      	mov	r1, r2
 8011540:	602b      	str	r3, [r5, #0]
 8011542:	f7f1 fded 	bl	8003120 <_kill>
 8011546:	1c43      	adds	r3, r0, #1
 8011548:	d102      	bne.n	8011550 <_kill_r+0x1c>
 801154a:	682b      	ldr	r3, [r5, #0]
 801154c:	b103      	cbz	r3, 8011550 <_kill_r+0x1c>
 801154e:	6023      	str	r3, [r4, #0]
 8011550:	bd38      	pop	{r3, r4, r5, pc}
 8011552:	bf00      	nop
 8011554:	20002708 	.word	0x20002708

08011558 <_getpid_r>:
 8011558:	f7f1 bdda 	b.w	8003110 <_getpid>

0801155c <_init>:
 801155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801155e:	bf00      	nop
 8011560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011562:	bc08      	pop	{r3}
 8011564:	469e      	mov	lr, r3
 8011566:	4770      	bx	lr

08011568 <_fini>:
 8011568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156a:	bf00      	nop
 801156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801156e:	bc08      	pop	{r3}
 8011570:	469e      	mov	lr, r3
 8011572:	4770      	bx	lr
