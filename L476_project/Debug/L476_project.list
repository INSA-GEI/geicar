
L476_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011fc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000070c  08012158  08012158  00022158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012864  08012864  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08012864  08012864  00022864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801286c  0801286c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801286c  0801286c  0002286c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012870  08012870  00022870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012874  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026c0  200001e8  08012a58  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200028a8  08012a58  000328a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000415ed  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062f0  00000000  00000000  00071801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000039c0  00000000  00000000  00077af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003718  00000000  00000000  0007b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031c14  00000000  00000000  0007ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035553  00000000  00000000  000b07e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00128dfa  00000000  00000000  000e5d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0020eb31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00010dd8  00000000  00000000  0020eb84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801213c 	.word	0x0801213c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0801213c 	.word	0x0801213c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9aa 	b.w	8000fa4 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468e      	mov	lr, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d14d      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce2:	428a      	cmp	r2, r1
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	d969      	bls.n	8000dbc <__udivmoddi4+0xe8>
 8000ce8:	fab2 f282 	clz	r2, r2
 8000cec:	b152      	cbz	r2, 8000d04 <__udivmoddi4+0x30>
 8000cee:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf2:	f1c2 0120 	rsb	r1, r2, #32
 8000cf6:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfe:	ea41 0e03 	orr.w	lr, r1, r3
 8000d02:	4094      	lsls	r4, r2
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	0c21      	lsrs	r1, r4, #16
 8000d0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d0e:	fa1f f78c 	uxth.w	r7, ip
 8000d12:	fb08 e316 	mls	r3, r8, r6, lr
 8000d16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1a:	fb06 f107 	mul.w	r1, r6, r7
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 811f 	bcs.w	8000f6c <__udivmoddi4+0x298>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 811c 	bls.w	8000f6c <__udivmoddi4+0x298>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 f707 	mul.w	r7, r0, r7
 8000d4c:	42a7      	cmp	r7, r4
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x92>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d58:	f080 810a 	bcs.w	8000f70 <__udivmoddi4+0x29c>
 8000d5c:	42a7      	cmp	r7, r4
 8000d5e:	f240 8107 	bls.w	8000f70 <__udivmoddi4+0x29c>
 8000d62:	4464      	add	r4, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6a:	1be4      	subs	r4, r4, r7
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa4>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xc2>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	f000 80ef 	beq.w	8000f66 <__udivmoddi4+0x292>
 8000d88:	2600      	movs	r6, #0
 8000d8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d8e:	4630      	mov	r0, r6
 8000d90:	4631      	mov	r1, r6
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f683 	clz	r6, r3
 8000d9a:	2e00      	cmp	r6, #0
 8000d9c:	d14a      	bne.n	8000e34 <__udivmoddi4+0x160>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd4>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80f9 	bhi.w	8000f9a <__udivmoddi4+0x2c6>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	469e      	mov	lr, r3
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa4>
 8000db6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xec>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 8092 	bne.w	8000eee <__udivmoddi4+0x21a>
 8000dca:	eba1 010c 	sub.w	r1, r1, ip
 8000dce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	2601      	movs	r6, #1
 8000dd8:	0c20      	lsrs	r0, r4, #16
 8000dda:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dde:	fb07 1113 	mls	r1, r7, r3, r1
 8000de2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de6:	fb0e f003 	mul.w	r0, lr, r3
 8000dea:	4288      	cmp	r0, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x12c>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x12a>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f200 80cb 	bhi.w	8000f94 <__udivmoddi4+0x2c0>
 8000dfe:	4643      	mov	r3, r8
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1110 	mls	r1, r7, r0, r1
 8000e0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e10:	fb0e fe00 	mul.w	lr, lr, r0
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x156>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e20:	d202      	bcs.n	8000e28 <__udivmoddi4+0x154>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f200 80bb 	bhi.w	8000f9e <__udivmoddi4+0x2ca>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	e79c      	b.n	8000d6e <__udivmoddi4+0x9a>
 8000e34:	f1c6 0720 	rsb	r7, r6, #32
 8000e38:	40b3      	lsls	r3, r6
 8000e3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e42:	fa20 f407 	lsr.w	r4, r0, r7
 8000e46:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4a:	431c      	orrs	r4, r3
 8000e4c:	40f9      	lsrs	r1, r7
 8000e4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e52:	fa00 f306 	lsl.w	r3, r0, r6
 8000e56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5a:	0c20      	lsrs	r0, r4, #16
 8000e5c:	fa1f fe8c 	uxth.w	lr, ip
 8000e60:	fb09 1118 	mls	r1, r9, r8, r1
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	fb08 f00e 	mul.w	r0, r8, lr
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000e72:	d90b      	bls.n	8000e8c <__udivmoddi4+0x1b8>
 8000e74:	eb1c 0101 	adds.w	r1, ip, r1
 8000e78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e7c:	f080 8088 	bcs.w	8000f90 <__udivmoddi4+0x2bc>
 8000e80:	4288      	cmp	r0, r1
 8000e82:	f240 8085 	bls.w	8000f90 <__udivmoddi4+0x2bc>
 8000e86:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	1a09      	subs	r1, r1, r0
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e94:	fb09 1110 	mls	r1, r9, r0, r1
 8000e98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x1e2>
 8000ea4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eac:	d26c      	bcs.n	8000f88 <__udivmoddi4+0x2b4>
 8000eae:	458e      	cmp	lr, r1
 8000eb0:	d96a      	bls.n	8000f88 <__udivmoddi4+0x2b4>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4461      	add	r1, ip
 8000eb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eba:	fba0 9402 	umull	r9, r4, r0, r2
 8000ebe:	eba1 010e 	sub.w	r1, r1, lr
 8000ec2:	42a1      	cmp	r1, r4
 8000ec4:	46c8      	mov	r8, r9
 8000ec6:	46a6      	mov	lr, r4
 8000ec8:	d356      	bcc.n	8000f78 <__udivmoddi4+0x2a4>
 8000eca:	d053      	beq.n	8000f74 <__udivmoddi4+0x2a0>
 8000ecc:	b15d      	cbz	r5, 8000ee6 <__udivmoddi4+0x212>
 8000ece:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed6:	fa01 f707 	lsl.w	r7, r1, r7
 8000eda:	fa22 f306 	lsr.w	r3, r2, r6
 8000ede:	40f1      	lsrs	r1, r6
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	2600      	movs	r6, #0
 8000ee8:	4631      	mov	r1, r6
 8000eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eee:	f1c2 0320 	rsb	r3, r2, #32
 8000ef2:	40d8      	lsrs	r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa21 f303 	lsr.w	r3, r1, r3
 8000efc:	4091      	lsls	r1, r2
 8000efe:	4301      	orrs	r1, r0
 8000f00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f04:	fa1f fe8c 	uxth.w	lr, ip
 8000f08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f10:	0c0b      	lsrs	r3, r1, #16
 8000f12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f16:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1a:	429e      	cmp	r6, r3
 8000f1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x260>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2a:	d22f      	bcs.n	8000f8c <__udivmoddi4+0x2b8>
 8000f2c:	429e      	cmp	r6, r3
 8000f2e:	d92d      	bls.n	8000f8c <__udivmoddi4+0x2b8>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	b289      	uxth	r1, r1
 8000f38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f44:	fb06 f30e 	mul.w	r3, r6, lr
 8000f48:	428b      	cmp	r3, r1
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x28a>
 8000f4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f54:	d216      	bcs.n	8000f84 <__udivmoddi4+0x2b0>
 8000f56:	428b      	cmp	r3, r1
 8000f58:	d914      	bls.n	8000f84 <__udivmoddi4+0x2b0>
 8000f5a:	3e02      	subs	r6, #2
 8000f5c:	4461      	add	r1, ip
 8000f5e:	1ac9      	subs	r1, r1, r3
 8000f60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f64:	e738      	b.n	8000dd8 <__udivmoddi4+0x104>
 8000f66:	462e      	mov	r6, r5
 8000f68:	4628      	mov	r0, r5
 8000f6a:	e705      	b.n	8000d78 <__udivmoddi4+0xa4>
 8000f6c:	4606      	mov	r6, r0
 8000f6e:	e6e3      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f70:	4618      	mov	r0, r3
 8000f72:	e6f8      	b.n	8000d66 <__udivmoddi4+0x92>
 8000f74:	454b      	cmp	r3, r9
 8000f76:	d2a9      	bcs.n	8000ecc <__udivmoddi4+0x1f8>
 8000f78:	ebb9 0802 	subs.w	r8, r9, r2
 8000f7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f80:	3801      	subs	r0, #1
 8000f82:	e7a3      	b.n	8000ecc <__udivmoddi4+0x1f8>
 8000f84:	4646      	mov	r6, r8
 8000f86:	e7ea      	b.n	8000f5e <__udivmoddi4+0x28a>
 8000f88:	4620      	mov	r0, r4
 8000f8a:	e794      	b.n	8000eb6 <__udivmoddi4+0x1e2>
 8000f8c:	4640      	mov	r0, r8
 8000f8e:	e7d1      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f90:	46d0      	mov	r8, sl
 8000f92:	e77b      	b.n	8000e8c <__udivmoddi4+0x1b8>
 8000f94:	3b02      	subs	r3, #2
 8000f96:	4461      	add	r1, ip
 8000f98:	e732      	b.n	8000e00 <__udivmoddi4+0x12c>
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	e709      	b.n	8000db2 <__udivmoddi4+0xde>
 8000f9e:	4464      	add	r4, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e742      	b.n	8000e2a <__udivmoddi4+0x156>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <Tasks_Init>:

#define LIDAR_DATA_LENGTH 47
uint8_t data_buffer[LIDAR_DATA_LENGTH] = {0};

void Tasks_Init(void)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b09c      	sub	sp, #112	; 0x70
 8000fac:	af00      	add	r7, sp, #0
	osThreadDef(UART, StartUart, osPriorityNormal, 0, 64);
 8000fae:	4b27      	ldr	r3, [pc, #156]	; (800104c <Tasks_Init+0xa4>)
 8000fb0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000fb4:	461d      	mov	r5, r3
 8000fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	UARTHandle = osThreadCreate(osThread(UART), NULL);
 8000fc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00b fc77 	bl	800c8bc <osThreadCreate>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <Tasks_Init+0xa8>)
 8000fd2:	6013      	str	r3, [r2, #0]

	osThreadDef(IMU, StartIMU, osPriorityHigh, 0, 512);
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <Tasks_Init+0xac>)
 8000fd6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fda:	461d      	mov	r5, r3
 8000fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fe0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	IMUHandle = osThreadCreate(osThread(IMU), NULL);
 8000fe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f00b fc64 	bl	800c8bc <osThreadCreate>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	4a18      	ldr	r2, [pc, #96]	; (8001058 <Tasks_Init+0xb0>)
 8000ff8:	6013      	str	r3, [r2, #0]

	osThreadDef(GPS, StartGPS, osPriorityAboveNormal, 0, 64);
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <Tasks_Init+0xb4>)
 8000ffc:	f107 041c 	add.w	r4, r7, #28
 8001000:	461d      	mov	r5, r3
 8001002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001006:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800100a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	GPSHandle = osThreadCreate(osThread(GPS), NULL);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00b fc51 	bl	800c8bc <osThreadCreate>
 800101a:	4603      	mov	r3, r0
 800101c:	4a10      	ldr	r2, [pc, #64]	; (8001060 <Tasks_Init+0xb8>)
 800101e:	6013      	str	r3, [r2, #0]

	osThreadDef(LIDAR, StartLidar, osPriorityBelowNormal, 0, 64);
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <Tasks_Init+0xbc>)
 8001022:	463c      	mov	r4, r7
 8001024:	461d      	mov	r5, r3
 8001026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	LIDARHandle = osThreadCreate(osThread(LIDAR), NULL);
 8001032:	463b      	mov	r3, r7
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f00b fc40 	bl	800c8bc <osThreadCreate>
 800103c:	4603      	mov	r3, r0
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <Tasks_Init+0xc0>)
 8001040:	6013      	str	r3, [r2, #0]
	osThreadDef(I2C, StartI2C, osPriorityBelowNormal, 0, 64);
	I2CHandle = osThreadCreate(osThread(I2C), NULL);

	osThreadDef(SPI, StartSPI, osPriorityBelowNormal, 0, 64);
	SPIHandle = osThreadCreate(osThread(SPI), NULL);*/
}
 8001042:	bf00      	nop
 8001044:	3770      	adds	r7, #112	; 0x70
 8001046:	46bd      	mov	sp, r7
 8001048:	bdb0      	pop	{r4, r5, r7, pc}
 800104a:	bf00      	nop
 800104c:	08012170 	.word	0x08012170
 8001050:	20000210 	.word	0x20000210
 8001054:	0801218c 	.word	0x0801218c
 8001058:	20000204 	.word	0x20000204
 800105c:	080121a8 	.word	0x080121a8
 8001060:	20000208 	.word	0x20000208
 8001064:	080121c4 	.word	0x080121c4
 8001068:	2000020c 	.word	0x2000020c

0800106c <IMU_Receive_Transmit_Data>:

void IMU_Receive_Transmit_Data()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	IMU_GetData();
 8001070:	f000 fad8 	bl	8001624 <IMU_GetData>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}

08001078 <GetData_GPS>:

void GetData_GPS(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart2,&rxBufferGps,1);
 800107c:	2201      	movs	r2, #1
 800107e:	4903      	ldr	r1, [pc, #12]	; (800108c <GetData_GPS+0x14>)
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <GetData_GPS+0x18>)
 8001082:	f00a f8b3 	bl	800b1ec <HAL_UART_Receive_IT>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000e64 	.word	0x20000e64
 8001090:	20000d58 	.word	0x20000d58

08001094 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
    	{
    		message_index=0;
    	}

    }*/
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    if (huart -> Instance == USART2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <HAL_UART_RxCpltCallback+0x8c>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d137      	bne.n	800112a <HAL_UART_RxCpltCallback+0x82>

			static char rx_buffer[LINEMAX];   // Local holding buffer to build line
			static int rx_index = 0;


			if ((rxBufferGps == '\r') || (rxBufferGps == '\n')) // Is this an end-of-line condition, either will suffice?
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <HAL_UART_RxCpltCallback+0x90>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b0d      	cmp	r3, #13
 80010c0:	d003      	beq.n	80010ca <HAL_UART_RxCpltCallback+0x22>
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_UART_RxCpltCallback+0x90>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b0a      	cmp	r3, #10
 80010c8:	d116      	bne.n	80010f8 <HAL_UART_RxCpltCallback+0x50>
			{
			  if (rx_index != 0) // Line has some content
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d026      	beq.n	8001120 <HAL_UART_RxCpltCallback+0x78>
			  {
				memcpy((void *)nmeaFrame, rx_buffer, rx_index); // Copy to static line buffer from dynamic receive buffer
 80010d2:	4b1a      	ldr	r3, [pc, #104]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4919      	ldr	r1, [pc, #100]	; (8001140 <HAL_UART_RxCpltCallback+0x98>)
 80010da:	481a      	ldr	r0, [pc, #104]	; (8001144 <HAL_UART_RxCpltCallback+0x9c>)
 80010dc:	f00d fc60 	bl	800e9a0 <memcpy>
				nmeaFrame[rx_index] = 0; // Add terminating NUL
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <HAL_UART_RxCpltCallback+0x9c>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	54d1      	strb	r1, [r2, r3]
				nmeaFrameValid = 1; // flag new line valid for processing
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_UART_RxCpltCallback+0xa0>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

				rx_index = 0; // Reset content pointer
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
			  if (rx_index != 0) // Line has some content
 80010f6:	e013      	b.n	8001120 <HAL_UART_RxCpltCallback+0x78>
			  }
			}
			else
			{
			  if ((rxBufferGps == '$') || (rx_index == LINEMAX)) // If resync or overflows pull back to start
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_UART_RxCpltCallback+0x90>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b24      	cmp	r3, #36	; 0x24
 80010fe:	d003      	beq.n	8001108 <HAL_UART_RxCpltCallback+0x60>
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2bc8      	cmp	r3, #200	; 0xc8
 8001106:	d102      	bne.n	800110e <HAL_UART_RxCpltCallback+0x66>
				rx_index = 0;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]

			  rx_buffer[rx_index++] = rxBufferGps; // Copy to buffer and increment
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	4909      	ldr	r1, [pc, #36]	; (800113c <HAL_UART_RxCpltCallback+0x94>)
 8001116:	600a      	str	r2, [r1, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_UART_RxCpltCallback+0x90>)
 800111a:	7811      	ldrb	r1, [r2, #0]
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <HAL_UART_RxCpltCallback+0x98>)
 800111e:	54d1      	strb	r1, [r2, r3]
			}


    	HAL_UART_Receive_IT(&huart2, &rxBufferGps, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <HAL_UART_RxCpltCallback+0x90>)
 8001124:	4809      	ldr	r0, [pc, #36]	; (800114c <HAL_UART_RxCpltCallback+0xa4>)
 8001126:	f00a f861 	bl	800b1ec <HAL_UART_Receive_IT>
    }
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004400 	.word	0x40004400
 8001138:	20000e64 	.word	0x20000e64
 800113c:	20000244 	.word	0x20000244
 8001140:	20000248 	.word	0x20000248
 8001144:	20000e68 	.word	0x20000e68
 8001148:	20000f30 	.word	0x20000f30
 800114c:	20000d58 	.word	0x20000d58

08001150 <Transmit_data_to_usb>:

void Transmit_data_to_usb(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
	MESSAGE_Typedef message_appli;
	message_appli = MESSAGE_ReadMailboxNoDelay(Appli_Mailbox);
 8001156:	4b43      	ldr	r3, [pc, #268]	; (8001264 <Transmit_data_to_usb+0x114>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fc52 	bl	8001a08 <MESSAGE_ReadMailboxNoDelay>
	switch(message_appli.id){
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	3b20      	subs	r3, #32
 8001168:	2b20      	cmp	r3, #32
 800116a:	d876      	bhi.n	800125a <Transmit_data_to_usb+0x10a>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <Transmit_data_to_usb+0x24>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001207 	.word	0x08001207
 8001178:	08001215 	.word	0x08001215
 800117c:	0800124d 	.word	0x0800124d
 8001180:	0800123f 	.word	0x0800123f
 8001184:	08001231 	.word	0x08001231
 8001188:	08001223 	.word	0x08001223
 800118c:	0800125b 	.word	0x0800125b
 8001190:	0800125b 	.word	0x0800125b
 8001194:	0800125b 	.word	0x0800125b
 8001198:	0800125b 	.word	0x0800125b
 800119c:	0800125b 	.word	0x0800125b
 80011a0:	0800125b 	.word	0x0800125b
 80011a4:	0800125b 	.word	0x0800125b
 80011a8:	0800125b 	.word	0x0800125b
 80011ac:	0800125b 	.word	0x0800125b
 80011b0:	0800125b 	.word	0x0800125b
 80011b4:	0800125b 	.word	0x0800125b
 80011b8:	0800125b 	.word	0x0800125b
 80011bc:	0800125b 	.word	0x0800125b
 80011c0:	0800125b 	.word	0x0800125b
 80011c4:	0800125b 	.word	0x0800125b
 80011c8:	0800125b 	.word	0x0800125b
 80011cc:	0800125b 	.word	0x0800125b
 80011d0:	0800125b 	.word	0x0800125b
 80011d4:	0800125b 	.word	0x0800125b
 80011d8:	0800125b 	.word	0x0800125b
 80011dc:	0800125b 	.word	0x0800125b
 80011e0:	0800125b 	.word	0x0800125b
 80011e4:	0800125b 	.word	0x0800125b
 80011e8:	0800125b 	.word	0x0800125b
 80011ec:	0800125b 	.word	0x0800125b
 80011f0:	0800125b 	.word	0x0800125b
 80011f4:	080011f9 	.word	0x080011f9

	/*case MSG_ID_GPS :
		HAL_UART_Transmit_IT(&huart4, message_temp, sizeof(message_temp));
		break;*/
	case MSG_ID_LIDAR :
		HAL_UART_Transmit_IT(&huart4, (uint8_t*)message_appli.data,30);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	221e      	movs	r2, #30
 80011fc:	4619      	mov	r1, r3
 80011fe:	481a      	ldr	r0, [pc, #104]	; (8001268 <Transmit_data_to_usb+0x118>)
 8001200:	f009 ff86 	bl	800b110 <HAL_UART_Transmit_IT>
		break;
 8001204:	e02a      	b.n	800125c <Transmit_data_to_usb+0x10c>
	case MSG_ID_IMU_TEMP :
		HAL_UART_Transmit_IT(&huart4, (uint8_t*)message_appli.data,30);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	221e      	movs	r2, #30
 800120a:	4619      	mov	r1, r3
 800120c:	4816      	ldr	r0, [pc, #88]	; (8001268 <Transmit_data_to_usb+0x118>)
 800120e:	f009 ff7f 	bl	800b110 <HAL_UART_Transmit_IT>
		break;
 8001212:	e023      	b.n	800125c <Transmit_data_to_usb+0x10c>
	case MSG_ID_IMU_HUM :
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)message_appli.data, 30);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	221e      	movs	r2, #30
 8001218:	4619      	mov	r1, r3
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <Transmit_data_to_usb+0x118>)
 800121c:	f009 ff78 	bl	800b110 <HAL_UART_Transmit_IT>
		break;
 8001220:	e01c      	b.n	800125c <Transmit_data_to_usb+0x10c>
	case MSG_ID_IMU_PRESS :
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)message_appli.data, 30);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	221e      	movs	r2, #30
 8001226:	4619      	mov	r1, r3
 8001228:	480f      	ldr	r0, [pc, #60]	; (8001268 <Transmit_data_to_usb+0x118>)
 800122a:	f009 ff71 	bl	800b110 <HAL_UART_Transmit_IT>
		break;
 800122e:	e015      	b.n	800125c <Transmit_data_to_usb+0x10c>
	case MSG_ID_IMU_ACC :
		HAL_UART_Transmit_IT(&huart4, (uint8_t*)message_appli.data, 50);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2232      	movs	r2, #50	; 0x32
 8001234:	4619      	mov	r1, r3
 8001236:	480c      	ldr	r0, [pc, #48]	; (8001268 <Transmit_data_to_usb+0x118>)
 8001238:	f009 ff6a 	bl	800b110 <HAL_UART_Transmit_IT>
		break;
 800123c:	e00e      	b.n	800125c <Transmit_data_to_usb+0x10c>
	case MSG_ID_IMU_MAG :
		HAL_UART_Transmit_IT(&huart4, (uint8_t*)message_appli.data, 50);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	2232      	movs	r2, #50	; 0x32
 8001242:	4619      	mov	r1, r3
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <Transmit_data_to_usb+0x118>)
 8001246:	f009 ff63 	bl	800b110 <HAL_UART_Transmit_IT>
		break;
 800124a:	e007      	b.n	800125c <Transmit_data_to_usb+0x10c>
	case MSG_ID_IMU_GYR :
		HAL_UART_Transmit_IT(&huart4,(uint8_t*)message_appli.data, 50);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2232      	movs	r2, #50	; 0x32
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <Transmit_data_to_usb+0x118>)
 8001254:	f009 ff5c 	bl	800b110 <HAL_UART_Transmit_IT>
		break;
 8001258:	e000      	b.n	800125c <Transmit_data_to_usb+0x10c>
	default :
		break;
 800125a:	bf00      	nop
	}
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200005e8 	.word	0x200005e8
 8001268:	20000bcc 	.word	0x20000bcc

0800126c <StartUart>:

void StartUart(void const * argument)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8001278:	f00c fb5e 	bl	800d938 <xTaskGetTickCount>
 800127c:	4603      	mov	r3, r0
 800127e:	60bb      	str	r3, [r7, #8]
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {

	  Transmit_data_to_usb();
 8001280:	f7ff ff66 	bl	8001150 <Transmit_data_to_usb>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	4618      	mov	r0, r3
 800128c:	f00c f998 	bl	800d5c0 <vTaskDelayUntil>
	  Transmit_data_to_usb();
 8001290:	e7f6      	b.n	8001280 <StartUart+0x14>

08001292 <StartIMU>:
  }
  /* USER CODE END 5 */
}

void StartIMU(void const * argument)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(500);
 800129a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800129e:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80012a0:	f00c fb4a 	bl	800d938 <xTaskGetTickCount>
 80012a4:	4603      	mov	r3, r0
 80012a6:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  for(;;)
  {

	  IMU_Receive_Transmit_Data();
 80012a8:	f7ff fee0 	bl	800106c <IMU_Receive_Transmit_Data>
	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80012ac:	f107 0308 	add.w	r3, r7, #8
 80012b0:	68f9      	ldr	r1, [r7, #12]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f00c f984 	bl	800d5c0 <vTaskDelayUntil>
	  IMU_Receive_Transmit_Data();
 80012b8:	e7f6      	b.n	80012a8 <StartIMU+0x16>

080012ba <StartGPS>:
  }
  /* USER CODE END 5 */
}

void StartGPS(void const * argument)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b084      	sub	sp, #16
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 80012c2:	2364      	movs	r3, #100	; 0x64
 80012c4:	60fb      	str	r3, [r7, #12]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80012c6:	f00c fb37 	bl	800d938 <xTaskGetTickCount>
 80012ca:	4603      	mov	r3, r0
 80012cc:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  GetData_GPS();
 80012ce:	f7ff fed3 	bl	8001078 <GetData_GPS>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	4618      	mov	r0, r3
 80012da:	f00c f971 	bl	800d5c0 <vTaskDelayUntil>
	  GetData_GPS();
 80012de:	e7f6      	b.n	80012ce <StartGPS+0x14>

080012e0 <StartLidar>:
  }
  /* USER CODE END 5 */
}

void StartLidar(void const * argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0a2      	sub	sp, #136	; 0x88
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100);
 80012e8:	2364      	movs	r3, #100	; 0x64
 80012ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80012ee:	f00c fb23 	bl	800d938 <xTaskGetTickCount>
 80012f2:	4603      	mov	r3, r0
 80012f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  /* Infinite loop */
  for(;;)
  {
	  HAL_StatusTypeDef status = HAL_UART_Receive(&huart3, data_buffer, LIDAR_DATA_LENGTH, HAL_MAX_DELAY);
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	222f      	movs	r2, #47	; 0x2f
 80012fc:	4915      	ldr	r1, [pc, #84]	; (8001354 <StartLidar+0x74>)
 80012fe:	4816      	ldr	r0, [pc, #88]	; (8001358 <StartLidar+0x78>)
 8001300:	f009 fe34 	bl	800af6c <HAL_UART_Receive>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

	  if(status == HAL_OK)
 800130a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <StartLidar+0x64>
	  {
	      // Vérifiez le CRC
		  if(CalCRC8(data_buffer, LIDAR_DATA_LENGTH - 1) == data_buffer[LIDAR_DATA_LENGTH - 1])
 8001312:	212e      	movs	r1, #46	; 0x2e
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <StartLidar+0x74>)
 8001316:	f000 fa4b 	bl	80017b0 <CalCRC8>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <StartLidar+0x74>)
 8001320:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001324:	429a      	cmp	r2, r3
 8001326:	d10d      	bne.n	8001344 <StartLidar+0x64>
	      {
	          // Assigner les valeurs
	          LiDARFrameTypeDef frame = AssignValues(data_buffer);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4909      	ldr	r1, [pc, #36]	; (8001354 <StartLidar+0x74>)
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fa66 	bl	8001800 <AssignValues>
	          MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_LIDAR, NULL,&frame);
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <StartLidar+0x7c>)
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	2200      	movs	r2, #0
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	f000 fb86 	bl	8001a50 <MESSAGE_SendMailbox>

	       }
	   }

	vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8001344:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001348:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800134c:	4618      	mov	r0, r3
 800134e:	f00c f937 	bl	800d5c0 <vTaskDelayUntil>
  {
 8001352:	e7d0      	b.n	80012f6 <StartLidar+0x16>
 8001354:	20000214 	.word	0x20000214
 8001358:	20000ddc 	.word	0x20000ddc
 800135c:	200005e8 	.word	0x200005e8

08001360 <GLOBVAR_Init>:

/*
 * @brief  Initialization of global variables
 *
 */
void GLOBVAR_Init(void) {
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	current_pressure_hPa=0.0;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <GLOBVAR_Init+0x88>)
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
	current_temperature_degC=0.0;
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <GLOBVAR_Init+0x8c>)
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
	current_humidity_perc=0.0;
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <GLOBVAR_Init+0x90>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

	current_acceleration_mg.x=0.0;
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <GLOBVAR_Init+0x94>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
	current_acceleration_mg.y=0.0;
 8001382:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <GLOBVAR_Init+0x94>)
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
	current_acceleration_mg.z=0.0;
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <GLOBVAR_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]

	current_angular_rate_mdps.x=0.0;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <GLOBVAR_Init+0x98>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
	current_angular_rate_mdps.y=0.0;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <GLOBVAR_Init+0x98>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
	current_angular_rate_mdps.z=0.0;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <GLOBVAR_Init+0x98>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]

	current_magnetic_mG.x=0.0;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <GLOBVAR_Init+0x9c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
	current_magnetic_mG.y=0.0;
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <GLOBVAR_Init+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	605a      	str	r2, [r3, #4]
	current_magnetic_mG.z=0.0;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <GLOBVAR_Init+0x9c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]

	gpsCoords.alt=0.0;
 80013b2:	4913      	ldr	r1, [pc, #76]	; (8001400 <GLOBVAR_Init+0xa0>)
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	gpsCoords.lat=0.0;
 80013c0:	490f      	ldr	r1, [pc, #60]	; (8001400 <GLOBVAR_Init+0xa0>)
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9c1 2300 	strd	r2, r3, [r1]
	gpsCoords.lon=0.0;
 80013ce:	490c      	ldr	r1, [pc, #48]	; (8001400 <GLOBVAR_Init+0xa0>)
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	e9c1 2302 	strd	r2, r3, [r1, #8]


}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000334 	.word	0x20000334
 80013ec:	20000338 	.word	0x20000338
 80013f0:	2000033c 	.word	0x2000033c
 80013f4:	20000310 	.word	0x20000310
 80013f8:	2000031c 	.word	0x2000031c
 80013fc:	20000328 	.word	0x20000328
 8001400:	20000448 	.word	0x20000448

08001404 <IMU_init>:




void IMU_init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	hts221_io.Address = HTS221_I2C_ADDRESS;
 8001408:	4b57      	ldr	r3, [pc, #348]	; (8001568 <IMU_init+0x164>)
 800140a:	22bf      	movs	r2, #191	; 0xbf
 800140c:	731a      	strb	r2, [r3, #12]
	hts221_io.BusType = HTS221_I2C_BUS;
 800140e:	4b56      	ldr	r3, [pc, #344]	; (8001568 <IMU_init+0x164>)
 8001410:	2200      	movs	r2, #0
 8001412:	609a      	str	r2, [r3, #8]
	hts221_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001414:	4b54      	ldr	r3, [pc, #336]	; (8001568 <IMU_init+0x164>)
 8001416:	4a55      	ldr	r2, [pc, #340]	; (800156c <IMU_init+0x168>)
 8001418:	601a      	str	r2, [r3, #0]
	hts221_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 800141a:	4b53      	ldr	r3, [pc, #332]	; (8001568 <IMU_init+0x164>)
 800141c:	4a54      	ldr	r2, [pc, #336]	; (8001570 <IMU_init+0x16c>)
 800141e:	605a      	str	r2, [r3, #4]
	hts221_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 8001420:	4b51      	ldr	r3, [pc, #324]	; (8001568 <IMU_init+0x164>)
 8001422:	4a54      	ldr	r2, [pc, #336]	; (8001574 <IMU_init+0x170>)
 8001424:	615a      	str	r2, [r3, #20]
	hts221_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001426:	4b50      	ldr	r3, [pc, #320]	; (8001568 <IMU_init+0x164>)
 8001428:	4a53      	ldr	r2, [pc, #332]	; (8001578 <IMU_init+0x174>)
 800142a:	611a      	str	r2, [r3, #16]
	hts221_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800142c:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <IMU_init+0x164>)
 800142e:	4a53      	ldr	r2, [pc, #332]	; (800157c <IMU_init+0x178>)
 8001430:	619a      	str	r2, [r3, #24]
	hts221_io.Delay = HAL_Delay;
 8001432:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <IMU_init+0x164>)
 8001434:	4a52      	ldr	r2, [pc, #328]	; (8001580 <IMU_init+0x17c>)
 8001436:	61da      	str	r2, [r3, #28]

	/* Init hts221 */
	if (HTS221_RegisterBusIO(&Handler_hts221, &hts221_io)!=0) {
 8001438:	494b      	ldr	r1, [pc, #300]	; (8001568 <IMU_init+0x164>)
 800143a:	4852      	ldr	r0, [pc, #328]	; (8001584 <IMU_init+0x180>)
 800143c:	f002 f978 	bl	8003730 <HTS221_RegisterBusIO>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d000      	beq.n	8001448 <IMU_init+0x44>
		while(1);
 8001446:	e7fe      	b.n	8001446 <IMU_init+0x42>
	}

	if (HTS221_Init(&Handler_hts221)!=0) {
 8001448:	484e      	ldr	r0, [pc, #312]	; (8001584 <IMU_init+0x180>)
 800144a:	f002 f9bb 	bl	80037c4 <HTS221_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d000      	beq.n	8001456 <IMU_init+0x52>
		while (1);
 8001454:	e7fe      	b.n	8001454 <IMU_init+0x50>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_XL;
 8001456:	4b4c      	ldr	r3, [pc, #304]	; (8001588 <IMU_init+0x184>)
 8001458:	2233      	movs	r2, #51	; 0x33
 800145a:	731a      	strb	r2, [r3, #12]
	lsm303agr_io.BusType = LSM303AGR_I2C_BUS;
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <IMU_init+0x184>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
	lsm303agr_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001462:	4b49      	ldr	r3, [pc, #292]	; (8001588 <IMU_init+0x184>)
 8001464:	4a41      	ldr	r2, [pc, #260]	; (800156c <IMU_init+0x168>)
 8001466:	601a      	str	r2, [r3, #0]
	lsm303agr_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001468:	4b47      	ldr	r3, [pc, #284]	; (8001588 <IMU_init+0x184>)
 800146a:	4a41      	ldr	r2, [pc, #260]	; (8001570 <IMU_init+0x16c>)
 800146c:	605a      	str	r2, [r3, #4]
	lsm303agr_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <IMU_init+0x184>)
 8001470:	4a40      	ldr	r2, [pc, #256]	; (8001574 <IMU_init+0x170>)
 8001472:	615a      	str	r2, [r3, #20]
	lsm303agr_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001474:	4b44      	ldr	r3, [pc, #272]	; (8001588 <IMU_init+0x184>)
 8001476:	4a40      	ldr	r2, [pc, #256]	; (8001578 <IMU_init+0x174>)
 8001478:	611a      	str	r2, [r3, #16]
	lsm303agr_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800147a:	4b43      	ldr	r3, [pc, #268]	; (8001588 <IMU_init+0x184>)
 800147c:	4a3f      	ldr	r2, [pc, #252]	; (800157c <IMU_init+0x178>)
 800147e:	619a      	str	r2, [r3, #24]
	lsm303agr_io.Delay = HAL_Delay;
 8001480:	4b41      	ldr	r3, [pc, #260]	; (8001588 <IMU_init+0x184>)
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <IMU_init+0x17c>)
 8001484:	61da      	str	r2, [r3, #28]

	/* Init lsm303agr */
	if (LSM303AGR_ACC_RegisterBusIO(&Handler_lsm303agr_acc, &lsm303agr_io)!=0) {
 8001486:	4940      	ldr	r1, [pc, #256]	; (8001588 <IMU_init+0x184>)
 8001488:	4840      	ldr	r0, [pc, #256]	; (800158c <IMU_init+0x188>)
 800148a:	f003 f8fb 	bl	8004684 <LSM303AGR_ACC_RegisterBusIO>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d000      	beq.n	8001496 <IMU_init+0x92>
		while(1);
 8001494:	e7fe      	b.n	8001494 <IMU_init+0x90>
	}

	lsm303agr_io.Address = LSM303AGR_I2C_ADD_MG;
 8001496:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <IMU_init+0x184>)
 8001498:	223d      	movs	r2, #61	; 0x3d
 800149a:	731a      	strb	r2, [r3, #12]
	if (LSM303AGR_MAG_RegisterBusIO(&Handler_lsm303agr_mag, &lsm303agr_io)!=0) {
 800149c:	493a      	ldr	r1, [pc, #232]	; (8001588 <IMU_init+0x184>)
 800149e:	483c      	ldr	r0, [pc, #240]	; (8001590 <IMU_init+0x18c>)
 80014a0:	f003 fae0 	bl	8004a64 <LSM303AGR_MAG_RegisterBusIO>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d000      	beq.n	80014ac <IMU_init+0xa8>
		while(1);
 80014aa:	e7fe      	b.n	80014aa <IMU_init+0xa6>
	}

	if (LSM303AGR_ACC_Init(&Handler_lsm303agr_acc)!=0) {
 80014ac:	4837      	ldr	r0, [pc, #220]	; (800158c <IMU_init+0x188>)
 80014ae:	f003 f953 	bl	8004758 <LSM303AGR_ACC_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d000      	beq.n	80014ba <IMU_init+0xb6>
		while (1);
 80014b8:	e7fe      	b.n	80014b8 <IMU_init+0xb4>
	}

	if (LSM303AGR_MAG_Init(&Handler_lsm303agr_mag)!=0) {
 80014ba:	4835      	ldr	r0, [pc, #212]	; (8001590 <IMU_init+0x18c>)
 80014bc:	f003 fb36 	bl	8004b2c <LSM303AGR_MAG_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d000      	beq.n	80014c8 <IMU_init+0xc4>
		while (1);
 80014c6:	e7fe      	b.n	80014c6 <IMU_init+0xc2>
	}


	lsm6dls_io.Address = LSM6DSL_I2C_ADD_H;
 80014c8:	4b32      	ldr	r3, [pc, #200]	; (8001594 <IMU_init+0x190>)
 80014ca:	22d7      	movs	r2, #215	; 0xd7
 80014cc:	731a      	strb	r2, [r3, #12]
	lsm6dls_io.BusType = LSM6DSL_I2C_BUS;
 80014ce:	4b31      	ldr	r3, [pc, #196]	; (8001594 <IMU_init+0x190>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
	lsm6dls_io.Init = CUSTOM_HTS221_0_I2C_Init;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <IMU_init+0x190>)
 80014d6:	4a25      	ldr	r2, [pc, #148]	; (800156c <IMU_init+0x168>)
 80014d8:	601a      	str	r2, [r3, #0]
	lsm6dls_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <IMU_init+0x190>)
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <IMU_init+0x16c>)
 80014de:	605a      	str	r2, [r3, #4]
	lsm6dls_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <IMU_init+0x190>)
 80014e2:	4a24      	ldr	r2, [pc, #144]	; (8001574 <IMU_init+0x170>)
 80014e4:	615a      	str	r2, [r3, #20]
	lsm6dls_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <IMU_init+0x190>)
 80014e8:	4a23      	ldr	r2, [pc, #140]	; (8001578 <IMU_init+0x174>)
 80014ea:	611a      	str	r2, [r3, #16]
	lsm6dls_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 80014ec:	4b29      	ldr	r3, [pc, #164]	; (8001594 <IMU_init+0x190>)
 80014ee:	4a23      	ldr	r2, [pc, #140]	; (800157c <IMU_init+0x178>)
 80014f0:	619a      	str	r2, [r3, #24]
	lsm6dls_io.Delay = HAL_Delay;
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <IMU_init+0x190>)
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <IMU_init+0x17c>)
 80014f6:	61da      	str	r2, [r3, #28]

	/* Init LSM6DSL */
	if (LSM6DSL_RegisterBusIO(&Handler_lsm6dsl, &lsm6dls_io)!=0) {
 80014f8:	4926      	ldr	r1, [pc, #152]	; (8001594 <IMU_init+0x190>)
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <IMU_init+0x194>)
 80014fc:	f003 fff0 	bl	80054e0 <LSM6DSL_RegisterBusIO>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d000      	beq.n	8001508 <IMU_init+0x104>
		while(1);
 8001506:	e7fe      	b.n	8001506 <IMU_init+0x102>
	}

	if (LSM6DSL_Init(&Handler_lsm6dsl)!=0) {
 8001508:	4823      	ldr	r0, [pc, #140]	; (8001598 <IMU_init+0x194>)
 800150a:	f004 f853 	bl	80055b4 <LSM6DSL_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d000      	beq.n	8001516 <IMU_init+0x112>
		while (1);
 8001514:	e7fe      	b.n	8001514 <IMU_init+0x110>
	}


	lps22hb_io.Address = LPS22HB_I2C_ADD_H;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <IMU_init+0x198>)
 8001518:	22bb      	movs	r2, #187	; 0xbb
 800151a:	731a      	strb	r2, [r3, #12]
	lps22hb_io.BusType = LPS22HB_I2C_BUS;
 800151c:	4b1f      	ldr	r3, [pc, #124]	; (800159c <IMU_init+0x198>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
	lps22hb_io.Init = CUSTOM_HTS221_0_I2C_Init;
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <IMU_init+0x198>)
 8001524:	4a11      	ldr	r2, [pc, #68]	; (800156c <IMU_init+0x168>)
 8001526:	601a      	str	r2, [r3, #0]
	lps22hb_io.DeInit = CUSTOM_HTS221_0_I2C_DeInit;
 8001528:	4b1c      	ldr	r3, [pc, #112]	; (800159c <IMU_init+0x198>)
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <IMU_init+0x16c>)
 800152c:	605a      	str	r2, [r3, #4]
	lps22hb_io.ReadReg = CUSTOM_HTS221_0_I2C_ReadReg;
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <IMU_init+0x198>)
 8001530:	4a10      	ldr	r2, [pc, #64]	; (8001574 <IMU_init+0x170>)
 8001532:	615a      	str	r2, [r3, #20]
	lps22hb_io.WriteReg = CUSTOM_HTS221_0_I2C_WriteReg;
 8001534:	4b19      	ldr	r3, [pc, #100]	; (800159c <IMU_init+0x198>)
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <IMU_init+0x174>)
 8001538:	611a      	str	r2, [r3, #16]
	lps22hb_io.GetTick = (int32_t (*)(void)) HAL_GetTick;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <IMU_init+0x198>)
 800153c:	4a0f      	ldr	r2, [pc, #60]	; (800157c <IMU_init+0x178>)
 800153e:	619a      	str	r2, [r3, #24]
	lps22hb_io.Delay = HAL_Delay;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <IMU_init+0x198>)
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <IMU_init+0x17c>)
 8001544:	61da      	str	r2, [r3, #28]

	/* Init lps22hb */
	if (LPS22HB_RegisterBusIO(&Handler_lps22hb, &lps22hb_io)!=0) {
 8001546:	4915      	ldr	r1, [pc, #84]	; (800159c <IMU_init+0x198>)
 8001548:	4815      	ldr	r0, [pc, #84]	; (80015a0 <IMU_init+0x19c>)
 800154a:	f002 fd9f 	bl	800408c <LPS22HB_RegisterBusIO>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d000      	beq.n	8001556 <IMU_init+0x152>
		while(1);
 8001554:	e7fe      	b.n	8001554 <IMU_init+0x150>
	}

	if (LPS22HB_Init(&Handler_lps22hb)!=0) {
 8001556:	4812      	ldr	r0, [pc, #72]	; (80015a0 <IMU_init+0x19c>)
 8001558:	f002 fe02 	bl	8004160 <LPS22HB_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d000      	beq.n	8001564 <IMU_init+0x160>
		while (1);
 8001562:	e7fe      	b.n	8001562 <IMU_init+0x15e>
	}



}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000460 	.word	0x20000460
 800156c:	08003219 	.word	0x08003219
 8001570:	08003295 	.word	0x08003295
 8001574:	08003349 	.word	0x08003349
 8001578:	080032e5 	.word	0x080032e5
 800157c:	08005d79 	.word	0x08005d79
 8001580:	08005d91 	.word	0x08005d91
 8001584:	20000480 	.word	0x20000480
 8001588:	200004b4 	.word	0x200004b4
 800158c:	200004d4 	.word	0x200004d4
 8001590:	20000508 	.word	0x20000508
 8001594:	2000053c 	.word	0x2000053c
 8001598:	2000055c 	.word	0x2000055c
 800159c:	20000594 	.word	0x20000594
 80015a0:	200005b4 	.word	0x200005b4

080015a4 <IMU_enable>:

void IMU_enable(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	if(HTS221_HUM_Enable(&Handler_hts221)!=0){
 80015a8:	4819      	ldr	r0, [pc, #100]	; (8001610 <IMU_enable+0x6c>)
 80015aa:	f002 f926 	bl	80037fa <HTS221_HUM_Enable>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d000      	beq.n	80015b6 <IMU_enable+0x12>
		while (1);
 80015b4:	e7fe      	b.n	80015b4 <IMU_enable+0x10>
	}

	if(HTS221_TEMP_Enable(&Handler_hts221)!=0){
 80015b6:	4816      	ldr	r0, [pc, #88]	; (8001610 <IMU_enable+0x6c>)
 80015b8:	f002 f9cc 	bl	8003954 <HTS221_TEMP_Enable>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d000      	beq.n	80015c4 <IMU_enable+0x20>
		while (1);
 80015c2:	e7fe      	b.n	80015c2 <IMU_enable+0x1e>
	}

	if (LSM303AGR_ACC_Enable(&Handler_lsm303agr_acc)!=0) {
 80015c4:	4813      	ldr	r0, [pc, #76]	; (8001614 <IMU_enable+0x70>)
 80015c6:	f003 f908 	bl	80047da <LSM303AGR_ACC_Enable>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d000      	beq.n	80015d2 <IMU_enable+0x2e>
		while (1);
 80015d0:	e7fe      	b.n	80015d0 <IMU_enable+0x2c>
	}

	if (LSM303AGR_MAG_Enable(&Handler_lsm303agr_mag)!=0) {
 80015d2:	4811      	ldr	r0, [pc, #68]	; (8001618 <IMU_enable+0x74>)
 80015d4:	f003 fae7 	bl	8004ba6 <LSM303AGR_MAG_Enable>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d000      	beq.n	80015e0 <IMU_enable+0x3c>
		while (1);
 80015de:	e7fe      	b.n	80015de <IMU_enable+0x3a>
	}

	if (LSM6DSL_ACC_Enable(&Handler_lsm6dsl)!=0) {
 80015e0:	480e      	ldr	r0, [pc, #56]	; (800161c <IMU_enable+0x78>)
 80015e2:	f004 f850 	bl	8005686 <LSM6DSL_ACC_Enable>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d000      	beq.n	80015ee <IMU_enable+0x4a>
		while (1);
 80015ec:	e7fe      	b.n	80015ec <IMU_enable+0x48>
	}

	if (LSM6DSL_GYRO_Enable(&Handler_lsm6dsl)!=0) {
 80015ee:	480b      	ldr	r0, [pc, #44]	; (800161c <IMU_enable+0x78>)
 80015f0:	f004 f86d 	bl	80056ce <LSM6DSL_GYRO_Enable>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d000      	beq.n	80015fc <IMU_enable+0x58>
		while (1);
 80015fa:	e7fe      	b.n	80015fa <IMU_enable+0x56>
	}
	if (LPS22HB_PRESS_Enable(&Handler_lps22hb)!=0) {
 80015fc:	4808      	ldr	r0, [pc, #32]	; (8001620 <IMU_enable+0x7c>)
 80015fe:	f002 fdca 	bl	8004196 <LPS22HB_PRESS_Enable>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d000      	beq.n	800160a <IMU_enable+0x66>
		while (1);
 8001608:	e7fe      	b.n	8001608 <IMU_enable+0x64>
	}
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000480 	.word	0x20000480
 8001614:	200004d4 	.word	0x200004d4
 8001618:	20000508 	.word	0x20000508
 800161c:	2000055c 	.word	0x2000055c
 8001620:	200005b4 	.word	0x200005b4

08001624 <IMU_GetData>:

void IMU_GetData(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af02      	add	r7, sp, #8

	 HTS221_HUM_GetHumidity(&Handler_hts221, &current_humidity_perc);
 800162a:	4949      	ldr	r1, [pc, #292]	; (8001750 <IMU_GetData+0x12c>)
 800162c:	4849      	ldr	r0, [pc, #292]	; (8001754 <IMU_GetData+0x130>)
 800162e:	f002 f909 	bl	8003844 <HTS221_HUM_GetHumidity>
	 HTS221_TEMP_GetTemperature(&Handler_hts221, &current_temperature_degC);
 8001632:	4949      	ldr	r1, [pc, #292]	; (8001758 <IMU_GetData+0x134>)
 8001634:	4847      	ldr	r0, [pc, #284]	; (8001754 <IMU_GetData+0x130>)
 8001636:	f002 f9b2 	bl	800399e <HTS221_TEMP_GetTemperature>
	 LSM303AGR_ACC_GetAxes(&Handler_lsm303agr_acc, &current_acceleration_mg);
 800163a:	4948      	ldr	r1, [pc, #288]	; (800175c <IMU_GetData+0x138>)
 800163c:	4848      	ldr	r0, [pc, #288]	; (8001760 <IMU_GetData+0x13c>)
 800163e:	f003 f9a1 	bl	8004984 <LSM303AGR_ACC_GetAxes>
	 LSM303AGR_MAG_GetAxes(&Handler_lsm303agr_mag, &current_magnetic_mG);
 8001642:	4948      	ldr	r1, [pc, #288]	; (8001764 <IMU_GetData+0x140>)
 8001644:	4848      	ldr	r0, [pc, #288]	; (8001768 <IMU_GetData+0x144>)
 8001646:	f003 fade 	bl	8004c06 <LSM303AGR_MAG_GetAxes>
	 LPS22HB_PRESS_GetPressure(&Handler_lps22hb, &current_pressure_hPa);
 800164a:	4948      	ldr	r1, [pc, #288]	; (800176c <IMU_GetData+0x148>)
 800164c:	4848      	ldr	r0, [pc, #288]	; (8001770 <IMU_GetData+0x14c>)
 800164e:	f002 fdc6 	bl	80041de <LPS22HB_PRESS_GetPressure>
	 LSM6DSL_GYRO_GetAxes(&Handler_lsm6dsl, &current_angular_rate_mdps);
 8001652:	4948      	ldr	r1, [pc, #288]	; (8001774 <IMU_GetData+0x150>)
 8001654:	4848      	ldr	r0, [pc, #288]	; (8001778 <IMU_GetData+0x154>)
 8001656:	f004 f8b1 	bl	80057bc <LSM6DSL_GYRO_GetAxes>

	 snprintf((char*)message_temp,35,"temperature = %d\r\n",(int)current_temperature_degC);
 800165a:	4b3f      	ldr	r3, [pc, #252]	; (8001758 <IMU_GetData+0x134>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001664:	ee17 3a90 	vmov	r3, s15
 8001668:	4a44      	ldr	r2, [pc, #272]	; (800177c <IMU_GetData+0x158>)
 800166a:	2123      	movs	r1, #35	; 0x23
 800166c:	4844      	ldr	r0, [pc, #272]	; (8001780 <IMU_GetData+0x15c>)
 800166e:	f00d fc39 	bl	800eee4 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_TEMP, NULL,message_temp);
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <IMU_GetData+0x160>)
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	4b42      	ldr	r3, [pc, #264]	; (8001780 <IMU_GetData+0x15c>)
 8001678:	2200      	movs	r2, #0
 800167a:	2120      	movs	r1, #32
 800167c:	f000 f9e8 	bl	8001a50 <MESSAGE_SendMailbox>
	 snprintf((char*)message_hum,35,"humidite = %d\r\n",(int)current_humidity_perc);
 8001680:	4b33      	ldr	r3, [pc, #204]	; (8001750 <IMU_GetData+0x12c>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800168a:	ee17 3a90 	vmov	r3, s15
 800168e:	4a3e      	ldr	r2, [pc, #248]	; (8001788 <IMU_GetData+0x164>)
 8001690:	2123      	movs	r1, #35	; 0x23
 8001692:	483e      	ldr	r0, [pc, #248]	; (800178c <IMU_GetData+0x168>)
 8001694:	f00d fc26 	bl	800eee4 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_HUM, NULL,message_hum);
 8001698:	4b3a      	ldr	r3, [pc, #232]	; (8001784 <IMU_GetData+0x160>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <IMU_GetData+0x168>)
 800169e:	2200      	movs	r2, #0
 80016a0:	2121      	movs	r1, #33	; 0x21
 80016a2:	f000 f9d5 	bl	8001a50 <MESSAGE_SendMailbox>
	 snprintf((char*)message_press,35,"pression = %d\r\n",(int)current_pressure_hPa);
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <IMU_GetData+0x148>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b0:	ee17 3a90 	vmov	r3, s15
 80016b4:	4a36      	ldr	r2, [pc, #216]	; (8001790 <IMU_GetData+0x16c>)
 80016b6:	2123      	movs	r1, #35	; 0x23
 80016b8:	4836      	ldr	r0, [pc, #216]	; (8001794 <IMU_GetData+0x170>)
 80016ba:	f00d fc13 	bl	800eee4 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_PRESS, NULL,message_press);
 80016be:	4b31      	ldr	r3, [pc, #196]	; (8001784 <IMU_GetData+0x160>)
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	4b34      	ldr	r3, [pc, #208]	; (8001794 <IMU_GetData+0x170>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	2125      	movs	r1, #37	; 0x25
 80016c8:	f000 f9c2 	bl	8001a50 <MESSAGE_SendMailbox>
	 snprintf((char*)message_acc1,50,"accelerometre : x =%d y=%d z=%d\r\n", (int)current_acceleration_mg.x, (int)current_acceleration_mg.y, (int)current_acceleration_mg.z);
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <IMU_GetData+0x138>)
 80016ce:	6819      	ldr	r1, [r3, #0]
 80016d0:	4b22      	ldr	r3, [pc, #136]	; (800175c <IMU_GetData+0x138>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a21      	ldr	r2, [pc, #132]	; (800175c <IMU_GetData+0x138>)
 80016d6:	6892      	ldr	r2, [r2, #8]
 80016d8:	9201      	str	r2, [sp, #4]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	460b      	mov	r3, r1
 80016de:	4a2e      	ldr	r2, [pc, #184]	; (8001798 <IMU_GetData+0x174>)
 80016e0:	2132      	movs	r1, #50	; 0x32
 80016e2:	482e      	ldr	r0, [pc, #184]	; (800179c <IMU_GetData+0x178>)
 80016e4:	f00d fbfe 	bl	800eee4 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_ACC, NULL,message_acc1);
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <IMU_GetData+0x160>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	4b2b      	ldr	r3, [pc, #172]	; (800179c <IMU_GetData+0x178>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	2124      	movs	r1, #36	; 0x24
 80016f2:	f000 f9ad 	bl	8001a50 <MESSAGE_SendMailbox>
	 snprintf((char*)message_gyro,50,"gyroscope : x =%d y=%d z=%d\r\n",(int)current_angular_rate_mdps.x, (int)current_angular_rate_mdps.y, (int)current_angular_rate_mdps.z);
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <IMU_GetData+0x150>)
 80016f8:	6819      	ldr	r1, [r3, #0]
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <IMU_GetData+0x150>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <IMU_GetData+0x150>)
 8001700:	6892      	ldr	r2, [r2, #8]
 8001702:	9201      	str	r2, [sp, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	460b      	mov	r3, r1
 8001708:	4a25      	ldr	r2, [pc, #148]	; (80017a0 <IMU_GetData+0x17c>)
 800170a:	2132      	movs	r1, #50	; 0x32
 800170c:	4825      	ldr	r0, [pc, #148]	; (80017a4 <IMU_GetData+0x180>)
 800170e:	f00d fbe9 	bl	800eee4 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_GYR, NULL,message_gyro);
 8001712:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <IMU_GetData+0x160>)
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <IMU_GetData+0x180>)
 8001718:	2200      	movs	r2, #0
 800171a:	2122      	movs	r1, #34	; 0x22
 800171c:	f000 f998 	bl	8001a50 <MESSAGE_SendMailbox>
	 snprintf((char*)message_mag,50,"magnétomètre : x =%d y=%d z=%d\r\n",(int)current_magnetic_mG.x, (int)current_magnetic_mG.y, (int)current_magnetic_mG.z);
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <IMU_GetData+0x140>)
 8001722:	6819      	ldr	r1, [r3, #0]
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <IMU_GetData+0x140>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <IMU_GetData+0x140>)
 800172a:	6892      	ldr	r2, [r2, #8]
 800172c:	9201      	str	r2, [sp, #4]
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	460b      	mov	r3, r1
 8001732:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <IMU_GetData+0x184>)
 8001734:	2132      	movs	r1, #50	; 0x32
 8001736:	481d      	ldr	r0, [pc, #116]	; (80017ac <IMU_GetData+0x188>)
 8001738:	f00d fbd4 	bl	800eee4 <sniprintf>
	 MESSAGE_SendMailbox(Appli_Mailbox, MSG_ID_IMU_MAG, NULL,message_mag);
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <IMU_GetData+0x160>)
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <IMU_GetData+0x188>)
 8001742:	2200      	movs	r2, #0
 8001744:	2123      	movs	r1, #35	; 0x23
 8001746:	f000 f983 	bl	8001a50 <MESSAGE_SendMailbox>

}
 800174a:	bf00      	nop
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000033c 	.word	0x2000033c
 8001754:	20000480 	.word	0x20000480
 8001758:	20000338 	.word	0x20000338
 800175c:	20000310 	.word	0x20000310
 8001760:	200004d4 	.word	0x200004d4
 8001764:	20000328 	.word	0x20000328
 8001768:	20000508 	.word	0x20000508
 800176c:	20000334 	.word	0x20000334
 8001770:	200005b4 	.word	0x200005b4
 8001774:	2000031c 	.word	0x2000031c
 8001778:	2000055c 	.word	0x2000055c
 800177c:	080121e0 	.word	0x080121e0
 8001780:	20000388 	.word	0x20000388
 8001784:	200005e8 	.word	0x200005e8
 8001788:	080121f4 	.word	0x080121f4
 800178c:	20000364 	.word	0x20000364
 8001790:	08012204 	.word	0x08012204
 8001794:	20000340 	.word	0x20000340
 8001798:	08012214 	.word	0x08012214
 800179c:	200003ac 	.word	0x200003ac
 80017a0:	08012238 	.word	0x08012238
 80017a4:	200003e0 	.word	0x200003e0
 80017a8:	08012258 	.word	0x08012258
 80017ac:	20000414 	.word	0x20000414

080017b0 <CalCRC8>:
#include <math.h>
#include <string.h>
#include "lidar.h"

uint8_t CalCRC8(uint8_t package[], uint8_t len)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]
	uint16_t i;
	for (i = 0; i < len; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	81bb      	strh	r3, [r7, #12]
 80017c4:	e00d      	b.n	80017e2 <CalCRC8+0x32>
	{
		crc = CrcTable[(crc ^ package[i]) & 0xff];
 80017c6:	89bb      	ldrh	r3, [r7, #12]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	4053      	eors	r3, r2
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <CalCRC8+0x4c>)
 80017d8:	5c9b      	ldrb	r3, [r3, r2]
 80017da:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < len; i++)
 80017dc:	89bb      	ldrh	r3, [r7, #12]
 80017de:	3301      	adds	r3, #1
 80017e0:	81bb      	strh	r3, [r7, #12]
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	89ba      	ldrh	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d3ec      	bcc.n	80017c6 <CalCRC8+0x16>
	}
	return crc;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	080122e0 	.word	0x080122e0

08001800 <AssignValues>:

LiDARFrameTypeDef AssignValues(uint8_t package[]){
 8001800:	b580      	push	{r7, lr}
 8001802:	b0a4      	sub	sp, #144	; 0x90
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]

	LiDARFrameTypeDef lf = {0};
 800180a:	f107 030c 	add.w	r3, r7, #12
 800180e:	2271      	movs	r2, #113	; 0x71
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f00d f8d2 	bl	800e9bc <memset>
	uint32_t distance_average = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	uint8_t distance_count = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b

	lf.header = package[0];
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	733b      	strb	r3, [r7, #12]

	lf.ver_len = package[1];
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	785b      	ldrb	r3, [r3, #1]
 800182e:	737b      	strb	r3, [r7, #13]

	lf.speed = (package[3] << 8 | package[2]);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3303      	adds	r3, #3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	3202      	adds	r2, #2
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4313      	orrs	r3, r2
 8001840:	f8c7 300e 	str.w	r3, [r7, #14]

	lf.start_angle = (package[5] << 8 | package[4]) / 100;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	3305      	adds	r3, #5
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	3204      	adds	r2, #4
 8001850:	7812      	ldrb	r2, [r2, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	4a5f      	ldr	r2, [pc, #380]	; (80019d4 <AssignValues+0x1d4>)
 8001856:	fb82 1203 	smull	r1, r2, r2, r3
 800185a:	1152      	asrs	r2, r2, #5
 800185c:	17db      	asrs	r3, r3, #31
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	b29b      	uxth	r3, r3
 8001862:	827b      	strh	r3, [r7, #18]

	lf.end_angle = (package[43] << 8 | package[42])/100; //adding because end angle is 8 or 9 degrees
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	332b      	adds	r3, #43	; 0x2b
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	021b      	lsls	r3, r3, #8
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	322a      	adds	r2, #42	; 0x2a
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	4313      	orrs	r3, r2
 8001874:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <AssignValues+0x1d4>)
 8001876:	fb82 1203 	smull	r1, r2, r2, r3
 800187a:	1152      	asrs	r2, r2, #5
 800187c:	17db      	asrs	r3, r3, #31
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	lf.timestamp = (package[45] << 8 | package[44]);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	332d      	adds	r3, #45	; 0x2d
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	332c      	adds	r3, #44	; 0x2c
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	b21b      	sxth	r3, r3
 8001898:	4313      	orrs	r3, r2
 800189a:	b21b      	sxth	r3, r3
 800189c:	b29b      	uxth	r3, r3
 800189e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

	lf.crc8 = package[46];
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80018a8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

	float angle_step = (lf.end_angle - lf.start_angle)/11;
 80018ac:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80018b0:	461a      	mov	r2, r3
 80018b2:	8a7b      	ldrh	r3, [r7, #18]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <AssignValues+0x1d8>)
 80018b8:	fb82 1203 	smull	r1, r2, r2, r3
 80018bc:	1052      	asrs	r2, r2, #1
 80018be:	17db      	asrs	r3, r3, #31
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	for(int i = 0; i < 12; i++){
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018d4:	e06e      	b.n	80019b4 <AssignValues+0x1b4>
		lf.point[i].angle = lf.start_angle + angle_step*(i);
 80018d6:	8a7b      	ldrh	r3, [r7, #18]
 80018d8:	ee07 3a90 	vmov	s15, r3
 80018dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018ec:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80018f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018fc:	3301      	adds	r3, #1
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	3390      	adds	r3, #144	; 0x90
 8001902:	443b      	add	r3, r7
 8001904:	3b84      	subs	r3, #132	; 0x84
 8001906:	edc3 7a00 	vstr	s15, [r3]
		lf.point[i].distance = (package[8 + i * 3 - 1] << 8 | package[8 + i * 3 - 2]);
 800190a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	3307      	adds	r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	4413      	add	r3, r2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b219      	sxth	r1, r3
 8001920:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	3306      	adds	r3, #6
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	4413      	add	r3, r2
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	b21b      	sxth	r3, r3
 8001934:	430b      	orrs	r3, r1
 8001936:	b21b      	sxth	r3, r3
 8001938:	b29a      	uxth	r2, r3
 800193a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800193e:	3301      	adds	r3, #1
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	3390      	adds	r3, #144	; 0x90
 8001944:	443b      	add	r3, r7
 8001946:	f823 2c80 	strh.w	r2, [r3, #-128]
		lf.point[i].confidence = package[8 + i * 3];
 800194a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	3308      	adds	r3, #8
 8001956:	461a      	mov	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	b29a      	uxth	r2, r3
 8001960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001964:	3301      	adds	r3, #1
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	3390      	adds	r3, #144	; 0x90
 800196a:	443b      	add	r3, r7
 800196c:	f823 2c7e 	strh.w	r2, [r3, #-126]
		if (lf.point[i].confidence >= 180)
 8001970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001974:	3301      	adds	r3, #1
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	3390      	adds	r3, #144	; 0x90
 800197a:	443b      	add	r3, r7
 800197c:	f833 3c7e 	ldrh.w	r3, [r3, #-126]
 8001980:	2bb3      	cmp	r3, #179	; 0xb3
 8001982:	d912      	bls.n	80019aa <AssignValues+0x1aa>
		{
			distance_average += lf.point[i].distance;
 8001984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001988:	3301      	adds	r3, #1
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	3390      	adds	r3, #144	; 0x90
 800198e:	443b      	add	r3, r7
 8001990:	f833 3c80 	ldrh.w	r3, [r3, #-128]
 8001994:	461a      	mov	r2, r3
 8001996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800199a:	4413      	add	r3, r2
 800199c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			distance_count++;
 80019a0:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80019a4:	3301      	adds	r3, #1
 80019a6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	for(int i = 0; i < 12; i++){
 80019aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019ae:	3301      	adds	r3, #1
 80019b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019b8:	2b0b      	cmp	r3, #11
 80019ba:	dd8c      	ble.n	80018d6 <AssignValues+0xd6>

		}
	}
	return lf;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2271      	movs	r2, #113	; 0x71
 80019c6:	4619      	mov	r1, r3
 80019c8:	f00c ffea 	bl	800e9a0 <memcpy>
}
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	3790      	adds	r7, #144	; 0x90
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	51eb851f 	.word	0x51eb851f
 80019d8:	2e8ba2e9 	.word	0x2e8ba2e9

080019dc <MESSAGE_Init>:

//QueueHandle_t IMU_Mailbox;
//QueueHandle_t GPS_Mailbox;
QueueHandle_t Appli_Mailbox;

void  MESSAGE_Init(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	//IMU_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	//GPS_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
	Appli_Mailbox = xQueueCreate(QUEUE_SIZE, sizeof(MESSAGE_Typedef));
 80019e0:	2200      	movs	r2, #0
 80019e2:	210c      	movs	r1, #12
 80019e4:	2020      	movs	r0, #32
 80019e6:	f00b f8e5 	bl	800cbb4 <xQueueGenericCreate>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <MESSAGE_Init+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]

	/* Add queues to registry in order to view them in stm32cube ide */
	//vQueueAddToRegistry(IMU_Mailbox,"IMU Mailbox");
	//vQueueAddToRegistry(GPS_Mailbox,"GPS Mailbox");
	vQueueAddToRegistry(Appli_Mailbox,"Appli Mailbox");
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <MESSAGE_Init+0x24>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <MESSAGE_Init+0x28>)
 80019f6:	4618      	mov	r0, r3
 80019f8:	f00b fc24 	bl	800d244 <vQueueAddToRegistry>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200005e8 	.word	0x200005e8
 8001a04:	0801227c 	.word	0x0801227c

08001a08 <MESSAGE_ReadMailboxNoDelay>:
 *
 * @remark This function is non blocking.
 * If mailbox is empty when calling the function, a message structure is still returned with \ref MSG_ID_NO_MESSAGE
 * in message id field
 */
MESSAGE_Typedef MESSAGE_ReadMailboxNoDelay(QueueHandle_t mbx) {
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
	MESSAGE_Typedef msg= {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

	if (!xQueueReceive(mbx, &msg, 0))  // Pas de message dans la mailbox
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2200      	movs	r2, #0
 8001a24:	4619      	mov	r1, r3
 8001a26:	6838      	ldr	r0, [r7, #0]
 8001a28:	f00b fa1c 	bl	800ce64 <xQueueReceive>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <MESSAGE_ReadMailboxNoDelay+0x2e>
		msg.id=MSG_ID_NO_MESSAGE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	81bb      	strh	r3, [r7, #12]

	return msg;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	461c      	mov	r4, r3
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
	...

08001a50 <MESSAGE_SendMailbox>:
 * @return None
 *
 * @remark This function is non blocking.
 * If mailbox is full when calling the function, error will be ignored silently
 */
void MESSAGE_SendMailbox(QueueHandle_t mbx_dest, uint16_t id, QueueHandle_t mbx_sender, void *data){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
	MESSAGE_Typedef msg;

	msg.id=id;
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	82bb      	strh	r3, [r7, #20]
	msg.sender = &mbx_sender;
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	61bb      	str	r3, [r7, #24]
	msg.data=data;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	61fb      	str	r3, [r7, #28]

	if (!xQueueSend(mbx_dest, &msg, 0)) { // envoi sans attendre
 8001a6c:	f107 0114 	add.w	r1, r7, #20
 8001a70:	2300      	movs	r3, #0
 8001a72:	2200      	movs	r2, #0
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f00b f8f7 	bl	800cc68 <xQueueGenericSend>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <MESSAGE_SendMailbox+0x36>
		printf("Failed to send data, Queue full.\r\n");
 8001a80:	4803      	ldr	r0, [pc, #12]	; (8001a90 <MESSAGE_SendMailbox+0x40>)
 8001a82:	f00d fa21 	bl	800eec8 <puts>
	}
}
 8001a86:	bf00      	nop
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	0801228c 	.word	0x0801228c

08001a94 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	4a06      	ldr	r2, [pc, #24]	; (8001ac4 <vApplicationGetIdleTaskMemory+0x30>)
 8001aaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200005ec 	.word	0x200005ec
 8001ac4:	20000640 	.word	0x20000640

08001ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ace:	f004 f8e3 	bl	8005c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ad2:	f000 f847 	bl	8001b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad6:	f000 fd53 	bl	8002580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ada:	f000 fcf1 	bl	80024c0 <MX_USART2_UART_Init>
  MX_ADC3_Init();
 8001ade:	f000 f893 	bl	8001c08 <MX_ADC3_Init>
  MX_CAN1_Init();
 8001ae2:	f000 f8f5 	bl	8001cd0 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001ae6:	f000 fa2d 	bl	8001f44 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001aea:	f000 fa85 	bl	8001ff8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001aee:	f000 fb87 	bl	8002200 <MX_TIM8_Init>
  MX_UART4_Init();
 8001af2:	f000 fc55 	bl	80023a0 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001af6:	f000 fd13 	bl	8002520 <MX_USART3_UART_Init>
  MX_I2C2_Init();
 8001afa:	f000 f94b 	bl	8001d94 <MX_I2C2_Init>
  MX_UART5_Init();
 8001afe:	f000 fc7f 	bl	8002400 <MX_UART5_Init>
  MX_COMP2_Init();
 8001b02:	f000 f91b 	bl	8001d3c <MX_COMP2_Init>
  MX_SPI2_Init();
 8001b06:	f000 f985 	bl	8001e14 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001b0a:	f000 f9c1 	bl	8001e90 <MX_SPI3_Init>
  MX_SWPMI1_Init();
 8001b0e:	f000 f9f9 	bl	8001f04 <MX_SWPMI1_Init>
  MX_TIM6_Init();
 8001b12:	f000 fb09 	bl	8002128 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001b16:	f000 fb3d 	bl	8002194 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 8001b1a:	f000 fca1 	bl	8002460 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  GLOBVAR_Init();
 8001b1e:	f7ff fc1f 	bl	8001360 <GLOBVAR_Init>

  MESSAGE_Init();
 8001b22:	f7ff ff5b 	bl	80019dc <MESSAGE_Init>

  IMU_init();
 8001b26:	f7ff fc6d 	bl	8001404 <IMU_init>
  IMU_enable();
 8001b2a:	f7ff fd3b 	bl	80015a4 <IMU_enable>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <main+0x94>)
 8001b30:	1d3c      	adds	r4, r7, #4
 8001b32:	461d      	mov	r5, r3
 8001b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f00a feb9 	bl	800c8bc <osThreadCreate>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <main+0x98>)
 8001b4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Tasks_Init();
 8001b50:	f7ff fa2a 	bl	8000fa8 <Tasks_Init>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b54:	f00a feab 	bl	800c8ae <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <main+0x90>
 8001b5a:	bf00      	nop
 8001b5c:	080122bc 	.word	0x080122bc
 8001b60:	20000e60 	.word	0x20000e60

08001b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b096      	sub	sp, #88	; 0x58
 8001b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	2244      	movs	r2, #68	; 0x44
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00c ff22 	bl	800e9bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
 8001b80:	609a      	str	r2, [r3, #8]
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b8a:	f006 fd25 	bl	80085d8 <HAL_PWREx_ControlVoltageScaling>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b94:	f000 fd6f 	bl	8002676 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ba0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ba2:	2310      	movs	r3, #16
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001baa:	2302      	movs	r3, #2
 8001bac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f006 fd5c 	bl	8008684 <HAL_RCC_OscConfig>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001bd2:	f000 fd50 	bl	8002676 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	2104      	movs	r1, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f007 f924 	bl	8008e3c <HAL_RCC_ClockConfig>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001bfa:	f000 fd3c 	bl	8002676 <Error_Handler>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3758      	adds	r7, #88	; 0x58
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <MX_ADC3_Init+0xc0>)
 8001c22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c3e:	2204      	movs	r2, #4
 8001c40:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c62:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001c76:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c7e:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001c80:	f004 fa36 	bl	80060f0 <HAL_ADC_Init>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001c8a:	f000 fcf4 	bl	8002676 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_ADC3_Init+0xc4>)
 8001c90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c92:	2306      	movs	r3, #6
 8001c94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c9a:	237f      	movs	r3, #127	; 0x7f
 8001c9c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <MX_ADC3_Init+0xbc>)
 8001cac:	f004 fb76 	bl	800639c <HAL_ADC_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001cb6:	f000 fcde 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000840 	.word	0x20000840
 8001cc8:	50040200 	.word	0x50040200
 8001ccc:	04300002 	.word	0x04300002

08001cd0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001cd6:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <MX_CAN1_Init+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001cdc:	2210      	movs	r2, #16
 8001cde:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001cee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cf2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d1e:	4805      	ldr	r0, [pc, #20]	; (8001d34 <MX_CAN1_Init+0x64>)
 8001d20:	f004 ff2c 	bl	8006b7c <HAL_CAN_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001d2a:	f000 fca4 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200008a4 	.word	0x200008a4
 8001d38:	40006400 	.word	0x40006400

08001d3c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d42:	4a13      	ldr	r2, [pc, #76]	; (8001d90 <MX_COMP2_Init+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d48:	2270      	movs	r2, #112	; 0x70
 8001d4a:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO1;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_COMP2_Init+0x50>)
 8001d78:	f005 f8a4 	bl	8006ec4 <HAL_COMP_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001d82:	f000 fc78 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200008cc 	.word	0x200008cc
 8001d90:	40010204 	.word	0x40010204

08001d94 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	; (8001e0c <MX_I2C2_Init+0x78>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001d9e:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <MX_I2C2_Init+0x7c>)
 8001da2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001da4:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dce:	480e      	ldr	r0, [pc, #56]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001dd0:	f005 fdb0 	bl	8007934 <HAL_I2C_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001dda:	f000 fc4c 	bl	8002676 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dde:	2100      	movs	r1, #0
 8001de0:	4809      	ldr	r0, [pc, #36]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001de2:	f006 fb53 	bl	800848c <HAL_I2CEx_ConfigAnalogFilter>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001dec:	f000 fc43 	bl	8002676 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001df0:	2100      	movs	r1, #0
 8001df2:	4805      	ldr	r0, [pc, #20]	; (8001e08 <MX_I2C2_Init+0x74>)
 8001df4:	f006 fb95 	bl	8008522 <HAL_I2CEx_ConfigDigitalFilter>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001dfe:	f000 fc3a 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200008f8 	.word	0x200008f8
 8001e0c:	40005800 	.word	0x40005800
 8001e10:	10909cec 	.word	0x10909cec

08001e14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e18:	4b1b      	ldr	r3, [pc, #108]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e1a:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <MX_SPI2_Init+0x78>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	4b1a      	ldr	r3, [pc, #104]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e2c:	4b16      	ldr	r3, [pc, #88]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e2e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e32:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e48:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e62:	2207      	movs	r2, #7
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e6e:	2208      	movs	r2, #8
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_SPI2_Init+0x74>)
 8001e74:	f007 fec2 	bl	8009bfc <HAL_SPI_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e7e:	f000 fbfa 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000094c 	.word	0x2000094c
 8001e8c:	40003800 	.word	0x40003800

08001e90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <MX_SPI3_Init+0x70>)
 8001e98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ea8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001eac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001eba:	4b10      	ldr	r3, [pc, #64]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec0:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ed6:	2207      	movs	r2, #7
 8001ed8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ee6:	4805      	ldr	r0, [pc, #20]	; (8001efc <MX_SPI3_Init+0x6c>)
 8001ee8:	f007 fe88 	bl	8009bfc <HAL_SPI_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8001ef2:	f000 fbc0 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	200009b0 	.word	0x200009b0
 8001f00:	40003c00 	.word	0x40003c00

08001f04 <MX_SWPMI1_Init>:
  * @brief SWPMI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SWPMI1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END SWPMI1_Init 0 */

  /* USER CODE BEGIN SWPMI1_Init 1 */

  /* USER CODE END SWPMI1_Init 1 */
  hswpmi1.Instance = SWPMI1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_SWPMI1_Init+0x38>)
 8001f0a:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <MX_SWPMI1_Init+0x3c>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hswpmi1.Init.VoltageClass = SWPMI_VOLTAGE_CLASS_B;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_SWPMI1_Init+0x38>)
 8001f10:	2202      	movs	r2, #2
 8001f12:	605a      	str	r2, [r3, #4]
  hswpmi1.Init.BitRate = 19;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_SWPMI1_Init+0x38>)
 8001f16:	2213      	movs	r2, #19
 8001f18:	609a      	str	r2, [r3, #8]
  hswpmi1.Init.TxBufferingMode = SWPMI_TX_NO_SOFTWAREBUFFER;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_SWPMI1_Init+0x38>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
  hswpmi1.Init.RxBufferingMode = SWPMI_RX_NO_SOFTWAREBUFFER;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_SWPMI1_Init+0x38>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	611a      	str	r2, [r3, #16]
  if (HAL_SWPMI_Init(&hswpmi1) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_SWPMI1_Init+0x38>)
 8001f28:	f007 ff0c 	bl	8009d44 <HAL_SWPMI_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_SWPMI1_Init+0x32>
  {
    Error_Handler();
 8001f32:	f000 fba0 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN SWPMI1_Init 2 */

  /* USER CODE END SWPMI1_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000a14 	.word	0x20000a14
 8001f40:	40008800 	.word	0x40008800

08001f44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	; 0x30
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f00c fd32 	bl	800e9bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	463b      	mov	r3, r7
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001f64:	4a23      	ldr	r2, [pc, #140]	; (8001ff4 <MX_TIM1_Init+0xb0>)
 8001f66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f82:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f96:	2301      	movs	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001faa:	2300      	movs	r3, #0
 8001fac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001fb2:	f107 030c 	add.w	r3, r7, #12
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001fba:	f007 fff5 	bl	8009fa8 <HAL_TIM_Encoder_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001fc4:	f000 fb57 	bl	8002676 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MX_TIM1_Init+0xac>)
 8001fda:	f008 fe73 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001fe4:	f000 fb47 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	3730      	adds	r7, #48	; 0x30
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000a50 	.word	0x20000a50
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <MX_TIM3_Init+0x128>)
 800202c:	4a3d      	ldr	r2, [pc, #244]	; (8002124 <MX_TIM3_Init+0x12c>)
 800202e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002030:	4b3b      	ldr	r3, [pc, #236]	; (8002120 <MX_TIM3_Init+0x128>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <MX_TIM3_Init+0x128>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800203c:	4b38      	ldr	r3, [pc, #224]	; (8002120 <MX_TIM3_Init+0x128>)
 800203e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002042:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002044:	4b36      	ldr	r3, [pc, #216]	; (8002120 <MX_TIM3_Init+0x128>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204a:	4b35      	ldr	r3, [pc, #212]	; (8002120 <MX_TIM3_Init+0x128>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002050:	4833      	ldr	r0, [pc, #204]	; (8002120 <MX_TIM3_Init+0x128>)
 8002052:	f007 fef1 	bl	8009e38 <HAL_TIM_Base_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800205c:	f000 fb0b 	bl	8002676 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800206a:	4619      	mov	r1, r3
 800206c:	482c      	ldr	r0, [pc, #176]	; (8002120 <MX_TIM3_Init+0x128>)
 800206e:	f008 f955 	bl	800a31c <HAL_TIM_ConfigClockSource>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002078:	f000 fafd 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800207c:	4828      	ldr	r0, [pc, #160]	; (8002120 <MX_TIM3_Init+0x128>)
 800207e:	f007 ff32 	bl	8009ee6 <HAL_TIM_PWM_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002088:	f000 faf5 	bl	8002676 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	4619      	mov	r1, r3
 800209a:	4821      	ldr	r0, [pc, #132]	; (8002120 <MX_TIM3_Init+0x128>)
 800209c:	f008 fe12 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80020a6:	f000 fae6 	bl	8002676 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020aa:	2360      	movs	r3, #96	; 0x60
 80020ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ba:	463b      	mov	r3, r7
 80020bc:	2200      	movs	r2, #0
 80020be:	4619      	mov	r1, r3
 80020c0:	4817      	ldr	r0, [pc, #92]	; (8002120 <MX_TIM3_Init+0x128>)
 80020c2:	f008 f817 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80020cc:	f000 fad3 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020d0:	463b      	mov	r3, r7
 80020d2:	2204      	movs	r2, #4
 80020d4:	4619      	mov	r1, r3
 80020d6:	4812      	ldr	r0, [pc, #72]	; (8002120 <MX_TIM3_Init+0x128>)
 80020d8:	f008 f80c 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80020e2:	f000 fac8 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020e6:	463b      	mov	r3, r7
 80020e8:	2208      	movs	r2, #8
 80020ea:	4619      	mov	r1, r3
 80020ec:	480c      	ldr	r0, [pc, #48]	; (8002120 <MX_TIM3_Init+0x128>)
 80020ee:	f008 f801 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80020f8:	f000 fabd 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	220c      	movs	r2, #12
 8002100:	4619      	mov	r1, r3
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <MX_TIM3_Init+0x128>)
 8002104:	f007 fff6 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800210e:	f000 fab2 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <MX_TIM3_Init+0x128>)
 8002114:	f000 fdf0 	bl	8002cf8 <HAL_TIM_MspPostInit>

}
 8002118:	bf00      	nop
 800211a:	3738      	adds	r7, #56	; 0x38
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000a9c 	.word	0x20000a9c
 8002124:	40000400 	.word	0x40000400

08002128 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_TIM6_Init+0x64>)
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <MX_TIM6_Init+0x68>)
 800213c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_TIM6_Init+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_TIM6_Init+0x64>)
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <MX_TIM6_Init+0x64>)
 800214c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002150:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_TIM6_Init+0x64>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_TIM6_Init+0x64>)
 800215a:	f007 fe6d 	bl	8009e38 <HAL_TIM_Base_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002164:	f000 fa87 	bl	8002676 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_TIM6_Init+0x64>)
 8002176:	f008 fda5 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002180:	f000 fa79 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000ae8 	.word	0x20000ae8
 8002190:	40001000 	.word	0x40001000

08002194 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80021a4:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021a6:	4a15      	ldr	r2, [pc, #84]	; (80021fc <MX_TIM7_Init+0x68>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021bc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80021c4:	480c      	ldr	r0, [pc, #48]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021c6:	f007 fe37 	bl	8009e38 <HAL_TIM_Base_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80021d0:	f000 fa51 	bl	8002676 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_TIM7_Init+0x64>)
 80021e2:	f008 fd6f 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80021ec:	f000 fa43 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000b34 	.word	0x20000b34
 80021fc:	40001400 	.word	0x40001400

08002200 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b09a      	sub	sp, #104	; 0x68
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002206:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002214:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002220:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
 8002230:	615a      	str	r2, [r3, #20]
 8002232:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002234:	1d3b      	adds	r3, r7, #4
 8002236:	222c      	movs	r2, #44	; 0x2c
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f00c fbbe 	bl	800e9bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002240:	4b55      	ldr	r3, [pc, #340]	; (8002398 <MX_TIM8_Init+0x198>)
 8002242:	4a56      	ldr	r2, [pc, #344]	; (800239c <MX_TIM8_Init+0x19c>)
 8002244:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002246:	4b54      	ldr	r3, [pc, #336]	; (8002398 <MX_TIM8_Init+0x198>)
 8002248:	2200      	movs	r2, #0
 800224a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224c:	4b52      	ldr	r3, [pc, #328]	; (8002398 <MX_TIM8_Init+0x198>)
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002252:	4b51      	ldr	r3, [pc, #324]	; (8002398 <MX_TIM8_Init+0x198>)
 8002254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002258:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225a:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <MX_TIM8_Init+0x198>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002260:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <MX_TIM8_Init+0x198>)
 8002262:	2200      	movs	r2, #0
 8002264:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <MX_TIM8_Init+0x198>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800226c:	484a      	ldr	r0, [pc, #296]	; (8002398 <MX_TIM8_Init+0x198>)
 800226e:	f007 fde3 	bl	8009e38 <HAL_TIM_Base_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002278:	f000 f9fd 	bl	8002676 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800227c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002280:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002282:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002286:	4619      	mov	r1, r3
 8002288:	4843      	ldr	r0, [pc, #268]	; (8002398 <MX_TIM8_Init+0x198>)
 800228a:	f008 f847 	bl	800a31c <HAL_TIM_ConfigClockSource>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002294:	f000 f9ef 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002298:	483f      	ldr	r0, [pc, #252]	; (8002398 <MX_TIM8_Init+0x198>)
 800229a:	f007 fe24 	bl	8009ee6 <HAL_TIM_PWM_Init>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80022a4:	f000 f9e7 	bl	8002676 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b0:	2300      	movs	r3, #0
 80022b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022b8:	4619      	mov	r1, r3
 80022ba:	4837      	ldr	r0, [pc, #220]	; (8002398 <MX_TIM8_Init+0x198>)
 80022bc:	f008 fd02 	bl	800acc4 <HAL_TIMEx_MasterConfigSynchronization>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80022c6:	f000 f9d6 	bl	8002676 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ca:	2360      	movs	r3, #96	; 0x60
 80022cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d2:	2300      	movs	r3, #0
 80022d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022d6:	2300      	movs	r3, #0
 80022d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022da:	2300      	movs	r3, #0
 80022dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ea:	2200      	movs	r2, #0
 80022ec:	4619      	mov	r1, r3
 80022ee:	482a      	ldr	r0, [pc, #168]	; (8002398 <MX_TIM8_Init+0x198>)
 80022f0:	f007 ff00 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80022fa:	f000 f9bc 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002302:	2204      	movs	r2, #4
 8002304:	4619      	mov	r1, r3
 8002306:	4824      	ldr	r0, [pc, #144]	; (8002398 <MX_TIM8_Init+0x198>)
 8002308:	f007 fef4 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8002312:	f000 f9b0 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002316:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800231a:	2208      	movs	r2, #8
 800231c:	4619      	mov	r1, r3
 800231e:	481e      	ldr	r0, [pc, #120]	; (8002398 <MX_TIM8_Init+0x198>)
 8002320:	f007 fee8 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800232a:	f000 f9a4 	bl	8002676 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800232e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002332:	220c      	movs	r2, #12
 8002334:	4619      	mov	r1, r3
 8002336:	4818      	ldr	r0, [pc, #96]	; (8002398 <MX_TIM8_Init+0x198>)
 8002338:	f007 fedc 	bl	800a0f4 <HAL_TIM_PWM_ConfigChannel>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 8002342:	f000 f998 	bl	8002676 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800235a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4807      	ldr	r0, [pc, #28]	; (8002398 <MX_TIM8_Init+0x198>)
 800237c:	f008 fd2a 	bl	800add4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 8002386:	f000 f976 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800238a:	4803      	ldr	r0, [pc, #12]	; (8002398 <MX_TIM8_Init+0x198>)
 800238c:	f000 fcb4 	bl	8002cf8 <HAL_TIM_MspPostInit>

}
 8002390:	bf00      	nop
 8002392:	3768      	adds	r7, #104	; 0x68
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20000b80 	.word	0x20000b80
 800239c:	40013400 	.word	0x40013400

080023a0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_UART4_Init+0x58>)
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <MX_UART4_Init+0x5c>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_UART4_Init+0x58>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_UART4_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_UART4_Init+0x58>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_UART4_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_UART4_Init+0x58>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_UART4_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_UART4_Init+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_UART4_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_UART4_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_UART4_Init+0x58>)
 80023e4:	f008 fd74 	bl	800aed0 <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80023ee:	f000 f942 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000bcc 	.word	0x20000bcc
 80023fc:	40004c00 	.word	0x40004c00

08002400 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002404:	4b14      	ldr	r3, [pc, #80]	; (8002458 <MX_UART5_Init+0x58>)
 8002406:	4a15      	ldr	r2, [pc, #84]	; (800245c <MX_UART5_Init+0x5c>)
 8002408:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MX_UART5_Init+0x58>)
 800240c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002410:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <MX_UART5_Init+0x58>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002418:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <MX_UART5_Init+0x58>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800241e:	4b0e      	ldr	r3, [pc, #56]	; (8002458 <MX_UART5_Init+0x58>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <MX_UART5_Init+0x58>)
 8002426:	220c      	movs	r2, #12
 8002428:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242a:	4b0b      	ldr	r3, [pc, #44]	; (8002458 <MX_UART5_Init+0x58>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002430:	4b09      	ldr	r3, [pc, #36]	; (8002458 <MX_UART5_Init+0x58>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002436:	4b08      	ldr	r3, [pc, #32]	; (8002458 <MX_UART5_Init+0x58>)
 8002438:	2200      	movs	r2, #0
 800243a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <MX_UART5_Init+0x58>)
 800243e:	2200      	movs	r2, #0
 8002440:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002442:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_UART5_Init+0x58>)
 8002444:	f008 fd44 	bl	800aed0 <HAL_UART_Init>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800244e:	f000 f912 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000c50 	.word	0x20000c50
 800245c:	40005000 	.word	0x40005000

08002460 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002466:	4a15      	ldr	r2, [pc, #84]	; (80024bc <MX_USART1_UART_Init+0x5c>)
 8002468:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800246c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002470:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800247a:	2200      	movs	r2, #0
 800247c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002486:	220c      	movs	r2, #12
 8002488:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248a:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a2:	4805      	ldr	r0, [pc, #20]	; (80024b8 <MX_USART1_UART_Init+0x58>)
 80024a4:	f008 fd14 	bl	800aed0 <HAL_UART_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024ae:	f000 f8e2 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000cd4 	.word	0x20000cd4
 80024bc:	40013800 	.word	0x40013800

080024c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <MX_USART2_UART_Init+0x5c>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_USART2_UART_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_USART2_UART_Init+0x58>)
 8002504:	f008 fce4 	bl	800aed0 <HAL_UART_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800250e:	f000 f8b2 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000d58 	.word	0x20000d58
 800251c:	40004400 	.word	0x40004400

08002520 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <MX_USART3_UART_Init+0x5c>)
 8002528:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800252c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8002530:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_USART3_UART_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_USART3_UART_Init+0x58>)
 8002564:	f008 fcb4 	bl	800aed0 <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800256e:	f000 f882 	bl	8002676 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000ddc 	.word	0x20000ddc
 800257c:	40004800 	.word	0x40004800

08002580 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	; 0x28
 8002584:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002586:	f107 0314 	add.w	r3, r7, #20
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <MX_GPIO_Init+0xdc>)
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <MX_GPIO_Init+0xdc>)
 800259c:	f043 0304 	orr.w	r3, r3, #4
 80025a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <MX_GPIO_Init+0xdc>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <MX_GPIO_Init+0xdc>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	4a2a      	ldr	r2, [pc, #168]	; (800265c <MX_GPIO_Init+0xdc>)
 80025b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ba:	4b28      	ldr	r3, [pc, #160]	; (800265c <MX_GPIO_Init+0xdc>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	4b25      	ldr	r3, [pc, #148]	; (800265c <MX_GPIO_Init+0xdc>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ca:	4a24      	ldr	r2, [pc, #144]	; (800265c <MX_GPIO_Init+0xdc>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025d2:	4b22      	ldr	r3, [pc, #136]	; (800265c <MX_GPIO_Init+0xdc>)
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <MX_GPIO_Init+0xdc>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	4a1e      	ldr	r2, [pc, #120]	; (800265c <MX_GPIO_Init+0xdc>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <MX_GPIO_Init+0xdc>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <MX_GPIO_Init+0xdc>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <MX_GPIO_Init+0xdc>)
 80025fc:	f043 0308 	orr.w	r3, r3, #8
 8002600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002602:	4b16      	ldr	r3, [pc, #88]	; (800265c <MX_GPIO_Init+0xdc>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800260e:	2200      	movs	r2, #0
 8002610:	2120      	movs	r1, #32
 8002612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002616:	f005 f975 	bl	8007904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800261a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002620:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <MX_GPIO_Init+0xe0>)
 8002632:	f004 fec9 	bl	80073c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002636:	2320      	movs	r3, #32
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263a:	2301      	movs	r3, #1
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002646:	f107 0314 	add.w	r3, r7, #20
 800264a:	4619      	mov	r1, r3
 800264c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002650:	f004 feba 	bl	80073c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002654:	bf00      	nop
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40021000 	.word	0x40021000
 8002660:	48000800 	.word	0x48000800

08002664 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	//tache pour l'envoie de donnees via l'USB
	//utilisation mailbox pour envoyer les donnees
  /* Infinite loop */
  for(;;)
  {
    osDelay(800);
 800266c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002670:	f00a f970 	bl	800c954 <osDelay>
 8002674:	e7fa      	b.n	800266c <StartDefaultTask+0x8>

08002676 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800267a:	b672      	cpsid	i
}
 800267c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800267e:	e7fe      	b.n	800267e <Error_Handler+0x8>

08002680 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_MspInit+0x4c>)
 8002688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_MspInit+0x4c>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6613      	str	r3, [r2, #96]	; 0x60
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_MspInit+0x4c>)
 8002694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	607b      	str	r3, [r7, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_MspInit+0x4c>)
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <HAL_MspInit+0x4c>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	6593      	str	r3, [r2, #88]	; 0x58
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_MspInit+0x4c>)
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	210f      	movs	r1, #15
 80026ba:	f06f 0001 	mvn.w	r0, #1
 80026be:	f004 fdce 	bl	800725e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	bf00      	nop
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40021000 	.word	0x40021000

080026d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b0ac      	sub	sp, #176	; 0xb0
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2288      	movs	r2, #136	; 0x88
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f00c f963 	bl	800e9bc <memset>
  if(hadc->Instance==ADC3)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <HAL_ADC_MspInit+0xc8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d146      	bne.n	800278e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002700:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002704:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800270a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800270e:	2302      	movs	r3, #2
 8002710:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002712:	2301      	movs	r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002716:	2308      	movs	r3, #8
 8002718:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800271a:	2307      	movs	r3, #7
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800271e:	2302      	movs	r3, #2
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002722:	2302      	movs	r3, #2
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002726:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800272a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800272c:	f107 0314 	add.w	r3, r7, #20
 8002730:	4618      	mov	r0, r3
 8002732:	f006 fda7 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800273c:	f7ff ff9b 	bl	8002676 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <HAL_ADC_MspInit+0xcc>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	4a15      	ldr	r2, [pc, #84]	; (800279c <HAL_ADC_MspInit+0xcc>)
 8002746:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800274a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274c:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_ADC_MspInit+0xcc>)
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002758:	4b10      	ldr	r3, [pc, #64]	; (800279c <HAL_ADC_MspInit+0xcc>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_ADC_MspInit+0xcc>)
 800275e:	f043 0304 	orr.w	r3, r3, #4
 8002762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_ADC_MspInit+0xcc>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC0     ------> ADC3_IN1
    PC1     ------> ADC3_IN2
    PC2     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002770:	2307      	movs	r3, #7
 8002772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002776:	230b      	movs	r3, #11
 8002778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002782:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002786:	4619      	mov	r1, r3
 8002788:	4805      	ldr	r0, [pc, #20]	; (80027a0 <HAL_ADC_MspInit+0xd0>)
 800278a:	f004 fe1d 	bl	80073c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800278e:	bf00      	nop
 8002790:	37b0      	adds	r7, #176	; 0xb0
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	50040200 	.word	0x50040200
 800279c:	40021000 	.word	0x40021000
 80027a0:	48000800 	.word	0x48000800

080027a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_CAN_MspInit+0x80>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d129      	bne.n	800281a <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_CAN_MspInit+0x84>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4a17      	ldr	r2, [pc, #92]	; (8002828 <HAL_CAN_MspInit+0x84>)
 80027cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <HAL_CAN_MspInit+0x84>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027de:	4b12      	ldr	r3, [pc, #72]	; (8002828 <HAL_CAN_MspInit+0x84>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a11      	ldr	r2, [pc, #68]	; (8002828 <HAL_CAN_MspInit+0x84>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ea:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <HAL_CAN_MspInit+0x84>)
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80027f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80027fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fc:	2302      	movs	r3, #2
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002808:	2309      	movs	r3, #9
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002816:	f004 fdd7 	bl	80073c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40006400 	.word	0x40006400
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <HAL_COMP_MspInit+0x5c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d117      	bne.n	800287e <HAL_COMP_MspInit+0x52>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_COMP_MspInit+0x60>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_COMP_MspInit+0x60>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_COMP_MspInit+0x60>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
    /**COMP2 GPIO Configuration
    PB4 (NJTRST)     ------> COMP2_INP
    PB7     ------> COMP2_INM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8002866:	2390      	movs	r3, #144	; 0x90
 8002868:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800286a:	2303      	movs	r3, #3
 800286c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	4619      	mov	r1, r3
 8002878:	4805      	ldr	r0, [pc, #20]	; (8002890 <HAL_COMP_MspInit+0x64>)
 800287a:	f004 fda5 	bl	80073c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800287e:	bf00      	nop
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40010204 	.word	0x40010204
 800288c:	40021000 	.word	0x40021000
 8002890:	48000400 	.word	0x48000400

08002894 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0ac      	sub	sp, #176	; 0xb0
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	2288      	movs	r2, #136	; 0x88
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f00c f881 	bl	800e9bc <memset>
  if(hi2c->Instance==I2C2)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <HAL_I2C_MspInit+0xb0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d13b      	bne.n	800293c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028cc:	f107 0314 	add.w	r3, r7, #20
 80028d0:	4618      	mov	r0, r3
 80028d2:	f006 fcd7 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80028dc:	f7ff fecb 	bl	8002676 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	4a18      	ldr	r2, [pc, #96]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 80028e6:	f043 0302 	orr.w	r3, r3, #2
 80028ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ec:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002900:	2312      	movs	r3, #18
 8002902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002912:	2304      	movs	r3, #4
 8002914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002918:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800291c:	4619      	mov	r1, r3
 800291e:	480b      	ldr	r0, [pc, #44]	; (800294c <HAL_I2C_MspInit+0xb8>)
 8002920:	f004 fd52 	bl	80073c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002924:	4b08      	ldr	r3, [pc, #32]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a07      	ldr	r2, [pc, #28]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 800292a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_I2C_MspInit+0xb4>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800293c:	bf00      	nop
 800293e:	37b0      	adds	r7, #176	; 0xb0
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40005800 	.word	0x40005800
 8002948:	40021000 	.word	0x40021000
 800294c:	48000400 	.word	0x48000400

08002950 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0b      	ldr	r2, [pc, #44]	; (800298c <HAL_I2C_MspDeInit+0x3c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10f      	bne.n	8002982 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002962:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_I2C_MspDeInit+0x40>)
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_I2C_MspDeInit+0x40>)
 8002968:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800296c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800296e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002972:	4808      	ldr	r0, [pc, #32]	; (8002994 <HAL_I2C_MspDeInit+0x44>)
 8002974:	f004 fed2 	bl	800771c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002978:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <HAL_I2C_MspDeInit+0x44>)
 800297e:	f004 fecd 	bl	800771c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40005800 	.word	0x40005800
 8002990:	40021000 	.word	0x40021000
 8002994:	48000400 	.word	0x48000400

08002998 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a4b      	ldr	r2, [pc, #300]	; (8002ae4 <HAL_SPI_MspInit+0x14c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d145      	bne.n	8002a46 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ba:	4b4b      	ldr	r3, [pc, #300]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6593      	str	r3, [r2, #88]	; 0x58
 80029c6:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d2:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d6:	4a44      	ldr	r2, [pc, #272]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029d8:	f043 0304 	orr.w	r3, r3, #4
 80029dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029de:	4b42      	ldr	r3, [pc, #264]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	4a3e      	ldr	r2, [pc, #248]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029f6:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a02:	2308      	movs	r3, #8
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a12:	2305      	movs	r3, #5
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4833      	ldr	r0, [pc, #204]	; (8002aec <HAL_SPI_MspInit+0x154>)
 8002a1e:	f004 fcd3 	bl	80073c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002a22:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a34:	2305      	movs	r3, #5
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	482c      	ldr	r0, [pc, #176]	; (8002af0 <HAL_SPI_MspInit+0x158>)
 8002a40:	f004 fcc2 	bl	80073c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a44:	e049      	b.n	8002ada <HAL_SPI_MspInit+0x142>
  else if(hspi->Instance==SPI3)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <HAL_SPI_MspInit+0x15c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d144      	bne.n	8002ada <HAL_SPI_MspInit+0x142>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a6e:	f043 0304 	orr.w	r3, r3, #4
 8002a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a74:	4b1c      	ldr	r3, [pc, #112]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	4a18      	ldr	r2, [pc, #96]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a86:	f043 0302 	orr.w	r3, r3, #2
 8002a8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_SPI_MspInit+0x150>)
 8002a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002aaa:	2306      	movs	r3, #6
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	480d      	ldr	r0, [pc, #52]	; (8002aec <HAL_SPI_MspInit+0x154>)
 8002ab6:	f004 fc87 	bl	80073c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002aba:	2320      	movs	r3, #32
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002aca:	2306      	movs	r3, #6
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4806      	ldr	r0, [pc, #24]	; (8002af0 <HAL_SPI_MspInit+0x158>)
 8002ad6:	f004 fc77 	bl	80073c8 <HAL_GPIO_Init>
}
 8002ada:	bf00      	nop
 8002adc:	3738      	adds	r7, #56	; 0x38
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40003800 	.word	0x40003800
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	48000800 	.word	0x48000800
 8002af0:	48000400 	.word	0x48000400
 8002af4:	40003c00 	.word	0x40003c00

08002af8 <HAL_SWPMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hswpmi: SWPMI handle pointer
* @retval None
*/
void HAL_SWPMI_MspInit(SWPMI_HandleTypeDef* hswpmi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0ac      	sub	sp, #176	; 0xb0
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b10:	f107 0314 	add.w	r3, r7, #20
 8002b14:	2288      	movs	r2, #136	; 0x88
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f00b ff4f 	bl	800e9bc <memset>
  if(hswpmi->Instance==SWPMI1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_SWPMI_MspInit+0xb4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d13d      	bne.n	8002ba4 <HAL_SWPMI_MspInit+0xac>

  /* USER CODE END SWPMI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SWPMI1;
 8002b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b2c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Swpmi1ClockSelection = RCC_SWPMI1CLKSOURCE_PCLK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f006 fba3 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <HAL_SWPMI_MspInit+0x50>
    {
      Error_Handler();
 8002b44:	f7ff fd97 	bl	8002676 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SWPMI1_CLK_ENABLE();
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_SWPMI_MspInit+0xb8>)
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	4a18      	ldr	r2, [pc, #96]	; (8002bb0 <HAL_SWPMI_MspInit+0xb8>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002b54:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_SWPMI_MspInit+0xb8>)
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_SWPMI_MspInit+0xb8>)
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	4a12      	ldr	r2, [pc, #72]	; (8002bb0 <HAL_SWPMI_MspInit+0xb8>)
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b6c:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_SWPMI_MspInit+0xb8>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
    /**SWPMI1 GPIO Configuration
    PB12     ------> SWPMI1_IO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SWPMI1;
 8002b92:	230c      	movs	r3, #12
 8002b94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4805      	ldr	r0, [pc, #20]	; (8002bb4 <HAL_SWPMI_MspInit+0xbc>)
 8002ba0:	f004 fc12 	bl	80073c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SWPMI1_MspInit 1 */

  /* USER CODE END SWPMI1_MspInit 1 */
  }

}
 8002ba4:	bf00      	nop
 8002ba6:	37b0      	adds	r7, #176	; 0xb0
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40008800 	.word	0x40008800
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	48000400 	.word	0x48000400

08002bb8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	; 0x28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a18      	ldr	r2, [pc, #96]	; (8002c38 <HAL_TIM_Encoder_MspInit+0x80>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d129      	bne.n	8002c2e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bda:	4b18      	ldr	r3, [pc, #96]	; (8002c3c <HAL_TIM_Encoder_MspInit+0x84>)
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	4a17      	ldr	r2, [pc, #92]	; (8002c3c <HAL_TIM_Encoder_MspInit+0x84>)
 8002be0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002be4:	6613      	str	r3, [r2, #96]	; 0x60
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <HAL_TIM_Encoder_MspInit+0x84>)
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_TIM_Encoder_MspInit+0x84>)
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	4a11      	ldr	r2, [pc, #68]	; (8002c3c <HAL_TIM_Encoder_MspInit+0x84>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <HAL_TIM_Encoder_MspInit+0x84>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	f107 0314 	add.w	r3, r7, #20
 8002c24:	4619      	mov	r1, r3
 8002c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2a:	f004 fbcd 	bl	80073c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c2e:	bf00      	nop
 8002c30:	3728      	adds	r7, #40	; 0x28
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40021000 	.word	0x40021000

08002c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a25      	ldr	r2, [pc, #148]	; (8002ce4 <HAL_TIM_Base_MspInit+0xa4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10c      	bne.n	8002c6c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c52:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5e:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c6a:	e034      	b.n	8002cd6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM6)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a1e      	ldr	r2, [pc, #120]	; (8002cec <HAL_TIM_Base_MspInit+0xac>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d10c      	bne.n	8002c90 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c7c:	f043 0310 	orr.w	r3, r3, #16
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
 8002c82:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
}
 8002c8e:	e022      	b.n	8002cd6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM7)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a16      	ldr	r2, [pc, #88]	; (8002cf0 <HAL_TIM_Base_MspInit+0xb0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10c      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	4a12      	ldr	r2, [pc, #72]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002ca0:	f043 0320 	orr.w	r3, r3, #32
 8002ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002caa:	f003 0320 	and.w	r3, r3, #32
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
}
 8002cb2:	e010      	b.n	8002cd6 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	; (8002cf4 <HAL_TIM_Base_MspInit+0xb4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002cc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_TIM_Base_MspInit+0xa8>)
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
}
 8002cd6:	bf00      	nop
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40001000 	.word	0x40001000
 8002cf0:	40001400 	.word	0x40001400
 8002cf4:	40013400 	.word	0x40013400

08002cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	; 0x28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <HAL_TIM_MspPostInit+0xe4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d139      	bne.n	8002d8e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	4b31      	ldr	r3, [pc, #196]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1e:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d26:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d36:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d4a:	23c0      	movs	r3, #192	; 0xc0
 8002d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d68:	f004 fb2e 	bl	80073c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d80:	f107 0314 	add.w	r3, r7, #20
 8002d84:	4619      	mov	r1, r3
 8002d86:	4817      	ldr	r0, [pc, #92]	; (8002de4 <HAL_TIM_MspPostInit+0xec>)
 8002d88:	f004 fb1e 	bl	80073c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002d8c:	e021      	b.n	8002dd2 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a15      	ldr	r2, [pc, #84]	; (8002de8 <HAL_TIM_MspPostInit+0xf0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d11c      	bne.n	8002dd2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9c:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002d9e:	f043 0304 	orr.w	r3, r3, #4
 8002da2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_TIM_MspPostInit+0xe8>)
 8002da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002db0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db6:	2302      	movs	r3, #2
 8002db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dc6:	f107 0314 	add.w	r3, r7, #20
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4807      	ldr	r0, [pc, #28]	; (8002dec <HAL_TIM_MspPostInit+0xf4>)
 8002dce:	f004 fafb 	bl	80073c8 <HAL_GPIO_Init>
}
 8002dd2:	bf00      	nop
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40021000 	.word	0x40021000
 8002de4:	48000400 	.word	0x48000400
 8002de8:	40013400 	.word	0x40013400
 8002dec:	48000800 	.word	0x48000800

08002df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b0b6      	sub	sp, #216	; 0xd8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e0c:	2288      	movs	r2, #136	; 0x88
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f00b fdd3 	bl	800e9bc <memset>
  if(huart->Instance==UART4)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4aad      	ldr	r2, [pc, #692]	; (80030d0 <HAL_UART_MspInit+0x2e0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d145      	bne.n	8002eac <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002e20:	2308      	movs	r3, #8
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f006 fa28 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e3a:	f7ff fc1c 	bl	8002676 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e3e:	4ba5      	ldr	r3, [pc, #660]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4aa4      	ldr	r2, [pc, #656]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4a:	4ba2      	ldr	r3, [pc, #648]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	4b9f      	ldr	r3, [pc, #636]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4a9e      	ldr	r2, [pc, #632]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e62:	4b9c      	ldr	r3, [pc, #624]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e86:	2308      	movs	r3, #8
 8002e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e90:	4619      	mov	r1, r3
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f004 fa97 	bl	80073c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2105      	movs	r1, #5
 8002e9e:	2034      	movs	r0, #52	; 0x34
 8002ea0:	f004 f9dd 	bl	800725e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002ea4:	2034      	movs	r0, #52	; 0x34
 8002ea6:	f004 f9f6 	bl	8007296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002eaa:	e169      	b.n	8003180 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==UART5)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <HAL_UART_MspInit+0x2e8>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d15e      	bne.n	8002f74 <HAL_UART_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002eb6:	2310      	movs	r3, #16
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f006 f9dd 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8002ed0:	f7ff fbd1 	bl	8002676 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ed4:	4b7f      	ldr	r3, [pc, #508]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed8:	4a7e      	ldr	r2, [pc, #504]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ede:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee0:	4b7c      	ldr	r3, [pc, #496]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8002eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eec:	4b79      	ldr	r3, [pc, #484]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	4a78      	ldr	r2, [pc, #480]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef8:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f04:	4b73      	ldr	r3, [pc, #460]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	4a72      	ldr	r2, [pc, #456]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002f0a:	f043 0308 	orr.w	r3, r3, #8
 8002f0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f10:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f24:	2302      	movs	r3, #2
 8002f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f30:	2303      	movs	r3, #3
 8002f32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f36:	2308      	movs	r3, #8
 8002f38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f40:	4619      	mov	r1, r3
 8002f42:	4866      	ldr	r0, [pc, #408]	; (80030dc <HAL_UART_MspInit+0x2ec>)
 8002f44:	f004 fa40 	bl	80073c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f48:	2304      	movs	r3, #4
 8002f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f60:	2308      	movs	r3, #8
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f66:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	485c      	ldr	r0, [pc, #368]	; (80030e0 <HAL_UART_MspInit+0x2f0>)
 8002f6e:	f004 fa2b 	bl	80073c8 <HAL_GPIO_Init>
}
 8002f72:	e105      	b.n	8003180 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a5a      	ldr	r2, [pc, #360]	; (80030e4 <HAL_UART_MspInit+0x2f4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d15e      	bne.n	800303c <HAL_UART_MspInit+0x24c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f82:	2300      	movs	r3, #0
 8002f84:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f006 f97a 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8002f96:	f7ff fb6e 	bl	8002676 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9a:	4b4e      	ldr	r3, [pc, #312]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9e:	4a4d      	ldr	r2, [pc, #308]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa6:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	4b48      	ldr	r3, [pc, #288]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	4a47      	ldr	r2, [pc, #284]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fbe:	4b45      	ldr	r3, [pc, #276]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	623b      	str	r3, [r7, #32]
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fca:	4b42      	ldr	r3, [pc, #264]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	4a41      	ldr	r2, [pc, #260]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003002:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003006:	4619      	mov	r1, r3
 8003008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800300c:	f004 f9dc 	bl	80073c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003010:	2340      	movs	r3, #64	; 0x40
 8003012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003028:	2307      	movs	r3, #7
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003032:	4619      	mov	r1, r3
 8003034:	482c      	ldr	r0, [pc, #176]	; (80030e8 <HAL_UART_MspInit+0x2f8>)
 8003036:	f004 f9c7 	bl	80073c8 <HAL_GPIO_Init>
}
 800303a:	e0a1      	b.n	8003180 <HAL_UART_MspInit+0x390>
  else if(huart->Instance==USART2)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a2a      	ldr	r2, [pc, #168]	; (80030ec <HAL_UART_MspInit+0x2fc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d154      	bne.n	80030f0 <HAL_UART_MspInit+0x300>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003046:	2302      	movs	r3, #2
 8003048:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800304a:	2300      	movs	r3, #0
 800304c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800304e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003052:	4618      	mov	r0, r3
 8003054:	f006 f916 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_UART_MspInit+0x272>
      Error_Handler();
 800305e:	f7ff fb0a 	bl	8002676 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003062:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003066:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	6593      	str	r3, [r2, #88]	; 0x58
 800306e:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 800307c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_UART_MspInit+0x2e4>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003092:	230c      	movs	r3, #12
 8003094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030aa:	2307      	movs	r3, #7
 80030ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80030b4:	4619      	mov	r1, r3
 80030b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030ba:	f004 f985 	bl	80073c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80030be:	2200      	movs	r2, #0
 80030c0:	2105      	movs	r1, #5
 80030c2:	2026      	movs	r0, #38	; 0x26
 80030c4:	f004 f8cb 	bl	800725e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030c8:	2026      	movs	r0, #38	; 0x26
 80030ca:	f004 f8e4 	bl	8007296 <HAL_NVIC_EnableIRQ>
}
 80030ce:	e057      	b.n	8003180 <HAL_UART_MspInit+0x390>
 80030d0:	40004c00 	.word	0x40004c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40005000 	.word	0x40005000
 80030dc:	48000800 	.word	0x48000800
 80030e0:	48000c00 	.word	0x48000c00
 80030e4:	40013800 	.word	0x40013800
 80030e8:	48000400 	.word	0x48000400
 80030ec:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a24      	ldr	r2, [pc, #144]	; (8003188 <HAL_UART_MspInit+0x398>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d142      	bne.n	8003180 <HAL_UART_MspInit+0x390>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80030fa:	2304      	movs	r3, #4
 80030fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80030fe:	2300      	movs	r3, #0
 8003100:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003102:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003106:	4618      	mov	r0, r3
 8003108:	f006 f8bc 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_UART_MspInit+0x326>
      Error_Handler();
 8003112:	f7ff fab0 	bl	8002676 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_UART_MspInit+0x39c>)
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	4a1c      	ldr	r2, [pc, #112]	; (800318c <HAL_UART_MspInit+0x39c>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003120:	6593      	str	r3, [r2, #88]	; 0x58
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_UART_MspInit+0x39c>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <HAL_UART_MspInit+0x39c>)
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	4a16      	ldr	r2, [pc, #88]	; (800318c <HAL_UART_MspInit+0x39c>)
 8003134:	f043 0304 	orr.w	r3, r3, #4
 8003138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800313a:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_UART_MspInit+0x39c>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003146:	2330      	movs	r3, #48	; 0x30
 8003148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800315e:	2307      	movs	r3, #7
 8003160:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003164:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003168:	4619      	mov	r1, r3
 800316a:	4809      	ldr	r0, [pc, #36]	; (8003190 <HAL_UART_MspInit+0x3a0>)
 800316c:	f004 f92c 	bl	80073c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003170:	2200      	movs	r2, #0
 8003172:	2105      	movs	r1, #5
 8003174:	2027      	movs	r0, #39	; 0x27
 8003176:	f004 f872 	bl	800725e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800317a:	2027      	movs	r0, #39	; 0x27
 800317c:	f004 f88b 	bl	8007296 <HAL_NVIC_EnableIRQ>
}
 8003180:	bf00      	nop
 8003182:	37d8      	adds	r7, #216	; 0xd8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40004800 	.word	0x40004800
 800318c:	40021000 	.word	0x40021000
 8003190:	48000800 	.word	0x48000800

08003194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003198:	e7fe      	b.n	8003198 <NMI_Handler+0x4>

0800319a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800319e:	e7fe      	b.n	800319e <HardFault_Handler+0x4>

080031a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031a4:	e7fe      	b.n	80031a4 <MemManage_Handler+0x4>

080031a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031aa:	e7fe      	b.n	80031aa <BusFault_Handler+0x4>

080031ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <UsageFault_Handler+0x4>

080031b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031b6:	bf00      	nop
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c4:	f002 fdc4 	bl	8005d50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80031c8:	f00a feba 	bl	800df40 <xTaskGetSchedulerState>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d001      	beq.n	80031d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80031d2:	f00b f981 	bl	800e4d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031e0:	4802      	ldr	r0, [pc, #8]	; (80031ec <USART2_IRQHandler+0x10>)
 80031e2:	f008 f859 	bl	800b298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000d58 	.word	0x20000d58

080031f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80031f4:	4802      	ldr	r0, [pc, #8]	; (8003200 <USART3_IRQHandler+0x10>)
 80031f6:	f008 f84f 	bl	800b298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000ddc 	.word	0x20000ddc

08003204 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <UART4_IRQHandler+0x10>)
 800320a:	f008 f845 	bl	800b298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000bcc 	.word	0x20000bcc

08003218 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <BSP_I2C1_Init+0x70>)
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <BSP_I2C1_Init+0x74>)
 8003226:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <BSP_I2C1_Init+0x78>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	4918      	ldr	r1, [pc, #96]	; (8003290 <BSP_I2C1_Init+0x78>)
 8003230:	600a      	str	r2, [r1, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d122      	bne.n	800327c <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003236:	4814      	ldr	r0, [pc, #80]	; (8003288 <BSP_I2C1_Init+0x70>)
 8003238:	f004 fe68 	bl	8007f0c <HAL_I2C_GetState>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11c      	bne.n	800327c <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8003242:	4811      	ldr	r0, [pc, #68]	; (8003288 <BSP_I2C1_Init+0x70>)
 8003244:	f000 f8f6 	bl	8003434 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d116      	bne.n	800327c <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800324e:	480e      	ldr	r0, [pc, #56]	; (8003288 <BSP_I2C1_Init+0x70>)
 8003250:	f000 f8ac 	bl	80033ac <MX_I2C1_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800325a:	f06f 0307 	mvn.w	r3, #7
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	e00c      	b.n	800327c <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003262:	2100      	movs	r1, #0
 8003264:	4808      	ldr	r0, [pc, #32]	; (8003288 <BSP_I2C1_Init+0x70>)
 8003266:	f005 f911 	bl	800848c <HAL_I2CEx_ConfigAnalogFilter>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003270:	f06f 0307 	mvn.w	r3, #7
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	e001      	b.n	800327c <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800327c:	687b      	ldr	r3, [r7, #4]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000f34 	.word	0x20000f34
 800328c:	40005400 	.word	0x40005400
 8003290:	20000f88 	.word	0x20000f88

08003294 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <BSP_I2C1_DeInit+0x48>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d014      	beq.n	80032d0 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <BSP_I2C1_DeInit+0x48>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <BSP_I2C1_DeInit+0x48>)
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <BSP_I2C1_DeInit+0x48>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10b      	bne.n	80032d0 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80032b8:	4809      	ldr	r0, [pc, #36]	; (80032e0 <BSP_I2C1_DeInit+0x4c>)
 80032ba:	f000 f91b 	bl	80034f4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80032be:	4808      	ldr	r0, [pc, #32]	; (80032e0 <BSP_I2C1_DeInit+0x4c>)
 80032c0:	f004 fbc7 	bl	8007a52 <HAL_I2C_DeInit>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80032ca:	f06f 0307 	mvn.w	r3, #7
 80032ce:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80032d0:	687b      	ldr	r3, [r7, #4]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000f88 	.word	0x20000f88
 80032e0:	20000f34 	.word	0x20000f34

080032e4 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af04      	add	r7, sp, #16
 80032ea:	60ba      	str	r2, [r7, #8]
 80032ec:	461a      	mov	r2, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	81fb      	strh	r3, [r7, #14]
 80032f2:	460b      	mov	r3, r1
 80032f4:	81bb      	strh	r3, [r7, #12]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80032fe:	89ba      	ldrh	r2, [r7, #12]
 8003300:	89f9      	ldrh	r1, [r7, #14]
 8003302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003306:	9302      	str	r3, [sp, #8]
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	9301      	str	r3, [sp, #4]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	2301      	movs	r3, #1
 8003312:	480c      	ldr	r0, [pc, #48]	; (8003344 <BSP_I2C1_WriteReg+0x60>)
 8003314:	f004 fbcc 	bl	8007ab0 <HAL_I2C_Mem_Write>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800331e:	4809      	ldr	r0, [pc, #36]	; (8003344 <BSP_I2C1_WriteReg+0x60>)
 8003320:	f004 fe02 	bl	8007f28 <HAL_I2C_GetError>
 8003324:	4603      	mov	r3, r0
 8003326:	2b04      	cmp	r3, #4
 8003328:	d103      	bne.n	8003332 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800332a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	e002      	b.n	8003338 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003332:	f06f 0303 	mvn.w	r3, #3
 8003336:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003338:	697b      	ldr	r3, [r7, #20]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000f34 	.word	0x20000f34

08003348 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af04      	add	r7, sp, #16
 800334e:	60ba      	str	r2, [r7, #8]
 8003350:	461a      	mov	r2, r3
 8003352:	4603      	mov	r3, r0
 8003354:	81fb      	strh	r3, [r7, #14]
 8003356:	460b      	mov	r3, r1
 8003358:	81bb      	strh	r3, [r7, #12]
 800335a:	4613      	mov	r3, r2
 800335c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003362:	89ba      	ldrh	r2, [r7, #12]
 8003364:	89f9      	ldrh	r1, [r7, #14]
 8003366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336a:	9302      	str	r3, [sp, #8]
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	9301      	str	r3, [sp, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	9300      	str	r3, [sp, #0]
 8003374:	2301      	movs	r3, #1
 8003376:	480c      	ldr	r0, [pc, #48]	; (80033a8 <BSP_I2C1_ReadReg+0x60>)
 8003378:	f004 fcae 	bl	8007cd8 <HAL_I2C_Mem_Read>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8003382:	4809      	ldr	r0, [pc, #36]	; (80033a8 <BSP_I2C1_ReadReg+0x60>)
 8003384:	f004 fdd0 	bl	8007f28 <HAL_I2C_GetError>
 8003388:	4603      	mov	r3, r0
 800338a:	2b04      	cmp	r3, #4
 800338c:	d103      	bne.n	8003396 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800338e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	e002      	b.n	800339c <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003396:	f06f 0303 	mvn.w	r3, #3
 800339a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800339c:	697b      	ldr	r3, [r7, #20]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000f34 	.word	0x20000f34

080033ac <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a1c      	ldr	r2, [pc, #112]	; (800342c <MX_I2C1_Init+0x80>)
 80033bc:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1b      	ldr	r2, [pc, #108]	; (8003430 <MX_I2C1_Init+0x84>)
 80033c2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f004 faa0 	bl	8007934 <HAL_I2C_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033fe:	2100      	movs	r1, #0
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f005 f843 	bl	800848c <HAL_I2CEx_ConfigAnalogFilter>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8003410:	2100      	movs	r1, #0
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f005 f885 	bl	8008522 <HAL_I2CEx_ConfigDigitalFilter>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003422:	7bfb      	ldrb	r3, [r7, #15]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40005400 	.word	0x40005400
 8003430:	10909cec 	.word	0x10909cec

08003434 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b0ac      	sub	sp, #176	; 0xb0
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	2288      	movs	r2, #136	; 0x88
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f00b fab9 	bl	800e9bc <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800344a:	2340      	movs	r3, #64	; 0x40
 800344c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800344e:	2300      	movs	r3, #0
 8003450:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8003452:	f107 0314 	add.w	r3, r7, #20
 8003456:	4618      	mov	r0, r3
 8003458:	f005 ff14 	bl	8009284 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345c:	4b23      	ldr	r3, [pc, #140]	; (80034ec <I2C1_MspInit+0xb8>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	4a22      	ldr	r2, [pc, #136]	; (80034ec <I2C1_MspInit+0xb8>)
 8003462:	f043 0302 	orr.w	r3, r3, #2
 8003466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003468:	4b20      	ldr	r3, [pc, #128]	; (80034ec <I2C1_MspInit+0xb8>)
 800346a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800347c:	2312      	movs	r3, #18
 800347e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800348e:	2304      	movs	r3, #4
 8003490:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003494:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003498:	4619      	mov	r1, r3
 800349a:	4815      	ldr	r0, [pc, #84]	; (80034f0 <I2C1_MspInit+0xbc>)
 800349c:	f003 ff94 	bl	80073c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80034a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034a8:	2312      	movs	r3, #18
 80034aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b4:	2303      	movs	r3, #3
 80034b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80034ba:	2304      	movs	r3, #4
 80034bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80034c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034c4:	4619      	mov	r1, r3
 80034c6:	480a      	ldr	r0, [pc, #40]	; (80034f0 <I2C1_MspInit+0xbc>)
 80034c8:	f003 ff7e 	bl	80073c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <I2C1_MspInit+0xb8>)
 80034ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d0:	4a06      	ldr	r2, [pc, #24]	; (80034ec <I2C1_MspInit+0xb8>)
 80034d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034d6:	6593      	str	r3, [r2, #88]	; 0x58
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <I2C1_MspInit+0xb8>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80034e4:	bf00      	nop
 80034e6:	37b0      	adds	r7, #176	; 0xb0
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	48000400 	.word	0x48000400

080034f4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <I2C1_MspDeInit+0x30>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003500:	4a08      	ldr	r2, [pc, #32]	; (8003524 <I2C1_MspDeInit+0x30>)
 8003502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003506:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003508:	f44f 7180 	mov.w	r1, #256	; 0x100
 800350c:	4806      	ldr	r0, [pc, #24]	; (8003528 <I2C1_MspDeInit+0x34>)
 800350e:	f004 f905 	bl	800771c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003516:	4804      	ldr	r0, [pc, #16]	; (8003528 <I2C1_MspDeInit+0x34>)
 8003518:	f004 f900 	bl	800771c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000
 8003528:	48000400 	.word	0x48000400

0800352c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return 1;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_kill>:

int _kill(int pid, int sig)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003546:	f00b fa01 	bl	800e94c <__errno>
 800354a:	4603      	mov	r3, r0
 800354c:	2216      	movs	r2, #22
 800354e:	601a      	str	r2, [r3, #0]
  return -1;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <_exit>:

void _exit (int status)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ffe7 	bl	800353c <_kill>
  while (1) {}    /* Make sure we hang here */
 800356e:	e7fe      	b.n	800356e <_exit+0x12>

08003570 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e00a      	b.n	8003598 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003582:	f3af 8000 	nop.w
 8003586:	4601      	mov	r1, r0
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	60ba      	str	r2, [r7, #8]
 800358e:	b2ca      	uxtb	r2, r1
 8003590:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	3301      	adds	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	429a      	cmp	r2, r3
 800359e:	dbf0      	blt.n	8003582 <_read+0x12>
  }

  return len;
 80035a0:	687b      	ldr	r3, [r7, #4]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e009      	b.n	80035d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	60ba      	str	r2, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	3301      	adds	r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	dbf1      	blt.n	80035bc <_write+0x12>
  }
  return len;
 80035d8:	687b      	ldr	r3, [r7, #4]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <_close>:

int _close(int file)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800360a:	605a      	str	r2, [r3, #4]
  return 0;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <_isatty>:

int _isatty(int file)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003622:	2301      	movs	r3, #1
}
 8003624:	4618      	mov	r0, r3
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003654:	4a14      	ldr	r2, [pc, #80]	; (80036a8 <_sbrk+0x5c>)
 8003656:	4b15      	ldr	r3, [pc, #84]	; (80036ac <_sbrk+0x60>)
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <_sbrk+0x64>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d102      	bne.n	800366e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003668:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <_sbrk+0x64>)
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <_sbrk+0x68>)
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800366e:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <_sbrk+0x64>)
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	429a      	cmp	r2, r3
 800367a:	d207      	bcs.n	800368c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800367c:	f00b f966 	bl	800e94c <__errno>
 8003680:	4603      	mov	r3, r0
 8003682:	220c      	movs	r2, #12
 8003684:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	e009      	b.n	80036a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <_sbrk+0x64>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003692:	4b07      	ldr	r3, [pc, #28]	; (80036b0 <_sbrk+0x64>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	4a05      	ldr	r2, [pc, #20]	; (80036b0 <_sbrk+0x64>)
 800369c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800369e:	68fb      	ldr	r3, [r7, #12]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	20018000 	.word	0x20018000
 80036ac:	00000400 	.word	0x00000400
 80036b0:	20000f8c 	.word	0x20000f8c
 80036b4:	200028a8 	.word	0x200028a8

080036b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <SystemInit+0x20>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	4a05      	ldr	r2, [pc, #20]	; (80036d8 <SystemInit+0x20>)
 80036c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80036cc:	bf00      	nop
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003714 <LoopForever+0x2>

/* Call the clock system initialization function.*/
	    bl  SystemInit
 80036e0:	f7ff ffea 	bl	80036b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036e4:	480c      	ldr	r0, [pc, #48]	; (8003718 <LoopForever+0x6>)
  ldr r1, =_edata
 80036e6:	490d      	ldr	r1, [pc, #52]	; (800371c <LoopForever+0xa>)
  ldr r2, =_sidata
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <LoopForever+0xe>)
  movs r3, #0
 80036ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036ec:	e002      	b.n	80036f4 <LoopCopyDataInit>

080036ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036f2:	3304      	adds	r3, #4

080036f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f8:	d3f9      	bcc.n	80036ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036fa:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80036fc:	4c0a      	ldr	r4, [pc, #40]	; (8003728 <LoopForever+0x16>)
  movs r3, #0
 80036fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003700:	e001      	b.n	8003706 <LoopFillZerobss>

08003702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003704:	3204      	adds	r2, #4

08003706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003708:	d3fb      	bcc.n	8003702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800370a:	f00b f925 	bl	800e958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800370e:	f7fe f9db 	bl	8001ac8 <main>

08003712 <LoopForever>:

LoopForever:
    b LoopForever
 8003712:	e7fe      	b.n	8003712 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003714:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800371c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003720:	08012874 	.word	0x08012874
  ldr r2, =_sbss
 8003724:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003728:	200028a8 	.word	0x200028a8

0800372c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800372c:	e7fe      	b.n	800372c <ADC1_2_IRQHandler>
	...

08003730 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d103      	bne.n	8003748 <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e034      	b.n	80037b2 <HTS221_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	7b1a      	ldrb	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <HTS221_RegisterBusIO+0x8c>)
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HTS221_RegisterBusIO+0x90>)
 800378a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <HTS221_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4798      	blx	r3
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	e002      	b.n	80037b2 <HTS221_RegisterBusIO+0x82>
    }
    else
    {
      ret = HTS221_ERROR;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80037b2:	68fb      	ldr	r3, [r7, #12]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	08003b9d 	.word	0x08003b9d
 80037c0:	08003bff 	.word	0x08003bff

080037c4 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f97b 	bl	8003ad2 <HTS221_Initialize>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
 80037e6:	e004      	b.n	80037f2 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HTS221_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	e015      	b.n	800383c <HTS221_HUM_Enable+0x42>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HTS221_HUM_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3320      	adds	r3, #32
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fadf 	bl	8003de4 <hts221_power_on_set>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HTS221_HUM_Enable+0x38>
    {
      return HTS221_ERROR;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	e004      	b.n	800383c <HTS221_HUM_Enable+0x42>
    }
  }

  pObj->hum_is_enabled = 1;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return HTS221_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b088      	sub	sp, #32
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3320      	adds	r3, #32
 8003852:	f107 020c 	add.w	r2, r7, #12
 8003856:	4611      	mov	r1, r2
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fb87 	bl	8003f6c <hts221_hum_adc_point_0_get>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HTS221_HUM_GetHumidity+0x26>
  {
    return HTS221_ERROR;
 8003864:	f04f 33ff 	mov.w	r3, #4294967295
 8003868:	e06b      	b.n	8003942 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f103 0220 	add.w	r2, r3, #32
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	3304      	adds	r3, #4
 8003876:	4619      	mov	r1, r3
 8003878:	4610      	mov	r0, r2
 800387a:	f000 fad9 	bl	8003e30 <hts221_hum_rh_point_0_get>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HTS221_HUM_GetHumidity+0x46>
  {
    return HTS221_ERROR;
 8003884:	f04f 33ff 	mov.w	r3, #4294967295
 8003888:	e05b      	b.n	8003942 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f103 0220 	add.w	r2, r3, #32
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	3308      	adds	r3, #8
 8003896:	4619      	mov	r1, r3
 8003898:	4610      	mov	r0, r2
 800389a:	f000 fb8b 	bl	8003fb4 <hts221_hum_adc_point_1_get>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HTS221_HUM_GetHumidity+0x66>
  {
    return HTS221_ERROR;
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	e04b      	b.n	8003942 <HTS221_HUM_GetHumidity+0xfe>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f103 0220 	add.w	r2, r3, #32
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	330c      	adds	r3, #12
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f000 fad7 	bl	8003e6c <hts221_hum_rh_point_1_get>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HTS221_HUM_GetHumidity+0x86>
  {
    return HTS221_ERROR;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	e03b      	b.n	8003942 <HTS221_HUM_GetHumidity+0xfe>
 80038ca:	2300      	movs	r3, #0
 80038cc:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	3320      	adds	r3, #32
 80038d2:	f107 021c 	add.w	r2, r7, #28
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fa3d 	bl	8003d58 <hts221_humidity_raw_get>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HTS221_HUM_GetHumidity+0xa6>
  {
    return HTS221_ERROR;
 80038e4:	f04f 33ff 	mov.w	r3, #4294967295
 80038e8:	e02b      	b.n	8003942 <HTS221_HUM_GetHumidity+0xfe>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 80038ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f6:	f107 030c 	add.w	r3, r7, #12
 80038fa:	eeb0 0a67 	vmov.f32	s0, s15
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f913 	bl	8003b2a <Linear_Interpolation>
 8003904:	eef0 7a40 	vmov.f32	s15, s0
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	edc3 7a00 	vstr	s15, [r3]

  if (*Value < 0.0f)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	d503      	bpl.n	8003926 <HTS221_HUM_GetHumidity+0xe2>
  {
    *Value = 0.0f;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	edd3 7a00 	vldr	s15, [r3]
 800392c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800394c <HTS221_HUM_GetHumidity+0x108>
 8003930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003938:	dd02      	ble.n	8003940 <HTS221_HUM_GetHumidity+0xfc>
  {
    *Value = 100.0f;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <HTS221_HUM_GetHumidity+0x10c>)
 800393e:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	42c80000 	.word	0x42c80000
 8003950:	42c80000 	.word	0x42c80000

08003954 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	e015      	b.n	8003996 <HTS221_TEMP_Enable+0x42>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <HTS221_TEMP_Enable+0x38>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3320      	adds	r3, #32
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fa32 	bl	8003de4 <hts221_power_on_set>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HTS221_TEMP_Enable+0x38>
    {
      return HTS221_ERROR;
 8003986:	f04f 33ff 	mov.w	r3, #4294967295
 800398a:	e004      	b.n	8003996 <HTS221_TEMP_Enable+0x42>
    }
  }

  pObj->temp_is_enabled = 1;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return HTS221_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b088      	sub	sp, #32
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
 80039a6:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3320      	adds	r3, #32
 80039ac:	f107 020c 	add.w	r2, r7, #12
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fb22 	bl	8003ffc <hts221_temp_adc_point_0_get>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HTS221_TEMP_GetTemperature+0x26>
  {
    return HTS221_ERROR;
 80039be:	f04f 33ff 	mov.w	r3, #4294967295
 80039c2:	e052      	b.n	8003a6a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f103 0220 	add.w	r2, r3, #32
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f000 fa68 	bl	8003ea8 <hts221_temp_deg_point_0_get>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HTS221_TEMP_GetTemperature+0x46>
  {
    return HTS221_ERROR;
 80039de:	f04f 33ff 	mov.w	r3, #4294967295
 80039e2:	e042      	b.n	8003a6a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f103 0220 	add.w	r2, r3, #32
 80039ea:	f107 030c 	add.w	r3, r7, #12
 80039ee:	3308      	adds	r3, #8
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 fb26 	bl	8004044 <hts221_temp_adc_point_1_get>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HTS221_TEMP_GetTemperature+0x66>
  {
    return HTS221_ERROR;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003a02:	e032      	b.n	8003a6a <HTS221_TEMP_GetTemperature+0xcc>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f103 0220 	add.w	r2, r3, #32
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	330c      	adds	r3, #12
 8003a10:	4619      	mov	r1, r3
 8003a12:	4610      	mov	r0, r2
 8003a14:	f000 fa79 	bl	8003f0a <hts221_temp_deg_point_1_get>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HTS221_TEMP_GetTemperature+0x86>
  {
    return HTS221_ERROR;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e022      	b.n	8003a6a <HTS221_TEMP_GetTemperature+0xcc>
 8003a24:	2300      	movs	r3, #0
 8003a26:	83bb      	strh	r3, [r7, #28]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3320      	adds	r3, #32
 8003a2c:	f107 021c 	add.w	r2, r7, #28
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f9b3 	bl	8003d9e <hts221_temperature_raw_get>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HTS221_TEMP_GetTemperature+0xa6>
  {
    return HTS221_ERROR;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	e012      	b.n	8003a6a <HTS221_TEMP_GetTemperature+0xcc>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 8003a44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a50:	f107 030c 	add.w	r3, r7, #12
 8003a54:	eeb0 0a67 	vmov.f32	s0, s15
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 f866 	bl	8003b2a <Linear_Interpolation>
 8003a5e:	eef0 7a40 	vmov.f32	s15, s0
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	edc3 7a00 	vstr	s15, [r3]

  return HTS221_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	ed87 0a00 	vstr	s0, [r7]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 8003a7e:	edd7 7a00 	vldr	s15, [r7]
 8003a82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	d801      	bhi.n	8003a94 <HTS221_SetOutputDataRate+0x22>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e00b      	b.n	8003aac <HTS221_SetOutputDataRate+0x3a>
 8003a94:	edd7 7a00 	vldr	s15, [r7]
 8003a98:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa4:	d801      	bhi.n	8003aaa <HTS221_SetOutputDataRate+0x38>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e000      	b.n	8003aac <HTS221_SetOutputDataRate+0x3a>
 8003aaa:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 8003aac:	73fb      	strb	r3, [r7, #15]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3320      	adds	r3, #32
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f902 	bl	8003cc0 <hts221_data_rate_set>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HTS221_SetOutputDataRate+0x56>
  {
    return HTS221_ERROR;
 8003ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac6:	e000      	b.n	8003aca <HTS221_SetOutputDataRate+0x58>
  }

  return HTS221_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3320      	adds	r3, #32
 8003ade:	2100      	movs	r1, #0
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 f97f 	bl	8003de4 <hts221_power_on_set>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HTS221_Initialize+0x20>
  {
    return HTS221_ERROR;
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	e017      	b.n	8003b22 <HTS221_Initialize+0x50>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3320      	adds	r3, #32
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 f907 	bl	8003d0c <hts221_block_data_update_set>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <HTS221_Initialize+0x38>
  {
    return HTS221_ERROR;
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
 8003b08:	e00b      	b.n	8003b22 <HTS221_Initialize+0x50>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8003b0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffaf 	bl	8003a72 <HTS221_SetOutputDataRate>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HTS221_Initialize+0x4e>
  {
    return HTS221_ERROR;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	e000      	b.n	8003b22 <HTS221_Initialize+0x50>
  }

  return HTS221_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	ed87 0a00 	vstr	s0, [r7]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b46:	edd7 7a00 	vldr	s15, [r7]
 8003b4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b5a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	ed93 6a00 	vldr	s12, [r3]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8003b6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b86:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003b8a:	eef0 7a66 	vmov.f32	s15, s13
}
 8003b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003b9c:	b590      	push	{r4, r7, lr}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	460b      	mov	r3, r1
 8003baa:	72fb      	strb	r3, [r7, #11]
 8003bac:	4613      	mov	r3, r2
 8003bae:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10e      	bne.n	8003bda <ReadRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	695c      	ldr	r4, [r3, #20]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	7b1b      	ldrb	r3, [r3, #12]
 8003bc4:	b298      	uxth	r0, r3
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	b299      	uxth	r1, r3
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	47a0      	blx	r4
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	e00d      	b.n	8003bf6 <ReadRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	695c      	ldr	r4, [r3, #20]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	7b1b      	ldrb	r3, [r3, #12]
 8003be2:	b298      	uxth	r0, r3
 8003be4:	7afb      	ldrb	r3, [r7, #11]
 8003be6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	b299      	uxth	r1, r3
 8003bee:	893b      	ldrh	r3, [r7, #8]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	47a0      	blx	r4
 8003bf4:	4603      	mov	r3, r0
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd90      	pop	{r4, r7, pc}

08003bfe <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003bfe:	b590      	push	{r4, r7, lr}
 8003c00:	b087      	sub	sp, #28
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	607a      	str	r2, [r7, #4]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	72fb      	strb	r3, [r7, #11]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	813b      	strh	r3, [r7, #8]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10e      	bne.n	8003c3c <WriteRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	691c      	ldr	r4, [r3, #16]
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	7b1b      	ldrb	r3, [r3, #12]
 8003c26:	b298      	uxth	r0, r3
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	b299      	uxth	r1, r3
 8003c32:	893b      	ldrh	r3, [r7, #8]
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	47a0      	blx	r4
 8003c38:	4603      	mov	r3, r0
 8003c3a:	e00d      	b.n	8003c58 <WriteRegWrap+0x5a>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	691c      	ldr	r4, [r3, #16]
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	7b1b      	ldrb	r3, [r3, #12]
 8003c44:	b298      	uxth	r0, r3
 8003c46:	7afb      	ldrb	r3, [r7, #11]
 8003c48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	b299      	uxth	r1, r3
 8003c50:	893b      	ldrh	r3, [r7, #8]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	47a0      	blx	r4
 8003c56:	4603      	mov	r3, r0
  }
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	371c      	adds	r7, #28
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd90      	pop	{r4, r7, pc}

08003c60 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8003c60:	b590      	push	{r4, r7, lr}
 8003c62:	b087      	sub	sp, #28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	72fb      	strb	r3, [r7, #11]
 8003c70:	4613      	mov	r3, r2
 8003c72:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685c      	ldr	r4, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68d8      	ldr	r0, [r3, #12]
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	7af9      	ldrb	r1, [r7, #11]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	47a0      	blx	r4
 8003c84:	6178      	str	r0, [r7, #20]

  return ret;
 8003c86:	697b      	ldr	r3, [r7, #20]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd90      	pop	{r4, r7, pc}

08003c90 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	72fb      	strb	r3, [r7, #11]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681c      	ldr	r4, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68d8      	ldr	r0, [r3, #12]
 8003cac:	893b      	ldrh	r3, [r7, #8]
 8003cae:	7af9      	ldrb	r1, [r7, #11]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	47a0      	blx	r4
 8003cb4:	6178      	str	r0, [r7, #20]

  return ret;
 8003cb6:	697b      	ldr	r3, [r7, #20]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	371c      	adds	r7, #28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}

08003cc0 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003ccc:	f107 0208 	add.w	r2, r7, #8
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	2120      	movs	r1, #32
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ffc3 	bl	8003c60 <hts221_read_reg>
 8003cda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	7a3b      	ldrb	r3, [r7, #8]
 8003cec:	f362 0301 	bfi	r3, r2, #0, #2
 8003cf0:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003cf2:	f107 0208 	add.w	r2, r7, #8
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	2120      	movs	r1, #32
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ffc8 	bl	8003c90 <hts221_write_reg>
 8003d00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d18:	f107 0208 	add.w	r2, r7, #8
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	2120      	movs	r1, #32
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff9d 	bl	8003c60 <hts221_read_reg>
 8003d26:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10f      	bne.n	8003d4e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	7a3b      	ldrb	r3, [r7, #8]
 8003d38:	f362 0382 	bfi	r3, r2, #2, #1
 8003d3c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003d3e:	f107 0208 	add.w	r2, r7, #8
 8003d42:	2301      	movs	r3, #1
 8003d44:	2120      	movs	r1, #32
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f7ff ffa2 	bl	8003c90 <hts221_write_reg>
 8003d4c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8003d62:	f107 0208 	add.w	r2, r7, #8
 8003d66:	2302      	movs	r3, #2
 8003d68:	2128      	movs	r1, #40	; 0x28
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ff78 	bl	8003c60 <hts221_read_reg>
 8003d70:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003d72:	7a7b      	ldrb	r3, [r7, #9]
 8003d74:	b21a      	sxth	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	021b      	lsls	r3, r3, #8
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	7a3b      	ldrb	r3, [r7, #8]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	b21a      	sxth	r2, r3
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	801a      	strh	r2, [r3, #0]

  return ret;
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8003da8:	f107 0208 	add.w	r2, r7, #8
 8003dac:	2302      	movs	r3, #2
 8003dae:	212a      	movs	r1, #42	; 0x2a
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff55 	bl	8003c60 <hts221_read_reg>
 8003db6:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8003db8:	7a7b      	ldrb	r3, [r7, #9]
 8003dba:	b21a      	sxth	r2, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	7a3b      	ldrb	r3, [r7, #8]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	b21a      	sxth	r2, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	801a      	strh	r2, [r3, #0]

  return ret;
 8003dda:	68fb      	ldr	r3, [r7, #12]
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003df0:	f107 0208 	add.w	r2, r7, #8
 8003df4:	2301      	movs	r3, #1
 8003df6:	2120      	movs	r1, #32
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff31 	bl	8003c60 <hts221_read_reg>
 8003dfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8003e06:	78fb      	ldrb	r3, [r7, #3]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	7a3b      	ldrb	r3, [r7, #8]
 8003e10:	f362 13c7 	bfi	r3, r2, #7, #1
 8003e14:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8003e16:	f107 0208 	add.w	r2, r7, #8
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff ff36 	bl	8003c90 <hts221_write_reg>
 8003e24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003e26:	68fb      	ldr	r3, [r7, #12]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8003e3a:	f107 020b 	add.w	r2, r7, #11
 8003e3e:	2301      	movs	r3, #1
 8003e40:	2130      	movs	r1, #48	; 0x30
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff0c 	bl	8003c60 <hts221_read_reg>
 8003e48:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003e4a:	7afb      	ldrb	r3, [r7, #11]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003e62:	68fb      	ldr	r3, [r7, #12]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8003e76:	f107 020b 	add.w	r2, r7, #11
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	2131      	movs	r1, #49	; 0x31
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff feee 	bl	8003c60 <hts221_read_reg>
 8003e84:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8003e86:	7afb      	ldrb	r3, [r7, #11]
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e90:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8003eb2:	f107 020f 	add.w	r2, r7, #15
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	2132      	movs	r1, #50	; 0x32
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fed0 	bl	8003c60 <hts221_read_reg>
 8003ec0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11b      	bne.n	8003f00 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003ec8:	f107 0210 	add.w	r2, r7, #16
 8003ecc:	2301      	movs	r3, #1
 8003ece:	2135      	movs	r1, #53	; 0x35
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fec5 	bl	8003c60 <hts221_read_reg>
 8003ed6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8003ed8:	7c3b      	ldrb	r3, [r7, #16]
 8003eda:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	7bfa      	ldrb	r2, [r7, #15]
 8003ee8:	4413      	add	r3, r2
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ef2:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003f00:	697b      	ldr	r3, [r7, #20]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8003f14:	f107 020f 	add.w	r2, r7, #15
 8003f18:	2301      	movs	r3, #1
 8003f1a:	2133      	movs	r1, #51	; 0x33
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fe9f 	bl	8003c60 <hts221_read_reg>
 8003f22:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11b      	bne.n	8003f62 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8003f2a:	f107 0210 	add.w	r2, r7, #16
 8003f2e:	2301      	movs	r3, #1
 8003f30:	2135      	movs	r1, #53	; 0x35
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff fe94 	bl	8003c60 <hts221_read_reg>
 8003f38:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8003f3a:	7c3b      	ldrb	r3, [r7, #16]
 8003f3c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8003f44:	7cfb      	ldrb	r3, [r7, #19]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f54:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8003f62:	697b      	ldr	r3, [r7, #20]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8003f76:	f107 0208 	add.w	r2, r7, #8
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	2136      	movs	r1, #54	; 0x36
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fe6e 	bl	8003c60 <hts221_read_reg>
 8003f84:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003f86:	7a7b      	ldrb	r3, [r7, #9]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	021b      	lsls	r3, r3, #8
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	7a3b      	ldrb	r3, [r7, #8]
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003f98:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003f9c:	ee07 3a90 	vmov	s15, r3
 8003fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003faa:	68fb      	ldr	r3, [r7, #12]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8003fbe:	f107 0208 	add.w	r2, r7, #8
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	213a      	movs	r1, #58	; 0x3a
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff fe4a 	bl	8003c60 <hts221_read_reg>
 8003fcc:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8003fce:	7a7b      	ldrb	r3, [r7, #9]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	7a3b      	ldrb	r3, [r7, #8]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	4413      	add	r3, r2
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8003fe0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003fe4:	ee07 3a90 	vmov	s15, r3
 8003fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8004006:	f107 0208 	add.w	r2, r7, #8
 800400a:	2302      	movs	r3, #2
 800400c:	213c      	movs	r1, #60	; 0x3c
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff fe26 	bl	8003c60 <hts221_read_reg>
 8004014:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8004016:	7a7b      	ldrb	r3, [r7, #9]
 8004018:	b29b      	uxth	r3, r3
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	b29a      	uxth	r2, r3
 800401e:	7a3b      	ldrb	r3, [r7, #8]
 8004020:	b29b      	uxth	r3, r3
 8004022:	4413      	add	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004028:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800402c:	ee07 3a90 	vmov	s15, r3
 8004030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800403a:	68fb      	ldr	r3, [r7, #12]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800404e:	f107 0208 	add.w	r2, r7, #8
 8004052:	2302      	movs	r3, #2
 8004054:	213e      	movs	r1, #62	; 0x3e
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fe02 	bl	8003c60 <hts221_read_reg>
 800405c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800405e:	7a7b      	ldrb	r3, [r7, #9]
 8004060:	b29b      	uxth	r3, r3
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	b29a      	uxth	r2, r3
 8004066:	7a3b      	ldrb	r3, [r7, #8]
 8004068:	b29b      	uxth	r3, r3
 800406a:	4413      	add	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8004070:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8004082:	68fb      	ldr	r3, [r7, #12]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3710      	adds	r7, #16
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <LPS22HB_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HB_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d103      	bne.n	80040a8 <LPS22HB_RegisterBusIO+0x1c>
  {
    ret = LPS22HB_ERROR;
 80040a0:	f04f 33ff 	mov.w	r3, #4294967295
 80040a4:	60fb      	str	r3, [r7, #12]
 80040a6:	e051      	b.n	800414c <LPS22HB_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	7b1a      	ldrb	r2, [r3, #12]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699a      	ldr	r2, [r3, #24]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <LPS22HB_RegisterBusIO+0xcc>)
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <LPS22HB_RegisterBusIO+0xd0>)
 80040ea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d103      	bne.n	800410a <LPS22HB_RegisterBusIO+0x7e>
    {
      ret = LPS22HB_ERROR;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	e020      	b.n	800414c <LPS22HB_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LPS22HB_OK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4798      	blx	r3
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <LPS22HB_RegisterBusIO+0x92>
    {
      ret = LPS22HB_ERROR;
 8004116:	f04f 33ff 	mov.w	r3, #4294967295
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e016      	b.n	800414c <LPS22HB_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d112      	bne.n	800414c <LPS22HB_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10d      	bne.n	800414c <LPS22HB_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004130:	2301      	movs	r3, #1
 8004132:	72fb      	strb	r3, [r7, #11]

          if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
 8004134:	7afb      	ldrb	r3, [r7, #11]
 8004136:	461a      	mov	r2, r3
 8004138:	2110      	movs	r1, #16
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f877 	bl	800422e <LPS22HB_Write_Reg>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <LPS22HB_RegisterBusIO+0xc0>
          {
            ret = LPS22HB_ERROR;
 8004146:	f04f 33ff 	mov.w	r3, #4294967295
 800414a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	08004317 	.word	0x08004317
 800415c:	0800439d 	.word	0x0800439d

08004160 <LPS22HB_Init>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800416e:	2b00      	cmp	r3, #0
 8004170:	d108      	bne.n	8004184 <LPS22HB_Init+0x24>
  {
    if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f876 	bl	8004264 <LPS22HB_Initialize>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <LPS22HB_Init+0x24>
    {
      return LPS22HB_ERROR;
 800417e:	f04f 33ff 	mov.w	r3, #4294967295
 8004182:	e004      	b.n	800418e <LPS22HB_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LPS22HB_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <LPS22HB_PRESS_Enable>:
  * @brief  Enable the LPS22HB pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <LPS22HB_PRESS_Enable+0x16>
  {
    return LPS22HB_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e014      	b.n	80041d6 <LPS22HB_PRESS_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f103 0220 	add.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 f9c6 	bl	800454c <lps22hb_data_rate_set>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <LPS22HB_PRESS_Enable+0x36>
  {
    return LPS22HB_ERROR;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	e004      	b.n	80041d6 <LPS22HB_PRESS_Enable+0x40>
  }

  pObj->press_is_enabled = 1;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LPS22HB_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <LPS22HB_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]
  lps22hb_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80041e8:	f107 030c 	add.w	r3, r7, #12
 80041ec:	2204      	movs	r2, #4
 80041ee:	2100      	movs	r1, #0
 80041f0:	4618      	mov	r0, r3
 80041f2:	f00a fbe3 	bl	800e9bc <memset>
  if (lps22hb_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HB_OK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3320      	adds	r3, #32
 80041fa:	f107 020c 	add.w	r2, r7, #12
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f9c9 	bl	8004598 <lps22hb_pressure_raw_get>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <LPS22HB_PRESS_GetPressure+0x34>
  {
    return LPS22HB_ERROR;
 800420c:	f04f 33ff 	mov.w	r3, #4294967295
 8004210:	e009      	b.n	8004226 <LPS22HB_PRESS_GetPressure+0x48>
  }

  *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 f935 	bl	8004484 <lps22hb_from_lsb_to_hpa>
 800421a:	eef0 7a40 	vmov.f32	s15, s0
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	edc3 7a00 	vstr	s15, [r3]

  return LPS22HB_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <LPS22HB_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	70fb      	strb	r3, [r7, #3]
 800423a:	4613      	mov	r3, r2
 800423c:	70bb      	strb	r3, [r7, #2]
  if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f103 0020 	add.w	r0, r3, #32
 8004244:	1cba      	adds	r2, r7, #2
 8004246:	78f9      	ldrb	r1, [r7, #3]
 8004248:	2301      	movs	r3, #1
 800424a:	f000 f902 	bl	8004452 <lps22hb_write_reg>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <LPS22HB_Write_Reg+0x2c>
  {
    return LPS22HB_ERROR;
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	e000      	b.n	800425c <LPS22HB_Write_Reg+0x2e>
  }

  return LPS22HB_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <LPS22HB_Initialize>:
  * @brief  Initialize the LPS22HB sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Set Power mode */
  if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3320      	adds	r3, #32
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f9b9 	bl	80045ea <lps22hb_low_power_set>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <LPS22HB_Initialize+0x20>
  {
    return LPS22HB_ERROR;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e044      	b.n	800430e <LPS22HB_Initialize+0xaa>
  }

  /* Power down the device */
  if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3320      	adds	r3, #32
 8004288:	2100      	movs	r1, #0
 800428a:	4618      	mov	r0, r3
 800428c:	f000 f95e 	bl	800454c <lps22hb_data_rate_set>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <LPS22HB_Initialize+0x38>
  {
    return LPS22HB_ERROR;
 8004296:	f04f 33ff 	mov.w	r3, #4294967295
 800429a:	e038      	b.n	800430e <LPS22HB_Initialize+0xaa>
  }

  /* Disable low-pass filter on LPS22HB pressure data */
  if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3320      	adds	r3, #32
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f92c 	bl	8004500 <lps22hb_low_pass_filter_mode_set>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <LPS22HB_Initialize+0x50>
  {
    return LPS22HB_ERROR;
 80042ae:	f04f 33ff 	mov.w	r3, #4294967295
 80042b2:	e02c      	b.n	800430e <LPS22HB_Initialize+0xaa>
  }

  if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3320      	adds	r3, #32
 80042b8:	2101      	movs	r1, #1
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f8fa 	bl	80044b4 <lps22hb_block_data_update_set>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <LPS22HB_Initialize+0x68>
  {
    return LPS22HB_ERROR;
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ca:	e020      	b.n	800430e <LPS22HB_Initialize+0xaa>
  }

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <LPS22HB_Initialize+0x88>
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3320      	adds	r3, #32
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f9ab 	bl	8004636 <lps22hb_auto_add_inc_set>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00e      	beq.n	8004304 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
 80042ea:	e010      	b.n	800430e <LPS22HB_Initialize+0xaa>
    }
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3320      	adds	r3, #32
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f99f 	bl	8004636 <lps22hb_auto_add_inc_set>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <LPS22HB_Initialize+0xa0>
    {
      return LPS22HB_ERROR;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	e004      	b.n	800430e <LPS22HB_Initialize+0xaa>
    }
  }

  pObj->last_odr = LPS22HB_ODR_25_Hz;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2203      	movs	r2, #3
 8004308:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  return LPS22HB_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004316:	b590      	push	{r4, r7, lr}
 8004318:	b089      	sub	sp, #36	; 0x24
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	461a      	mov	r2, r3
 8004322:	460b      	mov	r3, r1
 8004324:	72fb      	strb	r3, [r7, #11]
 8004326:	4613      	mov	r3, r2
 8004328:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d121      	bne.n	800437e <ReadRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	83fb      	strh	r3, [r7, #30]
 800433e:	e018      	b.n	8004372 <ReadRegWrap+0x5c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	695c      	ldr	r4, [r3, #20]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	7b1b      	ldrb	r3, [r3, #12]
 8004348:	b298      	uxth	r0, r3
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	b29a      	uxth	r2, r3
 800434e:	8bfb      	ldrh	r3, [r7, #30]
 8004350:	4413      	add	r3, r2
 8004352:	b299      	uxth	r1, r3
 8004354:	8bfb      	ldrh	r3, [r7, #30]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	441a      	add	r2, r3
 800435a:	2301      	movs	r3, #1
 800435c:	47a0      	blx	r4
 800435e:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <ReadRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	e013      	b.n	8004394 <ReadRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 800436c:	8bfb      	ldrh	r3, [r7, #30]
 800436e:	3301      	adds	r3, #1
 8004370:	83fb      	strh	r3, [r7, #30]
 8004372:	8bfa      	ldrh	r2, [r7, #30]
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	429a      	cmp	r2, r3
 8004378:	d3e2      	bcc.n	8004340 <ReadRegWrap+0x2a>
      }
    }

    return ret;
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	e00a      	b.n	8004394 <ReadRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	695c      	ldr	r4, [r3, #20]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	7b1b      	ldrb	r3, [r3, #12]
 8004386:	b298      	uxth	r0, r3
 8004388:	7afb      	ldrb	r3, [r7, #11]
 800438a:	b299      	uxth	r1, r3
 800438c:	893b      	ldrh	r3, [r7, #8]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	47a0      	blx	r4
 8004392:	4603      	mov	r3, r0
  }
}
 8004394:	4618      	mov	r0, r3
 8004396:	3724      	adds	r7, #36	; 0x24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd90      	pop	{r4, r7, pc}

0800439c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800439c:	b590      	push	{r4, r7, lr}
 800439e:	b089      	sub	sp, #36	; 0x24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	460b      	mov	r3, r1
 80043aa:	72fb      	strb	r3, [r7, #11]
 80043ac:	4613      	mov	r3, r2
 80043ae:	813b      	strh	r3, [r7, #8]
  uint16_t i;
  int32_t ret = LPS22HB_OK;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61bb      	str	r3, [r7, #24]
  LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d121      	bne.n	8004404 <WriteRegWrap+0x68>
  {
    for (i = 0; i < Length; i++)
 80043c0:	2300      	movs	r3, #0
 80043c2:	83fb      	strh	r3, [r7, #30]
 80043c4:	e018      	b.n	80043f8 <WriteRegWrap+0x5c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	691c      	ldr	r4, [r3, #16]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	7b1b      	ldrb	r3, [r3, #12]
 80043ce:	b298      	uxth	r0, r3
 80043d0:	7afb      	ldrb	r3, [r7, #11]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	8bfb      	ldrh	r3, [r7, #30]
 80043d6:	4413      	add	r3, r2
 80043d8:	b299      	uxth	r1, r3
 80043da:	8bfb      	ldrh	r3, [r7, #30]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	441a      	add	r2, r3
 80043e0:	2301      	movs	r3, #1
 80043e2:	47a0      	blx	r4
 80043e4:	61b8      	str	r0, [r7, #24]
      if (ret != LPS22HB_OK)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <WriteRegWrap+0x56>
      {
        return LPS22HB_ERROR;
 80043ec:	f04f 33ff 	mov.w	r3, #4294967295
 80043f0:	e013      	b.n	800441a <WriteRegWrap+0x7e>
    for (i = 0; i < Length; i++)
 80043f2:	8bfb      	ldrh	r3, [r7, #30]
 80043f4:	3301      	adds	r3, #1
 80043f6:	83fb      	strh	r3, [r7, #30]
 80043f8:	8bfa      	ldrh	r2, [r7, #30]
 80043fa:	893b      	ldrh	r3, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d3e2      	bcc.n	80043c6 <WriteRegWrap+0x2a>
      }
    }

    return ret;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	e00a      	b.n	800441a <WriteRegWrap+0x7e>
  }
  else /* SPI 4-Wires or SPI 3-Wires */
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	691c      	ldr	r4, [r3, #16]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	7b1b      	ldrb	r3, [r3, #12]
 800440c:	b298      	uxth	r0, r3
 800440e:	7afb      	ldrb	r3, [r7, #11]
 8004410:	b299      	uxth	r1, r3
 8004412:	893b      	ldrh	r3, [r7, #8]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	47a0      	blx	r4
 8004418:	4603      	mov	r3, r0
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3724      	adds	r7, #36	; 0x24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd90      	pop	{r4, r7, pc}

08004422 <lps22hb_read_reg>:
  *
  */
int32_t lps22hb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004422:	b590      	push	{r4, r7, lr}
 8004424:	b087      	sub	sp, #28
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	461a      	mov	r2, r3
 800442e:	460b      	mov	r3, r1
 8004430:	72fb      	strb	r3, [r7, #11]
 8004432:	4613      	mov	r3, r2
 8004434:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	685c      	ldr	r4, [r3, #4]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68d8      	ldr	r0, [r3, #12]
 800443e:	893b      	ldrh	r3, [r7, #8]
 8004440:	7af9      	ldrb	r1, [r7, #11]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	47a0      	blx	r4
 8004446:	6178      	str	r0, [r7, #20]

  return ret;
 8004448:	697b      	ldr	r3, [r7, #20]
}
 800444a:	4618      	mov	r0, r3
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	bd90      	pop	{r4, r7, pc}

08004452 <lps22hb_write_reg>:
  *
  */
int32_t lps22hb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004452:	b590      	push	{r4, r7, lr}
 8004454:	b087      	sub	sp, #28
 8004456:	af00      	add	r7, sp, #0
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	461a      	mov	r2, r3
 800445e:	460b      	mov	r3, r1
 8004460:	72fb      	strb	r3, [r7, #11]
 8004462:	4613      	mov	r3, r2
 8004464:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681c      	ldr	r4, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68d8      	ldr	r0, [r3, #12]
 800446e:	893b      	ldrh	r3, [r7, #8]
 8004470:	7af9      	ldrb	r1, [r7, #11]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	47a0      	blx	r4
 8004476:	6178      	str	r0, [r7, #20]

  return ret;
 8004478:	697b      	ldr	r3, [r7, #20]
}
 800447a:	4618      	mov	r0, r3
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd90      	pop	{r4, r7, pc}
	...

08004484 <lps22hb_from_lsb_to_hpa>:
  * @{
  *
  */

float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  return ((float_t)lsb / 1048576.0f);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004496:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80044b0 <lps22hb_from_lsb_to_hpa+0x2c>
 800449a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800449e:	eef0 7a66 	vmov.f32	s15, s13
}
 80044a2:	eeb0 0a67 	vmov.f32	s0, s15
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	49800000 	.word	0x49800000

080044b4 <lps22hb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80044c0:	f107 0208 	add.w	r2, r7, #8
 80044c4:	2301      	movs	r3, #1
 80044c6:	2110      	movs	r1, #16
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f7ff ffaa 	bl	8004422 <lps22hb_read_reg>
 80044ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <lps22hb_block_data_update_set+0x42>
  {
    ctrl_reg1.bdu = val;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	7a3b      	ldrb	r3, [r7, #8]
 80044e0:	f362 0341 	bfi	r3, r2, #1, #1
 80044e4:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80044e6:	f107 0208 	add.w	r2, r7, #8
 80044ea:	2301      	movs	r3, #1
 80044ec:	2110      	movs	r1, #16
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff ffaf 	bl	8004452 <lps22hb_write_reg>
 80044f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <lps22hb_low_pass_filter_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_pass_filter_mode_set(stmdev_ctx_t *ctx,
                                         lps22hb_lpfp_t val)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800450c:	f107 0208 	add.w	r2, r7, #8
 8004510:	2301      	movs	r3, #1
 8004512:	2110      	movs	r1, #16
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7ff ff84 	bl	8004422 <lps22hb_read_reg>
 800451a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <lps22hb_low_pass_filter_mode_set+0x42>
  {
    ctrl_reg1.lpfp = (uint8_t)val;
 8004522:	78fb      	ldrb	r3, [r7, #3]
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	b2da      	uxtb	r2, r3
 800452a:	7a3b      	ldrb	r3, [r7, #8]
 800452c:	f362 0383 	bfi	r3, r2, #2, #2
 8004530:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004532:	f107 0208 	add.w	r2, r7, #8
 8004536:	2301      	movs	r3, #1
 8004538:	2110      	movs	r1, #16
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff89 	bl	8004452 <lps22hb_write_reg>
 8004540:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <lps22hb_data_rate_set>:
  * @param  val    Change the values of odr in reg CTRL_REG1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_data_rate_set(stmdev_ctx_t *ctx, lps22hb_odr_t val)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8004558:	f107 0208 	add.w	r2, r7, #8
 800455c:	2301      	movs	r3, #1
 800455e:	2110      	movs	r1, #16
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff5e 	bl	8004422 <lps22hb_read_reg>
 8004566:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10f      	bne.n	800458e <lps22hb_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	b2da      	uxtb	r2, r3
 8004576:	7a3b      	ldrb	r3, [r7, #8]
 8004578:	f362 1306 	bfi	r3, r2, #4, #3
 800457c:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800457e:	f107 0208 	add.w	r2, r7, #8
 8004582:	2301      	movs	r3, #1
 8004584:	2110      	movs	r1, #16
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ff63 	bl	8004452 <lps22hb_write_reg>
 800458c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800458e:	68fb      	ldr	r3, [r7, #12]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <lps22hb_pressure_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint8_t reg[3];
  int32_t ret;

  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, reg, 3);
 80045a2:	f107 0208 	add.w	r2, r7, #8
 80045a6:	2303      	movs	r3, #3
 80045a8:	2128      	movs	r1, #40	; 0x28
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff ff39 	bl	8004422 <lps22hb_read_reg>
 80045b0:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80045b2:	7abb      	ldrb	r3, [r7, #10]
 80045b4:	461a      	mov	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	7a7a      	ldrb	r2, [r7, #9]
 80045c2:	441a      	add	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	021b      	lsls	r3, r3, #8
 80045ce:	7a3a      	ldrb	r2, [r7, #8]
 80045d0:	441a      	add	r2, r3
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	021a      	lsls	r2, r3, #8
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	601a      	str	r2, [r3, #0]

  return ret;
 80045e0:	68fb      	ldr	r3, [r7, #12]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <lps22hb_low_power_set>:
  * @param  val    Change the values of lc_en in reg RES_CONF
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_low_power_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	70fb      	strb	r3, [r7, #3]
  lps22hb_res_conf_t res_conf;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 80045f6:	f107 0208 	add.w	r2, r7, #8
 80045fa:	2301      	movs	r3, #1
 80045fc:	211a      	movs	r1, #26
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff ff0f 	bl	8004422 <lps22hb_read_reg>
 8004604:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10f      	bne.n	800462c <lps22hb_low_power_set+0x42>
  {
    res_conf.lc_en = val;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	b2da      	uxtb	r2, r3
 8004614:	7a3b      	ldrb	r3, [r7, #8]
 8004616:	f362 0300 	bfi	r3, r2, #0, #1
 800461a:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t *)&res_conf, 1);
 800461c:	f107 0208 	add.w	r2, r7, #8
 8004620:	2301      	movs	r3, #1
 8004622:	211a      	movs	r1, #26
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff14 	bl	8004452 <lps22hb_write_reg>
 800462a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800462c:	68fb      	ldr	r3, [r7, #12]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <lps22hb_auto_add_inc_set>:
  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lps22hb_auto_add_inc_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	460b      	mov	r3, r1
 8004640:	70fb      	strb	r3, [r7, #3]
  lps22hb_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004642:	f107 0208 	add.w	r2, r7, #8
 8004646:	2301      	movs	r3, #1
 8004648:	2111      	movs	r1, #17
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff fee9 	bl	8004422 <lps22hb_read_reg>
 8004650:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10f      	bne.n	8004678 <lps22hb_auto_add_inc_set+0x42>
  {
    ctrl_reg2.if_add_inc = val;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	b2da      	uxtb	r2, r3
 8004660:	7a3b      	ldrb	r3, [r7, #8]
 8004662:	f362 1304 	bfi	r3, r2, #4, #1
 8004666:	723b      	strb	r3, [r7, #8]
    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8004668:	f107 0208 	add.w	r2, r7, #8
 800466c:	2301      	movs	r3, #1
 800466e:	2111      	movs	r1, #17
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff feee 	bl	8004452 <lps22hb_write_reg>
 8004676:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004678:	68fb      	ldr	r3, [r7, #12]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <LSM303AGR_ACC_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8004698:	f04f 33ff 	mov.w	r3, #4294967295
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	e051      	b.n	8004744 <LSM303AGR_ACC_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	7b1a      	ldrb	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <LSM303AGR_ACC_RegisterBusIO+0xcc>)
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a1c      	ldr	r2, [pc, #112]	; (8004754 <LSM303AGR_ACC_RegisterBusIO+0xd0>)
 80046e2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d103      	bne.n	8004702 <LSM303AGR_ACC_RegisterBusIO+0x7e>
    {
      ret = LSM303AGR_ERROR;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e020      	b.n	8004744 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4798      	blx	r3
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <LSM303AGR_ACC_RegisterBusIO+0x92>
    {
      ret = LSM303AGR_ERROR;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	e016      	b.n	8004744 <LSM303AGR_ACC_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d112      	bne.n	8004744 <LSM303AGR_ACC_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10d      	bne.n	8004744 <LSM303AGR_ACC_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8004728:	2301      	movs	r3, #1
 800472a:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 800472c:	7afb      	ldrb	r3, [r7, #11]
 800472e:	461a      	mov	r2, r3
 8004730:	2123      	movs	r1, #35	; 0x23
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f97b 	bl	8004a2e <LSM303AGR_ACC_Write_Reg>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <LSM303AGR_ACC_RegisterBusIO+0xc0>
          {
            return LSM303AGR_ERROR;
 800473e:	f04f 33ff 	mov.w	r3, #4294967295
 8004742:	e000      	b.n	8004746 <LSM303AGR_ACC_RegisterBusIO+0xc2>
        }
      }
    }
  }

  return ret;
 8004744:	68fb      	ldr	r3, [r7, #12]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	08004e49 	.word	0x08004e49
 8004754:	08004eab 	.word	0x08004eab

08004758 <LSM303AGR_ACC_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	3320      	adds	r3, #32
 8004764:	2101      	movs	r1, #1
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fd1a 	bl	80051a0 <lsm303agr_xl_block_data_update_set>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8004772:	f04f 33ff 	mov.w	r3, #4294967295
 8004776:	e02c      	b.n	80047d2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3320      	adds	r3, #32
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fe62 	bl	8005448 <lsm303agr_xl_fifo_mode_set>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 800478a:	f04f 33ff 	mov.w	r3, #4294967295
 800478e:	e020      	b.n	80047d2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2205      	movs	r2, #5
 8004794:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3320      	adds	r3, #32
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fc7a 	bl	8005098 <lsm303agr_xl_data_rate_set>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	e010      	b.n	80047d2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3320      	adds	r3, #32
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fc94 	bl	80050e4 <lsm303agr_xl_full_scale_set>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d002      	beq.n	80047c8 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	e004      	b.n	80047d2 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <LSM303AGR_ACC_Enable>:
  * @brief  Enable the LSM303AGR accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b082      	sub	sp, #8
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e014      	b.n	800481a <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f103 0220 	add.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f000 fc4a 	bl	8005098 <lsm303agr_xl_data_rate_set>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 800480a:	f04f 33ff 	mov.w	r3, #4294967295
 800480e:	e004      	b.n	800481a <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <LSM303AGR_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3320      	adds	r3, #32
 8004834:	f107 020b 	add.w	r2, r7, #11
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fbf8 	bl	8005030 <lsm303agr_xl_operating_mode_get>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8004846:	f04f 33ff 	mov.w	r3, #4294967295
 800484a:	e031      	b.n	80048b0 <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 800484c:	7afb      	ldrb	r3, [r7, #11]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d01a      	beq.n	8004888 <LSM303AGR_ACC_GetSensitivity+0x66>
 8004852:	2b02      	cmp	r3, #2
 8004854:	dc22      	bgt.n	800489c <LSM303AGR_ACC_GetSensitivity+0x7a>
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <LSM303AGR_ACC_GetSensitivity+0x3e>
 800485a:	2b01      	cmp	r3, #1
 800485c:	d00a      	beq.n	8004874 <LSM303AGR_ACC_GetSensitivity+0x52>
 800485e:	e01d      	b.n	800489c <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8004860:	6839      	ldr	r1, [r7, #0]
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa1e 	bl	8004ca4 <LSM303AGR_ACC_GetSensitivityHR>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01a      	beq.n	80048a4 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 800486e:	f04f 33ff 	mov.w	r3, #4294967295
 8004872:	e01d      	b.n	80048b0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa5a 	bl	8004d30 <LSM303AGR_ACC_GetSensitivityNM>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d012      	beq.n	80048a8 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	e013      	b.n	80048b0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8004888:	6839      	ldr	r1, [r7, #0]
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa96 	bl	8004dbc <LSM303AGR_ACC_GetSensitivityLP>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8004896:	f04f 33ff 	mov.w	r3, #4294967295
 800489a:	e009      	b.n	80048b0 <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 800489c:	f04f 33ff 	mov.w	r3, #4294967295
 80048a0:	60fb      	str	r3, [r7, #12]
      break;
 80048a2:	e004      	b.n	80048ae <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80048a4:	bf00      	nop
 80048a6:	e002      	b.n	80048ae <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 80048ac:	bf00      	nop
  }

  return ret;
 80048ae:	68fb      	ldr	r3, [r7, #12]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <LSM303AGR_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 80048c2:	2301      	movs	r3, #1
 80048c4:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	3320      	adds	r3, #32
 80048ce:	f107 020f 	add.w	r2, r7, #15
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fbab 	bl	8005030 <lsm303agr_xl_operating_mode_get>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	e04a      	b.n	800497c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d00c      	beq.n	8004906 <LSM303AGR_ACC_GetAxesRaw+0x4e>
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	dc0e      	bgt.n	800490e <LSM303AGR_ACC_GetAxesRaw+0x56>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <LSM303AGR_ACC_GetAxesRaw+0x42>
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d003      	beq.n	8004900 <LSM303AGR_ACC_GetAxesRaw+0x48>
 80048f8:	e009      	b.n	800490e <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 80048fa:	2310      	movs	r3, #16
 80048fc:	83fb      	strh	r3, [r7, #30]
      break;
 80048fe:	e00a      	b.n	8004916 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8004900:	2340      	movs	r3, #64	; 0x40
 8004902:	83fb      	strh	r3, [r7, #30]
      break;
 8004904:	e007      	b.n	8004916 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8004906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800490a:	83fb      	strh	r3, [r7, #30]
      break;
 800490c:	e003      	b.n	8004916 <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	61bb      	str	r3, [r7, #24]
      break;
 8004914:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d101      	bne.n	8004922 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	e02c      	b.n	800497c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	3320      	adds	r3, #32
 8004926:	f107 0210 	add.w	r2, r7, #16
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fc5d 	bl	80051ec <lsm303agr_acceleration_raw_get>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8004938:	f04f 33ff 	mov.w	r3, #4294967295
 800493c:	e01e      	b.n	800497c <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 800493e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004942:	461a      	mov	r2, r3
 8004944:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004948:	fb92 f3f3 	sdiv	r3, r2, r3
 800494c:	b21a      	sxth	r2, r3
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8004952:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004956:	461a      	mov	r2, r3
 8004958:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800495c:	fb92 f3f3 	sdiv	r3, r2, r3
 8004960:	b21a      	sxth	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8004966:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800496a:	461a      	mov	r2, r3
 800496c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004970:	fb92 f3f3 	sdiv	r3, r2, r3
 8004974:	b21a      	sxth	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	809a      	strh	r2, [r3, #4]

  return ret;
 800497a:	69bb      	ldr	r3, [r7, #24]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3720      	adds	r7, #32
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <LSM303AGR_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff ff8c 	bl	80048b8 <LSM303AGR_ACC_GetAxesRaw>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295
 80049aa:	e03c      	b.n	8004a26 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 80049ac:	f107 030c 	add.w	r3, r7, #12
 80049b0:	4619      	mov	r1, r3
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff ff35 	bl	8004822 <LSM303AGR_ACC_GetSensitivity>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	e030      	b.n	8004a26 <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80049c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049dc:	ee17 2a90 	vmov	r2, s15
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80049e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049fc:	ee17 2a90 	vmov	r2, s15
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004a04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a1c:	ee17 2a90 	vmov	r2, s15
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <LSM303AGR_ACC_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	70fb      	strb	r3, [r7, #3]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f103 0020 	add.w	r0, r3, #32
 8004a44:	1cba      	adds	r2, r7, #2
 8004a46:	78f9      	ldrb	r1, [r7, #3]
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f000 fad9 	bl	8005000 <lsm303agr_write_reg>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8004a54:	f04f 33ff 	mov.w	r3, #4294967295
 8004a58:	e000      	b.n	8004a5c <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <LSM303AGR_MAG_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d103      	bne.n	8004a80 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e04b      	b.n	8004b18 <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	7b1a      	ldrb	r2, [r3, #12]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a1a      	ldr	r2, [pc, #104]	; (8004b24 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8004ac2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.handle    = pObj;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8004ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e01e      	b.n	8004b18 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4798      	blx	r3
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e014      	b.n	8004b18 <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d010      	beq.n	8004b18 <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3320      	adds	r3, #32
 8004b04:	2101      	movs	r1, #1
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fcc4 	bl	8005494 <lsm303agr_mag_i2c_interface_set>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295
 8004b16:	e000      	b.n	8004b1a <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8004b18:	68fb      	ldr	r3, [r7, #12]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	08004f0d 	.word	0x08004f0d
 8004b28:	08004f6f 	.word	0x08004f6f

08004b2c <LSM303AGR_MAG_Init>:
  * @brief  Initialize the LSM303AGR sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3320      	adds	r3, #32
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fbed 	bl	800531a <lsm303agr_mag_block_data_update_set>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8004b46:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4a:	e028      	b.n	8004b9e <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3320      	adds	r3, #32
 8004b50:	2102      	movs	r1, #2
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fb95 	bl	8005282 <lsm303agr_mag_operating_mode_set>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8004b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b62:	e01c      	b.n	8004b9e <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3320      	adds	r3, #32
 8004b68:	2103      	movs	r1, #3
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fbaf 	bl	80052ce <lsm303agr_mag_data_rate_set>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295
 8004b7a:	e010      	b.n	8004b9e <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3320      	adds	r3, #32
 8004b80:	2100      	movs	r1, #0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fc3a 	bl	80053fc <lsm303agr_mag_self_test_set>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d002      	beq.n	8004b94 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b92:	e004      	b.n	8004b9e <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM303AGR_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <LSM303AGR_MAG_Enable>:
  * @brief Enable the LSM303AGR magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e010      	b.n	8004bde <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3320      	adds	r3, #32
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f000 fb5d 	bl	8005282 <lsm303agr_mag_operating_mode_set>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd2:	e004      	b.n	8004bde <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM303AGR_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <LSM303AGR_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004bf6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <LSM303AGR_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3320      	adds	r3, #32
 8004c14:	f107 0210 	add.w	r2, r7, #16
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fba3 	bl	8005366 <lsm303agr_magnetic_raw_get>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8004c26:	f04f 33ff 	mov.w	r3, #4294967295
 8004c2a:	e036      	b.n	8004c9a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 8004c2c:	f107 030c 	add.w	r3, r7, #12
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff ffd7 	bl	8004be6 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004c38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004c3c:	ee07 3a90 	vmov	s15, r3
 8004c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c44:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c50:	ee17 2a90 	vmov	r2, s15
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004c58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c5c:	ee07 3a90 	vmov	s15, r3
 8004c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c70:	ee17 2a90 	vmov	r2, s15
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004c78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c7c:	ee07 3a90 	vmov	s15, r3
 8004c80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c90:	ee17 2a90 	vmov	r2, s15
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
	...

08004ca4 <LSM303AGR_ACC_GetSensitivityHR>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3320      	adds	r3, #32
 8004cb6:	f107 020b 	add.w	r2, r7, #11
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fa37 	bl	8005130 <lsm303agr_xl_full_scale_get>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8004cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ccc:	e023      	b.n	8004d16 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8004cce:	7afb      	ldrb	r3, [r7, #11]
 8004cd0:	2b03      	cmp	r3, #3
 8004cd2:	d81b      	bhi.n	8004d0c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8004cd4:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8004cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cda:	bf00      	nop
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004cf5 	.word	0x08004cf5
 8004ce4:	08004cfd 	.word	0x08004cfd
 8004ce8:	08004d05 	.word	0x08004d05
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8004cf0:	601a      	str	r2, [r3, #0]
      break;
 8004cf2:	e00f      	b.n	8004d14 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8004cf8:	601a      	str	r2, [r3, #0]
      break;
 8004cfa:	e00b      	b.n	8004d14 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	4a0a      	ldr	r2, [pc, #40]	; (8004d28 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8004d00:	601a      	str	r2, [r3, #0]
      break;
 8004d02:	e007      	b.n	8004d14 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4a09      	ldr	r2, [pc, #36]	; (8004d2c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8004d08:	601a      	str	r2, [r3, #0]
      break;
 8004d0a:	e003      	b.n	8004d14 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d10:	60fb      	str	r3, [r7, #12]
      break;
 8004d12:	bf00      	nop
  }

  return ret;
 8004d14:	68fb      	ldr	r3, [r7, #12]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	3f7ae148 	.word	0x3f7ae148
 8004d24:	3ff9999a 	.word	0x3ff9999a
 8004d28:	4079999a 	.word	0x4079999a
 8004d2c:	413b851f 	.word	0x413b851f

08004d30 <LSM303AGR_ACC_GetSensitivityNM>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3320      	adds	r3, #32
 8004d42:	f107 020b 	add.w	r2, r7, #11
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 f9f1 	bl	8005130 <lsm303agr_xl_full_scale_get>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8004d54:	f04f 33ff 	mov.w	r3, #4294967295
 8004d58:	e023      	b.n	8004da2 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8004d5a:	7afb      	ldrb	r3, [r7, #11]
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d81b      	bhi.n	8004d98 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d79 	.word	0x08004d79
 8004d6c:	08004d81 	.word	0x08004d81
 8004d70:	08004d89 	.word	0x08004d89
 8004d74:	08004d91 	.word	0x08004d91
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	4a0c      	ldr	r2, [pc, #48]	; (8004dac <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 8004d7c:	601a      	str	r2, [r3, #0]
      break;
 8004d7e:	e00f      	b.n	8004da0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8004d84:	601a      	str	r2, [r3, #0]
      break;
 8004d86:	e00b      	b.n	8004da0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	4a0a      	ldr	r2, [pc, #40]	; (8004db4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 8004d8c:	601a      	str	r2, [r3, #0]
      break;
 8004d8e:	e007      	b.n	8004da0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8004d94:	601a      	str	r2, [r3, #0]
      break;
 8004d96:	e003      	b.n	8004da0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004d98:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9c:	60fb      	str	r3, [r7, #12]
      break;
 8004d9e:	bf00      	nop
  }

  return ret;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	4079999a 	.word	0x4079999a
 8004db0:	40fa3d71 	.word	0x40fa3d71
 8004db4:	417a147b 	.word	0x417a147b
 8004db8:	423b999a 	.word	0x423b999a

08004dbc <LSM303AGR_ACC_GetSensitivityLP>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer to sensitivity
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3320      	adds	r3, #32
 8004dce:	f107 020b 	add.w	r2, r7, #11
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f9ab 	bl	8005130 <lsm303agr_xl_full_scale_get>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8004de0:	f04f 33ff 	mov.w	r3, #4294967295
 8004de4:	e023      	b.n	8004e2e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8004de6:	7afb      	ldrb	r3, [r7, #11]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d81b      	bhi.n	8004e24 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e0d 	.word	0x08004e0d
 8004dfc:	08004e15 	.word	0x08004e15
 8004e00:	08004e1d 	.word	0x08004e1d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8004e08:	601a      	str	r2, [r3, #0]
      break;
 8004e0a:	e00f      	b.n	8004e2c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8004e10:	601a      	str	r2, [r3, #0]
      break;
 8004e12:	e00b      	b.n	8004e2c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8004e18:	601a      	str	r2, [r3, #0]
      break;
 8004e1a:	e007      	b.n	8004e2c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8004e20:	601a      	str	r2, [r3, #0]
      break;
 8004e22:	e003      	b.n	8004e2c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8004e24:	f04f 33ff 	mov.w	r3, #4294967295
 8004e28:	60fb      	str	r3, [r7, #12]
      break;
 8004e2a:	bf00      	nop
  }

  return ret;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	417a147b 	.word	0x417a147b
 8004e3c:	41fa147b 	.word	0x41fa147b
 8004e40:	427a147b 	.word	0x427a147b
 8004e44:	433b947b 	.word	0x433b947b

08004e48 <ReadAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	607a      	str	r2, [r7, #4]
 8004e52:	461a      	mov	r2, r3
 8004e54:	460b      	mov	r3, r1
 8004e56:	72fb      	strb	r3, [r7, #11]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10e      	bne.n	8004e86 <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	695c      	ldr	r4, [r3, #20]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	7b1b      	ldrb	r3, [r3, #12]
 8004e70:	b298      	uxth	r0, r3
 8004e72:	7afb      	ldrb	r3, [r7, #11]
 8004e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	b299      	uxth	r1, r3
 8004e7c:	893b      	ldrh	r3, [r7, #8]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	47a0      	blx	r4
 8004e82:	4603      	mov	r3, r0
 8004e84:	e00d      	b.n	8004ea2 <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	695c      	ldr	r4, [r3, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	7b1b      	ldrb	r3, [r3, #12]
 8004e8e:	b298      	uxth	r0, r3
 8004e90:	7afb      	ldrb	r3, [r7, #11]
 8004e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	b299      	uxth	r1, r3
 8004e9a:	893b      	ldrh	r3, [r7, #8]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	47a0      	blx	r4
 8004ea0:	4603      	mov	r3, r0
  }
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd90      	pop	{r4, r7, pc}

08004eaa <WriteAccRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004eaa:	b590      	push	{r4, r7, lr}
 8004eac:	b087      	sub	sp, #28
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	60f8      	str	r0, [r7, #12]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	72fb      	strb	r3, [r7, #11]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10e      	bne.n	8004ee8 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	691c      	ldr	r4, [r3, #16]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	7b1b      	ldrb	r3, [r3, #12]
 8004ed2:	b298      	uxth	r0, r3
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
 8004ed6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	b299      	uxth	r1, r3
 8004ede:	893b      	ldrh	r3, [r7, #8]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	47a0      	blx	r4
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	e00d      	b.n	8004f04 <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	691c      	ldr	r4, [r3, #16]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	7b1b      	ldrb	r3, [r3, #12]
 8004ef0:	b298      	uxth	r0, r3
 8004ef2:	7afb      	ldrb	r3, [r7, #11]
 8004ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	b299      	uxth	r1, r3
 8004efc:	893b      	ldrh	r3, [r7, #8]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	47a0      	blx	r4
 8004f02:	4603      	mov	r3, r0
  }
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	371c      	adds	r7, #28
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd90      	pop	{r4, r7, pc}

08004f0c <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	461a      	mov	r2, r3
 8004f18:	460b      	mov	r3, r1
 8004f1a:	72fb      	strb	r3, [r7, #11]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10e      	bne.n	8004f4a <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	695c      	ldr	r4, [r3, #20]
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	7b1b      	ldrb	r3, [r3, #12]
 8004f34:	b298      	uxth	r0, r3
 8004f36:	7afb      	ldrb	r3, [r7, #11]
 8004f38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	b299      	uxth	r1, r3
 8004f40:	893b      	ldrh	r3, [r7, #8]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	47a0      	blx	r4
 8004f46:	4603      	mov	r3, r0
 8004f48:	e00d      	b.n	8004f66 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	695c      	ldr	r4, [r3, #20]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	7b1b      	ldrb	r3, [r3, #12]
 8004f52:	b298      	uxth	r0, r3
 8004f54:	7afb      	ldrb	r3, [r7, #11]
 8004f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	b299      	uxth	r1, r3
 8004f5e:	893b      	ldrh	r3, [r7, #8]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	47a0      	blx	r4
 8004f64:	4603      	mov	r3, r0
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	371c      	adds	r7, #28
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd90      	pop	{r4, r7, pc}

08004f6e <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004f6e:	b590      	push	{r4, r7, lr}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	72fb      	strb	r3, [r7, #11]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10e      	bne.n	8004fac <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	691c      	ldr	r4, [r3, #16]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	7b1b      	ldrb	r3, [r3, #12]
 8004f96:	b298      	uxth	r0, r3
 8004f98:	7afb      	ldrb	r3, [r7, #11]
 8004f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	b299      	uxth	r1, r3
 8004fa2:	893b      	ldrh	r3, [r7, #8]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	47a0      	blx	r4
 8004fa8:	4603      	mov	r3, r0
 8004faa:	e00d      	b.n	8004fc8 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	691c      	ldr	r4, [r3, #16]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	7b1b      	ldrb	r3, [r3, #12]
 8004fb4:	b298      	uxth	r0, r3
 8004fb6:	7afb      	ldrb	r3, [r7, #11]
 8004fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	b299      	uxth	r1, r3
 8004fc0:	893b      	ldrh	r3, [r7, #8]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	47a0      	blx	r4
 8004fc6:	4603      	mov	r3, r0
  }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd90      	pop	{r4, r7, pc}

08004fd0 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004fd0:	b590      	push	{r4, r7, lr}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	607a      	str	r2, [r7, #4]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	460b      	mov	r3, r1
 8004fde:	72fb      	strb	r3, [r7, #11]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685c      	ldr	r4, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68d8      	ldr	r0, [r3, #12]
 8004fec:	893b      	ldrh	r3, [r7, #8]
 8004fee:	7af9      	ldrb	r1, [r7, #11]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	47a0      	blx	r4
 8004ff4:	6178      	str	r0, [r7, #20]

  return ret;
 8004ff6:	697b      	ldr	r3, [r7, #20]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd90      	pop	{r4, r7, pc}

08005000 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b087      	sub	sp, #28
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	607a      	str	r2, [r7, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	460b      	mov	r3, r1
 800500e:	72fb      	strb	r3, [r7, #11]
 8005010:	4613      	mov	r3, r2
 8005012:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681c      	ldr	r4, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	68d8      	ldr	r0, [r3, #12]
 800501c:	893b      	ldrh	r3, [r7, #8]
 800501e:	7af9      	ldrb	r1, [r7, #11]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	47a0      	blx	r4
 8005024:	6178      	str	r0, [r7, #20]

  return ret;
 8005026:	697b      	ldr	r3, [r7, #20]
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	bd90      	pop	{r4, r7, pc}

08005030 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 800503a:	f107 020c 	add.w	r2, r7, #12
 800503e:	2301      	movs	r3, #1
 8005040:	2120      	movs	r1, #32
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff ffc4 	bl	8004fd0 <lsm303agr_read_reg>
 8005048:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <lsm303agr_xl_operating_mode_get+0x30>
  {
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005050:	f107 0210 	add.w	r2, r7, #16
 8005054:	2301      	movs	r3, #1
 8005056:	2123      	movs	r1, #35	; 0x23
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ffb9 	bl	8004fd0 <lsm303agr_read_reg>
 800505e:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if (ctrl_reg1_a.lpen != PROPERTY_DISABLE)
 8005060:	7b3b      	ldrb	r3, [r7, #12]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <lsm303agr_xl_operating_mode_get+0x44>
  {
    *val = LSM303AGR_LP_8bit;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2202      	movs	r2, #2
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	e00c      	b.n	800508e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE)
 8005074:	7c3b      	ldrb	r3, [r7, #16]
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <lsm303agr_xl_operating_mode_get+0x58>
  {
    *val = LSM303AGR_HR_12bit;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e002      	b.n	800508e <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else
  {
    *val = LSM303AGR_NM_10bit;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2201      	movs	r2, #1
 800508c:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80050a4:	f107 0208 	add.w	r2, r7, #8
 80050a8:	2301      	movs	r3, #1
 80050aa:	2120      	movs	r1, #32
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ff8f 	bl	8004fd0 <lsm303agr_read_reg>
 80050b2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10f      	bne.n	80050da <lsm303agr_xl_data_rate_set+0x42>
  {
    ctrl_reg1_a.odr = (uint8_t)val;
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	7a3b      	ldrb	r3, [r7, #8]
 80050c4:	f362 1307 	bfi	r3, r2, #4, #4
 80050c8:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80050ca:	f107 0208 	add.w	r2, r7, #8
 80050ce:	2301      	movs	r3, #1
 80050d0:	2120      	movs	r1, #32
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f7ff ff94 	bl	8005000 <lsm303agr_write_reg>
 80050d8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80050da:	68fb      	ldr	r3, [r7, #12]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80050f0:	f107 0208 	add.w	r2, r7, #8
 80050f4:	2301      	movs	r3, #1
 80050f6:	2123      	movs	r1, #35	; 0x23
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff ff69 	bl	8004fd0 <lsm303agr_read_reg>
 80050fe:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <lsm303agr_xl_full_scale_set+0x42>
  {
    ctrl_reg4_a.fs = (uint8_t)val;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	b2da      	uxtb	r2, r3
 800510e:	7a3b      	ldrb	r3, [r7, #8]
 8005110:	f362 1305 	bfi	r3, r2, #4, #2
 8005114:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8005116:	f107 0208 	add.w	r2, r7, #8
 800511a:	2301      	movs	r3, #1
 800511c:	2123      	movs	r1, #35	; 0x23
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff ff6e 	bl	8005000 <lsm303agr_write_reg>
 8005124:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8005126:	68fb      	ldr	r3, [r7, #12]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3710      	adds	r7, #16
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800513a:	f107 0208 	add.w	r2, r7, #8
 800513e:	2301      	movs	r3, #1
 8005140:	2123      	movs	r1, #35	; 0x23
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff ff44 	bl	8004fd0 <lsm303agr_read_reg>
 8005148:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs)
 800514a:	7a3b      	ldrb	r3, [r7, #8]
 800514c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b03      	cmp	r3, #3
 8005154:	d81a      	bhi.n	800518c <lsm303agr_xl_full_scale_get+0x5c>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <lsm303agr_xl_full_scale_get+0x2c>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	0800516d 	.word	0x0800516d
 8005160:	08005175 	.word	0x08005175
 8005164:	0800517d 	.word	0x0800517d
 8005168:	08005185 	.word	0x08005185
  {
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
      break;
 8005172:	e00f      	b.n	8005194 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]
      break;
 800517a:	e00b      	b.n	8005194 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2202      	movs	r2, #2
 8005180:	701a      	strb	r2, [r3, #0]
      break;
 8005182:	e007      	b.n	8005194 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2203      	movs	r2, #3
 8005188:	701a      	strb	r2, [r3, #0]
      break;
 800518a:	e003      	b.n	8005194 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
      break;
 8005192:	bf00      	nop
  }

  return ret;
 8005194:	68fb      	ldr	r3, [r7, #12]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop

080051a0 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	460b      	mov	r3, r1
 80051aa:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80051ac:	f107 0208 	add.w	r2, r7, #8
 80051b0:	2301      	movs	r3, #1
 80051b2:	2123      	movs	r1, #35	; 0x23
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff ff0b 	bl	8004fd0 <lsm303agr_read_reg>
 80051ba:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10f      	bne.n	80051e2 <lsm303agr_xl_block_data_update_set+0x42>
  {
    ctrl_reg4_a.bdu = (uint8_t)val;
 80051c2:	78fb      	ldrb	r3, [r7, #3]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	7a3b      	ldrb	r3, [r7, #8]
 80051cc:	f362 13c7 	bfi	r3, r2, #7, #1
 80051d0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80051d2:	f107 0208 	add.w	r2, r7, #8
 80051d6:	2301      	movs	r3, #1
 80051d8:	2123      	movs	r1, #35	; 0x23
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff ff10 	bl	8005000 <lsm303agr_write_reg>
 80051e0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80051e2:	68fb      	ldr	r3, [r7, #12]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80051f6:	f107 020c 	add.w	r2, r7, #12
 80051fa:	2306      	movs	r3, #6
 80051fc:	2128      	movs	r1, #40	; 0x28
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff fee6 	bl	8004fd0 <lsm303agr_read_reg>
 8005204:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005206:	7b7b      	ldrb	r3, [r7, #13]
 8005208:	b21a      	sxth	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005214:	b29b      	uxth	r3, r3
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	b29a      	uxth	r2, r3
 800521a:	7b3b      	ldrb	r3, [r7, #12]
 800521c:	b29b      	uxth	r3, r3
 800521e:	4413      	add	r3, r2
 8005220:	b29b      	uxth	r3, r3
 8005222:	b21a      	sxth	r2, r3
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005228:	7bfa      	ldrb	r2, [r7, #15]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	3302      	adds	r3, #2
 800522e:	b212      	sxth	r2, r2
 8005230:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3302      	adds	r3, #2
 8005236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800523a:	b29b      	uxth	r3, r3
 800523c:	021b      	lsls	r3, r3, #8
 800523e:	b29a      	uxth	r2, r3
 8005240:	7bbb      	ldrb	r3, [r7, #14]
 8005242:	b29b      	uxth	r3, r3
 8005244:	4413      	add	r3, r2
 8005246:	b29a      	uxth	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	3302      	adds	r3, #2
 800524c:	b212      	sxth	r2, r2
 800524e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005250:	7c7a      	ldrb	r2, [r7, #17]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	3304      	adds	r3, #4
 8005256:	b212      	sxth	r2, r2
 8005258:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	3304      	adds	r3, #4
 800525e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005262:	b29b      	uxth	r3, r3
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	b29a      	uxth	r2, r3
 8005268:	7c3b      	ldrb	r3, [r7, #16]
 800526a:	b29b      	uxth	r3, r3
 800526c:	4413      	add	r3, r2
 800526e:	b29a      	uxth	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	3304      	adds	r3, #4
 8005274:	b212      	sxth	r2, r2
 8005276:	801a      	strh	r2, [r3, #0]

  return ret;
 8005278:	697b      	ldr	r3, [r7, #20]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	460b      	mov	r3, r1
 800528c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 800528e:	f107 0208 	add.w	r2, r7, #8
 8005292:	2301      	movs	r3, #1
 8005294:	2160      	movs	r1, #96	; 0x60
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff fe9a 	bl	8004fd0 <lsm303agr_read_reg>
 800529c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <lsm303agr_mag_operating_mode_set+0x42>
  {
    cfg_reg_a_m.md = (uint8_t)val;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	7a3b      	ldrb	r3, [r7, #8]
 80052ae:	f362 0301 	bfi	r3, r2, #0, #2
 80052b2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80052b4:	f107 0208 	add.w	r2, r7, #8
 80052b8:	2301      	movs	r3, #1
 80052ba:	2160      	movs	r1, #96	; 0x60
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff fe9f 	bl	8005000 <lsm303agr_write_reg>
 80052c2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 80052c4:	68fb      	ldr	r3, [r7, #12]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 80052da:	f107 0208 	add.w	r2, r7, #8
 80052de:	2301      	movs	r3, #1
 80052e0:	2160      	movs	r1, #96	; 0x60
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff fe74 	bl	8004fd0 <lsm303agr_read_reg>
 80052e8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <lsm303agr_mag_data_rate_set+0x42>
  {
    cfg_reg_a_m.odr = (uint8_t)val;
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	b2da      	uxtb	r2, r3
 80052f8:	7a3b      	ldrb	r3, [r7, #8]
 80052fa:	f362 0383 	bfi	r3, r2, #2, #2
 80052fe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8005300:	f107 0208 	add.w	r2, r7, #8
 8005304:	2301      	movs	r3, #1
 8005306:	2160      	movs	r1, #96	; 0x60
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff fe79 	bl	8005000 <lsm303agr_write_reg>
 800530e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8005310:	68fb      	ldr	r3, [r7, #12]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005326:	f107 0208 	add.w	r2, r7, #8
 800532a:	2301      	movs	r3, #1
 800532c:	2162      	movs	r1, #98	; 0x62
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f7ff fe4e 	bl	8004fd0 <lsm303agr_read_reg>
 8005334:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10f      	bne.n	800535c <lsm303agr_mag_block_data_update_set+0x42>
  {
    cfg_reg_c_m.bdu = (uint8_t)val;
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	7a3b      	ldrb	r3, [r7, #8]
 8005346:	f362 1304 	bfi	r3, r2, #4, #1
 800534a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800534c:	f107 0208 	add.w	r2, r7, #8
 8005350:	2301      	movs	r3, #1
 8005352:	2162      	movs	r1, #98	; 0x62
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff fe53 	bl	8005000 <lsm303agr_write_reg>
 800535a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800535c:	68fb      	ldr	r3, [r7, #12]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8005370:	f107 020c 	add.w	r2, r7, #12
 8005374:	2306      	movs	r3, #6
 8005376:	2168      	movs	r1, #104	; 0x68
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fe29 	bl	8004fd0 <lsm303agr_read_reg>
 800537e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005380:	7b7b      	ldrb	r3, [r7, #13]
 8005382:	b21a      	sxth	r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800538e:	b29b      	uxth	r3, r3
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	b29a      	uxth	r2, r3
 8005394:	7b3b      	ldrb	r3, [r7, #12]
 8005396:	b29b      	uxth	r3, r3
 8005398:	4413      	add	r3, r2
 800539a:	b29b      	uxth	r3, r3
 800539c:	b21a      	sxth	r2, r3
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80053a2:	7bfa      	ldrb	r2, [r7, #15]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	3302      	adds	r3, #2
 80053a8:	b212      	sxth	r2, r2
 80053aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	3302      	adds	r3, #2
 80053b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	021b      	lsls	r3, r3, #8
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	7bbb      	ldrb	r3, [r7, #14]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4413      	add	r3, r2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	3302      	adds	r3, #2
 80053c6:	b212      	sxth	r2, r2
 80053c8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80053ca:	7c7a      	ldrb	r2, [r7, #17]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	3304      	adds	r3, #4
 80053d0:	b212      	sxth	r2, r2
 80053d2:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	3304      	adds	r3, #4
 80053d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	7c3b      	ldrb	r3, [r7, #16]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	3304      	adds	r3, #4
 80053ee:	b212      	sxth	r2, r2
 80053f0:	801a      	strh	r2, [r3, #0]

  return ret;
 80053f2:	697b      	ldr	r3, [r7, #20]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8005408:	f107 0208 	add.w	r2, r7, #8
 800540c:	2301      	movs	r3, #1
 800540e:	2162      	movs	r1, #98	; 0x62
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7ff fddd 	bl	8004fd0 <lsm303agr_read_reg>
 8005416:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <lsm303agr_mag_self_test_set+0x42>
  {
    cfg_reg_c_m.self_test = (uint8_t)val;
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	7a3b      	ldrb	r3, [r7, #8]
 8005428:	f362 0341 	bfi	r3, r2, #1, #1
 800542c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800542e:	f107 0208 	add.w	r2, r7, #8
 8005432:	2301      	movs	r3, #1
 8005434:	2162      	movs	r1, #98	; 0x62
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7ff fde2 	bl	8005000 <lsm303agr_write_reg>
 800543c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 800543e:	68fb      	ldr	r3, [r7, #12]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8005454:	f107 0208 	add.w	r2, r7, #8
 8005458:	2301      	movs	r3, #1
 800545a:	212e      	movs	r1, #46	; 0x2e
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fdb7 	bl	8004fd0 <lsm303agr_read_reg>
 8005462:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10f      	bne.n	800548a <lsm303agr_xl_fifo_mode_set+0x42>
  {
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	b2da      	uxtb	r2, r3
 8005472:	7a3b      	ldrb	r3, [r7, #8]
 8005474:	f362 1387 	bfi	r3, r2, #6, #2
 8005478:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800547a:	f107 0208 	add.w	r2, r7, #8
 800547e:	2301      	movs	r3, #1
 8005480:	212e      	movs	r1, #46	; 0x2e
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7ff fdbc 	bl	8005000 <lsm303agr_write_reg>
 8005488:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 800548a:	68fb      	ldr	r3, [r7, #12]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;

  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80054a0:	f107 0208 	add.w	r2, r7, #8
 80054a4:	2301      	movs	r3, #1
 80054a6:	2162      	movs	r1, #98	; 0x62
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff fd91 	bl	8004fd0 <lsm303agr_read_reg>
 80054ae:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10f      	bne.n	80054d6 <lsm303agr_mag_i2c_interface_set+0x42>
  {
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	7a3b      	ldrb	r3, [r7, #8]
 80054c0:	f362 1345 	bfi	r3, r2, #5, #1
 80054c4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80054c6:	f107 0208 	add.w	r2, r7, #8
 80054ca:	2301      	movs	r3, #1
 80054cc:	2162      	movs	r1, #98	; 0x62
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fd96 	bl	8005000 <lsm303agr_write_reg>
 80054d4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80054d6:	68fb      	ldr	r3, [r7, #12]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80054f4:	f04f 33ff 	mov.w	r3, #4294967295
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e051      	b.n	80055a0 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	689a      	ldr	r2, [r3, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	7b1a      	ldrb	r2, [r3, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	691a      	ldr	r2, [r3, #16]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695a      	ldr	r2, [r3, #20]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699a      	ldr	r2, [r3, #24]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <LSM6DSL_RegisterBusIO+0xcc>)
 8005538:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <LSM6DSL_RegisterBusIO+0xd0>)
 800553e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle   = pObj;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d103      	bne.n	800555e <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e020      	b.n	80055a0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4798      	blx	r3
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	e016      	b.n	80055a0 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b02      	cmp	r3, #2
 8005578:	d112      	bne.n	80055a0 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10d      	bne.n	80055a0 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005584:	230c      	movs	r3, #12
 8005586:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8005588:	7afb      	ldrb	r3, [r7, #11]
 800558a:	461a      	mov	r2, r3
 800558c:	2112      	movs	r1, #18
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f968 	bl	8005864 <LSM6DSL_Write_Reg>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80055a0:	68fb      	ldr	r3, [r7, #12]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	0800589b 	.word	0x0800589b
 80055b0:	080058d1 	.word	0x080058d1

080055b4 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	3320      	adds	r3, #32
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fb1b 	bl	8005bfe <lsm6dsl_auto_increment_set>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80055ce:	f04f 33ff 	mov.w	r3, #4294967295
 80055d2:	e054      	b.n	800567e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3320      	adds	r3, #32
 80055d8:	2101      	movs	r1, #1
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fa9e 	bl	8005b1c <lsm6dsl_block_data_update_set>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80055e6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ea:	e048      	b.n	800567e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	3320      	adds	r3, #32
 80055f0:	2100      	movs	r1, #0
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fb29 	bl	8005c4a <lsm6dsl_fifo_mode_set>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80055fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005602:	e03c      	b.n	800567e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2204      	movs	r2, #4
 8005608:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3320      	adds	r3, #32
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f9cd 	bl	80059b2 <lsm6dsl_xl_data_rate_set>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800561e:	f04f 33ff 	mov.w	r3, #4294967295
 8005622:	e02c      	b.n	800567e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	3320      	adds	r3, #32
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f99b 	bl	8005966 <lsm6dsl_xl_full_scale_set>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295
 800563a:	e020      	b.n	800567e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2204      	movs	r2, #4
 8005640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3320      	adds	r3, #32
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fa40 	bl	8005ad0 <lsm6dsl_gy_data_rate_set>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8005656:	f04f 33ff 	mov.w	r3, #4294967295
 800565a:	e010      	b.n	800567e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3320      	adds	r3, #32
 8005660:	2106      	movs	r1, #6
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f9cb 	bl	80059fe <lsm6dsl_gy_full_scale_set>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800566e:	f04f 33ff 	mov.w	r3, #4294967295
 8005672:	e004      	b.n	800567e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return LSM6DSL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e014      	b.n	80056c6 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f103 0220 	add.w	r2, r3, #32
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f000 f981 	bl	80059b2 <lsm6dsl_xl_data_rate_set>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80056b6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ba:	e004      	b.n	80056c6 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return LSM6DSL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <LSM6DSL_GYRO_Enable>:
  * @brief  Enable the LSM6DSL gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	e014      	b.n	800570e <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f103 0220 	add.w	r2, r3, #32
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056f0:	4619      	mov	r1, r3
 80056f2:	4610      	mov	r0, r2
 80056f4:	f000 f9ec 	bl	8005ad0 <lsm6dsl_gy_data_rate_set>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	e004      	b.n	800570e <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  return LSM6DSL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <LSM6DSL_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3320      	adds	r3, #32
 800572a:	f107 020b 	add.w	r2, r7, #11
 800572e:	4611      	mov	r1, r2
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f98b 	bl	8005a4c <lsm6dsl_gy_full_scale_get>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d002      	beq.n	8005742 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800573c:	f04f 33ff 	mov.w	r3, #4294967295
 8005740:	e02d      	b.n	800579e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8005742:	7afb      	ldrb	r3, [r7, #11]
 8005744:	2b06      	cmp	r3, #6
 8005746:	d825      	bhi.n	8005794 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8005748:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800574a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574e:	bf00      	nop
 8005750:	08005775 	.word	0x08005775
 8005754:	0800576d 	.word	0x0800576d
 8005758:	0800577d 	.word	0x0800577d
 800575c:	08005795 	.word	0x08005795
 8005760:	08005785 	.word	0x08005785
 8005764:	08005795 	.word	0x08005795
 8005768:	0800578d 	.word	0x0800578d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	4a0e      	ldr	r2, [pc, #56]	; (80057a8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8005770:	601a      	str	r2, [r3, #0]
      break;
 8005772:	e013      	b.n	800579c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8005778:	601a      	str	r2, [r3, #0]
      break;
 800577a:	e00f      	b.n	800579c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8005780:	601a      	str	r2, [r3, #0]
      break;
 8005782:	e00b      	b.n	800579c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	4a0b      	ldr	r2, [pc, #44]	; (80057b4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8005788:	601a      	str	r2, [r3, #0]
      break;
 800578a:	e007      	b.n	800579c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	4a0a      	ldr	r2, [pc, #40]	; (80057b8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8005790:	601a      	str	r2, [r3, #0]
      break;
 8005792:	e003      	b.n	800579c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8005794:	f04f 33ff 	mov.w	r3, #4294967295
 8005798:	60fb      	str	r3, [r7, #12]
      break;
 800579a:	bf00      	nop
  }

  return ret;
 800579c:	68fb      	ldr	r3, [r7, #12]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	408c0000 	.word	0x408c0000
 80057ac:	410c0000 	.word	0x410c0000
 80057b0:	418c0000 	.word	0x418c0000
 80057b4:	420c0000 	.word	0x420c0000
 80057b8:	428c0000 	.word	0x428c0000

080057bc <LSM6DSL_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b086      	sub	sp, #24
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	3320      	adds	r3, #32
 80057ca:	f107 0210 	add.w	r2, r7, #16
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 f9c9 	bl	8005b68 <lsm6dsl_angular_rate_raw_get>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	e03c      	b.n	800585c <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80057e2:	f107 030c 	add.w	r3, r7, #12
 80057e6:	4619      	mov	r1, r3
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff95 	bl	8005718 <LSM6DSL_GYRO_GetSensitivity>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80057f4:	f04f 33ff 	mov.w	r3, #4294967295
 80057f8:	e030      	b.n	800585c <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80057fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005806:	edd7 7a03 	vldr	s15, [r7, #12]
 800580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005812:	ee17 2a90 	vmov	r2, s15
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800581a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800581e:	ee07 3a90 	vmov	s15, r3
 8005822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005826:	edd7 7a03 	vldr	s15, [r7, #12]
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005832:	ee17 2a90 	vmov	r2, s15
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800583a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800583e:	ee07 3a90 	vmov	s15, r3
 8005842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005846:	edd7 7a03 	vldr	s15, [r7, #12]
 800584a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005852:	ee17 2a90 	vmov	r2, s15
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	460b      	mov	r3, r1
 800586e:	70fb      	strb	r3, [r7, #3]
 8005870:	4613      	mov	r3, r2
 8005872:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f103 0020 	add.w	r0, r3, #32
 800587a:	1cba      	adds	r2, r7, #2
 800587c:	78f9      	ldrb	r1, [r7, #3]
 800587e:	2301      	movs	r3, #1
 8005880:	f000 f859 	bl	8005936 <lsm6dsl_write_reg>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 800588a:	f04f 33ff 	mov.w	r3, #4294967295
 800588e:	e000      	b.n	8005892 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800589a:	b590      	push	{r4, r7, lr}
 800589c:	b087      	sub	sp, #28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	607a      	str	r2, [r7, #4]
 80058a4:	461a      	mov	r2, r3
 80058a6:	460b      	mov	r3, r1
 80058a8:	72fb      	strb	r3, [r7, #11]
 80058aa:	4613      	mov	r3, r2
 80058ac:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	695c      	ldr	r4, [r3, #20]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	7b1b      	ldrb	r3, [r3, #12]
 80058ba:	b298      	uxth	r0, r3
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	b299      	uxth	r1, r3
 80058c0:	893b      	ldrh	r3, [r7, #8]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	47a0      	blx	r4
 80058c6:	4603      	mov	r3, r0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}

080058d0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80058d0:	b590      	push	{r4, r7, lr}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	461a      	mov	r2, r3
 80058dc:	460b      	mov	r3, r1
 80058de:	72fb      	strb	r3, [r7, #11]
 80058e0:	4613      	mov	r3, r2
 80058e2:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	691c      	ldr	r4, [r3, #16]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	7b1b      	ldrb	r3, [r3, #12]
 80058f0:	b298      	uxth	r0, r3
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	b299      	uxth	r1, r3
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	47a0      	blx	r4
 80058fc:	4603      	mov	r3, r0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	371c      	adds	r7, #28
 8005902:	46bd      	mov	sp, r7
 8005904:	bd90      	pop	{r4, r7, pc}

08005906 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005906:	b590      	push	{r4, r7, lr}
 8005908:	b087      	sub	sp, #28
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	461a      	mov	r2, r3
 8005912:	460b      	mov	r3, r1
 8005914:	72fb      	strb	r3, [r7, #11]
 8005916:	4613      	mov	r3, r2
 8005918:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685c      	ldr	r4, [r3, #4]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	68d8      	ldr	r0, [r3, #12]
 8005922:	893b      	ldrh	r3, [r7, #8]
 8005924:	7af9      	ldrb	r1, [r7, #11]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	47a0      	blx	r4
 800592a:	6178      	str	r0, [r7, #20]

  return ret;
 800592c:	697b      	ldr	r3, [r7, #20]
}
 800592e:	4618      	mov	r0, r3
 8005930:	371c      	adds	r7, #28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd90      	pop	{r4, r7, pc}

08005936 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005936:	b590      	push	{r4, r7, lr}
 8005938:	b087      	sub	sp, #28
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	461a      	mov	r2, r3
 8005942:	460b      	mov	r3, r1
 8005944:	72fb      	strb	r3, [r7, #11]
 8005946:	4613      	mov	r3, r2
 8005948:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681c      	ldr	r4, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	68d8      	ldr	r0, [r3, #12]
 8005952:	893b      	ldrh	r3, [r7, #8]
 8005954:	7af9      	ldrb	r1, [r7, #11]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	47a0      	blx	r4
 800595a:	6178      	str	r0, [r7, #20]

  return ret;
 800595c:	697b      	ldr	r3, [r7, #20]
}
 800595e:	4618      	mov	r0, r3
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}

08005966 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005972:	f107 0208 	add.w	r2, r7, #8
 8005976:	2301      	movs	r3, #1
 8005978:	2110      	movs	r1, #16
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ffc3 	bl	8005906 <lsm6dsl_read_reg>
 8005980:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10f      	bne.n	80059a8 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8005988:	78fb      	ldrb	r3, [r7, #3]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	b2da      	uxtb	r2, r3
 8005990:	7a3b      	ldrb	r3, [r7, #8]
 8005992:	f362 0383 	bfi	r3, r2, #2, #2
 8005996:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8005998:	f107 0208 	add.w	r2, r7, #8
 800599c:	2301      	movs	r3, #1
 800599e:	2110      	movs	r1, #16
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffc8 	bl	8005936 <lsm6dsl_write_reg>
 80059a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059a8:	68fb      	ldr	r3, [r7, #12]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	460b      	mov	r3, r1
 80059bc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80059be:	f107 0208 	add.w	r2, r7, #8
 80059c2:	2301      	movs	r3, #1
 80059c4:	2110      	movs	r1, #16
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff ff9d 	bl	8005906 <lsm6dsl_read_reg>
 80059cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10f      	bne.n	80059f4 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	f003 030f 	and.w	r3, r3, #15
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	7a3b      	ldrb	r3, [r7, #8]
 80059de:	f362 1307 	bfi	r3, r2, #4, #4
 80059e2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80059e4:	f107 0208 	add.w	r2, r7, #8
 80059e8:	2301      	movs	r3, #1
 80059ea:	2110      	movs	r1, #16
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7ff ffa2 	bl	8005936 <lsm6dsl_write_reg>
 80059f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059f4:	68fb      	ldr	r3, [r7, #12]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	460b      	mov	r3, r1
 8005a08:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a0a:	f107 0208 	add.w	r2, r7, #8
 8005a0e:	2301      	movs	r3, #1
 8005a10:	2111      	movs	r1, #17
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff ff77 	bl	8005906 <lsm6dsl_read_reg>
 8005a18:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10f      	bne.n	8005a40 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	7a3b      	ldrb	r3, [r7, #8]
 8005a2a:	f362 0343 	bfi	r3, r2, #1, #3
 8005a2e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a30:	f107 0208 	add.w	r2, r7, #8
 8005a34:	2301      	movs	r3, #1
 8005a36:	2111      	movs	r1, #17
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ff7c 	bl	8005936 <lsm6dsl_write_reg>
 8005a3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005a56:	f107 0208 	add.w	r2, r7, #8
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	2111      	movs	r1, #17
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff ff51 	bl	8005906 <lsm6dsl_read_reg>
 8005a64:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g)
 8005a66:	7a3b      	ldrb	r3, [r7, #8]
 8005a68:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d824      	bhi.n	8005abc <lsm6dsl_gy_full_scale_get+0x70>
 8005a72:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a95 	.word	0x08005a95
 8005a7c:	08005a9d 	.word	0x08005a9d
 8005a80:	08005aa5 	.word	0x08005aa5
 8005a84:	08005abd 	.word	0x08005abd
 8005a88:	08005aad 	.word	0x08005aad
 8005a8c:	08005abd 	.word	0x08005abd
 8005a90:	08005ab5 	.word	0x08005ab5
  {
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
      break;
 8005a9a:	e013      	b.n	8005ac4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	701a      	strb	r2, [r3, #0]
      break;
 8005aa2:	e00f      	b.n	8005ac4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	701a      	strb	r2, [r3, #0]
      break;
 8005aaa:	e00b      	b.n	8005ac4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2204      	movs	r2, #4
 8005ab0:	701a      	strb	r2, [r3, #0]
      break;
 8005ab2:	e007      	b.n	8005ac4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2206      	movs	r2, #6
 8005ab8:	701a      	strb	r2, [r3, #0]
      break;
 8005aba:	e003      	b.n	8005ac4 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2207      	movs	r2, #7
 8005ac0:	701a      	strb	r2, [r3, #0]
      break;
 8005ac2:	bf00      	nop
  }

  return ret;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop

08005ad0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005adc:	f107 0208 	add.w	r2, r7, #8
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	2111      	movs	r1, #17
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff ff0e 	bl	8005906 <lsm6dsl_read_reg>
 8005aea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10f      	bne.n	8005b12 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	f003 030f 	and.w	r3, r3, #15
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	7a3b      	ldrb	r3, [r7, #8]
 8005afc:	f362 1307 	bfi	r3, r2, #4, #4
 8005b00:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005b02:	f107 0208 	add.w	r2, r7, #8
 8005b06:	2301      	movs	r3, #1
 8005b08:	2111      	movs	r1, #17
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff ff13 	bl	8005936 <lsm6dsl_write_reg>
 8005b10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b28:	f107 0208 	add.w	r2, r7, #8
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	2112      	movs	r1, #18
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff fee8 	bl	8005906 <lsm6dsl_read_reg>
 8005b36:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10f      	bne.n	8005b5e <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8005b3e:	78fb      	ldrb	r3, [r7, #3]
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	7a3b      	ldrb	r3, [r7, #8]
 8005b48:	f362 1386 	bfi	r3, r2, #6, #1
 8005b4c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005b4e:	f107 0208 	add.w	r2, r7, #8
 8005b52:	2301      	movs	r3, #1
 8005b54:	2112      	movs	r1, #18
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7ff feed 	bl	8005936 <lsm6dsl_write_reg>
 8005b5c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005b72:	f107 020c 	add.w	r2, r7, #12
 8005b76:	2306      	movs	r3, #6
 8005b78:	2122      	movs	r1, #34	; 0x22
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff fec3 	bl	8005906 <lsm6dsl_read_reg>
 8005b80:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005b82:	7b7b      	ldrb	r3, [r7, #13]
 8005b84:	b21a      	sxth	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	021b      	lsls	r3, r3, #8
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	7b3b      	ldrb	r3, [r7, #12]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	b21a      	sxth	r2, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005ba4:	7bfa      	ldrb	r2, [r7, #15]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	3302      	adds	r3, #2
 8005baa:	b212      	sxth	r2, r2
 8005bac:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	7bbb      	ldrb	r3, [r7, #14]
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	4413      	add	r3, r2
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	b212      	sxth	r2, r2
 8005bca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005bcc:	7c7a      	ldrb	r2, [r7, #17]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	b212      	sxth	r2, r2
 8005bd4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	021b      	lsls	r3, r3, #8
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	7c3b      	ldrb	r3, [r7, #16]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	4413      	add	r3, r2
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	3304      	adds	r3, #4
 8005bf0:	b212      	sxth	r2, r2
 8005bf2:	801a      	strh	r2, [r3, #0]

  return ret;
 8005bf4:	697b      	ldr	r3, [r7, #20]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	460b      	mov	r3, r1
 8005c08:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005c0a:	f107 0208 	add.w	r2, r7, #8
 8005c0e:	2301      	movs	r3, #1
 8005c10:	2112      	movs	r1, #18
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7ff fe77 	bl	8005906 <lsm6dsl_read_reg>
 8005c18:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10f      	bne.n	8005c40 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	7a3b      	ldrb	r3, [r7, #8]
 8005c2a:	f362 0382 	bfi	r3, r2, #2, #1
 8005c2e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005c30:	f107 0208 	add.w	r2, r7, #8
 8005c34:	2301      	movs	r3, #1
 8005c36:	2112      	movs	r1, #18
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fe7c 	bl	8005936 <lsm6dsl_write_reg>
 8005c3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005c56:	f107 0208 	add.w	r2, r7, #8
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	210a      	movs	r1, #10
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff fe51 	bl	8005906 <lsm6dsl_read_reg>
 8005c64:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10f      	bne.n	8005c8c <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	f003 0307 	and.w	r3, r3, #7
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	7a3b      	ldrb	r3, [r7, #8]
 8005c76:	f362 0302 	bfi	r3, r2, #0, #3
 8005c7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005c7c:	f107 0208 	add.w	r2, r7, #8
 8005c80:	2301      	movs	r3, #1
 8005c82:	210a      	movs	r1, #10
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f7ff fe56 	bl	8005936 <lsm6dsl_write_reg>
 8005c8a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <HAL_Init+0x3c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a0b      	ldr	r2, [pc, #44]	; (8005cd4 <HAL_Init+0x3c>)
 8005ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cae:	2003      	movs	r0, #3
 8005cb0:	f001 faca 	bl	8007248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cb4:	200f      	movs	r0, #15
 8005cb6:	f000 f80f 	bl	8005cd8 <HAL_InitTick>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d002      	beq.n	8005cc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	71fb      	strb	r3, [r7, #7]
 8005cc4:	e001      	b.n	8005cca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005cc6:	f7fc fcdb 	bl	8002680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005cca:	79fb      	ldrb	r3, [r7, #7]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40022000 	.word	0x40022000

08005cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005ce4:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <HAL_InitTick+0x6c>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d023      	beq.n	8005d34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005cec:	4b16      	ldr	r3, [pc, #88]	; (8005d48 <HAL_InitTick+0x70>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <HAL_InitTick+0x6c>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 fad5 	bl	80072b2 <HAL_SYSTICK_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10f      	bne.n	8005d2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b0f      	cmp	r3, #15
 8005d12:	d809      	bhi.n	8005d28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d14:	2200      	movs	r2, #0
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1c:	f001 fa9f 	bl	800725e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d20:	4a0a      	ldr	r2, [pc, #40]	; (8005d4c <HAL_InitTick+0x74>)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e007      	b.n	8005d38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
 8005d2c:	e004      	b.n	8005d38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
 8005d32:	e001      	b.n	8005d38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000008 	.word	0x20000008
 8005d48:	20000000 	.word	0x20000000
 8005d4c:	20000004 	.word	0x20000004

08005d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d50:	b480      	push	{r7}
 8005d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d54:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_IncTick+0x20>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	461a      	mov	r2, r3
 8005d5a:	4b06      	ldr	r3, [pc, #24]	; (8005d74 <HAL_IncTick+0x24>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4413      	add	r3, r2
 8005d60:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <HAL_IncTick+0x24>)
 8005d62:	6013      	str	r3, [r2, #0]
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000008 	.word	0x20000008
 8005d74:	20000f90 	.word	0x20000f90

08005d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <HAL_GetTick+0x14>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000f90 	.word	0x20000f90

08005d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d98:	f7ff ffee 	bl	8005d78 <HAL_GetTick>
 8005d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da8:	d005      	beq.n	8005db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005daa:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <HAL_Delay+0x44>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005db6:	bf00      	nop
 8005db8:	f7ff ffde 	bl	8005d78 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d8f7      	bhi.n	8005db8 <HAL_Delay+0x28>
  {
  }
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000008 	.word	0x20000008

08005dd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	431a      	orrs	r2, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	609a      	str	r2, [r3, #8]
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	609a      	str	r2, [r3, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3360      	adds	r3, #96	; 0x60
 8005e52:	461a      	mov	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <LL_ADC_SetOffset+0x44>)
 8005e62:	4013      	ands	r3, r2
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	03fff000 	.word	0x03fff000

08005e88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3360      	adds	r3, #96	; 0x60
 8005e96:	461a      	mov	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3360      	adds	r3, #96	; 0x60
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	3330      	adds	r3, #48	; 0x30
 8005efa:	461a      	mov	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	4413      	add	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	211f      	movs	r1, #31
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	401a      	ands	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0e9b      	lsrs	r3, r3, #26
 8005f22:	f003 011f 	and.w	r1, r3, #31
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f30:	431a      	orrs	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3314      	adds	r3, #20
 8005f52:	461a      	mov	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	0e5b      	lsrs	r3, r3, #25
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	f003 0304 	and.w	r3, r3, #4
 8005f5e:	4413      	add	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	0d1b      	lsrs	r3, r3, #20
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2107      	movs	r1, #7
 8005f70:	fa01 f303 	lsl.w	r3, r1, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	401a      	ands	r2, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	0d1b      	lsrs	r3, r3, #20
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	431a      	orrs	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005f8c:	bf00      	nop
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0318 	and.w	r3, r3, #24
 8005fba:	4908      	ldr	r1, [pc, #32]	; (8005fdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8005fbc:	40d9      	lsrs	r1, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	400b      	ands	r3, r1
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	431a      	orrs	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	0007ffff 	.word	0x0007ffff

08005fe0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005ff0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6093      	str	r3, [r2, #8]
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006018:	d101      	bne.n	800601e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800603c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006040:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006068:	d101      	bne.n	800606e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800606a:	2301      	movs	r3, #1
 800606c:	e000      	b.n	8006070 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <LL_ADC_IsEnabled+0x18>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <LL_ADC_IsEnabled+0x1a>
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80060a2:	b480      	push	{r7}
 80060a4:	b083      	sub	sp, #12
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d101      	bne.n	80060ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d101      	bne.n	80060e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b089      	sub	sp, #36	; 0x24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e136      	b.n	8006378 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7fc fad9 	bl	80026d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff ff67 	bl	8006004 <LL_ADC_IsDeepPowerDownEnabled>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff ff4d 	bl	8005fe0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff ff82 	bl	8006054 <LL_ADC_IsInternalRegulatorEnabled>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d115      	bne.n	8006182 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff ff66 	bl	800602c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006160:	4b87      	ldr	r3, [pc, #540]	; (8006380 <HAL_ADC_Init+0x290>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	099b      	lsrs	r3, r3, #6
 8006166:	4a87      	ldr	r2, [pc, #540]	; (8006384 <HAL_ADC_Init+0x294>)
 8006168:	fba2 2303 	umull	r2, r3, r2, r3
 800616c:	099b      	lsrs	r3, r3, #6
 800616e:	3301      	adds	r3, #1
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006174:	e002      	b.n	800617c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	3b01      	subs	r3, #1
 800617a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f9      	bne.n	8006176 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff ff64 	bl	8006054 <LL_ADC_IsInternalRegulatorEnabled>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10d      	bne.n	80061ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006196:	f043 0210 	orr.w	r2, r3, #16
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a2:	f043 0201 	orr.w	r2, r3, #1
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff ff75 	bl	80060a2 <LL_ADC_REG_IsConversionOngoing>
 80061b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 80cf 	bne.w	8006366 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f040 80cb 	bne.w	8006366 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80061d8:	f043 0202 	orr.w	r2, r3, #2
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7ff ff49 	bl	800607c <LL_ADC_IsEnabled>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d115      	bne.n	800621c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061f0:	4865      	ldr	r0, [pc, #404]	; (8006388 <HAL_ADC_Init+0x298>)
 80061f2:	f7ff ff43 	bl	800607c <LL_ADC_IsEnabled>
 80061f6:	4604      	mov	r4, r0
 80061f8:	4864      	ldr	r0, [pc, #400]	; (800638c <HAL_ADC_Init+0x29c>)
 80061fa:	f7ff ff3f 	bl	800607c <LL_ADC_IsEnabled>
 80061fe:	4603      	mov	r3, r0
 8006200:	431c      	orrs	r4, r3
 8006202:	4863      	ldr	r0, [pc, #396]	; (8006390 <HAL_ADC_Init+0x2a0>)
 8006204:	f7ff ff3a 	bl	800607c <LL_ADC_IsEnabled>
 8006208:	4603      	mov	r3, r0
 800620a:	4323      	orrs	r3, r4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d105      	bne.n	800621c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4619      	mov	r1, r3
 8006216:	485f      	ldr	r0, [pc, #380]	; (8006394 <HAL_ADC_Init+0x2a4>)
 8006218:	f7ff fdde 	bl	8005dd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	7e5b      	ldrb	r3, [r3, #25]
 8006220:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006226:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800622c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006232:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800623a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800623c:	4313      	orrs	r3, r2
 800623e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d106      	bne.n	8006258 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	3b01      	subs	r3, #1
 8006250:	045b      	lsls	r3, r3, #17
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	4313      	orrs	r3, r2
 8006256:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <HAL_ADC_Init+0x2a8>)
 800627c:	4013      	ands	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	69b9      	ldr	r1, [r7, #24]
 8006284:	430b      	orrs	r3, r1
 8006286:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff ff08 	bl	80060a2 <LL_ADC_REG_IsConversionOngoing>
 8006292:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff ff15 	bl	80060c8 <LL_ADC_INJ_IsConversionOngoing>
 800629e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d13d      	bne.n	8006322 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d13a      	bne.n	8006322 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80062b0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062b8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80062ba:	4313      	orrs	r3, r2
 80062bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c8:	f023 0302 	bic.w	r3, r3, #2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	69b9      	ldr	r1, [r7, #24]
 80062d2:	430b      	orrs	r3, r1
 80062d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d118      	bne.n	8006312 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80062ea:	f023 0304 	bic.w	r3, r3, #4
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062f6:	4311      	orrs	r1, r2
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80062fc:	4311      	orrs	r1, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006302:	430a      	orrs	r2, r1
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	611a      	str	r2, [r3, #16]
 8006310:	e007      	b.n	8006322 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d10c      	bne.n	8006344 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	f023 010f 	bic.w	r1, r3, #15
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	1e5a      	subs	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	631a      	str	r2, [r3, #48]	; 0x30
 8006342:	e007      	b.n	8006354 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 020f 	bic.w	r2, r2, #15
 8006352:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006358:	f023 0303 	bic.w	r3, r3, #3
 800635c:	f043 0201 	orr.w	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	655a      	str	r2, [r3, #84]	; 0x54
 8006364:	e007      	b.n	8006376 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f043 0210 	orr.w	r2, r3, #16
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006376:	7ffb      	ldrb	r3, [r7, #31]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3724      	adds	r7, #36	; 0x24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd90      	pop	{r4, r7, pc}
 8006380:	20000000 	.word	0x20000000
 8006384:	053e2d63 	.word	0x053e2d63
 8006388:	50040000 	.word	0x50040000
 800638c:	50040100 	.word	0x50040100
 8006390:	50040200 	.word	0x50040200
 8006394:	50040300 	.word	0x50040300
 8006398:	fff0c007 	.word	0xfff0c007

0800639c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b0b6      	sub	sp, #216	; 0xd8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_ADC_ConfigChannel+0x22>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e3c7      	b.n	8006b4e <HAL_ADC_ConfigChannel+0x7b2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fe69 	bl	80060a2 <LL_ADC_REG_IsConversionOngoing>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f040 83a8 	bne.w	8006b28 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b05      	cmp	r3, #5
 80063de:	d824      	bhi.n	800642a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	3b02      	subs	r3, #2
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d81b      	bhi.n	8006422 <HAL_ADC_ConfigChannel+0x86>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <HAL_ADC_ConfigChannel+0x54>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006401 	.word	0x08006401
 80063f4:	08006409 	.word	0x08006409
 80063f8:	08006411 	.word	0x08006411
 80063fc:	08006419 	.word	0x08006419
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	220c      	movs	r2, #12
 8006404:	605a      	str	r2, [r3, #4]
          break;
 8006406:	e011      	b.n	800642c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2212      	movs	r2, #18
 800640c:	605a      	str	r2, [r3, #4]
          break;
 800640e:	e00d      	b.n	800642c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2218      	movs	r2, #24
 8006414:	605a      	str	r2, [r3, #4]
          break;
 8006416:	e009      	b.n	800642c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800641e:	605a      	str	r2, [r3, #4]
          break;
 8006420:	e004      	b.n	800642c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2206      	movs	r2, #6
 8006426:	605a      	str	r2, [r3, #4]
          break;
 8006428:	e000      	b.n	800642c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800642a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f7ff fd56 	bl	8005eea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fe2d 	bl	80060a2 <LL_ADC_REG_IsConversionOngoing>
 8006448:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fe39 	bl	80060c8 <LL_ADC_INJ_IsConversionOngoing>
 8006456:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800645a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 81a6 	bne.w	80067b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006464:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006468:	2b00      	cmp	r3, #0
 800646a:	f040 81a1 	bne.w	80067b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6819      	ldr	r1, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	461a      	mov	r2, r3
 800647c:	f7ff fd61 	bl	8005f42 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	08db      	lsrs	r3, r3, #3
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d00a      	beq.n	80064b8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6919      	ldr	r1, [r3, #16]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064b2:	f7ff fcc5 	bl	8005e40 <LL_ADC_SetOffset>
 80064b6:	e17b      	b.n	80067b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fce2 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <HAL_ADC_ConfigChannel+0x148>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fcd7 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 80064da:	4603      	mov	r3, r0
 80064dc:	0e9b      	lsrs	r3, r3, #26
 80064de:	f003 021f 	and.w	r2, r3, #31
 80064e2:	e01e      	b.n	8006522 <HAL_ADC_ConfigChannel+0x186>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2100      	movs	r1, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fccc 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064fa:	fa93 f3a3 	rbit	r3, r3
 80064fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800650a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8006512:	2320      	movs	r3, #32
 8006514:	e004      	b.n	8006520 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8006516:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800651a:	fab3 f383 	clz	r3, r3
 800651e:	b2db      	uxtb	r3, r3
 8006520:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800652a:	2b00      	cmp	r3, #0
 800652c:	d105      	bne.n	800653a <HAL_ADC_ConfigChannel+0x19e>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	0e9b      	lsrs	r3, r3, #26
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	e018      	b.n	800656c <HAL_ADC_ConfigChannel+0x1d0>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006542:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006546:	fa93 f3a3 	rbit	r3, r3
 800654a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800654e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800655e:	2320      	movs	r3, #32
 8006560:	e004      	b.n	800656c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006562:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006566:	fab3 f383 	clz	r3, r3
 800656a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800656c:	429a      	cmp	r2, r3
 800656e:	d106      	bne.n	800657e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2200      	movs	r2, #0
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff fc9b 	bl	8005eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2101      	movs	r1, #1
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fc7f 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 800658a:	4603      	mov	r3, r0
 800658c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <HAL_ADC_ConfigChannel+0x20e>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2101      	movs	r1, #1
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fc74 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 80065a0:	4603      	mov	r3, r0
 80065a2:	0e9b      	lsrs	r3, r3, #26
 80065a4:	f003 021f 	and.w	r2, r3, #31
 80065a8:	e01e      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x24c>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2101      	movs	r1, #1
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fc69 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065c0:	fa93 f3a3 	rbit	r3, r3
 80065c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80065c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80065d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80065d8:	2320      	movs	r3, #32
 80065da:	e004      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80065dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065e0:	fab3 f383 	clz	r3, r3
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d105      	bne.n	8006600 <HAL_ADC_ConfigChannel+0x264>
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	0e9b      	lsrs	r3, r3, #26
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	e018      	b.n	8006632 <HAL_ADC_ConfigChannel+0x296>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800660c:	fa93 f3a3 	rbit	r3, r3
 8006610:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006614:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800661c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d101      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006624:	2320      	movs	r3, #32
 8006626:	e004      	b.n	8006632 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006628:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800662c:	fab3 f383 	clz	r3, r3
 8006630:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006632:	429a      	cmp	r2, r3
 8006634:	d106      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	2200      	movs	r2, #0
 800663c:	2101      	movs	r1, #1
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fc38 	bl	8005eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2102      	movs	r1, #2
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fc1c 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 8006650:	4603      	mov	r3, r0
 8006652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <HAL_ADC_ConfigChannel+0x2d4>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2102      	movs	r1, #2
 8006660:	4618      	mov	r0, r3
 8006662:	f7ff fc11 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 8006666:	4603      	mov	r3, r0
 8006668:	0e9b      	lsrs	r3, r3, #26
 800666a:	f003 021f 	and.w	r2, r3, #31
 800666e:	e01e      	b.n	80066ae <HAL_ADC_ConfigChannel+0x312>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2102      	movs	r1, #2
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fc06 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 800667c:	4603      	mov	r3, r0
 800667e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006686:	fa93 f3a3 	rbit	r3, r3
 800668a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800668e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800669e:	2320      	movs	r3, #32
 80066a0:	e004      	b.n	80066ac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80066a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066a6:	fab3 f383 	clz	r3, r3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <HAL_ADC_ConfigChannel+0x32a>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	0e9b      	lsrs	r3, r3, #26
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	e016      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x358>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80066d2:	fa93 f3a3 	rbit	r3, r3
 80066d6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80066d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80066de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80066e6:	2320      	movs	r3, #32
 80066e8:	e004      	b.n	80066f4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80066ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066ee:	fab3 f383 	clz	r3, r3
 80066f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d106      	bne.n	8006706 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	2102      	movs	r1, #2
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fbd7 	bl	8005eb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2103      	movs	r1, #3
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff fbbb 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 8006712:	4603      	mov	r3, r0
 8006714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <HAL_ADC_ConfigChannel+0x396>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2103      	movs	r1, #3
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fbb0 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 8006728:	4603      	mov	r3, r0
 800672a:	0e9b      	lsrs	r3, r3, #26
 800672c:	f003 021f 	and.w	r2, r3, #31
 8006730:	e017      	b.n	8006762 <HAL_ADC_ConfigChannel+0x3c6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2103      	movs	r1, #3
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff fba5 	bl	8005e88 <LL_ADC_GetOffsetChannel>
 800673e:	4603      	mov	r3, r0
 8006740:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006744:	fa93 f3a3 	rbit	r3, r3
 8006748:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800674a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800674c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800674e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006754:	2320      	movs	r3, #32
 8006756:	e003      	b.n	8006760 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800675a:	fab3 f383 	clz	r3, r3
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676a:	2b00      	cmp	r3, #0
 800676c:	d105      	bne.n	800677a <HAL_ADC_ConfigChannel+0x3de>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	0e9b      	lsrs	r3, r3, #26
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	e011      	b.n	800679e <HAL_ADC_ConfigChannel+0x402>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006782:	fa93 f3a3 	rbit	r3, r3
 8006786:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800678a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800678c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006792:	2320      	movs	r3, #32
 8006794:	e003      	b.n	800679e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006798:	fab3 f383 	clz	r3, r3
 800679c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800679e:	429a      	cmp	r2, r3
 80067a0:	d106      	bne.n	80067b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	2103      	movs	r1, #3
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fb82 	bl	8005eb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff fc61 	bl	800607c <LL_ADC_IsEnabled>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f040 813f 	bne.w	8006a40 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6818      	ldr	r0, [r3, #0]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6819      	ldr	r1, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	461a      	mov	r2, r3
 80067d0:	f7ff fbe2 	bl	8005f98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	4a8e      	ldr	r2, [pc, #568]	; (8006a14 <HAL_ADC_ConfigChannel+0x678>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	f040 8130 	bne.w	8006a40 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10b      	bne.n	8006808 <HAL_ADC_ConfigChannel+0x46c>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	0e9b      	lsrs	r3, r3, #26
 80067f6:	3301      	adds	r3, #1
 80067f8:	f003 031f 	and.w	r3, r3, #31
 80067fc:	2b09      	cmp	r3, #9
 80067fe:	bf94      	ite	ls
 8006800:	2301      	movls	r3, #1
 8006802:	2300      	movhi	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e019      	b.n	800683c <HAL_ADC_ConfigChannel+0x4a0>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800680e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006810:	fa93 f3a3 	rbit	r3, r3
 8006814:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800681a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006820:	2320      	movs	r3, #32
 8006822:	e003      	b.n	800682c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006826:	fab3 f383 	clz	r3, r3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	3301      	adds	r3, #1
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2b09      	cmp	r3, #9
 8006834:	bf94      	ite	ls
 8006836:	2301      	movls	r3, #1
 8006838:	2300      	movhi	r3, #0
 800683a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800683c:	2b00      	cmp	r3, #0
 800683e:	d079      	beq.n	8006934 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006848:	2b00      	cmp	r3, #0
 800684a:	d107      	bne.n	800685c <HAL_ADC_ConfigChannel+0x4c0>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	0e9b      	lsrs	r3, r3, #26
 8006852:	3301      	adds	r3, #1
 8006854:	069b      	lsls	r3, r3, #26
 8006856:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800685a:	e015      	b.n	8006888 <HAL_ADC_ConfigChannel+0x4ec>
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006864:	fa93 f3a3 	rbit	r3, r3
 8006868:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800686a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800686e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006874:	2320      	movs	r3, #32
 8006876:	e003      	b.n	8006880 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687a:	fab3 f383 	clz	r3, r3
 800687e:	b2db      	uxtb	r3, r3
 8006880:	3301      	adds	r3, #1
 8006882:	069b      	lsls	r3, r3, #26
 8006884:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006890:	2b00      	cmp	r3, #0
 8006892:	d109      	bne.n	80068a8 <HAL_ADC_ConfigChannel+0x50c>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	0e9b      	lsrs	r3, r3, #26
 800689a:	3301      	adds	r3, #1
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2101      	movs	r1, #1
 80068a2:	fa01 f303 	lsl.w	r3, r1, r3
 80068a6:	e017      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x53c>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b0:	fa93 f3a3 	rbit	r3, r3
 80068b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80068b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80068ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d101      	bne.n	80068c4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80068c0:	2320      	movs	r3, #32
 80068c2:	e003      	b.n	80068cc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80068c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068c6:	fab3 f383 	clz	r3, r3
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	3301      	adds	r3, #1
 80068ce:	f003 031f 	and.w	r3, r3, #31
 80068d2:	2101      	movs	r1, #1
 80068d4:	fa01 f303 	lsl.w	r3, r1, r3
 80068d8:	ea42 0103 	orr.w	r1, r2, r3
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_ADC_ConfigChannel+0x562>
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	0e9b      	lsrs	r3, r3, #26
 80068ee:	3301      	adds	r3, #1
 80068f0:	f003 021f 	and.w	r2, r3, #31
 80068f4:	4613      	mov	r3, r2
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	4413      	add	r3, r2
 80068fa:	051b      	lsls	r3, r3, #20
 80068fc:	e018      	b.n	8006930 <HAL_ADC_ConfigChannel+0x594>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006906:	fa93 f3a3 	rbit	r3, r3
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800690c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006916:	2320      	movs	r3, #32
 8006918:	e003      	b.n	8006922 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800691a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800691c:	fab3 f383 	clz	r3, r3
 8006920:	b2db      	uxtb	r3, r3
 8006922:	3301      	adds	r3, #1
 8006924:	f003 021f 	and.w	r2, r3, #31
 8006928:	4613      	mov	r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4413      	add	r3, r2
 800692e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006930:	430b      	orrs	r3, r1
 8006932:	e080      	b.n	8006a36 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800693c:	2b00      	cmp	r3, #0
 800693e:	d107      	bne.n	8006950 <HAL_ADC_ConfigChannel+0x5b4>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	0e9b      	lsrs	r3, r3, #26
 8006946:	3301      	adds	r3, #1
 8006948:	069b      	lsls	r3, r3, #26
 800694a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800694e:	e015      	b.n	800697c <HAL_ADC_ConfigChannel+0x5e0>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	fa93 f3a3 	rbit	r3, r3
 800695c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800695e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006960:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	d101      	bne.n	800696c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006968:	2320      	movs	r3, #32
 800696a:	e003      	b.n	8006974 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	fab3 f383 	clz	r3, r3
 8006972:	b2db      	uxtb	r3, r3
 8006974:	3301      	adds	r3, #1
 8006976:	069b      	lsls	r3, r3, #26
 8006978:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006984:	2b00      	cmp	r3, #0
 8006986:	d109      	bne.n	800699c <HAL_ADC_ConfigChannel+0x600>
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	0e9b      	lsrs	r3, r3, #26
 800698e:	3301      	adds	r3, #1
 8006990:	f003 031f 	and.w	r3, r3, #31
 8006994:	2101      	movs	r1, #1
 8006996:	fa01 f303 	lsl.w	r3, r1, r3
 800699a:	e017      	b.n	80069cc <HAL_ADC_ConfigChannel+0x630>
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	fa93 f3a3 	rbit	r3, r3
 80069a8:	61fb      	str	r3, [r7, #28]
  return result;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80069b4:	2320      	movs	r3, #32
 80069b6:	e003      	b.n	80069c0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	fab3 f383 	clz	r3, r3
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	3301      	adds	r3, #1
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	2101      	movs	r1, #1
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	ea42 0103 	orr.w	r1, r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10d      	bne.n	80069f8 <HAL_ADC_ConfigChannel+0x65c>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	0e9b      	lsrs	r3, r3, #26
 80069e2:	3301      	adds	r3, #1
 80069e4:	f003 021f 	and.w	r2, r3, #31
 80069e8:	4613      	mov	r3, r2
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	4413      	add	r3, r2
 80069ee:	3b1e      	subs	r3, #30
 80069f0:	051b      	lsls	r3, r3, #20
 80069f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069f6:	e01d      	b.n	8006a34 <HAL_ADC_ConfigChannel+0x698>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	fa93 f3a3 	rbit	r3, r3
 8006a04:	613b      	str	r3, [r7, #16]
  return result;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d103      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006a10:	2320      	movs	r3, #32
 8006a12:	e005      	b.n	8006a20 <HAL_ADC_ConfigChannel+0x684>
 8006a14:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	fab3 f383 	clz	r3, r3
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	3301      	adds	r3, #1
 8006a22:	f003 021f 	and.w	r2, r3, #31
 8006a26:	4613      	mov	r3, r2
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4413      	add	r3, r2
 8006a2c:	3b1e      	subs	r3, #30
 8006a2e:	051b      	lsls	r3, r3, #20
 8006a30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a34:	430b      	orrs	r3, r1
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	6892      	ldr	r2, [r2, #8]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	f7ff fa81 	bl	8005f42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4b44      	ldr	r3, [pc, #272]	; (8006b58 <HAL_ADC_ConfigChannel+0x7bc>)
 8006a46:	4013      	ands	r3, r2
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d07a      	beq.n	8006b42 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a4c:	4843      	ldr	r0, [pc, #268]	; (8006b5c <HAL_ADC_ConfigChannel+0x7c0>)
 8006a4e:	f7ff f9e9 	bl	8005e24 <LL_ADC_GetCommonPathInternalCh>
 8006a52:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a41      	ldr	r2, [pc, #260]	; (8006b60 <HAL_ADC_ConfigChannel+0x7c4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d12c      	bne.n	8006aba <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006a60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d126      	bne.n	8006aba <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a3c      	ldr	r2, [pc, #240]	; (8006b64 <HAL_ADC_ConfigChannel+0x7c8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d004      	beq.n	8006a80 <HAL_ADC_ConfigChannel+0x6e4>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a3b      	ldr	r2, [pc, #236]	; (8006b68 <HAL_ADC_ConfigChannel+0x7cc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d15d      	bne.n	8006b3c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006a84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4834      	ldr	r0, [pc, #208]	; (8006b5c <HAL_ADC_ConfigChannel+0x7c0>)
 8006a8c:	f7ff f9b7 	bl	8005dfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a90:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <HAL_ADC_ConfigChannel+0x7d0>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	099b      	lsrs	r3, r3, #6
 8006a96:	4a36      	ldr	r2, [pc, #216]	; (8006b70 <HAL_ADC_ConfigChannel+0x7d4>)
 8006a98:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9c:	099b      	lsrs	r3, r3, #6
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	005b      	lsls	r3, r3, #1
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006aaa:	e002      	b.n	8006ab2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1f9      	bne.n	8006aac <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ab8:	e040      	b.n	8006b3c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2d      	ldr	r2, [pc, #180]	; (8006b74 <HAL_ADC_ConfigChannel+0x7d8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d118      	bne.n	8006af6 <HAL_ADC_ConfigChannel+0x75a>
 8006ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d112      	bne.n	8006af6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a23      	ldr	r2, [pc, #140]	; (8006b64 <HAL_ADC_ConfigChannel+0x7c8>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d004      	beq.n	8006ae4 <HAL_ADC_ConfigChannel+0x748>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <HAL_ADC_ConfigChannel+0x7cc>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d12d      	bne.n	8006b40 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ae8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aec:	4619      	mov	r1, r3
 8006aee:	481b      	ldr	r0, [pc, #108]	; (8006b5c <HAL_ADC_ConfigChannel+0x7c0>)
 8006af0:	f7ff f985 	bl	8005dfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006af4:	e024      	b.n	8006b40 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <HAL_ADC_ConfigChannel+0x7dc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d120      	bne.n	8006b42 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d11a      	bne.n	8006b42 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a14      	ldr	r2, [pc, #80]	; (8006b64 <HAL_ADC_ConfigChannel+0x7c8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d115      	bne.n	8006b42 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006b1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b1e:	4619      	mov	r1, r3
 8006b20:	480e      	ldr	r0, [pc, #56]	; (8006b5c <HAL_ADC_ConfigChannel+0x7c0>)
 8006b22:	f7ff f96c 	bl	8005dfe <LL_ADC_SetCommonPathInternalCh>
 8006b26:	e00c      	b.n	8006b42 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f043 0220 	orr.w	r2, r3, #32
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8006b3a:	e002      	b.n	8006b42 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b3c:	bf00      	nop
 8006b3e:	e000      	b.n	8006b42 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006b4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	37d8      	adds	r7, #216	; 0xd8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	80080000 	.word	0x80080000
 8006b5c:	50040300 	.word	0x50040300
 8006b60:	c7520000 	.word	0xc7520000
 8006b64:	50040000 	.word	0x50040000
 8006b68:	50040200 	.word	0x50040200
 8006b6c:	20000000 	.word	0x20000000
 8006b70:	053e2d63 	.word	0x053e2d63
 8006b74:	cb840000 	.word	0xcb840000
 8006b78:	80000001 	.word	0x80000001

08006b7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e0ed      	b.n	8006d6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d102      	bne.n	8006ba0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fb fe02 	bl	80027a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 0201 	orr.w	r2, r2, #1
 8006bae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bb0:	f7ff f8e2 	bl	8005d78 <HAL_GetTick>
 8006bb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006bb6:	e012      	b.n	8006bde <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006bb8:	f7ff f8de 	bl	8005d78 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b0a      	cmp	r3, #10
 8006bc4:	d90b      	bls.n	8006bde <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2205      	movs	r2, #5
 8006bd6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0c5      	b.n	8006d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0e5      	beq.n	8006bb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 0202 	bic.w	r2, r2, #2
 8006bfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bfc:	f7ff f8bc 	bl	8005d78 <HAL_GetTick>
 8006c00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006c02:	e012      	b.n	8006c2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c04:	f7ff f8b8 	bl	8005d78 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b0a      	cmp	r3, #10
 8006c10:	d90b      	bls.n	8006c2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2205      	movs	r2, #5
 8006c22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e09f      	b.n	8006d6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e5      	bne.n	8006c04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	7e1b      	ldrb	r3, [r3, #24]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d108      	bne.n	8006c52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e007      	b.n	8006c62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7e5b      	ldrb	r3, [r3, #25]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d108      	bne.n	8006c7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	e007      	b.n	8006c8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7e9b      	ldrb	r3, [r3, #26]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d108      	bne.n	8006ca6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0220 	orr.w	r2, r2, #32
 8006ca2:	601a      	str	r2, [r3, #0]
 8006ca4:	e007      	b.n	8006cb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0220 	bic.w	r2, r2, #32
 8006cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	7edb      	ldrb	r3, [r3, #27]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d108      	bne.n	8006cd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0210 	bic.w	r2, r2, #16
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e007      	b.n	8006ce0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f042 0210 	orr.w	r2, r2, #16
 8006cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7f1b      	ldrb	r3, [r3, #28]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d108      	bne.n	8006cfa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0208 	orr.w	r2, r2, #8
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	e007      	b.n	8006d0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0208 	bic.w	r2, r2, #8
 8006d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	7f5b      	ldrb	r3, [r3, #29]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d108      	bne.n	8006d24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0204 	orr.w	r2, r2, #4
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e007      	b.n	8006d34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0204 	bic.w	r2, r2, #4
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	ea42 0103 	orr.w	r1, r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	1e5a      	subs	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <LL_EXTI_EnableIT_0_31+0x20>)
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	4904      	ldr	r1, [pc, #16]	; (8006d94 <LL_EXTI_EnableIT_0_31+0x20>)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	600b      	str	r3, [r1, #0]
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40010400 	.word	0x40010400

08006d98 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006da0:	4b06      	ldr	r3, [pc, #24]	; (8006dbc <LL_EXTI_DisableIT_0_31+0x24>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	43db      	mvns	r3, r3
 8006da8:	4904      	ldr	r1, [pc, #16]	; (8006dbc <LL_EXTI_DisableIT_0_31+0x24>)
 8006daa:	4013      	ands	r3, r2
 8006dac:	600b      	str	r3, [r1, #0]
}
 8006dae:	bf00      	nop
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40010400 	.word	0x40010400

08006dc0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006dca:	685a      	ldr	r2, [r3, #4]
 8006dcc:	4904      	ldr	r1, [pc, #16]	; (8006de0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	604b      	str	r3, [r1, #4]

}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	40010400 	.word	0x40010400

08006de4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	43db      	mvns	r3, r3
 8006df4:	4904      	ldr	r1, [pc, #16]	; (8006e08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	604b      	str	r3, [r1, #4]
}
 8006dfa:	bf00      	nop
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	40010400 	.word	0x40010400

08006e0c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	4904      	ldr	r1, [pc, #16]	; (8006e2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	608b      	str	r3, [r1, #8]

}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	40010400 	.word	0x40010400

08006e30 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006e38:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	43db      	mvns	r3, r3
 8006e40:	4904      	ldr	r1, [pc, #16]	; (8006e54 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006e42:	4013      	ands	r3, r2
 8006e44:	608b      	str	r3, [r1, #8]

}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	40010400 	.word	0x40010400

08006e58 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006e60:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	4904      	ldr	r1, [pc, #16]	; (8006e78 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60cb      	str	r3, [r1, #12]
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	40010400 	.word	0x40010400

08006e7c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	4904      	ldr	r1, [pc, #16]	; (8006ea0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	60cb      	str	r3, [r1, #12]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40010400 	.word	0x40010400

08006ea4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006eac:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6153      	str	r3, [r2, #20]
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40010400 	.word	0x40010400

08006ec4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	77fb      	strb	r3, [r7, #31]
 8006ede:	e0d1      	b.n	8007084 <HAL_COMP_Init+0x1c0>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eee:	d102      	bne.n	8006ef6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	77fb      	strb	r3, [r7, #31]
 8006ef4:	e0c6      	b.n	8007084 <HAL_COMP_Init+0x1c0>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d115      	bne.n	8006f2e <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f10:	4b5f      	ldr	r3, [pc, #380]	; (8007090 <HAL_COMP_Init+0x1cc>)
 8006f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f14:	4a5e      	ldr	r2, [pc, #376]	; (8007090 <HAL_COMP_Init+0x1cc>)
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	6613      	str	r3, [r2, #96]	; 0x60
 8006f1c:	4b5c      	ldr	r3, [pc, #368]	; (8007090 <HAL_COMP_Init+0x1cc>)
 8006f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7fb fc7f 	bl	800282c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f38:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (  hcomp->Init.NonInvertingInput
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b4b      	ldr	r3, [pc, #300]	; (8007094 <HAL_COMP_Init+0x1d0>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	6979      	ldr	r1, [r7, #20]
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7a:	d106      	bne.n	8006f8a <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006f7c:	4b46      	ldr	r3, [pc, #280]	; (8007098 <HAL_COMP_Init+0x1d4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a45      	ldr	r2, [pc, #276]	; (8007098 <HAL_COMP_Init+0x1d4>)
 8006f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	e005      	b.n	8006f96 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006f8a:	4b43      	ldr	r3, [pc, #268]	; (8007098 <HAL_COMP_Init+0x1d4>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a42      	ldr	r2, [pc, #264]	; (8007098 <HAL_COMP_Init+0x1d4>)
 8006f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f94:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d016      	beq.n	8006fd2 <HAL_COMP_Init+0x10e>
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d113      	bne.n	8006fd2 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006faa:	4b3c      	ldr	r3, [pc, #240]	; (800709c <HAL_COMP_Init+0x1d8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	099b      	lsrs	r3, r3, #6
 8006fb0:	4a3b      	ldr	r2, [pc, #236]	; (80070a0 <HAL_COMP_Init+0x1dc>)
 8006fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb6:	099b      	lsrs	r3, r3, #6
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006fc4:	e002      	b.n	8006fcc <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f9      	bne.n	8006fc6 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a33      	ldr	r2, [pc, #204]	; (80070a4 <HAL_COMP_Init+0x1e0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d102      	bne.n	8006fe2 <HAL_COMP_Init+0x11e>
 8006fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006fe0:	e001      	b.n	8006fe6 <HAL_COMP_Init+0x122>
 8006fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006fe6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d037      	beq.n	8007064 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d003      	beq.n	8007008 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007000:	6938      	ldr	r0, [r7, #16]
 8007002:	f7ff ff03 	bl	8006e0c <LL_EXTI_EnableRisingTrig_0_31>
 8007006:	e002      	b.n	800700e <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8007008:	6938      	ldr	r0, [r7, #16]
 800700a:	f7ff ff11 	bl	8006e30 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f003 0320 	and.w	r3, r3, #32
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800701a:	6938      	ldr	r0, [r7, #16]
 800701c:	f7ff ff1c 	bl	8006e58 <LL_EXTI_EnableFallingTrig_0_31>
 8007020:	e002      	b.n	8007028 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007022:	6938      	ldr	r0, [r7, #16]
 8007024:	f7ff ff2a 	bl	8006e7c <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8007028:	6938      	ldr	r0, [r7, #16]
 800702a:	f7ff ff3b 	bl	8006ea4 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d003      	beq.n	8007042 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800703a:	6938      	ldr	r0, [r7, #16]
 800703c:	f7ff fec0 	bl	8006dc0 <LL_EXTI_EnableEvent_0_31>
 8007040:	e002      	b.n	8007048 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8007042:	6938      	ldr	r0, [r7, #16]
 8007044:	f7ff fece 	bl	8006de4 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d003      	beq.n	800705c <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8007054:	6938      	ldr	r0, [r7, #16]
 8007056:	f7ff fe8d 	bl	8006d74 <LL_EXTI_EnableIT_0_31>
 800705a:	e009      	b.n	8007070 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800705c:	6938      	ldr	r0, [r7, #16]
 800705e:	f7ff fe9b 	bl	8006d98 <LL_EXTI_DisableIT_0_31>
 8007062:	e005      	b.n	8007070 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8007064:	6938      	ldr	r0, [r7, #16]
 8007066:	f7ff febd 	bl	8006de4 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800706a:	6938      	ldr	r0, [r7, #16]
 800706c:	f7ff fe94 	bl	8006d98 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007076:	b2db      	uxtb	r3, r3
 8007078:	2b00      	cmp	r3, #0
 800707a:	d103      	bne.n	8007084 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007084:	7ffb      	ldrb	r3, [r7, #31]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3720      	adds	r7, #32
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40021000 	.word	0x40021000
 8007094:	ff207d03 	.word	0xff207d03
 8007098:	40010204 	.word	0x40010204
 800709c:	20000000 	.word	0x20000000
 80070a0:	053e2d63 	.word	0x053e2d63
 80070a4:	40010200 	.word	0x40010200

080070a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070b8:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <__NVIC_SetPriorityGrouping+0x44>)
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070c4:	4013      	ands	r3, r2
 80070c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070da:	4a04      	ldr	r2, [pc, #16]	; (80070ec <__NVIC_SetPriorityGrouping+0x44>)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	60d3      	str	r3, [r2, #12]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	e000ed00 	.word	0xe000ed00

080070f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070f4:	4b04      	ldr	r3, [pc, #16]	; (8007108 <__NVIC_GetPriorityGrouping+0x18>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	0a1b      	lsrs	r3, r3, #8
 80070fa:	f003 0307 	and.w	r3, r3, #7
}
 80070fe:	4618      	mov	r0, r3
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	e000ed00 	.word	0xe000ed00

0800710c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711a:	2b00      	cmp	r3, #0
 800711c:	db0b      	blt.n	8007136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	f003 021f 	and.w	r2, r3, #31
 8007124:	4907      	ldr	r1, [pc, #28]	; (8007144 <__NVIC_EnableIRQ+0x38>)
 8007126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	2001      	movs	r0, #1
 800712e:	fa00 f202 	lsl.w	r2, r0, r2
 8007132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	e000e100 	.word	0xe000e100

08007148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007158:	2b00      	cmp	r3, #0
 800715a:	db0a      	blt.n	8007172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	b2da      	uxtb	r2, r3
 8007160:	490c      	ldr	r1, [pc, #48]	; (8007194 <__NVIC_SetPriority+0x4c>)
 8007162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007166:	0112      	lsls	r2, r2, #4
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	440b      	add	r3, r1
 800716c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007170:	e00a      	b.n	8007188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	b2da      	uxtb	r2, r3
 8007176:	4908      	ldr	r1, [pc, #32]	; (8007198 <__NVIC_SetPriority+0x50>)
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	3b04      	subs	r3, #4
 8007180:	0112      	lsls	r2, r2, #4
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	440b      	add	r3, r1
 8007186:	761a      	strb	r2, [r3, #24]
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	e000e100 	.word	0xe000e100
 8007198:	e000ed00 	.word	0xe000ed00

0800719c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800719c:	b480      	push	{r7}
 800719e:	b089      	sub	sp, #36	; 0x24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	f1c3 0307 	rsb	r3, r3, #7
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	bf28      	it	cs
 80071ba:	2304      	movcs	r3, #4
 80071bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	3304      	adds	r3, #4
 80071c2:	2b06      	cmp	r3, #6
 80071c4:	d902      	bls.n	80071cc <NVIC_EncodePriority+0x30>
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	3b03      	subs	r3, #3
 80071ca:	e000      	b.n	80071ce <NVIC_EncodePriority+0x32>
 80071cc:	2300      	movs	r3, #0
 80071ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071d0:	f04f 32ff 	mov.w	r2, #4294967295
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	fa02 f303 	lsl.w	r3, r2, r3
 80071da:	43da      	mvns	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	401a      	ands	r2, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071e4:	f04f 31ff 	mov.w	r1, #4294967295
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	fa01 f303 	lsl.w	r3, r1, r3
 80071ee:	43d9      	mvns	r1, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f4:	4313      	orrs	r3, r2
         );
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3724      	adds	r7, #36	; 0x24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
	...

08007204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	3b01      	subs	r3, #1
 8007210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007214:	d301      	bcc.n	800721a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007216:	2301      	movs	r3, #1
 8007218:	e00f      	b.n	800723a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800721a:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <SysTick_Config+0x40>)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3b01      	subs	r3, #1
 8007220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007222:	210f      	movs	r1, #15
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	f7ff ff8e 	bl	8007148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <SysTick_Config+0x40>)
 800722e:	2200      	movs	r2, #0
 8007230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007232:	4b04      	ldr	r3, [pc, #16]	; (8007244 <SysTick_Config+0x40>)
 8007234:	2207      	movs	r2, #7
 8007236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	e000e010 	.word	0xe000e010

08007248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff ff29 	bl	80070a8 <__NVIC_SetPriorityGrouping>
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	4603      	mov	r3, r0
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
 800726a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007270:	f7ff ff3e 	bl	80070f0 <__NVIC_GetPriorityGrouping>
 8007274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	6978      	ldr	r0, [r7, #20]
 800727c:	f7ff ff8e 	bl	800719c <NVIC_EncodePriority>
 8007280:	4602      	mov	r2, r0
 8007282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff ff5d 	bl	8007148 <__NVIC_SetPriority>
}
 800728e:	bf00      	nop
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	4603      	mov	r3, r0
 800729e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff ff31 	bl	800710c <__NVIC_EnableIRQ>
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff ffa2 	bl	8007204 <SysTick_Config>
 80072c0:	4603      	mov	r3, r0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d008      	beq.n	80072f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2204      	movs	r2, #4
 80072e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e022      	b.n	800733a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 020e 	bic.w	r2, r2, #14
 8007302:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0201 	bic.w	r2, r2, #1
 8007312:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007318:	f003 021c 	and.w	r2, r3, #28
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007320:	2101      	movs	r1, #1
 8007322:	fa01 f202 	lsl.w	r2, r1, r2
 8007326:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b02      	cmp	r3, #2
 800735c:	d005      	beq.n	800736a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2204      	movs	r2, #4
 8007362:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
 8007368:	e029      	b.n	80073be <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 020e 	bic.w	r2, r2, #14
 8007378:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738e:	f003 021c 	and.w	r2, r3, #28
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	2101      	movs	r1, #1
 8007398:	fa01 f202 	lsl.w	r2, r1, r2
 800739c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
    }
  }
  return status;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80073d2:	2300      	movs	r3, #0
 80073d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073d6:	e17f      	b.n	80076d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	2101      	movs	r1, #1
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	fa01 f303 	lsl.w	r3, r1, r3
 80073e4:	4013      	ands	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 8171 	beq.w	80076d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d005      	beq.n	8007408 <HAL_GPIO_Init+0x40>
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	f003 0303 	and.w	r3, r3, #3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d130      	bne.n	800746a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	2203      	movs	r2, #3
 8007414:	fa02 f303 	lsl.w	r3, r2, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	4013      	ands	r3, r2
 800741e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	fa02 f303 	lsl.w	r3, r2, r3
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800743e:	2201      	movs	r2, #1
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	43db      	mvns	r3, r3
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4013      	ands	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	f003 0201 	and.w	r2, r3, #1
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	fa02 f303 	lsl.w	r3, r2, r3
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	4313      	orrs	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	2b03      	cmp	r3, #3
 8007474:	d118      	bne.n	80074a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800747c:	2201      	movs	r2, #1
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	43db      	mvns	r3, r3
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4013      	ands	r3, r2
 800748a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	08db      	lsrs	r3, r3, #3
 8007492:	f003 0201 	and.w	r2, r3, #1
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	4313      	orrs	r3, r2
 80074a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d017      	beq.n	80074e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	2203      	movs	r2, #3
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	43db      	mvns	r3, r3
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	4013      	ands	r3, r2
 80074ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	fa02 f303 	lsl.w	r3, r2, r3
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d123      	bne.n	8007538 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	08da      	lsrs	r2, r3, #3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3208      	adds	r2, #8
 80074f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	220f      	movs	r2, #15
 8007508:	fa02 f303 	lsl.w	r3, r2, r3
 800750c:	43db      	mvns	r3, r3
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	4013      	ands	r3, r2
 8007512:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	fa02 f303 	lsl.w	r3, r2, r3
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	08da      	lsrs	r2, r3, #3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3208      	adds	r2, #8
 8007532:	6939      	ldr	r1, [r7, #16]
 8007534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	2203      	movs	r2, #3
 8007544:	fa02 f303 	lsl.w	r3, r2, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	4013      	ands	r3, r2
 800754e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f003 0203 	and.w	r2, r3, #3
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4313      	orrs	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 80ac 	beq.w	80076d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800757a:	4b5f      	ldr	r3, [pc, #380]	; (80076f8 <HAL_GPIO_Init+0x330>)
 800757c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800757e:	4a5e      	ldr	r2, [pc, #376]	; (80076f8 <HAL_GPIO_Init+0x330>)
 8007580:	f043 0301 	orr.w	r3, r3, #1
 8007584:	6613      	str	r3, [r2, #96]	; 0x60
 8007586:	4b5c      	ldr	r3, [pc, #368]	; (80076f8 <HAL_GPIO_Init+0x330>)
 8007588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	60bb      	str	r3, [r7, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007592:	4a5a      	ldr	r2, [pc, #360]	; (80076fc <HAL_GPIO_Init+0x334>)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	089b      	lsrs	r3, r3, #2
 8007598:	3302      	adds	r3, #2
 800759a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800759e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	220f      	movs	r2, #15
 80075aa:	fa02 f303 	lsl.w	r3, r2, r3
 80075ae:	43db      	mvns	r3, r3
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4013      	ands	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80075bc:	d025      	beq.n	800760a <HAL_GPIO_Init+0x242>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a4f      	ldr	r2, [pc, #316]	; (8007700 <HAL_GPIO_Init+0x338>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01f      	beq.n	8007606 <HAL_GPIO_Init+0x23e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a4e      	ldr	r2, [pc, #312]	; (8007704 <HAL_GPIO_Init+0x33c>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d019      	beq.n	8007602 <HAL_GPIO_Init+0x23a>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a4d      	ldr	r2, [pc, #308]	; (8007708 <HAL_GPIO_Init+0x340>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d013      	beq.n	80075fe <HAL_GPIO_Init+0x236>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a4c      	ldr	r2, [pc, #304]	; (800770c <HAL_GPIO_Init+0x344>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d00d      	beq.n	80075fa <HAL_GPIO_Init+0x232>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a4b      	ldr	r2, [pc, #300]	; (8007710 <HAL_GPIO_Init+0x348>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d007      	beq.n	80075f6 <HAL_GPIO_Init+0x22e>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a4a      	ldr	r2, [pc, #296]	; (8007714 <HAL_GPIO_Init+0x34c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d101      	bne.n	80075f2 <HAL_GPIO_Init+0x22a>
 80075ee:	2306      	movs	r3, #6
 80075f0:	e00c      	b.n	800760c <HAL_GPIO_Init+0x244>
 80075f2:	2307      	movs	r3, #7
 80075f4:	e00a      	b.n	800760c <HAL_GPIO_Init+0x244>
 80075f6:	2305      	movs	r3, #5
 80075f8:	e008      	b.n	800760c <HAL_GPIO_Init+0x244>
 80075fa:	2304      	movs	r3, #4
 80075fc:	e006      	b.n	800760c <HAL_GPIO_Init+0x244>
 80075fe:	2303      	movs	r3, #3
 8007600:	e004      	b.n	800760c <HAL_GPIO_Init+0x244>
 8007602:	2302      	movs	r3, #2
 8007604:	e002      	b.n	800760c <HAL_GPIO_Init+0x244>
 8007606:	2301      	movs	r3, #1
 8007608:	e000      	b.n	800760c <HAL_GPIO_Init+0x244>
 800760a:	2300      	movs	r3, #0
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	f002 0203 	and.w	r2, r2, #3
 8007612:	0092      	lsls	r2, r2, #2
 8007614:	4093      	lsls	r3, r2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800761c:	4937      	ldr	r1, [pc, #220]	; (80076fc <HAL_GPIO_Init+0x334>)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	089b      	lsrs	r3, r3, #2
 8007622:	3302      	adds	r3, #2
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800762a:	4b3b      	ldr	r3, [pc, #236]	; (8007718 <HAL_GPIO_Init+0x350>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	43db      	mvns	r3, r3
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	4013      	ands	r3, r2
 8007638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800764e:	4a32      	ldr	r2, [pc, #200]	; (8007718 <HAL_GPIO_Init+0x350>)
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007654:	4b30      	ldr	r3, [pc, #192]	; (8007718 <HAL_GPIO_Init+0x350>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	43db      	mvns	r3, r3
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4013      	ands	r3, r2
 8007662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d003      	beq.n	8007678 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007678:	4a27      	ldr	r2, [pc, #156]	; (8007718 <HAL_GPIO_Init+0x350>)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800767e:	4b26      	ldr	r3, [pc, #152]	; (8007718 <HAL_GPIO_Init+0x350>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	43db      	mvns	r3, r3
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4013      	ands	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	685b      	ldr	r3, [r3, #4]
 8007692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80076a2:	4a1d      	ldr	r2, [pc, #116]	; (8007718 <HAL_GPIO_Init+0x350>)
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80076a8:	4b1b      	ldr	r3, [pc, #108]	; (8007718 <HAL_GPIO_Init+0x350>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	43db      	mvns	r3, r3
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4013      	ands	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80076cc:	4a12      	ldr	r2, [pc, #72]	; (8007718 <HAL_GPIO_Init+0x350>)
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	3301      	adds	r3, #1
 80076d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	fa22 f303 	lsr.w	r3, r2, r3
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f47f ae78 	bne.w	80073d8 <HAL_GPIO_Init+0x10>
  }
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000
 80076fc:	40010000 	.word	0x40010000
 8007700:	48000400 	.word	0x48000400
 8007704:	48000800 	.word	0x48000800
 8007708:	48000c00 	.word	0x48000c00
 800770c:	48001000 	.word	0x48001000
 8007710:	48001400 	.word	0x48001400
 8007714:	48001800 	.word	0x48001800
 8007718:	40010400 	.word	0x40010400

0800771c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007726:	2300      	movs	r3, #0
 8007728:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800772a:	e0cd      	b.n	80078c8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800772c:	2201      	movs	r2, #1
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	4013      	ands	r3, r2
 8007738:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80c0 	beq.w	80078c2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8007742:	4a68      	ldr	r2, [pc, #416]	; (80078e4 <HAL_GPIO_DeInit+0x1c8>)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	089b      	lsrs	r3, r3, #2
 8007748:	3302      	adds	r3, #2
 800774a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f003 0303 	and.w	r3, r3, #3
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	220f      	movs	r2, #15
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	68fa      	ldr	r2, [r7, #12]
 8007760:	4013      	ands	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800776a:	d025      	beq.n	80077b8 <HAL_GPIO_DeInit+0x9c>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a5e      	ldr	r2, [pc, #376]	; (80078e8 <HAL_GPIO_DeInit+0x1cc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d01f      	beq.n	80077b4 <HAL_GPIO_DeInit+0x98>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a5d      	ldr	r2, [pc, #372]	; (80078ec <HAL_GPIO_DeInit+0x1d0>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d019      	beq.n	80077b0 <HAL_GPIO_DeInit+0x94>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a5c      	ldr	r2, [pc, #368]	; (80078f0 <HAL_GPIO_DeInit+0x1d4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d013      	beq.n	80077ac <HAL_GPIO_DeInit+0x90>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a5b      	ldr	r2, [pc, #364]	; (80078f4 <HAL_GPIO_DeInit+0x1d8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d00d      	beq.n	80077a8 <HAL_GPIO_DeInit+0x8c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a5a      	ldr	r2, [pc, #360]	; (80078f8 <HAL_GPIO_DeInit+0x1dc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d007      	beq.n	80077a4 <HAL_GPIO_DeInit+0x88>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a59      	ldr	r2, [pc, #356]	; (80078fc <HAL_GPIO_DeInit+0x1e0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d101      	bne.n	80077a0 <HAL_GPIO_DeInit+0x84>
 800779c:	2306      	movs	r3, #6
 800779e:	e00c      	b.n	80077ba <HAL_GPIO_DeInit+0x9e>
 80077a0:	2307      	movs	r3, #7
 80077a2:	e00a      	b.n	80077ba <HAL_GPIO_DeInit+0x9e>
 80077a4:	2305      	movs	r3, #5
 80077a6:	e008      	b.n	80077ba <HAL_GPIO_DeInit+0x9e>
 80077a8:	2304      	movs	r3, #4
 80077aa:	e006      	b.n	80077ba <HAL_GPIO_DeInit+0x9e>
 80077ac:	2303      	movs	r3, #3
 80077ae:	e004      	b.n	80077ba <HAL_GPIO_DeInit+0x9e>
 80077b0:	2302      	movs	r3, #2
 80077b2:	e002      	b.n	80077ba <HAL_GPIO_DeInit+0x9e>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <HAL_GPIO_DeInit+0x9e>
 80077b8:	2300      	movs	r3, #0
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	f002 0203 	and.w	r2, r2, #3
 80077c0:	0092      	lsls	r2, r2, #2
 80077c2:	4093      	lsls	r3, r2
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d132      	bne.n	8007830 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80077ca:	4b4d      	ldr	r3, [pc, #308]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	43db      	mvns	r3, r3
 80077d2:	494b      	ldr	r1, [pc, #300]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077d4:	4013      	ands	r3, r2
 80077d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80077d8:	4b49      	ldr	r3, [pc, #292]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	43db      	mvns	r3, r3
 80077e0:	4947      	ldr	r1, [pc, #284]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077e2:	4013      	ands	r3, r2
 80077e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80077e6:	4b46      	ldr	r3, [pc, #280]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	43db      	mvns	r3, r3
 80077ee:	4944      	ldr	r1, [pc, #272]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80077f4:	4b42      	ldr	r3, [pc, #264]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077f6:	689a      	ldr	r2, [r3, #8]
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	43db      	mvns	r3, r3
 80077fc:	4940      	ldr	r1, [pc, #256]	; (8007900 <HAL_GPIO_DeInit+0x1e4>)
 80077fe:	4013      	ands	r3, r2
 8007800:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f003 0303 	and.w	r3, r3, #3
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	220f      	movs	r2, #15
 800780c:	fa02 f303 	lsl.w	r3, r2, r3
 8007810:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8007812:	4a34      	ldr	r2, [pc, #208]	; (80078e4 <HAL_GPIO_DeInit+0x1c8>)
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	089b      	lsrs	r3, r3, #2
 8007818:	3302      	adds	r3, #2
 800781a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	43da      	mvns	r2, r3
 8007822:	4830      	ldr	r0, [pc, #192]	; (80078e4 <HAL_GPIO_DeInit+0x1c8>)
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	089b      	lsrs	r3, r3, #2
 8007828:	400a      	ands	r2, r1
 800782a:	3302      	adds	r3, #2
 800782c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	2103      	movs	r1, #3
 800783a:	fa01 f303 	lsl.w	r3, r1, r3
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	08da      	lsrs	r2, r3, #3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3208      	adds	r2, #8
 800784c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	220f      	movs	r2, #15
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	43db      	mvns	r3, r3
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	08d2      	lsrs	r2, r2, #3
 8007864:	4019      	ands	r1, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3208      	adds	r2, #8
 800786a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	2103      	movs	r1, #3
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	43db      	mvns	r3, r3
 800787e:	401a      	ands	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685a      	ldr	r2, [r3, #4]
 8007888:	2101      	movs	r1, #1
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	fa01 f303 	lsl.w	r3, r1, r3
 8007890:	43db      	mvns	r3, r3
 8007892:	401a      	ands	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	2103      	movs	r1, #3
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	43db      	mvns	r3, r3
 80078a8:	401a      	ands	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b2:	2101      	movs	r1, #1
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ba:	43db      	mvns	r3, r3
 80078bc:	401a      	ands	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	3301      	adds	r3, #1
 80078c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80078c8:	683a      	ldr	r2, [r7, #0]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f47f af2b 	bne.w	800772c <HAL_GPIO_DeInit+0x10>
  }
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	371c      	adds	r7, #28
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	40010000 	.word	0x40010000
 80078e8:	48000400 	.word	0x48000400
 80078ec:	48000800 	.word	0x48000800
 80078f0:	48000c00 	.word	0x48000c00
 80078f4:	48001000 	.word	0x48001000
 80078f8:	48001400 	.word	0x48001400
 80078fc:	48001800 	.word	0x48001800
 8007900:	40010400 	.word	0x40010400

08007904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	460b      	mov	r3, r1
 800790e:	807b      	strh	r3, [r7, #2]
 8007910:	4613      	mov	r3, r2
 8007912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007914:	787b      	ldrb	r3, [r7, #1]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800791a:	887a      	ldrh	r2, [r7, #2]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007920:	e002      	b.n	8007928 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007922:	887a      	ldrh	r2, [r7, #2]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e081      	b.n	8007a4a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fa ff9a 	bl	8002894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2224      	movs	r2, #36	; 0x24
 8007964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007984:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007994:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d107      	bne.n	80079ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079aa:	609a      	str	r2, [r3, #8]
 80079ac:	e006      	b.n	80079bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80079ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d104      	bne.n	80079ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6812      	ldr	r2, [r2, #0]
 80079d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80079f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691a      	ldr	r2, [r3, #16]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	69d9      	ldr	r1, [r3, #28]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	430a      	orrs	r2, r1
 8007a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2220      	movs	r2, #32
 8007a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b082      	sub	sp, #8
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e021      	b.n	8007aa8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2224      	movs	r2, #36	; 0x24
 8007a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 0201 	bic.w	r2, r2, #1
 8007a7a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7fa ff67 	bl	8002950 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af02      	add	r7, sp, #8
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	4608      	mov	r0, r1
 8007aba:	4611      	mov	r1, r2
 8007abc:	461a      	mov	r2, r3
 8007abe:	4603      	mov	r3, r0
 8007ac0:	817b      	strh	r3, [r7, #10]
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	813b      	strh	r3, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	f040 80f9 	bne.w	8007cca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d002      	beq.n	8007ae4 <HAL_I2C_Mem_Write+0x34>
 8007ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d105      	bne.n	8007af0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007aea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0ed      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_I2C_Mem_Write+0x4e>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e0e6      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007b06:	f7fe f937 	bl	8005d78 <HAL_GetTick>
 8007b0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	2319      	movs	r3, #25
 8007b12:	2201      	movs	r2, #1
 8007b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fadd 	bl	80080d8 <I2C_WaitOnFlagUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e0d1      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2221      	movs	r2, #33	; 0x21
 8007b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2240      	movs	r2, #64	; 0x40
 8007b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a3a      	ldr	r2, [r7, #32]
 8007b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b50:	88f8      	ldrh	r0, [r7, #6]
 8007b52:	893a      	ldrh	r2, [r7, #8]
 8007b54:	8979      	ldrh	r1, [r7, #10]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	4603      	mov	r3, r0
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f9ed 	bl	8007f40 <I2C_RequestMemoryWrite>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e0a9      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	2bff      	cmp	r3, #255	; 0xff
 8007b80:	d90e      	bls.n	8007ba0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	22ff      	movs	r2, #255	; 0xff
 8007b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	8979      	ldrh	r1, [r7, #10]
 8007b90:	2300      	movs	r3, #0
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 fc45 	bl	8008428 <I2C_TransferConfig>
 8007b9e:	e00f      	b.n	8007bc0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	8979      	ldrh	r1, [r7, #10]
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	f000 fc34 	bl	8008428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc4:	68f8      	ldr	r0, [r7, #12]
 8007bc6:	f000 fac7 	bl	8008158 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e07b      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	781a      	ldrb	r2, [r3, #0]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d034      	beq.n	8007c78 <HAL_I2C_Mem_Write+0x1c8>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d130      	bne.n	8007c78 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2180      	movs	r1, #128	; 0x80
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f000 fa59 	bl	80080d8 <I2C_WaitOnFlagUntilTimeout>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d001      	beq.n	8007c30 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e04d      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	2bff      	cmp	r3, #255	; 0xff
 8007c38:	d90e      	bls.n	8007c58 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	22ff      	movs	r2, #255	; 0xff
 8007c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	8979      	ldrh	r1, [r7, #10]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 fbe9 	bl	8008428 <I2C_TransferConfig>
 8007c56:	e00f      	b.n	8007c78 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	8979      	ldrh	r1, [r7, #10]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	f000 fbd8 	bl	8008428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d19e      	bne.n	8007bc0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f000 faa6 	bl	80081d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e01a      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2220      	movs	r2, #32
 8007c9c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6859      	ldr	r1, [r3, #4]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <HAL_I2C_Mem_Write+0x224>)
 8007caa:	400b      	ands	r3, r1
 8007cac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2220      	movs	r2, #32
 8007cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e000      	b.n	8007ccc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	fe00e800 	.word	0xfe00e800

08007cd8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	60f8      	str	r0, [r7, #12]
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	817b      	strh	r3, [r7, #10]
 8007cea:	460b      	mov	r3, r1
 8007cec:	813b      	strh	r3, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	f040 80fd 	bne.w	8007efa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_I2C_Mem_Read+0x34>
 8007d06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d105      	bne.n	8007d18 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d12:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e0f1      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_I2C_Mem_Read+0x4e>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e0ea      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007d2e:	f7fe f823 	bl	8005d78 <HAL_GetTick>
 8007d32:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	2319      	movs	r3, #25
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f9c9 	bl	80080d8 <I2C_WaitOnFlagUntilTimeout>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e0d5      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2222      	movs	r2, #34	; 0x22
 8007d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2240      	movs	r2, #64	; 0x40
 8007d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6a3a      	ldr	r2, [r7, #32]
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d78:	88f8      	ldrh	r0, [r7, #6]
 8007d7a:	893a      	ldrh	r2, [r7, #8]
 8007d7c:	8979      	ldrh	r1, [r7, #10]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4603      	mov	r3, r0
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f000 f92d 	bl	8007fe8 <I2C_RequestMemoryRead>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d005      	beq.n	8007da0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e0ad      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2bff      	cmp	r3, #255	; 0xff
 8007da8:	d90e      	bls.n	8007dc8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	22ff      	movs	r2, #255	; 0xff
 8007dae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	8979      	ldrh	r1, [r7, #10]
 8007db8:	4b52      	ldr	r3, [pc, #328]	; (8007f04 <HAL_I2C_Mem_Read+0x22c>)
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fb31 	bl	8008428 <I2C_TransferConfig>
 8007dc6:	e00f      	b.n	8007de8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	8979      	ldrh	r1, [r7, #10]
 8007dda:	4b4a      	ldr	r3, [pc, #296]	; (8007f04 <HAL_I2C_Mem_Read+0x22c>)
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	f000 fb20 	bl	8008428 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dee:	2200      	movs	r2, #0
 8007df0:	2104      	movs	r1, #4
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f000 f970 	bl	80080d8 <I2C_WaitOnFlagUntilTimeout>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e07c      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	1c5a      	adds	r2, r3, #1
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d034      	beq.n	8007ea8 <HAL_I2C_Mem_Read+0x1d0>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d130      	bne.n	8007ea8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2180      	movs	r1, #128	; 0x80
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f941 	bl	80080d8 <I2C_WaitOnFlagUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e04d      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	2bff      	cmp	r3, #255	; 0xff
 8007e68:	d90e      	bls.n	8007e88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	22ff      	movs	r2, #255	; 0xff
 8007e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	8979      	ldrh	r1, [r7, #10]
 8007e78:	2300      	movs	r3, #0
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f000 fad1 	bl	8008428 <I2C_TransferConfig>
 8007e86:	e00f      	b.n	8007ea8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	8979      	ldrh	r1, [r7, #10]
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fac0 	bl	8008428 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d19a      	bne.n	8007de8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f000 f98e 	bl	80081d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e01a      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6859      	ldr	r1, [r3, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	4b0b      	ldr	r3, [pc, #44]	; (8007f08 <HAL_I2C_Mem_Read+0x230>)
 8007eda:	400b      	ands	r3, r1
 8007edc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	e000      	b.n	8007efc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007efa:	2302      	movs	r3, #2
  }
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	80002400 	.word	0x80002400
 8007f08:	fe00e800 	.word	0xfe00e800

08007f0c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f1a:	b2db      	uxtb	r3, r3
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4603      	mov	r3, r0
 8007f50:	817b      	strh	r3, [r7, #10]
 8007f52:	460b      	mov	r3, r1
 8007f54:	813b      	strh	r3, [r7, #8]
 8007f56:	4613      	mov	r3, r2
 8007f58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f5a:	88fb      	ldrh	r3, [r7, #6]
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	8979      	ldrh	r1, [r7, #10]
 8007f60:	4b20      	ldr	r3, [pc, #128]	; (8007fe4 <I2C_RequestMemoryWrite+0xa4>)
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 fa5d 	bl	8008428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f6e:	69fa      	ldr	r2, [r7, #28]
 8007f70:	69b9      	ldr	r1, [r7, #24]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 f8f0 	bl	8008158 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e02c      	b.n	8007fdc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d105      	bne.n	8007f94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f88:	893b      	ldrh	r3, [r7, #8]
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	629a      	str	r2, [r3, #40]	; 0x28
 8007f92:	e015      	b.n	8007fc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f94:	893b      	ldrh	r3, [r7, #8]
 8007f96:	0a1b      	lsrs	r3, r3, #8
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	69b9      	ldr	r1, [r7, #24]
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	f000 f8d6 	bl	8008158 <I2C_WaitOnTXISFlagUntilTimeout>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e012      	b.n	8007fdc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007fb6:	893b      	ldrh	r3, [r7, #8]
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2180      	movs	r1, #128	; 0x80
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 f884 	bl	80080d8 <I2C_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e000      	b.n	8007fdc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	80002000 	.word	0x80002000

08007fe8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	817b      	strh	r3, [r7, #10]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	813b      	strh	r3, [r7, #8]
 8007ffe:	4613      	mov	r3, r2
 8008000:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	b2da      	uxtb	r2, r3
 8008006:	8979      	ldrh	r1, [r7, #10]
 8008008:	4b20      	ldr	r3, [pc, #128]	; (800808c <I2C_RequestMemoryRead+0xa4>)
 800800a:	9300      	str	r3, [sp, #0]
 800800c:	2300      	movs	r3, #0
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 fa0a 	bl	8008428 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	69b9      	ldr	r1, [r7, #24]
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 f89d 	bl	8008158 <I2C_WaitOnTXISFlagUntilTimeout>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	e02c      	b.n	8008082 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d105      	bne.n	800803a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800802e:	893b      	ldrh	r3, [r7, #8]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	629a      	str	r2, [r3, #40]	; 0x28
 8008038:	e015      	b.n	8008066 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800803a:	893b      	ldrh	r3, [r7, #8]
 800803c:	0a1b      	lsrs	r3, r3, #8
 800803e:	b29b      	uxth	r3, r3
 8008040:	b2da      	uxtb	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	69b9      	ldr	r1, [r7, #24]
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f883 	bl	8008158 <I2C_WaitOnTXISFlagUntilTimeout>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e012      	b.n	8008082 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800805c:	893b      	ldrh	r3, [r7, #8]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	2200      	movs	r2, #0
 800806e:	2140      	movs	r1, #64	; 0x40
 8008070:	68f8      	ldr	r0, [r7, #12]
 8008072:	f000 f831 	bl	80080d8 <I2C_WaitOnFlagUntilTimeout>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e000      	b.n	8008082 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	80002000 	.word	0x80002000

08008090 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f003 0302 	and.w	r3, r3, #2
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	d103      	bne.n	80080ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2200      	movs	r2, #0
 80080ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d007      	beq.n	80080cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f042 0201 	orr.w	r2, r2, #1
 80080ca:	619a      	str	r2, [r3, #24]
  }
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	603b      	str	r3, [r7, #0]
 80080e4:	4613      	mov	r3, r2
 80080e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080e8:	e022      	b.n	8008130 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d01e      	beq.n	8008130 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080f2:	f7fd fe41 	bl	8005d78 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d302      	bcc.n	8008108 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d113      	bne.n	8008130 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810c:	f043 0220 	orr.w	r2, r3, #32
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2220      	movs	r2, #32
 8008118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e00f      	b.n	8008150 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	699a      	ldr	r2, [r3, #24]
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4013      	ands	r3, r2
 800813a:	68ba      	ldr	r2, [r7, #8]
 800813c:	429a      	cmp	r2, r3
 800813e:	bf0c      	ite	eq
 8008140:	2301      	moveq	r3, #1
 8008142:	2300      	movne	r3, #0
 8008144:	b2db      	uxtb	r3, r3
 8008146:	461a      	mov	r2, r3
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	429a      	cmp	r2, r3
 800814c:	d0cd      	beq.n	80080ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008164:	e02c      	b.n	80081c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	68b9      	ldr	r1, [r7, #8]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 f870 	bl	8008250 <I2C_IsErrorOccurred>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	e02a      	b.n	80081d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008180:	d01e      	beq.n	80081c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008182:	f7fd fdf9 	bl	8005d78 <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	429a      	cmp	r2, r3
 8008190:	d302      	bcc.n	8008198 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d113      	bne.n	80081c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819c:	f043 0220 	orr.w	r2, r3, #32
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2220      	movs	r2, #32
 80081a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e007      	b.n	80081d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d1cb      	bne.n	8008166 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081e4:	e028      	b.n	8008238 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 f830 	bl	8008250 <I2C_IsErrorOccurred>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d001      	beq.n	80081fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e026      	b.n	8008248 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fa:	f7fd fdbd 	bl	8005d78 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d113      	bne.n	8008238 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008214:	f043 0220 	orr.w	r2, r3, #32
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	e007      	b.n	8008248 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b20      	cmp	r3, #32
 8008244:	d1cf      	bne.n	80081e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3710      	adds	r7, #16
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08a      	sub	sp, #40	; 0x28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	699b      	ldr	r3, [r3, #24]
 8008268:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f003 0310 	and.w	r3, r3, #16
 8008278:	2b00      	cmp	r3, #0
 800827a:	d075      	beq.n	8008368 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2210      	movs	r2, #16
 8008282:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008284:	e056      	b.n	8008334 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828c:	d052      	beq.n	8008334 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800828e:	f7fd fd73 	bl	8005d78 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <I2C_IsErrorOccurred+0x54>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d147      	bne.n	8008334 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699b      	ldr	r3, [r3, #24]
 80082be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c6:	d12e      	bne.n	8008326 <I2C_IsErrorOccurred+0xd6>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082ce:	d02a      	beq.n	8008326 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80082d0:	7cfb      	ldrb	r3, [r7, #19]
 80082d2:	2b20      	cmp	r3, #32
 80082d4:	d027      	beq.n	8008326 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80082e6:	f7fd fd47 	bl	8005d78 <HAL_GetTick>
 80082ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082ec:	e01b      	b.n	8008326 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80082ee:	f7fd fd43 	bl	8005d78 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	69fb      	ldr	r3, [r7, #28]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b19      	cmp	r3, #25
 80082fa:	d914      	bls.n	8008326 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008300:	f043 0220 	orr.w	r2, r3, #32
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b20      	cmp	r3, #32
 8008332:	d1dc      	bne.n	80082ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b20      	cmp	r3, #32
 8008340:	d003      	beq.n	800834a <I2C_IsErrorOccurred+0xfa>
 8008342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008346:	2b00      	cmp	r3, #0
 8008348:	d09d      	beq.n	8008286 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800834a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800834e:	2b00      	cmp	r3, #0
 8008350:	d103      	bne.n	800835a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2220      	movs	r2, #32
 8008358:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	f043 0304 	orr.w	r3, r3, #4
 8008360:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00b      	beq.n	8008392 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800838a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008392:	69bb      	ldr	r3, [r7, #24]
 8008394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00b      	beq.n	80083b4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	f043 0308 	orr.w	r3, r3, #8
 80083a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00b      	beq.n	80083d6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	f043 0302 	orr.w	r3, r3, #2
 80083c4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80083d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01c      	beq.n	8008418 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fe56 	bl	8008090 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6859      	ldr	r1, [r3, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <I2C_IsErrorOccurred+0x1d4>)
 80083f0:	400b      	ands	r3, r1
 80083f2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	431a      	orrs	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008418:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800841c:	4618      	mov	r0, r3
 800841e:	3728      	adds	r7, #40	; 0x28
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	fe00e800 	.word	0xfe00e800

08008428 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	607b      	str	r3, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	817b      	strh	r3, [r7, #10]
 8008436:	4613      	mov	r3, r2
 8008438:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800843a:	897b      	ldrh	r3, [r7, #10]
 800843c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008440:	7a7b      	ldrb	r3, [r7, #9]
 8008442:	041b      	lsls	r3, r3, #16
 8008444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008448:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	4313      	orrs	r3, r2
 8008452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008456:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685a      	ldr	r2, [r3, #4]
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	0d5b      	lsrs	r3, r3, #21
 8008462:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008466:	4b08      	ldr	r3, [pc, #32]	; (8008488 <I2C_TransferConfig+0x60>)
 8008468:	430b      	orrs	r3, r1
 800846a:	43db      	mvns	r3, r3
 800846c:	ea02 0103 	and.w	r1, r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	697a      	ldr	r2, [r7, #20]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800847a:	bf00      	nop
 800847c:	371c      	adds	r7, #28
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	03ff63ff 	.word	0x03ff63ff

0800848c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b20      	cmp	r3, #32
 80084a0:	d138      	bne.n	8008514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e032      	b.n	8008516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2224      	movs	r2, #36	; 0x24
 80084bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6819      	ldr	r1, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0201 	orr.w	r2, r2, #1
 80084fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2220      	movs	r2, #32
 8008504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008510:	2300      	movs	r3, #0
 8008512:	e000      	b.n	8008516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008514:	2302      	movs	r3, #2
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	370c      	adds	r7, #12
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr

08008522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008522:	b480      	push	{r7}
 8008524:	b085      	sub	sp, #20
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
 800852a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b20      	cmp	r3, #32
 8008536:	d139      	bne.n	80085ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800853e:	2b01      	cmp	r3, #1
 8008540:	d101      	bne.n	8008546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008542:	2302      	movs	r3, #2
 8008544:	e033      	b.n	80085ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2201      	movs	r2, #1
 800854a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2224      	movs	r2, #36	; 0x24
 8008552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0201 	bic.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	021b      	lsls	r3, r3, #8
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	4313      	orrs	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085ac:	2302      	movs	r3, #2
  }
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
	...

080085bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80085c0:	4b04      	ldr	r3, [pc, #16]	; (80085d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40007000 	.word	0x40007000

080085d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085e6:	d130      	bne.n	800864a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80085e8:	4b23      	ldr	r3, [pc, #140]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085f4:	d038      	beq.n	8008668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80085f6:	4b20      	ldr	r3, [pc, #128]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80085fe:	4a1e      	ldr	r2, [pc, #120]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008604:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008606:	4b1d      	ldr	r3, [pc, #116]	; (800867c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2232      	movs	r2, #50	; 0x32
 800860c:	fb02 f303 	mul.w	r3, r2, r3
 8008610:	4a1b      	ldr	r2, [pc, #108]	; (8008680 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8008612:	fba2 2303 	umull	r2, r3, r2, r3
 8008616:	0c9b      	lsrs	r3, r3, #18
 8008618:	3301      	adds	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800861c:	e002      	b.n	8008624 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3b01      	subs	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008624:	4b14      	ldr	r3, [pc, #80]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008630:	d102      	bne.n	8008638 <HAL_PWREx_ControlVoltageScaling+0x60>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1f2      	bne.n	800861e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008638:	4b0f      	ldr	r3, [pc, #60]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008644:	d110      	bne.n	8008668 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e00f      	b.n	800866a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008656:	d007      	beq.n	8008668 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008658:	4b07      	ldr	r3, [pc, #28]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008660:	4a05      	ldr	r2, [pc, #20]	; (8008678 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008666:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	40007000 	.word	0x40007000
 800867c:	20000000 	.word	0x20000000
 8008680:	431bde83 	.word	0x431bde83

08008684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b088      	sub	sp, #32
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e3ca      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008696:	4b97      	ldr	r3, [pc, #604]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f003 030c 	and.w	r3, r3, #12
 800869e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086a0:	4b94      	ldr	r3, [pc, #592]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 0310 	and.w	r3, r3, #16
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80e4 	beq.w	8008880 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d007      	beq.n	80086ce <HAL_RCC_OscConfig+0x4a>
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b0c      	cmp	r3, #12
 80086c2:	f040 808b 	bne.w	80087dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	f040 8087 	bne.w	80087dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80086ce:	4b89      	ldr	r3, [pc, #548]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d005      	beq.n	80086e6 <HAL_RCC_OscConfig+0x62>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	699b      	ldr	r3, [r3, #24]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e3a2      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a1a      	ldr	r2, [r3, #32]
 80086ea:	4b82      	ldr	r3, [pc, #520]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0308 	and.w	r3, r3, #8
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <HAL_RCC_OscConfig+0x7c>
 80086f6:	4b7f      	ldr	r3, [pc, #508]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086fe:	e005      	b.n	800870c <HAL_RCC_OscConfig+0x88>
 8008700:	4b7c      	ldr	r3, [pc, #496]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008706:	091b      	lsrs	r3, r3, #4
 8008708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800870c:	4293      	cmp	r3, r2
 800870e:	d223      	bcs.n	8008758 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6a1b      	ldr	r3, [r3, #32]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fd55 	bl	80091c4 <RCC_SetFlashLatencyFromMSIRange>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e383      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008724:	4b73      	ldr	r3, [pc, #460]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a72      	ldr	r2, [pc, #456]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 800872a:	f043 0308 	orr.w	r3, r3, #8
 800872e:	6013      	str	r3, [r2, #0]
 8008730:	4b70      	ldr	r3, [pc, #448]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a1b      	ldr	r3, [r3, #32]
 800873c:	496d      	ldr	r1, [pc, #436]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 800873e:	4313      	orrs	r3, r2
 8008740:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008742:	4b6c      	ldr	r3, [pc, #432]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	021b      	lsls	r3, r3, #8
 8008750:	4968      	ldr	r1, [pc, #416]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008752:	4313      	orrs	r3, r2
 8008754:	604b      	str	r3, [r1, #4]
 8008756:	e025      	b.n	80087a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008758:	4b66      	ldr	r3, [pc, #408]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a65      	ldr	r2, [pc, #404]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 800875e:	f043 0308 	orr.w	r3, r3, #8
 8008762:	6013      	str	r3, [r2, #0]
 8008764:	4b63      	ldr	r3, [pc, #396]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	4960      	ldr	r1, [pc, #384]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008772:	4313      	orrs	r3, r2
 8008774:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008776:	4b5f      	ldr	r3, [pc, #380]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	021b      	lsls	r3, r3, #8
 8008784:	495b      	ldr	r1, [pc, #364]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008786:	4313      	orrs	r3, r2
 8008788:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d109      	bne.n	80087a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fd15 	bl	80091c4 <RCC_SetFlashLatencyFromMSIRange>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e343      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087a4:	f000 fc4a 	bl	800903c <HAL_RCC_GetSysClockFreq>
 80087a8:	4602      	mov	r2, r0
 80087aa:	4b52      	ldr	r3, [pc, #328]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80087ac:	689b      	ldr	r3, [r3, #8]
 80087ae:	091b      	lsrs	r3, r3, #4
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	4950      	ldr	r1, [pc, #320]	; (80088f8 <HAL_RCC_OscConfig+0x274>)
 80087b6:	5ccb      	ldrb	r3, [r1, r3]
 80087b8:	f003 031f 	and.w	r3, r3, #31
 80087bc:	fa22 f303 	lsr.w	r3, r2, r3
 80087c0:	4a4e      	ldr	r2, [pc, #312]	; (80088fc <HAL_RCC_OscConfig+0x278>)
 80087c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80087c4:	4b4e      	ldr	r3, [pc, #312]	; (8008900 <HAL_RCC_OscConfig+0x27c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fd fa85 	bl	8005cd8 <HAL_InitTick>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d052      	beq.n	800887e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	e327      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699b      	ldr	r3, [r3, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d032      	beq.n	800884a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80087e4:	4b43      	ldr	r3, [pc, #268]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a42      	ldr	r2, [pc, #264]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80087ea:	f043 0301 	orr.w	r3, r3, #1
 80087ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80087f0:	f7fd fac2 	bl	8005d78 <HAL_GetTick>
 80087f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80087f6:	e008      	b.n	800880a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80087f8:	f7fd fabe 	bl	8005d78 <HAL_GetTick>
 80087fc:	4602      	mov	r2, r0
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	2b02      	cmp	r3, #2
 8008804:	d901      	bls.n	800880a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e310      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800880a:	4b3a      	ldr	r3, [pc, #232]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d0f0      	beq.n	80087f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008816:	4b37      	ldr	r3, [pc, #220]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a36      	ldr	r2, [pc, #216]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 800881c:	f043 0308 	orr.w	r3, r3, #8
 8008820:	6013      	str	r3, [r2, #0]
 8008822:	4b34      	ldr	r3, [pc, #208]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	4931      	ldr	r1, [pc, #196]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008830:	4313      	orrs	r3, r2
 8008832:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008834:	4b2f      	ldr	r3, [pc, #188]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	492c      	ldr	r1, [pc, #176]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008844:	4313      	orrs	r3, r2
 8008846:	604b      	str	r3, [r1, #4]
 8008848:	e01a      	b.n	8008880 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800884a:	4b2a      	ldr	r3, [pc, #168]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a29      	ldr	r2, [pc, #164]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008856:	f7fd fa8f 	bl	8005d78 <HAL_GetTick>
 800885a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800885c:	e008      	b.n	8008870 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800885e:	f7fd fa8b 	bl	8005d78 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e2dd      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008870:	4b20      	ldr	r3, [pc, #128]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f0      	bne.n	800885e <HAL_RCC_OscConfig+0x1da>
 800887c:	e000      	b.n	8008880 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800887e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d074      	beq.n	8008976 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	2b08      	cmp	r3, #8
 8008890:	d005      	beq.n	800889e <HAL_RCC_OscConfig+0x21a>
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	2b0c      	cmp	r3, #12
 8008896:	d10e      	bne.n	80088b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2b03      	cmp	r3, #3
 800889c:	d10b      	bne.n	80088b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800889e:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d064      	beq.n	8008974 <HAL_RCC_OscConfig+0x2f0>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d160      	bne.n	8008974 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e2ba      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088be:	d106      	bne.n	80088ce <HAL_RCC_OscConfig+0x24a>
 80088c0:	4b0c      	ldr	r3, [pc, #48]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a0b      	ldr	r2, [pc, #44]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80088c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	e026      	b.n	800891c <HAL_RCC_OscConfig+0x298>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088d6:	d115      	bne.n	8008904 <HAL_RCC_OscConfig+0x280>
 80088d8:	4b06      	ldr	r3, [pc, #24]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a05      	ldr	r2, [pc, #20]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80088de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	4b03      	ldr	r3, [pc, #12]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a02      	ldr	r2, [pc, #8]	; (80088f4 <HAL_RCC_OscConfig+0x270>)
 80088ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088ee:	6013      	str	r3, [r2, #0]
 80088f0:	e014      	b.n	800891c <HAL_RCC_OscConfig+0x298>
 80088f2:	bf00      	nop
 80088f4:	40021000 	.word	0x40021000
 80088f8:	080123e0 	.word	0x080123e0
 80088fc:	20000000 	.word	0x20000000
 8008900:	20000004 	.word	0x20000004
 8008904:	4ba0      	ldr	r3, [pc, #640]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a9f      	ldr	r2, [pc, #636]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 800890a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	4b9d      	ldr	r3, [pc, #628]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a9c      	ldr	r2, [pc, #624]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800891a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d013      	beq.n	800894c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008924:	f7fd fa28 	bl	8005d78 <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800892c:	f7fd fa24 	bl	8005d78 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b64      	cmp	r3, #100	; 0x64
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e276      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800893e:	4b92      	ldr	r3, [pc, #584]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0f0      	beq.n	800892c <HAL_RCC_OscConfig+0x2a8>
 800894a:	e014      	b.n	8008976 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800894c:	f7fd fa14 	bl	8005d78 <HAL_GetTick>
 8008950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008952:	e008      	b.n	8008966 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008954:	f7fd fa10 	bl	8005d78 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b64      	cmp	r3, #100	; 0x64
 8008960:	d901      	bls.n	8008966 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e262      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008966:	4b88      	ldr	r3, [pc, #544]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f0      	bne.n	8008954 <HAL_RCC_OscConfig+0x2d0>
 8008972:	e000      	b.n	8008976 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0302 	and.w	r3, r3, #2
 800897e:	2b00      	cmp	r3, #0
 8008980:	d060      	beq.n	8008a44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d005      	beq.n	8008994 <HAL_RCC_OscConfig+0x310>
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b0c      	cmp	r3, #12
 800898c:	d119      	bne.n	80089c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	2b02      	cmp	r3, #2
 8008992:	d116      	bne.n	80089c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008994:	4b7c      	ldr	r3, [pc, #496]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800899c:	2b00      	cmp	r3, #0
 800899e:	d005      	beq.n	80089ac <HAL_RCC_OscConfig+0x328>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e23f      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089ac:	4b76      	ldr	r3, [pc, #472]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	061b      	lsls	r3, r3, #24
 80089ba:	4973      	ldr	r1, [pc, #460]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 80089bc:	4313      	orrs	r3, r2
 80089be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089c0:	e040      	b.n	8008a44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d023      	beq.n	8008a12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089ca:	4b6f      	ldr	r3, [pc, #444]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a6e      	ldr	r2, [pc, #440]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 80089d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d6:	f7fd f9cf 	bl	8005d78 <HAL_GetTick>
 80089da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089dc:	e008      	b.n	80089f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089de:	f7fd f9cb 	bl	8005d78 <HAL_GetTick>
 80089e2:	4602      	mov	r2, r0
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d901      	bls.n	80089f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80089ec:	2303      	movs	r3, #3
 80089ee:	e21d      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089f0:	4b65      	ldr	r3, [pc, #404]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d0f0      	beq.n	80089de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089fc:	4b62      	ldr	r3, [pc, #392]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	061b      	lsls	r3, r3, #24
 8008a0a:	495f      	ldr	r1, [pc, #380]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	604b      	str	r3, [r1, #4]
 8008a10:	e018      	b.n	8008a44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a12:	4b5d      	ldr	r3, [pc, #372]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a5c      	ldr	r2, [pc, #368]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1e:	f7fd f9ab 	bl	8005d78 <HAL_GetTick>
 8008a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a24:	e008      	b.n	8008a38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a26:	f7fd f9a7 	bl	8005d78 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e1f9      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a38:	4b53      	ldr	r3, [pc, #332]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f0      	bne.n	8008a26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d03c      	beq.n	8008aca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01c      	beq.n	8008a92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a58:	4b4b      	ldr	r3, [pc, #300]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a5e:	4a4a      	ldr	r2, [pc, #296]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a60:	f043 0301 	orr.w	r3, r3, #1
 8008a64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a68:	f7fd f986 	bl	8005d78 <HAL_GetTick>
 8008a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a6e:	e008      	b.n	8008a82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a70:	f7fd f982 	bl	8005d78 <HAL_GetTick>
 8008a74:	4602      	mov	r2, r0
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d901      	bls.n	8008a82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e1d4      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008a82:	4b41      	ldr	r3, [pc, #260]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0ef      	beq.n	8008a70 <HAL_RCC_OscConfig+0x3ec>
 8008a90:	e01b      	b.n	8008aca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a92:	4b3d      	ldr	r3, [pc, #244]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a98:	4a3b      	ldr	r2, [pc, #236]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008a9a:	f023 0301 	bic.w	r3, r3, #1
 8008a9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa2:	f7fd f969 	bl	8005d78 <HAL_GetTick>
 8008aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aaa:	f7fd f965 	bl	8005d78 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e1b7      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008abc:	4b32      	ldr	r3, [pc, #200]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1ef      	bne.n	8008aaa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 0304 	and.w	r3, r3, #4
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80a6 	beq.w	8008c24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008adc:	4b2a      	ldr	r3, [pc, #168]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ae8:	4b27      	ldr	r3, [pc, #156]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aec:	4a26      	ldr	r2, [pc, #152]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008af2:	6593      	str	r3, [r2, #88]	; 0x58
 8008af4:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afc:	60bb      	str	r3, [r7, #8]
 8008afe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b00:	2301      	movs	r3, #1
 8008b02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b04:	4b21      	ldr	r3, [pc, #132]	; (8008b8c <HAL_RCC_OscConfig+0x508>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d118      	bne.n	8008b42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b10:	4b1e      	ldr	r3, [pc, #120]	; (8008b8c <HAL_RCC_OscConfig+0x508>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a1d      	ldr	r2, [pc, #116]	; (8008b8c <HAL_RCC_OscConfig+0x508>)
 8008b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b1c:	f7fd f92c 	bl	8005d78 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b24:	f7fd f928 	bl	8005d78 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e17a      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b36:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <HAL_RCC_OscConfig+0x508>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d0f0      	beq.n	8008b24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d108      	bne.n	8008b5c <HAL_RCC_OscConfig+0x4d8>
 8008b4a:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b50:	4a0d      	ldr	r2, [pc, #52]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b5a:	e029      	b.n	8008bb0 <HAL_RCC_OscConfig+0x52c>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	2b05      	cmp	r3, #5
 8008b62:	d115      	bne.n	8008b90 <HAL_RCC_OscConfig+0x50c>
 8008b64:	4b08      	ldr	r3, [pc, #32]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b6a:	4a07      	ldr	r2, [pc, #28]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008b6c:	f043 0304 	orr.w	r3, r3, #4
 8008b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b7a:	4a03      	ldr	r2, [pc, #12]	; (8008b88 <HAL_RCC_OscConfig+0x504>)
 8008b7c:	f043 0301 	orr.w	r3, r3, #1
 8008b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008b84:	e014      	b.n	8008bb0 <HAL_RCC_OscConfig+0x52c>
 8008b86:	bf00      	nop
 8008b88:	40021000 	.word	0x40021000
 8008b8c:	40007000 	.word	0x40007000
 8008b90:	4b9c      	ldr	r3, [pc, #624]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b96:	4a9b      	ldr	r2, [pc, #620]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008b98:	f023 0301 	bic.w	r3, r3, #1
 8008b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008ba0:	4b98      	ldr	r3, [pc, #608]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba6:	4a97      	ldr	r2, [pc, #604]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008ba8:	f023 0304 	bic.w	r3, r3, #4
 8008bac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d016      	beq.n	8008be6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb8:	f7fd f8de 	bl	8005d78 <HAL_GetTick>
 8008bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bbe:	e00a      	b.n	8008bd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bc0:	f7fd f8da 	bl	8005d78 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e12a      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bd6:	4b8b      	ldr	r3, [pc, #556]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0ed      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x53c>
 8008be4:	e015      	b.n	8008c12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008be6:	f7fd f8c7 	bl	8005d78 <HAL_GetTick>
 8008bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008bec:	e00a      	b.n	8008c04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bee:	f7fd f8c3 	bl	8005d78 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d901      	bls.n	8008c04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e113      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c04:	4b7f      	ldr	r3, [pc, #508]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1ed      	bne.n	8008bee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c12:	7ffb      	ldrb	r3, [r7, #31]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d105      	bne.n	8008c24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c18:	4b7a      	ldr	r3, [pc, #488]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c1c:	4a79      	ldr	r2, [pc, #484]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 80fe 	beq.w	8008e2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	f040 80d0 	bne.w	8008dd8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008c38:	4b72      	ldr	r3, [pc, #456]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	f003 0203 	and.w	r2, r3, #3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d130      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c56:	3b01      	subs	r3, #1
 8008c58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d127      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d11f      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008c78:	2a07      	cmp	r2, #7
 8008c7a:	bf14      	ite	ne
 8008c7c:	2201      	movne	r2, #1
 8008c7e:	2200      	moveq	r2, #0
 8008c80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d113      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	3b01      	subs	r3, #1
 8008c94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d109      	bne.n	8008cae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	085b      	lsrs	r3, r3, #1
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d06e      	beq.n	8008d8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	2b0c      	cmp	r3, #12
 8008cb2:	d069      	beq.n	8008d88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008cb4:	4b53      	ldr	r3, [pc, #332]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d105      	bne.n	8008ccc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008cc0:	4b50      	ldr	r3, [pc, #320]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e0ad      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008cd0:	4b4c      	ldr	r3, [pc, #304]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a4b      	ldr	r2, [pc, #300]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008cda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008cdc:	f7fd f84c 	bl	8005d78 <HAL_GetTick>
 8008ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ce4:	f7fd f848 	bl	8005d78 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e09a      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cf6:	4b43      	ldr	r3, [pc, #268]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f0      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d02:	4b40      	ldr	r3, [pc, #256]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d04:	68da      	ldr	r2, [r3, #12]
 8008d06:	4b40      	ldr	r3, [pc, #256]	; (8008e08 <HAL_RCC_OscConfig+0x784>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d12:	3a01      	subs	r2, #1
 8008d14:	0112      	lsls	r2, r2, #4
 8008d16:	4311      	orrs	r1, r2
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008d1c:	0212      	lsls	r2, r2, #8
 8008d1e:	4311      	orrs	r1, r2
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008d24:	0852      	lsrs	r2, r2, #1
 8008d26:	3a01      	subs	r2, #1
 8008d28:	0552      	lsls	r2, r2, #21
 8008d2a:	4311      	orrs	r1, r2
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008d30:	0852      	lsrs	r2, r2, #1
 8008d32:	3a01      	subs	r2, #1
 8008d34:	0652      	lsls	r2, r2, #25
 8008d36:	4311      	orrs	r1, r2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d3c:	0912      	lsrs	r2, r2, #4
 8008d3e:	0452      	lsls	r2, r2, #17
 8008d40:	430a      	orrs	r2, r1
 8008d42:	4930      	ldr	r1, [pc, #192]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008d48:	4b2e      	ldr	r3, [pc, #184]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a2d      	ldr	r2, [pc, #180]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d54:	4b2b      	ldr	r3, [pc, #172]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	4a2a      	ldr	r2, [pc, #168]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008d60:	f7fd f80a 	bl	8005d78 <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d66:	e008      	b.n	8008d7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d68:	f7fd f806 	bl	8005d78 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e058      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d7a:	4b22      	ldr	r3, [pc, #136]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0f0      	beq.n	8008d68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008d86:	e050      	b.n	8008e2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e04f      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d8c:	4b1d      	ldr	r3, [pc, #116]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d148      	bne.n	8008e2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008d98:	4b1a      	ldr	r3, [pc, #104]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a19      	ldr	r2, [pc, #100]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008da2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008da4:	4b17      	ldr	r3, [pc, #92]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008db0:	f7fc ffe2 	bl	8005d78 <HAL_GetTick>
 8008db4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008db6:	e008      	b.n	8008dca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008db8:	f7fc ffde 	bl	8005d78 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d901      	bls.n	8008dca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e030      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dca:	4b0e      	ldr	r3, [pc, #56]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0f0      	beq.n	8008db8 <HAL_RCC_OscConfig+0x734>
 8008dd6:	e028      	b.n	8008e2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	2b0c      	cmp	r3, #12
 8008ddc:	d023      	beq.n	8008e26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a08      	ldr	r2, [pc, #32]	; (8008e04 <HAL_RCC_OscConfig+0x780>)
 8008de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dea:	f7fc ffc5 	bl	8005d78 <HAL_GetTick>
 8008dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008df0:	e00c      	b.n	8008e0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008df2:	f7fc ffc1 	bl	8005d78 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d905      	bls.n	8008e0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e013      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
 8008e04:	40021000 	.word	0x40021000
 8008e08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <HAL_RCC_OscConfig+0x7b0>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1ec      	bne.n	8008df2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008e18:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <HAL_RCC_OscConfig+0x7b0>)
 8008e1a:	68da      	ldr	r2, [r3, #12]
 8008e1c:	4905      	ldr	r1, [pc, #20]	; (8008e34 <HAL_RCC_OscConfig+0x7b0>)
 8008e1e:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <HAL_RCC_OscConfig+0x7b4>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	60cb      	str	r3, [r1, #12]
 8008e24:	e001      	b.n	8008e2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e000      	b.n	8008e2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3720      	adds	r7, #32
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	40021000 	.word	0x40021000
 8008e38:	feeefffc 	.word	0xfeeefffc

08008e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e0e7      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008e50:	4b75      	ldr	r3, [pc, #468]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0307 	and.w	r3, r3, #7
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d910      	bls.n	8008e80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e5e:	4b72      	ldr	r3, [pc, #456]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f023 0207 	bic.w	r2, r3, #7
 8008e66:	4970      	ldr	r1, [pc, #448]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e6e:	4b6e      	ldr	r3, [pc, #440]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d001      	beq.n	8008e80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e0cf      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d010      	beq.n	8008eae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	4b66      	ldr	r3, [pc, #408]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d908      	bls.n	8008eae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e9c:	4b63      	ldr	r3, [pc, #396]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	4960      	ldr	r1, [pc, #384]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d04c      	beq.n	8008f54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	d107      	bne.n	8008ed2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ec2:	4b5a      	ldr	r3, [pc, #360]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d121      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e0a6      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d107      	bne.n	8008eea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008eda:	4b54      	ldr	r3, [pc, #336]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d115      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e09a      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d107      	bne.n	8008f02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008ef2:	4b4e      	ldr	r3, [pc, #312]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e08e      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f02:	4b4a      	ldr	r3, [pc, #296]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e086      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f12:	4b46      	ldr	r3, [pc, #280]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f023 0203 	bic.w	r2, r3, #3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	4943      	ldr	r1, [pc, #268]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f24:	f7fc ff28 	bl	8005d78 <HAL_GetTick>
 8008f28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f2a:	e00a      	b.n	8008f42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f2c:	f7fc ff24 	bl	8005d78 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e06e      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f42:	4b3a      	ldr	r3, [pc, #232]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f003 020c 	and.w	r2, r3, #12
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d1eb      	bne.n	8008f2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d010      	beq.n	8008f82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	4b31      	ldr	r3, [pc, #196]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d208      	bcs.n	8008f82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f70:	4b2e      	ldr	r3, [pc, #184]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	492b      	ldr	r1, [pc, #172]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f82:	4b29      	ldr	r3, [pc, #164]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d210      	bcs.n	8008fb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f90:	4b25      	ldr	r3, [pc, #148]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f023 0207 	bic.w	r2, r3, #7
 8008f98:	4923      	ldr	r1, [pc, #140]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fa0:	4b21      	ldr	r3, [pc, #132]	; (8009028 <HAL_RCC_ClockConfig+0x1ec>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0307 	and.w	r3, r3, #7
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d001      	beq.n	8008fb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e036      	b.n	8009020 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 0304 	and.w	r3, r3, #4
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d008      	beq.n	8008fd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fbe:	4b1b      	ldr	r3, [pc, #108]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008fc0:	689b      	ldr	r3, [r3, #8]
 8008fc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	4918      	ldr	r1, [pc, #96]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0308 	and.w	r3, r3, #8
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d009      	beq.n	8008ff0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fdc:	4b13      	ldr	r3, [pc, #76]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	4910      	ldr	r1, [pc, #64]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008ff0:	f000 f824 	bl	800903c <HAL_RCC_GetSysClockFreq>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	4b0d      	ldr	r3, [pc, #52]	; (800902c <HAL_RCC_ClockConfig+0x1f0>)
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	091b      	lsrs	r3, r3, #4
 8008ffc:	f003 030f 	and.w	r3, r3, #15
 8009000:	490b      	ldr	r1, [pc, #44]	; (8009030 <HAL_RCC_ClockConfig+0x1f4>)
 8009002:	5ccb      	ldrb	r3, [r1, r3]
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	fa22 f303 	lsr.w	r3, r2, r3
 800900c:	4a09      	ldr	r2, [pc, #36]	; (8009034 <HAL_RCC_ClockConfig+0x1f8>)
 800900e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009010:	4b09      	ldr	r3, [pc, #36]	; (8009038 <HAL_RCC_ClockConfig+0x1fc>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4618      	mov	r0, r3
 8009016:	f7fc fe5f 	bl	8005cd8 <HAL_InitTick>
 800901a:	4603      	mov	r3, r0
 800901c:	72fb      	strb	r3, [r7, #11]

  return status;
 800901e:	7afb      	ldrb	r3, [r7, #11]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}
 8009028:	40022000 	.word	0x40022000
 800902c:	40021000 	.word	0x40021000
 8009030:	080123e0 	.word	0x080123e0
 8009034:	20000000 	.word	0x20000000
 8009038:	20000004 	.word	0x20000004

0800903c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800903c:	b480      	push	{r7}
 800903e:	b089      	sub	sp, #36	; 0x24
 8009040:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8009042:	2300      	movs	r3, #0
 8009044:	61fb      	str	r3, [r7, #28]
 8009046:	2300      	movs	r3, #0
 8009048:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800904a:	4b3e      	ldr	r3, [pc, #248]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	f003 030c 	and.w	r3, r3, #12
 8009052:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009054:	4b3b      	ldr	r3, [pc, #236]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0x34>
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b0c      	cmp	r3, #12
 8009068:	d121      	bne.n	80090ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d11e      	bne.n	80090ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009070:	4b34      	ldr	r3, [pc, #208]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b00      	cmp	r3, #0
 800907a:	d107      	bne.n	800908c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800907c:	4b31      	ldr	r3, [pc, #196]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 800907e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009082:	0a1b      	lsrs	r3, r3, #8
 8009084:	f003 030f 	and.w	r3, r3, #15
 8009088:	61fb      	str	r3, [r7, #28]
 800908a:	e005      	b.n	8009098 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800908c:	4b2d      	ldr	r3, [pc, #180]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	091b      	lsrs	r3, r3, #4
 8009092:	f003 030f 	and.w	r3, r3, #15
 8009096:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009098:	4a2b      	ldr	r2, [pc, #172]	; (8009148 <HAL_RCC_GetSysClockFreq+0x10c>)
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d10d      	bne.n	80090c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80090ac:	e00a      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	d102      	bne.n	80090ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80090b4:	4b25      	ldr	r3, [pc, #148]	; (800914c <HAL_RCC_GetSysClockFreq+0x110>)
 80090b6:	61bb      	str	r3, [r7, #24]
 80090b8:	e004      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d101      	bne.n	80090c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80090c0:	4b23      	ldr	r3, [pc, #140]	; (8009150 <HAL_RCC_GetSysClockFreq+0x114>)
 80090c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	2b0c      	cmp	r3, #12
 80090c8:	d134      	bne.n	8009134 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80090ca:	4b1e      	ldr	r3, [pc, #120]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 0303 	and.w	r3, r3, #3
 80090d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d003      	beq.n	80090e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	2b03      	cmp	r3, #3
 80090de:	d003      	beq.n	80090e8 <HAL_RCC_GetSysClockFreq+0xac>
 80090e0:	e005      	b.n	80090ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80090e2:	4b1a      	ldr	r3, [pc, #104]	; (800914c <HAL_RCC_GetSysClockFreq+0x110>)
 80090e4:	617b      	str	r3, [r7, #20]
      break;
 80090e6:	e005      	b.n	80090f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80090e8:	4b19      	ldr	r3, [pc, #100]	; (8009150 <HAL_RCC_GetSysClockFreq+0x114>)
 80090ea:	617b      	str	r3, [r7, #20]
      break;
 80090ec:	e002      	b.n	80090f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	617b      	str	r3, [r7, #20]
      break;
 80090f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80090f4:	4b13      	ldr	r3, [pc, #76]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	091b      	lsrs	r3, r3, #4
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	3301      	adds	r3, #1
 8009100:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8009102:	4b10      	ldr	r3, [pc, #64]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	0a1b      	lsrs	r3, r3, #8
 8009108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	fb03 f202 	mul.w	r2, r3, r2
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	fbb2 f3f3 	udiv	r3, r2, r3
 8009118:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800911a:	4b0a      	ldr	r3, [pc, #40]	; (8009144 <HAL_RCC_GetSysClockFreq+0x108>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	0e5b      	lsrs	r3, r3, #25
 8009120:	f003 0303 	and.w	r3, r3, #3
 8009124:	3301      	adds	r3, #1
 8009126:	005b      	lsls	r3, r3, #1
 8009128:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800912a:	697a      	ldr	r2, [r7, #20]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009132:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8009134:	69bb      	ldr	r3, [r7, #24]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3724      	adds	r7, #36	; 0x24
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	40021000 	.word	0x40021000
 8009148:	080123f8 	.word	0x080123f8
 800914c:	00f42400 	.word	0x00f42400
 8009150:	007a1200 	.word	0x007a1200

08009154 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009158:	4b03      	ldr	r3, [pc, #12]	; (8009168 <HAL_RCC_GetHCLKFreq+0x14>)
 800915a:	681b      	ldr	r3, [r3, #0]
}
 800915c:	4618      	mov	r0, r3
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20000000 	.word	0x20000000

0800916c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009170:	f7ff fff0 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 8009174:	4602      	mov	r2, r0
 8009176:	4b06      	ldr	r3, [pc, #24]	; (8009190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	4904      	ldr	r1, [pc, #16]	; (8009194 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009182:	5ccb      	ldrb	r3, [r1, r3]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800918c:	4618      	mov	r0, r3
 800918e:	bd80      	pop	{r7, pc}
 8009190:	40021000 	.word	0x40021000
 8009194:	080123f0 	.word	0x080123f0

08009198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800919c:	f7ff ffda 	bl	8009154 <HAL_RCC_GetHCLKFreq>
 80091a0:	4602      	mov	r2, r0
 80091a2:	4b06      	ldr	r3, [pc, #24]	; (80091bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	0adb      	lsrs	r3, r3, #11
 80091a8:	f003 0307 	and.w	r3, r3, #7
 80091ac:	4904      	ldr	r1, [pc, #16]	; (80091c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80091ae:	5ccb      	ldrb	r3, [r1, r3]
 80091b0:	f003 031f 	and.w	r3, r3, #31
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	40021000 	.word	0x40021000
 80091c0:	080123f0 	.word	0x080123f0

080091c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80091cc:	2300      	movs	r3, #0
 80091ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80091d0:	4b2a      	ldr	r3, [pc, #168]	; (800927c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80091dc:	f7ff f9ee 	bl	80085bc <HAL_PWREx_GetVoltageRange>
 80091e0:	6178      	str	r0, [r7, #20]
 80091e2:	e014      	b.n	800920e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80091e4:	4b25      	ldr	r3, [pc, #148]	; (800927c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e8:	4a24      	ldr	r2, [pc, #144]	; (800927c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091ee:	6593      	str	r3, [r2, #88]	; 0x58
 80091f0:	4b22      	ldr	r3, [pc, #136]	; (800927c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80091f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80091fc:	f7ff f9de 	bl	80085bc <HAL_PWREx_GetVoltageRange>
 8009200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009202:	4b1e      	ldr	r3, [pc, #120]	; (800927c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009206:	4a1d      	ldr	r2, [pc, #116]	; (800927c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800920c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009214:	d10b      	bne.n	800922e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b80      	cmp	r3, #128	; 0x80
 800921a:	d919      	bls.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2ba0      	cmp	r3, #160	; 0xa0
 8009220:	d902      	bls.n	8009228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009222:	2302      	movs	r3, #2
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	e013      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009228:	2301      	movs	r3, #1
 800922a:	613b      	str	r3, [r7, #16]
 800922c:	e010      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b80      	cmp	r3, #128	; 0x80
 8009232:	d902      	bls.n	800923a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009234:	2303      	movs	r3, #3
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	e00a      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b80      	cmp	r3, #128	; 0x80
 800923e:	d102      	bne.n	8009246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009240:	2302      	movs	r3, #2
 8009242:	613b      	str	r3, [r7, #16]
 8009244:	e004      	b.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2b70      	cmp	r3, #112	; 0x70
 800924a:	d101      	bne.n	8009250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800924c:	2301      	movs	r3, #1
 800924e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009250:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f023 0207 	bic.w	r2, r3, #7
 8009258:	4909      	ldr	r1, [pc, #36]	; (8009280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	4313      	orrs	r3, r2
 800925e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8009260:	4b07      	ldr	r3, [pc, #28]	; (8009280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	429a      	cmp	r2, r3
 800926c:	d001      	beq.n	8009272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e000      	b.n	8009274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	40021000 	.word	0x40021000
 8009280:	40022000 	.word	0x40022000

08009284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b086      	sub	sp, #24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800928c:	2300      	movs	r3, #0
 800928e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009290:	2300      	movs	r3, #0
 8009292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800929c:	2b00      	cmp	r3, #0
 800929e:	d041      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80092a8:	d02a      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80092aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80092ae:	d824      	bhi.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092b4:	d008      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80092b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80092ba:	d81e      	bhi.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00a      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80092c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092c4:	d010      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80092c6:	e018      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80092c8:	4b86      	ldr	r3, [pc, #536]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	4a85      	ldr	r2, [pc, #532]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80092ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092d4:	e015      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	3304      	adds	r3, #4
 80092da:	2100      	movs	r1, #0
 80092dc:	4618      	mov	r0, r3
 80092de:	f000 fabb 	bl	8009858 <RCCEx_PLLSAI1_Config>
 80092e2:	4603      	mov	r3, r0
 80092e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092e6:	e00c      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	3320      	adds	r3, #32
 80092ec:	2100      	movs	r1, #0
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 fba6 	bl	8009a40 <RCCEx_PLLSAI2_Config>
 80092f4:	4603      	mov	r3, r0
 80092f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80092f8:	e003      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	74fb      	strb	r3, [r7, #19]
      break;
 80092fe:	e000      	b.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009302:	7cfb      	ldrb	r3, [r7, #19]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d10b      	bne.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009308:	4b76      	ldr	r3, [pc, #472]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800930a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009316:	4973      	ldr	r1, [pc, #460]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009318:	4313      	orrs	r3, r2
 800931a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800931e:	e001      	b.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009320:	7cfb      	ldrb	r3, [r7, #19]
 8009322:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d041      	beq.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009334:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009338:	d02a      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800933a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800933e:	d824      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8009340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009344:	d008      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800934a:	d81e      	bhi.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009354:	d010      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009356:	e018      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009358:	4b62      	ldr	r3, [pc, #392]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4a61      	ldr	r2, [pc, #388]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800935e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009362:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009364:	e015      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	3304      	adds	r3, #4
 800936a:	2100      	movs	r1, #0
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fa73 	bl	8009858 <RCCEx_PLLSAI1_Config>
 8009372:	4603      	mov	r3, r0
 8009374:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009376:	e00c      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3320      	adds	r3, #32
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fb5e 	bl	8009a40 <RCCEx_PLLSAI2_Config>
 8009384:	4603      	mov	r3, r0
 8009386:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8009388:	e003      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	74fb      	strb	r3, [r7, #19]
      break;
 800938e:	e000      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8009390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009392:	7cfb      	ldrb	r3, [r7, #19]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10b      	bne.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009398:	4b52      	ldr	r3, [pc, #328]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800939a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800939e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093a6:	494f      	ldr	r1, [pc, #316]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093a8:	4313      	orrs	r3, r2
 80093aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80093ae:	e001      	b.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093b0:	7cfb      	ldrb	r3, [r7, #19]
 80093b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 80a0 	beq.w	8009502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093c2:	2300      	movs	r3, #0
 80093c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80093c6:	4b47      	ldr	r3, [pc, #284]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d101      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80093d6:	2300      	movs	r3, #0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d00d      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093dc:	4b41      	ldr	r3, [pc, #260]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093e0:	4a40      	ldr	r2, [pc, #256]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093e6:	6593      	str	r3, [r2, #88]	; 0x58
 80093e8:	4b3e      	ldr	r3, [pc, #248]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80093ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f0:	60bb      	str	r3, [r7, #8]
 80093f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093f4:	2301      	movs	r3, #1
 80093f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80093f8:	4b3b      	ldr	r3, [pc, #236]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a3a      	ldr	r2, [pc, #232]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80093fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009402:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009404:	f7fc fcb8 	bl	8005d78 <HAL_GetTick>
 8009408:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800940a:	e009      	b.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800940c:	f7fc fcb4 	bl	8005d78 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d902      	bls.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	74fb      	strb	r3, [r7, #19]
        break;
 800941e:	e005      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009420:	4b31      	ldr	r3, [pc, #196]	; (80094e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0ef      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800942c:	7cfb      	ldrb	r3, [r7, #19]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d15c      	bne.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009432:	4b2c      	ldr	r3, [pc, #176]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800943c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d01f      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	429a      	cmp	r2, r3
 800944e:	d019      	beq.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009450:	4b24      	ldr	r3, [pc, #144]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800945a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800945c:	4b21      	ldr	r3, [pc, #132]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800945e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009462:	4a20      	ldr	r2, [pc, #128]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800946c:	4b1d      	ldr	r3, [pc, #116]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800946e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009472:	4a1c      	ldr	r2, [pc, #112]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8009474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800947c:	4a19      	ldr	r2, [pc, #100]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f003 0301 	and.w	r3, r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	d016      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800948e:	f7fc fc73 	bl	8005d78 <HAL_GetTick>
 8009492:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009494:	e00b      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009496:	f7fc fc6f 	bl	8005d78 <HAL_GetTick>
 800949a:	4602      	mov	r2, r0
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d902      	bls.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	74fb      	strb	r3, [r7, #19]
            break;
 80094ac:	e006      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094ae:	4b0d      	ldr	r3, [pc, #52]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b4:	f003 0302 	and.w	r3, r3, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0ec      	beq.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80094bc:	7cfb      	ldrb	r3, [r7, #19]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10c      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094c2:	4b08      	ldr	r3, [pc, #32]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094d2:	4904      	ldr	r1, [pc, #16]	; (80094e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80094da:	e009      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094dc:	7cfb      	ldrb	r3, [r7, #19]
 80094de:	74bb      	strb	r3, [r7, #18]
 80094e0:	e006      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80094e2:	bf00      	nop
 80094e4:	40021000 	.word	0x40021000
 80094e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094ec:	7cfb      	ldrb	r3, [r7, #19]
 80094ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094f0:	7c7b      	ldrb	r3, [r7, #17]
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d105      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094f6:	4b9e      	ldr	r3, [pc, #632]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fa:	4a9d      	ldr	r2, [pc, #628]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80094fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00a      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800950e:	4b98      	ldr	r3, [pc, #608]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009514:	f023 0203 	bic.w	r2, r3, #3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800951c:	4994      	ldr	r1, [pc, #592]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800951e:	4313      	orrs	r3, r2
 8009520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00a      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009530:	4b8f      	ldr	r3, [pc, #572]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009536:	f023 020c 	bic.w	r2, r3, #12
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	498c      	ldr	r1, [pc, #560]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009540:	4313      	orrs	r3, r2
 8009542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009552:	4b87      	ldr	r3, [pc, #540]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009560:	4983      	ldr	r1, [pc, #524]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009562:	4313      	orrs	r3, r2
 8009564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0308 	and.w	r3, r3, #8
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00a      	beq.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009574:	4b7e      	ldr	r3, [pc, #504]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009582:	497b      	ldr	r1, [pc, #492]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009584:	4313      	orrs	r3, r2
 8009586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0310 	and.w	r3, r3, #16
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009596:	4b76      	ldr	r3, [pc, #472]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800959c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095a4:	4972      	ldr	r1, [pc, #456]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0320 	and.w	r3, r3, #32
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d00a      	beq.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095b8:	4b6d      	ldr	r3, [pc, #436]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095c6:	496a      	ldr	r1, [pc, #424]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095da:	4b65      	ldr	r3, [pc, #404]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e8:	4961      	ldr	r1, [pc, #388]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095fc:	4b5c      	ldr	r3, [pc, #368]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80095fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800960a:	4959      	ldr	r1, [pc, #356]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800960c:	4313      	orrs	r3, r2
 800960e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d00a      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800961e:	4b54      	ldr	r3, [pc, #336]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800962c:	4950      	ldr	r1, [pc, #320]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800962e:	4313      	orrs	r3, r2
 8009630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00a      	beq.n	8009656 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009640:	4b4b      	ldr	r3, [pc, #300]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964e:	4948      	ldr	r1, [pc, #288]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009650:	4313      	orrs	r3, r2
 8009652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009662:	4b43      	ldr	r3, [pc, #268]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009670:	493f      	ldr	r1, [pc, #252]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009672:	4313      	orrs	r3, r2
 8009674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d028      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009684:	4b3a      	ldr	r3, [pc, #232]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009692:	4937      	ldr	r1, [pc, #220]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800969e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096a2:	d106      	bne.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096a4:	4b32      	ldr	r3, [pc, #200]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a31      	ldr	r2, [pc, #196]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80096ae:	60d3      	str	r3, [r2, #12]
 80096b0:	e011      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096ba:	d10c      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	3304      	adds	r3, #4
 80096c0:	2101      	movs	r1, #1
 80096c2:	4618      	mov	r0, r3
 80096c4:	f000 f8c8 	bl	8009858 <RCCEx_PLLSAI1_Config>
 80096c8:	4603      	mov	r3, r0
 80096ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80096cc:	7cfb      	ldrb	r3, [r7, #19]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80096d2:	7cfb      	ldrb	r3, [r7, #19]
 80096d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d028      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80096e2:	4b23      	ldr	r3, [pc, #140]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f0:	491f      	ldr	r1, [pc, #124]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009700:	d106      	bne.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009702:	4b1b      	ldr	r3, [pc, #108]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	4a1a      	ldr	r2, [pc, #104]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800970c:	60d3      	str	r3, [r2, #12]
 800970e:	e011      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009718:	d10c      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	3304      	adds	r3, #4
 800971e:	2101      	movs	r1, #1
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f899 	bl	8009858 <RCCEx_PLLSAI1_Config>
 8009726:	4603      	mov	r3, r0
 8009728:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800972a:	7cfb      	ldrb	r3, [r7, #19]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8009730:	7cfb      	ldrb	r3, [r7, #19]
 8009732:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d02b      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009740:	4b0b      	ldr	r3, [pc, #44]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009746:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800974e:	4908      	ldr	r1, [pc, #32]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009750:	4313      	orrs	r3, r2
 8009752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800975a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800975e:	d109      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009760:	4b03      	ldr	r3, [pc, #12]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	4a02      	ldr	r2, [pc, #8]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8009766:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800976a:	60d3      	str	r3, [r2, #12]
 800976c:	e014      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800976e:	bf00      	nop
 8009770:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800977c:	d10c      	bne.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3304      	adds	r3, #4
 8009782:	2101      	movs	r1, #1
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f867 	bl	8009858 <RCCEx_PLLSAI1_Config>
 800978a:	4603      	mov	r3, r0
 800978c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800978e:	7cfb      	ldrb	r3, [r7, #19]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8009794:	7cfb      	ldrb	r3, [r7, #19]
 8009796:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d02f      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097a4:	4b2b      	ldr	r3, [pc, #172]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80097a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097b2:	4928      	ldr	r1, [pc, #160]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80097c2:	d10d      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	3304      	adds	r3, #4
 80097c8:	2102      	movs	r1, #2
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f844 	bl	8009858 <RCCEx_PLLSAI1_Config>
 80097d0:	4603      	mov	r3, r0
 80097d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80097d4:	7cfb      	ldrb	r3, [r7, #19]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80097da:	7cfb      	ldrb	r3, [r7, #19]
 80097dc:	74bb      	strb	r3, [r7, #18]
 80097de:	e011      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097e8:	d10c      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	3320      	adds	r3, #32
 80097ee:	2102      	movs	r1, #2
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 f925 	bl	8009a40 <RCCEx_PLLSAI2_Config>
 80097f6:	4603      	mov	r3, r0
 80097f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80097fa:	7cfb      	ldrb	r3, [r7, #19]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8009800:	7cfb      	ldrb	r3, [r7, #19]
 8009802:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00a      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009810:	4b10      	ldr	r3, [pc, #64]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009816:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800981e:	490d      	ldr	r1, [pc, #52]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009820:	4313      	orrs	r3, r2
 8009822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00b      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009832:	4b08      	ldr	r3, [pc, #32]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009838:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009842:	4904      	ldr	r1, [pc, #16]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8009844:	4313      	orrs	r3, r2
 8009846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800984a:	7cbb      	ldrb	r3, [r7, #18]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3718      	adds	r7, #24
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	40021000 	.word	0x40021000

08009858 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009866:	4b75      	ldr	r3, [pc, #468]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f003 0303 	and.w	r3, r3, #3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d018      	beq.n	80098a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009872:	4b72      	ldr	r3, [pc, #456]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0203 	and.w	r2, r3, #3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d10d      	bne.n	800989e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
       ||
 8009886:	2b00      	cmp	r3, #0
 8009888:	d009      	beq.n	800989e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800988a:	4b6c      	ldr	r3, [pc, #432]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	091b      	lsrs	r3, r3, #4
 8009890:	f003 0307 	and.w	r3, r3, #7
 8009894:	1c5a      	adds	r2, r3, #1
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	685b      	ldr	r3, [r3, #4]
       ||
 800989a:	429a      	cmp	r2, r3
 800989c:	d047      	beq.n	800992e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	73fb      	strb	r3, [r7, #15]
 80098a2:	e044      	b.n	800992e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b03      	cmp	r3, #3
 80098aa:	d018      	beq.n	80098de <RCCEx_PLLSAI1_Config+0x86>
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d825      	bhi.n	80098fc <RCCEx_PLLSAI1_Config+0xa4>
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d002      	beq.n	80098ba <RCCEx_PLLSAI1_Config+0x62>
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d009      	beq.n	80098cc <RCCEx_PLLSAI1_Config+0x74>
 80098b8:	e020      	b.n	80098fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80098ba:	4b60      	ldr	r3, [pc, #384]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0302 	and.w	r3, r3, #2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d11d      	bne.n	8009902 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098ca:	e01a      	b.n	8009902 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80098cc:	4b5b      	ldr	r3, [pc, #364]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d116      	bne.n	8009906 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098dc:	e013      	b.n	8009906 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80098de:	4b57      	ldr	r3, [pc, #348]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d10f      	bne.n	800990a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80098ea:	4b54      	ldr	r3, [pc, #336]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098fa:	e006      	b.n	800990a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009900:	e004      	b.n	800990c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009902:	bf00      	nop
 8009904:	e002      	b.n	800990c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009906:	bf00      	nop
 8009908:	e000      	b.n	800990c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800990a:	bf00      	nop
    }

    if(status == HAL_OK)
 800990c:	7bfb      	ldrb	r3, [r7, #15]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10d      	bne.n	800992e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009912:	4b4a      	ldr	r3, [pc, #296]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6819      	ldr	r1, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	3b01      	subs	r3, #1
 8009924:	011b      	lsls	r3, r3, #4
 8009926:	430b      	orrs	r3, r1
 8009928:	4944      	ldr	r1, [pc, #272]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800992a:	4313      	orrs	r3, r2
 800992c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d17d      	bne.n	8009a30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009934:	4b41      	ldr	r3, [pc, #260]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a40      	ldr	r2, [pc, #256]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800993a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800993e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009940:	f7fc fa1a 	bl	8005d78 <HAL_GetTick>
 8009944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009946:	e009      	b.n	800995c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009948:	f7fc fa16 	bl	8005d78 <HAL_GetTick>
 800994c:	4602      	mov	r2, r0
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	2b02      	cmp	r3, #2
 8009954:	d902      	bls.n	800995c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	73fb      	strb	r3, [r7, #15]
        break;
 800995a:	e005      	b.n	8009968 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800995c:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1ef      	bne.n	8009948 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d160      	bne.n	8009a30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d111      	bne.n	8009998 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009974:	4b31      	ldr	r3, [pc, #196]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800997c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	6892      	ldr	r2, [r2, #8]
 8009984:	0211      	lsls	r1, r2, #8
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	68d2      	ldr	r2, [r2, #12]
 800998a:	0912      	lsrs	r2, r2, #4
 800998c:	0452      	lsls	r2, r2, #17
 800998e:	430a      	orrs	r2, r1
 8009990:	492a      	ldr	r1, [pc, #168]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009992:	4313      	orrs	r3, r2
 8009994:	610b      	str	r3, [r1, #16]
 8009996:	e027      	b.n	80099e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d112      	bne.n	80099c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800999e:	4b27      	ldr	r3, [pc, #156]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80099a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	6892      	ldr	r2, [r2, #8]
 80099ae:	0211      	lsls	r1, r2, #8
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6912      	ldr	r2, [r2, #16]
 80099b4:	0852      	lsrs	r2, r2, #1
 80099b6:	3a01      	subs	r2, #1
 80099b8:	0552      	lsls	r2, r2, #21
 80099ba:	430a      	orrs	r2, r1
 80099bc:	491f      	ldr	r1, [pc, #124]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	610b      	str	r3, [r1, #16]
 80099c2:	e011      	b.n	80099e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80099c4:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80099cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80099d0:	687a      	ldr	r2, [r7, #4]
 80099d2:	6892      	ldr	r2, [r2, #8]
 80099d4:	0211      	lsls	r1, r2, #8
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6952      	ldr	r2, [r2, #20]
 80099da:	0852      	lsrs	r2, r2, #1
 80099dc:	3a01      	subs	r2, #1
 80099de:	0652      	lsls	r2, r2, #25
 80099e0:	430a      	orrs	r2, r1
 80099e2:	4916      	ldr	r1, [pc, #88]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80099e8:	4b14      	ldr	r3, [pc, #80]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a13      	ldr	r2, [pc, #76]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 80099ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80099f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099f4:	f7fc f9c0 	bl	8005d78 <HAL_GetTick>
 80099f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80099fa:	e009      	b.n	8009a10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099fc:	f7fc f9bc 	bl	8005d78 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	2b02      	cmp	r3, #2
 8009a08:	d902      	bls.n	8009a10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	73fb      	strb	r3, [r7, #15]
          break;
 8009a0e:	e005      	b.n	8009a1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009a10:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0ef      	beq.n	80099fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d106      	bne.n	8009a30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	4904      	ldr	r1, [pc, #16]	; (8009a3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	40021000 	.word	0x40021000

08009a40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009a4e:	4b6a      	ldr	r3, [pc, #424]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d018      	beq.n	8009a8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009a5a:	4b67      	ldr	r3, [pc, #412]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	f003 0203 	and.w	r2, r3, #3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d10d      	bne.n	8009a86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d009      	beq.n	8009a86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8009a72:	4b61      	ldr	r3, [pc, #388]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	091b      	lsrs	r3, r3, #4
 8009a78:	f003 0307 	and.w	r3, r3, #7
 8009a7c:	1c5a      	adds	r2, r3, #1
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
       ||
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d047      	beq.n	8009b16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	73fb      	strb	r3, [r7, #15]
 8009a8a:	e044      	b.n	8009b16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d018      	beq.n	8009ac6 <RCCEx_PLLSAI2_Config+0x86>
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d825      	bhi.n	8009ae4 <RCCEx_PLLSAI2_Config+0xa4>
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d002      	beq.n	8009aa2 <RCCEx_PLLSAI2_Config+0x62>
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d009      	beq.n	8009ab4 <RCCEx_PLLSAI2_Config+0x74>
 8009aa0:	e020      	b.n	8009ae4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009aa2:	4b55      	ldr	r3, [pc, #340]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d11d      	bne.n	8009aea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ab2:	e01a      	b.n	8009aea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009ab4:	4b50      	ldr	r3, [pc, #320]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d116      	bne.n	8009aee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009ac4:	e013      	b.n	8009aee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009ac6:	4b4c      	ldr	r3, [pc, #304]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10f      	bne.n	8009af2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009ad2:	4b49      	ldr	r3, [pc, #292]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d109      	bne.n	8009af2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009ae2:	e006      	b.n	8009af2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ae8:	e004      	b.n	8009af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009aea:	bf00      	nop
 8009aec:	e002      	b.n	8009af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009aee:	bf00      	nop
 8009af0:	e000      	b.n	8009af4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8009af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10d      	bne.n	8009b16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009afa:	4b3f      	ldr	r3, [pc, #252]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6819      	ldr	r1, [r3, #0]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	011b      	lsls	r3, r3, #4
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	4939      	ldr	r1, [pc, #228]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d167      	bne.n	8009bec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009b1c:	4b36      	ldr	r3, [pc, #216]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a35      	ldr	r2, [pc, #212]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b28:	f7fc f926 	bl	8005d78 <HAL_GetTick>
 8009b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b2e:	e009      	b.n	8009b44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009b30:	f7fc f922 	bl	8005d78 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d902      	bls.n	8009b44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	73fb      	strb	r3, [r7, #15]
        break;
 8009b42:	e005      	b.n	8009b50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009b44:	4b2c      	ldr	r3, [pc, #176]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1ef      	bne.n	8009b30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d14a      	bne.n	8009bec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d111      	bne.n	8009b80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b5c:	4b26      	ldr	r3, [pc, #152]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	6892      	ldr	r2, [r2, #8]
 8009b6c:	0211      	lsls	r1, r2, #8
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	68d2      	ldr	r2, [r2, #12]
 8009b72:	0912      	lsrs	r2, r2, #4
 8009b74:	0452      	lsls	r2, r2, #17
 8009b76:	430a      	orrs	r2, r1
 8009b78:	491f      	ldr	r1, [pc, #124]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	614b      	str	r3, [r1, #20]
 8009b7e:	e011      	b.n	8009ba4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009b80:	4b1d      	ldr	r3, [pc, #116]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009b82:	695b      	ldr	r3, [r3, #20]
 8009b84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009b88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6892      	ldr	r2, [r2, #8]
 8009b90:	0211      	lsls	r1, r2, #8
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6912      	ldr	r2, [r2, #16]
 8009b96:	0852      	lsrs	r2, r2, #1
 8009b98:	3a01      	subs	r2, #1
 8009b9a:	0652      	lsls	r2, r2, #25
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	4916      	ldr	r1, [pc, #88]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009ba4:	4b14      	ldr	r3, [pc, #80]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a13      	ldr	r2, [pc, #76]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb0:	f7fc f8e2 	bl	8005d78 <HAL_GetTick>
 8009bb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bb6:	e009      	b.n	8009bcc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009bb8:	f7fc f8de 	bl	8005d78 <HAL_GetTick>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	1ad3      	subs	r3, r2, r3
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d902      	bls.n	8009bcc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	73fb      	strb	r3, [r7, #15]
          break;
 8009bca:	e005      	b.n	8009bd8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d0ef      	beq.n	8009bb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d106      	bne.n	8009bec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009bde:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009be0:	695a      	ldr	r2, [r3, #20]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	695b      	ldr	r3, [r3, #20]
 8009be6:	4904      	ldr	r1, [pc, #16]	; (8009bf8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
 8009bf6:	bf00      	nop
 8009bf8:	40021000 	.word	0x40021000

08009bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e095      	b.n	8009d3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d108      	bne.n	8009c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c1e:	d009      	beq.n	8009c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	61da      	str	r2, [r3, #28]
 8009c26:	e005      	b.n	8009c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2200      	movs	r2, #0
 8009c32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7f8 fea2 	bl	8002998 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c74:	d902      	bls.n	8009c7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009c76:	2300      	movs	r3, #0
 8009c78:	60fb      	str	r3, [r7, #12]
 8009c7a:	e002      	b.n	8009c82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009c8a:	d007      	beq.n	8009c9c <HAL_SPI_Init+0xa0>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009c94:	d002      	beq.n	8009c9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cca:	431a      	orrs	r2, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cde:	ea42 0103 	orr.w	r1, r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	430a      	orrs	r2, r1
 8009cf0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	0c1b      	lsrs	r3, r3, #16
 8009cf8:	f003 0204 	and.w	r2, r3, #4
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	431a      	orrs	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d0a:	f003 0308 	and.w	r3, r3, #8
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009d18:	ea42 0103 	orr.w	r1, r2, r3
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
	...

08009d44 <HAL_SWPMI_Init>:
  * @brief Initialize the SWPMI peripheral according to the specified parameters in the SWPMI_InitTypeDef.
  * @param hswpmi SWPMI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SWPMI_Init(SWPMI_HandleTypeDef *hswpmi)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8009d50:	2300      	movs	r3, #0
 8009d52:	60bb      	str	r3, [r7, #8]

  /* Check the SWPMI handle allocation */
  if (hswpmi == NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <HAL_SWPMI_Init+0x1c>
  {
    status = HAL_ERROR;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	73fb      	strb	r3, [r7, #15]
 8009d5e:	e061      	b.n	8009e24 <HAL_SWPMI_Init+0xe0>
    assert_param(IS_SWPMI_VOLTAGE_CLASS(hswpmi->Init.VoltageClass));
    assert_param(IS_SWPMI_BITRATE_VALUE(hswpmi->Init.BitRate));
    assert_param(IS_SWPMI_TX_BUFFERING_MODE(hswpmi->Init.TxBufferingMode));
    assert_param(IS_SWPMI_RX_BUFFERING_MODE(hswpmi->Init.RxBufferingMode));

    if (hswpmi->State == HAL_SWPMI_STATE_RESET)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <HAL_SWPMI_Init+0x36>
    {
      /* Allocate lock resource and initialize it */
      hswpmi->Lock = HAL_UNLOCKED;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hswpmi->MspInitCallback = HAL_SWPMI_MspInit;
      }
      hswpmi->MspInitCallback(hswpmi);
#else
      /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
      HAL_SWPMI_MspInit(hswpmi);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f7f8 febf 	bl	8002af8 <HAL_SWPMI_MspInit>
#endif
    }

    hswpmi->State = HAL_SWPMI_STATE_BUSY;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable SWPMI interface */
    CLEAR_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0220 	bic.w	r2, r2, #32
 8009d90:	601a      	str	r2, [r3, #0]

    /* Clear all SWPMI interface flags */
    WRITE_REG(hswpmi->Instance->ICR, 0x019F);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f240 129f 	movw	r2, #415	; 0x19f
 8009d9a:	611a      	str	r2, [r3, #16]

    /* Apply Voltage class selection */
    MODIFY_REG(hswpmi->Instance->OR, SWPMI_OR_CLASS, hswpmi->Init.VoltageClass);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da2:	f023 0102 	bic.w	r1, r3, #2
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685a      	ldr	r2, [r3, #4]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* If Voltage class B, apply 300us delay */
    if (hswpmi->Init.VoltageClass == SWPMI_VOLTAGE_CLASS_B)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d112      	bne.n	8009de0 <HAL_SWPMI_Init+0x9c>
    {
      /* Insure 300us wait to insure SWPMI_IO output not higher than 1.8V */
      /* Wait loop initialization and execution                            */
      /* Note: Variable divided by 4 to compensate partially CPU processing cycles. */
      wait_loop_index = (300U * (SystemCoreClock / (1000000U * 4U))) + 150U;
 8009dba:	4b1d      	ldr	r3, [pc, #116]	; (8009e30 <HAL_SWPMI_Init+0xec>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <HAL_SWPMI_Init+0xf0>)
 8009dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8009dc4:	0d1b      	lsrs	r3, r3, #20
 8009dc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009dca:	fb02 f303 	mul.w	r3, r2, r3
 8009dce:	3396      	adds	r3, #150	; 0x96
 8009dd0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 8009dd2:	e002      	b.n	8009dda <HAL_SWPMI_Init+0x96>
      {
        wait_loop_index--;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0U)
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f9      	bne.n	8009dd4 <HAL_SWPMI_Init+0x90>
      }
    }

    /* Configure the BRR register (Bitrate) */
    WRITE_REG(hswpmi->Instance->BRR, hswpmi->Init.BitRate);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	6892      	ldr	r2, [r2, #8]
 8009de8:	605a      	str	r2, [r3, #4]

    /* Apply SWPMI CR configuration */
    MODIFY_REG(hswpmi->Instance->CR, \
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f023 010f 	bic.w	r1, r3, #15
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68da      	ldr	r2, [r3, #12]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	601a      	str	r2, [r3, #0]
               SWPMI_CR_RXDMA | SWPMI_CR_TXDMA  | SWPMI_CR_RXMODE | SWPMI_CR_TXMODE, \
               hswpmi->Init.TxBufferingMode | hswpmi->Init.RxBufferingMode);

    hswpmi->ErrorCode = HAL_SWPMI_ERROR_NONE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38
    hswpmi->State = HAL_SWPMI_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Enable SWPMI peripheral */
    SET_BIT(hswpmi->Instance->CR, SWPMI_CR_SWPACT);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0220 	orr.w	r2, r2, #32
 8009e22:	601a      	str	r2, [r3, #0]
  }

  return status;
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000000 	.word	0x20000000
 8009e34:	431bde83 	.word	0x431bde83

08009e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e049      	b.n	8009ede <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d106      	bne.n	8009e64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f7f8 feee 	bl	8002c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f000 fb1a 	bl	800a4b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}

08009ee6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e049      	b.n	8009f8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f841 	bl	8009f94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2202      	movs	r2, #2
 8009f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	3304      	adds	r3, #4
 8009f22:	4619      	mov	r1, r3
 8009f24:	4610      	mov	r0, r2
 8009f26:	f000 fac3 	bl	800a4b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2201      	movs	r2, #1
 8009f76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e097      	b.n	800a0ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d106      	bne.n	8009fd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7f8 fdf1 	bl	8002bb8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2202      	movs	r2, #2
 8009fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6812      	ldr	r2, [r2, #0]
 8009fe8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009fec:	f023 0307 	bic.w	r3, r3, #7
 8009ff0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f000 fa57 	bl	800a4b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	4313      	orrs	r3, r2
 800a022:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a02a:	f023 0303 	bic.w	r3, r3, #3
 800a02e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	689a      	ldr	r2, [r3, #8]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	021b      	lsls	r3, r3, #8
 800a03a:	4313      	orrs	r3, r2
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	4313      	orrs	r3, r2
 800a040:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a048:	f023 030c 	bic.w	r3, r3, #12
 800a04c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	69db      	ldr	r3, [r3, #28]
 800a062:	021b      	lsls	r3, r3, #8
 800a064:	4313      	orrs	r3, r2
 800a066:	693a      	ldr	r2, [r7, #16]
 800a068:	4313      	orrs	r3, r2
 800a06a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	011a      	lsls	r2, r3, #4
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	031b      	lsls	r3, r3, #12
 800a078:	4313      	orrs	r3, r2
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a086:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a08e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	685a      	ldr	r2, [r3, #4]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	011b      	lsls	r3, r3, #4
 800a09a:	4313      	orrs	r3, r2
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3718      	adds	r7, #24
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	60f8      	str	r0, [r7, #12]
 800a0fc:	60b9      	str	r1, [r7, #8]
 800a0fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a100:	2300      	movs	r3, #0
 800a102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d101      	bne.n	800a112 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a10e:	2302      	movs	r3, #2
 800a110:	e0ff      	b.n	800a312 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b14      	cmp	r3, #20
 800a11e:	f200 80f0 	bhi.w	800a302 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a122:	a201      	add	r2, pc, #4	; (adr r2, 800a128 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a128:	0800a17d 	.word	0x0800a17d
 800a12c:	0800a303 	.word	0x0800a303
 800a130:	0800a303 	.word	0x0800a303
 800a134:	0800a303 	.word	0x0800a303
 800a138:	0800a1bd 	.word	0x0800a1bd
 800a13c:	0800a303 	.word	0x0800a303
 800a140:	0800a303 	.word	0x0800a303
 800a144:	0800a303 	.word	0x0800a303
 800a148:	0800a1ff 	.word	0x0800a1ff
 800a14c:	0800a303 	.word	0x0800a303
 800a150:	0800a303 	.word	0x0800a303
 800a154:	0800a303 	.word	0x0800a303
 800a158:	0800a23f 	.word	0x0800a23f
 800a15c:	0800a303 	.word	0x0800a303
 800a160:	0800a303 	.word	0x0800a303
 800a164:	0800a303 	.word	0x0800a303
 800a168:	0800a281 	.word	0x0800a281
 800a16c:	0800a303 	.word	0x0800a303
 800a170:	0800a303 	.word	0x0800a303
 800a174:	0800a303 	.word	0x0800a303
 800a178:	0800a2c1 	.word	0x0800a2c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68b9      	ldr	r1, [r7, #8]
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fa2e 	bl	800a5e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699a      	ldr	r2, [r3, #24]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0208 	orr.w	r2, r2, #8
 800a196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699a      	ldr	r2, [r3, #24]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f022 0204 	bic.w	r2, r2, #4
 800a1a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6999      	ldr	r1, [r3, #24]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	691a      	ldr	r2, [r3, #16]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	619a      	str	r2, [r3, #24]
      break;
 800a1ba:	e0a5      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68b9      	ldr	r1, [r7, #8]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 fa9e 	bl	800a704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	699a      	ldr	r2, [r3, #24]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6999      	ldr	r1, [r3, #24]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	021a      	lsls	r2, r3, #8
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	619a      	str	r2, [r3, #24]
      break;
 800a1fc:	e084      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	4618      	mov	r0, r3
 800a206:	f000 fb07 	bl	800a818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	69da      	ldr	r2, [r3, #28]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 0208 	orr.w	r2, r2, #8
 800a218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	69da      	ldr	r2, [r3, #28]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f022 0204 	bic.w	r2, r2, #4
 800a228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69d9      	ldr	r1, [r3, #28]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	691a      	ldr	r2, [r3, #16]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	430a      	orrs	r2, r1
 800a23a:	61da      	str	r2, [r3, #28]
      break;
 800a23c:	e064      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fb6f 	bl	800a928 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69da      	ldr	r2, [r3, #28]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69d9      	ldr	r1, [r3, #28]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	021a      	lsls	r2, r3, #8
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	430a      	orrs	r2, r1
 800a27c:	61da      	str	r2, [r3, #28]
      break;
 800a27e:	e043      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68b9      	ldr	r1, [r7, #8]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 fbb8 	bl	800a9fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f042 0208 	orr.w	r2, r2, #8
 800a29a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f022 0204 	bic.w	r2, r2, #4
 800a2aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	691a      	ldr	r2, [r3, #16]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a2be:	e023      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68b9      	ldr	r1, [r7, #8]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fbfc 	bl	800aac4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	021a      	lsls	r2, r3, #8
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	430a      	orrs	r2, r1
 800a2fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a300:	e002      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	75fb      	strb	r3, [r7, #23]
      break;
 800a306:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a310:	7dfb      	ldrb	r3, [r7, #23]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop

0800a31c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <HAL_TIM_ConfigClockSource+0x1c>
 800a334:	2302      	movs	r3, #2
 800a336:	e0b6      	b.n	800a4a6 <HAL_TIM_ConfigClockSource+0x18a>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2202      	movs	r2, #2
 800a344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a35a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a362:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68ba      	ldr	r2, [r7, #8]
 800a36a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a374:	d03e      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0xd8>
 800a376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a37a:	f200 8087 	bhi.w	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a382:	f000 8086 	beq.w	800a492 <HAL_TIM_ConfigClockSource+0x176>
 800a386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38a:	d87f      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a38c:	2b70      	cmp	r3, #112	; 0x70
 800a38e:	d01a      	beq.n	800a3c6 <HAL_TIM_ConfigClockSource+0xaa>
 800a390:	2b70      	cmp	r3, #112	; 0x70
 800a392:	d87b      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a394:	2b60      	cmp	r3, #96	; 0x60
 800a396:	d050      	beq.n	800a43a <HAL_TIM_ConfigClockSource+0x11e>
 800a398:	2b60      	cmp	r3, #96	; 0x60
 800a39a:	d877      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a39c:	2b50      	cmp	r3, #80	; 0x50
 800a39e:	d03c      	beq.n	800a41a <HAL_TIM_ConfigClockSource+0xfe>
 800a3a0:	2b50      	cmp	r3, #80	; 0x50
 800a3a2:	d873      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a3a4:	2b40      	cmp	r3, #64	; 0x40
 800a3a6:	d058      	beq.n	800a45a <HAL_TIM_ConfigClockSource+0x13e>
 800a3a8:	2b40      	cmp	r3, #64	; 0x40
 800a3aa:	d86f      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a3ac:	2b30      	cmp	r3, #48	; 0x30
 800a3ae:	d064      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x15e>
 800a3b0:	2b30      	cmp	r3, #48	; 0x30
 800a3b2:	d86b      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	d060      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x15e>
 800a3b8:	2b20      	cmp	r3, #32
 800a3ba:	d867      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d05c      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x15e>
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d05a      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x15e>
 800a3c4:	e062      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	6899      	ldr	r1, [r3, #8]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f000 fc55 	bl	800ac84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	609a      	str	r2, [r3, #8]
      break;
 800a3f2:	e04f      	b.n	800a494 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	6899      	ldr	r1, [r3, #8]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f000 fc3e 	bl	800ac84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689a      	ldr	r2, [r3, #8]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a416:	609a      	str	r2, [r3, #8]
      break;
 800a418:	e03c      	b.n	800a494 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	6859      	ldr	r1, [r3, #4]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	461a      	mov	r2, r3
 800a428:	f000 fbb2 	bl	800ab90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2150      	movs	r1, #80	; 0x50
 800a432:	4618      	mov	r0, r3
 800a434:	f000 fc0b 	bl	800ac4e <TIM_ITRx_SetConfig>
      break;
 800a438:	e02c      	b.n	800a494 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	6859      	ldr	r1, [r3, #4]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	461a      	mov	r2, r3
 800a448:	f000 fbd1 	bl	800abee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2160      	movs	r1, #96	; 0x60
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fbfb 	bl	800ac4e <TIM_ITRx_SetConfig>
      break;
 800a458:	e01c      	b.n	800a494 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6859      	ldr	r1, [r3, #4]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	461a      	mov	r2, r3
 800a468:	f000 fb92 	bl	800ab90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2140      	movs	r1, #64	; 0x40
 800a472:	4618      	mov	r0, r3
 800a474:	f000 fbeb 	bl	800ac4e <TIM_ITRx_SetConfig>
      break;
 800a478:	e00c      	b.n	800a494 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4619      	mov	r1, r3
 800a484:	4610      	mov	r0, r2
 800a486:	f000 fbe2 	bl	800ac4e <TIM_ITRx_SetConfig>
      break;
 800a48a:	e003      	b.n	800a494 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	73fb      	strb	r3, [r7, #15]
      break;
 800a490:	e000      	b.n	800a494 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a40      	ldr	r2, [pc, #256]	; (800a5c4 <TIM_Base_SetConfig+0x114>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d013      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ce:	d00f      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a3d      	ldr	r2, [pc, #244]	; (800a5c8 <TIM_Base_SetConfig+0x118>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d00b      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a3c      	ldr	r2, [pc, #240]	; (800a5cc <TIM_Base_SetConfig+0x11c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d007      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a3b      	ldr	r2, [pc, #236]	; (800a5d0 <TIM_Base_SetConfig+0x120>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d003      	beq.n	800a4f0 <TIM_Base_SetConfig+0x40>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a3a      	ldr	r2, [pc, #232]	; (800a5d4 <TIM_Base_SetConfig+0x124>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d108      	bne.n	800a502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a2f      	ldr	r2, [pc, #188]	; (800a5c4 <TIM_Base_SetConfig+0x114>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d01f      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a510:	d01b      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	4a2c      	ldr	r2, [pc, #176]	; (800a5c8 <TIM_Base_SetConfig+0x118>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d017      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	4a2b      	ldr	r2, [pc, #172]	; (800a5cc <TIM_Base_SetConfig+0x11c>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d013      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	4a2a      	ldr	r2, [pc, #168]	; (800a5d0 <TIM_Base_SetConfig+0x120>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d00f      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a29      	ldr	r2, [pc, #164]	; (800a5d4 <TIM_Base_SetConfig+0x124>)
 800a52e:	4293      	cmp	r3, r2
 800a530:	d00b      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a28      	ldr	r2, [pc, #160]	; (800a5d8 <TIM_Base_SetConfig+0x128>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d007      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	4a27      	ldr	r2, [pc, #156]	; (800a5dc <TIM_Base_SetConfig+0x12c>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d003      	beq.n	800a54a <TIM_Base_SetConfig+0x9a>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a26      	ldr	r2, [pc, #152]	; (800a5e0 <TIM_Base_SetConfig+0x130>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d108      	bne.n	800a55c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	4313      	orrs	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	695b      	ldr	r3, [r3, #20]
 800a566:	4313      	orrs	r3, r2
 800a568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	689a      	ldr	r2, [r3, #8]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a10      	ldr	r2, [pc, #64]	; (800a5c4 <TIM_Base_SetConfig+0x114>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d00f      	beq.n	800a5a8 <TIM_Base_SetConfig+0xf8>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a12      	ldr	r2, [pc, #72]	; (800a5d4 <TIM_Base_SetConfig+0x124>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d00b      	beq.n	800a5a8 <TIM_Base_SetConfig+0xf8>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a11      	ldr	r2, [pc, #68]	; (800a5d8 <TIM_Base_SetConfig+0x128>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d007      	beq.n	800a5a8 <TIM_Base_SetConfig+0xf8>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a10      	ldr	r2, [pc, #64]	; (800a5dc <TIM_Base_SetConfig+0x12c>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d003      	beq.n	800a5a8 <TIM_Base_SetConfig+0xf8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a0f      	ldr	r2, [pc, #60]	; (800a5e0 <TIM_Base_SetConfig+0x130>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d103      	bne.n	800a5b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	691a      	ldr	r2, [r3, #16]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	615a      	str	r2, [r3, #20]
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	40012c00 	.word	0x40012c00
 800a5c8:	40000400 	.word	0x40000400
 800a5cc:	40000800 	.word	0x40000800
 800a5d0:	40000c00 	.word	0x40000c00
 800a5d4:	40013400 	.word	0x40013400
 800a5d8:	40014000 	.word	0x40014000
 800a5dc:	40014400 	.word	0x40014400
 800a5e0:	40014800 	.word	0x40014800

0800a5e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	f023 0201 	bic.w	r2, r3, #1
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f023 0303 	bic.w	r3, r3, #3
 800a61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f023 0302 	bic.w	r3, r3, #2
 800a630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	697a      	ldr	r2, [r7, #20]
 800a638:	4313      	orrs	r3, r2
 800a63a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a2c      	ldr	r2, [pc, #176]	; (800a6f0 <TIM_OC1_SetConfig+0x10c>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d00f      	beq.n	800a664 <TIM_OC1_SetConfig+0x80>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a2b      	ldr	r2, [pc, #172]	; (800a6f4 <TIM_OC1_SetConfig+0x110>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d00b      	beq.n	800a664 <TIM_OC1_SetConfig+0x80>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a2a      	ldr	r2, [pc, #168]	; (800a6f8 <TIM_OC1_SetConfig+0x114>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_OC1_SetConfig+0x80>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a29      	ldr	r2, [pc, #164]	; (800a6fc <TIM_OC1_SetConfig+0x118>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_OC1_SetConfig+0x80>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a28      	ldr	r2, [pc, #160]	; (800a700 <TIM_OC1_SetConfig+0x11c>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d10c      	bne.n	800a67e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f023 0308 	bic.w	r3, r3, #8
 800a66a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	4313      	orrs	r3, r2
 800a674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f023 0304 	bic.w	r3, r3, #4
 800a67c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a1b      	ldr	r2, [pc, #108]	; (800a6f0 <TIM_OC1_SetConfig+0x10c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d00f      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xc2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <TIM_OC1_SetConfig+0x110>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00b      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xc2>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a19      	ldr	r2, [pc, #100]	; (800a6f8 <TIM_OC1_SetConfig+0x114>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d007      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xc2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a18      	ldr	r2, [pc, #96]	; (800a6fc <TIM_OC1_SetConfig+0x118>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d003      	beq.n	800a6a6 <TIM_OC1_SetConfig+0xc2>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4a17      	ldr	r2, [pc, #92]	; (800a700 <TIM_OC1_SetConfig+0x11c>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	d111      	bne.n	800a6ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	695b      	ldr	r3, [r3, #20]
 800a6ba:	693a      	ldr	r2, [r7, #16]
 800a6bc:	4313      	orrs	r3, r2
 800a6be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	693a      	ldr	r2, [r7, #16]
 800a6ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	685a      	ldr	r2, [r3, #4]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	621a      	str	r2, [r3, #32]
}
 800a6e4:	bf00      	nop
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	40012c00 	.word	0x40012c00
 800a6f4:	40013400 	.word	0x40013400
 800a6f8:	40014000 	.word	0x40014000
 800a6fc:	40014400 	.word	0x40014400
 800a700:	40014800 	.word	0x40014800

0800a704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0210 	bic.w	r2, r3, #16
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	021b      	lsls	r3, r3, #8
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f023 0320 	bic.w	r3, r3, #32
 800a752:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a28      	ldr	r2, [pc, #160]	; (800a804 <TIM_OC2_SetConfig+0x100>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_OC2_SetConfig+0x6c>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a27      	ldr	r2, [pc, #156]	; (800a808 <TIM_OC2_SetConfig+0x104>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d10d      	bne.n	800a78c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	011b      	lsls	r3, r3, #4
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a78a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	4a1d      	ldr	r2, [pc, #116]	; (800a804 <TIM_OC2_SetConfig+0x100>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d00f      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xb0>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a1c      	ldr	r2, [pc, #112]	; (800a808 <TIM_OC2_SetConfig+0x104>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d00b      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xb0>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4a1b      	ldr	r2, [pc, #108]	; (800a80c <TIM_OC2_SetConfig+0x108>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d007      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xb0>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a1a      	ldr	r2, [pc, #104]	; (800a810 <TIM_OC2_SetConfig+0x10c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d003      	beq.n	800a7b4 <TIM_OC2_SetConfig+0xb0>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a19      	ldr	r2, [pc, #100]	; (800a814 <TIM_OC2_SetConfig+0x110>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d113      	bne.n	800a7dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	621a      	str	r2, [r3, #32]
}
 800a7f6:	bf00      	nop
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	40012c00 	.word	0x40012c00
 800a808:	40013400 	.word	0x40013400
 800a80c:	40014000 	.word	0x40014000
 800a810:	40014400 	.word	0x40014400
 800a814:	40014800 	.word	0x40014800

0800a818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a818:	b480      	push	{r7}
 800a81a:	b087      	sub	sp, #28
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	021b      	lsls	r3, r3, #8
 800a86c:	697a      	ldr	r2, [r7, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a27      	ldr	r2, [pc, #156]	; (800a914 <TIM_OC3_SetConfig+0xfc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d003      	beq.n	800a882 <TIM_OC3_SetConfig+0x6a>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a26      	ldr	r2, [pc, #152]	; (800a918 <TIM_OC3_SetConfig+0x100>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d10d      	bne.n	800a89e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a888:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	021b      	lsls	r3, r3, #8
 800a890:	697a      	ldr	r2, [r7, #20]
 800a892:	4313      	orrs	r3, r2
 800a894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a89c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a1c      	ldr	r2, [pc, #112]	; (800a914 <TIM_OC3_SetConfig+0xfc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d00f      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xae>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a1b      	ldr	r2, [pc, #108]	; (800a918 <TIM_OC3_SetConfig+0x100>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d00b      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xae>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a1a      	ldr	r2, [pc, #104]	; (800a91c <TIM_OC3_SetConfig+0x104>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d007      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xae>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a19      	ldr	r2, [pc, #100]	; (800a920 <TIM_OC3_SetConfig+0x108>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d003      	beq.n	800a8c6 <TIM_OC3_SetConfig+0xae>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a18      	ldr	r2, [pc, #96]	; (800a924 <TIM_OC3_SetConfig+0x10c>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d113      	bne.n	800a8ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	011b      	lsls	r3, r3, #4
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	621a      	str	r2, [r3, #32]
}
 800a908:	bf00      	nop
 800a90a:	371c      	adds	r7, #28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40012c00 	.word	0x40012c00
 800a918:	40013400 	.word	0x40013400
 800a91c:	40014000 	.word	0x40014000
 800a920:	40014400 	.word	0x40014400
 800a924:	40014800 	.word	0x40014800

0800a928 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a95a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	68fa      	ldr	r2, [r7, #12]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	031b      	lsls	r3, r3, #12
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a18      	ldr	r2, [pc, #96]	; (800a9e8 <TIM_OC4_SetConfig+0xc0>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d00f      	beq.n	800a9ac <TIM_OC4_SetConfig+0x84>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a17      	ldr	r2, [pc, #92]	; (800a9ec <TIM_OC4_SetConfig+0xc4>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d00b      	beq.n	800a9ac <TIM_OC4_SetConfig+0x84>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a16      	ldr	r2, [pc, #88]	; (800a9f0 <TIM_OC4_SetConfig+0xc8>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d007      	beq.n	800a9ac <TIM_OC4_SetConfig+0x84>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a15      	ldr	r2, [pc, #84]	; (800a9f4 <TIM_OC4_SetConfig+0xcc>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d003      	beq.n	800a9ac <TIM_OC4_SetConfig+0x84>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a14      	ldr	r2, [pc, #80]	; (800a9f8 <TIM_OC4_SetConfig+0xd0>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d109      	bne.n	800a9c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	019b      	lsls	r3, r3, #6
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	621a      	str	r2, [r3, #32]
}
 800a9da:	bf00      	nop
 800a9dc:	371c      	adds	r7, #28
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40012c00 	.word	0x40012c00
 800a9ec:	40013400 	.word	0x40013400
 800a9f0:	40014000 	.word	0x40014000
 800a9f4:	40014400 	.word	0x40014400
 800a9f8:	40014800 	.word	0x40014800

0800a9fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b087      	sub	sp, #28
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aa40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a17      	ldr	r2, [pc, #92]	; (800aab0 <TIM_OC5_SetConfig+0xb4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00f      	beq.n	800aa76 <TIM_OC5_SetConfig+0x7a>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a16      	ldr	r2, [pc, #88]	; (800aab4 <TIM_OC5_SetConfig+0xb8>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00b      	beq.n	800aa76 <TIM_OC5_SetConfig+0x7a>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a15      	ldr	r2, [pc, #84]	; (800aab8 <TIM_OC5_SetConfig+0xbc>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d007      	beq.n	800aa76 <TIM_OC5_SetConfig+0x7a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a14      	ldr	r2, [pc, #80]	; (800aabc <TIM_OC5_SetConfig+0xc0>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d003      	beq.n	800aa76 <TIM_OC5_SetConfig+0x7a>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a13      	ldr	r2, [pc, #76]	; (800aac0 <TIM_OC5_SetConfig+0xc4>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d109      	bne.n	800aa8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	695b      	ldr	r3, [r3, #20]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685a      	ldr	r2, [r3, #4]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	621a      	str	r2, [r3, #32]
}
 800aaa4:	bf00      	nop
 800aaa6:	371c      	adds	r7, #28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	40012c00 	.word	0x40012c00
 800aab4:	40013400 	.word	0x40013400
 800aab8:	40014000 	.word	0x40014000
 800aabc:	40014400 	.word	0x40014400
 800aac0:	40014800 	.word	0x40014800

0800aac4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b087      	sub	sp, #28
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a1b      	ldr	r3, [r3, #32]
 800aade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	051b      	lsls	r3, r3, #20
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a18      	ldr	r2, [pc, #96]	; (800ab7c <TIM_OC6_SetConfig+0xb8>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d00f      	beq.n	800ab40 <TIM_OC6_SetConfig+0x7c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a17      	ldr	r2, [pc, #92]	; (800ab80 <TIM_OC6_SetConfig+0xbc>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d00b      	beq.n	800ab40 <TIM_OC6_SetConfig+0x7c>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a16      	ldr	r2, [pc, #88]	; (800ab84 <TIM_OC6_SetConfig+0xc0>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d007      	beq.n	800ab40 <TIM_OC6_SetConfig+0x7c>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a15      	ldr	r2, [pc, #84]	; (800ab88 <TIM_OC6_SetConfig+0xc4>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d003      	beq.n	800ab40 <TIM_OC6_SetConfig+0x7c>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4a14      	ldr	r2, [pc, #80]	; (800ab8c <TIM_OC6_SetConfig+0xc8>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d109      	bne.n	800ab54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	029b      	lsls	r3, r3, #10
 800ab4e:	697a      	ldr	r2, [r7, #20]
 800ab50:	4313      	orrs	r3, r2
 800ab52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	685a      	ldr	r2, [r3, #4]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	621a      	str	r2, [r3, #32]
}
 800ab6e:	bf00      	nop
 800ab70:	371c      	adds	r7, #28
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	40012c00 	.word	0x40012c00
 800ab80:	40013400 	.word	0x40013400
 800ab84:	40014000 	.word	0x40014000
 800ab88:	40014400 	.word	0x40014400
 800ab8c:	40014800 	.word	0x40014800

0800ab90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	f023 0201 	bic.w	r2, r3, #1
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f023 030a 	bic.w	r3, r3, #10
 800abcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	621a      	str	r2, [r3, #32]
}
 800abe2:	bf00      	nop
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abee:	b480      	push	{r7}
 800abf0:	b087      	sub	sp, #28
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	60f8      	str	r0, [r7, #12]
 800abf6:	60b9      	str	r1, [r7, #8]
 800abf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	f023 0210 	bic.w	r2, r3, #16
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	031b      	lsls	r3, r3, #12
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	697a      	ldr	r2, [r7, #20]
 800ac3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	621a      	str	r2, [r3, #32]
}
 800ac42:	bf00      	nop
 800ac44:	371c      	adds	r7, #28
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b085      	sub	sp, #20
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	f043 0307 	orr.w	r3, r3, #7
 800ac70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	609a      	str	r2, [r3, #8]
}
 800ac78:	bf00      	nop
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b087      	sub	sp, #28
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
 800ac90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	021a      	lsls	r2, r3, #8
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	431a      	orrs	r2, r3
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	4313      	orrs	r3, r2
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	4313      	orrs	r3, r2
 800acb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	697a      	ldr	r2, [r7, #20]
 800acb6:	609a      	str	r2, [r3, #8]
}
 800acb8:	bf00      	nop
 800acba:	371c      	adds	r7, #28
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800acd8:	2302      	movs	r3, #2
 800acda:	e068      	b.n	800adae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a2e      	ldr	r2, [pc, #184]	; (800adbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d004      	beq.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a2d      	ldr	r2, [pc, #180]	; (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d108      	bne.n	800ad22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68fa      	ldr	r2, [r7, #12]
 800ad3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a1e      	ldr	r2, [pc, #120]	; (800adbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d01d      	beq.n	800ad82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad4e:	d018      	beq.n	800ad82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a1b      	ldr	r2, [pc, #108]	; (800adc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d013      	beq.n	800ad82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a1a      	ldr	r2, [pc, #104]	; (800adc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d00e      	beq.n	800ad82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a18      	ldr	r2, [pc, #96]	; (800adcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d009      	beq.n	800ad82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a13      	ldr	r2, [pc, #76]	; (800adc0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d004      	beq.n	800ad82 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a14      	ldr	r2, [pc, #80]	; (800add0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d10c      	bne.n	800ad9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	4313      	orrs	r3, r2
 800ad92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	40012c00 	.word	0x40012c00
 800adc0:	40013400 	.word	0x40013400
 800adc4:	40000400 	.word	0x40000400
 800adc8:	40000800 	.word	0x40000800
 800adcc:	40000c00 	.word	0x40000c00
 800add0:	40014000 	.word	0x40014000

0800add4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d101      	bne.n	800adf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800adec:	2302      	movs	r3, #2
 800adee:	e065      	b.n	800aebc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	68db      	ldr	r3, [r3, #12]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae56:	4313      	orrs	r3, r2
 800ae58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	041b      	lsls	r3, r3, #16
 800ae66:	4313      	orrs	r3, r2
 800ae68:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a16      	ldr	r2, [pc, #88]	; (800aec8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d004      	beq.n	800ae7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a14      	ldr	r2, [pc, #80]	; (800aecc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d115      	bne.n	800aeaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae88:	051b      	lsls	r3, r3, #20
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	6a1b      	ldr	r3, [r3, #32]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	40012c00 	.word	0x40012c00
 800aecc:	40013400 	.word	0x40013400

0800aed0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e040      	b.n	800af64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7f7 ff7c 	bl	8002df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2224      	movs	r2, #36	; 0x24
 800aefc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f022 0201 	bic.w	r2, r2, #1
 800af0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 fcba 	bl	800b888 <UART_SetConfig>
 800af14:	4603      	mov	r3, r0
 800af16:	2b01      	cmp	r3, #1
 800af18:	d101      	bne.n	800af1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800af1a:	2301      	movs	r3, #1
 800af1c:	e022      	b.n	800af64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af22:	2b00      	cmp	r3, #0
 800af24:	d002      	beq.n	800af2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 ff66 	bl	800bdf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	689a      	ldr	r2, [r3, #8]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681a      	ldr	r2, [r3, #0]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f042 0201 	orr.w	r2, r2, #1
 800af5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f000 ffed 	bl	800bf3c <UART_CheckIdleState>
 800af62:	4603      	mov	r3, r0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08a      	sub	sp, #40	; 0x28
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	603b      	str	r3, [r7, #0]
 800af78:	4613      	mov	r3, r2
 800af7a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af80:	2b20      	cmp	r3, #32
 800af82:	f040 80bf 	bne.w	800b104 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <HAL_UART_Receive+0x26>
 800af8c:	88fb      	ldrh	r3, [r7, #6]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e0b7      	b.n	800b106 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_UART_Receive+0x38>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e0b0      	b.n	800b106 <HAL_UART_Receive+0x19a>
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	2222      	movs	r2, #34	; 0x22
 800afb8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afc0:	f7fa feda 	bl	8005d78 <HAL_GetTick>
 800afc4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	88fa      	ldrh	r2, [r7, #6]
 800afca:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	88fa      	ldrh	r2, [r7, #6]
 800afd2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afde:	d10e      	bne.n	800affe <HAL_UART_Receive+0x92>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <HAL_UART_Receive+0x88>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f240 12ff 	movw	r2, #511	; 0x1ff
 800afee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aff2:	e02d      	b.n	800b050 <HAL_UART_Receive+0xe4>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	22ff      	movs	r2, #255	; 0xff
 800aff8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800affc:	e028      	b.n	800b050 <HAL_UART_Receive+0xe4>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d10d      	bne.n	800b022 <HAL_UART_Receive+0xb6>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d104      	bne.n	800b018 <HAL_UART_Receive+0xac>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	22ff      	movs	r2, #255	; 0xff
 800b012:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b016:	e01b      	b.n	800b050 <HAL_UART_Receive+0xe4>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	227f      	movs	r2, #127	; 0x7f
 800b01c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b020:	e016      	b.n	800b050 <HAL_UART_Receive+0xe4>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b02a:	d10d      	bne.n	800b048 <HAL_UART_Receive+0xdc>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	691b      	ldr	r3, [r3, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d104      	bne.n	800b03e <HAL_UART_Receive+0xd2>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	227f      	movs	r2, #127	; 0x7f
 800b038:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b03c:	e008      	b.n	800b050 <HAL_UART_Receive+0xe4>
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	223f      	movs	r2, #63	; 0x3f
 800b042:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b046:	e003      	b.n	800b050 <HAL_UART_Receive+0xe4>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b056:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b060:	d108      	bne.n	800b074 <HAL_UART_Receive+0x108>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d104      	bne.n	800b074 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	61bb      	str	r3, [r7, #24]
 800b072:	e003      	b.n	800b07c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b084:	e033      	b.n	800b0ee <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	2200      	movs	r2, #0
 800b08e:	2120      	movs	r1, #32
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 ff9c 	bl	800bfce <UART_WaitOnFlagUntilTimeout>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d001      	beq.n	800b0a0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800b09c:	2303      	movs	r3, #3
 800b09e:	e032      	b.n	800b106 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10c      	bne.n	800b0c0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	8a7b      	ldrh	r3, [r7, #18]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	3302      	adds	r3, #2
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	e00d      	b.n	800b0dc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	8a7b      	ldrh	r3, [r7, #18]
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	4013      	ands	r3, r2
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1c5      	bne.n	800b086 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	e000      	b.n	800b106 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800b104:	2302      	movs	r3, #2
  }
}
 800b106:	4618      	mov	r0, r3
 800b108:	3720      	adds	r7, #32
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b110:	b480      	push	{r7}
 800b112:	b08b      	sub	sp, #44	; 0x2c
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	4613      	mov	r3, r2
 800b11c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b122:	2b20      	cmp	r3, #32
 800b124:	d156      	bne.n	800b1d4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <HAL_UART_Transmit_IT+0x22>
 800b12c:	88fb      	ldrh	r3, [r7, #6]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e04f      	b.n	800b1d6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d101      	bne.n	800b144 <HAL_UART_Transmit_IT+0x34>
 800b140:	2302      	movs	r3, #2
 800b142:	e048      	b.n	800b1d6 <HAL_UART_Transmit_IT+0xc6>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2201      	movs	r2, #1
 800b148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	68ba      	ldr	r2, [r7, #8]
 800b150:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	88fa      	ldrh	r2, [r7, #6]
 800b156:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	88fa      	ldrh	r2, [r7, #6]
 800b15e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2221      	movs	r2, #33	; 0x21
 800b174:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b17e:	d107      	bne.n	800b190 <HAL_UART_Transmit_IT+0x80>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d103      	bne.n	800b190 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	4a16      	ldr	r2, [pc, #88]	; (800b1e4 <HAL_UART_Transmit_IT+0xd4>)
 800b18c:	669a      	str	r2, [r3, #104]	; 0x68
 800b18e:	e002      	b.n	800b196 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	4a15      	ldr	r2, [pc, #84]	; (800b1e8 <HAL_UART_Transmit_IT+0xd8>)
 800b194:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	e853 3f00 	ldrex	r3, [r3]
 800b1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1bc:	623b      	str	r3, [r7, #32]
 800b1be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c0:	69f9      	ldr	r1, [r7, #28]
 800b1c2:	6a3a      	ldr	r2, [r7, #32]
 800b1c4:	e841 2300 	strex	r3, r2, [r1]
 800b1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e6      	bne.n	800b19e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e000      	b.n	800b1d6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800b1d4:	2302      	movs	r3, #2
  }
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	372c      	adds	r7, #44	; 0x2c
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	0800c497 	.word	0x0800c497
 800b1e8:	0800c3df 	.word	0x0800c3df

0800b1ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08a      	sub	sp, #40	; 0x28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	4613      	mov	r3, r2
 800b1f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1fe:	2b20      	cmp	r3, #32
 800b200:	d142      	bne.n	800b288 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <HAL_UART_Receive_IT+0x22>
 800b208:	88fb      	ldrh	r3, [r7, #6]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d101      	bne.n	800b212 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e03b      	b.n	800b28a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d101      	bne.n	800b220 <HAL_UART_Receive_IT+0x34>
 800b21c:	2302      	movs	r3, #2
 800b21e:	e034      	b.n	800b28a <HAL_UART_Receive_IT+0x9e>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2200      	movs	r2, #0
 800b22c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a18      	ldr	r2, [pc, #96]	; (800b294 <HAL_UART_Receive_IT+0xa8>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d01f      	beq.n	800b278 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d018      	beq.n	800b278 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	e853 3f00 	ldrex	r3, [r3]
 800b252:	613b      	str	r3, [r7, #16]
   return(result);
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b25a:	627b      	str	r3, [r7, #36]	; 0x24
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	461a      	mov	r2, r3
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	623b      	str	r3, [r7, #32]
 800b266:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b268:	69f9      	ldr	r1, [r7, #28]
 800b26a:	6a3a      	ldr	r2, [r7, #32]
 800b26c:	e841 2300 	strex	r3, r2, [r1]
 800b270:	61bb      	str	r3, [r7, #24]
   return(result);
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e6      	bne.n	800b246 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b278:	88fb      	ldrh	r3, [r7, #6]
 800b27a:	461a      	mov	r2, r3
 800b27c:	68b9      	ldr	r1, [r7, #8]
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	f000 ff6a 	bl	800c158 <UART_Start_Receive_IT>
 800b284:	4603      	mov	r3, r0
 800b286:	e000      	b.n	800b28a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800b288:	2302      	movs	r3, #2
  }
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3728      	adds	r7, #40	; 0x28
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	40008000 	.word	0x40008000

0800b298 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b0ba      	sub	sp, #232	; 0xe8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b2be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b2c2:	f640 030f 	movw	r3, #2063	; 0x80f
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b2cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d115      	bne.n	800b300 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2d8:	f003 0320 	and.w	r3, r3, #32
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00f      	beq.n	800b300 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2e4:	f003 0320 	and.w	r3, r3, #32
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d009      	beq.n	800b300 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 82a6 	beq.w	800b842 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	4798      	blx	r3
      }
      return;
 800b2fe:	e2a0      	b.n	800b842 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800b300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 8117 	beq.w	800b538 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b30a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b30e:	f003 0301 	and.w	r3, r3, #1
 800b312:	2b00      	cmp	r3, #0
 800b314:	d106      	bne.n	800b324 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b316:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b31a:	4b85      	ldr	r3, [pc, #532]	; (800b530 <HAL_UART_IRQHandler+0x298>)
 800b31c:	4013      	ands	r3, r2
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f000 810a 	beq.w	800b538 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d011      	beq.n	800b354 <HAL_UART_IRQHandler+0xbc>
 800b330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00b      	beq.n	800b354 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2201      	movs	r2, #1
 800b342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b34a:	f043 0201 	orr.w	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d011      	beq.n	800b384 <HAL_UART_IRQHandler+0xec>
 800b360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b364:	f003 0301 	and.w	r3, r3, #1
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2202      	movs	r2, #2
 800b372:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b37a:	f043 0204 	orr.w	r2, r3, #4
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d011      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x11c>
 800b390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b394:	f003 0301 	and.w	r3, r3, #1
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00b      	beq.n	800b3b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2204      	movs	r2, #4
 800b3a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3aa:	f043 0202 	orr.w	r2, r3, #2
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b3b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3b8:	f003 0308 	and.w	r3, r3, #8
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d017      	beq.n	800b3f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3c4:	f003 0320 	and.w	r3, r3, #32
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d105      	bne.n	800b3d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b3cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2208      	movs	r2, #8
 800b3de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3e6:	f043 0208 	orr.w	r2, r3, #8
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d012      	beq.n	800b422 <HAL_UART_IRQHandler+0x18a>
 800b3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b400:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00c      	beq.n	800b422 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b418:	f043 0220 	orr.w	r2, r3, #32
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 820c 	beq.w	800b846 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b432:	f003 0320 	and.w	r3, r3, #32
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00d      	beq.n	800b456 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b43a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b43e:	f003 0320 	and.w	r3, r3, #32
 800b442:	2b00      	cmp	r3, #0
 800b444:	d007      	beq.n	800b456 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b45c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689b      	ldr	r3, [r3, #8]
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b40      	cmp	r3, #64	; 0x40
 800b46c:	d005      	beq.n	800b47a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b46e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b472:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b476:	2b00      	cmp	r3, #0
 800b478:	d04f      	beq.n	800b51a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 ff36 	bl	800c2ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48a:	2b40      	cmp	r3, #64	; 0x40
 800b48c:	d141      	bne.n	800b512 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	3308      	adds	r3, #8
 800b494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b4a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b4a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3308      	adds	r3, #8
 800b4b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b4be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b4c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b4d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1d9      	bne.n	800b48e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d013      	beq.n	800b50a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4e6:	4a13      	ldr	r2, [pc, #76]	; (800b534 <HAL_UART_IRQHandler+0x29c>)
 800b4e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7fb ff29 	bl	8007346 <HAL_DMA_Abort_IT>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d017      	beq.n	800b52a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800b504:	4610      	mov	r0, r2
 800b506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b508:	e00f      	b.n	800b52a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f9a6 	bl	800b85c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b510:	e00b      	b.n	800b52a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f9a2 	bl	800b85c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b518:	e007      	b.n	800b52a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 f99e 	bl	800b85c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800b528:	e18d      	b.n	800b846 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b52a:	bf00      	nop
    return;
 800b52c:	e18b      	b.n	800b846 <HAL_UART_IRQHandler+0x5ae>
 800b52e:	bf00      	nop
 800b530:	04000120 	.word	0x04000120
 800b534:	0800c3b3 	.word	0x0800c3b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	f040 8146 	bne.w	800b7ce <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b546:	f003 0310 	and.w	r3, r3, #16
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 813f 	beq.w	800b7ce <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b554:	f003 0310 	and.w	r3, r3, #16
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f000 8138 	beq.w	800b7ce <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	2210      	movs	r2, #16
 800b564:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b570:	2b40      	cmp	r3, #64	; 0x40
 800b572:	f040 80b4 	bne.w	800b6de <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b582:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 815f 	beq.w	800b84a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b596:	429a      	cmp	r2, r3
 800b598:	f080 8157 	bcs.w	800b84a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 0320 	and.w	r3, r3, #32
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f040 8085 	bne.w	800b6c2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5c4:	e853 3f00 	ldrex	r3, [r3]
 800b5c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b5cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b5d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b5ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b5f2:	e841 2300 	strex	r3, r2, [r1]
 800b5f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b5fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d1da      	bne.n	800b5b8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3308      	adds	r3, #8
 800b608:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b60a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b614:	f023 0301 	bic.w	r3, r3, #1
 800b618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3308      	adds	r3, #8
 800b622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b626:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b62a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b62e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b632:	e841 2300 	strex	r3, r2, [r1]
 800b636:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1e1      	bne.n	800b602 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3308      	adds	r3, #8
 800b644:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b646:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	3308      	adds	r3, #8
 800b65e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b662:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b664:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b666:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b668:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b66a:	e841 2300 	strex	r3, r2, [r1]
 800b66e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e3      	bne.n	800b63e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b68a:	e853 3f00 	ldrex	r3, [r3]
 800b68e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b692:	f023 0310 	bic.w	r3, r3, #16
 800b696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b6a4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b6ac:	e841 2300 	strex	r3, r2, [r1]
 800b6b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b6b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1e4      	bne.n	800b682 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7fb fe04 	bl	80072ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f8ca 	bl	800b870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6dc:	e0b5      	b.n	800b84a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 80a7 	beq.w	800b84e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800b700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b704:	2b00      	cmp	r3, #0
 800b706:	f000 80a2 	beq.w	800b84e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	e853 3f00 	ldrex	r3, [r3]
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b71e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b72c:	647b      	str	r3, [r7, #68]	; 0x44
 800b72e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e4      	bne.n	800b70a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	e853 3f00 	ldrex	r3, [r3]
 800b74e:	623b      	str	r3, [r7, #32]
   return(result);
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	f023 0301 	bic.w	r3, r3, #1
 800b756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	3308      	adds	r3, #8
 800b760:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b764:	633a      	str	r2, [r7, #48]	; 0x30
 800b766:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b76a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b76c:	e841 2300 	strex	r3, r2, [r1]
 800b770:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e3      	bne.n	800b740 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2220      	movs	r2, #32
 800b77c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	e853 3f00 	ldrex	r3, [r3]
 800b796:	60fb      	str	r3, [r7, #12]
   return(result);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f023 0310 	bic.w	r3, r3, #16
 800b79e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b7ac:	61fb      	str	r3, [r7, #28]
 800b7ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b0:	69b9      	ldr	r1, [r7, #24]
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	e841 2300 	strex	r3, r2, [r1]
 800b7b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b7ba:	697b      	ldr	r3, [r7, #20]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d1e4      	bne.n	800b78a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b7c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f852 	bl	800b870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7cc:	e03f      	b.n	800b84e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b7ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00e      	beq.n	800b7f8 <HAL_UART_IRQHandler+0x560>
 800b7da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d008      	beq.n	800b7f8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b7ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f001 f83a 	bl	800c86a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7f6:	e02d      	b.n	800b854 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b7f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00e      	beq.n	800b822 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d008      	beq.n	800b822 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b814:	2b00      	cmp	r3, #0
 800b816:	d01c      	beq.n	800b852 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	4798      	blx	r3
    }
    return;
 800b820:	e017      	b.n	800b852 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b822:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d012      	beq.n	800b854 <HAL_UART_IRQHandler+0x5bc>
 800b82e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b836:	2b00      	cmp	r3, #0
 800b838:	d00c      	beq.n	800b854 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f000 fe8b 	bl	800c556 <UART_EndTransmit_IT>
    return;
 800b840:	e008      	b.n	800b854 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b842:	bf00      	nop
 800b844:	e006      	b.n	800b854 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b846:	bf00      	nop
 800b848:	e004      	b.n	800b854 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b84a:	bf00      	nop
 800b84c:	e002      	b.n	800b854 <HAL_UART_IRQHandler+0x5bc>
      return;
 800b84e:	bf00      	nop
 800b850:	e000      	b.n	800b854 <HAL_UART_IRQHandler+0x5bc>
    return;
 800b852:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800b854:	37e8      	adds	r7, #232	; 0xe8
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
 800b85a:	bf00      	nop

0800b85c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b864:	bf00      	nop
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	460b      	mov	r3, r1
 800b87a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b88c:	b08a      	sub	sp, #40	; 0x28
 800b88e:	af00      	add	r7, sp, #0
 800b890:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b892:	2300      	movs	r3, #0
 800b894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	689a      	ldr	r2, [r3, #8]
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	431a      	orrs	r2, r3
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	431a      	orrs	r2, r3
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	69db      	ldr	r3, [r3, #28]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	4ba4      	ldr	r3, [pc, #656]	; (800bb48 <UART_SetConfig+0x2c0>)
 800b8b8:	4013      	ands	r3, r2
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	6812      	ldr	r2, [r2, #0]
 800b8be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b8c0:	430b      	orrs	r3, r1
 800b8c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	68da      	ldr	r2, [r3, #12]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a99      	ldr	r2, [pc, #612]	; (800bb4c <UART_SetConfig+0x2c4>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d004      	beq.n	800b8f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6a1b      	ldr	r3, [r3, #32]
 800b8ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689b      	ldr	r3, [r3, #8]
 800b8fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b904:	430a      	orrs	r2, r1
 800b906:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a90      	ldr	r2, [pc, #576]	; (800bb50 <UART_SetConfig+0x2c8>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d126      	bne.n	800b960 <UART_SetConfig+0xd8>
 800b912:	4b90      	ldr	r3, [pc, #576]	; (800bb54 <UART_SetConfig+0x2cc>)
 800b914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b918:	f003 0303 	and.w	r3, r3, #3
 800b91c:	2b03      	cmp	r3, #3
 800b91e:	d81b      	bhi.n	800b958 <UART_SetConfig+0xd0>
 800b920:	a201      	add	r2, pc, #4	; (adr r2, 800b928 <UART_SetConfig+0xa0>)
 800b922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b926:	bf00      	nop
 800b928:	0800b939 	.word	0x0800b939
 800b92c:	0800b949 	.word	0x0800b949
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b951 	.word	0x0800b951
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b93e:	e116      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b940:	2302      	movs	r3, #2
 800b942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b946:	e112      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b948:	2304      	movs	r3, #4
 800b94a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b94e:	e10e      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b950:	2308      	movs	r3, #8
 800b952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b956:	e10a      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b958:	2310      	movs	r3, #16
 800b95a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b95e:	e106      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4a7c      	ldr	r2, [pc, #496]	; (800bb58 <UART_SetConfig+0x2d0>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d138      	bne.n	800b9dc <UART_SetConfig+0x154>
 800b96a:	4b7a      	ldr	r3, [pc, #488]	; (800bb54 <UART_SetConfig+0x2cc>)
 800b96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b970:	f003 030c 	and.w	r3, r3, #12
 800b974:	2b0c      	cmp	r3, #12
 800b976:	d82d      	bhi.n	800b9d4 <UART_SetConfig+0x14c>
 800b978:	a201      	add	r2, pc, #4	; (adr r2, 800b980 <UART_SetConfig+0xf8>)
 800b97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b97e:	bf00      	nop
 800b980:	0800b9b5 	.word	0x0800b9b5
 800b984:	0800b9d5 	.word	0x0800b9d5
 800b988:	0800b9d5 	.word	0x0800b9d5
 800b98c:	0800b9d5 	.word	0x0800b9d5
 800b990:	0800b9c5 	.word	0x0800b9c5
 800b994:	0800b9d5 	.word	0x0800b9d5
 800b998:	0800b9d5 	.word	0x0800b9d5
 800b99c:	0800b9d5 	.word	0x0800b9d5
 800b9a0:	0800b9bd 	.word	0x0800b9bd
 800b9a4:	0800b9d5 	.word	0x0800b9d5
 800b9a8:	0800b9d5 	.word	0x0800b9d5
 800b9ac:	0800b9d5 	.word	0x0800b9d5
 800b9b0:	0800b9cd 	.word	0x0800b9cd
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9ba:	e0d8      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b9bc:	2302      	movs	r3, #2
 800b9be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9c2:	e0d4      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b9c4:	2304      	movs	r3, #4
 800b9c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9ca:	e0d0      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b9cc:	2308      	movs	r3, #8
 800b9ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9d2:	e0cc      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b9d4:	2310      	movs	r3, #16
 800b9d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b9da:	e0c8      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a5e      	ldr	r2, [pc, #376]	; (800bb5c <UART_SetConfig+0x2d4>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d125      	bne.n	800ba32 <UART_SetConfig+0x1aa>
 800b9e6:	4b5b      	ldr	r3, [pc, #364]	; (800bb54 <UART_SetConfig+0x2cc>)
 800b9e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b9f0:	2b30      	cmp	r3, #48	; 0x30
 800b9f2:	d016      	beq.n	800ba22 <UART_SetConfig+0x19a>
 800b9f4:	2b30      	cmp	r3, #48	; 0x30
 800b9f6:	d818      	bhi.n	800ba2a <UART_SetConfig+0x1a2>
 800b9f8:	2b20      	cmp	r3, #32
 800b9fa:	d00a      	beq.n	800ba12 <UART_SetConfig+0x18a>
 800b9fc:	2b20      	cmp	r3, #32
 800b9fe:	d814      	bhi.n	800ba2a <UART_SetConfig+0x1a2>
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <UART_SetConfig+0x182>
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d008      	beq.n	800ba1a <UART_SetConfig+0x192>
 800ba08:	e00f      	b.n	800ba2a <UART_SetConfig+0x1a2>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba10:	e0ad      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba12:	2302      	movs	r3, #2
 800ba14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba18:	e0a9      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba1a:	2304      	movs	r3, #4
 800ba1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba20:	e0a5      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba22:	2308      	movs	r3, #8
 800ba24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba28:	e0a1      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba2a:	2310      	movs	r3, #16
 800ba2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba30:	e09d      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a4a      	ldr	r2, [pc, #296]	; (800bb60 <UART_SetConfig+0x2d8>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d125      	bne.n	800ba88 <UART_SetConfig+0x200>
 800ba3c:	4b45      	ldr	r3, [pc, #276]	; (800bb54 <UART_SetConfig+0x2cc>)
 800ba3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ba46:	2bc0      	cmp	r3, #192	; 0xc0
 800ba48:	d016      	beq.n	800ba78 <UART_SetConfig+0x1f0>
 800ba4a:	2bc0      	cmp	r3, #192	; 0xc0
 800ba4c:	d818      	bhi.n	800ba80 <UART_SetConfig+0x1f8>
 800ba4e:	2b80      	cmp	r3, #128	; 0x80
 800ba50:	d00a      	beq.n	800ba68 <UART_SetConfig+0x1e0>
 800ba52:	2b80      	cmp	r3, #128	; 0x80
 800ba54:	d814      	bhi.n	800ba80 <UART_SetConfig+0x1f8>
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d002      	beq.n	800ba60 <UART_SetConfig+0x1d8>
 800ba5a:	2b40      	cmp	r3, #64	; 0x40
 800ba5c:	d008      	beq.n	800ba70 <UART_SetConfig+0x1e8>
 800ba5e:	e00f      	b.n	800ba80 <UART_SetConfig+0x1f8>
 800ba60:	2300      	movs	r3, #0
 800ba62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba66:	e082      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba68:	2302      	movs	r3, #2
 800ba6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba6e:	e07e      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba70:	2304      	movs	r3, #4
 800ba72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba76:	e07a      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba78:	2308      	movs	r3, #8
 800ba7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba7e:	e076      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba80:	2310      	movs	r3, #16
 800ba82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ba86:	e072      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a35      	ldr	r2, [pc, #212]	; (800bb64 <UART_SetConfig+0x2dc>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d12a      	bne.n	800bae8 <UART_SetConfig+0x260>
 800ba92:	4b30      	ldr	r3, [pc, #192]	; (800bb54 <UART_SetConfig+0x2cc>)
 800ba94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800baa0:	d01a      	beq.n	800bad8 <UART_SetConfig+0x250>
 800baa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800baa6:	d81b      	bhi.n	800bae0 <UART_SetConfig+0x258>
 800baa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baac:	d00c      	beq.n	800bac8 <UART_SetConfig+0x240>
 800baae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bab2:	d815      	bhi.n	800bae0 <UART_SetConfig+0x258>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d003      	beq.n	800bac0 <UART_SetConfig+0x238>
 800bab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800babc:	d008      	beq.n	800bad0 <UART_SetConfig+0x248>
 800babe:	e00f      	b.n	800bae0 <UART_SetConfig+0x258>
 800bac0:	2300      	movs	r3, #0
 800bac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bac6:	e052      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bac8:	2302      	movs	r3, #2
 800baca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bace:	e04e      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bad0:	2304      	movs	r3, #4
 800bad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bad6:	e04a      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bad8:	2308      	movs	r3, #8
 800bada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bade:	e046      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bae0:	2310      	movs	r3, #16
 800bae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bae6:	e042      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a17      	ldr	r2, [pc, #92]	; (800bb4c <UART_SetConfig+0x2c4>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d13a      	bne.n	800bb68 <UART_SetConfig+0x2e0>
 800baf2:	4b18      	ldr	r3, [pc, #96]	; (800bb54 <UART_SetConfig+0x2cc>)
 800baf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baf8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bafc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb00:	d01a      	beq.n	800bb38 <UART_SetConfig+0x2b0>
 800bb02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb06:	d81b      	bhi.n	800bb40 <UART_SetConfig+0x2b8>
 800bb08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb0c:	d00c      	beq.n	800bb28 <UART_SetConfig+0x2a0>
 800bb0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb12:	d815      	bhi.n	800bb40 <UART_SetConfig+0x2b8>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d003      	beq.n	800bb20 <UART_SetConfig+0x298>
 800bb18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb1c:	d008      	beq.n	800bb30 <UART_SetConfig+0x2a8>
 800bb1e:	e00f      	b.n	800bb40 <UART_SetConfig+0x2b8>
 800bb20:	2300      	movs	r3, #0
 800bb22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb26:	e022      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bb28:	2302      	movs	r3, #2
 800bb2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb2e:	e01e      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bb30:	2304      	movs	r3, #4
 800bb32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb36:	e01a      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bb38:	2308      	movs	r3, #8
 800bb3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb3e:	e016      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bb40:	2310      	movs	r3, #16
 800bb42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800bb46:	e012      	b.n	800bb6e <UART_SetConfig+0x2e6>
 800bb48:	efff69f3 	.word	0xefff69f3
 800bb4c:	40008000 	.word	0x40008000
 800bb50:	40013800 	.word	0x40013800
 800bb54:	40021000 	.word	0x40021000
 800bb58:	40004400 	.word	0x40004400
 800bb5c:	40004800 	.word	0x40004800
 800bb60:	40004c00 	.word	0x40004c00
 800bb64:	40005000 	.word	0x40005000
 800bb68:	2310      	movs	r3, #16
 800bb6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4a9f      	ldr	r2, [pc, #636]	; (800bdf0 <UART_SetConfig+0x568>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d17a      	bne.n	800bc6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bb7c:	2b08      	cmp	r3, #8
 800bb7e:	d824      	bhi.n	800bbca <UART_SetConfig+0x342>
 800bb80:	a201      	add	r2, pc, #4	; (adr r2, 800bb88 <UART_SetConfig+0x300>)
 800bb82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb86:	bf00      	nop
 800bb88:	0800bbad 	.word	0x0800bbad
 800bb8c:	0800bbcb 	.word	0x0800bbcb
 800bb90:	0800bbb5 	.word	0x0800bbb5
 800bb94:	0800bbcb 	.word	0x0800bbcb
 800bb98:	0800bbbb 	.word	0x0800bbbb
 800bb9c:	0800bbcb 	.word	0x0800bbcb
 800bba0:	0800bbcb 	.word	0x0800bbcb
 800bba4:	0800bbcb 	.word	0x0800bbcb
 800bba8:	0800bbc3 	.word	0x0800bbc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbac:	f7fd fade 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 800bbb0:	61f8      	str	r0, [r7, #28]
        break;
 800bbb2:	e010      	b.n	800bbd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbb4:	4b8f      	ldr	r3, [pc, #572]	; (800bdf4 <UART_SetConfig+0x56c>)
 800bbb6:	61fb      	str	r3, [r7, #28]
        break;
 800bbb8:	e00d      	b.n	800bbd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbba:	f7fd fa3f 	bl	800903c <HAL_RCC_GetSysClockFreq>
 800bbbe:	61f8      	str	r0, [r7, #28]
        break;
 800bbc0:	e009      	b.n	800bbd6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbc6:	61fb      	str	r3, [r7, #28]
        break;
 800bbc8:	e005      	b.n	800bbd6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bbce:	2301      	movs	r3, #1
 800bbd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bbd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 80fb 	beq.w	800bdd4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	685a      	ldr	r2, [r3, #4]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	005b      	lsls	r3, r3, #1
 800bbe6:	4413      	add	r3, r2
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d305      	bcc.n	800bbfa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800bbf4:	69fa      	ldr	r2, [r7, #28]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d903      	bls.n	800bc02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bc00:	e0e8      	b.n	800bdd4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	2200      	movs	r2, #0
 800bc06:	461c      	mov	r4, r3
 800bc08:	4615      	mov	r5, r2
 800bc0a:	f04f 0200 	mov.w	r2, #0
 800bc0e:	f04f 0300 	mov.w	r3, #0
 800bc12:	022b      	lsls	r3, r5, #8
 800bc14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bc18:	0222      	lsls	r2, r4, #8
 800bc1a:	68f9      	ldr	r1, [r7, #12]
 800bc1c:	6849      	ldr	r1, [r1, #4]
 800bc1e:	0849      	lsrs	r1, r1, #1
 800bc20:	2000      	movs	r0, #0
 800bc22:	4688      	mov	r8, r1
 800bc24:	4681      	mov	r9, r0
 800bc26:	eb12 0a08 	adds.w	sl, r2, r8
 800bc2a:	eb43 0b09 	adc.w	fp, r3, r9
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2200      	movs	r2, #0
 800bc34:	603b      	str	r3, [r7, #0]
 800bc36:	607a      	str	r2, [r7, #4]
 800bc38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc3c:	4650      	mov	r0, sl
 800bc3e:	4659      	mov	r1, fp
 800bc40:	f7f4 fffa 	bl	8000c38 <__aeabi_uldivmod>
 800bc44:	4602      	mov	r2, r0
 800bc46:	460b      	mov	r3, r1
 800bc48:	4613      	mov	r3, r2
 800bc4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc4c:	69bb      	ldr	r3, [r7, #24]
 800bc4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc52:	d308      	bcc.n	800bc66 <UART_SetConfig+0x3de>
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc5a:	d204      	bcs.n	800bc66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	60da      	str	r2, [r3, #12]
 800bc64:	e0b6      	b.n	800bdd4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bc6c:	e0b2      	b.n	800bdd4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	69db      	ldr	r3, [r3, #28]
 800bc72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc76:	d15e      	bne.n	800bd36 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800bc78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc7c:	2b08      	cmp	r3, #8
 800bc7e:	d828      	bhi.n	800bcd2 <UART_SetConfig+0x44a>
 800bc80:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <UART_SetConfig+0x400>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bcad 	.word	0x0800bcad
 800bc8c:	0800bcb5 	.word	0x0800bcb5
 800bc90:	0800bcbd 	.word	0x0800bcbd
 800bc94:	0800bcd3 	.word	0x0800bcd3
 800bc98:	0800bcc3 	.word	0x0800bcc3
 800bc9c:	0800bcd3 	.word	0x0800bcd3
 800bca0:	0800bcd3 	.word	0x0800bcd3
 800bca4:	0800bcd3 	.word	0x0800bcd3
 800bca8:	0800bccb 	.word	0x0800bccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcac:	f7fd fa5e 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 800bcb0:	61f8      	str	r0, [r7, #28]
        break;
 800bcb2:	e014      	b.n	800bcde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcb4:	f7fd fa70 	bl	8009198 <HAL_RCC_GetPCLK2Freq>
 800bcb8:	61f8      	str	r0, [r7, #28]
        break;
 800bcba:	e010      	b.n	800bcde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcbc:	4b4d      	ldr	r3, [pc, #308]	; (800bdf4 <UART_SetConfig+0x56c>)
 800bcbe:	61fb      	str	r3, [r7, #28]
        break;
 800bcc0:	e00d      	b.n	800bcde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcc2:	f7fd f9bb 	bl	800903c <HAL_RCC_GetSysClockFreq>
 800bcc6:	61f8      	str	r0, [r7, #28]
        break;
 800bcc8:	e009      	b.n	800bcde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcce:	61fb      	str	r3, [r7, #28]
        break;
 800bcd0:	e005      	b.n	800bcde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bcdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d077      	beq.n	800bdd4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	005a      	lsls	r2, r3, #1
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	085b      	lsrs	r3, r3, #1
 800bcee:	441a      	add	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcf8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	2b0f      	cmp	r3, #15
 800bcfe:	d916      	bls.n	800bd2e <UART_SetConfig+0x4a6>
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd06:	d212      	bcs.n	800bd2e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	f023 030f 	bic.w	r3, r3, #15
 800bd10:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	085b      	lsrs	r3, r3, #1
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	f003 0307 	and.w	r3, r3, #7
 800bd1c:	b29a      	uxth	r2, r3
 800bd1e:	8afb      	ldrh	r3, [r7, #22]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	8afa      	ldrh	r2, [r7, #22]
 800bd2a:	60da      	str	r2, [r3, #12]
 800bd2c:	e052      	b.n	800bdd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd2e:	2301      	movs	r3, #1
 800bd30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800bd34:	e04e      	b.n	800bdd4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd3a:	2b08      	cmp	r3, #8
 800bd3c:	d827      	bhi.n	800bd8e <UART_SetConfig+0x506>
 800bd3e:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <UART_SetConfig+0x4bc>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bd69 	.word	0x0800bd69
 800bd48:	0800bd71 	.word	0x0800bd71
 800bd4c:	0800bd79 	.word	0x0800bd79
 800bd50:	0800bd8f 	.word	0x0800bd8f
 800bd54:	0800bd7f 	.word	0x0800bd7f
 800bd58:	0800bd8f 	.word	0x0800bd8f
 800bd5c:	0800bd8f 	.word	0x0800bd8f
 800bd60:	0800bd8f 	.word	0x0800bd8f
 800bd64:	0800bd87 	.word	0x0800bd87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd68:	f7fd fa00 	bl	800916c <HAL_RCC_GetPCLK1Freq>
 800bd6c:	61f8      	str	r0, [r7, #28]
        break;
 800bd6e:	e014      	b.n	800bd9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd70:	f7fd fa12 	bl	8009198 <HAL_RCC_GetPCLK2Freq>
 800bd74:	61f8      	str	r0, [r7, #28]
        break;
 800bd76:	e010      	b.n	800bd9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd78:	4b1e      	ldr	r3, [pc, #120]	; (800bdf4 <UART_SetConfig+0x56c>)
 800bd7a:	61fb      	str	r3, [r7, #28]
        break;
 800bd7c:	e00d      	b.n	800bd9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd7e:	f7fd f95d 	bl	800903c <HAL_RCC_GetSysClockFreq>
 800bd82:	61f8      	str	r0, [r7, #28]
        break;
 800bd84:	e009      	b.n	800bd9a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd8a:	61fb      	str	r3, [r7, #28]
        break;
 800bd8c:	e005      	b.n	800bd9a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800bd98:	bf00      	nop
    }

    if (pclk != 0U)
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d019      	beq.n	800bdd4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	085a      	lsrs	r2, r3, #1
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	441a      	add	r2, r3
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	2b0f      	cmp	r3, #15
 800bdb8:	d909      	bls.n	800bdce <UART_SetConfig+0x546>
 800bdba:	69bb      	ldr	r3, [r7, #24]
 800bdbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc0:	d205      	bcs.n	800bdce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	b29a      	uxth	r2, r3
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	60da      	str	r2, [r3, #12]
 800bdcc:	e002      	b.n	800bdd4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800bde0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3728      	adds	r7, #40	; 0x28
 800bde8:	46bd      	mov	sp, r7
 800bdea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bdee:	bf00      	nop
 800bdf0:	40008000 	.word	0x40008000
 800bdf4:	00f42400 	.word	0x00f42400

0800bdf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00a      	beq.n	800be22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	430a      	orrs	r2, r1
 800be20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	f003 0302 	and.w	r3, r3, #2
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00a      	beq.n	800be44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00a      	beq.n	800be66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6a:	f003 0308 	and.w	r3, r3, #8
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00a      	beq.n	800be88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	430a      	orrs	r2, r1
 800be86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8c:	f003 0310 	and.w	r3, r3, #16
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00a      	beq.n	800beaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	430a      	orrs	r2, r1
 800bea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beae:	f003 0320 	and.w	r3, r3, #32
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	430a      	orrs	r2, r1
 800beca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d01a      	beq.n	800bf0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	430a      	orrs	r2, r1
 800beec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bef6:	d10a      	bne.n	800bf0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	430a      	orrs	r2, r1
 800bf0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00a      	beq.n	800bf30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	430a      	orrs	r2, r1
 800bf2e:	605a      	str	r2, [r3, #4]
  }
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf4c:	f7f9 ff14 	bl	8005d78 <HAL_GetTick>
 800bf50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 0308 	and.w	r3, r3, #8
 800bf5c:	2b08      	cmp	r3, #8
 800bf5e:	d10e      	bne.n	800bf7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 f82d 	bl	800bfce <UART_WaitOnFlagUntilTimeout>
 800bf74:	4603      	mov	r3, r0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d001      	beq.n	800bf7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	e023      	b.n	800bfc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	d10e      	bne.n	800bfaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f817 	bl	800bfce <UART_WaitOnFlagUntilTimeout>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfa6:	2303      	movs	r3, #3
 800bfa8:	e00d      	b.n	800bfc6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2220      	movs	r2, #32
 800bfae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2220      	movs	r2, #32
 800bfb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3710      	adds	r7, #16
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}

0800bfce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bfce:	b580      	push	{r7, lr}
 800bfd0:	b09c      	sub	sp, #112	; 0x70
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	60f8      	str	r0, [r7, #12]
 800bfd6:	60b9      	str	r1, [r7, #8]
 800bfd8:	603b      	str	r3, [r7, #0]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfde:	e0a5      	b.n	800c12c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfe0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe6:	f000 80a1 	beq.w	800c12c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfea:	f7f9 fec5 	bl	8005d78 <HAL_GetTick>
 800bfee:	4602      	mov	r2, r0
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	1ad3      	subs	r3, r2, r3
 800bff4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d302      	bcc.n	800c000 <UART_WaitOnFlagUntilTimeout+0x32>
 800bffa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d13e      	bne.n	800c07e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c008:	e853 3f00 	ldrex	r3, [r3]
 800c00c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c010:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c014:	667b      	str	r3, [r7, #100]	; 0x64
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c01e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c020:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c022:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c024:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c026:	e841 2300 	strex	r3, r2, [r1]
 800c02a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d1e6      	bne.n	800c000 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	3308      	adds	r3, #8
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03c:	e853 3f00 	ldrex	r3, [r3]
 800c040:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c044:	f023 0301 	bic.w	r3, r3, #1
 800c048:	663b      	str	r3, [r7, #96]	; 0x60
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3308      	adds	r3, #8
 800c050:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c052:	64ba      	str	r2, [r7, #72]	; 0x48
 800c054:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c056:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c058:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c05a:	e841 2300 	strex	r3, r2, [r1]
 800c05e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c062:	2b00      	cmp	r3, #0
 800c064:	d1e5      	bne.n	800c032 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2220      	movs	r2, #32
 800c06a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2220      	movs	r2, #32
 800c070:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c07a:	2303      	movs	r3, #3
 800c07c:	e067      	b.n	800c14e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d04f      	beq.n	800c12c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	69db      	ldr	r3, [r3, #28]
 800c092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c09a:	d147      	bne.n	800c12c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ae:	e853 3f00 	ldrex	r3, [r3]
 800c0b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c0ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c0c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0cc:	e841 2300 	strex	r3, r2, [r1]
 800c0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d1e6      	bne.n	800c0a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	3308      	adds	r3, #8
 800c0de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	e853 3f00 	ldrex	r3, [r3]
 800c0e6:	613b      	str	r3, [r7, #16]
   return(result);
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	f023 0301 	bic.w	r3, r3, #1
 800c0ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c0f8:	623a      	str	r2, [r7, #32]
 800c0fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fc:	69f9      	ldr	r1, [r7, #28]
 800c0fe:	6a3a      	ldr	r2, [r7, #32]
 800c100:	e841 2300 	strex	r3, r2, [r1]
 800c104:	61bb      	str	r3, [r7, #24]
   return(result);
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1e5      	bne.n	800c0d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2220      	movs	r2, #32
 800c110:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2220      	movs	r2, #32
 800c116:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	2220      	movs	r2, #32
 800c11c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2200      	movs	r2, #0
 800c124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c128:	2303      	movs	r3, #3
 800c12a:	e010      	b.n	800c14e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	69da      	ldr	r2, [r3, #28]
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	4013      	ands	r3, r2
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	429a      	cmp	r2, r3
 800c13a:	bf0c      	ite	eq
 800c13c:	2301      	moveq	r3, #1
 800c13e:	2300      	movne	r3, #0
 800c140:	b2db      	uxtb	r3, r3
 800c142:	461a      	mov	r2, r3
 800c144:	79fb      	ldrb	r3, [r7, #7]
 800c146:	429a      	cmp	r2, r3
 800c148:	f43f af4a 	beq.w	800bfe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3770      	adds	r7, #112	; 0x70
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
	...

0800c158 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c158:	b480      	push	{r7}
 800c15a:	b097      	sub	sp, #92	; 0x5c
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	60f8      	str	r0, [r7, #12]
 800c160:	60b9      	str	r1, [r7, #8]
 800c162:	4613      	mov	r3, r2
 800c164:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	88fa      	ldrh	r2, [r7, #6]
 800c170:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	88fa      	ldrh	r2, [r7, #6]
 800c178:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c18a:	d10e      	bne.n	800c1aa <UART_Start_Receive_IT+0x52>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d105      	bne.n	800c1a0 <UART_Start_Receive_IT+0x48>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c19a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c19e:	e02d      	b.n	800c1fc <UART_Start_Receive_IT+0xa4>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	22ff      	movs	r2, #255	; 0xff
 800c1a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1a8:	e028      	b.n	800c1fc <UART_Start_Receive_IT+0xa4>
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10d      	bne.n	800c1ce <UART_Start_Receive_IT+0x76>
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d104      	bne.n	800c1c4 <UART_Start_Receive_IT+0x6c>
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	22ff      	movs	r2, #255	; 0xff
 800c1be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1c2:	e01b      	b.n	800c1fc <UART_Start_Receive_IT+0xa4>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	227f      	movs	r2, #127	; 0x7f
 800c1c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1cc:	e016      	b.n	800c1fc <UART_Start_Receive_IT+0xa4>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1d6:	d10d      	bne.n	800c1f4 <UART_Start_Receive_IT+0x9c>
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d104      	bne.n	800c1ea <UART_Start_Receive_IT+0x92>
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	227f      	movs	r2, #127	; 0x7f
 800c1e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1e8:	e008      	b.n	800c1fc <UART_Start_Receive_IT+0xa4>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	223f      	movs	r2, #63	; 0x3f
 800c1ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c1f2:	e003      	b.n	800c1fc <UART_Start_Receive_IT+0xa4>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2222      	movs	r2, #34	; 0x22
 800c208:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3308      	adds	r3, #8
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21c:	f043 0301 	orr.w	r3, r3, #1
 800c220:	657b      	str	r3, [r7, #84]	; 0x54
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3308      	adds	r3, #8
 800c228:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c22a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c22c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c232:	e841 2300 	strex	r3, r2, [r1]
 800c236:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d1e5      	bne.n	800c20a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	689b      	ldr	r3, [r3, #8]
 800c242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c246:	d107      	bne.n	800c258 <UART_Start_Receive_IT+0x100>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	691b      	ldr	r3, [r3, #16]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d103      	bne.n	800c258 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4a24      	ldr	r2, [pc, #144]	; (800c2e4 <UART_Start_Receive_IT+0x18c>)
 800c254:	665a      	str	r2, [r3, #100]	; 0x64
 800c256:	e002      	b.n	800c25e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	4a23      	ldr	r2, [pc, #140]	; (800c2e8 <UART_Start_Receive_IT+0x190>)
 800c25c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2200      	movs	r2, #0
 800c262:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	691b      	ldr	r3, [r3, #16]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d019      	beq.n	800c2a2 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	e853 3f00 	ldrex	r3, [r3]
 800c27a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c282:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	461a      	mov	r2, r3
 800c28a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c28c:	637b      	str	r3, [r7, #52]	; 0x34
 800c28e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c290:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c292:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c294:	e841 2300 	strex	r3, r2, [r1]
 800c298:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e6      	bne.n	800c26e <UART_Start_Receive_IT+0x116>
 800c2a0:	e018      	b.n	800c2d4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	e853 3f00 	ldrex	r3, [r3]
 800c2ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	f043 0320 	orr.w	r3, r3, #32
 800c2b6:	653b      	str	r3, [r7, #80]	; 0x50
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	461a      	mov	r2, r3
 800c2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c2c0:	623b      	str	r3, [r7, #32]
 800c2c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2c4:	69f9      	ldr	r1, [r7, #28]
 800c2c6:	6a3a      	ldr	r2, [r7, #32]
 800c2c8:	e841 2300 	strex	r3, r2, [r1]
 800c2cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d1e6      	bne.n	800c2a2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	375c      	adds	r7, #92	; 0x5c
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	0800c70b 	.word	0x0800c70b
 800c2e8:	0800c5ab 	.word	0x0800c5ab

0800c2ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b095      	sub	sp, #84	; 0x54
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fc:	e853 3f00 	ldrex	r3, [r3]
 800c300:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c312:	643b      	str	r3, [r7, #64]	; 0x40
 800c314:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c316:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c31a:	e841 2300 	strex	r3, r2, [r1]
 800c31e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1e6      	bne.n	800c2f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	3308      	adds	r3, #8
 800c32c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32e:	6a3b      	ldr	r3, [r7, #32]
 800c330:	e853 3f00 	ldrex	r3, [r3]
 800c334:	61fb      	str	r3, [r7, #28]
   return(result);
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	f023 0301 	bic.w	r3, r3, #1
 800c33c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3308      	adds	r3, #8
 800c344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c346:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c34e:	e841 2300 	strex	r3, r2, [r1]
 800c352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1e5      	bne.n	800c326 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d118      	bne.n	800c394 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f023 0310 	bic.w	r3, r3, #16
 800c376:	647b      	str	r3, [r7, #68]	; 0x44
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	461a      	mov	r2, r3
 800c37e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c380:	61bb      	str	r3, [r7, #24]
 800c382:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c384:	6979      	ldr	r1, [r7, #20]
 800c386:	69ba      	ldr	r2, [r7, #24]
 800c388:	e841 2300 	strex	r3, r2, [r1]
 800c38c:	613b      	str	r3, [r7, #16]
   return(result);
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d1e6      	bne.n	800c362 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2220      	movs	r2, #32
 800c398:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c3a6:	bf00      	nop
 800c3a8:	3754      	adds	r7, #84	; 0x54
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b084      	sub	sp, #16
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c3d0:	68f8      	ldr	r0, [r7, #12]
 800c3d2:	f7ff fa43 	bl	800b85c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c3d6:	bf00      	nop
 800c3d8:	3710      	adds	r7, #16
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}

0800c3de <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b08f      	sub	sp, #60	; 0x3c
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3ea:	2b21      	cmp	r3, #33	; 0x21
 800c3ec:	d14d      	bne.n	800c48a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d132      	bne.n	800c460 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	e853 3f00 	ldrex	r3, [r3]
 800c406:	61fb      	str	r3, [r7, #28]
   return(result);
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c40e:	637b      	str	r3, [r7, #52]	; 0x34
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	461a      	mov	r2, r3
 800c416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c41a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c420:	e841 2300 	strex	r3, r2, [r1]
 800c424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1e6      	bne.n	800c3fa <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	e853 3f00 	ldrex	r3, [r3]
 800c438:	60bb      	str	r3, [r7, #8]
   return(result);
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c440:	633b      	str	r3, [r7, #48]	; 0x30
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	461a      	mov	r2, r3
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	61bb      	str	r3, [r7, #24]
 800c44c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44e:	6979      	ldr	r1, [r7, #20]
 800c450:	69ba      	ldr	r2, [r7, #24]
 800c452:	e841 2300 	strex	r3, r2, [r1]
 800c456:	613b      	str	r3, [r7, #16]
   return(result);
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1e6      	bne.n	800c42c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c45e:	e014      	b.n	800c48a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c464:	781a      	ldrb	r2, [r3, #0]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	b292      	uxth	r2, r2
 800c46c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c472:	1c5a      	adds	r2, r3, #1
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c47e:	b29b      	uxth	r3, r3
 800c480:	3b01      	subs	r3, #1
 800c482:	b29a      	uxth	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c48a:	bf00      	nop
 800c48c:	373c      	adds	r7, #60	; 0x3c
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr

0800c496 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c496:	b480      	push	{r7}
 800c498:	b091      	sub	sp, #68	; 0x44
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4a2:	2b21      	cmp	r3, #33	; 0x21
 800c4a4:	d151      	bne.n	800c54a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d132      	bne.n	800c518 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	e853 3f00 	ldrex	r3, [r3]
 800c4be:	623b      	str	r3, [r7, #32]
   return(result);
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d0:	633b      	str	r3, [r7, #48]	; 0x30
 800c4d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4d8:	e841 2300 	strex	r3, r2, [r1]
 800c4dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d1e6      	bne.n	800c4b2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	e853 3f00 	ldrex	r3, [r3]
 800c4f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f8:	637b      	str	r3, [r7, #52]	; 0x34
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c502:	61fb      	str	r3, [r7, #28]
 800c504:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c506:	69b9      	ldr	r1, [r7, #24]
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	e841 2300 	strex	r3, r2, [r1]
 800c50e:	617b      	str	r3, [r7, #20]
   return(result);
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1e6      	bne.n	800c4e4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c516:	e018      	b.n	800c54a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c51c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c520:	881a      	ldrh	r2, [r3, #0]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c52a:	b292      	uxth	r2, r2
 800c52c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c532:	1c9a      	adds	r2, r3, #2
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c53e:	b29b      	uxth	r3, r3
 800c540:	3b01      	subs	r3, #1
 800c542:	b29a      	uxth	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c54a:	bf00      	nop
 800c54c:	3744      	adds	r7, #68	; 0x44
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b088      	sub	sp, #32
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	e853 3f00 	ldrex	r3, [r3]
 800c56a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c572:	61fb      	str	r3, [r7, #28]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	461a      	mov	r2, r3
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	61bb      	str	r3, [r7, #24]
 800c57e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c580:	6979      	ldr	r1, [r7, #20]
 800c582:	69ba      	ldr	r2, [r7, #24]
 800c584:	e841 2300 	strex	r3, r2, [r1]
 800c588:	613b      	str	r3, [r7, #16]
   return(result);
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d1e6      	bne.n	800c55e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2220      	movs	r2, #32
 800c594:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f7f4 fd79 	bl	8001094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c5a2:	bf00      	nop
 800c5a4:	3720      	adds	r7, #32
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b096      	sub	sp, #88	; 0x58
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c0:	2b22      	cmp	r3, #34	; 0x22
 800c5c2:	f040 8094 	bne.w	800c6ee <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c5cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c5d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c5d4:	b2d9      	uxtb	r1, r3
 800c5d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5e0:	400a      	ands	r2, r1
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ea:	1c5a      	adds	r2, r3, #1
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c608:	b29b      	uxth	r3, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d179      	bne.n	800c702 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	e853 3f00 	ldrex	r3, [r3]
 800c61a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c61c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c622:	653b      	str	r3, [r7, #80]	; 0x50
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	461a      	mov	r2, r3
 800c62a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c62c:	647b      	str	r3, [r7, #68]	; 0x44
 800c62e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c630:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c634:	e841 2300 	strex	r3, r2, [r1]
 800c638:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c63a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d1e6      	bne.n	800c60e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3308      	adds	r3, #8
 800c646:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64a:	e853 3f00 	ldrex	r3, [r3]
 800c64e:	623b      	str	r3, [r7, #32]
   return(result);
 800c650:	6a3b      	ldr	r3, [r7, #32]
 800c652:	f023 0301 	bic.w	r3, r3, #1
 800c656:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	3308      	adds	r3, #8
 800c65e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c660:	633a      	str	r2, [r7, #48]	; 0x30
 800c662:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c668:	e841 2300 	strex	r3, r2, [r1]
 800c66c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c670:	2b00      	cmp	r3, #0
 800c672:	d1e5      	bne.n	800c640 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2220      	movs	r2, #32
 800c678:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2200      	movs	r2, #0
 800c67e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c684:	2b01      	cmp	r3, #1
 800c686:	d12e      	bne.n	800c6e6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f023 0310 	bic.w	r3, r3, #16
 800c6a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ac:	61fb      	str	r3, [r7, #28]
 800c6ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b0:	69b9      	ldr	r1, [r7, #24]
 800c6b2:	69fa      	ldr	r2, [r7, #28]
 800c6b4:	e841 2300 	strex	r3, r2, [r1]
 800c6b8:	617b      	str	r3, [r7, #20]
   return(result);
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1e6      	bne.n	800c68e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	f003 0310 	and.w	r3, r3, #16
 800c6ca:	2b10      	cmp	r3, #16
 800c6cc:	d103      	bne.n	800c6d6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2210      	movs	r2, #16
 800c6d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c6dc:	4619      	mov	r1, r3
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f7ff f8c6 	bl	800b870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6e4:	e00d      	b.n	800c702 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7f4 fcde 	bl	80010a8 <HAL_UART_RxCpltCallback>
}
 800c6ec:	e009      	b.n	800c702 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	8b1b      	ldrh	r3, [r3, #24]
 800c6f4:	b29a      	uxth	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f042 0208 	orr.w	r2, r2, #8
 800c6fe:	b292      	uxth	r2, r2
 800c700:	831a      	strh	r2, [r3, #24]
}
 800c702:	bf00      	nop
 800c704:	3758      	adds	r7, #88	; 0x58
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c70a:	b580      	push	{r7, lr}
 800c70c:	b096      	sub	sp, #88	; 0x58
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c718:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c720:	2b22      	cmp	r3, #34	; 0x22
 800c722:	f040 8094 	bne.w	800c84e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c72c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c734:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c736:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800c73a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c73e:	4013      	ands	r3, r2
 800c740:	b29a      	uxth	r2, r3
 800c742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c744:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c74a:	1c9a      	adds	r2, r3, #2
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c756:	b29b      	uxth	r3, r3
 800c758:	3b01      	subs	r3, #1
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c768:	b29b      	uxth	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d179      	bne.n	800c862 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	e853 3f00 	ldrex	r3, [r3]
 800c77a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c782:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	461a      	mov	r2, r3
 800c78a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c78c:	643b      	str	r3, [r7, #64]	; 0x40
 800c78e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c794:	e841 2300 	strex	r3, r2, [r1]
 800c798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d1e6      	bne.n	800c76e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a8:	6a3b      	ldr	r3, [r7, #32]
 800c7aa:	e853 3f00 	ldrex	r3, [r3]
 800c7ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	f023 0301 	bic.w	r3, r3, #1
 800c7b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	3308      	adds	r3, #8
 800c7be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7c8:	e841 2300 	strex	r3, r2, [r1]
 800c7cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1e5      	bne.n	800c7a0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2220      	movs	r2, #32
 800c7d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d12e      	bne.n	800c846 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	e853 3f00 	ldrex	r3, [r3]
 800c7fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	f023 0310 	bic.w	r3, r3, #16
 800c802:	647b      	str	r3, [r7, #68]	; 0x44
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	461a      	mov	r2, r3
 800c80a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c80c:	61bb      	str	r3, [r7, #24]
 800c80e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c810:	6979      	ldr	r1, [r7, #20]
 800c812:	69ba      	ldr	r2, [r7, #24]
 800c814:	e841 2300 	strex	r3, r2, [r1]
 800c818:	613b      	str	r3, [r7, #16]
   return(result);
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d1e6      	bne.n	800c7ee <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	f003 0310 	and.w	r3, r3, #16
 800c82a:	2b10      	cmp	r3, #16
 800c82c:	d103      	bne.n	800c836 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2210      	movs	r2, #16
 800c834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff f816 	bl	800b870 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c844:	e00d      	b.n	800c862 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7f4 fc2e 	bl	80010a8 <HAL_UART_RxCpltCallback>
}
 800c84c:	e009      	b.n	800c862 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	8b1b      	ldrh	r3, [r3, #24]
 800c854:	b29a      	uxth	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f042 0208 	orr.w	r2, r2, #8
 800c85e:	b292      	uxth	r2, r2
 800c860:	831a      	strh	r2, [r3, #24]
}
 800c862:	bf00      	nop
 800c864:	3758      	adds	r7, #88	; 0x58
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}

0800c86a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c86a:	b480      	push	{r7}
 800c86c:	b083      	sub	sp, #12
 800c86e:	af00      	add	r7, sp, #0
 800c870:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c872:	bf00      	nop
 800c874:	370c      	adds	r7, #12
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr

0800c87e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c87e:	b480      	push	{r7}
 800c880:	b085      	sub	sp, #20
 800c882:	af00      	add	r7, sp, #0
 800c884:	4603      	mov	r3, r0
 800c886:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c88c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c890:	2b84      	cmp	r3, #132	; 0x84
 800c892:	d005      	beq.n	800c8a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c894:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	4413      	add	r3, r2
 800c89c:	3303      	adds	r3, #3
 800c89e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3714      	adds	r7, #20
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c8b2:	f000 ff37 	bl	800d724 <vTaskStartScheduler>
  
  return osOK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8be:	b089      	sub	sp, #36	; 0x24
 800c8c0:	af04      	add	r7, sp, #16
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	695b      	ldr	r3, [r3, #20]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d020      	beq.n	800c910 <osThreadCreate+0x54>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d01c      	beq.n	800c910 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685c      	ldr	r4, [r3, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681d      	ldr	r5, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	691e      	ldr	r6, [r3, #16]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f7ff ffc8 	bl	800c87e <makeFreeRtosPriority>
 800c8ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c8f8:	9202      	str	r2, [sp, #8]
 800c8fa:	9301      	str	r3, [sp, #4]
 800c8fc:	9100      	str	r1, [sp, #0]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	4632      	mov	r2, r6
 800c902:	4629      	mov	r1, r5
 800c904:	4620      	mov	r0, r4
 800c906:	f000 fcc7 	bl	800d298 <xTaskCreateStatic>
 800c90a:	4603      	mov	r3, r0
 800c90c:	60fb      	str	r3, [r7, #12]
 800c90e:	e01c      	b.n	800c94a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685c      	ldr	r4, [r3, #4]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c91c:	b29e      	uxth	r6, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c924:	4618      	mov	r0, r3
 800c926:	f7ff ffaa 	bl	800c87e <makeFreeRtosPriority>
 800c92a:	4602      	mov	r2, r0
 800c92c:	f107 030c 	add.w	r3, r7, #12
 800c930:	9301      	str	r3, [sp, #4]
 800c932:	9200      	str	r2, [sp, #0]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	4632      	mov	r2, r6
 800c938:	4629      	mov	r1, r5
 800c93a:	4620      	mov	r0, r4
 800c93c:	f000 fd09 	bl	800d352 <xTaskCreate>
 800c940:	4603      	mov	r3, r0
 800c942:	2b01      	cmp	r3, #1
 800c944:	d001      	beq.n	800c94a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c946:	2300      	movs	r3, #0
 800c948:	e000      	b.n	800c94c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c94a:	68fb      	ldr	r3, [r7, #12]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3714      	adds	r7, #20
 800c950:	46bd      	mov	sp, r7
 800c952:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c954 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d001      	beq.n	800c96a <osDelay+0x16>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	e000      	b.n	800c96c <osDelay+0x18>
 800c96a:	2301      	movs	r3, #1
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fea5 	bl	800d6bc <vTaskDelay>
  
  return osOK;
 800c972:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f103 0208 	add.w	r2, r3, #8
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f04f 32ff 	mov.w	r2, #4294967295
 800c994:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f103 0208 	add.w	r2, r3, #8
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f103 0208 	add.w	r2, r3, #8
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c9ca:	bf00      	nop
 800c9cc:	370c      	adds	r7, #12
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9d6:	b480      	push	{r7}
 800c9d8:	b085      	sub	sp, #20
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
 800c9de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	689a      	ldr	r2, [r3, #8]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	683a      	ldr	r2, [r7, #0]
 800c9fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	683a      	ldr	r2, [r7, #0]
 800ca00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	1c5a      	adds	r2, r3, #1
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	601a      	str	r2, [r3, #0]
}
 800ca12:	bf00      	nop
 800ca14:	3714      	adds	r7, #20
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca1e:	b480      	push	{r7}
 800ca20:	b085      	sub	sp, #20
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca34:	d103      	bne.n	800ca3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e00c      	b.n	800ca58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	3308      	adds	r3, #8
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	e002      	b.n	800ca4c <vListInsert+0x2e>
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d2f6      	bcs.n	800ca46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	685a      	ldr	r2, [r3, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	68fa      	ldr	r2, [r7, #12]
 800ca6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	1c5a      	adds	r2, r3, #1
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	601a      	str	r2, [r3, #0]
}
 800ca84:	bf00      	nop
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	6892      	ldr	r2, [r2, #8]
 800caa6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	6852      	ldr	r2, [r2, #4]
 800cab0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	429a      	cmp	r2, r3
 800caba:	d103      	bne.n	800cac4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689a      	ldr	r2, [r3, #8]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	1e5a      	subs	r2, r3, #1
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d10a      	bne.n	800cb0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800caf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafc:	f383 8811 	msr	BASEPRI, r3
 800cb00:	f3bf 8f6f 	isb	sy
 800cb04:	f3bf 8f4f 	dsb	sy
 800cb08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cb0a:	bf00      	nop
 800cb0c:	e7fe      	b.n	800cb0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb0e:	f001 fc51 	bl	800e3b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb1a:	68f9      	ldr	r1, [r7, #12]
 800cb1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb1e:	fb01 f303 	mul.w	r3, r1, r3
 800cb22:	441a      	add	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3e:	3b01      	subs	r3, #1
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb44:	fb01 f303 	mul.w	r3, r1, r3
 800cb48:	441a      	add	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	22ff      	movs	r2, #255	; 0xff
 800cb52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	22ff      	movs	r2, #255	; 0xff
 800cb5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d114      	bne.n	800cb8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	691b      	ldr	r3, [r3, #16]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01a      	beq.n	800cba2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3310      	adds	r3, #16
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 f829 	bl	800dbc8 <xTaskRemoveFromEventList>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d012      	beq.n	800cba2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb7c:	4b0c      	ldr	r3, [pc, #48]	; (800cbb0 <xQueueGenericReset+0xcc>)
 800cb7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	e009      	b.n	800cba2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	3310      	adds	r3, #16
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7ff fef2 	bl	800c97c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	3324      	adds	r3, #36	; 0x24
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff feed 	bl	800c97c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cba2:	f001 fc37 	bl	800e414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cba6:	2301      	movs	r3, #1
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	e000ed04 	.word	0xe000ed04

0800cbb4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08a      	sub	sp, #40	; 0x28
 800cbb8:	af02      	add	r7, sp, #8
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d10a      	bne.n	800cbde <xQueueGenericCreate+0x2a>
	__asm volatile
 800cbc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbcc:	f383 8811 	msr	BASEPRI, r3
 800cbd0:	f3bf 8f6f 	isb	sy
 800cbd4:	f3bf 8f4f 	dsb	sy
 800cbd8:	613b      	str	r3, [r7, #16]
}
 800cbda:	bf00      	nop
 800cbdc:	e7fe      	b.n	800cbdc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	fb02 f303 	mul.w	r3, r2, r3
 800cbe6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	3348      	adds	r3, #72	; 0x48
 800cbec:	4618      	mov	r0, r3
 800cbee:	f001 fcc3 	bl	800e578 <pvPortMalloc>
 800cbf2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d011      	beq.n	800cc1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cbfa:	69bb      	ldr	r3, [r7, #24]
 800cbfc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	3348      	adds	r3, #72	; 0x48
 800cc02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cc04:	69bb      	ldr	r3, [r7, #24]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc0c:	79fa      	ldrb	r2, [r7, #7]
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4613      	mov	r3, r2
 800cc14:	697a      	ldr	r2, [r7, #20]
 800cc16:	68b9      	ldr	r1, [r7, #8]
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f000 f805 	bl	800cc28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc1e:	69bb      	ldr	r3, [r7, #24]
	}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3720      	adds	r7, #32
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b084      	sub	sp, #16
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	60f8      	str	r0, [r7, #12]
 800cc30:	60b9      	str	r1, [r7, #8]
 800cc32:	607a      	str	r2, [r7, #4]
 800cc34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d103      	bne.n	800cc44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc3c:	69bb      	ldr	r3, [r7, #24]
 800cc3e:	69ba      	ldr	r2, [r7, #24]
 800cc40:	601a      	str	r2, [r3, #0]
 800cc42:	e002      	b.n	800cc4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	68fa      	ldr	r2, [r7, #12]
 800cc4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cc56:	2101      	movs	r1, #1
 800cc58:	69b8      	ldr	r0, [r7, #24]
 800cc5a:	f7ff ff43 	bl	800cae4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cc5e:	bf00      	nop
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
	...

0800cc68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b08e      	sub	sp, #56	; 0x38
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cc76:	2300      	movs	r3, #0
 800cc78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10a      	bne.n	800cc9a <xQueueGenericSend+0x32>
	__asm volatile
 800cc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc88:	f383 8811 	msr	BASEPRI, r3
 800cc8c:	f3bf 8f6f 	isb	sy
 800cc90:	f3bf 8f4f 	dsb	sy
 800cc94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc96:	bf00      	nop
 800cc98:	e7fe      	b.n	800cc98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d103      	bne.n	800cca8 <xQueueGenericSend+0x40>
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <xQueueGenericSend+0x44>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e000      	b.n	800ccae <xQueueGenericSend+0x46>
 800ccac:	2300      	movs	r3, #0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10a      	bne.n	800ccc8 <xQueueGenericSend+0x60>
	__asm volatile
 800ccb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb6:	f383 8811 	msr	BASEPRI, r3
 800ccba:	f3bf 8f6f 	isb	sy
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ccc4:	bf00      	nop
 800ccc6:	e7fe      	b.n	800ccc6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	2b02      	cmp	r3, #2
 800cccc:	d103      	bne.n	800ccd6 <xQueueGenericSend+0x6e>
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd2:	2b01      	cmp	r3, #1
 800ccd4:	d101      	bne.n	800ccda <xQueueGenericSend+0x72>
 800ccd6:	2301      	movs	r3, #1
 800ccd8:	e000      	b.n	800ccdc <xQueueGenericSend+0x74>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10a      	bne.n	800ccf6 <xQueueGenericSend+0x8e>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	623b      	str	r3, [r7, #32]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccf6:	f001 f923 	bl	800df40 <xTaskGetSchedulerState>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <xQueueGenericSend+0x9e>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d101      	bne.n	800cd0a <xQueueGenericSend+0xa2>
 800cd06:	2301      	movs	r3, #1
 800cd08:	e000      	b.n	800cd0c <xQueueGenericSend+0xa4>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10a      	bne.n	800cd26 <xQueueGenericSend+0xbe>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	61fb      	str	r3, [r7, #28]
}
 800cd22:	bf00      	nop
 800cd24:	e7fe      	b.n	800cd24 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd26:	f001 fb45 	bl	800e3b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d302      	bcc.n	800cd3c <xQueueGenericSend+0xd4>
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d129      	bne.n	800cd90 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd3c:	683a      	ldr	r2, [r7, #0]
 800cd3e:	68b9      	ldr	r1, [r7, #8]
 800cd40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd42:	f000 f96f 	bl	800d024 <prvCopyDataToQueue>
 800cd46:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d010      	beq.n	800cd72 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	3324      	adds	r3, #36	; 0x24
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 ff37 	bl	800dbc8 <xTaskRemoveFromEventList>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d013      	beq.n	800cd88 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cd60:	4b3f      	ldr	r3, [pc, #252]	; (800ce60 <xQueueGenericSend+0x1f8>)
 800cd62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	e00a      	b.n	800cd88 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d007      	beq.n	800cd88 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cd78:	4b39      	ldr	r3, [pc, #228]	; (800ce60 <xQueueGenericSend+0x1f8>)
 800cd7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cd88:	f001 fb44 	bl	800e414 <vPortExitCritical>
				return pdPASS;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e063      	b.n	800ce58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d103      	bne.n	800cd9e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cd96:	f001 fb3d 	bl	800e414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e05c      	b.n	800ce58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d106      	bne.n	800cdb2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cda4:	f107 0314 	add.w	r3, r7, #20
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 ff6f 	bl	800dc8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdb2:	f001 fb2f 	bl	800e414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdb6:	f000 fd15 	bl	800d7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdba:	f001 fafb 	bl	800e3b4 <vPortEnterCritical>
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cdc4:	b25b      	sxtb	r3, r3
 800cdc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdca:	d103      	bne.n	800cdd4 <xQueueGenericSend+0x16c>
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdda:	b25b      	sxtb	r3, r3
 800cddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde0:	d103      	bne.n	800cdea <xQueueGenericSend+0x182>
 800cde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdea:	f001 fb13 	bl	800e414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdee:	1d3a      	adds	r2, r7, #4
 800cdf0:	f107 0314 	add.w	r3, r7, #20
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 ff5e 	bl	800dcb8 <xTaskCheckForTimeOut>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d124      	bne.n	800ce4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce04:	f000 fa06 	bl	800d214 <prvIsQueueFull>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d018      	beq.n	800ce40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	3310      	adds	r3, #16
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 feb2 	bl	800db80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce1e:	f000 f991 	bl	800d144 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce22:	f000 fced 	bl	800d800 <xTaskResumeAll>
 800ce26:	4603      	mov	r3, r0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f47f af7c 	bne.w	800cd26 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce2e:	4b0c      	ldr	r3, [pc, #48]	; (800ce60 <xQueueGenericSend+0x1f8>)
 800ce30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce34:	601a      	str	r2, [r3, #0]
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	f3bf 8f6f 	isb	sy
 800ce3e:	e772      	b.n	800cd26 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce42:	f000 f97f 	bl	800d144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce46:	f000 fcdb 	bl	800d800 <xTaskResumeAll>
 800ce4a:	e76c      	b.n	800cd26 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ce4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce4e:	f000 f979 	bl	800d144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce52:	f000 fcd5 	bl	800d800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ce56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3738      	adds	r7, #56	; 0x38
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	e000ed04 	.word	0xe000ed04

0800ce64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b08c      	sub	sp, #48	; 0x30
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ce70:	2300      	movs	r3, #0
 800ce72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ce78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d10a      	bne.n	800ce94 <xQueueReceive+0x30>
	__asm volatile
 800ce7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce82:	f383 8811 	msr	BASEPRI, r3
 800ce86:	f3bf 8f6f 	isb	sy
 800ce8a:	f3bf 8f4f 	dsb	sy
 800ce8e:	623b      	str	r3, [r7, #32]
}
 800ce90:	bf00      	nop
 800ce92:	e7fe      	b.n	800ce92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d103      	bne.n	800cea2 <xQueueReceive+0x3e>
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <xQueueReceive+0x42>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e000      	b.n	800cea8 <xQueueReceive+0x44>
 800cea6:	2300      	movs	r3, #0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <xQueueReceive+0x5e>
	__asm volatile
 800ceac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb0:	f383 8811 	msr	BASEPRI, r3
 800ceb4:	f3bf 8f6f 	isb	sy
 800ceb8:	f3bf 8f4f 	dsb	sy
 800cebc:	61fb      	str	r3, [r7, #28]
}
 800cebe:	bf00      	nop
 800cec0:	e7fe      	b.n	800cec0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cec2:	f001 f83d 	bl	800df40 <xTaskGetSchedulerState>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <xQueueReceive+0x6e>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d101      	bne.n	800ced6 <xQueueReceive+0x72>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e000      	b.n	800ced8 <xQueueReceive+0x74>
 800ced6:	2300      	movs	r3, #0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10a      	bne.n	800cef2 <xQueueReceive+0x8e>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	61bb      	str	r3, [r7, #24]
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cef2:	f001 fa5f 	bl	800e3b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d01f      	beq.n	800cf42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf02:	68b9      	ldr	r1, [r7, #8]
 800cf04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf06:	f000 f8f7 	bl	800d0f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0c:	1e5a      	subs	r2, r3, #1
 800cf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00f      	beq.n	800cf3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1c:	3310      	adds	r3, #16
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 fe52 	bl	800dbc8 <xTaskRemoveFromEventList>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d007      	beq.n	800cf3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cf2a:	4b3d      	ldr	r3, [pc, #244]	; (800d020 <xQueueReceive+0x1bc>)
 800cf2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf30:	601a      	str	r2, [r3, #0]
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cf3a:	f001 fa6b 	bl	800e414 <vPortExitCritical>
				return pdPASS;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e069      	b.n	800d016 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d103      	bne.n	800cf50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cf48:	f001 fa64 	bl	800e414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	e062      	b.n	800d016 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d106      	bne.n	800cf64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf56:	f107 0310 	add.w	r3, r7, #16
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 fe96 	bl	800dc8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cf60:	2301      	movs	r3, #1
 800cf62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cf64:	f001 fa56 	bl	800e414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cf68:	f000 fc3c 	bl	800d7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf6c:	f001 fa22 	bl	800e3b4 <vPortEnterCritical>
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf76:	b25b      	sxtb	r3, r3
 800cf78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7c:	d103      	bne.n	800cf86 <xQueueReceive+0x122>
 800cf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf8c:	b25b      	sxtb	r3, r3
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf92:	d103      	bne.n	800cf9c <xQueueReceive+0x138>
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf9c:	f001 fa3a 	bl	800e414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cfa0:	1d3a      	adds	r2, r7, #4
 800cfa2:	f107 0310 	add.w	r3, r7, #16
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 fe85 	bl	800dcb8 <xTaskCheckForTimeOut>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d123      	bne.n	800cffc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfb6:	f000 f917 	bl	800d1e8 <prvIsQueueEmpty>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d017      	beq.n	800cff0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cfc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc2:	3324      	adds	r3, #36	; 0x24
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 fdd9 	bl	800db80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cfce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfd0:	f000 f8b8 	bl	800d144 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cfd4:	f000 fc14 	bl	800d800 <xTaskResumeAll>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d189      	bne.n	800cef2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cfde:	4b10      	ldr	r3, [pc, #64]	; (800d020 <xQueueReceive+0x1bc>)
 800cfe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfe4:	601a      	str	r2, [r3, #0]
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	e780      	b.n	800cef2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cff0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff2:	f000 f8a7 	bl	800d144 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cff6:	f000 fc03 	bl	800d800 <xTaskResumeAll>
 800cffa:	e77a      	b.n	800cef2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cffe:	f000 f8a1 	bl	800d144 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d002:	f000 fbfd 	bl	800d800 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d008:	f000 f8ee 	bl	800d1e8 <prvIsQueueEmpty>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f43f af6f 	beq.w	800cef2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d014:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d016:	4618      	mov	r0, r3
 800d018:	3730      	adds	r7, #48	; 0x30
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	e000ed04 	.word	0xe000ed04

0800d024 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	60f8      	str	r0, [r7, #12]
 800d02c:	60b9      	str	r1, [r7, #8]
 800d02e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d030:	2300      	movs	r3, #0
 800d032:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d038:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10d      	bne.n	800d05e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d14d      	bne.n	800d0e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	689b      	ldr	r3, [r3, #8]
 800d04e:	4618      	mov	r0, r3
 800d050:	f000 ff94 	bl	800df7c <xTaskPriorityDisinherit>
 800d054:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	609a      	str	r2, [r3, #8]
 800d05c:	e043      	b.n	800d0e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d119      	bne.n	800d098 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6858      	ldr	r0, [r3, #4]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06c:	461a      	mov	r2, r3
 800d06e:	68b9      	ldr	r1, [r7, #8]
 800d070:	f001 fc96 	bl	800e9a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07c:	441a      	add	r2, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	685a      	ldr	r2, [r3, #4]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d32b      	bcc.n	800d0e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	681a      	ldr	r2, [r3, #0]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	605a      	str	r2, [r3, #4]
 800d096:	e026      	b.n	800d0e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	68d8      	ldr	r0, [r3, #12]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a0:	461a      	mov	r2, r3
 800d0a2:	68b9      	ldr	r1, [r7, #8]
 800d0a4:	f001 fc7c 	bl	800e9a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	68da      	ldr	r2, [r3, #12]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b0:	425b      	negs	r3, r3
 800d0b2:	441a      	add	r2, r3
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	68da      	ldr	r2, [r3, #12]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d207      	bcs.n	800d0d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	689a      	ldr	r2, [r3, #8]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0cc:	425b      	negs	r3, r3
 800d0ce:	441a      	add	r2, r3
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d105      	bne.n	800d0e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d002      	beq.n	800d0e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	1c5a      	adds	r2, r3, #1
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d0ee:	697b      	ldr	r3, [r7, #20]
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3718      	adds	r7, #24
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	2b00      	cmp	r3, #0
 800d108:	d018      	beq.n	800d13c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68da      	ldr	r2, [r3, #12]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	441a      	add	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	68da      	ldr	r2, [r3, #12]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	429a      	cmp	r2, r3
 800d122:	d303      	bcc.n	800d12c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681a      	ldr	r2, [r3, #0]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	68d9      	ldr	r1, [r3, #12]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d134:	461a      	mov	r2, r3
 800d136:	6838      	ldr	r0, [r7, #0]
 800d138:	f001 fc32 	bl	800e9a0 <memcpy>
	}
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d14c:	f001 f932 	bl	800e3b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d156:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d158:	e011      	b.n	800d17e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d012      	beq.n	800d188 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	3324      	adds	r3, #36	; 0x24
 800d166:	4618      	mov	r0, r3
 800d168:	f000 fd2e 	bl	800dbc8 <xTaskRemoveFromEventList>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d001      	beq.n	800d176 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d172:	f000 fe03 	bl	800dd7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d176:	7bfb      	ldrb	r3, [r7, #15]
 800d178:	3b01      	subs	r3, #1
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d17e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d182:	2b00      	cmp	r3, #0
 800d184:	dce9      	bgt.n	800d15a <prvUnlockQueue+0x16>
 800d186:	e000      	b.n	800d18a <prvUnlockQueue+0x46>
					break;
 800d188:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	22ff      	movs	r2, #255	; 0xff
 800d18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d192:	f001 f93f 	bl	800e414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d196:	f001 f90d 	bl	800e3b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1a2:	e011      	b.n	800d1c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d012      	beq.n	800d1d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	3310      	adds	r3, #16
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f000 fd09 	bl	800dbc8 <xTaskRemoveFromEventList>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d001      	beq.n	800d1c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d1bc:	f000 fdde 	bl	800dd7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d1c0:	7bbb      	ldrb	r3, [r7, #14]
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	dce9      	bgt.n	800d1a4 <prvUnlockQueue+0x60>
 800d1d0:	e000      	b.n	800d1d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d1d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	22ff      	movs	r2, #255	; 0xff
 800d1d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d1dc:	f001 f91a 	bl	800e414 <vPortExitCritical>
}
 800d1e0:	bf00      	nop
 800d1e2:	3710      	adds	r7, #16
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1f0:	f001 f8e0 	bl	800e3b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d102      	bne.n	800d202 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	60fb      	str	r3, [r7, #12]
 800d200:	e001      	b.n	800d206 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d202:	2300      	movs	r3, #0
 800d204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d206:	f001 f905 	bl	800e414 <vPortExitCritical>

	return xReturn;
 800d20a:	68fb      	ldr	r3, [r7, #12]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d21c:	f001 f8ca 	bl	800e3b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d228:	429a      	cmp	r2, r3
 800d22a:	d102      	bne.n	800d232 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d22c:	2301      	movs	r3, #1
 800d22e:	60fb      	str	r3, [r7, #12]
 800d230:	e001      	b.n	800d236 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d232:	2300      	movs	r3, #0
 800d234:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d236:	f001 f8ed 	bl	800e414 <vPortExitCritical>

	return xReturn;
 800d23a:	68fb      	ldr	r3, [r7, #12]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d24e:	2300      	movs	r3, #0
 800d250:	60fb      	str	r3, [r7, #12]
 800d252:	e014      	b.n	800d27e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d254:	4a0f      	ldr	r2, [pc, #60]	; (800d294 <vQueueAddToRegistry+0x50>)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10b      	bne.n	800d278 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d260:	490c      	ldr	r1, [pc, #48]	; (800d294 <vQueueAddToRegistry+0x50>)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	683a      	ldr	r2, [r7, #0]
 800d266:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d26a:	4a0a      	ldr	r2, [pc, #40]	; (800d294 <vQueueAddToRegistry+0x50>)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	00db      	lsls	r3, r3, #3
 800d270:	4413      	add	r3, r2
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d276:	e006      	b.n	800d286 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3301      	adds	r3, #1
 800d27c:	60fb      	str	r3, [r7, #12]
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b07      	cmp	r3, #7
 800d282:	d9e7      	bls.n	800d254 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d284:	bf00      	nop
 800d286:	bf00      	nop
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	20000f94 	.word	0x20000f94

0800d298 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08e      	sub	sp, #56	; 0x38
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	607a      	str	r2, [r7, #4]
 800d2a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d10a      	bne.n	800d2c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	623b      	str	r3, [r7, #32]
}
 800d2be:	bf00      	nop
 800d2c0:	e7fe      	b.n	800d2c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10a      	bne.n	800d2de <xTaskCreateStatic+0x46>
	__asm volatile
 800d2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	61fb      	str	r3, [r7, #28]
}
 800d2da:	bf00      	nop
 800d2dc:	e7fe      	b.n	800d2dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d2de:	2354      	movs	r3, #84	; 0x54
 800d2e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	2b54      	cmp	r3, #84	; 0x54
 800d2e6:	d00a      	beq.n	800d2fe <xTaskCreateStatic+0x66>
	__asm volatile
 800d2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ec:	f383 8811 	msr	BASEPRI, r3
 800d2f0:	f3bf 8f6f 	isb	sy
 800d2f4:	f3bf 8f4f 	dsb	sy
 800d2f8:	61bb      	str	r3, [r7, #24]
}
 800d2fa:	bf00      	nop
 800d2fc:	e7fe      	b.n	800d2fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d2fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	2b00      	cmp	r3, #0
 800d304:	d01e      	beq.n	800d344 <xTaskCreateStatic+0xac>
 800d306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d01b      	beq.n	800d344 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d314:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	2202      	movs	r2, #2
 800d31a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d31e:	2300      	movs	r3, #0
 800d320:	9303      	str	r3, [sp, #12]
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	9302      	str	r3, [sp, #8]
 800d326:	f107 0314 	add.w	r3, r7, #20
 800d32a:	9301      	str	r3, [sp, #4]
 800d32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	68b9      	ldr	r1, [r7, #8]
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f000 f850 	bl	800d3dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d33c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d33e:	f000 f8d5 	bl	800d4ec <prvAddNewTaskToReadyList>
 800d342:	e001      	b.n	800d348 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d344:	2300      	movs	r3, #0
 800d346:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d348:	697b      	ldr	r3, [r7, #20]
	}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3728      	adds	r7, #40	; 0x28
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}

0800d352 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d352:	b580      	push	{r7, lr}
 800d354:	b08c      	sub	sp, #48	; 0x30
 800d356:	af04      	add	r7, sp, #16
 800d358:	60f8      	str	r0, [r7, #12]
 800d35a:	60b9      	str	r1, [r7, #8]
 800d35c:	603b      	str	r3, [r7, #0]
 800d35e:	4613      	mov	r3, r2
 800d360:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d362:	88fb      	ldrh	r3, [r7, #6]
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4618      	mov	r0, r3
 800d368:	f001 f906 	bl	800e578 <pvPortMalloc>
 800d36c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00e      	beq.n	800d392 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d374:	2054      	movs	r0, #84	; 0x54
 800d376:	f001 f8ff 	bl	800e578 <pvPortMalloc>
 800d37a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d37c:	69fb      	ldr	r3, [r7, #28]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d003      	beq.n	800d38a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	697a      	ldr	r2, [r7, #20]
 800d386:	631a      	str	r2, [r3, #48]	; 0x30
 800d388:	e005      	b.n	800d396 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d38a:	6978      	ldr	r0, [r7, #20]
 800d38c:	f001 f9c0 	bl	800e710 <vPortFree>
 800d390:	e001      	b.n	800d396 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d392:	2300      	movs	r3, #0
 800d394:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d396:	69fb      	ldr	r3, [r7, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d017      	beq.n	800d3cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3a4:	88fa      	ldrh	r2, [r7, #6]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	9303      	str	r3, [sp, #12]
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	9302      	str	r3, [sp, #8]
 800d3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	68b9      	ldr	r1, [r7, #8]
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 f80e 	bl	800d3dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3c0:	69f8      	ldr	r0, [r7, #28]
 800d3c2:	f000 f893 	bl	800d4ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	61bb      	str	r3, [r7, #24]
 800d3ca:	e002      	b.n	800d3d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d3d2:	69bb      	ldr	r3, [r7, #24]
	}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3720      	adds	r7, #32
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b088      	sub	sp, #32
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d3f4:	3b01      	subs	r3, #1
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4413      	add	r3, r2
 800d3fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	f023 0307 	bic.w	r3, r3, #7
 800d402:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	f003 0307 	and.w	r3, r3, #7
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00a      	beq.n	800d424 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d412:	f383 8811 	msr	BASEPRI, r3
 800d416:	f3bf 8f6f 	isb	sy
 800d41a:	f3bf 8f4f 	dsb	sy
 800d41e:	617b      	str	r3, [r7, #20]
}
 800d420:	bf00      	nop
 800d422:	e7fe      	b.n	800d422 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d01f      	beq.n	800d46a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d42a:	2300      	movs	r3, #0
 800d42c:	61fb      	str	r3, [r7, #28]
 800d42e:	e012      	b.n	800d456 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	4413      	add	r3, r2
 800d436:	7819      	ldrb	r1, [r3, #0]
 800d438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	4413      	add	r3, r2
 800d43e:	3334      	adds	r3, #52	; 0x34
 800d440:	460a      	mov	r2, r1
 800d442:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d444:	68ba      	ldr	r2, [r7, #8]
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	4413      	add	r3, r2
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d006      	beq.n	800d45e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	3301      	adds	r3, #1
 800d454:	61fb      	str	r3, [r7, #28]
 800d456:	69fb      	ldr	r3, [r7, #28]
 800d458:	2b0f      	cmp	r3, #15
 800d45a:	d9e9      	bls.n	800d430 <prvInitialiseNewTask+0x54>
 800d45c:	e000      	b.n	800d460 <prvInitialiseNewTask+0x84>
			{
				break;
 800d45e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d462:	2200      	movs	r2, #0
 800d464:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d468:	e003      	b.n	800d472 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d474:	2b06      	cmp	r3, #6
 800d476:	d901      	bls.n	800d47c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d478:	2306      	movs	r3, #6
 800d47a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d480:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d486:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48a:	2200      	movs	r2, #0
 800d48c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d490:	3304      	adds	r3, #4
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff fa92 	bl	800c9bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49a:	3318      	adds	r3, #24
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fa8d 	bl	800c9bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	f1c3 0207 	rsb	r2, r3, #7
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4c6:	683a      	ldr	r2, [r7, #0]
 800d4c8:	68f9      	ldr	r1, [r7, #12]
 800d4ca:	69b8      	ldr	r0, [r7, #24]
 800d4cc:	f000 fe42 	bl	800e154 <pxPortInitialiseStack>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d4e2:	bf00      	nop
 800d4e4:	3720      	adds	r7, #32
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	bd80      	pop	{r7, pc}
	...

0800d4ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d4f4:	f000 ff5e 	bl	800e3b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d4f8:	4b2a      	ldr	r3, [pc, #168]	; (800d5a4 <prvAddNewTaskToReadyList+0xb8>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	4a29      	ldr	r2, [pc, #164]	; (800d5a4 <prvAddNewTaskToReadyList+0xb8>)
 800d500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d502:	4b29      	ldr	r3, [pc, #164]	; (800d5a8 <prvAddNewTaskToReadyList+0xbc>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d109      	bne.n	800d51e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d50a:	4a27      	ldr	r2, [pc, #156]	; (800d5a8 <prvAddNewTaskToReadyList+0xbc>)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d510:	4b24      	ldr	r3, [pc, #144]	; (800d5a4 <prvAddNewTaskToReadyList+0xb8>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b01      	cmp	r3, #1
 800d516:	d110      	bne.n	800d53a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d518:	f000 fc54 	bl	800ddc4 <prvInitialiseTaskLists>
 800d51c:	e00d      	b.n	800d53a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d51e:	4b23      	ldr	r3, [pc, #140]	; (800d5ac <prvAddNewTaskToReadyList+0xc0>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d109      	bne.n	800d53a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d526:	4b20      	ldr	r3, [pc, #128]	; (800d5a8 <prvAddNewTaskToReadyList+0xbc>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d530:	429a      	cmp	r2, r3
 800d532:	d802      	bhi.n	800d53a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d534:	4a1c      	ldr	r2, [pc, #112]	; (800d5a8 <prvAddNewTaskToReadyList+0xbc>)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d53a:	4b1d      	ldr	r3, [pc, #116]	; (800d5b0 <prvAddNewTaskToReadyList+0xc4>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	3301      	adds	r3, #1
 800d540:	4a1b      	ldr	r2, [pc, #108]	; (800d5b0 <prvAddNewTaskToReadyList+0xc4>)
 800d542:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d548:	2201      	movs	r2, #1
 800d54a:	409a      	lsls	r2, r3
 800d54c:	4b19      	ldr	r3, [pc, #100]	; (800d5b4 <prvAddNewTaskToReadyList+0xc8>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4313      	orrs	r3, r2
 800d552:	4a18      	ldr	r2, [pc, #96]	; (800d5b4 <prvAddNewTaskToReadyList+0xc8>)
 800d554:	6013      	str	r3, [r2, #0]
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d55a:	4613      	mov	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4413      	add	r3, r2
 800d560:	009b      	lsls	r3, r3, #2
 800d562:	4a15      	ldr	r2, [pc, #84]	; (800d5b8 <prvAddNewTaskToReadyList+0xcc>)
 800d564:	441a      	add	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	3304      	adds	r3, #4
 800d56a:	4619      	mov	r1, r3
 800d56c:	4610      	mov	r0, r2
 800d56e:	f7ff fa32 	bl	800c9d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d572:	f000 ff4f 	bl	800e414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d576:	4b0d      	ldr	r3, [pc, #52]	; (800d5ac <prvAddNewTaskToReadyList+0xc0>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00e      	beq.n	800d59c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d57e:	4b0a      	ldr	r3, [pc, #40]	; (800d5a8 <prvAddNewTaskToReadyList+0xbc>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d588:	429a      	cmp	r2, r3
 800d58a:	d207      	bcs.n	800d59c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d58c:	4b0b      	ldr	r3, [pc, #44]	; (800d5bc <prvAddNewTaskToReadyList+0xd0>)
 800d58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	f3bf 8f4f 	dsb	sy
 800d598:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d59c:	bf00      	nop
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	200010d4 	.word	0x200010d4
 800d5a8:	20000fd4 	.word	0x20000fd4
 800d5ac:	200010e0 	.word	0x200010e0
 800d5b0:	200010f0 	.word	0x200010f0
 800d5b4:	200010dc 	.word	0x200010dc
 800d5b8:	20000fd8 	.word	0x20000fd8
 800d5bc:	e000ed04 	.word	0xe000ed04

0800d5c0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08a      	sub	sp, #40	; 0x28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10a      	bne.n	800d5ea <vTaskDelayUntil+0x2a>
	__asm volatile
 800d5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	617b      	str	r3, [r7, #20]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10a      	bne.n	800d606 <vTaskDelayUntil+0x46>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	613b      	str	r3, [r7, #16]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800d606:	4b2a      	ldr	r3, [pc, #168]	; (800d6b0 <vTaskDelayUntil+0xf0>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00a      	beq.n	800d624 <vTaskDelayUntil+0x64>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60fb      	str	r3, [r7, #12]
}
 800d620:	bf00      	nop
 800d622:	e7fe      	b.n	800d622 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800d624:	f000 f8de 	bl	800d7e4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d628:	4b22      	ldr	r3, [pc, #136]	; (800d6b4 <vTaskDelayUntil+0xf4>)
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	4413      	add	r3, r2
 800d636:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	6a3a      	ldr	r2, [r7, #32]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d20b      	bcs.n	800d65a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	69fa      	ldr	r2, [r7, #28]
 800d648:	429a      	cmp	r2, r3
 800d64a:	d211      	bcs.n	800d670 <vTaskDelayUntil+0xb0>
 800d64c:	69fa      	ldr	r2, [r7, #28]
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	429a      	cmp	r2, r3
 800d652:	d90d      	bls.n	800d670 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d654:	2301      	movs	r3, #1
 800d656:	627b      	str	r3, [r7, #36]	; 0x24
 800d658:	e00a      	b.n	800d670 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	69fa      	ldr	r2, [r7, #28]
 800d660:	429a      	cmp	r2, r3
 800d662:	d303      	bcc.n	800d66c <vTaskDelayUntil+0xac>
 800d664:	69fa      	ldr	r2, [r7, #28]
 800d666:	6a3b      	ldr	r3, [r7, #32]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d901      	bls.n	800d670 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800d66c:	2301      	movs	r3, #1
 800d66e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	69fa      	ldr	r2, [r7, #28]
 800d674:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d006      	beq.n	800d68a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d67c:	69fa      	ldr	r2, [r7, #28]
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	2100      	movs	r1, #0
 800d684:	4618      	mov	r0, r3
 800d686:	f000 fcff 	bl	800e088 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d68a:	f000 f8b9 	bl	800d800 <xTaskResumeAll>
 800d68e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d107      	bne.n	800d6a6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800d696:	4b08      	ldr	r3, [pc, #32]	; (800d6b8 <vTaskDelayUntil+0xf8>)
 800d698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d69c:	601a      	str	r2, [r3, #0]
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6a6:	bf00      	nop
 800d6a8:	3728      	adds	r7, #40	; 0x28
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}
 800d6ae:	bf00      	nop
 800d6b0:	200010fc 	.word	0x200010fc
 800d6b4:	200010d8 	.word	0x200010d8
 800d6b8:	e000ed04 	.word	0xe000ed04

0800d6bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d017      	beq.n	800d6fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d6ce:	4b13      	ldr	r3, [pc, #76]	; (800d71c <vTaskDelay+0x60>)
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d00a      	beq.n	800d6ec <vTaskDelay+0x30>
	__asm volatile
 800d6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	60bb      	str	r3, [r7, #8]
}
 800d6e8:	bf00      	nop
 800d6ea:	e7fe      	b.n	800d6ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d6ec:	f000 f87a 	bl	800d7e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fcc8 	bl	800e088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6f8:	f000 f882 	bl	800d800 <xTaskResumeAll>
 800d6fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d107      	bne.n	800d714 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d704:	4b06      	ldr	r3, [pc, #24]	; (800d720 <vTaskDelay+0x64>)
 800d706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d70a:	601a      	str	r2, [r3, #0]
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d714:	bf00      	nop
 800d716:	3710      	adds	r7, #16
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	200010fc 	.word	0x200010fc
 800d720:	e000ed04 	.word	0xe000ed04

0800d724 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08a      	sub	sp, #40	; 0x28
 800d728:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d72e:	2300      	movs	r3, #0
 800d730:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d732:	463a      	mov	r2, r7
 800d734:	1d39      	adds	r1, r7, #4
 800d736:	f107 0308 	add.w	r3, r7, #8
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7f4 f9aa 	bl	8001a94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d740:	6839      	ldr	r1, [r7, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	9202      	str	r2, [sp, #8]
 800d748:	9301      	str	r3, [sp, #4]
 800d74a:	2300      	movs	r3, #0
 800d74c:	9300      	str	r3, [sp, #0]
 800d74e:	2300      	movs	r3, #0
 800d750:	460a      	mov	r2, r1
 800d752:	491e      	ldr	r1, [pc, #120]	; (800d7cc <vTaskStartScheduler+0xa8>)
 800d754:	481e      	ldr	r0, [pc, #120]	; (800d7d0 <vTaskStartScheduler+0xac>)
 800d756:	f7ff fd9f 	bl	800d298 <xTaskCreateStatic>
 800d75a:	4603      	mov	r3, r0
 800d75c:	4a1d      	ldr	r2, [pc, #116]	; (800d7d4 <vTaskStartScheduler+0xb0>)
 800d75e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d760:	4b1c      	ldr	r3, [pc, #112]	; (800d7d4 <vTaskStartScheduler+0xb0>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d768:	2301      	movs	r3, #1
 800d76a:	617b      	str	r3, [r7, #20]
 800d76c:	e001      	b.n	800d772 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d116      	bne.n	800d7a6 <vTaskStartScheduler+0x82>
	__asm volatile
 800d778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	613b      	str	r3, [r7, #16]
}
 800d78a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d78c:	4b12      	ldr	r3, [pc, #72]	; (800d7d8 <vTaskStartScheduler+0xb4>)
 800d78e:	f04f 32ff 	mov.w	r2, #4294967295
 800d792:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d794:	4b11      	ldr	r3, [pc, #68]	; (800d7dc <vTaskStartScheduler+0xb8>)
 800d796:	2201      	movs	r2, #1
 800d798:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d79a:	4b11      	ldr	r3, [pc, #68]	; (800d7e0 <vTaskStartScheduler+0xbc>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d7a0:	f000 fd66 	bl	800e270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d7a4:	e00e      	b.n	800d7c4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ac:	d10a      	bne.n	800d7c4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	60fb      	str	r3, [r7, #12]
}
 800d7c0:	bf00      	nop
 800d7c2:	e7fe      	b.n	800d7c2 <vTaskStartScheduler+0x9e>
}
 800d7c4:	bf00      	nop
 800d7c6:	3718      	adds	r7, #24
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	080122d8 	.word	0x080122d8
 800d7d0:	0800dd95 	.word	0x0800dd95
 800d7d4:	200010f8 	.word	0x200010f8
 800d7d8:	200010f4 	.word	0x200010f4
 800d7dc:	200010e0 	.word	0x200010e0
 800d7e0:	200010d8 	.word	0x200010d8

0800d7e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7e8:	4b04      	ldr	r3, [pc, #16]	; (800d7fc <vTaskSuspendAll+0x18>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	4a03      	ldr	r2, [pc, #12]	; (800d7fc <vTaskSuspendAll+0x18>)
 800d7f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d7f2:	bf00      	nop
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	200010fc 	.word	0x200010fc

0800d800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d806:	2300      	movs	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d80a:	2300      	movs	r3, #0
 800d80c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d80e:	4b41      	ldr	r3, [pc, #260]	; (800d914 <xTaskResumeAll+0x114>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10a      	bne.n	800d82c <xTaskResumeAll+0x2c>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	603b      	str	r3, [r7, #0]
}
 800d828:	bf00      	nop
 800d82a:	e7fe      	b.n	800d82a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d82c:	f000 fdc2 	bl	800e3b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d830:	4b38      	ldr	r3, [pc, #224]	; (800d914 <xTaskResumeAll+0x114>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	3b01      	subs	r3, #1
 800d836:	4a37      	ldr	r2, [pc, #220]	; (800d914 <xTaskResumeAll+0x114>)
 800d838:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d83a:	4b36      	ldr	r3, [pc, #216]	; (800d914 <xTaskResumeAll+0x114>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d161      	bne.n	800d906 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d842:	4b35      	ldr	r3, [pc, #212]	; (800d918 <xTaskResumeAll+0x118>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d05d      	beq.n	800d906 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d84a:	e02e      	b.n	800d8aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d84c:	4b33      	ldr	r3, [pc, #204]	; (800d91c <xTaskResumeAll+0x11c>)
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	68db      	ldr	r3, [r3, #12]
 800d852:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	3318      	adds	r3, #24
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff f919 	bl	800ca90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	3304      	adds	r3, #4
 800d862:	4618      	mov	r0, r3
 800d864:	f7ff f914 	bl	800ca90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86c:	2201      	movs	r2, #1
 800d86e:	409a      	lsls	r2, r3
 800d870:	4b2b      	ldr	r3, [pc, #172]	; (800d920 <xTaskResumeAll+0x120>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4313      	orrs	r3, r2
 800d876:	4a2a      	ldr	r2, [pc, #168]	; (800d920 <xTaskResumeAll+0x120>)
 800d878:	6013      	str	r3, [r2, #0]
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d87e:	4613      	mov	r3, r2
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	4413      	add	r3, r2
 800d884:	009b      	lsls	r3, r3, #2
 800d886:	4a27      	ldr	r2, [pc, #156]	; (800d924 <xTaskResumeAll+0x124>)
 800d888:	441a      	add	r2, r3
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	3304      	adds	r3, #4
 800d88e:	4619      	mov	r1, r3
 800d890:	4610      	mov	r0, r2
 800d892:	f7ff f8a0 	bl	800c9d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89a:	4b23      	ldr	r3, [pc, #140]	; (800d928 <xTaskResumeAll+0x128>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d302      	bcc.n	800d8aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d8a4:	4b21      	ldr	r3, [pc, #132]	; (800d92c <xTaskResumeAll+0x12c>)
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d8aa:	4b1c      	ldr	r3, [pc, #112]	; (800d91c <xTaskResumeAll+0x11c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d1cc      	bne.n	800d84c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d001      	beq.n	800d8bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d8b8:	f000 fb22 	bl	800df00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d8bc:	4b1c      	ldr	r3, [pc, #112]	; (800d930 <xTaskResumeAll+0x130>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d010      	beq.n	800d8ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d8c8:	f000 f846 	bl	800d958 <xTaskIncrementTick>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d002      	beq.n	800d8d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d8d2:	4b16      	ldr	r3, [pc, #88]	; (800d92c <xTaskResumeAll+0x12c>)
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d1f1      	bne.n	800d8c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d8e4:	4b12      	ldr	r3, [pc, #72]	; (800d930 <xTaskResumeAll+0x130>)
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8ea:	4b10      	ldr	r3, [pc, #64]	; (800d92c <xTaskResumeAll+0x12c>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d009      	beq.n	800d906 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8f6:	4b0f      	ldr	r3, [pc, #60]	; (800d934 <xTaskResumeAll+0x134>)
 800d8f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8fc:	601a      	str	r2, [r3, #0]
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d906:	f000 fd85 	bl	800e414 <vPortExitCritical>

	return xAlreadyYielded;
 800d90a:	68bb      	ldr	r3, [r7, #8]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3710      	adds	r7, #16
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	200010fc 	.word	0x200010fc
 800d918:	200010d4 	.word	0x200010d4
 800d91c:	20001094 	.word	0x20001094
 800d920:	200010dc 	.word	0x200010dc
 800d924:	20000fd8 	.word	0x20000fd8
 800d928:	20000fd4 	.word	0x20000fd4
 800d92c:	200010e8 	.word	0x200010e8
 800d930:	200010e4 	.word	0x200010e4
 800d934:	e000ed04 	.word	0xe000ed04

0800d938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d93e:	4b05      	ldr	r3, [pc, #20]	; (800d954 <xTaskGetTickCount+0x1c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d944:	687b      	ldr	r3, [r7, #4]
}
 800d946:	4618      	mov	r0, r3
 800d948:	370c      	adds	r7, #12
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	200010d8 	.word	0x200010d8

0800d958 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d962:	4b4e      	ldr	r3, [pc, #312]	; (800da9c <xTaskIncrementTick+0x144>)
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	f040 808e 	bne.w	800da88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d96c:	4b4c      	ldr	r3, [pc, #304]	; (800daa0 <xTaskIncrementTick+0x148>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	3301      	adds	r3, #1
 800d972:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d974:	4a4a      	ldr	r2, [pc, #296]	; (800daa0 <xTaskIncrementTick+0x148>)
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d97a:	693b      	ldr	r3, [r7, #16]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d120      	bne.n	800d9c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d980:	4b48      	ldr	r3, [pc, #288]	; (800daa4 <xTaskIncrementTick+0x14c>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00a      	beq.n	800d9a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800d98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98e:	f383 8811 	msr	BASEPRI, r3
 800d992:	f3bf 8f6f 	isb	sy
 800d996:	f3bf 8f4f 	dsb	sy
 800d99a:	603b      	str	r3, [r7, #0]
}
 800d99c:	bf00      	nop
 800d99e:	e7fe      	b.n	800d99e <xTaskIncrementTick+0x46>
 800d9a0:	4b40      	ldr	r3, [pc, #256]	; (800daa4 <xTaskIncrementTick+0x14c>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	60fb      	str	r3, [r7, #12]
 800d9a6:	4b40      	ldr	r3, [pc, #256]	; (800daa8 <xTaskIncrementTick+0x150>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	4a3e      	ldr	r2, [pc, #248]	; (800daa4 <xTaskIncrementTick+0x14c>)
 800d9ac:	6013      	str	r3, [r2, #0]
 800d9ae:	4a3e      	ldr	r2, [pc, #248]	; (800daa8 <xTaskIncrementTick+0x150>)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	4b3d      	ldr	r3, [pc, #244]	; (800daac <xTaskIncrementTick+0x154>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	4a3c      	ldr	r2, [pc, #240]	; (800daac <xTaskIncrementTick+0x154>)
 800d9bc:	6013      	str	r3, [r2, #0]
 800d9be:	f000 fa9f 	bl	800df00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d9c2:	4b3b      	ldr	r3, [pc, #236]	; (800dab0 <xTaskIncrementTick+0x158>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	693a      	ldr	r2, [r7, #16]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d348      	bcc.n	800da5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9cc:	4b35      	ldr	r3, [pc, #212]	; (800daa4 <xTaskIncrementTick+0x14c>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d104      	bne.n	800d9e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9d6:	4b36      	ldr	r3, [pc, #216]	; (800dab0 <xTaskIncrementTick+0x158>)
 800d9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9dc:	601a      	str	r2, [r3, #0]
					break;
 800d9de:	e03e      	b.n	800da5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e0:	4b30      	ldr	r3, [pc, #192]	; (800daa4 <xTaskIncrementTick+0x14c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	68db      	ldr	r3, [r3, #12]
 800d9e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9f0:	693a      	ldr	r2, [r7, #16]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d203      	bcs.n	800da00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9f8:	4a2d      	ldr	r2, [pc, #180]	; (800dab0 <xTaskIncrementTick+0x158>)
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9fe:	e02e      	b.n	800da5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	3304      	adds	r3, #4
 800da04:	4618      	mov	r0, r3
 800da06:	f7ff f843 	bl	800ca90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d004      	beq.n	800da1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	3318      	adds	r3, #24
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff f83a 	bl	800ca90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da20:	2201      	movs	r2, #1
 800da22:	409a      	lsls	r2, r3
 800da24:	4b23      	ldr	r3, [pc, #140]	; (800dab4 <xTaskIncrementTick+0x15c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4313      	orrs	r3, r2
 800da2a:	4a22      	ldr	r2, [pc, #136]	; (800dab4 <xTaskIncrementTick+0x15c>)
 800da2c:	6013      	str	r3, [r2, #0]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da32:	4613      	mov	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	4413      	add	r3, r2
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	4a1f      	ldr	r2, [pc, #124]	; (800dab8 <xTaskIncrementTick+0x160>)
 800da3c:	441a      	add	r2, r3
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	3304      	adds	r3, #4
 800da42:	4619      	mov	r1, r3
 800da44:	4610      	mov	r0, r2
 800da46:	f7fe ffc6 	bl	800c9d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da4e:	4b1b      	ldr	r3, [pc, #108]	; (800dabc <xTaskIncrementTick+0x164>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da54:	429a      	cmp	r2, r3
 800da56:	d3b9      	bcc.n	800d9cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da58:	2301      	movs	r3, #1
 800da5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da5c:	e7b6      	b.n	800d9cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da5e:	4b17      	ldr	r3, [pc, #92]	; (800dabc <xTaskIncrementTick+0x164>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da64:	4914      	ldr	r1, [pc, #80]	; (800dab8 <xTaskIncrementTick+0x160>)
 800da66:	4613      	mov	r3, r2
 800da68:	009b      	lsls	r3, r3, #2
 800da6a:	4413      	add	r3, r2
 800da6c:	009b      	lsls	r3, r3, #2
 800da6e:	440b      	add	r3, r1
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	2b01      	cmp	r3, #1
 800da74:	d901      	bls.n	800da7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800da76:	2301      	movs	r3, #1
 800da78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da7a:	4b11      	ldr	r3, [pc, #68]	; (800dac0 <xTaskIncrementTick+0x168>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d007      	beq.n	800da92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800da82:	2301      	movs	r3, #1
 800da84:	617b      	str	r3, [r7, #20]
 800da86:	e004      	b.n	800da92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da88:	4b0e      	ldr	r3, [pc, #56]	; (800dac4 <xTaskIncrementTick+0x16c>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	3301      	adds	r3, #1
 800da8e:	4a0d      	ldr	r2, [pc, #52]	; (800dac4 <xTaskIncrementTick+0x16c>)
 800da90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da92:	697b      	ldr	r3, [r7, #20]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	200010fc 	.word	0x200010fc
 800daa0:	200010d8 	.word	0x200010d8
 800daa4:	2000108c 	.word	0x2000108c
 800daa8:	20001090 	.word	0x20001090
 800daac:	200010ec 	.word	0x200010ec
 800dab0:	200010f4 	.word	0x200010f4
 800dab4:	200010dc 	.word	0x200010dc
 800dab8:	20000fd8 	.word	0x20000fd8
 800dabc:	20000fd4 	.word	0x20000fd4
 800dac0:	200010e8 	.word	0x200010e8
 800dac4:	200010e4 	.word	0x200010e4

0800dac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dac8:	b480      	push	{r7}
 800daca:	b087      	sub	sp, #28
 800dacc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dace:	4b27      	ldr	r3, [pc, #156]	; (800db6c <vTaskSwitchContext+0xa4>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d003      	beq.n	800dade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dad6:	4b26      	ldr	r3, [pc, #152]	; (800db70 <vTaskSwitchContext+0xa8>)
 800dad8:	2201      	movs	r2, #1
 800dada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dadc:	e03f      	b.n	800db5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800dade:	4b24      	ldr	r3, [pc, #144]	; (800db70 <vTaskSwitchContext+0xa8>)
 800dae0:	2200      	movs	r2, #0
 800dae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dae4:	4b23      	ldr	r3, [pc, #140]	; (800db74 <vTaskSwitchContext+0xac>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	fab3 f383 	clz	r3, r3
 800daf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800daf2:	7afb      	ldrb	r3, [r7, #11]
 800daf4:	f1c3 031f 	rsb	r3, r3, #31
 800daf8:	617b      	str	r3, [r7, #20]
 800dafa:	491f      	ldr	r1, [pc, #124]	; (800db78 <vTaskSwitchContext+0xb0>)
 800dafc:	697a      	ldr	r2, [r7, #20]
 800dafe:	4613      	mov	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	440b      	add	r3, r1
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10a      	bne.n	800db24 <vTaskSwitchContext+0x5c>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	607b      	str	r3, [r7, #4]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <vTaskSwitchContext+0x5a>
 800db24:	697a      	ldr	r2, [r7, #20]
 800db26:	4613      	mov	r3, r2
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	4413      	add	r3, r2
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4a12      	ldr	r2, [pc, #72]	; (800db78 <vTaskSwitchContext+0xb0>)
 800db30:	4413      	add	r3, r2
 800db32:	613b      	str	r3, [r7, #16]
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	693b      	ldr	r3, [r7, #16]
 800db3c:	605a      	str	r2, [r3, #4]
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	685a      	ldr	r2, [r3, #4]
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	3308      	adds	r3, #8
 800db46:	429a      	cmp	r2, r3
 800db48:	d104      	bne.n	800db54 <vTaskSwitchContext+0x8c>
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	685a      	ldr	r2, [r3, #4]
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	605a      	str	r2, [r3, #4]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	4a08      	ldr	r2, [pc, #32]	; (800db7c <vTaskSwitchContext+0xb4>)
 800db5c:	6013      	str	r3, [r2, #0]
}
 800db5e:	bf00      	nop
 800db60:	371c      	adds	r7, #28
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	200010fc 	.word	0x200010fc
 800db70:	200010e8 	.word	0x200010e8
 800db74:	200010dc 	.word	0x200010dc
 800db78:	20000fd8 	.word	0x20000fd8
 800db7c:	20000fd4 	.word	0x20000fd4

0800db80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
 800db88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10a      	bne.n	800dba6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800db90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db94:	f383 8811 	msr	BASEPRI, r3
 800db98:	f3bf 8f6f 	isb	sy
 800db9c:	f3bf 8f4f 	dsb	sy
 800dba0:	60fb      	str	r3, [r7, #12]
}
 800dba2:	bf00      	nop
 800dba4:	e7fe      	b.n	800dba4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dba6:	4b07      	ldr	r3, [pc, #28]	; (800dbc4 <vTaskPlaceOnEventList+0x44>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	3318      	adds	r3, #24
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f7fe ff35 	bl	800ca1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dbb4:	2101      	movs	r1, #1
 800dbb6:	6838      	ldr	r0, [r7, #0]
 800dbb8:	f000 fa66 	bl	800e088 <prvAddCurrentTaskToDelayedList>
}
 800dbbc:	bf00      	nop
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	20000fd4 	.word	0x20000fd4

0800dbc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b086      	sub	sp, #24
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10a      	bne.n	800dbf4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	60fb      	str	r3, [r7, #12]
}
 800dbf0:	bf00      	nop
 800dbf2:	e7fe      	b.n	800dbf2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	3318      	adds	r3, #24
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe ff49 	bl	800ca90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbfe:	4b1d      	ldr	r3, [pc, #116]	; (800dc74 <xTaskRemoveFromEventList+0xac>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d11c      	bne.n	800dc40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	3304      	adds	r3, #4
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe ff40 	bl	800ca90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc14:	2201      	movs	r2, #1
 800dc16:	409a      	lsls	r2, r3
 800dc18:	4b17      	ldr	r3, [pc, #92]	; (800dc78 <xTaskRemoveFromEventList+0xb0>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4313      	orrs	r3, r2
 800dc1e:	4a16      	ldr	r2, [pc, #88]	; (800dc78 <xTaskRemoveFromEventList+0xb0>)
 800dc20:	6013      	str	r3, [r2, #0]
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc26:	4613      	mov	r3, r2
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	4413      	add	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4a13      	ldr	r2, [pc, #76]	; (800dc7c <xTaskRemoveFromEventList+0xb4>)
 800dc30:	441a      	add	r2, r3
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	3304      	adds	r3, #4
 800dc36:	4619      	mov	r1, r3
 800dc38:	4610      	mov	r0, r2
 800dc3a:	f7fe fecc 	bl	800c9d6 <vListInsertEnd>
 800dc3e:	e005      	b.n	800dc4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	3318      	adds	r3, #24
 800dc44:	4619      	mov	r1, r3
 800dc46:	480e      	ldr	r0, [pc, #56]	; (800dc80 <xTaskRemoveFromEventList+0xb8>)
 800dc48:	f7fe fec5 	bl	800c9d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc50:	4b0c      	ldr	r3, [pc, #48]	; (800dc84 <xTaskRemoveFromEventList+0xbc>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d905      	bls.n	800dc66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc5e:	4b0a      	ldr	r3, [pc, #40]	; (800dc88 <xTaskRemoveFromEventList+0xc0>)
 800dc60:	2201      	movs	r2, #1
 800dc62:	601a      	str	r2, [r3, #0]
 800dc64:	e001      	b.n	800dc6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc6a:	697b      	ldr	r3, [r7, #20]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	200010fc 	.word	0x200010fc
 800dc78:	200010dc 	.word	0x200010dc
 800dc7c:	20000fd8 	.word	0x20000fd8
 800dc80:	20001094 	.word	0x20001094
 800dc84:	20000fd4 	.word	0x20000fd4
 800dc88:	200010e8 	.word	0x200010e8

0800dc8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc94:	4b06      	ldr	r3, [pc, #24]	; (800dcb0 <vTaskInternalSetTimeOutState+0x24>)
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc9c:	4b05      	ldr	r3, [pc, #20]	; (800dcb4 <vTaskInternalSetTimeOutState+0x28>)
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	605a      	str	r2, [r3, #4]
}
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr
 800dcb0:	200010ec 	.word	0x200010ec
 800dcb4:	200010d8 	.word	0x200010d8

0800dcb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b088      	sub	sp, #32
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10a      	bne.n	800dcde <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dcc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dccc:	f383 8811 	msr	BASEPRI, r3
 800dcd0:	f3bf 8f6f 	isb	sy
 800dcd4:	f3bf 8f4f 	dsb	sy
 800dcd8:	613b      	str	r3, [r7, #16]
}
 800dcda:	bf00      	nop
 800dcdc:	e7fe      	b.n	800dcdc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10a      	bne.n	800dcfa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce8:	f383 8811 	msr	BASEPRI, r3
 800dcec:	f3bf 8f6f 	isb	sy
 800dcf0:	f3bf 8f4f 	dsb	sy
 800dcf4:	60fb      	str	r3, [r7, #12]
}
 800dcf6:	bf00      	nop
 800dcf8:	e7fe      	b.n	800dcf8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dcfa:	f000 fb5b 	bl	800e3b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dcfe:	4b1d      	ldr	r3, [pc, #116]	; (800dd74 <xTaskCheckForTimeOut+0xbc>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	69ba      	ldr	r2, [r7, #24]
 800dd0a:	1ad3      	subs	r3, r2, r3
 800dd0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd16:	d102      	bne.n	800dd1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd18:	2300      	movs	r3, #0
 800dd1a:	61fb      	str	r3, [r7, #28]
 800dd1c:	e023      	b.n	800dd66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681a      	ldr	r2, [r3, #0]
 800dd22:	4b15      	ldr	r3, [pc, #84]	; (800dd78 <xTaskCheckForTimeOut+0xc0>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d007      	beq.n	800dd3a <xTaskCheckForTimeOut+0x82>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	69ba      	ldr	r2, [r7, #24]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d302      	bcc.n	800dd3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd34:	2301      	movs	r3, #1
 800dd36:	61fb      	str	r3, [r7, #28]
 800dd38:	e015      	b.n	800dd66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	697a      	ldr	r2, [r7, #20]
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d20b      	bcs.n	800dd5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	1ad2      	subs	r2, r2, r3
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff ff9b 	bl	800dc8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd56:	2300      	movs	r3, #0
 800dd58:	61fb      	str	r3, [r7, #28]
 800dd5a:	e004      	b.n	800dd66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd62:	2301      	movs	r3, #1
 800dd64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dd66:	f000 fb55 	bl	800e414 <vPortExitCritical>

	return xReturn;
 800dd6a:	69fb      	ldr	r3, [r7, #28]
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3720      	adds	r7, #32
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}
 800dd74:	200010d8 	.word	0x200010d8
 800dd78:	200010ec 	.word	0x200010ec

0800dd7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd80:	4b03      	ldr	r3, [pc, #12]	; (800dd90 <vTaskMissedYield+0x14>)
 800dd82:	2201      	movs	r2, #1
 800dd84:	601a      	str	r2, [r3, #0]
}
 800dd86:	bf00      	nop
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr
 800dd90:	200010e8 	.word	0x200010e8

0800dd94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd9c:	f000 f852 	bl	800de44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dda0:	4b06      	ldr	r3, [pc, #24]	; (800ddbc <prvIdleTask+0x28>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d9f9      	bls.n	800dd9c <prvIdleTask+0x8>
			{
				taskYIELD();
 800dda8:	4b05      	ldr	r3, [pc, #20]	; (800ddc0 <prvIdleTask+0x2c>)
 800ddaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddae:	601a      	str	r2, [r3, #0]
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ddb8:	e7f0      	b.n	800dd9c <prvIdleTask+0x8>
 800ddba:	bf00      	nop
 800ddbc:	20000fd8 	.word	0x20000fd8
 800ddc0:	e000ed04 	.word	0xe000ed04

0800ddc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ddca:	2300      	movs	r3, #0
 800ddcc:	607b      	str	r3, [r7, #4]
 800ddce:	e00c      	b.n	800ddea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4413      	add	r3, r2
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	4a12      	ldr	r2, [pc, #72]	; (800de24 <prvInitialiseTaskLists+0x60>)
 800dddc:	4413      	add	r3, r2
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe fdcc 	bl	800c97c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3301      	adds	r3, #1
 800dde8:	607b      	str	r3, [r7, #4]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2b06      	cmp	r3, #6
 800ddee:	d9ef      	bls.n	800ddd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ddf0:	480d      	ldr	r0, [pc, #52]	; (800de28 <prvInitialiseTaskLists+0x64>)
 800ddf2:	f7fe fdc3 	bl	800c97c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ddf6:	480d      	ldr	r0, [pc, #52]	; (800de2c <prvInitialiseTaskLists+0x68>)
 800ddf8:	f7fe fdc0 	bl	800c97c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ddfc:	480c      	ldr	r0, [pc, #48]	; (800de30 <prvInitialiseTaskLists+0x6c>)
 800ddfe:	f7fe fdbd 	bl	800c97c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de02:	480c      	ldr	r0, [pc, #48]	; (800de34 <prvInitialiseTaskLists+0x70>)
 800de04:	f7fe fdba 	bl	800c97c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de08:	480b      	ldr	r0, [pc, #44]	; (800de38 <prvInitialiseTaskLists+0x74>)
 800de0a:	f7fe fdb7 	bl	800c97c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de0e:	4b0b      	ldr	r3, [pc, #44]	; (800de3c <prvInitialiseTaskLists+0x78>)
 800de10:	4a05      	ldr	r2, [pc, #20]	; (800de28 <prvInitialiseTaskLists+0x64>)
 800de12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de14:	4b0a      	ldr	r3, [pc, #40]	; (800de40 <prvInitialiseTaskLists+0x7c>)
 800de16:	4a05      	ldr	r2, [pc, #20]	; (800de2c <prvInitialiseTaskLists+0x68>)
 800de18:	601a      	str	r2, [r3, #0]
}
 800de1a:	bf00      	nop
 800de1c:	3708      	adds	r7, #8
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	20000fd8 	.word	0x20000fd8
 800de28:	20001064 	.word	0x20001064
 800de2c:	20001078 	.word	0x20001078
 800de30:	20001094 	.word	0x20001094
 800de34:	200010a8 	.word	0x200010a8
 800de38:	200010c0 	.word	0x200010c0
 800de3c:	2000108c 	.word	0x2000108c
 800de40:	20001090 	.word	0x20001090

0800de44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de4a:	e019      	b.n	800de80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de4c:	f000 fab2 	bl	800e3b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de50:	4b10      	ldr	r3, [pc, #64]	; (800de94 <prvCheckTasksWaitingTermination+0x50>)
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3304      	adds	r3, #4
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fe fe17 	bl	800ca90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de62:	4b0d      	ldr	r3, [pc, #52]	; (800de98 <prvCheckTasksWaitingTermination+0x54>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3b01      	subs	r3, #1
 800de68:	4a0b      	ldr	r2, [pc, #44]	; (800de98 <prvCheckTasksWaitingTermination+0x54>)
 800de6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de6c:	4b0b      	ldr	r3, [pc, #44]	; (800de9c <prvCheckTasksWaitingTermination+0x58>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3b01      	subs	r3, #1
 800de72:	4a0a      	ldr	r2, [pc, #40]	; (800de9c <prvCheckTasksWaitingTermination+0x58>)
 800de74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800de76:	f000 facd 	bl	800e414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 f810 	bl	800dea0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de80:	4b06      	ldr	r3, [pc, #24]	; (800de9c <prvCheckTasksWaitingTermination+0x58>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1e1      	bne.n	800de4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de88:	bf00      	nop
 800de8a:	bf00      	nop
 800de8c:	3708      	adds	r7, #8
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	200010a8 	.word	0x200010a8
 800de98:	200010d4 	.word	0x200010d4
 800de9c:	200010bc 	.word	0x200010bc

0800dea0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d108      	bne.n	800dec4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 fc2a 	bl	800e710 <vPortFree>
				vPortFree( pxTCB );
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fc27 	bl	800e710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dec2:	e018      	b.n	800def6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800deca:	2b01      	cmp	r3, #1
 800decc:	d103      	bne.n	800ded6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fc1e 	bl	800e710 <vPortFree>
	}
 800ded4:	e00f      	b.n	800def6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d00a      	beq.n	800def6 <prvDeleteTCB+0x56>
	__asm volatile
 800dee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee4:	f383 8811 	msr	BASEPRI, r3
 800dee8:	f3bf 8f6f 	isb	sy
 800deec:	f3bf 8f4f 	dsb	sy
 800def0:	60fb      	str	r3, [r7, #12]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <prvDeleteTCB+0x54>
	}
 800def6:	bf00      	nop
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
	...

0800df00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df06:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <prvResetNextTaskUnblockTime+0x38>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <prvResetNextTaskUnblockTime+0x3c>)
 800df12:	f04f 32ff 	mov.w	r2, #4294967295
 800df16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df18:	e008      	b.n	800df2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df1a:	4b07      	ldr	r3, [pc, #28]	; (800df38 <prvResetNextTaskUnblockTime+0x38>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	4a04      	ldr	r2, [pc, #16]	; (800df3c <prvResetNextTaskUnblockTime+0x3c>)
 800df2a:	6013      	str	r3, [r2, #0]
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	2000108c 	.word	0x2000108c
 800df3c:	200010f4 	.word	0x200010f4

0800df40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df46:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <xTaskGetSchedulerState+0x34>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d102      	bne.n	800df54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df4e:	2301      	movs	r3, #1
 800df50:	607b      	str	r3, [r7, #4]
 800df52:	e008      	b.n	800df66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df54:	4b08      	ldr	r3, [pc, #32]	; (800df78 <xTaskGetSchedulerState+0x38>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800df5c:	2302      	movs	r3, #2
 800df5e:	607b      	str	r3, [r7, #4]
 800df60:	e001      	b.n	800df66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800df62:	2300      	movs	r3, #0
 800df64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df66:	687b      	ldr	r3, [r7, #4]
	}
 800df68:	4618      	mov	r0, r3
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	200010e0 	.word	0x200010e0
 800df78:	200010fc 	.word	0x200010fc

0800df7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800df88:	2300      	movs	r3, #0
 800df8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d06e      	beq.n	800e070 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800df92:	4b3a      	ldr	r3, [pc, #232]	; (800e07c <xTaskPriorityDisinherit+0x100>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	693a      	ldr	r2, [r7, #16]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d00a      	beq.n	800dfb2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	60fb      	str	r3, [r7, #12]
}
 800dfae:	bf00      	nop
 800dfb0:	e7fe      	b.n	800dfb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d10a      	bne.n	800dfd0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	60bb      	str	r3, [r7, #8]
}
 800dfcc:	bf00      	nop
 800dfce:	e7fe      	b.n	800dfce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfd4:	1e5a      	subs	r2, r3, #1
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d044      	beq.n	800e070 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d140      	bne.n	800e070 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	3304      	adds	r3, #4
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7fe fd4c 	bl	800ca90 <uxListRemove>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d115      	bne.n	800e02a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e002:	491f      	ldr	r1, [pc, #124]	; (800e080 <xTaskPriorityDisinherit+0x104>)
 800e004:	4613      	mov	r3, r2
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	4413      	add	r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	440b      	add	r3, r1
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10a      	bne.n	800e02a <xTaskPriorityDisinherit+0xae>
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e018:	2201      	movs	r2, #1
 800e01a:	fa02 f303 	lsl.w	r3, r2, r3
 800e01e:	43da      	mvns	r2, r3
 800e020:	4b18      	ldr	r3, [pc, #96]	; (800e084 <xTaskPriorityDisinherit+0x108>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4013      	ands	r3, r2
 800e026:	4a17      	ldr	r2, [pc, #92]	; (800e084 <xTaskPriorityDisinherit+0x108>)
 800e028:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e036:	f1c3 0207 	rsb	r2, r3, #7
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e042:	2201      	movs	r2, #1
 800e044:	409a      	lsls	r2, r3
 800e046:	4b0f      	ldr	r3, [pc, #60]	; (800e084 <xTaskPriorityDisinherit+0x108>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	4a0d      	ldr	r2, [pc, #52]	; (800e084 <xTaskPriorityDisinherit+0x108>)
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e054:	4613      	mov	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4a08      	ldr	r2, [pc, #32]	; (800e080 <xTaskPriorityDisinherit+0x104>)
 800e05e:	441a      	add	r2, r3
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	3304      	adds	r3, #4
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f7fe fcb5 	bl	800c9d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e06c:	2301      	movs	r3, #1
 800e06e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e070:	697b      	ldr	r3, [r7, #20]
	}
 800e072:	4618      	mov	r0, r3
 800e074:	3718      	adds	r7, #24
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	20000fd4 	.word	0x20000fd4
 800e080:	20000fd8 	.word	0x20000fd8
 800e084:	200010dc 	.word	0x200010dc

0800e088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b084      	sub	sp, #16
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e092:	4b29      	ldr	r3, [pc, #164]	; (800e138 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e098:	4b28      	ldr	r3, [pc, #160]	; (800e13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3304      	adds	r3, #4
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fcf6 	bl	800ca90 <uxListRemove>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d10b      	bne.n	800e0c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e0aa:	4b24      	ldr	r3, [pc, #144]	; (800e13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b0:	2201      	movs	r2, #1
 800e0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b6:	43da      	mvns	r2, r3
 800e0b8:	4b21      	ldr	r3, [pc, #132]	; (800e140 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4013      	ands	r3, r2
 800e0be:	4a20      	ldr	r2, [pc, #128]	; (800e140 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e0c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0c8:	d10a      	bne.n	800e0e0 <prvAddCurrentTaskToDelayedList+0x58>
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d007      	beq.n	800e0e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0d0:	4b1a      	ldr	r3, [pc, #104]	; (800e13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	481a      	ldr	r0, [pc, #104]	; (800e144 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e0da:	f7fe fc7c 	bl	800c9d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e0de:	e026      	b.n	800e12e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e0e8:	4b14      	ldr	r3, [pc, #80]	; (800e13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d209      	bcs.n	800e10c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e0f8:	4b13      	ldr	r3, [pc, #76]	; (800e148 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3304      	adds	r3, #4
 800e102:	4619      	mov	r1, r3
 800e104:	4610      	mov	r0, r2
 800e106:	f7fe fc8a 	bl	800ca1e <vListInsert>
}
 800e10a:	e010      	b.n	800e12e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e10c:	4b0f      	ldr	r3, [pc, #60]	; (800e14c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e10e:	681a      	ldr	r2, [r3, #0]
 800e110:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3304      	adds	r3, #4
 800e116:	4619      	mov	r1, r3
 800e118:	4610      	mov	r0, r2
 800e11a:	f7fe fc80 	bl	800ca1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e11e:	4b0c      	ldr	r3, [pc, #48]	; (800e150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	429a      	cmp	r2, r3
 800e126:	d202      	bcs.n	800e12e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e128:	4a09      	ldr	r2, [pc, #36]	; (800e150 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	6013      	str	r3, [r2, #0]
}
 800e12e:	bf00      	nop
 800e130:	3710      	adds	r7, #16
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	200010d8 	.word	0x200010d8
 800e13c:	20000fd4 	.word	0x20000fd4
 800e140:	200010dc 	.word	0x200010dc
 800e144:	200010c0 	.word	0x200010c0
 800e148:	20001090 	.word	0x20001090
 800e14c:	2000108c 	.word	0x2000108c
 800e150:	200010f4 	.word	0x200010f4

0800e154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	60f8      	str	r0, [r7, #12]
 800e15c:	60b9      	str	r1, [r7, #8]
 800e15e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3b04      	subs	r3, #4
 800e164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e16c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	3b04      	subs	r3, #4
 800e172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	f023 0201 	bic.w	r2, r3, #1
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	3b04      	subs	r3, #4
 800e182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e184:	4a0c      	ldr	r2, [pc, #48]	; (800e1b8 <pxPortInitialiseStack+0x64>)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	3b14      	subs	r3, #20
 800e18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	3b04      	subs	r3, #4
 800e19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f06f 0202 	mvn.w	r2, #2
 800e1a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	3b20      	subs	r3, #32
 800e1a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3714      	adds	r7, #20
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	0800e1bd 	.word	0x0800e1bd

0800e1bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b085      	sub	sp, #20
 800e1c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e1c6:	4b12      	ldr	r3, [pc, #72]	; (800e210 <prvTaskExitError+0x54>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ce:	d00a      	beq.n	800e1e6 <prvTaskExitError+0x2a>
	__asm volatile
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	60fb      	str	r3, [r7, #12]
}
 800e1e2:	bf00      	nop
 800e1e4:	e7fe      	b.n	800e1e4 <prvTaskExitError+0x28>
	__asm volatile
 800e1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ea:	f383 8811 	msr	BASEPRI, r3
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	60bb      	str	r3, [r7, #8]
}
 800e1f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e1fa:	bf00      	nop
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d0fc      	beq.n	800e1fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e202:	bf00      	nop
 800e204:	bf00      	nop
 800e206:	3714      	adds	r7, #20
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr
 800e210:	2000000c 	.word	0x2000000c
	...

0800e220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e220:	4b07      	ldr	r3, [pc, #28]	; (800e240 <pxCurrentTCBConst2>)
 800e222:	6819      	ldr	r1, [r3, #0]
 800e224:	6808      	ldr	r0, [r1, #0]
 800e226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22a:	f380 8809 	msr	PSP, r0
 800e22e:	f3bf 8f6f 	isb	sy
 800e232:	f04f 0000 	mov.w	r0, #0
 800e236:	f380 8811 	msr	BASEPRI, r0
 800e23a:	4770      	bx	lr
 800e23c:	f3af 8000 	nop.w

0800e240 <pxCurrentTCBConst2>:
 800e240:	20000fd4 	.word	0x20000fd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e244:	bf00      	nop
 800e246:	bf00      	nop

0800e248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e248:	4808      	ldr	r0, [pc, #32]	; (800e26c <prvPortStartFirstTask+0x24>)
 800e24a:	6800      	ldr	r0, [r0, #0]
 800e24c:	6800      	ldr	r0, [r0, #0]
 800e24e:	f380 8808 	msr	MSP, r0
 800e252:	f04f 0000 	mov.w	r0, #0
 800e256:	f380 8814 	msr	CONTROL, r0
 800e25a:	b662      	cpsie	i
 800e25c:	b661      	cpsie	f
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	f3bf 8f6f 	isb	sy
 800e266:	df00      	svc	0
 800e268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e26a:	bf00      	nop
 800e26c:	e000ed08 	.word	0xe000ed08

0800e270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b086      	sub	sp, #24
 800e274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e276:	4b46      	ldr	r3, [pc, #280]	; (800e390 <xPortStartScheduler+0x120>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	4a46      	ldr	r2, [pc, #280]	; (800e394 <xPortStartScheduler+0x124>)
 800e27c:	4293      	cmp	r3, r2
 800e27e:	d10a      	bne.n	800e296 <xPortStartScheduler+0x26>
	__asm volatile
 800e280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e284:	f383 8811 	msr	BASEPRI, r3
 800e288:	f3bf 8f6f 	isb	sy
 800e28c:	f3bf 8f4f 	dsb	sy
 800e290:	613b      	str	r3, [r7, #16]
}
 800e292:	bf00      	nop
 800e294:	e7fe      	b.n	800e294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e296:	4b3e      	ldr	r3, [pc, #248]	; (800e390 <xPortStartScheduler+0x120>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a3f      	ldr	r2, [pc, #252]	; (800e398 <xPortStartScheduler+0x128>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d10a      	bne.n	800e2b6 <xPortStartScheduler+0x46>
	__asm volatile
 800e2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2a4:	f383 8811 	msr	BASEPRI, r3
 800e2a8:	f3bf 8f6f 	isb	sy
 800e2ac:	f3bf 8f4f 	dsb	sy
 800e2b0:	60fb      	str	r3, [r7, #12]
}
 800e2b2:	bf00      	nop
 800e2b4:	e7fe      	b.n	800e2b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e2b6:	4b39      	ldr	r3, [pc, #228]	; (800e39c <xPortStartScheduler+0x12c>)
 800e2b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	22ff      	movs	r2, #255	; 0xff
 800e2c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	4b31      	ldr	r3, [pc, #196]	; (800e3a0 <xPortStartScheduler+0x130>)
 800e2dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e2de:	4b31      	ldr	r3, [pc, #196]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e2e0:	2207      	movs	r2, #7
 800e2e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2e4:	e009      	b.n	800e2fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e2e6:	4b2f      	ldr	r3, [pc, #188]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	4a2d      	ldr	r2, [pc, #180]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e2ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e2f0:	78fb      	ldrb	r3, [r7, #3]
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	005b      	lsls	r3, r3, #1
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e2fa:	78fb      	ldrb	r3, [r7, #3]
 800e2fc:	b2db      	uxtb	r3, r3
 800e2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e302:	2b80      	cmp	r3, #128	; 0x80
 800e304:	d0ef      	beq.n	800e2e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e306:	4b27      	ldr	r3, [pc, #156]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f1c3 0307 	rsb	r3, r3, #7
 800e30e:	2b04      	cmp	r3, #4
 800e310:	d00a      	beq.n	800e328 <xPortStartScheduler+0xb8>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e316:	f383 8811 	msr	BASEPRI, r3
 800e31a:	f3bf 8f6f 	isb	sy
 800e31e:	f3bf 8f4f 	dsb	sy
 800e322:	60bb      	str	r3, [r7, #8]
}
 800e324:	bf00      	nop
 800e326:	e7fe      	b.n	800e326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e328:	4b1e      	ldr	r3, [pc, #120]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	021b      	lsls	r3, r3, #8
 800e32e:	4a1d      	ldr	r2, [pc, #116]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e332:	4b1c      	ldr	r3, [pc, #112]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e33a:	4a1a      	ldr	r2, [pc, #104]	; (800e3a4 <xPortStartScheduler+0x134>)
 800e33c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	b2da      	uxtb	r2, r3
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e346:	4b18      	ldr	r3, [pc, #96]	; (800e3a8 <xPortStartScheduler+0x138>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	4a17      	ldr	r2, [pc, #92]	; (800e3a8 <xPortStartScheduler+0x138>)
 800e34c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e352:	4b15      	ldr	r3, [pc, #84]	; (800e3a8 <xPortStartScheduler+0x138>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4a14      	ldr	r2, [pc, #80]	; (800e3a8 <xPortStartScheduler+0x138>)
 800e358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e35c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e35e:	f000 f8dd 	bl	800e51c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <xPortStartScheduler+0x13c>)
 800e364:	2200      	movs	r2, #0
 800e366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e368:	f000 f8fc 	bl	800e564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e36c:	4b10      	ldr	r3, [pc, #64]	; (800e3b0 <xPortStartScheduler+0x140>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	4a0f      	ldr	r2, [pc, #60]	; (800e3b0 <xPortStartScheduler+0x140>)
 800e372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e378:	f7ff ff66 	bl	800e248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e37c:	f7ff fba4 	bl	800dac8 <vTaskSwitchContext>
	prvTaskExitError();
 800e380:	f7ff ff1c 	bl	800e1bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3718      	adds	r7, #24
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	e000ed00 	.word	0xe000ed00
 800e394:	410fc271 	.word	0x410fc271
 800e398:	410fc270 	.word	0x410fc270
 800e39c:	e000e400 	.word	0xe000e400
 800e3a0:	20001100 	.word	0x20001100
 800e3a4:	20001104 	.word	0x20001104
 800e3a8:	e000ed20 	.word	0xe000ed20
 800e3ac:	2000000c 	.word	0x2000000c
 800e3b0:	e000ef34 	.word	0xe000ef34

0800e3b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
	__asm volatile
 800e3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3be:	f383 8811 	msr	BASEPRI, r3
 800e3c2:	f3bf 8f6f 	isb	sy
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	607b      	str	r3, [r7, #4]
}
 800e3cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e3ce:	4b0f      	ldr	r3, [pc, #60]	; (800e40c <vPortEnterCritical+0x58>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	4a0d      	ldr	r2, [pc, #52]	; (800e40c <vPortEnterCritical+0x58>)
 800e3d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e3d8:	4b0c      	ldr	r3, [pc, #48]	; (800e40c <vPortEnterCritical+0x58>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b01      	cmp	r3, #1
 800e3de:	d10f      	bne.n	800e400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e3e0:	4b0b      	ldr	r3, [pc, #44]	; (800e410 <vPortEnterCritical+0x5c>)
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d00a      	beq.n	800e400 <vPortEnterCritical+0x4c>
	__asm volatile
 800e3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ee:	f383 8811 	msr	BASEPRI, r3
 800e3f2:	f3bf 8f6f 	isb	sy
 800e3f6:	f3bf 8f4f 	dsb	sy
 800e3fa:	603b      	str	r3, [r7, #0]
}
 800e3fc:	bf00      	nop
 800e3fe:	e7fe      	b.n	800e3fe <vPortEnterCritical+0x4a>
	}
}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr
 800e40c:	2000000c 	.word	0x2000000c
 800e410:	e000ed04 	.word	0xe000ed04

0800e414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e41a:	4b12      	ldr	r3, [pc, #72]	; (800e464 <vPortExitCritical+0x50>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d10a      	bne.n	800e438 <vPortExitCritical+0x24>
	__asm volatile
 800e422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e426:	f383 8811 	msr	BASEPRI, r3
 800e42a:	f3bf 8f6f 	isb	sy
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	607b      	str	r3, [r7, #4]
}
 800e434:	bf00      	nop
 800e436:	e7fe      	b.n	800e436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e438:	4b0a      	ldr	r3, [pc, #40]	; (800e464 <vPortExitCritical+0x50>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3b01      	subs	r3, #1
 800e43e:	4a09      	ldr	r2, [pc, #36]	; (800e464 <vPortExitCritical+0x50>)
 800e440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e442:	4b08      	ldr	r3, [pc, #32]	; (800e464 <vPortExitCritical+0x50>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d105      	bne.n	800e456 <vPortExitCritical+0x42>
 800e44a:	2300      	movs	r3, #0
 800e44c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e456:	bf00      	nop
 800e458:	370c      	adds	r7, #12
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr
 800e462:	bf00      	nop
 800e464:	2000000c 	.word	0x2000000c
	...

0800e470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e470:	f3ef 8009 	mrs	r0, PSP
 800e474:	f3bf 8f6f 	isb	sy
 800e478:	4b15      	ldr	r3, [pc, #84]	; (800e4d0 <pxCurrentTCBConst>)
 800e47a:	681a      	ldr	r2, [r3, #0]
 800e47c:	f01e 0f10 	tst.w	lr, #16
 800e480:	bf08      	it	eq
 800e482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e48a:	6010      	str	r0, [r2, #0]
 800e48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e490:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e494:	f380 8811 	msr	BASEPRI, r0
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	f3bf 8f6f 	isb	sy
 800e4a0:	f7ff fb12 	bl	800dac8 <vTaskSwitchContext>
 800e4a4:	f04f 0000 	mov.w	r0, #0
 800e4a8:	f380 8811 	msr	BASEPRI, r0
 800e4ac:	bc09      	pop	{r0, r3}
 800e4ae:	6819      	ldr	r1, [r3, #0]
 800e4b0:	6808      	ldr	r0, [r1, #0]
 800e4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b6:	f01e 0f10 	tst.w	lr, #16
 800e4ba:	bf08      	it	eq
 800e4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e4c0:	f380 8809 	msr	PSP, r0
 800e4c4:	f3bf 8f6f 	isb	sy
 800e4c8:	4770      	bx	lr
 800e4ca:	bf00      	nop
 800e4cc:	f3af 8000 	nop.w

0800e4d0 <pxCurrentTCBConst>:
 800e4d0:	20000fd4 	.word	0x20000fd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e4d4:	bf00      	nop
 800e4d6:	bf00      	nop

0800e4d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	607b      	str	r3, [r7, #4]
}
 800e4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e4f2:	f7ff fa31 	bl	800d958 <xTaskIncrementTick>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d003      	beq.n	800e504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e4fc:	4b06      	ldr	r3, [pc, #24]	; (800e518 <xPortSysTickHandler+0x40>)
 800e4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	2300      	movs	r3, #0
 800e506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	f383 8811 	msr	BASEPRI, r3
}
 800e50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e510:	bf00      	nop
 800e512:	3708      	adds	r7, #8
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	e000ed04 	.word	0xe000ed04

0800e51c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e51c:	b480      	push	{r7}
 800e51e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e520:	4b0b      	ldr	r3, [pc, #44]	; (800e550 <vPortSetupTimerInterrupt+0x34>)
 800e522:	2200      	movs	r2, #0
 800e524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e526:	4b0b      	ldr	r3, [pc, #44]	; (800e554 <vPortSetupTimerInterrupt+0x38>)
 800e528:	2200      	movs	r2, #0
 800e52a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e52c:	4b0a      	ldr	r3, [pc, #40]	; (800e558 <vPortSetupTimerInterrupt+0x3c>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4a0a      	ldr	r2, [pc, #40]	; (800e55c <vPortSetupTimerInterrupt+0x40>)
 800e532:	fba2 2303 	umull	r2, r3, r2, r3
 800e536:	099b      	lsrs	r3, r3, #6
 800e538:	4a09      	ldr	r2, [pc, #36]	; (800e560 <vPortSetupTimerInterrupt+0x44>)
 800e53a:	3b01      	subs	r3, #1
 800e53c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e53e:	4b04      	ldr	r3, [pc, #16]	; (800e550 <vPortSetupTimerInterrupt+0x34>)
 800e540:	2207      	movs	r2, #7
 800e542:	601a      	str	r2, [r3, #0]
}
 800e544:	bf00      	nop
 800e546:	46bd      	mov	sp, r7
 800e548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop
 800e550:	e000e010 	.word	0xe000e010
 800e554:	e000e018 	.word	0xe000e018
 800e558:	20000000 	.word	0x20000000
 800e55c:	10624dd3 	.word	0x10624dd3
 800e560:	e000e014 	.word	0xe000e014

0800e564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e574 <vPortEnableVFP+0x10>
 800e568:	6801      	ldr	r1, [r0, #0]
 800e56a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e56e:	6001      	str	r1, [r0, #0]
 800e570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e572:	bf00      	nop
 800e574:	e000ed88 	.word	0xe000ed88

0800e578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08a      	sub	sp, #40	; 0x28
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e580:	2300      	movs	r3, #0
 800e582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e584:	f7ff f92e 	bl	800d7e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e588:	4b5b      	ldr	r3, [pc, #364]	; (800e6f8 <pvPortMalloc+0x180>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e590:	f000 f920 	bl	800e7d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e594:	4b59      	ldr	r3, [pc, #356]	; (800e6fc <pvPortMalloc+0x184>)
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4013      	ands	r3, r2
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f040 8093 	bne.w	800e6c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d01d      	beq.n	800e5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e5a8:	2208      	movs	r2, #8
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f003 0307 	and.w	r3, r3, #7
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d014      	beq.n	800e5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f023 0307 	bic.w	r3, r3, #7
 800e5c0:	3308      	adds	r3, #8
 800e5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f003 0307 	and.w	r3, r3, #7
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00a      	beq.n	800e5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	617b      	str	r3, [r7, #20]
}
 800e5e0:	bf00      	nop
 800e5e2:	e7fe      	b.n	800e5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d06e      	beq.n	800e6c8 <pvPortMalloc+0x150>
 800e5ea:	4b45      	ldr	r3, [pc, #276]	; (800e700 <pvPortMalloc+0x188>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d869      	bhi.n	800e6c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5f4:	4b43      	ldr	r3, [pc, #268]	; (800e704 <pvPortMalloc+0x18c>)
 800e5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e5f8:	4b42      	ldr	r3, [pc, #264]	; (800e704 <pvPortMalloc+0x18c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5fe:	e004      	b.n	800e60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	429a      	cmp	r2, r3
 800e612:	d903      	bls.n	800e61c <pvPortMalloc+0xa4>
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1f1      	bne.n	800e600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e61c:	4b36      	ldr	r3, [pc, #216]	; (800e6f8 <pvPortMalloc+0x180>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e622:	429a      	cmp	r2, r3
 800e624:	d050      	beq.n	800e6c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e626:	6a3b      	ldr	r3, [r7, #32]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2208      	movs	r2, #8
 800e62c:	4413      	add	r3, r2
 800e62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	685a      	ldr	r2, [r3, #4]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	2308      	movs	r3, #8
 800e642:	005b      	lsls	r3, r3, #1
 800e644:	429a      	cmp	r2, r3
 800e646:	d91f      	bls.n	800e688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4413      	add	r3, r2
 800e64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	f003 0307 	and.w	r3, r3, #7
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00a      	beq.n	800e670 <pvPortMalloc+0xf8>
	__asm volatile
 800e65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e65e:	f383 8811 	msr	BASEPRI, r3
 800e662:	f3bf 8f6f 	isb	sy
 800e666:	f3bf 8f4f 	dsb	sy
 800e66a:	613b      	str	r3, [r7, #16]
}
 800e66c:	bf00      	nop
 800e66e:	e7fe      	b.n	800e66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	685a      	ldr	r2, [r3, #4]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	1ad2      	subs	r2, r2, r3
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e682:	69b8      	ldr	r0, [r7, #24]
 800e684:	f000 f908 	bl	800e898 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e688:	4b1d      	ldr	r3, [pc, #116]	; (800e700 <pvPortMalloc+0x188>)
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	4a1b      	ldr	r2, [pc, #108]	; (800e700 <pvPortMalloc+0x188>)
 800e694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e696:	4b1a      	ldr	r3, [pc, #104]	; (800e700 <pvPortMalloc+0x188>)
 800e698:	681a      	ldr	r2, [r3, #0]
 800e69a:	4b1b      	ldr	r3, [pc, #108]	; (800e708 <pvPortMalloc+0x190>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d203      	bcs.n	800e6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e6a2:	4b17      	ldr	r3, [pc, #92]	; (800e700 <pvPortMalloc+0x188>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	4a18      	ldr	r2, [pc, #96]	; (800e708 <pvPortMalloc+0x190>)
 800e6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	685a      	ldr	r2, [r3, #4]
 800e6ae:	4b13      	ldr	r3, [pc, #76]	; (800e6fc <pvPortMalloc+0x184>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	431a      	orrs	r2, r3
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e6be:	4b13      	ldr	r3, [pc, #76]	; (800e70c <pvPortMalloc+0x194>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	4a11      	ldr	r2, [pc, #68]	; (800e70c <pvPortMalloc+0x194>)
 800e6c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e6c8:	f7ff f89a 	bl	800d800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	f003 0307 	and.w	r3, r3, #7
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00a      	beq.n	800e6ec <pvPortMalloc+0x174>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	60fb      	str	r3, [r7, #12]
}
 800e6e8:	bf00      	nop
 800e6ea:	e7fe      	b.n	800e6ea <pvPortMalloc+0x172>
	return pvReturn;
 800e6ec:	69fb      	ldr	r3, [r7, #28]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3728      	adds	r7, #40	; 0x28
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20002880 	.word	0x20002880
 800e6fc:	20002894 	.word	0x20002894
 800e700:	20002884 	.word	0x20002884
 800e704:	20002878 	.word	0x20002878
 800e708:	20002888 	.word	0x20002888
 800e70c:	2000288c 	.word	0x2000288c

0800e710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d04d      	beq.n	800e7be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e722:	2308      	movs	r3, #8
 800e724:	425b      	negs	r3, r3
 800e726:	697a      	ldr	r2, [r7, #20]
 800e728:	4413      	add	r3, r2
 800e72a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e72c:	697b      	ldr	r3, [r7, #20]
 800e72e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	685a      	ldr	r2, [r3, #4]
 800e734:	4b24      	ldr	r3, [pc, #144]	; (800e7c8 <vPortFree+0xb8>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4013      	ands	r3, r2
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10a      	bne.n	800e754 <vPortFree+0x44>
	__asm volatile
 800e73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e742:	f383 8811 	msr	BASEPRI, r3
 800e746:	f3bf 8f6f 	isb	sy
 800e74a:	f3bf 8f4f 	dsb	sy
 800e74e:	60fb      	str	r3, [r7, #12]
}
 800e750:	bf00      	nop
 800e752:	e7fe      	b.n	800e752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d00a      	beq.n	800e772 <vPortFree+0x62>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	60bb      	str	r3, [r7, #8]
}
 800e76e:	bf00      	nop
 800e770:	e7fe      	b.n	800e770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	685a      	ldr	r2, [r3, #4]
 800e776:	4b14      	ldr	r3, [pc, #80]	; (800e7c8 <vPortFree+0xb8>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	4013      	ands	r3, r2
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d01e      	beq.n	800e7be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d11a      	bne.n	800e7be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	685a      	ldr	r2, [r3, #4]
 800e78c:	4b0e      	ldr	r3, [pc, #56]	; (800e7c8 <vPortFree+0xb8>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	43db      	mvns	r3, r3
 800e792:	401a      	ands	r2, r3
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e798:	f7ff f824 	bl	800d7e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	4b0a      	ldr	r3, [pc, #40]	; (800e7cc <vPortFree+0xbc>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4413      	add	r3, r2
 800e7a6:	4a09      	ldr	r2, [pc, #36]	; (800e7cc <vPortFree+0xbc>)
 800e7a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e7aa:	6938      	ldr	r0, [r7, #16]
 800e7ac:	f000 f874 	bl	800e898 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e7b0:	4b07      	ldr	r3, [pc, #28]	; (800e7d0 <vPortFree+0xc0>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	4a06      	ldr	r2, [pc, #24]	; (800e7d0 <vPortFree+0xc0>)
 800e7b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e7ba:	f7ff f821 	bl	800d800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e7be:	bf00      	nop
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
 800e7c6:	bf00      	nop
 800e7c8:	20002894 	.word	0x20002894
 800e7cc:	20002884 	.word	0x20002884
 800e7d0:	20002890 	.word	0x20002890

0800e7d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e7da:	f241 7370 	movw	r3, #6000	; 0x1770
 800e7de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e7e0:	4b27      	ldr	r3, [pc, #156]	; (800e880 <prvHeapInit+0xac>)
 800e7e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00c      	beq.n	800e808 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	3307      	adds	r3, #7
 800e7f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f023 0307 	bic.w	r3, r3, #7
 800e7fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	1ad3      	subs	r3, r2, r3
 800e802:	4a1f      	ldr	r2, [pc, #124]	; (800e880 <prvHeapInit+0xac>)
 800e804:	4413      	add	r3, r2
 800e806:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e80c:	4a1d      	ldr	r2, [pc, #116]	; (800e884 <prvHeapInit+0xb0>)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e812:	4b1c      	ldr	r3, [pc, #112]	; (800e884 <prvHeapInit+0xb0>)
 800e814:	2200      	movs	r2, #0
 800e816:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	4413      	add	r3, r2
 800e81e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e820:	2208      	movs	r2, #8
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	1a9b      	subs	r3, r3, r2
 800e826:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f023 0307 	bic.w	r3, r3, #7
 800e82e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	4a15      	ldr	r2, [pc, #84]	; (800e888 <prvHeapInit+0xb4>)
 800e834:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e836:	4b14      	ldr	r3, [pc, #80]	; (800e888 <prvHeapInit+0xb4>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2200      	movs	r2, #0
 800e83c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e83e:	4b12      	ldr	r3, [pc, #72]	; (800e888 <prvHeapInit+0xb4>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	2200      	movs	r2, #0
 800e844:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	68fa      	ldr	r2, [r7, #12]
 800e84e:	1ad2      	subs	r2, r2, r3
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e854:	4b0c      	ldr	r3, [pc, #48]	; (800e888 <prvHeapInit+0xb4>)
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	4a0a      	ldr	r2, [pc, #40]	; (800e88c <prvHeapInit+0xb8>)
 800e862:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	4a09      	ldr	r2, [pc, #36]	; (800e890 <prvHeapInit+0xbc>)
 800e86a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e86c:	4b09      	ldr	r3, [pc, #36]	; (800e894 <prvHeapInit+0xc0>)
 800e86e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e872:	601a      	str	r2, [r3, #0]
}
 800e874:	bf00      	nop
 800e876:	3714      	adds	r7, #20
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr
 800e880:	20001108 	.word	0x20001108
 800e884:	20002878 	.word	0x20002878
 800e888:	20002880 	.word	0x20002880
 800e88c:	20002888 	.word	0x20002888
 800e890:	20002884 	.word	0x20002884
 800e894:	20002894 	.word	0x20002894

0800e898 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e898:	b480      	push	{r7}
 800e89a:	b085      	sub	sp, #20
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e8a0:	4b28      	ldr	r3, [pc, #160]	; (800e944 <prvInsertBlockIntoFreeList+0xac>)
 800e8a2:	60fb      	str	r3, [r7, #12]
 800e8a4:	e002      	b.n	800e8ac <prvInsertBlockIntoFreeList+0x14>
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	60fb      	str	r3, [r7, #12]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d8f7      	bhi.n	800e8a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	68ba      	ldr	r2, [r7, #8]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d108      	bne.n	800e8da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	685a      	ldr	r2, [r3, #4]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	441a      	add	r2, r3
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	685b      	ldr	r3, [r3, #4]
 800e8e2:	68ba      	ldr	r2, [r7, #8]
 800e8e4:	441a      	add	r2, r3
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	429a      	cmp	r2, r3
 800e8ec:	d118      	bne.n	800e920 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	4b15      	ldr	r3, [pc, #84]	; (800e948 <prvInsertBlockIntoFreeList+0xb0>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d00d      	beq.n	800e916 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	685a      	ldr	r2, [r3, #4]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	441a      	add	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	601a      	str	r2, [r3, #0]
 800e914:	e008      	b.n	800e928 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e916:	4b0c      	ldr	r3, [pc, #48]	; (800e948 <prvInsertBlockIntoFreeList+0xb0>)
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	601a      	str	r2, [r3, #0]
 800e91e:	e003      	b.n	800e928 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681a      	ldr	r2, [r3, #0]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d002      	beq.n	800e936 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	687a      	ldr	r2, [r7, #4]
 800e934:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e936:	bf00      	nop
 800e938:	3714      	adds	r7, #20
 800e93a:	46bd      	mov	sp, r7
 800e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e940:	4770      	bx	lr
 800e942:	bf00      	nop
 800e944:	20002878 	.word	0x20002878
 800e948:	20002880 	.word	0x20002880

0800e94c <__errno>:
 800e94c:	4b01      	ldr	r3, [pc, #4]	; (800e954 <__errno+0x8>)
 800e94e:	6818      	ldr	r0, [r3, #0]
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	20000010 	.word	0x20000010

0800e958 <__libc_init_array>:
 800e958:	b570      	push	{r4, r5, r6, lr}
 800e95a:	4d0d      	ldr	r5, [pc, #52]	; (800e990 <__libc_init_array+0x38>)
 800e95c:	4c0d      	ldr	r4, [pc, #52]	; (800e994 <__libc_init_array+0x3c>)
 800e95e:	1b64      	subs	r4, r4, r5
 800e960:	10a4      	asrs	r4, r4, #2
 800e962:	2600      	movs	r6, #0
 800e964:	42a6      	cmp	r6, r4
 800e966:	d109      	bne.n	800e97c <__libc_init_array+0x24>
 800e968:	4d0b      	ldr	r5, [pc, #44]	; (800e998 <__libc_init_array+0x40>)
 800e96a:	4c0c      	ldr	r4, [pc, #48]	; (800e99c <__libc_init_array+0x44>)
 800e96c:	f003 fbe6 	bl	801213c <_init>
 800e970:	1b64      	subs	r4, r4, r5
 800e972:	10a4      	asrs	r4, r4, #2
 800e974:	2600      	movs	r6, #0
 800e976:	42a6      	cmp	r6, r4
 800e978:	d105      	bne.n	800e986 <__libc_init_array+0x2e>
 800e97a:	bd70      	pop	{r4, r5, r6, pc}
 800e97c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e980:	4798      	blx	r3
 800e982:	3601      	adds	r6, #1
 800e984:	e7ee      	b.n	800e964 <__libc_init_array+0xc>
 800e986:	f855 3b04 	ldr.w	r3, [r5], #4
 800e98a:	4798      	blx	r3
 800e98c:	3601      	adds	r6, #1
 800e98e:	e7f2      	b.n	800e976 <__libc_init_array+0x1e>
 800e990:	0801286c 	.word	0x0801286c
 800e994:	0801286c 	.word	0x0801286c
 800e998:	0801286c 	.word	0x0801286c
 800e99c:	08012870 	.word	0x08012870

0800e9a0 <memcpy>:
 800e9a0:	440a      	add	r2, r1
 800e9a2:	4291      	cmp	r1, r2
 800e9a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9a8:	d100      	bne.n	800e9ac <memcpy+0xc>
 800e9aa:	4770      	bx	lr
 800e9ac:	b510      	push	{r4, lr}
 800e9ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9b6:	4291      	cmp	r1, r2
 800e9b8:	d1f9      	bne.n	800e9ae <memcpy+0xe>
 800e9ba:	bd10      	pop	{r4, pc}

0800e9bc <memset>:
 800e9bc:	4402      	add	r2, r0
 800e9be:	4603      	mov	r3, r0
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	d100      	bne.n	800e9c6 <memset+0xa>
 800e9c4:	4770      	bx	lr
 800e9c6:	f803 1b01 	strb.w	r1, [r3], #1
 800e9ca:	e7f9      	b.n	800e9c0 <memset+0x4>

0800e9cc <_scanf_float>:
 800e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d0:	b087      	sub	sp, #28
 800e9d2:	4617      	mov	r7, r2
 800e9d4:	9303      	str	r3, [sp, #12]
 800e9d6:	688b      	ldr	r3, [r1, #8]
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e9de:	bf83      	ittte	hi
 800e9e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e9e4:	195b      	addhi	r3, r3, r5
 800e9e6:	9302      	strhi	r3, [sp, #8]
 800e9e8:	2300      	movls	r3, #0
 800e9ea:	bf86      	itte	hi
 800e9ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e9f0:	608b      	strhi	r3, [r1, #8]
 800e9f2:	9302      	strls	r3, [sp, #8]
 800e9f4:	680b      	ldr	r3, [r1, #0]
 800e9f6:	468b      	mov	fp, r1
 800e9f8:	2500      	movs	r5, #0
 800e9fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e9fe:	f84b 3b1c 	str.w	r3, [fp], #28
 800ea02:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ea06:	4680      	mov	r8, r0
 800ea08:	460c      	mov	r4, r1
 800ea0a:	465e      	mov	r6, fp
 800ea0c:	46aa      	mov	sl, r5
 800ea0e:	46a9      	mov	r9, r5
 800ea10:	9501      	str	r5, [sp, #4]
 800ea12:	68a2      	ldr	r2, [r4, #8]
 800ea14:	b152      	cbz	r2, 800ea2c <_scanf_float+0x60>
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	2b4e      	cmp	r3, #78	; 0x4e
 800ea1c:	d864      	bhi.n	800eae8 <_scanf_float+0x11c>
 800ea1e:	2b40      	cmp	r3, #64	; 0x40
 800ea20:	d83c      	bhi.n	800ea9c <_scanf_float+0xd0>
 800ea22:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ea26:	b2c8      	uxtb	r0, r1
 800ea28:	280e      	cmp	r0, #14
 800ea2a:	d93a      	bls.n	800eaa2 <_scanf_float+0xd6>
 800ea2c:	f1b9 0f00 	cmp.w	r9, #0
 800ea30:	d003      	beq.n	800ea3a <_scanf_float+0x6e>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea38:	6023      	str	r3, [r4, #0]
 800ea3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea3e:	f1ba 0f01 	cmp.w	sl, #1
 800ea42:	f200 8113 	bhi.w	800ec6c <_scanf_float+0x2a0>
 800ea46:	455e      	cmp	r6, fp
 800ea48:	f200 8105 	bhi.w	800ec56 <_scanf_float+0x28a>
 800ea4c:	2501      	movs	r5, #1
 800ea4e:	4628      	mov	r0, r5
 800ea50:	b007      	add	sp, #28
 800ea52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea56:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ea5a:	2a0d      	cmp	r2, #13
 800ea5c:	d8e6      	bhi.n	800ea2c <_scanf_float+0x60>
 800ea5e:	a101      	add	r1, pc, #4	; (adr r1, 800ea64 <_scanf_float+0x98>)
 800ea60:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ea64:	0800eba3 	.word	0x0800eba3
 800ea68:	0800ea2d 	.word	0x0800ea2d
 800ea6c:	0800ea2d 	.word	0x0800ea2d
 800ea70:	0800ea2d 	.word	0x0800ea2d
 800ea74:	0800ec03 	.word	0x0800ec03
 800ea78:	0800ebdb 	.word	0x0800ebdb
 800ea7c:	0800ea2d 	.word	0x0800ea2d
 800ea80:	0800ea2d 	.word	0x0800ea2d
 800ea84:	0800ebb1 	.word	0x0800ebb1
 800ea88:	0800ea2d 	.word	0x0800ea2d
 800ea8c:	0800ea2d 	.word	0x0800ea2d
 800ea90:	0800ea2d 	.word	0x0800ea2d
 800ea94:	0800ea2d 	.word	0x0800ea2d
 800ea98:	0800eb69 	.word	0x0800eb69
 800ea9c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800eaa0:	e7db      	b.n	800ea5a <_scanf_float+0x8e>
 800eaa2:	290e      	cmp	r1, #14
 800eaa4:	d8c2      	bhi.n	800ea2c <_scanf_float+0x60>
 800eaa6:	a001      	add	r0, pc, #4	; (adr r0, 800eaac <_scanf_float+0xe0>)
 800eaa8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eaac:	0800eb5b 	.word	0x0800eb5b
 800eab0:	0800ea2d 	.word	0x0800ea2d
 800eab4:	0800eb5b 	.word	0x0800eb5b
 800eab8:	0800ebef 	.word	0x0800ebef
 800eabc:	0800ea2d 	.word	0x0800ea2d
 800eac0:	0800eb09 	.word	0x0800eb09
 800eac4:	0800eb45 	.word	0x0800eb45
 800eac8:	0800eb45 	.word	0x0800eb45
 800eacc:	0800eb45 	.word	0x0800eb45
 800ead0:	0800eb45 	.word	0x0800eb45
 800ead4:	0800eb45 	.word	0x0800eb45
 800ead8:	0800eb45 	.word	0x0800eb45
 800eadc:	0800eb45 	.word	0x0800eb45
 800eae0:	0800eb45 	.word	0x0800eb45
 800eae4:	0800eb45 	.word	0x0800eb45
 800eae8:	2b6e      	cmp	r3, #110	; 0x6e
 800eaea:	d809      	bhi.n	800eb00 <_scanf_float+0x134>
 800eaec:	2b60      	cmp	r3, #96	; 0x60
 800eaee:	d8b2      	bhi.n	800ea56 <_scanf_float+0x8a>
 800eaf0:	2b54      	cmp	r3, #84	; 0x54
 800eaf2:	d077      	beq.n	800ebe4 <_scanf_float+0x218>
 800eaf4:	2b59      	cmp	r3, #89	; 0x59
 800eaf6:	d199      	bne.n	800ea2c <_scanf_float+0x60>
 800eaf8:	2d07      	cmp	r5, #7
 800eafa:	d197      	bne.n	800ea2c <_scanf_float+0x60>
 800eafc:	2508      	movs	r5, #8
 800eafe:	e029      	b.n	800eb54 <_scanf_float+0x188>
 800eb00:	2b74      	cmp	r3, #116	; 0x74
 800eb02:	d06f      	beq.n	800ebe4 <_scanf_float+0x218>
 800eb04:	2b79      	cmp	r3, #121	; 0x79
 800eb06:	e7f6      	b.n	800eaf6 <_scanf_float+0x12a>
 800eb08:	6821      	ldr	r1, [r4, #0]
 800eb0a:	05c8      	lsls	r0, r1, #23
 800eb0c:	d51a      	bpl.n	800eb44 <_scanf_float+0x178>
 800eb0e:	9b02      	ldr	r3, [sp, #8]
 800eb10:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800eb14:	6021      	str	r1, [r4, #0]
 800eb16:	f109 0901 	add.w	r9, r9, #1
 800eb1a:	b11b      	cbz	r3, 800eb24 <_scanf_float+0x158>
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	3201      	adds	r2, #1
 800eb20:	9302      	str	r3, [sp, #8]
 800eb22:	60a2      	str	r2, [r4, #8]
 800eb24:	68a3      	ldr	r3, [r4, #8]
 800eb26:	3b01      	subs	r3, #1
 800eb28:	60a3      	str	r3, [r4, #8]
 800eb2a:	6923      	ldr	r3, [r4, #16]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	6123      	str	r3, [r4, #16]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	3b01      	subs	r3, #1
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	607b      	str	r3, [r7, #4]
 800eb38:	f340 8084 	ble.w	800ec44 <_scanf_float+0x278>
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	603b      	str	r3, [r7, #0]
 800eb42:	e766      	b.n	800ea12 <_scanf_float+0x46>
 800eb44:	eb1a 0f05 	cmn.w	sl, r5
 800eb48:	f47f af70 	bne.w	800ea2c <_scanf_float+0x60>
 800eb4c:	6822      	ldr	r2, [r4, #0]
 800eb4e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800eb52:	6022      	str	r2, [r4, #0]
 800eb54:	f806 3b01 	strb.w	r3, [r6], #1
 800eb58:	e7e4      	b.n	800eb24 <_scanf_float+0x158>
 800eb5a:	6822      	ldr	r2, [r4, #0]
 800eb5c:	0610      	lsls	r0, r2, #24
 800eb5e:	f57f af65 	bpl.w	800ea2c <_scanf_float+0x60>
 800eb62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eb66:	e7f4      	b.n	800eb52 <_scanf_float+0x186>
 800eb68:	f1ba 0f00 	cmp.w	sl, #0
 800eb6c:	d10e      	bne.n	800eb8c <_scanf_float+0x1c0>
 800eb6e:	f1b9 0f00 	cmp.w	r9, #0
 800eb72:	d10e      	bne.n	800eb92 <_scanf_float+0x1c6>
 800eb74:	6822      	ldr	r2, [r4, #0]
 800eb76:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800eb7a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800eb7e:	d108      	bne.n	800eb92 <_scanf_float+0x1c6>
 800eb80:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800eb84:	6022      	str	r2, [r4, #0]
 800eb86:	f04f 0a01 	mov.w	sl, #1
 800eb8a:	e7e3      	b.n	800eb54 <_scanf_float+0x188>
 800eb8c:	f1ba 0f02 	cmp.w	sl, #2
 800eb90:	d055      	beq.n	800ec3e <_scanf_float+0x272>
 800eb92:	2d01      	cmp	r5, #1
 800eb94:	d002      	beq.n	800eb9c <_scanf_float+0x1d0>
 800eb96:	2d04      	cmp	r5, #4
 800eb98:	f47f af48 	bne.w	800ea2c <_scanf_float+0x60>
 800eb9c:	3501      	adds	r5, #1
 800eb9e:	b2ed      	uxtb	r5, r5
 800eba0:	e7d8      	b.n	800eb54 <_scanf_float+0x188>
 800eba2:	f1ba 0f01 	cmp.w	sl, #1
 800eba6:	f47f af41 	bne.w	800ea2c <_scanf_float+0x60>
 800ebaa:	f04f 0a02 	mov.w	sl, #2
 800ebae:	e7d1      	b.n	800eb54 <_scanf_float+0x188>
 800ebb0:	b97d      	cbnz	r5, 800ebd2 <_scanf_float+0x206>
 800ebb2:	f1b9 0f00 	cmp.w	r9, #0
 800ebb6:	f47f af3c 	bne.w	800ea32 <_scanf_float+0x66>
 800ebba:	6822      	ldr	r2, [r4, #0]
 800ebbc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ebc0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ebc4:	f47f af39 	bne.w	800ea3a <_scanf_float+0x6e>
 800ebc8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ebcc:	6022      	str	r2, [r4, #0]
 800ebce:	2501      	movs	r5, #1
 800ebd0:	e7c0      	b.n	800eb54 <_scanf_float+0x188>
 800ebd2:	2d03      	cmp	r5, #3
 800ebd4:	d0e2      	beq.n	800eb9c <_scanf_float+0x1d0>
 800ebd6:	2d05      	cmp	r5, #5
 800ebd8:	e7de      	b.n	800eb98 <_scanf_float+0x1cc>
 800ebda:	2d02      	cmp	r5, #2
 800ebdc:	f47f af26 	bne.w	800ea2c <_scanf_float+0x60>
 800ebe0:	2503      	movs	r5, #3
 800ebe2:	e7b7      	b.n	800eb54 <_scanf_float+0x188>
 800ebe4:	2d06      	cmp	r5, #6
 800ebe6:	f47f af21 	bne.w	800ea2c <_scanf_float+0x60>
 800ebea:	2507      	movs	r5, #7
 800ebec:	e7b2      	b.n	800eb54 <_scanf_float+0x188>
 800ebee:	6822      	ldr	r2, [r4, #0]
 800ebf0:	0591      	lsls	r1, r2, #22
 800ebf2:	f57f af1b 	bpl.w	800ea2c <_scanf_float+0x60>
 800ebf6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ebfa:	6022      	str	r2, [r4, #0]
 800ebfc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ec00:	e7a8      	b.n	800eb54 <_scanf_float+0x188>
 800ec02:	6822      	ldr	r2, [r4, #0]
 800ec04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ec08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ec0c:	d006      	beq.n	800ec1c <_scanf_float+0x250>
 800ec0e:	0550      	lsls	r0, r2, #21
 800ec10:	f57f af0c 	bpl.w	800ea2c <_scanf_float+0x60>
 800ec14:	f1b9 0f00 	cmp.w	r9, #0
 800ec18:	f43f af0f 	beq.w	800ea3a <_scanf_float+0x6e>
 800ec1c:	0591      	lsls	r1, r2, #22
 800ec1e:	bf58      	it	pl
 800ec20:	9901      	ldrpl	r1, [sp, #4]
 800ec22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ec26:	bf58      	it	pl
 800ec28:	eba9 0101 	subpl.w	r1, r9, r1
 800ec2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ec30:	bf58      	it	pl
 800ec32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ec36:	6022      	str	r2, [r4, #0]
 800ec38:	f04f 0900 	mov.w	r9, #0
 800ec3c:	e78a      	b.n	800eb54 <_scanf_float+0x188>
 800ec3e:	f04f 0a03 	mov.w	sl, #3
 800ec42:	e787      	b.n	800eb54 <_scanf_float+0x188>
 800ec44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ec48:	4639      	mov	r1, r7
 800ec4a:	4640      	mov	r0, r8
 800ec4c:	4798      	blx	r3
 800ec4e:	2800      	cmp	r0, #0
 800ec50:	f43f aedf 	beq.w	800ea12 <_scanf_float+0x46>
 800ec54:	e6ea      	b.n	800ea2c <_scanf_float+0x60>
 800ec56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec5e:	463a      	mov	r2, r7
 800ec60:	4640      	mov	r0, r8
 800ec62:	4798      	blx	r3
 800ec64:	6923      	ldr	r3, [r4, #16]
 800ec66:	3b01      	subs	r3, #1
 800ec68:	6123      	str	r3, [r4, #16]
 800ec6a:	e6ec      	b.n	800ea46 <_scanf_float+0x7a>
 800ec6c:	1e6b      	subs	r3, r5, #1
 800ec6e:	2b06      	cmp	r3, #6
 800ec70:	d825      	bhi.n	800ecbe <_scanf_float+0x2f2>
 800ec72:	2d02      	cmp	r5, #2
 800ec74:	d836      	bhi.n	800ece4 <_scanf_float+0x318>
 800ec76:	455e      	cmp	r6, fp
 800ec78:	f67f aee8 	bls.w	800ea4c <_scanf_float+0x80>
 800ec7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ec84:	463a      	mov	r2, r7
 800ec86:	4640      	mov	r0, r8
 800ec88:	4798      	blx	r3
 800ec8a:	6923      	ldr	r3, [r4, #16]
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	6123      	str	r3, [r4, #16]
 800ec90:	e7f1      	b.n	800ec76 <_scanf_float+0x2aa>
 800ec92:	9802      	ldr	r0, [sp, #8]
 800ec94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ec98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ec9c:	9002      	str	r0, [sp, #8]
 800ec9e:	463a      	mov	r2, r7
 800eca0:	4640      	mov	r0, r8
 800eca2:	4798      	blx	r3
 800eca4:	6923      	ldr	r3, [r4, #16]
 800eca6:	3b01      	subs	r3, #1
 800eca8:	6123      	str	r3, [r4, #16]
 800ecaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecae:	fa5f fa8a 	uxtb.w	sl, sl
 800ecb2:	f1ba 0f02 	cmp.w	sl, #2
 800ecb6:	d1ec      	bne.n	800ec92 <_scanf_float+0x2c6>
 800ecb8:	3d03      	subs	r5, #3
 800ecba:	b2ed      	uxtb	r5, r5
 800ecbc:	1b76      	subs	r6, r6, r5
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	05da      	lsls	r2, r3, #23
 800ecc2:	d52f      	bpl.n	800ed24 <_scanf_float+0x358>
 800ecc4:	055b      	lsls	r3, r3, #21
 800ecc6:	d510      	bpl.n	800ecea <_scanf_float+0x31e>
 800ecc8:	455e      	cmp	r6, fp
 800ecca:	f67f aebf 	bls.w	800ea4c <_scanf_float+0x80>
 800ecce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ecd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ecd6:	463a      	mov	r2, r7
 800ecd8:	4640      	mov	r0, r8
 800ecda:	4798      	blx	r3
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	3b01      	subs	r3, #1
 800ece0:	6123      	str	r3, [r4, #16]
 800ece2:	e7f1      	b.n	800ecc8 <_scanf_float+0x2fc>
 800ece4:	46aa      	mov	sl, r5
 800ece6:	9602      	str	r6, [sp, #8]
 800ece8:	e7df      	b.n	800ecaa <_scanf_float+0x2de>
 800ecea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ecee:	6923      	ldr	r3, [r4, #16]
 800ecf0:	2965      	cmp	r1, #101	; 0x65
 800ecf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ecf6:	f106 35ff 	add.w	r5, r6, #4294967295
 800ecfa:	6123      	str	r3, [r4, #16]
 800ecfc:	d00c      	beq.n	800ed18 <_scanf_float+0x34c>
 800ecfe:	2945      	cmp	r1, #69	; 0x45
 800ed00:	d00a      	beq.n	800ed18 <_scanf_float+0x34c>
 800ed02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed06:	463a      	mov	r2, r7
 800ed08:	4640      	mov	r0, r8
 800ed0a:	4798      	blx	r3
 800ed0c:	6923      	ldr	r3, [r4, #16]
 800ed0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ed12:	3b01      	subs	r3, #1
 800ed14:	1eb5      	subs	r5, r6, #2
 800ed16:	6123      	str	r3, [r4, #16]
 800ed18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed1c:	463a      	mov	r2, r7
 800ed1e:	4640      	mov	r0, r8
 800ed20:	4798      	blx	r3
 800ed22:	462e      	mov	r6, r5
 800ed24:	6825      	ldr	r5, [r4, #0]
 800ed26:	f015 0510 	ands.w	r5, r5, #16
 800ed2a:	d159      	bne.n	800ede0 <_scanf_float+0x414>
 800ed2c:	7035      	strb	r5, [r6, #0]
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ed34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed38:	d11b      	bne.n	800ed72 <_scanf_float+0x3a6>
 800ed3a:	9b01      	ldr	r3, [sp, #4]
 800ed3c:	454b      	cmp	r3, r9
 800ed3e:	eba3 0209 	sub.w	r2, r3, r9
 800ed42:	d123      	bne.n	800ed8c <_scanf_float+0x3c0>
 800ed44:	2200      	movs	r2, #0
 800ed46:	4659      	mov	r1, fp
 800ed48:	4640      	mov	r0, r8
 800ed4a:	f000 ff9b 	bl	800fc84 <_strtod_r>
 800ed4e:	6822      	ldr	r2, [r4, #0]
 800ed50:	9b03      	ldr	r3, [sp, #12]
 800ed52:	f012 0f02 	tst.w	r2, #2
 800ed56:	ec57 6b10 	vmov	r6, r7, d0
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	d021      	beq.n	800eda2 <_scanf_float+0x3d6>
 800ed5e:	9903      	ldr	r1, [sp, #12]
 800ed60:	1d1a      	adds	r2, r3, #4
 800ed62:	600a      	str	r2, [r1, #0]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	e9c3 6700 	strd	r6, r7, [r3]
 800ed6a:	68e3      	ldr	r3, [r4, #12]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	60e3      	str	r3, [r4, #12]
 800ed70:	e66d      	b.n	800ea4e <_scanf_float+0x82>
 800ed72:	9b04      	ldr	r3, [sp, #16]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d0e5      	beq.n	800ed44 <_scanf_float+0x378>
 800ed78:	9905      	ldr	r1, [sp, #20]
 800ed7a:	230a      	movs	r3, #10
 800ed7c:	462a      	mov	r2, r5
 800ed7e:	3101      	adds	r1, #1
 800ed80:	4640      	mov	r0, r8
 800ed82:	f001 f807 	bl	800fd94 <_strtol_r>
 800ed86:	9b04      	ldr	r3, [sp, #16]
 800ed88:	9e05      	ldr	r6, [sp, #20]
 800ed8a:	1ac2      	subs	r2, r0, r3
 800ed8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ed90:	429e      	cmp	r6, r3
 800ed92:	bf28      	it	cs
 800ed94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ed98:	4912      	ldr	r1, [pc, #72]	; (800ede4 <_scanf_float+0x418>)
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f000 f8d6 	bl	800ef4c <siprintf>
 800eda0:	e7d0      	b.n	800ed44 <_scanf_float+0x378>
 800eda2:	9903      	ldr	r1, [sp, #12]
 800eda4:	f012 0f04 	tst.w	r2, #4
 800eda8:	f103 0204 	add.w	r2, r3, #4
 800edac:	600a      	str	r2, [r1, #0]
 800edae:	d1d9      	bne.n	800ed64 <_scanf_float+0x398>
 800edb0:	f8d3 8000 	ldr.w	r8, [r3]
 800edb4:	ee10 2a10 	vmov	r2, s0
 800edb8:	ee10 0a10 	vmov	r0, s0
 800edbc:	463b      	mov	r3, r7
 800edbe:	4639      	mov	r1, r7
 800edc0:	f7f1 feb4 	bl	8000b2c <__aeabi_dcmpun>
 800edc4:	b128      	cbz	r0, 800edd2 <_scanf_float+0x406>
 800edc6:	4808      	ldr	r0, [pc, #32]	; (800ede8 <_scanf_float+0x41c>)
 800edc8:	f000 f886 	bl	800eed8 <nanf>
 800edcc:	ed88 0a00 	vstr	s0, [r8]
 800edd0:	e7cb      	b.n	800ed6a <_scanf_float+0x39e>
 800edd2:	4630      	mov	r0, r6
 800edd4:	4639      	mov	r1, r7
 800edd6:	f7f1 fedf 	bl	8000b98 <__aeabi_d2f>
 800edda:	f8c8 0000 	str.w	r0, [r8]
 800edde:	e7c4      	b.n	800ed6a <_scanf_float+0x39e>
 800ede0:	2500      	movs	r5, #0
 800ede2:	e634      	b.n	800ea4e <_scanf_float+0x82>
 800ede4:	0801242c 	.word	0x0801242c
 800ede8:	08012862 	.word	0x08012862

0800edec <_puts_r>:
 800edec:	b570      	push	{r4, r5, r6, lr}
 800edee:	460e      	mov	r6, r1
 800edf0:	4605      	mov	r5, r0
 800edf2:	b118      	cbz	r0, 800edfc <_puts_r+0x10>
 800edf4:	6983      	ldr	r3, [r0, #24]
 800edf6:	b90b      	cbnz	r3, 800edfc <_puts_r+0x10>
 800edf8:	f001 f9ca 	bl	8010190 <__sinit>
 800edfc:	69ab      	ldr	r3, [r5, #24]
 800edfe:	68ac      	ldr	r4, [r5, #8]
 800ee00:	b913      	cbnz	r3, 800ee08 <_puts_r+0x1c>
 800ee02:	4628      	mov	r0, r5
 800ee04:	f001 f9c4 	bl	8010190 <__sinit>
 800ee08:	4b2c      	ldr	r3, [pc, #176]	; (800eebc <_puts_r+0xd0>)
 800ee0a:	429c      	cmp	r4, r3
 800ee0c:	d120      	bne.n	800ee50 <_puts_r+0x64>
 800ee0e:	686c      	ldr	r4, [r5, #4]
 800ee10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee12:	07db      	lsls	r3, r3, #31
 800ee14:	d405      	bmi.n	800ee22 <_puts_r+0x36>
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	0598      	lsls	r0, r3, #22
 800ee1a:	d402      	bmi.n	800ee22 <_puts_r+0x36>
 800ee1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee1e:	f001 fdc4 	bl	80109aa <__retarget_lock_acquire_recursive>
 800ee22:	89a3      	ldrh	r3, [r4, #12]
 800ee24:	0719      	lsls	r1, r3, #28
 800ee26:	d51d      	bpl.n	800ee64 <_puts_r+0x78>
 800ee28:	6923      	ldr	r3, [r4, #16]
 800ee2a:	b1db      	cbz	r3, 800ee64 <_puts_r+0x78>
 800ee2c:	3e01      	subs	r6, #1
 800ee2e:	68a3      	ldr	r3, [r4, #8]
 800ee30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee34:	3b01      	subs	r3, #1
 800ee36:	60a3      	str	r3, [r4, #8]
 800ee38:	bb39      	cbnz	r1, 800ee8a <_puts_r+0x9e>
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	da38      	bge.n	800eeb0 <_puts_r+0xc4>
 800ee3e:	4622      	mov	r2, r4
 800ee40:	210a      	movs	r1, #10
 800ee42:	4628      	mov	r0, r5
 800ee44:	f000 ffa8 	bl	800fd98 <__swbuf_r>
 800ee48:	3001      	adds	r0, #1
 800ee4a:	d011      	beq.n	800ee70 <_puts_r+0x84>
 800ee4c:	250a      	movs	r5, #10
 800ee4e:	e011      	b.n	800ee74 <_puts_r+0x88>
 800ee50:	4b1b      	ldr	r3, [pc, #108]	; (800eec0 <_puts_r+0xd4>)
 800ee52:	429c      	cmp	r4, r3
 800ee54:	d101      	bne.n	800ee5a <_puts_r+0x6e>
 800ee56:	68ac      	ldr	r4, [r5, #8]
 800ee58:	e7da      	b.n	800ee10 <_puts_r+0x24>
 800ee5a:	4b1a      	ldr	r3, [pc, #104]	; (800eec4 <_puts_r+0xd8>)
 800ee5c:	429c      	cmp	r4, r3
 800ee5e:	bf08      	it	eq
 800ee60:	68ec      	ldreq	r4, [r5, #12]
 800ee62:	e7d5      	b.n	800ee10 <_puts_r+0x24>
 800ee64:	4621      	mov	r1, r4
 800ee66:	4628      	mov	r0, r5
 800ee68:	f000 fffa 	bl	800fe60 <__swsetup_r>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d0dd      	beq.n	800ee2c <_puts_r+0x40>
 800ee70:	f04f 35ff 	mov.w	r5, #4294967295
 800ee74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee76:	07da      	lsls	r2, r3, #31
 800ee78:	d405      	bmi.n	800ee86 <_puts_r+0x9a>
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	059b      	lsls	r3, r3, #22
 800ee7e:	d402      	bmi.n	800ee86 <_puts_r+0x9a>
 800ee80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee82:	f001 fd93 	bl	80109ac <__retarget_lock_release_recursive>
 800ee86:	4628      	mov	r0, r5
 800ee88:	bd70      	pop	{r4, r5, r6, pc}
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	da04      	bge.n	800ee98 <_puts_r+0xac>
 800ee8e:	69a2      	ldr	r2, [r4, #24]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	dc06      	bgt.n	800eea2 <_puts_r+0xb6>
 800ee94:	290a      	cmp	r1, #10
 800ee96:	d004      	beq.n	800eea2 <_puts_r+0xb6>
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	1c5a      	adds	r2, r3, #1
 800ee9c:	6022      	str	r2, [r4, #0]
 800ee9e:	7019      	strb	r1, [r3, #0]
 800eea0:	e7c5      	b.n	800ee2e <_puts_r+0x42>
 800eea2:	4622      	mov	r2, r4
 800eea4:	4628      	mov	r0, r5
 800eea6:	f000 ff77 	bl	800fd98 <__swbuf_r>
 800eeaa:	3001      	adds	r0, #1
 800eeac:	d1bf      	bne.n	800ee2e <_puts_r+0x42>
 800eeae:	e7df      	b.n	800ee70 <_puts_r+0x84>
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	250a      	movs	r5, #10
 800eeb4:	1c5a      	adds	r2, r3, #1
 800eeb6:	6022      	str	r2, [r4, #0]
 800eeb8:	701d      	strb	r5, [r3, #0]
 800eeba:	e7db      	b.n	800ee74 <_puts_r+0x88>
 800eebc:	080125b4 	.word	0x080125b4
 800eec0:	080125d4 	.word	0x080125d4
 800eec4:	08012594 	.word	0x08012594

0800eec8 <puts>:
 800eec8:	4b02      	ldr	r3, [pc, #8]	; (800eed4 <puts+0xc>)
 800eeca:	4601      	mov	r1, r0
 800eecc:	6818      	ldr	r0, [r3, #0]
 800eece:	f7ff bf8d 	b.w	800edec <_puts_r>
 800eed2:	bf00      	nop
 800eed4:	20000010 	.word	0x20000010

0800eed8 <nanf>:
 800eed8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800eee0 <nanf+0x8>
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	7fc00000 	.word	0x7fc00000

0800eee4 <sniprintf>:
 800eee4:	b40c      	push	{r2, r3}
 800eee6:	b530      	push	{r4, r5, lr}
 800eee8:	4b17      	ldr	r3, [pc, #92]	; (800ef48 <sniprintf+0x64>)
 800eeea:	1e0c      	subs	r4, r1, #0
 800eeec:	681d      	ldr	r5, [r3, #0]
 800eeee:	b09d      	sub	sp, #116	; 0x74
 800eef0:	da08      	bge.n	800ef04 <sniprintf+0x20>
 800eef2:	238b      	movs	r3, #139	; 0x8b
 800eef4:	602b      	str	r3, [r5, #0]
 800eef6:	f04f 30ff 	mov.w	r0, #4294967295
 800eefa:	b01d      	add	sp, #116	; 0x74
 800eefc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef00:	b002      	add	sp, #8
 800ef02:	4770      	bx	lr
 800ef04:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef08:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef0c:	bf14      	ite	ne
 800ef0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ef12:	4623      	moveq	r3, r4
 800ef14:	9304      	str	r3, [sp, #16]
 800ef16:	9307      	str	r3, [sp, #28]
 800ef18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef1c:	9002      	str	r0, [sp, #8]
 800ef1e:	9006      	str	r0, [sp, #24]
 800ef20:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef26:	ab21      	add	r3, sp, #132	; 0x84
 800ef28:	a902      	add	r1, sp, #8
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	9301      	str	r3, [sp, #4]
 800ef2e:	f002 fbdd 	bl	80116ec <_svfiprintf_r>
 800ef32:	1c43      	adds	r3, r0, #1
 800ef34:	bfbc      	itt	lt
 800ef36:	238b      	movlt	r3, #139	; 0x8b
 800ef38:	602b      	strlt	r3, [r5, #0]
 800ef3a:	2c00      	cmp	r4, #0
 800ef3c:	d0dd      	beq.n	800eefa <sniprintf+0x16>
 800ef3e:	9b02      	ldr	r3, [sp, #8]
 800ef40:	2200      	movs	r2, #0
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	e7d9      	b.n	800eefa <sniprintf+0x16>
 800ef46:	bf00      	nop
 800ef48:	20000010 	.word	0x20000010

0800ef4c <siprintf>:
 800ef4c:	b40e      	push	{r1, r2, r3}
 800ef4e:	b500      	push	{lr}
 800ef50:	b09c      	sub	sp, #112	; 0x70
 800ef52:	ab1d      	add	r3, sp, #116	; 0x74
 800ef54:	9002      	str	r0, [sp, #8]
 800ef56:	9006      	str	r0, [sp, #24]
 800ef58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef5c:	4809      	ldr	r0, [pc, #36]	; (800ef84 <siprintf+0x38>)
 800ef5e:	9107      	str	r1, [sp, #28]
 800ef60:	9104      	str	r1, [sp, #16]
 800ef62:	4909      	ldr	r1, [pc, #36]	; (800ef88 <siprintf+0x3c>)
 800ef64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef68:	9105      	str	r1, [sp, #20]
 800ef6a:	6800      	ldr	r0, [r0, #0]
 800ef6c:	9301      	str	r3, [sp, #4]
 800ef6e:	a902      	add	r1, sp, #8
 800ef70:	f002 fbbc 	bl	80116ec <_svfiprintf_r>
 800ef74:	9b02      	ldr	r3, [sp, #8]
 800ef76:	2200      	movs	r2, #0
 800ef78:	701a      	strb	r2, [r3, #0]
 800ef7a:	b01c      	add	sp, #112	; 0x70
 800ef7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef80:	b003      	add	sp, #12
 800ef82:	4770      	bx	lr
 800ef84:	20000010 	.word	0x20000010
 800ef88:	ffff0208 	.word	0xffff0208

0800ef8c <__sread>:
 800ef8c:	b510      	push	{r4, lr}
 800ef8e:	460c      	mov	r4, r1
 800ef90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef94:	f002 fe3e 	bl	8011c14 <_read_r>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	bfab      	itete	ge
 800ef9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef9e:	89a3      	ldrhlt	r3, [r4, #12]
 800efa0:	181b      	addge	r3, r3, r0
 800efa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efa6:	bfac      	ite	ge
 800efa8:	6563      	strge	r3, [r4, #84]	; 0x54
 800efaa:	81a3      	strhlt	r3, [r4, #12]
 800efac:	bd10      	pop	{r4, pc}

0800efae <__swrite>:
 800efae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb2:	461f      	mov	r7, r3
 800efb4:	898b      	ldrh	r3, [r1, #12]
 800efb6:	05db      	lsls	r3, r3, #23
 800efb8:	4605      	mov	r5, r0
 800efba:	460c      	mov	r4, r1
 800efbc:	4616      	mov	r6, r2
 800efbe:	d505      	bpl.n	800efcc <__swrite+0x1e>
 800efc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc4:	2302      	movs	r3, #2
 800efc6:	2200      	movs	r2, #0
 800efc8:	f001 fcf2 	bl	80109b0 <_lseek_r>
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efd6:	81a3      	strh	r3, [r4, #12]
 800efd8:	4632      	mov	r2, r6
 800efda:	463b      	mov	r3, r7
 800efdc:	4628      	mov	r0, r5
 800efde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efe2:	f000 bf2b 	b.w	800fe3c <_write_r>

0800efe6 <__sseek>:
 800efe6:	b510      	push	{r4, lr}
 800efe8:	460c      	mov	r4, r1
 800efea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efee:	f001 fcdf 	bl	80109b0 <_lseek_r>
 800eff2:	1c43      	adds	r3, r0, #1
 800eff4:	89a3      	ldrh	r3, [r4, #12]
 800eff6:	bf15      	itete	ne
 800eff8:	6560      	strne	r0, [r4, #84]	; 0x54
 800effa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800effe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f002:	81a3      	strheq	r3, [r4, #12]
 800f004:	bf18      	it	ne
 800f006:	81a3      	strhne	r3, [r4, #12]
 800f008:	bd10      	pop	{r4, pc}

0800f00a <__sclose>:
 800f00a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f00e:	f000 bf95 	b.w	800ff3c <_close_r>

0800f012 <strncmp>:
 800f012:	b510      	push	{r4, lr}
 800f014:	b17a      	cbz	r2, 800f036 <strncmp+0x24>
 800f016:	4603      	mov	r3, r0
 800f018:	3901      	subs	r1, #1
 800f01a:	1884      	adds	r4, r0, r2
 800f01c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f020:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f024:	4290      	cmp	r0, r2
 800f026:	d101      	bne.n	800f02c <strncmp+0x1a>
 800f028:	42a3      	cmp	r3, r4
 800f02a:	d101      	bne.n	800f030 <strncmp+0x1e>
 800f02c:	1a80      	subs	r0, r0, r2
 800f02e:	bd10      	pop	{r4, pc}
 800f030:	2800      	cmp	r0, #0
 800f032:	d1f3      	bne.n	800f01c <strncmp+0xa>
 800f034:	e7fa      	b.n	800f02c <strncmp+0x1a>
 800f036:	4610      	mov	r0, r2
 800f038:	e7f9      	b.n	800f02e <strncmp+0x1c>

0800f03a <sulp>:
 800f03a:	b570      	push	{r4, r5, r6, lr}
 800f03c:	4604      	mov	r4, r0
 800f03e:	460d      	mov	r5, r1
 800f040:	ec45 4b10 	vmov	d0, r4, r5
 800f044:	4616      	mov	r6, r2
 800f046:	f002 f8af 	bl	80111a8 <__ulp>
 800f04a:	ec51 0b10 	vmov	r0, r1, d0
 800f04e:	b17e      	cbz	r6, 800f070 <sulp+0x36>
 800f050:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f054:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dd09      	ble.n	800f070 <sulp+0x36>
 800f05c:	051b      	lsls	r3, r3, #20
 800f05e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f062:	2400      	movs	r4, #0
 800f064:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f068:	4622      	mov	r2, r4
 800f06a:	462b      	mov	r3, r5
 800f06c:	f7f1 fac4 	bl	80005f8 <__aeabi_dmul>
 800f070:	bd70      	pop	{r4, r5, r6, pc}
 800f072:	0000      	movs	r0, r0
 800f074:	0000      	movs	r0, r0
	...

0800f078 <_strtod_l>:
 800f078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f07c:	ed2d 8b02 	vpush	{d8}
 800f080:	b09d      	sub	sp, #116	; 0x74
 800f082:	461f      	mov	r7, r3
 800f084:	2300      	movs	r3, #0
 800f086:	9318      	str	r3, [sp, #96]	; 0x60
 800f088:	4ba2      	ldr	r3, [pc, #648]	; (800f314 <_strtod_l+0x29c>)
 800f08a:	9213      	str	r2, [sp, #76]	; 0x4c
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	9305      	str	r3, [sp, #20]
 800f090:	4604      	mov	r4, r0
 800f092:	4618      	mov	r0, r3
 800f094:	4688      	mov	r8, r1
 800f096:	f7f1 f89b 	bl	80001d0 <strlen>
 800f09a:	f04f 0a00 	mov.w	sl, #0
 800f09e:	4605      	mov	r5, r0
 800f0a0:	f04f 0b00 	mov.w	fp, #0
 800f0a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f0a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0aa:	781a      	ldrb	r2, [r3, #0]
 800f0ac:	2a2b      	cmp	r2, #43	; 0x2b
 800f0ae:	d04e      	beq.n	800f14e <_strtod_l+0xd6>
 800f0b0:	d83b      	bhi.n	800f12a <_strtod_l+0xb2>
 800f0b2:	2a0d      	cmp	r2, #13
 800f0b4:	d834      	bhi.n	800f120 <_strtod_l+0xa8>
 800f0b6:	2a08      	cmp	r2, #8
 800f0b8:	d834      	bhi.n	800f124 <_strtod_l+0xac>
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	d03e      	beq.n	800f13c <_strtod_l+0xc4>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	930a      	str	r3, [sp, #40]	; 0x28
 800f0c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800f0c4:	7833      	ldrb	r3, [r6, #0]
 800f0c6:	2b30      	cmp	r3, #48	; 0x30
 800f0c8:	f040 80b0 	bne.w	800f22c <_strtod_l+0x1b4>
 800f0cc:	7873      	ldrb	r3, [r6, #1]
 800f0ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0d2:	2b58      	cmp	r3, #88	; 0x58
 800f0d4:	d168      	bne.n	800f1a8 <_strtod_l+0x130>
 800f0d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0d8:	9301      	str	r3, [sp, #4]
 800f0da:	ab18      	add	r3, sp, #96	; 0x60
 800f0dc:	9702      	str	r7, [sp, #8]
 800f0de:	9300      	str	r3, [sp, #0]
 800f0e0:	4a8d      	ldr	r2, [pc, #564]	; (800f318 <_strtod_l+0x2a0>)
 800f0e2:	ab19      	add	r3, sp, #100	; 0x64
 800f0e4:	a917      	add	r1, sp, #92	; 0x5c
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	f001 f956 	bl	8010398 <__gethex>
 800f0ec:	f010 0707 	ands.w	r7, r0, #7
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	d005      	beq.n	800f100 <_strtod_l+0x88>
 800f0f4:	2f06      	cmp	r7, #6
 800f0f6:	d12c      	bne.n	800f152 <_strtod_l+0xda>
 800f0f8:	3601      	adds	r6, #1
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	9617      	str	r6, [sp, #92]	; 0x5c
 800f0fe:	930a      	str	r3, [sp, #40]	; 0x28
 800f100:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f102:	2b00      	cmp	r3, #0
 800f104:	f040 8590 	bne.w	800fc28 <_strtod_l+0xbb0>
 800f108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f10a:	b1eb      	cbz	r3, 800f148 <_strtod_l+0xd0>
 800f10c:	4652      	mov	r2, sl
 800f10e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f112:	ec43 2b10 	vmov	d0, r2, r3
 800f116:	b01d      	add	sp, #116	; 0x74
 800f118:	ecbd 8b02 	vpop	{d8}
 800f11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f120:	2a20      	cmp	r2, #32
 800f122:	d1cc      	bne.n	800f0be <_strtod_l+0x46>
 800f124:	3301      	adds	r3, #1
 800f126:	9317      	str	r3, [sp, #92]	; 0x5c
 800f128:	e7be      	b.n	800f0a8 <_strtod_l+0x30>
 800f12a:	2a2d      	cmp	r2, #45	; 0x2d
 800f12c:	d1c7      	bne.n	800f0be <_strtod_l+0x46>
 800f12e:	2201      	movs	r2, #1
 800f130:	920a      	str	r2, [sp, #40]	; 0x28
 800f132:	1c5a      	adds	r2, r3, #1
 800f134:	9217      	str	r2, [sp, #92]	; 0x5c
 800f136:	785b      	ldrb	r3, [r3, #1]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d1c2      	bne.n	800f0c2 <_strtod_l+0x4a>
 800f13c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f13e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f142:	2b00      	cmp	r3, #0
 800f144:	f040 856e 	bne.w	800fc24 <_strtod_l+0xbac>
 800f148:	4652      	mov	r2, sl
 800f14a:	465b      	mov	r3, fp
 800f14c:	e7e1      	b.n	800f112 <_strtod_l+0x9a>
 800f14e:	2200      	movs	r2, #0
 800f150:	e7ee      	b.n	800f130 <_strtod_l+0xb8>
 800f152:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f154:	b13a      	cbz	r2, 800f166 <_strtod_l+0xee>
 800f156:	2135      	movs	r1, #53	; 0x35
 800f158:	a81a      	add	r0, sp, #104	; 0x68
 800f15a:	f002 f930 	bl	80113be <__copybits>
 800f15e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f160:	4620      	mov	r0, r4
 800f162:	f001 fcef 	bl	8010b44 <_Bfree>
 800f166:	3f01      	subs	r7, #1
 800f168:	2f04      	cmp	r7, #4
 800f16a:	d806      	bhi.n	800f17a <_strtod_l+0x102>
 800f16c:	e8df f007 	tbb	[pc, r7]
 800f170:	1714030a 	.word	0x1714030a
 800f174:	0a          	.byte	0x0a
 800f175:	00          	.byte	0x00
 800f176:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800f17a:	0728      	lsls	r0, r5, #28
 800f17c:	d5c0      	bpl.n	800f100 <_strtod_l+0x88>
 800f17e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f182:	e7bd      	b.n	800f100 <_strtod_l+0x88>
 800f184:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800f188:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f18a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f18e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f192:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f196:	e7f0      	b.n	800f17a <_strtod_l+0x102>
 800f198:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f31c <_strtod_l+0x2a4>
 800f19c:	e7ed      	b.n	800f17a <_strtod_l+0x102>
 800f19e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f1a2:	f04f 3aff 	mov.w	sl, #4294967295
 800f1a6:	e7e8      	b.n	800f17a <_strtod_l+0x102>
 800f1a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1aa:	1c5a      	adds	r2, r3, #1
 800f1ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800f1ae:	785b      	ldrb	r3, [r3, #1]
 800f1b0:	2b30      	cmp	r3, #48	; 0x30
 800f1b2:	d0f9      	beq.n	800f1a8 <_strtod_l+0x130>
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d0a3      	beq.n	800f100 <_strtod_l+0x88>
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	f04f 0900 	mov.w	r9, #0
 800f1be:	9304      	str	r3, [sp, #16]
 800f1c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f1c2:	9308      	str	r3, [sp, #32]
 800f1c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800f1c8:	464f      	mov	r7, r9
 800f1ca:	220a      	movs	r2, #10
 800f1cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800f1ce:	7806      	ldrb	r6, [r0, #0]
 800f1d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f1d4:	b2d9      	uxtb	r1, r3
 800f1d6:	2909      	cmp	r1, #9
 800f1d8:	d92a      	bls.n	800f230 <_strtod_l+0x1b8>
 800f1da:	9905      	ldr	r1, [sp, #20]
 800f1dc:	462a      	mov	r2, r5
 800f1de:	f7ff ff18 	bl	800f012 <strncmp>
 800f1e2:	b398      	cbz	r0, 800f24c <_strtod_l+0x1d4>
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	4632      	mov	r2, r6
 800f1e8:	463d      	mov	r5, r7
 800f1ea:	9005      	str	r0, [sp, #20]
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2a65      	cmp	r2, #101	; 0x65
 800f1f0:	d001      	beq.n	800f1f6 <_strtod_l+0x17e>
 800f1f2:	2a45      	cmp	r2, #69	; 0x45
 800f1f4:	d118      	bne.n	800f228 <_strtod_l+0x1b0>
 800f1f6:	b91d      	cbnz	r5, 800f200 <_strtod_l+0x188>
 800f1f8:	9a04      	ldr	r2, [sp, #16]
 800f1fa:	4302      	orrs	r2, r0
 800f1fc:	d09e      	beq.n	800f13c <_strtod_l+0xc4>
 800f1fe:	2500      	movs	r5, #0
 800f200:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800f204:	f108 0201 	add.w	r2, r8, #1
 800f208:	9217      	str	r2, [sp, #92]	; 0x5c
 800f20a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800f20e:	2a2b      	cmp	r2, #43	; 0x2b
 800f210:	d075      	beq.n	800f2fe <_strtod_l+0x286>
 800f212:	2a2d      	cmp	r2, #45	; 0x2d
 800f214:	d07b      	beq.n	800f30e <_strtod_l+0x296>
 800f216:	f04f 0c00 	mov.w	ip, #0
 800f21a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800f21e:	2909      	cmp	r1, #9
 800f220:	f240 8082 	bls.w	800f328 <_strtod_l+0x2b0>
 800f224:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800f228:	2600      	movs	r6, #0
 800f22a:	e09d      	b.n	800f368 <_strtod_l+0x2f0>
 800f22c:	2300      	movs	r3, #0
 800f22e:	e7c4      	b.n	800f1ba <_strtod_l+0x142>
 800f230:	2f08      	cmp	r7, #8
 800f232:	bfd8      	it	le
 800f234:	9907      	ldrle	r1, [sp, #28]
 800f236:	f100 0001 	add.w	r0, r0, #1
 800f23a:	bfda      	itte	le
 800f23c:	fb02 3301 	mlale	r3, r2, r1, r3
 800f240:	9307      	strle	r3, [sp, #28]
 800f242:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f246:	3701      	adds	r7, #1
 800f248:	9017      	str	r0, [sp, #92]	; 0x5c
 800f24a:	e7bf      	b.n	800f1cc <_strtod_l+0x154>
 800f24c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f24e:	195a      	adds	r2, r3, r5
 800f250:	9217      	str	r2, [sp, #92]	; 0x5c
 800f252:	5d5a      	ldrb	r2, [r3, r5]
 800f254:	2f00      	cmp	r7, #0
 800f256:	d037      	beq.n	800f2c8 <_strtod_l+0x250>
 800f258:	9005      	str	r0, [sp, #20]
 800f25a:	463d      	mov	r5, r7
 800f25c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800f260:	2b09      	cmp	r3, #9
 800f262:	d912      	bls.n	800f28a <_strtod_l+0x212>
 800f264:	2301      	movs	r3, #1
 800f266:	e7c2      	b.n	800f1ee <_strtod_l+0x176>
 800f268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f26a:	1c5a      	adds	r2, r3, #1
 800f26c:	9217      	str	r2, [sp, #92]	; 0x5c
 800f26e:	785a      	ldrb	r2, [r3, #1]
 800f270:	3001      	adds	r0, #1
 800f272:	2a30      	cmp	r2, #48	; 0x30
 800f274:	d0f8      	beq.n	800f268 <_strtod_l+0x1f0>
 800f276:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800f27a:	2b08      	cmp	r3, #8
 800f27c:	f200 84d9 	bhi.w	800fc32 <_strtod_l+0xbba>
 800f280:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f282:	9005      	str	r0, [sp, #20]
 800f284:	2000      	movs	r0, #0
 800f286:	9308      	str	r3, [sp, #32]
 800f288:	4605      	mov	r5, r0
 800f28a:	3a30      	subs	r2, #48	; 0x30
 800f28c:	f100 0301 	add.w	r3, r0, #1
 800f290:	d014      	beq.n	800f2bc <_strtod_l+0x244>
 800f292:	9905      	ldr	r1, [sp, #20]
 800f294:	4419      	add	r1, r3
 800f296:	9105      	str	r1, [sp, #20]
 800f298:	462b      	mov	r3, r5
 800f29a:	eb00 0e05 	add.w	lr, r0, r5
 800f29e:	210a      	movs	r1, #10
 800f2a0:	4573      	cmp	r3, lr
 800f2a2:	d113      	bne.n	800f2cc <_strtod_l+0x254>
 800f2a4:	182b      	adds	r3, r5, r0
 800f2a6:	2b08      	cmp	r3, #8
 800f2a8:	f105 0501 	add.w	r5, r5, #1
 800f2ac:	4405      	add	r5, r0
 800f2ae:	dc1c      	bgt.n	800f2ea <_strtod_l+0x272>
 800f2b0:	9907      	ldr	r1, [sp, #28]
 800f2b2:	230a      	movs	r3, #10
 800f2b4:	fb03 2301 	mla	r3, r3, r1, r2
 800f2b8:	9307      	str	r3, [sp, #28]
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2be:	1c51      	adds	r1, r2, #1
 800f2c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800f2c2:	7852      	ldrb	r2, [r2, #1]
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	e7c9      	b.n	800f25c <_strtod_l+0x1e4>
 800f2c8:	4638      	mov	r0, r7
 800f2ca:	e7d2      	b.n	800f272 <_strtod_l+0x1fa>
 800f2cc:	2b08      	cmp	r3, #8
 800f2ce:	dc04      	bgt.n	800f2da <_strtod_l+0x262>
 800f2d0:	9e07      	ldr	r6, [sp, #28]
 800f2d2:	434e      	muls	r6, r1
 800f2d4:	9607      	str	r6, [sp, #28]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	e7e2      	b.n	800f2a0 <_strtod_l+0x228>
 800f2da:	f103 0c01 	add.w	ip, r3, #1
 800f2de:	f1bc 0f10 	cmp.w	ip, #16
 800f2e2:	bfd8      	it	le
 800f2e4:	fb01 f909 	mulle.w	r9, r1, r9
 800f2e8:	e7f5      	b.n	800f2d6 <_strtod_l+0x25e>
 800f2ea:	2d10      	cmp	r5, #16
 800f2ec:	bfdc      	itt	le
 800f2ee:	230a      	movle	r3, #10
 800f2f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800f2f4:	e7e1      	b.n	800f2ba <_strtod_l+0x242>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	9305      	str	r3, [sp, #20]
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e77c      	b.n	800f1f8 <_strtod_l+0x180>
 800f2fe:	f04f 0c00 	mov.w	ip, #0
 800f302:	f108 0202 	add.w	r2, r8, #2
 800f306:	9217      	str	r2, [sp, #92]	; 0x5c
 800f308:	f898 2002 	ldrb.w	r2, [r8, #2]
 800f30c:	e785      	b.n	800f21a <_strtod_l+0x1a2>
 800f30e:	f04f 0c01 	mov.w	ip, #1
 800f312:	e7f6      	b.n	800f302 <_strtod_l+0x28a>
 800f314:	0801266c 	.word	0x0801266c
 800f318:	08012440 	.word	0x08012440
 800f31c:	7ff00000 	.word	0x7ff00000
 800f320:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f322:	1c51      	adds	r1, r2, #1
 800f324:	9117      	str	r1, [sp, #92]	; 0x5c
 800f326:	7852      	ldrb	r2, [r2, #1]
 800f328:	2a30      	cmp	r2, #48	; 0x30
 800f32a:	d0f9      	beq.n	800f320 <_strtod_l+0x2a8>
 800f32c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f330:	2908      	cmp	r1, #8
 800f332:	f63f af79 	bhi.w	800f228 <_strtod_l+0x1b0>
 800f336:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f33a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f33c:	9206      	str	r2, [sp, #24]
 800f33e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f340:	1c51      	adds	r1, r2, #1
 800f342:	9117      	str	r1, [sp, #92]	; 0x5c
 800f344:	7852      	ldrb	r2, [r2, #1]
 800f346:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f34a:	2e09      	cmp	r6, #9
 800f34c:	d937      	bls.n	800f3be <_strtod_l+0x346>
 800f34e:	9e06      	ldr	r6, [sp, #24]
 800f350:	1b89      	subs	r1, r1, r6
 800f352:	2908      	cmp	r1, #8
 800f354:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f358:	dc02      	bgt.n	800f360 <_strtod_l+0x2e8>
 800f35a:	4576      	cmp	r6, lr
 800f35c:	bfa8      	it	ge
 800f35e:	4676      	movge	r6, lr
 800f360:	f1bc 0f00 	cmp.w	ip, #0
 800f364:	d000      	beq.n	800f368 <_strtod_l+0x2f0>
 800f366:	4276      	negs	r6, r6
 800f368:	2d00      	cmp	r5, #0
 800f36a:	d14d      	bne.n	800f408 <_strtod_l+0x390>
 800f36c:	9904      	ldr	r1, [sp, #16]
 800f36e:	4301      	orrs	r1, r0
 800f370:	f47f aec6 	bne.w	800f100 <_strtod_l+0x88>
 800f374:	2b00      	cmp	r3, #0
 800f376:	f47f aee1 	bne.w	800f13c <_strtod_l+0xc4>
 800f37a:	2a69      	cmp	r2, #105	; 0x69
 800f37c:	d027      	beq.n	800f3ce <_strtod_l+0x356>
 800f37e:	dc24      	bgt.n	800f3ca <_strtod_l+0x352>
 800f380:	2a49      	cmp	r2, #73	; 0x49
 800f382:	d024      	beq.n	800f3ce <_strtod_l+0x356>
 800f384:	2a4e      	cmp	r2, #78	; 0x4e
 800f386:	f47f aed9 	bne.w	800f13c <_strtod_l+0xc4>
 800f38a:	499f      	ldr	r1, [pc, #636]	; (800f608 <_strtod_l+0x590>)
 800f38c:	a817      	add	r0, sp, #92	; 0x5c
 800f38e:	f001 fa5b 	bl	8010848 <__match>
 800f392:	2800      	cmp	r0, #0
 800f394:	f43f aed2 	beq.w	800f13c <_strtod_l+0xc4>
 800f398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	2b28      	cmp	r3, #40	; 0x28
 800f39e:	d12d      	bne.n	800f3fc <_strtod_l+0x384>
 800f3a0:	499a      	ldr	r1, [pc, #616]	; (800f60c <_strtod_l+0x594>)
 800f3a2:	aa1a      	add	r2, sp, #104	; 0x68
 800f3a4:	a817      	add	r0, sp, #92	; 0x5c
 800f3a6:	f001 fa63 	bl	8010870 <__hexnan>
 800f3aa:	2805      	cmp	r0, #5
 800f3ac:	d126      	bne.n	800f3fc <_strtod_l+0x384>
 800f3ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f3b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f3b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f3bc:	e6a0      	b.n	800f100 <_strtod_l+0x88>
 800f3be:	210a      	movs	r1, #10
 800f3c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f3c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f3c8:	e7b9      	b.n	800f33e <_strtod_l+0x2c6>
 800f3ca:	2a6e      	cmp	r2, #110	; 0x6e
 800f3cc:	e7db      	b.n	800f386 <_strtod_l+0x30e>
 800f3ce:	4990      	ldr	r1, [pc, #576]	; (800f610 <_strtod_l+0x598>)
 800f3d0:	a817      	add	r0, sp, #92	; 0x5c
 800f3d2:	f001 fa39 	bl	8010848 <__match>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	f43f aeb0 	beq.w	800f13c <_strtod_l+0xc4>
 800f3dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3de:	498d      	ldr	r1, [pc, #564]	; (800f614 <_strtod_l+0x59c>)
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	a817      	add	r0, sp, #92	; 0x5c
 800f3e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800f3e6:	f001 fa2f 	bl	8010848 <__match>
 800f3ea:	b910      	cbnz	r0, 800f3f2 <_strtod_l+0x37a>
 800f3ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800f3f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f624 <_strtod_l+0x5ac>
 800f3f6:	f04f 0a00 	mov.w	sl, #0
 800f3fa:	e681      	b.n	800f100 <_strtod_l+0x88>
 800f3fc:	4886      	ldr	r0, [pc, #536]	; (800f618 <_strtod_l+0x5a0>)
 800f3fe:	f002 fc1b 	bl	8011c38 <nan>
 800f402:	ec5b ab10 	vmov	sl, fp, d0
 800f406:	e67b      	b.n	800f100 <_strtod_l+0x88>
 800f408:	9b05      	ldr	r3, [sp, #20]
 800f40a:	9807      	ldr	r0, [sp, #28]
 800f40c:	1af3      	subs	r3, r6, r3
 800f40e:	2f00      	cmp	r7, #0
 800f410:	bf08      	it	eq
 800f412:	462f      	moveq	r7, r5
 800f414:	2d10      	cmp	r5, #16
 800f416:	9306      	str	r3, [sp, #24]
 800f418:	46a8      	mov	r8, r5
 800f41a:	bfa8      	it	ge
 800f41c:	f04f 0810 	movge.w	r8, #16
 800f420:	f7f1 f870 	bl	8000504 <__aeabi_ui2d>
 800f424:	2d09      	cmp	r5, #9
 800f426:	4682      	mov	sl, r0
 800f428:	468b      	mov	fp, r1
 800f42a:	dd13      	ble.n	800f454 <_strtod_l+0x3dc>
 800f42c:	4b7b      	ldr	r3, [pc, #492]	; (800f61c <_strtod_l+0x5a4>)
 800f42e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f432:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f436:	f7f1 f8df 	bl	80005f8 <__aeabi_dmul>
 800f43a:	4682      	mov	sl, r0
 800f43c:	4648      	mov	r0, r9
 800f43e:	468b      	mov	fp, r1
 800f440:	f7f1 f860 	bl	8000504 <__aeabi_ui2d>
 800f444:	4602      	mov	r2, r0
 800f446:	460b      	mov	r3, r1
 800f448:	4650      	mov	r0, sl
 800f44a:	4659      	mov	r1, fp
 800f44c:	f7f0 ff1e 	bl	800028c <__adddf3>
 800f450:	4682      	mov	sl, r0
 800f452:	468b      	mov	fp, r1
 800f454:	2d0f      	cmp	r5, #15
 800f456:	dc38      	bgt.n	800f4ca <_strtod_l+0x452>
 800f458:	9b06      	ldr	r3, [sp, #24]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	f43f ae50 	beq.w	800f100 <_strtod_l+0x88>
 800f460:	dd24      	ble.n	800f4ac <_strtod_l+0x434>
 800f462:	2b16      	cmp	r3, #22
 800f464:	dc0b      	bgt.n	800f47e <_strtod_l+0x406>
 800f466:	496d      	ldr	r1, [pc, #436]	; (800f61c <_strtod_l+0x5a4>)
 800f468:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f46c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f470:	4652      	mov	r2, sl
 800f472:	465b      	mov	r3, fp
 800f474:	f7f1 f8c0 	bl	80005f8 <__aeabi_dmul>
 800f478:	4682      	mov	sl, r0
 800f47a:	468b      	mov	fp, r1
 800f47c:	e640      	b.n	800f100 <_strtod_l+0x88>
 800f47e:	9a06      	ldr	r2, [sp, #24]
 800f480:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f484:	4293      	cmp	r3, r2
 800f486:	db20      	blt.n	800f4ca <_strtod_l+0x452>
 800f488:	4c64      	ldr	r4, [pc, #400]	; (800f61c <_strtod_l+0x5a4>)
 800f48a:	f1c5 050f 	rsb	r5, r5, #15
 800f48e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f492:	4652      	mov	r2, sl
 800f494:	465b      	mov	r3, fp
 800f496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f49a:	f7f1 f8ad 	bl	80005f8 <__aeabi_dmul>
 800f49e:	9b06      	ldr	r3, [sp, #24]
 800f4a0:	1b5d      	subs	r5, r3, r5
 800f4a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f4a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f4aa:	e7e3      	b.n	800f474 <_strtod_l+0x3fc>
 800f4ac:	9b06      	ldr	r3, [sp, #24]
 800f4ae:	3316      	adds	r3, #22
 800f4b0:	db0b      	blt.n	800f4ca <_strtod_l+0x452>
 800f4b2:	9b05      	ldr	r3, [sp, #20]
 800f4b4:	1b9e      	subs	r6, r3, r6
 800f4b6:	4b59      	ldr	r3, [pc, #356]	; (800f61c <_strtod_l+0x5a4>)
 800f4b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f4bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f4c0:	4650      	mov	r0, sl
 800f4c2:	4659      	mov	r1, fp
 800f4c4:	f7f1 f9c2 	bl	800084c <__aeabi_ddiv>
 800f4c8:	e7d6      	b.n	800f478 <_strtod_l+0x400>
 800f4ca:	9b06      	ldr	r3, [sp, #24]
 800f4cc:	eba5 0808 	sub.w	r8, r5, r8
 800f4d0:	4498      	add	r8, r3
 800f4d2:	f1b8 0f00 	cmp.w	r8, #0
 800f4d6:	dd74      	ble.n	800f5c2 <_strtod_l+0x54a>
 800f4d8:	f018 030f 	ands.w	r3, r8, #15
 800f4dc:	d00a      	beq.n	800f4f4 <_strtod_l+0x47c>
 800f4de:	494f      	ldr	r1, [pc, #316]	; (800f61c <_strtod_l+0x5a4>)
 800f4e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f4e4:	4652      	mov	r2, sl
 800f4e6:	465b      	mov	r3, fp
 800f4e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ec:	f7f1 f884 	bl	80005f8 <__aeabi_dmul>
 800f4f0:	4682      	mov	sl, r0
 800f4f2:	468b      	mov	fp, r1
 800f4f4:	f038 080f 	bics.w	r8, r8, #15
 800f4f8:	d04f      	beq.n	800f59a <_strtod_l+0x522>
 800f4fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f4fe:	dd22      	ble.n	800f546 <_strtod_l+0x4ce>
 800f500:	2500      	movs	r5, #0
 800f502:	462e      	mov	r6, r5
 800f504:	9507      	str	r5, [sp, #28]
 800f506:	9505      	str	r5, [sp, #20]
 800f508:	2322      	movs	r3, #34	; 0x22
 800f50a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f624 <_strtod_l+0x5ac>
 800f50e:	6023      	str	r3, [r4, #0]
 800f510:	f04f 0a00 	mov.w	sl, #0
 800f514:	9b07      	ldr	r3, [sp, #28]
 800f516:	2b00      	cmp	r3, #0
 800f518:	f43f adf2 	beq.w	800f100 <_strtod_l+0x88>
 800f51c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f51e:	4620      	mov	r0, r4
 800f520:	f001 fb10 	bl	8010b44 <_Bfree>
 800f524:	9905      	ldr	r1, [sp, #20]
 800f526:	4620      	mov	r0, r4
 800f528:	f001 fb0c 	bl	8010b44 <_Bfree>
 800f52c:	4631      	mov	r1, r6
 800f52e:	4620      	mov	r0, r4
 800f530:	f001 fb08 	bl	8010b44 <_Bfree>
 800f534:	9907      	ldr	r1, [sp, #28]
 800f536:	4620      	mov	r0, r4
 800f538:	f001 fb04 	bl	8010b44 <_Bfree>
 800f53c:	4629      	mov	r1, r5
 800f53e:	4620      	mov	r0, r4
 800f540:	f001 fb00 	bl	8010b44 <_Bfree>
 800f544:	e5dc      	b.n	800f100 <_strtod_l+0x88>
 800f546:	4b36      	ldr	r3, [pc, #216]	; (800f620 <_strtod_l+0x5a8>)
 800f548:	9304      	str	r3, [sp, #16]
 800f54a:	2300      	movs	r3, #0
 800f54c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f550:	4650      	mov	r0, sl
 800f552:	4659      	mov	r1, fp
 800f554:	4699      	mov	r9, r3
 800f556:	f1b8 0f01 	cmp.w	r8, #1
 800f55a:	dc21      	bgt.n	800f5a0 <_strtod_l+0x528>
 800f55c:	b10b      	cbz	r3, 800f562 <_strtod_l+0x4ea>
 800f55e:	4682      	mov	sl, r0
 800f560:	468b      	mov	fp, r1
 800f562:	4b2f      	ldr	r3, [pc, #188]	; (800f620 <_strtod_l+0x5a8>)
 800f564:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f568:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f56c:	4652      	mov	r2, sl
 800f56e:	465b      	mov	r3, fp
 800f570:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f574:	f7f1 f840 	bl	80005f8 <__aeabi_dmul>
 800f578:	4b2a      	ldr	r3, [pc, #168]	; (800f624 <_strtod_l+0x5ac>)
 800f57a:	460a      	mov	r2, r1
 800f57c:	400b      	ands	r3, r1
 800f57e:	492a      	ldr	r1, [pc, #168]	; (800f628 <_strtod_l+0x5b0>)
 800f580:	428b      	cmp	r3, r1
 800f582:	4682      	mov	sl, r0
 800f584:	d8bc      	bhi.n	800f500 <_strtod_l+0x488>
 800f586:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f58a:	428b      	cmp	r3, r1
 800f58c:	bf86      	itte	hi
 800f58e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f62c <_strtod_l+0x5b4>
 800f592:	f04f 3aff 	movhi.w	sl, #4294967295
 800f596:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f59a:	2300      	movs	r3, #0
 800f59c:	9304      	str	r3, [sp, #16]
 800f59e:	e084      	b.n	800f6aa <_strtod_l+0x632>
 800f5a0:	f018 0f01 	tst.w	r8, #1
 800f5a4:	d005      	beq.n	800f5b2 <_strtod_l+0x53a>
 800f5a6:	9b04      	ldr	r3, [sp, #16]
 800f5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ac:	f7f1 f824 	bl	80005f8 <__aeabi_dmul>
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	9a04      	ldr	r2, [sp, #16]
 800f5b4:	3208      	adds	r2, #8
 800f5b6:	f109 0901 	add.w	r9, r9, #1
 800f5ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f5be:	9204      	str	r2, [sp, #16]
 800f5c0:	e7c9      	b.n	800f556 <_strtod_l+0x4de>
 800f5c2:	d0ea      	beq.n	800f59a <_strtod_l+0x522>
 800f5c4:	f1c8 0800 	rsb	r8, r8, #0
 800f5c8:	f018 020f 	ands.w	r2, r8, #15
 800f5cc:	d00a      	beq.n	800f5e4 <_strtod_l+0x56c>
 800f5ce:	4b13      	ldr	r3, [pc, #76]	; (800f61c <_strtod_l+0x5a4>)
 800f5d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f5d4:	4650      	mov	r0, sl
 800f5d6:	4659      	mov	r1, fp
 800f5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5dc:	f7f1 f936 	bl	800084c <__aeabi_ddiv>
 800f5e0:	4682      	mov	sl, r0
 800f5e2:	468b      	mov	fp, r1
 800f5e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f5e8:	d0d7      	beq.n	800f59a <_strtod_l+0x522>
 800f5ea:	f1b8 0f1f 	cmp.w	r8, #31
 800f5ee:	dd1f      	ble.n	800f630 <_strtod_l+0x5b8>
 800f5f0:	2500      	movs	r5, #0
 800f5f2:	462e      	mov	r6, r5
 800f5f4:	9507      	str	r5, [sp, #28]
 800f5f6:	9505      	str	r5, [sp, #20]
 800f5f8:	2322      	movs	r3, #34	; 0x22
 800f5fa:	f04f 0a00 	mov.w	sl, #0
 800f5fe:	f04f 0b00 	mov.w	fp, #0
 800f602:	6023      	str	r3, [r4, #0]
 800f604:	e786      	b.n	800f514 <_strtod_l+0x49c>
 800f606:	bf00      	nop
 800f608:	0801243a 	.word	0x0801243a
 800f60c:	08012454 	.word	0x08012454
 800f610:	08012431 	.word	0x08012431
 800f614:	08012434 	.word	0x08012434
 800f618:	08012862 	.word	0x08012862
 800f61c:	08012720 	.word	0x08012720
 800f620:	080126f8 	.word	0x080126f8
 800f624:	7ff00000 	.word	0x7ff00000
 800f628:	7ca00000 	.word	0x7ca00000
 800f62c:	7fefffff 	.word	0x7fefffff
 800f630:	f018 0310 	ands.w	r3, r8, #16
 800f634:	bf18      	it	ne
 800f636:	236a      	movne	r3, #106	; 0x6a
 800f638:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f9e8 <_strtod_l+0x970>
 800f63c:	9304      	str	r3, [sp, #16]
 800f63e:	4650      	mov	r0, sl
 800f640:	4659      	mov	r1, fp
 800f642:	2300      	movs	r3, #0
 800f644:	f018 0f01 	tst.w	r8, #1
 800f648:	d004      	beq.n	800f654 <_strtod_l+0x5dc>
 800f64a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f64e:	f7f0 ffd3 	bl	80005f8 <__aeabi_dmul>
 800f652:	2301      	movs	r3, #1
 800f654:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f658:	f109 0908 	add.w	r9, r9, #8
 800f65c:	d1f2      	bne.n	800f644 <_strtod_l+0x5cc>
 800f65e:	b10b      	cbz	r3, 800f664 <_strtod_l+0x5ec>
 800f660:	4682      	mov	sl, r0
 800f662:	468b      	mov	fp, r1
 800f664:	9b04      	ldr	r3, [sp, #16]
 800f666:	b1c3      	cbz	r3, 800f69a <_strtod_l+0x622>
 800f668:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f66c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f670:	2b00      	cmp	r3, #0
 800f672:	4659      	mov	r1, fp
 800f674:	dd11      	ble.n	800f69a <_strtod_l+0x622>
 800f676:	2b1f      	cmp	r3, #31
 800f678:	f340 8124 	ble.w	800f8c4 <_strtod_l+0x84c>
 800f67c:	2b34      	cmp	r3, #52	; 0x34
 800f67e:	bfde      	ittt	le
 800f680:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f684:	f04f 33ff 	movle.w	r3, #4294967295
 800f688:	fa03 f202 	lslle.w	r2, r3, r2
 800f68c:	f04f 0a00 	mov.w	sl, #0
 800f690:	bfcc      	ite	gt
 800f692:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f696:	ea02 0b01 	andle.w	fp, r2, r1
 800f69a:	2200      	movs	r2, #0
 800f69c:	2300      	movs	r3, #0
 800f69e:	4650      	mov	r0, sl
 800f6a0:	4659      	mov	r1, fp
 800f6a2:	f7f1 fa11 	bl	8000ac8 <__aeabi_dcmpeq>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d1a2      	bne.n	800f5f0 <_strtod_l+0x578>
 800f6aa:	9b07      	ldr	r3, [sp, #28]
 800f6ac:	9300      	str	r3, [sp, #0]
 800f6ae:	9908      	ldr	r1, [sp, #32]
 800f6b0:	462b      	mov	r3, r5
 800f6b2:	463a      	mov	r2, r7
 800f6b4:	4620      	mov	r0, r4
 800f6b6:	f001 faad 	bl	8010c14 <__s2b>
 800f6ba:	9007      	str	r0, [sp, #28]
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	f43f af1f 	beq.w	800f500 <_strtod_l+0x488>
 800f6c2:	9b05      	ldr	r3, [sp, #20]
 800f6c4:	1b9e      	subs	r6, r3, r6
 800f6c6:	9b06      	ldr	r3, [sp, #24]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	bfb4      	ite	lt
 800f6cc:	4633      	movlt	r3, r6
 800f6ce:	2300      	movge	r3, #0
 800f6d0:	930c      	str	r3, [sp, #48]	; 0x30
 800f6d2:	9b06      	ldr	r3, [sp, #24]
 800f6d4:	2500      	movs	r5, #0
 800f6d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f6da:	9312      	str	r3, [sp, #72]	; 0x48
 800f6dc:	462e      	mov	r6, r5
 800f6de:	9b07      	ldr	r3, [sp, #28]
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	6859      	ldr	r1, [r3, #4]
 800f6e4:	f001 f9ee 	bl	8010ac4 <_Balloc>
 800f6e8:	9005      	str	r0, [sp, #20]
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	f43f af0c 	beq.w	800f508 <_strtod_l+0x490>
 800f6f0:	9b07      	ldr	r3, [sp, #28]
 800f6f2:	691a      	ldr	r2, [r3, #16]
 800f6f4:	3202      	adds	r2, #2
 800f6f6:	f103 010c 	add.w	r1, r3, #12
 800f6fa:	0092      	lsls	r2, r2, #2
 800f6fc:	300c      	adds	r0, #12
 800f6fe:	f7ff f94f 	bl	800e9a0 <memcpy>
 800f702:	ec4b ab10 	vmov	d0, sl, fp
 800f706:	aa1a      	add	r2, sp, #104	; 0x68
 800f708:	a919      	add	r1, sp, #100	; 0x64
 800f70a:	4620      	mov	r0, r4
 800f70c:	f001 fdc8 	bl	80112a0 <__d2b>
 800f710:	ec4b ab18 	vmov	d8, sl, fp
 800f714:	9018      	str	r0, [sp, #96]	; 0x60
 800f716:	2800      	cmp	r0, #0
 800f718:	f43f aef6 	beq.w	800f508 <_strtod_l+0x490>
 800f71c:	2101      	movs	r1, #1
 800f71e:	4620      	mov	r0, r4
 800f720:	f001 fb12 	bl	8010d48 <__i2b>
 800f724:	4606      	mov	r6, r0
 800f726:	2800      	cmp	r0, #0
 800f728:	f43f aeee 	beq.w	800f508 <_strtod_l+0x490>
 800f72c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f72e:	9904      	ldr	r1, [sp, #16]
 800f730:	2b00      	cmp	r3, #0
 800f732:	bfab      	itete	ge
 800f734:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f736:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f738:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f73a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f73e:	bfac      	ite	ge
 800f740:	eb03 0902 	addge.w	r9, r3, r2
 800f744:	1ad7      	sublt	r7, r2, r3
 800f746:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f748:	eba3 0801 	sub.w	r8, r3, r1
 800f74c:	4490      	add	r8, r2
 800f74e:	4ba1      	ldr	r3, [pc, #644]	; (800f9d4 <_strtod_l+0x95c>)
 800f750:	f108 38ff 	add.w	r8, r8, #4294967295
 800f754:	4598      	cmp	r8, r3
 800f756:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f75a:	f280 80c7 	bge.w	800f8ec <_strtod_l+0x874>
 800f75e:	eba3 0308 	sub.w	r3, r3, r8
 800f762:	2b1f      	cmp	r3, #31
 800f764:	eba2 0203 	sub.w	r2, r2, r3
 800f768:	f04f 0101 	mov.w	r1, #1
 800f76c:	f300 80b1 	bgt.w	800f8d2 <_strtod_l+0x85a>
 800f770:	fa01 f303 	lsl.w	r3, r1, r3
 800f774:	930d      	str	r3, [sp, #52]	; 0x34
 800f776:	2300      	movs	r3, #0
 800f778:	9308      	str	r3, [sp, #32]
 800f77a:	eb09 0802 	add.w	r8, r9, r2
 800f77e:	9b04      	ldr	r3, [sp, #16]
 800f780:	45c1      	cmp	r9, r8
 800f782:	4417      	add	r7, r2
 800f784:	441f      	add	r7, r3
 800f786:	464b      	mov	r3, r9
 800f788:	bfa8      	it	ge
 800f78a:	4643      	movge	r3, r8
 800f78c:	42bb      	cmp	r3, r7
 800f78e:	bfa8      	it	ge
 800f790:	463b      	movge	r3, r7
 800f792:	2b00      	cmp	r3, #0
 800f794:	bfc2      	ittt	gt
 800f796:	eba8 0803 	subgt.w	r8, r8, r3
 800f79a:	1aff      	subgt	r7, r7, r3
 800f79c:	eba9 0903 	subgt.w	r9, r9, r3
 800f7a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	dd17      	ble.n	800f7d6 <_strtod_l+0x75e>
 800f7a6:	4631      	mov	r1, r6
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	f001 fb8c 	bl	8010ec8 <__pow5mult>
 800f7b0:	4606      	mov	r6, r0
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	f43f aea8 	beq.w	800f508 <_strtod_l+0x490>
 800f7b8:	4601      	mov	r1, r0
 800f7ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f001 fad9 	bl	8010d74 <__multiply>
 800f7c2:	900b      	str	r0, [sp, #44]	; 0x2c
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	f43f ae9f 	beq.w	800f508 <_strtod_l+0x490>
 800f7ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f001 f9b9 	bl	8010b44 <_Bfree>
 800f7d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7d4:	9318      	str	r3, [sp, #96]	; 0x60
 800f7d6:	f1b8 0f00 	cmp.w	r8, #0
 800f7da:	f300 808c 	bgt.w	800f8f6 <_strtod_l+0x87e>
 800f7de:	9b06      	ldr	r3, [sp, #24]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	dd08      	ble.n	800f7f6 <_strtod_l+0x77e>
 800f7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f7e6:	9905      	ldr	r1, [sp, #20]
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f001 fb6d 	bl	8010ec8 <__pow5mult>
 800f7ee:	9005      	str	r0, [sp, #20]
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	f43f ae89 	beq.w	800f508 <_strtod_l+0x490>
 800f7f6:	2f00      	cmp	r7, #0
 800f7f8:	dd08      	ble.n	800f80c <_strtod_l+0x794>
 800f7fa:	9905      	ldr	r1, [sp, #20]
 800f7fc:	463a      	mov	r2, r7
 800f7fe:	4620      	mov	r0, r4
 800f800:	f001 fbbc 	bl	8010f7c <__lshift>
 800f804:	9005      	str	r0, [sp, #20]
 800f806:	2800      	cmp	r0, #0
 800f808:	f43f ae7e 	beq.w	800f508 <_strtod_l+0x490>
 800f80c:	f1b9 0f00 	cmp.w	r9, #0
 800f810:	dd08      	ble.n	800f824 <_strtod_l+0x7ac>
 800f812:	4631      	mov	r1, r6
 800f814:	464a      	mov	r2, r9
 800f816:	4620      	mov	r0, r4
 800f818:	f001 fbb0 	bl	8010f7c <__lshift>
 800f81c:	4606      	mov	r6, r0
 800f81e:	2800      	cmp	r0, #0
 800f820:	f43f ae72 	beq.w	800f508 <_strtod_l+0x490>
 800f824:	9a05      	ldr	r2, [sp, #20]
 800f826:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f828:	4620      	mov	r0, r4
 800f82a:	f001 fc33 	bl	8011094 <__mdiff>
 800f82e:	4605      	mov	r5, r0
 800f830:	2800      	cmp	r0, #0
 800f832:	f43f ae69 	beq.w	800f508 <_strtod_l+0x490>
 800f836:	68c3      	ldr	r3, [r0, #12]
 800f838:	930b      	str	r3, [sp, #44]	; 0x2c
 800f83a:	2300      	movs	r3, #0
 800f83c:	60c3      	str	r3, [r0, #12]
 800f83e:	4631      	mov	r1, r6
 800f840:	f001 fc0c 	bl	801105c <__mcmp>
 800f844:	2800      	cmp	r0, #0
 800f846:	da60      	bge.n	800f90a <_strtod_l+0x892>
 800f848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f84a:	ea53 030a 	orrs.w	r3, r3, sl
 800f84e:	f040 8082 	bne.w	800f956 <_strtod_l+0x8de>
 800f852:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f856:	2b00      	cmp	r3, #0
 800f858:	d17d      	bne.n	800f956 <_strtod_l+0x8de>
 800f85a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f85e:	0d1b      	lsrs	r3, r3, #20
 800f860:	051b      	lsls	r3, r3, #20
 800f862:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f866:	d976      	bls.n	800f956 <_strtod_l+0x8de>
 800f868:	696b      	ldr	r3, [r5, #20]
 800f86a:	b913      	cbnz	r3, 800f872 <_strtod_l+0x7fa>
 800f86c:	692b      	ldr	r3, [r5, #16]
 800f86e:	2b01      	cmp	r3, #1
 800f870:	dd71      	ble.n	800f956 <_strtod_l+0x8de>
 800f872:	4629      	mov	r1, r5
 800f874:	2201      	movs	r2, #1
 800f876:	4620      	mov	r0, r4
 800f878:	f001 fb80 	bl	8010f7c <__lshift>
 800f87c:	4631      	mov	r1, r6
 800f87e:	4605      	mov	r5, r0
 800f880:	f001 fbec 	bl	801105c <__mcmp>
 800f884:	2800      	cmp	r0, #0
 800f886:	dd66      	ble.n	800f956 <_strtod_l+0x8de>
 800f888:	9904      	ldr	r1, [sp, #16]
 800f88a:	4a53      	ldr	r2, [pc, #332]	; (800f9d8 <_strtod_l+0x960>)
 800f88c:	465b      	mov	r3, fp
 800f88e:	2900      	cmp	r1, #0
 800f890:	f000 8081 	beq.w	800f996 <_strtod_l+0x91e>
 800f894:	ea02 010b 	and.w	r1, r2, fp
 800f898:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f89c:	dc7b      	bgt.n	800f996 <_strtod_l+0x91e>
 800f89e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f8a2:	f77f aea9 	ble.w	800f5f8 <_strtod_l+0x580>
 800f8a6:	4b4d      	ldr	r3, [pc, #308]	; (800f9dc <_strtod_l+0x964>)
 800f8a8:	4650      	mov	r0, sl
 800f8aa:	4659      	mov	r1, fp
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f7f0 fea3 	bl	80005f8 <__aeabi_dmul>
 800f8b2:	460b      	mov	r3, r1
 800f8b4:	4303      	orrs	r3, r0
 800f8b6:	bf08      	it	eq
 800f8b8:	2322      	moveq	r3, #34	; 0x22
 800f8ba:	4682      	mov	sl, r0
 800f8bc:	468b      	mov	fp, r1
 800f8be:	bf08      	it	eq
 800f8c0:	6023      	streq	r3, [r4, #0]
 800f8c2:	e62b      	b.n	800f51c <_strtod_l+0x4a4>
 800f8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800f8cc:	ea03 0a0a 	and.w	sl, r3, sl
 800f8d0:	e6e3      	b.n	800f69a <_strtod_l+0x622>
 800f8d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f8d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f8da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f8de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f8e2:	fa01 f308 	lsl.w	r3, r1, r8
 800f8e6:	9308      	str	r3, [sp, #32]
 800f8e8:	910d      	str	r1, [sp, #52]	; 0x34
 800f8ea:	e746      	b.n	800f77a <_strtod_l+0x702>
 800f8ec:	2300      	movs	r3, #0
 800f8ee:	9308      	str	r3, [sp, #32]
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	930d      	str	r3, [sp, #52]	; 0x34
 800f8f4:	e741      	b.n	800f77a <_strtod_l+0x702>
 800f8f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8f8:	4642      	mov	r2, r8
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f001 fb3e 	bl	8010f7c <__lshift>
 800f900:	9018      	str	r0, [sp, #96]	; 0x60
 800f902:	2800      	cmp	r0, #0
 800f904:	f47f af6b 	bne.w	800f7de <_strtod_l+0x766>
 800f908:	e5fe      	b.n	800f508 <_strtod_l+0x490>
 800f90a:	465f      	mov	r7, fp
 800f90c:	d16e      	bne.n	800f9ec <_strtod_l+0x974>
 800f90e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f910:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f914:	b342      	cbz	r2, 800f968 <_strtod_l+0x8f0>
 800f916:	4a32      	ldr	r2, [pc, #200]	; (800f9e0 <_strtod_l+0x968>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d128      	bne.n	800f96e <_strtod_l+0x8f6>
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	4651      	mov	r1, sl
 800f920:	b1eb      	cbz	r3, 800f95e <_strtod_l+0x8e6>
 800f922:	4b2d      	ldr	r3, [pc, #180]	; (800f9d8 <_strtod_l+0x960>)
 800f924:	403b      	ands	r3, r7
 800f926:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f92a:	f04f 32ff 	mov.w	r2, #4294967295
 800f92e:	d819      	bhi.n	800f964 <_strtod_l+0x8ec>
 800f930:	0d1b      	lsrs	r3, r3, #20
 800f932:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f936:	fa02 f303 	lsl.w	r3, r2, r3
 800f93a:	4299      	cmp	r1, r3
 800f93c:	d117      	bne.n	800f96e <_strtod_l+0x8f6>
 800f93e:	4b29      	ldr	r3, [pc, #164]	; (800f9e4 <_strtod_l+0x96c>)
 800f940:	429f      	cmp	r7, r3
 800f942:	d102      	bne.n	800f94a <_strtod_l+0x8d2>
 800f944:	3101      	adds	r1, #1
 800f946:	f43f addf 	beq.w	800f508 <_strtod_l+0x490>
 800f94a:	4b23      	ldr	r3, [pc, #140]	; (800f9d8 <_strtod_l+0x960>)
 800f94c:	403b      	ands	r3, r7
 800f94e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f952:	f04f 0a00 	mov.w	sl, #0
 800f956:	9b04      	ldr	r3, [sp, #16]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1a4      	bne.n	800f8a6 <_strtod_l+0x82e>
 800f95c:	e5de      	b.n	800f51c <_strtod_l+0x4a4>
 800f95e:	f04f 33ff 	mov.w	r3, #4294967295
 800f962:	e7ea      	b.n	800f93a <_strtod_l+0x8c2>
 800f964:	4613      	mov	r3, r2
 800f966:	e7e8      	b.n	800f93a <_strtod_l+0x8c2>
 800f968:	ea53 030a 	orrs.w	r3, r3, sl
 800f96c:	d08c      	beq.n	800f888 <_strtod_l+0x810>
 800f96e:	9b08      	ldr	r3, [sp, #32]
 800f970:	b1db      	cbz	r3, 800f9aa <_strtod_l+0x932>
 800f972:	423b      	tst	r3, r7
 800f974:	d0ef      	beq.n	800f956 <_strtod_l+0x8de>
 800f976:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f978:	9a04      	ldr	r2, [sp, #16]
 800f97a:	4650      	mov	r0, sl
 800f97c:	4659      	mov	r1, fp
 800f97e:	b1c3      	cbz	r3, 800f9b2 <_strtod_l+0x93a>
 800f980:	f7ff fb5b 	bl	800f03a <sulp>
 800f984:	4602      	mov	r2, r0
 800f986:	460b      	mov	r3, r1
 800f988:	ec51 0b18 	vmov	r0, r1, d8
 800f98c:	f7f0 fc7e 	bl	800028c <__adddf3>
 800f990:	4682      	mov	sl, r0
 800f992:	468b      	mov	fp, r1
 800f994:	e7df      	b.n	800f956 <_strtod_l+0x8de>
 800f996:	4013      	ands	r3, r2
 800f998:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f99c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f9a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f9a4:	f04f 3aff 	mov.w	sl, #4294967295
 800f9a8:	e7d5      	b.n	800f956 <_strtod_l+0x8de>
 800f9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9ac:	ea13 0f0a 	tst.w	r3, sl
 800f9b0:	e7e0      	b.n	800f974 <_strtod_l+0x8fc>
 800f9b2:	f7ff fb42 	bl	800f03a <sulp>
 800f9b6:	4602      	mov	r2, r0
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	ec51 0b18 	vmov	r0, r1, d8
 800f9be:	f7f0 fc63 	bl	8000288 <__aeabi_dsub>
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	4682      	mov	sl, r0
 800f9c8:	468b      	mov	fp, r1
 800f9ca:	f7f1 f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9ce:	2800      	cmp	r0, #0
 800f9d0:	d0c1      	beq.n	800f956 <_strtod_l+0x8de>
 800f9d2:	e611      	b.n	800f5f8 <_strtod_l+0x580>
 800f9d4:	fffffc02 	.word	0xfffffc02
 800f9d8:	7ff00000 	.word	0x7ff00000
 800f9dc:	39500000 	.word	0x39500000
 800f9e0:	000fffff 	.word	0x000fffff
 800f9e4:	7fefffff 	.word	0x7fefffff
 800f9e8:	08012468 	.word	0x08012468
 800f9ec:	4631      	mov	r1, r6
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f001 fcb2 	bl	8011358 <__ratio>
 800f9f4:	ec59 8b10 	vmov	r8, r9, d0
 800f9f8:	ee10 0a10 	vmov	r0, s0
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fa02:	4649      	mov	r1, r9
 800fa04:	f7f1 f874 	bl	8000af0 <__aeabi_dcmple>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d07a      	beq.n	800fb02 <_strtod_l+0xa8a>
 800fa0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d04a      	beq.n	800faa8 <_strtod_l+0xa30>
 800fa12:	4b95      	ldr	r3, [pc, #596]	; (800fc68 <_strtod_l+0xbf0>)
 800fa14:	2200      	movs	r2, #0
 800fa16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fa1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800fc68 <_strtod_l+0xbf0>
 800fa1e:	f04f 0800 	mov.w	r8, #0
 800fa22:	4b92      	ldr	r3, [pc, #584]	; (800fc6c <_strtod_l+0xbf4>)
 800fa24:	403b      	ands	r3, r7
 800fa26:	930d      	str	r3, [sp, #52]	; 0x34
 800fa28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa2a:	4b91      	ldr	r3, [pc, #580]	; (800fc70 <_strtod_l+0xbf8>)
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	f040 80b0 	bne.w	800fb92 <_strtod_l+0xb1a>
 800fa32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800fa3a:	ec4b ab10 	vmov	d0, sl, fp
 800fa3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa42:	f001 fbb1 	bl	80111a8 <__ulp>
 800fa46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa4a:	ec53 2b10 	vmov	r2, r3, d0
 800fa4e:	f7f0 fdd3 	bl	80005f8 <__aeabi_dmul>
 800fa52:	4652      	mov	r2, sl
 800fa54:	465b      	mov	r3, fp
 800fa56:	f7f0 fc19 	bl	800028c <__adddf3>
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	4983      	ldr	r1, [pc, #524]	; (800fc6c <_strtod_l+0xbf4>)
 800fa5e:	4a85      	ldr	r2, [pc, #532]	; (800fc74 <_strtod_l+0xbfc>)
 800fa60:	4019      	ands	r1, r3
 800fa62:	4291      	cmp	r1, r2
 800fa64:	4682      	mov	sl, r0
 800fa66:	d960      	bls.n	800fb2a <_strtod_l+0xab2>
 800fa68:	ee18 3a90 	vmov	r3, s17
 800fa6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d104      	bne.n	800fa7e <_strtod_l+0xa06>
 800fa74:	ee18 3a10 	vmov	r3, s16
 800fa78:	3301      	adds	r3, #1
 800fa7a:	f43f ad45 	beq.w	800f508 <_strtod_l+0x490>
 800fa7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800fc80 <_strtod_l+0xc08>
 800fa82:	f04f 3aff 	mov.w	sl, #4294967295
 800fa86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f001 f85b 	bl	8010b44 <_Bfree>
 800fa8e:	9905      	ldr	r1, [sp, #20]
 800fa90:	4620      	mov	r0, r4
 800fa92:	f001 f857 	bl	8010b44 <_Bfree>
 800fa96:	4631      	mov	r1, r6
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f001 f853 	bl	8010b44 <_Bfree>
 800fa9e:	4629      	mov	r1, r5
 800faa0:	4620      	mov	r0, r4
 800faa2:	f001 f84f 	bl	8010b44 <_Bfree>
 800faa6:	e61a      	b.n	800f6de <_strtod_l+0x666>
 800faa8:	f1ba 0f00 	cmp.w	sl, #0
 800faac:	d11b      	bne.n	800fae6 <_strtod_l+0xa6e>
 800faae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fab2:	b9f3      	cbnz	r3, 800faf2 <_strtod_l+0xa7a>
 800fab4:	4b6c      	ldr	r3, [pc, #432]	; (800fc68 <_strtod_l+0xbf0>)
 800fab6:	2200      	movs	r2, #0
 800fab8:	4640      	mov	r0, r8
 800faba:	4649      	mov	r1, r9
 800fabc:	f7f1 f80e 	bl	8000adc <__aeabi_dcmplt>
 800fac0:	b9d0      	cbnz	r0, 800faf8 <_strtod_l+0xa80>
 800fac2:	4640      	mov	r0, r8
 800fac4:	4649      	mov	r1, r9
 800fac6:	4b6c      	ldr	r3, [pc, #432]	; (800fc78 <_strtod_l+0xc00>)
 800fac8:	2200      	movs	r2, #0
 800faca:	f7f0 fd95 	bl	80005f8 <__aeabi_dmul>
 800face:	4680      	mov	r8, r0
 800fad0:	4689      	mov	r9, r1
 800fad2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fad6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800fada:	9315      	str	r3, [sp, #84]	; 0x54
 800fadc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fae0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fae4:	e79d      	b.n	800fa22 <_strtod_l+0x9aa>
 800fae6:	f1ba 0f01 	cmp.w	sl, #1
 800faea:	d102      	bne.n	800faf2 <_strtod_l+0xa7a>
 800faec:	2f00      	cmp	r7, #0
 800faee:	f43f ad83 	beq.w	800f5f8 <_strtod_l+0x580>
 800faf2:	4b62      	ldr	r3, [pc, #392]	; (800fc7c <_strtod_l+0xc04>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	e78e      	b.n	800fa16 <_strtod_l+0x99e>
 800faf8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800fc78 <_strtod_l+0xc00>
 800fafc:	f04f 0800 	mov.w	r8, #0
 800fb00:	e7e7      	b.n	800fad2 <_strtod_l+0xa5a>
 800fb02:	4b5d      	ldr	r3, [pc, #372]	; (800fc78 <_strtod_l+0xc00>)
 800fb04:	4640      	mov	r0, r8
 800fb06:	4649      	mov	r1, r9
 800fb08:	2200      	movs	r2, #0
 800fb0a:	f7f0 fd75 	bl	80005f8 <__aeabi_dmul>
 800fb0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb10:	4680      	mov	r8, r0
 800fb12:	4689      	mov	r9, r1
 800fb14:	b933      	cbnz	r3, 800fb24 <_strtod_l+0xaac>
 800fb16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb1a:	900e      	str	r0, [sp, #56]	; 0x38
 800fb1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fb22:	e7dd      	b.n	800fae0 <_strtod_l+0xa68>
 800fb24:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800fb28:	e7f9      	b.n	800fb1e <_strtod_l+0xaa6>
 800fb2a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fb2e:	9b04      	ldr	r3, [sp, #16]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1a8      	bne.n	800fa86 <_strtod_l+0xa0e>
 800fb34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fb3a:	0d1b      	lsrs	r3, r3, #20
 800fb3c:	051b      	lsls	r3, r3, #20
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d1a1      	bne.n	800fa86 <_strtod_l+0xa0e>
 800fb42:	4640      	mov	r0, r8
 800fb44:	4649      	mov	r1, r9
 800fb46:	f7f1 f88f 	bl	8000c68 <__aeabi_d2lz>
 800fb4a:	f7f0 fd27 	bl	800059c <__aeabi_l2d>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	460b      	mov	r3, r1
 800fb52:	4640      	mov	r0, r8
 800fb54:	4649      	mov	r1, r9
 800fb56:	f7f0 fb97 	bl	8000288 <__aeabi_dsub>
 800fb5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fb5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb60:	ea43 030a 	orr.w	r3, r3, sl
 800fb64:	4313      	orrs	r3, r2
 800fb66:	4680      	mov	r8, r0
 800fb68:	4689      	mov	r9, r1
 800fb6a:	d055      	beq.n	800fc18 <_strtod_l+0xba0>
 800fb6c:	a336      	add	r3, pc, #216	; (adr r3, 800fc48 <_strtod_l+0xbd0>)
 800fb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb72:	f7f0 ffb3 	bl	8000adc <__aeabi_dcmplt>
 800fb76:	2800      	cmp	r0, #0
 800fb78:	f47f acd0 	bne.w	800f51c <_strtod_l+0x4a4>
 800fb7c:	a334      	add	r3, pc, #208	; (adr r3, 800fc50 <_strtod_l+0xbd8>)
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	4640      	mov	r0, r8
 800fb84:	4649      	mov	r1, r9
 800fb86:	f7f0 ffc7 	bl	8000b18 <__aeabi_dcmpgt>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	f43f af7b 	beq.w	800fa86 <_strtod_l+0xa0e>
 800fb90:	e4c4      	b.n	800f51c <_strtod_l+0x4a4>
 800fb92:	9b04      	ldr	r3, [sp, #16]
 800fb94:	b333      	cbz	r3, 800fbe4 <_strtod_l+0xb6c>
 800fb96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fb98:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800fb9c:	d822      	bhi.n	800fbe4 <_strtod_l+0xb6c>
 800fb9e:	a32e      	add	r3, pc, #184	; (adr r3, 800fc58 <_strtod_l+0xbe0>)
 800fba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba4:	4640      	mov	r0, r8
 800fba6:	4649      	mov	r1, r9
 800fba8:	f7f0 ffa2 	bl	8000af0 <__aeabi_dcmple>
 800fbac:	b1a0      	cbz	r0, 800fbd8 <_strtod_l+0xb60>
 800fbae:	4649      	mov	r1, r9
 800fbb0:	4640      	mov	r0, r8
 800fbb2:	f7f0 ffd1 	bl	8000b58 <__aeabi_d2uiz>
 800fbb6:	2801      	cmp	r0, #1
 800fbb8:	bf38      	it	cc
 800fbba:	2001      	movcc	r0, #1
 800fbbc:	f7f0 fca2 	bl	8000504 <__aeabi_ui2d>
 800fbc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	4689      	mov	r9, r1
 800fbc6:	bb23      	cbnz	r3, 800fc12 <_strtod_l+0xb9a>
 800fbc8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbcc:	9010      	str	r0, [sp, #64]	; 0x40
 800fbce:	9311      	str	r3, [sp, #68]	; 0x44
 800fbd0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fbd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbdc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fbe0:	1a9b      	subs	r3, r3, r2
 800fbe2:	9309      	str	r3, [sp, #36]	; 0x24
 800fbe4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fbe8:	eeb0 0a48 	vmov.f32	s0, s16
 800fbec:	eef0 0a68 	vmov.f32	s1, s17
 800fbf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fbf4:	f001 fad8 	bl	80111a8 <__ulp>
 800fbf8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fbfc:	ec53 2b10 	vmov	r2, r3, d0
 800fc00:	f7f0 fcfa 	bl	80005f8 <__aeabi_dmul>
 800fc04:	ec53 2b18 	vmov	r2, r3, d8
 800fc08:	f7f0 fb40 	bl	800028c <__adddf3>
 800fc0c:	4682      	mov	sl, r0
 800fc0e:	468b      	mov	fp, r1
 800fc10:	e78d      	b.n	800fb2e <_strtod_l+0xab6>
 800fc12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800fc16:	e7db      	b.n	800fbd0 <_strtod_l+0xb58>
 800fc18:	a311      	add	r3, pc, #68	; (adr r3, 800fc60 <_strtod_l+0xbe8>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	f7f0 ff5d 	bl	8000adc <__aeabi_dcmplt>
 800fc22:	e7b2      	b.n	800fb8a <_strtod_l+0xb12>
 800fc24:	2300      	movs	r3, #0
 800fc26:	930a      	str	r3, [sp, #40]	; 0x28
 800fc28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fc2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fc2c:	6013      	str	r3, [r2, #0]
 800fc2e:	f7ff ba6b 	b.w	800f108 <_strtod_l+0x90>
 800fc32:	2a65      	cmp	r2, #101	; 0x65
 800fc34:	f43f ab5f 	beq.w	800f2f6 <_strtod_l+0x27e>
 800fc38:	2a45      	cmp	r2, #69	; 0x45
 800fc3a:	f43f ab5c 	beq.w	800f2f6 <_strtod_l+0x27e>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	f7ff bb94 	b.w	800f36c <_strtod_l+0x2f4>
 800fc44:	f3af 8000 	nop.w
 800fc48:	94a03595 	.word	0x94a03595
 800fc4c:	3fdfffff 	.word	0x3fdfffff
 800fc50:	35afe535 	.word	0x35afe535
 800fc54:	3fe00000 	.word	0x3fe00000
 800fc58:	ffc00000 	.word	0xffc00000
 800fc5c:	41dfffff 	.word	0x41dfffff
 800fc60:	94a03595 	.word	0x94a03595
 800fc64:	3fcfffff 	.word	0x3fcfffff
 800fc68:	3ff00000 	.word	0x3ff00000
 800fc6c:	7ff00000 	.word	0x7ff00000
 800fc70:	7fe00000 	.word	0x7fe00000
 800fc74:	7c9fffff 	.word	0x7c9fffff
 800fc78:	3fe00000 	.word	0x3fe00000
 800fc7c:	bff00000 	.word	0xbff00000
 800fc80:	7fefffff 	.word	0x7fefffff

0800fc84 <_strtod_r>:
 800fc84:	4b01      	ldr	r3, [pc, #4]	; (800fc8c <_strtod_r+0x8>)
 800fc86:	f7ff b9f7 	b.w	800f078 <_strtod_l>
 800fc8a:	bf00      	nop
 800fc8c:	20000078 	.word	0x20000078

0800fc90 <_strtol_l.constprop.0>:
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc96:	d001      	beq.n	800fc9c <_strtol_l.constprop.0+0xc>
 800fc98:	2b24      	cmp	r3, #36	; 0x24
 800fc9a:	d906      	bls.n	800fcaa <_strtol_l.constprop.0+0x1a>
 800fc9c:	f7fe fe56 	bl	800e94c <__errno>
 800fca0:	2316      	movs	r3, #22
 800fca2:	6003      	str	r3, [r0, #0]
 800fca4:	2000      	movs	r0, #0
 800fca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fd90 <_strtol_l.constprop.0+0x100>
 800fcae:	460d      	mov	r5, r1
 800fcb0:	462e      	mov	r6, r5
 800fcb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fcb6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800fcba:	f017 0708 	ands.w	r7, r7, #8
 800fcbe:	d1f7      	bne.n	800fcb0 <_strtol_l.constprop.0+0x20>
 800fcc0:	2c2d      	cmp	r4, #45	; 0x2d
 800fcc2:	d132      	bne.n	800fd2a <_strtol_l.constprop.0+0x9a>
 800fcc4:	782c      	ldrb	r4, [r5, #0]
 800fcc6:	2701      	movs	r7, #1
 800fcc8:	1cb5      	adds	r5, r6, #2
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d05b      	beq.n	800fd86 <_strtol_l.constprop.0+0xf6>
 800fcce:	2b10      	cmp	r3, #16
 800fcd0:	d109      	bne.n	800fce6 <_strtol_l.constprop.0+0x56>
 800fcd2:	2c30      	cmp	r4, #48	; 0x30
 800fcd4:	d107      	bne.n	800fce6 <_strtol_l.constprop.0+0x56>
 800fcd6:	782c      	ldrb	r4, [r5, #0]
 800fcd8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800fcdc:	2c58      	cmp	r4, #88	; 0x58
 800fcde:	d14d      	bne.n	800fd7c <_strtol_l.constprop.0+0xec>
 800fce0:	786c      	ldrb	r4, [r5, #1]
 800fce2:	2310      	movs	r3, #16
 800fce4:	3502      	adds	r5, #2
 800fce6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800fcea:	f108 38ff 	add.w	r8, r8, #4294967295
 800fcee:	f04f 0c00 	mov.w	ip, #0
 800fcf2:	fbb8 f9f3 	udiv	r9, r8, r3
 800fcf6:	4666      	mov	r6, ip
 800fcf8:	fb03 8a19 	mls	sl, r3, r9, r8
 800fcfc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800fd00:	f1be 0f09 	cmp.w	lr, #9
 800fd04:	d816      	bhi.n	800fd34 <_strtol_l.constprop.0+0xa4>
 800fd06:	4674      	mov	r4, lr
 800fd08:	42a3      	cmp	r3, r4
 800fd0a:	dd24      	ble.n	800fd56 <_strtol_l.constprop.0+0xc6>
 800fd0c:	f1bc 0f00 	cmp.w	ip, #0
 800fd10:	db1e      	blt.n	800fd50 <_strtol_l.constprop.0+0xc0>
 800fd12:	45b1      	cmp	r9, r6
 800fd14:	d31c      	bcc.n	800fd50 <_strtol_l.constprop.0+0xc0>
 800fd16:	d101      	bne.n	800fd1c <_strtol_l.constprop.0+0x8c>
 800fd18:	45a2      	cmp	sl, r4
 800fd1a:	db19      	blt.n	800fd50 <_strtol_l.constprop.0+0xc0>
 800fd1c:	fb06 4603 	mla	r6, r6, r3, r4
 800fd20:	f04f 0c01 	mov.w	ip, #1
 800fd24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fd28:	e7e8      	b.n	800fcfc <_strtol_l.constprop.0+0x6c>
 800fd2a:	2c2b      	cmp	r4, #43	; 0x2b
 800fd2c:	bf04      	itt	eq
 800fd2e:	782c      	ldrbeq	r4, [r5, #0]
 800fd30:	1cb5      	addeq	r5, r6, #2
 800fd32:	e7ca      	b.n	800fcca <_strtol_l.constprop.0+0x3a>
 800fd34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fd38:	f1be 0f19 	cmp.w	lr, #25
 800fd3c:	d801      	bhi.n	800fd42 <_strtol_l.constprop.0+0xb2>
 800fd3e:	3c37      	subs	r4, #55	; 0x37
 800fd40:	e7e2      	b.n	800fd08 <_strtol_l.constprop.0+0x78>
 800fd42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fd46:	f1be 0f19 	cmp.w	lr, #25
 800fd4a:	d804      	bhi.n	800fd56 <_strtol_l.constprop.0+0xc6>
 800fd4c:	3c57      	subs	r4, #87	; 0x57
 800fd4e:	e7db      	b.n	800fd08 <_strtol_l.constprop.0+0x78>
 800fd50:	f04f 3cff 	mov.w	ip, #4294967295
 800fd54:	e7e6      	b.n	800fd24 <_strtol_l.constprop.0+0x94>
 800fd56:	f1bc 0f00 	cmp.w	ip, #0
 800fd5a:	da05      	bge.n	800fd68 <_strtol_l.constprop.0+0xd8>
 800fd5c:	2322      	movs	r3, #34	; 0x22
 800fd5e:	6003      	str	r3, [r0, #0]
 800fd60:	4646      	mov	r6, r8
 800fd62:	b942      	cbnz	r2, 800fd76 <_strtol_l.constprop.0+0xe6>
 800fd64:	4630      	mov	r0, r6
 800fd66:	e79e      	b.n	800fca6 <_strtol_l.constprop.0+0x16>
 800fd68:	b107      	cbz	r7, 800fd6c <_strtol_l.constprop.0+0xdc>
 800fd6a:	4276      	negs	r6, r6
 800fd6c:	2a00      	cmp	r2, #0
 800fd6e:	d0f9      	beq.n	800fd64 <_strtol_l.constprop.0+0xd4>
 800fd70:	f1bc 0f00 	cmp.w	ip, #0
 800fd74:	d000      	beq.n	800fd78 <_strtol_l.constprop.0+0xe8>
 800fd76:	1e69      	subs	r1, r5, #1
 800fd78:	6011      	str	r1, [r2, #0]
 800fd7a:	e7f3      	b.n	800fd64 <_strtol_l.constprop.0+0xd4>
 800fd7c:	2430      	movs	r4, #48	; 0x30
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d1b1      	bne.n	800fce6 <_strtol_l.constprop.0+0x56>
 800fd82:	2308      	movs	r3, #8
 800fd84:	e7af      	b.n	800fce6 <_strtol_l.constprop.0+0x56>
 800fd86:	2c30      	cmp	r4, #48	; 0x30
 800fd88:	d0a5      	beq.n	800fcd6 <_strtol_l.constprop.0+0x46>
 800fd8a:	230a      	movs	r3, #10
 800fd8c:	e7ab      	b.n	800fce6 <_strtol_l.constprop.0+0x56>
 800fd8e:	bf00      	nop
 800fd90:	08012491 	.word	0x08012491

0800fd94 <_strtol_r>:
 800fd94:	f7ff bf7c 	b.w	800fc90 <_strtol_l.constprop.0>

0800fd98 <__swbuf_r>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	460e      	mov	r6, r1
 800fd9c:	4614      	mov	r4, r2
 800fd9e:	4605      	mov	r5, r0
 800fda0:	b118      	cbz	r0, 800fdaa <__swbuf_r+0x12>
 800fda2:	6983      	ldr	r3, [r0, #24]
 800fda4:	b90b      	cbnz	r3, 800fdaa <__swbuf_r+0x12>
 800fda6:	f000 f9f3 	bl	8010190 <__sinit>
 800fdaa:	4b21      	ldr	r3, [pc, #132]	; (800fe30 <__swbuf_r+0x98>)
 800fdac:	429c      	cmp	r4, r3
 800fdae:	d12b      	bne.n	800fe08 <__swbuf_r+0x70>
 800fdb0:	686c      	ldr	r4, [r5, #4]
 800fdb2:	69a3      	ldr	r3, [r4, #24]
 800fdb4:	60a3      	str	r3, [r4, #8]
 800fdb6:	89a3      	ldrh	r3, [r4, #12]
 800fdb8:	071a      	lsls	r2, r3, #28
 800fdba:	d52f      	bpl.n	800fe1c <__swbuf_r+0x84>
 800fdbc:	6923      	ldr	r3, [r4, #16]
 800fdbe:	b36b      	cbz	r3, 800fe1c <__swbuf_r+0x84>
 800fdc0:	6923      	ldr	r3, [r4, #16]
 800fdc2:	6820      	ldr	r0, [r4, #0]
 800fdc4:	1ac0      	subs	r0, r0, r3
 800fdc6:	6963      	ldr	r3, [r4, #20]
 800fdc8:	b2f6      	uxtb	r6, r6
 800fdca:	4283      	cmp	r3, r0
 800fdcc:	4637      	mov	r7, r6
 800fdce:	dc04      	bgt.n	800fdda <__swbuf_r+0x42>
 800fdd0:	4621      	mov	r1, r4
 800fdd2:	4628      	mov	r0, r5
 800fdd4:	f000 f948 	bl	8010068 <_fflush_r>
 800fdd8:	bb30      	cbnz	r0, 800fe28 <__swbuf_r+0x90>
 800fdda:	68a3      	ldr	r3, [r4, #8]
 800fddc:	3b01      	subs	r3, #1
 800fdde:	60a3      	str	r3, [r4, #8]
 800fde0:	6823      	ldr	r3, [r4, #0]
 800fde2:	1c5a      	adds	r2, r3, #1
 800fde4:	6022      	str	r2, [r4, #0]
 800fde6:	701e      	strb	r6, [r3, #0]
 800fde8:	6963      	ldr	r3, [r4, #20]
 800fdea:	3001      	adds	r0, #1
 800fdec:	4283      	cmp	r3, r0
 800fdee:	d004      	beq.n	800fdfa <__swbuf_r+0x62>
 800fdf0:	89a3      	ldrh	r3, [r4, #12]
 800fdf2:	07db      	lsls	r3, r3, #31
 800fdf4:	d506      	bpl.n	800fe04 <__swbuf_r+0x6c>
 800fdf6:	2e0a      	cmp	r6, #10
 800fdf8:	d104      	bne.n	800fe04 <__swbuf_r+0x6c>
 800fdfa:	4621      	mov	r1, r4
 800fdfc:	4628      	mov	r0, r5
 800fdfe:	f000 f933 	bl	8010068 <_fflush_r>
 800fe02:	b988      	cbnz	r0, 800fe28 <__swbuf_r+0x90>
 800fe04:	4638      	mov	r0, r7
 800fe06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe08:	4b0a      	ldr	r3, [pc, #40]	; (800fe34 <__swbuf_r+0x9c>)
 800fe0a:	429c      	cmp	r4, r3
 800fe0c:	d101      	bne.n	800fe12 <__swbuf_r+0x7a>
 800fe0e:	68ac      	ldr	r4, [r5, #8]
 800fe10:	e7cf      	b.n	800fdb2 <__swbuf_r+0x1a>
 800fe12:	4b09      	ldr	r3, [pc, #36]	; (800fe38 <__swbuf_r+0xa0>)
 800fe14:	429c      	cmp	r4, r3
 800fe16:	bf08      	it	eq
 800fe18:	68ec      	ldreq	r4, [r5, #12]
 800fe1a:	e7ca      	b.n	800fdb2 <__swbuf_r+0x1a>
 800fe1c:	4621      	mov	r1, r4
 800fe1e:	4628      	mov	r0, r5
 800fe20:	f000 f81e 	bl	800fe60 <__swsetup_r>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d0cb      	beq.n	800fdc0 <__swbuf_r+0x28>
 800fe28:	f04f 37ff 	mov.w	r7, #4294967295
 800fe2c:	e7ea      	b.n	800fe04 <__swbuf_r+0x6c>
 800fe2e:	bf00      	nop
 800fe30:	080125b4 	.word	0x080125b4
 800fe34:	080125d4 	.word	0x080125d4
 800fe38:	08012594 	.word	0x08012594

0800fe3c <_write_r>:
 800fe3c:	b538      	push	{r3, r4, r5, lr}
 800fe3e:	4d07      	ldr	r5, [pc, #28]	; (800fe5c <_write_r+0x20>)
 800fe40:	4604      	mov	r4, r0
 800fe42:	4608      	mov	r0, r1
 800fe44:	4611      	mov	r1, r2
 800fe46:	2200      	movs	r2, #0
 800fe48:	602a      	str	r2, [r5, #0]
 800fe4a:	461a      	mov	r2, r3
 800fe4c:	f7f3 fbad 	bl	80035aa <_write>
 800fe50:	1c43      	adds	r3, r0, #1
 800fe52:	d102      	bne.n	800fe5a <_write_r+0x1e>
 800fe54:	682b      	ldr	r3, [r5, #0]
 800fe56:	b103      	cbz	r3, 800fe5a <_write_r+0x1e>
 800fe58:	6023      	str	r3, [r4, #0]
 800fe5a:	bd38      	pop	{r3, r4, r5, pc}
 800fe5c:	200028a4 	.word	0x200028a4

0800fe60 <__swsetup_r>:
 800fe60:	4b32      	ldr	r3, [pc, #200]	; (800ff2c <__swsetup_r+0xcc>)
 800fe62:	b570      	push	{r4, r5, r6, lr}
 800fe64:	681d      	ldr	r5, [r3, #0]
 800fe66:	4606      	mov	r6, r0
 800fe68:	460c      	mov	r4, r1
 800fe6a:	b125      	cbz	r5, 800fe76 <__swsetup_r+0x16>
 800fe6c:	69ab      	ldr	r3, [r5, #24]
 800fe6e:	b913      	cbnz	r3, 800fe76 <__swsetup_r+0x16>
 800fe70:	4628      	mov	r0, r5
 800fe72:	f000 f98d 	bl	8010190 <__sinit>
 800fe76:	4b2e      	ldr	r3, [pc, #184]	; (800ff30 <__swsetup_r+0xd0>)
 800fe78:	429c      	cmp	r4, r3
 800fe7a:	d10f      	bne.n	800fe9c <__swsetup_r+0x3c>
 800fe7c:	686c      	ldr	r4, [r5, #4]
 800fe7e:	89a3      	ldrh	r3, [r4, #12]
 800fe80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe84:	0719      	lsls	r1, r3, #28
 800fe86:	d42c      	bmi.n	800fee2 <__swsetup_r+0x82>
 800fe88:	06dd      	lsls	r5, r3, #27
 800fe8a:	d411      	bmi.n	800feb0 <__swsetup_r+0x50>
 800fe8c:	2309      	movs	r3, #9
 800fe8e:	6033      	str	r3, [r6, #0]
 800fe90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe94:	81a3      	strh	r3, [r4, #12]
 800fe96:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9a:	e03e      	b.n	800ff1a <__swsetup_r+0xba>
 800fe9c:	4b25      	ldr	r3, [pc, #148]	; (800ff34 <__swsetup_r+0xd4>)
 800fe9e:	429c      	cmp	r4, r3
 800fea0:	d101      	bne.n	800fea6 <__swsetup_r+0x46>
 800fea2:	68ac      	ldr	r4, [r5, #8]
 800fea4:	e7eb      	b.n	800fe7e <__swsetup_r+0x1e>
 800fea6:	4b24      	ldr	r3, [pc, #144]	; (800ff38 <__swsetup_r+0xd8>)
 800fea8:	429c      	cmp	r4, r3
 800feaa:	bf08      	it	eq
 800feac:	68ec      	ldreq	r4, [r5, #12]
 800feae:	e7e6      	b.n	800fe7e <__swsetup_r+0x1e>
 800feb0:	0758      	lsls	r0, r3, #29
 800feb2:	d512      	bpl.n	800feda <__swsetup_r+0x7a>
 800feb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800feb6:	b141      	cbz	r1, 800feca <__swsetup_r+0x6a>
 800feb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800febc:	4299      	cmp	r1, r3
 800febe:	d002      	beq.n	800fec6 <__swsetup_r+0x66>
 800fec0:	4630      	mov	r0, r6
 800fec2:	f001 fad7 	bl	8011474 <_free_r>
 800fec6:	2300      	movs	r3, #0
 800fec8:	6363      	str	r3, [r4, #52]	; 0x34
 800feca:	89a3      	ldrh	r3, [r4, #12]
 800fecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fed0:	81a3      	strh	r3, [r4, #12]
 800fed2:	2300      	movs	r3, #0
 800fed4:	6063      	str	r3, [r4, #4]
 800fed6:	6923      	ldr	r3, [r4, #16]
 800fed8:	6023      	str	r3, [r4, #0]
 800feda:	89a3      	ldrh	r3, [r4, #12]
 800fedc:	f043 0308 	orr.w	r3, r3, #8
 800fee0:	81a3      	strh	r3, [r4, #12]
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	b94b      	cbnz	r3, 800fefa <__swsetup_r+0x9a>
 800fee6:	89a3      	ldrh	r3, [r4, #12]
 800fee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800feec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fef0:	d003      	beq.n	800fefa <__swsetup_r+0x9a>
 800fef2:	4621      	mov	r1, r4
 800fef4:	4630      	mov	r0, r6
 800fef6:	f000 fd93 	bl	8010a20 <__smakebuf_r>
 800fefa:	89a0      	ldrh	r0, [r4, #12]
 800fefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff00:	f010 0301 	ands.w	r3, r0, #1
 800ff04:	d00a      	beq.n	800ff1c <__swsetup_r+0xbc>
 800ff06:	2300      	movs	r3, #0
 800ff08:	60a3      	str	r3, [r4, #8]
 800ff0a:	6963      	ldr	r3, [r4, #20]
 800ff0c:	425b      	negs	r3, r3
 800ff0e:	61a3      	str	r3, [r4, #24]
 800ff10:	6923      	ldr	r3, [r4, #16]
 800ff12:	b943      	cbnz	r3, 800ff26 <__swsetup_r+0xc6>
 800ff14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff18:	d1ba      	bne.n	800fe90 <__swsetup_r+0x30>
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}
 800ff1c:	0781      	lsls	r1, r0, #30
 800ff1e:	bf58      	it	pl
 800ff20:	6963      	ldrpl	r3, [r4, #20]
 800ff22:	60a3      	str	r3, [r4, #8]
 800ff24:	e7f4      	b.n	800ff10 <__swsetup_r+0xb0>
 800ff26:	2000      	movs	r0, #0
 800ff28:	e7f7      	b.n	800ff1a <__swsetup_r+0xba>
 800ff2a:	bf00      	nop
 800ff2c:	20000010 	.word	0x20000010
 800ff30:	080125b4 	.word	0x080125b4
 800ff34:	080125d4 	.word	0x080125d4
 800ff38:	08012594 	.word	0x08012594

0800ff3c <_close_r>:
 800ff3c:	b538      	push	{r3, r4, r5, lr}
 800ff3e:	4d06      	ldr	r5, [pc, #24]	; (800ff58 <_close_r+0x1c>)
 800ff40:	2300      	movs	r3, #0
 800ff42:	4604      	mov	r4, r0
 800ff44:	4608      	mov	r0, r1
 800ff46:	602b      	str	r3, [r5, #0]
 800ff48:	f7f3 fb4b 	bl	80035e2 <_close>
 800ff4c:	1c43      	adds	r3, r0, #1
 800ff4e:	d102      	bne.n	800ff56 <_close_r+0x1a>
 800ff50:	682b      	ldr	r3, [r5, #0]
 800ff52:	b103      	cbz	r3, 800ff56 <_close_r+0x1a>
 800ff54:	6023      	str	r3, [r4, #0]
 800ff56:	bd38      	pop	{r3, r4, r5, pc}
 800ff58:	200028a4 	.word	0x200028a4

0800ff5c <__sflush_r>:
 800ff5c:	898a      	ldrh	r2, [r1, #12]
 800ff5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff62:	4605      	mov	r5, r0
 800ff64:	0710      	lsls	r0, r2, #28
 800ff66:	460c      	mov	r4, r1
 800ff68:	d458      	bmi.n	801001c <__sflush_r+0xc0>
 800ff6a:	684b      	ldr	r3, [r1, #4]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	dc05      	bgt.n	800ff7c <__sflush_r+0x20>
 800ff70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	dc02      	bgt.n	800ff7c <__sflush_r+0x20>
 800ff76:	2000      	movs	r0, #0
 800ff78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff7e:	2e00      	cmp	r6, #0
 800ff80:	d0f9      	beq.n	800ff76 <__sflush_r+0x1a>
 800ff82:	2300      	movs	r3, #0
 800ff84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff88:	682f      	ldr	r7, [r5, #0]
 800ff8a:	602b      	str	r3, [r5, #0]
 800ff8c:	d032      	beq.n	800fff4 <__sflush_r+0x98>
 800ff8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff90:	89a3      	ldrh	r3, [r4, #12]
 800ff92:	075a      	lsls	r2, r3, #29
 800ff94:	d505      	bpl.n	800ffa2 <__sflush_r+0x46>
 800ff96:	6863      	ldr	r3, [r4, #4]
 800ff98:	1ac0      	subs	r0, r0, r3
 800ff9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff9c:	b10b      	cbz	r3, 800ffa2 <__sflush_r+0x46>
 800ff9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ffa0:	1ac0      	subs	r0, r0, r3
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ffa8:	6a21      	ldr	r1, [r4, #32]
 800ffaa:	4628      	mov	r0, r5
 800ffac:	47b0      	blx	r6
 800ffae:	1c43      	adds	r3, r0, #1
 800ffb0:	89a3      	ldrh	r3, [r4, #12]
 800ffb2:	d106      	bne.n	800ffc2 <__sflush_r+0x66>
 800ffb4:	6829      	ldr	r1, [r5, #0]
 800ffb6:	291d      	cmp	r1, #29
 800ffb8:	d82c      	bhi.n	8010014 <__sflush_r+0xb8>
 800ffba:	4a2a      	ldr	r2, [pc, #168]	; (8010064 <__sflush_r+0x108>)
 800ffbc:	40ca      	lsrs	r2, r1
 800ffbe:	07d6      	lsls	r6, r2, #31
 800ffc0:	d528      	bpl.n	8010014 <__sflush_r+0xb8>
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	6062      	str	r2, [r4, #4]
 800ffc6:	04d9      	lsls	r1, r3, #19
 800ffc8:	6922      	ldr	r2, [r4, #16]
 800ffca:	6022      	str	r2, [r4, #0]
 800ffcc:	d504      	bpl.n	800ffd8 <__sflush_r+0x7c>
 800ffce:	1c42      	adds	r2, r0, #1
 800ffd0:	d101      	bne.n	800ffd6 <__sflush_r+0x7a>
 800ffd2:	682b      	ldr	r3, [r5, #0]
 800ffd4:	b903      	cbnz	r3, 800ffd8 <__sflush_r+0x7c>
 800ffd6:	6560      	str	r0, [r4, #84]	; 0x54
 800ffd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ffda:	602f      	str	r7, [r5, #0]
 800ffdc:	2900      	cmp	r1, #0
 800ffde:	d0ca      	beq.n	800ff76 <__sflush_r+0x1a>
 800ffe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffe4:	4299      	cmp	r1, r3
 800ffe6:	d002      	beq.n	800ffee <__sflush_r+0x92>
 800ffe8:	4628      	mov	r0, r5
 800ffea:	f001 fa43 	bl	8011474 <_free_r>
 800ffee:	2000      	movs	r0, #0
 800fff0:	6360      	str	r0, [r4, #52]	; 0x34
 800fff2:	e7c1      	b.n	800ff78 <__sflush_r+0x1c>
 800fff4:	6a21      	ldr	r1, [r4, #32]
 800fff6:	2301      	movs	r3, #1
 800fff8:	4628      	mov	r0, r5
 800fffa:	47b0      	blx	r6
 800fffc:	1c41      	adds	r1, r0, #1
 800fffe:	d1c7      	bne.n	800ff90 <__sflush_r+0x34>
 8010000:	682b      	ldr	r3, [r5, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d0c4      	beq.n	800ff90 <__sflush_r+0x34>
 8010006:	2b1d      	cmp	r3, #29
 8010008:	d001      	beq.n	801000e <__sflush_r+0xb2>
 801000a:	2b16      	cmp	r3, #22
 801000c:	d101      	bne.n	8010012 <__sflush_r+0xb6>
 801000e:	602f      	str	r7, [r5, #0]
 8010010:	e7b1      	b.n	800ff76 <__sflush_r+0x1a>
 8010012:	89a3      	ldrh	r3, [r4, #12]
 8010014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010018:	81a3      	strh	r3, [r4, #12]
 801001a:	e7ad      	b.n	800ff78 <__sflush_r+0x1c>
 801001c:	690f      	ldr	r7, [r1, #16]
 801001e:	2f00      	cmp	r7, #0
 8010020:	d0a9      	beq.n	800ff76 <__sflush_r+0x1a>
 8010022:	0793      	lsls	r3, r2, #30
 8010024:	680e      	ldr	r6, [r1, #0]
 8010026:	bf08      	it	eq
 8010028:	694b      	ldreq	r3, [r1, #20]
 801002a:	600f      	str	r7, [r1, #0]
 801002c:	bf18      	it	ne
 801002e:	2300      	movne	r3, #0
 8010030:	eba6 0807 	sub.w	r8, r6, r7
 8010034:	608b      	str	r3, [r1, #8]
 8010036:	f1b8 0f00 	cmp.w	r8, #0
 801003a:	dd9c      	ble.n	800ff76 <__sflush_r+0x1a>
 801003c:	6a21      	ldr	r1, [r4, #32]
 801003e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010040:	4643      	mov	r3, r8
 8010042:	463a      	mov	r2, r7
 8010044:	4628      	mov	r0, r5
 8010046:	47b0      	blx	r6
 8010048:	2800      	cmp	r0, #0
 801004a:	dc06      	bgt.n	801005a <__sflush_r+0xfe>
 801004c:	89a3      	ldrh	r3, [r4, #12]
 801004e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010052:	81a3      	strh	r3, [r4, #12]
 8010054:	f04f 30ff 	mov.w	r0, #4294967295
 8010058:	e78e      	b.n	800ff78 <__sflush_r+0x1c>
 801005a:	4407      	add	r7, r0
 801005c:	eba8 0800 	sub.w	r8, r8, r0
 8010060:	e7e9      	b.n	8010036 <__sflush_r+0xda>
 8010062:	bf00      	nop
 8010064:	20400001 	.word	0x20400001

08010068 <_fflush_r>:
 8010068:	b538      	push	{r3, r4, r5, lr}
 801006a:	690b      	ldr	r3, [r1, #16]
 801006c:	4605      	mov	r5, r0
 801006e:	460c      	mov	r4, r1
 8010070:	b913      	cbnz	r3, 8010078 <_fflush_r+0x10>
 8010072:	2500      	movs	r5, #0
 8010074:	4628      	mov	r0, r5
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	b118      	cbz	r0, 8010082 <_fflush_r+0x1a>
 801007a:	6983      	ldr	r3, [r0, #24]
 801007c:	b90b      	cbnz	r3, 8010082 <_fflush_r+0x1a>
 801007e:	f000 f887 	bl	8010190 <__sinit>
 8010082:	4b14      	ldr	r3, [pc, #80]	; (80100d4 <_fflush_r+0x6c>)
 8010084:	429c      	cmp	r4, r3
 8010086:	d11b      	bne.n	80100c0 <_fflush_r+0x58>
 8010088:	686c      	ldr	r4, [r5, #4]
 801008a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d0ef      	beq.n	8010072 <_fflush_r+0xa>
 8010092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010094:	07d0      	lsls	r0, r2, #31
 8010096:	d404      	bmi.n	80100a2 <_fflush_r+0x3a>
 8010098:	0599      	lsls	r1, r3, #22
 801009a:	d402      	bmi.n	80100a2 <_fflush_r+0x3a>
 801009c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801009e:	f000 fc84 	bl	80109aa <__retarget_lock_acquire_recursive>
 80100a2:	4628      	mov	r0, r5
 80100a4:	4621      	mov	r1, r4
 80100a6:	f7ff ff59 	bl	800ff5c <__sflush_r>
 80100aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80100ac:	07da      	lsls	r2, r3, #31
 80100ae:	4605      	mov	r5, r0
 80100b0:	d4e0      	bmi.n	8010074 <_fflush_r+0xc>
 80100b2:	89a3      	ldrh	r3, [r4, #12]
 80100b4:	059b      	lsls	r3, r3, #22
 80100b6:	d4dd      	bmi.n	8010074 <_fflush_r+0xc>
 80100b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100ba:	f000 fc77 	bl	80109ac <__retarget_lock_release_recursive>
 80100be:	e7d9      	b.n	8010074 <_fflush_r+0xc>
 80100c0:	4b05      	ldr	r3, [pc, #20]	; (80100d8 <_fflush_r+0x70>)
 80100c2:	429c      	cmp	r4, r3
 80100c4:	d101      	bne.n	80100ca <_fflush_r+0x62>
 80100c6:	68ac      	ldr	r4, [r5, #8]
 80100c8:	e7df      	b.n	801008a <_fflush_r+0x22>
 80100ca:	4b04      	ldr	r3, [pc, #16]	; (80100dc <_fflush_r+0x74>)
 80100cc:	429c      	cmp	r4, r3
 80100ce:	bf08      	it	eq
 80100d0:	68ec      	ldreq	r4, [r5, #12]
 80100d2:	e7da      	b.n	801008a <_fflush_r+0x22>
 80100d4:	080125b4 	.word	0x080125b4
 80100d8:	080125d4 	.word	0x080125d4
 80100dc:	08012594 	.word	0x08012594

080100e0 <std>:
 80100e0:	2300      	movs	r3, #0
 80100e2:	b510      	push	{r4, lr}
 80100e4:	4604      	mov	r4, r0
 80100e6:	e9c0 3300 	strd	r3, r3, [r0]
 80100ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100ee:	6083      	str	r3, [r0, #8]
 80100f0:	8181      	strh	r1, [r0, #12]
 80100f2:	6643      	str	r3, [r0, #100]	; 0x64
 80100f4:	81c2      	strh	r2, [r0, #14]
 80100f6:	6183      	str	r3, [r0, #24]
 80100f8:	4619      	mov	r1, r3
 80100fa:	2208      	movs	r2, #8
 80100fc:	305c      	adds	r0, #92	; 0x5c
 80100fe:	f7fe fc5d 	bl	800e9bc <memset>
 8010102:	4b05      	ldr	r3, [pc, #20]	; (8010118 <std+0x38>)
 8010104:	6263      	str	r3, [r4, #36]	; 0x24
 8010106:	4b05      	ldr	r3, [pc, #20]	; (801011c <std+0x3c>)
 8010108:	62a3      	str	r3, [r4, #40]	; 0x28
 801010a:	4b05      	ldr	r3, [pc, #20]	; (8010120 <std+0x40>)
 801010c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801010e:	4b05      	ldr	r3, [pc, #20]	; (8010124 <std+0x44>)
 8010110:	6224      	str	r4, [r4, #32]
 8010112:	6323      	str	r3, [r4, #48]	; 0x30
 8010114:	bd10      	pop	{r4, pc}
 8010116:	bf00      	nop
 8010118:	0800ef8d 	.word	0x0800ef8d
 801011c:	0800efaf 	.word	0x0800efaf
 8010120:	0800efe7 	.word	0x0800efe7
 8010124:	0800f00b 	.word	0x0800f00b

08010128 <_cleanup_r>:
 8010128:	4901      	ldr	r1, [pc, #4]	; (8010130 <_cleanup_r+0x8>)
 801012a:	f000 b8af 	b.w	801028c <_fwalk_reent>
 801012e:	bf00      	nop
 8010130:	08010069 	.word	0x08010069

08010134 <__sfmoreglue>:
 8010134:	b570      	push	{r4, r5, r6, lr}
 8010136:	2268      	movs	r2, #104	; 0x68
 8010138:	1e4d      	subs	r5, r1, #1
 801013a:	4355      	muls	r5, r2
 801013c:	460e      	mov	r6, r1
 801013e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010142:	f001 fa03 	bl	801154c <_malloc_r>
 8010146:	4604      	mov	r4, r0
 8010148:	b140      	cbz	r0, 801015c <__sfmoreglue+0x28>
 801014a:	2100      	movs	r1, #0
 801014c:	e9c0 1600 	strd	r1, r6, [r0]
 8010150:	300c      	adds	r0, #12
 8010152:	60a0      	str	r0, [r4, #8]
 8010154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010158:	f7fe fc30 	bl	800e9bc <memset>
 801015c:	4620      	mov	r0, r4
 801015e:	bd70      	pop	{r4, r5, r6, pc}

08010160 <__sfp_lock_acquire>:
 8010160:	4801      	ldr	r0, [pc, #4]	; (8010168 <__sfp_lock_acquire+0x8>)
 8010162:	f000 bc22 	b.w	80109aa <__retarget_lock_acquire_recursive>
 8010166:	bf00      	nop
 8010168:	20002899 	.word	0x20002899

0801016c <__sfp_lock_release>:
 801016c:	4801      	ldr	r0, [pc, #4]	; (8010174 <__sfp_lock_release+0x8>)
 801016e:	f000 bc1d 	b.w	80109ac <__retarget_lock_release_recursive>
 8010172:	bf00      	nop
 8010174:	20002899 	.word	0x20002899

08010178 <__sinit_lock_acquire>:
 8010178:	4801      	ldr	r0, [pc, #4]	; (8010180 <__sinit_lock_acquire+0x8>)
 801017a:	f000 bc16 	b.w	80109aa <__retarget_lock_acquire_recursive>
 801017e:	bf00      	nop
 8010180:	2000289a 	.word	0x2000289a

08010184 <__sinit_lock_release>:
 8010184:	4801      	ldr	r0, [pc, #4]	; (801018c <__sinit_lock_release+0x8>)
 8010186:	f000 bc11 	b.w	80109ac <__retarget_lock_release_recursive>
 801018a:	bf00      	nop
 801018c:	2000289a 	.word	0x2000289a

08010190 <__sinit>:
 8010190:	b510      	push	{r4, lr}
 8010192:	4604      	mov	r4, r0
 8010194:	f7ff fff0 	bl	8010178 <__sinit_lock_acquire>
 8010198:	69a3      	ldr	r3, [r4, #24]
 801019a:	b11b      	cbz	r3, 80101a4 <__sinit+0x14>
 801019c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101a0:	f7ff bff0 	b.w	8010184 <__sinit_lock_release>
 80101a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80101a8:	6523      	str	r3, [r4, #80]	; 0x50
 80101aa:	4b13      	ldr	r3, [pc, #76]	; (80101f8 <__sinit+0x68>)
 80101ac:	4a13      	ldr	r2, [pc, #76]	; (80101fc <__sinit+0x6c>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80101b2:	42a3      	cmp	r3, r4
 80101b4:	bf04      	itt	eq
 80101b6:	2301      	moveq	r3, #1
 80101b8:	61a3      	streq	r3, [r4, #24]
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 f820 	bl	8010200 <__sfp>
 80101c0:	6060      	str	r0, [r4, #4]
 80101c2:	4620      	mov	r0, r4
 80101c4:	f000 f81c 	bl	8010200 <__sfp>
 80101c8:	60a0      	str	r0, [r4, #8]
 80101ca:	4620      	mov	r0, r4
 80101cc:	f000 f818 	bl	8010200 <__sfp>
 80101d0:	2200      	movs	r2, #0
 80101d2:	60e0      	str	r0, [r4, #12]
 80101d4:	2104      	movs	r1, #4
 80101d6:	6860      	ldr	r0, [r4, #4]
 80101d8:	f7ff ff82 	bl	80100e0 <std>
 80101dc:	68a0      	ldr	r0, [r4, #8]
 80101de:	2201      	movs	r2, #1
 80101e0:	2109      	movs	r1, #9
 80101e2:	f7ff ff7d 	bl	80100e0 <std>
 80101e6:	68e0      	ldr	r0, [r4, #12]
 80101e8:	2202      	movs	r2, #2
 80101ea:	2112      	movs	r1, #18
 80101ec:	f7ff ff78 	bl	80100e0 <std>
 80101f0:	2301      	movs	r3, #1
 80101f2:	61a3      	str	r3, [r4, #24]
 80101f4:	e7d2      	b.n	801019c <__sinit+0xc>
 80101f6:	bf00      	nop
 80101f8:	08012428 	.word	0x08012428
 80101fc:	08010129 	.word	0x08010129

08010200 <__sfp>:
 8010200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010202:	4607      	mov	r7, r0
 8010204:	f7ff ffac 	bl	8010160 <__sfp_lock_acquire>
 8010208:	4b1e      	ldr	r3, [pc, #120]	; (8010284 <__sfp+0x84>)
 801020a:	681e      	ldr	r6, [r3, #0]
 801020c:	69b3      	ldr	r3, [r6, #24]
 801020e:	b913      	cbnz	r3, 8010216 <__sfp+0x16>
 8010210:	4630      	mov	r0, r6
 8010212:	f7ff ffbd 	bl	8010190 <__sinit>
 8010216:	3648      	adds	r6, #72	; 0x48
 8010218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801021c:	3b01      	subs	r3, #1
 801021e:	d503      	bpl.n	8010228 <__sfp+0x28>
 8010220:	6833      	ldr	r3, [r6, #0]
 8010222:	b30b      	cbz	r3, 8010268 <__sfp+0x68>
 8010224:	6836      	ldr	r6, [r6, #0]
 8010226:	e7f7      	b.n	8010218 <__sfp+0x18>
 8010228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801022c:	b9d5      	cbnz	r5, 8010264 <__sfp+0x64>
 801022e:	4b16      	ldr	r3, [pc, #88]	; (8010288 <__sfp+0x88>)
 8010230:	60e3      	str	r3, [r4, #12]
 8010232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010236:	6665      	str	r5, [r4, #100]	; 0x64
 8010238:	f000 fbb6 	bl	80109a8 <__retarget_lock_init_recursive>
 801023c:	f7ff ff96 	bl	801016c <__sfp_lock_release>
 8010240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010248:	6025      	str	r5, [r4, #0]
 801024a:	61a5      	str	r5, [r4, #24]
 801024c:	2208      	movs	r2, #8
 801024e:	4629      	mov	r1, r5
 8010250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010254:	f7fe fbb2 	bl	800e9bc <memset>
 8010258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801025c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010260:	4620      	mov	r0, r4
 8010262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010264:	3468      	adds	r4, #104	; 0x68
 8010266:	e7d9      	b.n	801021c <__sfp+0x1c>
 8010268:	2104      	movs	r1, #4
 801026a:	4638      	mov	r0, r7
 801026c:	f7ff ff62 	bl	8010134 <__sfmoreglue>
 8010270:	4604      	mov	r4, r0
 8010272:	6030      	str	r0, [r6, #0]
 8010274:	2800      	cmp	r0, #0
 8010276:	d1d5      	bne.n	8010224 <__sfp+0x24>
 8010278:	f7ff ff78 	bl	801016c <__sfp_lock_release>
 801027c:	230c      	movs	r3, #12
 801027e:	603b      	str	r3, [r7, #0]
 8010280:	e7ee      	b.n	8010260 <__sfp+0x60>
 8010282:	bf00      	nop
 8010284:	08012428 	.word	0x08012428
 8010288:	ffff0001 	.word	0xffff0001

0801028c <_fwalk_reent>:
 801028c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010290:	4606      	mov	r6, r0
 8010292:	4688      	mov	r8, r1
 8010294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010298:	2700      	movs	r7, #0
 801029a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801029e:	f1b9 0901 	subs.w	r9, r9, #1
 80102a2:	d505      	bpl.n	80102b0 <_fwalk_reent+0x24>
 80102a4:	6824      	ldr	r4, [r4, #0]
 80102a6:	2c00      	cmp	r4, #0
 80102a8:	d1f7      	bne.n	801029a <_fwalk_reent+0xe>
 80102aa:	4638      	mov	r0, r7
 80102ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b0:	89ab      	ldrh	r3, [r5, #12]
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d907      	bls.n	80102c6 <_fwalk_reent+0x3a>
 80102b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80102ba:	3301      	adds	r3, #1
 80102bc:	d003      	beq.n	80102c6 <_fwalk_reent+0x3a>
 80102be:	4629      	mov	r1, r5
 80102c0:	4630      	mov	r0, r6
 80102c2:	47c0      	blx	r8
 80102c4:	4307      	orrs	r7, r0
 80102c6:	3568      	adds	r5, #104	; 0x68
 80102c8:	e7e9      	b.n	801029e <_fwalk_reent+0x12>

080102ca <rshift>:
 80102ca:	6903      	ldr	r3, [r0, #16]
 80102cc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80102d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102d4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80102d8:	f100 0414 	add.w	r4, r0, #20
 80102dc:	dd45      	ble.n	801036a <rshift+0xa0>
 80102de:	f011 011f 	ands.w	r1, r1, #31
 80102e2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80102e6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80102ea:	d10c      	bne.n	8010306 <rshift+0x3c>
 80102ec:	f100 0710 	add.w	r7, r0, #16
 80102f0:	4629      	mov	r1, r5
 80102f2:	42b1      	cmp	r1, r6
 80102f4:	d334      	bcc.n	8010360 <rshift+0x96>
 80102f6:	1a9b      	subs	r3, r3, r2
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	1eea      	subs	r2, r5, #3
 80102fc:	4296      	cmp	r6, r2
 80102fe:	bf38      	it	cc
 8010300:	2300      	movcc	r3, #0
 8010302:	4423      	add	r3, r4
 8010304:	e015      	b.n	8010332 <rshift+0x68>
 8010306:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801030a:	f1c1 0820 	rsb	r8, r1, #32
 801030e:	40cf      	lsrs	r7, r1
 8010310:	f105 0e04 	add.w	lr, r5, #4
 8010314:	46a1      	mov	r9, r4
 8010316:	4576      	cmp	r6, lr
 8010318:	46f4      	mov	ip, lr
 801031a:	d815      	bhi.n	8010348 <rshift+0x7e>
 801031c:	1a9a      	subs	r2, r3, r2
 801031e:	0092      	lsls	r2, r2, #2
 8010320:	3a04      	subs	r2, #4
 8010322:	3501      	adds	r5, #1
 8010324:	42ae      	cmp	r6, r5
 8010326:	bf38      	it	cc
 8010328:	2200      	movcc	r2, #0
 801032a:	18a3      	adds	r3, r4, r2
 801032c:	50a7      	str	r7, [r4, r2]
 801032e:	b107      	cbz	r7, 8010332 <rshift+0x68>
 8010330:	3304      	adds	r3, #4
 8010332:	1b1a      	subs	r2, r3, r4
 8010334:	42a3      	cmp	r3, r4
 8010336:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801033a:	bf08      	it	eq
 801033c:	2300      	moveq	r3, #0
 801033e:	6102      	str	r2, [r0, #16]
 8010340:	bf08      	it	eq
 8010342:	6143      	streq	r3, [r0, #20]
 8010344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010348:	f8dc c000 	ldr.w	ip, [ip]
 801034c:	fa0c fc08 	lsl.w	ip, ip, r8
 8010350:	ea4c 0707 	orr.w	r7, ip, r7
 8010354:	f849 7b04 	str.w	r7, [r9], #4
 8010358:	f85e 7b04 	ldr.w	r7, [lr], #4
 801035c:	40cf      	lsrs	r7, r1
 801035e:	e7da      	b.n	8010316 <rshift+0x4c>
 8010360:	f851 cb04 	ldr.w	ip, [r1], #4
 8010364:	f847 cf04 	str.w	ip, [r7, #4]!
 8010368:	e7c3      	b.n	80102f2 <rshift+0x28>
 801036a:	4623      	mov	r3, r4
 801036c:	e7e1      	b.n	8010332 <rshift+0x68>

0801036e <__hexdig_fun>:
 801036e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010372:	2b09      	cmp	r3, #9
 8010374:	d802      	bhi.n	801037c <__hexdig_fun+0xe>
 8010376:	3820      	subs	r0, #32
 8010378:	b2c0      	uxtb	r0, r0
 801037a:	4770      	bx	lr
 801037c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010380:	2b05      	cmp	r3, #5
 8010382:	d801      	bhi.n	8010388 <__hexdig_fun+0x1a>
 8010384:	3847      	subs	r0, #71	; 0x47
 8010386:	e7f7      	b.n	8010378 <__hexdig_fun+0xa>
 8010388:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801038c:	2b05      	cmp	r3, #5
 801038e:	d801      	bhi.n	8010394 <__hexdig_fun+0x26>
 8010390:	3827      	subs	r0, #39	; 0x27
 8010392:	e7f1      	b.n	8010378 <__hexdig_fun+0xa>
 8010394:	2000      	movs	r0, #0
 8010396:	4770      	bx	lr

08010398 <__gethex>:
 8010398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801039c:	ed2d 8b02 	vpush	{d8}
 80103a0:	b089      	sub	sp, #36	; 0x24
 80103a2:	ee08 0a10 	vmov	s16, r0
 80103a6:	9304      	str	r3, [sp, #16]
 80103a8:	4bb4      	ldr	r3, [pc, #720]	; (801067c <__gethex+0x2e4>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	9301      	str	r3, [sp, #4]
 80103ae:	4618      	mov	r0, r3
 80103b0:	468b      	mov	fp, r1
 80103b2:	4690      	mov	r8, r2
 80103b4:	f7ef ff0c 	bl	80001d0 <strlen>
 80103b8:	9b01      	ldr	r3, [sp, #4]
 80103ba:	f8db 2000 	ldr.w	r2, [fp]
 80103be:	4403      	add	r3, r0
 80103c0:	4682      	mov	sl, r0
 80103c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80103c6:	9305      	str	r3, [sp, #20]
 80103c8:	1c93      	adds	r3, r2, #2
 80103ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80103ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80103d2:	32fe      	adds	r2, #254	; 0xfe
 80103d4:	18d1      	adds	r1, r2, r3
 80103d6:	461f      	mov	r7, r3
 80103d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80103dc:	9100      	str	r1, [sp, #0]
 80103de:	2830      	cmp	r0, #48	; 0x30
 80103e0:	d0f8      	beq.n	80103d4 <__gethex+0x3c>
 80103e2:	f7ff ffc4 	bl	801036e <__hexdig_fun>
 80103e6:	4604      	mov	r4, r0
 80103e8:	2800      	cmp	r0, #0
 80103ea:	d13a      	bne.n	8010462 <__gethex+0xca>
 80103ec:	9901      	ldr	r1, [sp, #4]
 80103ee:	4652      	mov	r2, sl
 80103f0:	4638      	mov	r0, r7
 80103f2:	f7fe fe0e 	bl	800f012 <strncmp>
 80103f6:	4605      	mov	r5, r0
 80103f8:	2800      	cmp	r0, #0
 80103fa:	d168      	bne.n	80104ce <__gethex+0x136>
 80103fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010400:	eb07 060a 	add.w	r6, r7, sl
 8010404:	f7ff ffb3 	bl	801036e <__hexdig_fun>
 8010408:	2800      	cmp	r0, #0
 801040a:	d062      	beq.n	80104d2 <__gethex+0x13a>
 801040c:	4633      	mov	r3, r6
 801040e:	7818      	ldrb	r0, [r3, #0]
 8010410:	2830      	cmp	r0, #48	; 0x30
 8010412:	461f      	mov	r7, r3
 8010414:	f103 0301 	add.w	r3, r3, #1
 8010418:	d0f9      	beq.n	801040e <__gethex+0x76>
 801041a:	f7ff ffa8 	bl	801036e <__hexdig_fun>
 801041e:	2301      	movs	r3, #1
 8010420:	fab0 f480 	clz	r4, r0
 8010424:	0964      	lsrs	r4, r4, #5
 8010426:	4635      	mov	r5, r6
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	463a      	mov	r2, r7
 801042c:	4616      	mov	r6, r2
 801042e:	3201      	adds	r2, #1
 8010430:	7830      	ldrb	r0, [r6, #0]
 8010432:	f7ff ff9c 	bl	801036e <__hexdig_fun>
 8010436:	2800      	cmp	r0, #0
 8010438:	d1f8      	bne.n	801042c <__gethex+0x94>
 801043a:	9901      	ldr	r1, [sp, #4]
 801043c:	4652      	mov	r2, sl
 801043e:	4630      	mov	r0, r6
 8010440:	f7fe fde7 	bl	800f012 <strncmp>
 8010444:	b980      	cbnz	r0, 8010468 <__gethex+0xd0>
 8010446:	b94d      	cbnz	r5, 801045c <__gethex+0xc4>
 8010448:	eb06 050a 	add.w	r5, r6, sl
 801044c:	462a      	mov	r2, r5
 801044e:	4616      	mov	r6, r2
 8010450:	3201      	adds	r2, #1
 8010452:	7830      	ldrb	r0, [r6, #0]
 8010454:	f7ff ff8b 	bl	801036e <__hexdig_fun>
 8010458:	2800      	cmp	r0, #0
 801045a:	d1f8      	bne.n	801044e <__gethex+0xb6>
 801045c:	1bad      	subs	r5, r5, r6
 801045e:	00ad      	lsls	r5, r5, #2
 8010460:	e004      	b.n	801046c <__gethex+0xd4>
 8010462:	2400      	movs	r4, #0
 8010464:	4625      	mov	r5, r4
 8010466:	e7e0      	b.n	801042a <__gethex+0x92>
 8010468:	2d00      	cmp	r5, #0
 801046a:	d1f7      	bne.n	801045c <__gethex+0xc4>
 801046c:	7833      	ldrb	r3, [r6, #0]
 801046e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010472:	2b50      	cmp	r3, #80	; 0x50
 8010474:	d13b      	bne.n	80104ee <__gethex+0x156>
 8010476:	7873      	ldrb	r3, [r6, #1]
 8010478:	2b2b      	cmp	r3, #43	; 0x2b
 801047a:	d02c      	beq.n	80104d6 <__gethex+0x13e>
 801047c:	2b2d      	cmp	r3, #45	; 0x2d
 801047e:	d02e      	beq.n	80104de <__gethex+0x146>
 8010480:	1c71      	adds	r1, r6, #1
 8010482:	f04f 0900 	mov.w	r9, #0
 8010486:	7808      	ldrb	r0, [r1, #0]
 8010488:	f7ff ff71 	bl	801036e <__hexdig_fun>
 801048c:	1e43      	subs	r3, r0, #1
 801048e:	b2db      	uxtb	r3, r3
 8010490:	2b18      	cmp	r3, #24
 8010492:	d82c      	bhi.n	80104ee <__gethex+0x156>
 8010494:	f1a0 0210 	sub.w	r2, r0, #16
 8010498:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801049c:	f7ff ff67 	bl	801036e <__hexdig_fun>
 80104a0:	1e43      	subs	r3, r0, #1
 80104a2:	b2db      	uxtb	r3, r3
 80104a4:	2b18      	cmp	r3, #24
 80104a6:	d91d      	bls.n	80104e4 <__gethex+0x14c>
 80104a8:	f1b9 0f00 	cmp.w	r9, #0
 80104ac:	d000      	beq.n	80104b0 <__gethex+0x118>
 80104ae:	4252      	negs	r2, r2
 80104b0:	4415      	add	r5, r2
 80104b2:	f8cb 1000 	str.w	r1, [fp]
 80104b6:	b1e4      	cbz	r4, 80104f2 <__gethex+0x15a>
 80104b8:	9b00      	ldr	r3, [sp, #0]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	bf14      	ite	ne
 80104be:	2700      	movne	r7, #0
 80104c0:	2706      	moveq	r7, #6
 80104c2:	4638      	mov	r0, r7
 80104c4:	b009      	add	sp, #36	; 0x24
 80104c6:	ecbd 8b02 	vpop	{d8}
 80104ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ce:	463e      	mov	r6, r7
 80104d0:	4625      	mov	r5, r4
 80104d2:	2401      	movs	r4, #1
 80104d4:	e7ca      	b.n	801046c <__gethex+0xd4>
 80104d6:	f04f 0900 	mov.w	r9, #0
 80104da:	1cb1      	adds	r1, r6, #2
 80104dc:	e7d3      	b.n	8010486 <__gethex+0xee>
 80104de:	f04f 0901 	mov.w	r9, #1
 80104e2:	e7fa      	b.n	80104da <__gethex+0x142>
 80104e4:	230a      	movs	r3, #10
 80104e6:	fb03 0202 	mla	r2, r3, r2, r0
 80104ea:	3a10      	subs	r2, #16
 80104ec:	e7d4      	b.n	8010498 <__gethex+0x100>
 80104ee:	4631      	mov	r1, r6
 80104f0:	e7df      	b.n	80104b2 <__gethex+0x11a>
 80104f2:	1bf3      	subs	r3, r6, r7
 80104f4:	3b01      	subs	r3, #1
 80104f6:	4621      	mov	r1, r4
 80104f8:	2b07      	cmp	r3, #7
 80104fa:	dc0b      	bgt.n	8010514 <__gethex+0x17c>
 80104fc:	ee18 0a10 	vmov	r0, s16
 8010500:	f000 fae0 	bl	8010ac4 <_Balloc>
 8010504:	4604      	mov	r4, r0
 8010506:	b940      	cbnz	r0, 801051a <__gethex+0x182>
 8010508:	4b5d      	ldr	r3, [pc, #372]	; (8010680 <__gethex+0x2e8>)
 801050a:	4602      	mov	r2, r0
 801050c:	21de      	movs	r1, #222	; 0xde
 801050e:	485d      	ldr	r0, [pc, #372]	; (8010684 <__gethex+0x2ec>)
 8010510:	f001 fbb8 	bl	8011c84 <__assert_func>
 8010514:	3101      	adds	r1, #1
 8010516:	105b      	asrs	r3, r3, #1
 8010518:	e7ee      	b.n	80104f8 <__gethex+0x160>
 801051a:	f100 0914 	add.w	r9, r0, #20
 801051e:	f04f 0b00 	mov.w	fp, #0
 8010522:	f1ca 0301 	rsb	r3, sl, #1
 8010526:	f8cd 9008 	str.w	r9, [sp, #8]
 801052a:	f8cd b000 	str.w	fp, [sp]
 801052e:	9306      	str	r3, [sp, #24]
 8010530:	42b7      	cmp	r7, r6
 8010532:	d340      	bcc.n	80105b6 <__gethex+0x21e>
 8010534:	9802      	ldr	r0, [sp, #8]
 8010536:	9b00      	ldr	r3, [sp, #0]
 8010538:	f840 3b04 	str.w	r3, [r0], #4
 801053c:	eba0 0009 	sub.w	r0, r0, r9
 8010540:	1080      	asrs	r0, r0, #2
 8010542:	0146      	lsls	r6, r0, #5
 8010544:	6120      	str	r0, [r4, #16]
 8010546:	4618      	mov	r0, r3
 8010548:	f000 fbae 	bl	8010ca8 <__hi0bits>
 801054c:	1a30      	subs	r0, r6, r0
 801054e:	f8d8 6000 	ldr.w	r6, [r8]
 8010552:	42b0      	cmp	r0, r6
 8010554:	dd63      	ble.n	801061e <__gethex+0x286>
 8010556:	1b87      	subs	r7, r0, r6
 8010558:	4639      	mov	r1, r7
 801055a:	4620      	mov	r0, r4
 801055c:	f000 ff52 	bl	8011404 <__any_on>
 8010560:	4682      	mov	sl, r0
 8010562:	b1a8      	cbz	r0, 8010590 <__gethex+0x1f8>
 8010564:	1e7b      	subs	r3, r7, #1
 8010566:	1159      	asrs	r1, r3, #5
 8010568:	f003 021f 	and.w	r2, r3, #31
 801056c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010570:	f04f 0a01 	mov.w	sl, #1
 8010574:	fa0a f202 	lsl.w	r2, sl, r2
 8010578:	420a      	tst	r2, r1
 801057a:	d009      	beq.n	8010590 <__gethex+0x1f8>
 801057c:	4553      	cmp	r3, sl
 801057e:	dd05      	ble.n	801058c <__gethex+0x1f4>
 8010580:	1eb9      	subs	r1, r7, #2
 8010582:	4620      	mov	r0, r4
 8010584:	f000 ff3e 	bl	8011404 <__any_on>
 8010588:	2800      	cmp	r0, #0
 801058a:	d145      	bne.n	8010618 <__gethex+0x280>
 801058c:	f04f 0a02 	mov.w	sl, #2
 8010590:	4639      	mov	r1, r7
 8010592:	4620      	mov	r0, r4
 8010594:	f7ff fe99 	bl	80102ca <rshift>
 8010598:	443d      	add	r5, r7
 801059a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801059e:	42ab      	cmp	r3, r5
 80105a0:	da4c      	bge.n	801063c <__gethex+0x2a4>
 80105a2:	ee18 0a10 	vmov	r0, s16
 80105a6:	4621      	mov	r1, r4
 80105a8:	f000 facc 	bl	8010b44 <_Bfree>
 80105ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80105ae:	2300      	movs	r3, #0
 80105b0:	6013      	str	r3, [r2, #0]
 80105b2:	27a3      	movs	r7, #163	; 0xa3
 80105b4:	e785      	b.n	80104c2 <__gethex+0x12a>
 80105b6:	1e73      	subs	r3, r6, #1
 80105b8:	9a05      	ldr	r2, [sp, #20]
 80105ba:	9303      	str	r3, [sp, #12]
 80105bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d019      	beq.n	80105f8 <__gethex+0x260>
 80105c4:	f1bb 0f20 	cmp.w	fp, #32
 80105c8:	d107      	bne.n	80105da <__gethex+0x242>
 80105ca:	9b02      	ldr	r3, [sp, #8]
 80105cc:	9a00      	ldr	r2, [sp, #0]
 80105ce:	f843 2b04 	str.w	r2, [r3], #4
 80105d2:	9302      	str	r3, [sp, #8]
 80105d4:	2300      	movs	r3, #0
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	469b      	mov	fp, r3
 80105da:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80105de:	f7ff fec6 	bl	801036e <__hexdig_fun>
 80105e2:	9b00      	ldr	r3, [sp, #0]
 80105e4:	f000 000f 	and.w	r0, r0, #15
 80105e8:	fa00 f00b 	lsl.w	r0, r0, fp
 80105ec:	4303      	orrs	r3, r0
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	f10b 0b04 	add.w	fp, fp, #4
 80105f4:	9b03      	ldr	r3, [sp, #12]
 80105f6:	e00d      	b.n	8010614 <__gethex+0x27c>
 80105f8:	9b03      	ldr	r3, [sp, #12]
 80105fa:	9a06      	ldr	r2, [sp, #24]
 80105fc:	4413      	add	r3, r2
 80105fe:	42bb      	cmp	r3, r7
 8010600:	d3e0      	bcc.n	80105c4 <__gethex+0x22c>
 8010602:	4618      	mov	r0, r3
 8010604:	9901      	ldr	r1, [sp, #4]
 8010606:	9307      	str	r3, [sp, #28]
 8010608:	4652      	mov	r2, sl
 801060a:	f7fe fd02 	bl	800f012 <strncmp>
 801060e:	9b07      	ldr	r3, [sp, #28]
 8010610:	2800      	cmp	r0, #0
 8010612:	d1d7      	bne.n	80105c4 <__gethex+0x22c>
 8010614:	461e      	mov	r6, r3
 8010616:	e78b      	b.n	8010530 <__gethex+0x198>
 8010618:	f04f 0a03 	mov.w	sl, #3
 801061c:	e7b8      	b.n	8010590 <__gethex+0x1f8>
 801061e:	da0a      	bge.n	8010636 <__gethex+0x29e>
 8010620:	1a37      	subs	r7, r6, r0
 8010622:	4621      	mov	r1, r4
 8010624:	ee18 0a10 	vmov	r0, s16
 8010628:	463a      	mov	r2, r7
 801062a:	f000 fca7 	bl	8010f7c <__lshift>
 801062e:	1bed      	subs	r5, r5, r7
 8010630:	4604      	mov	r4, r0
 8010632:	f100 0914 	add.w	r9, r0, #20
 8010636:	f04f 0a00 	mov.w	sl, #0
 801063a:	e7ae      	b.n	801059a <__gethex+0x202>
 801063c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010640:	42a8      	cmp	r0, r5
 8010642:	dd72      	ble.n	801072a <__gethex+0x392>
 8010644:	1b45      	subs	r5, r0, r5
 8010646:	42ae      	cmp	r6, r5
 8010648:	dc36      	bgt.n	80106b8 <__gethex+0x320>
 801064a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801064e:	2b02      	cmp	r3, #2
 8010650:	d02a      	beq.n	80106a8 <__gethex+0x310>
 8010652:	2b03      	cmp	r3, #3
 8010654:	d02c      	beq.n	80106b0 <__gethex+0x318>
 8010656:	2b01      	cmp	r3, #1
 8010658:	d11c      	bne.n	8010694 <__gethex+0x2fc>
 801065a:	42ae      	cmp	r6, r5
 801065c:	d11a      	bne.n	8010694 <__gethex+0x2fc>
 801065e:	2e01      	cmp	r6, #1
 8010660:	d112      	bne.n	8010688 <__gethex+0x2f0>
 8010662:	9a04      	ldr	r2, [sp, #16]
 8010664:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010668:	6013      	str	r3, [r2, #0]
 801066a:	2301      	movs	r3, #1
 801066c:	6123      	str	r3, [r4, #16]
 801066e:	f8c9 3000 	str.w	r3, [r9]
 8010672:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010674:	2762      	movs	r7, #98	; 0x62
 8010676:	601c      	str	r4, [r3, #0]
 8010678:	e723      	b.n	80104c2 <__gethex+0x12a>
 801067a:	bf00      	nop
 801067c:	0801266c 	.word	0x0801266c
 8010680:	080125f4 	.word	0x080125f4
 8010684:	08012605 	.word	0x08012605
 8010688:	1e71      	subs	r1, r6, #1
 801068a:	4620      	mov	r0, r4
 801068c:	f000 feba 	bl	8011404 <__any_on>
 8010690:	2800      	cmp	r0, #0
 8010692:	d1e6      	bne.n	8010662 <__gethex+0x2ca>
 8010694:	ee18 0a10 	vmov	r0, s16
 8010698:	4621      	mov	r1, r4
 801069a:	f000 fa53 	bl	8010b44 <_Bfree>
 801069e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80106a0:	2300      	movs	r3, #0
 80106a2:	6013      	str	r3, [r2, #0]
 80106a4:	2750      	movs	r7, #80	; 0x50
 80106a6:	e70c      	b.n	80104c2 <__gethex+0x12a>
 80106a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1f2      	bne.n	8010694 <__gethex+0x2fc>
 80106ae:	e7d8      	b.n	8010662 <__gethex+0x2ca>
 80106b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d1d5      	bne.n	8010662 <__gethex+0x2ca>
 80106b6:	e7ed      	b.n	8010694 <__gethex+0x2fc>
 80106b8:	1e6f      	subs	r7, r5, #1
 80106ba:	f1ba 0f00 	cmp.w	sl, #0
 80106be:	d131      	bne.n	8010724 <__gethex+0x38c>
 80106c0:	b127      	cbz	r7, 80106cc <__gethex+0x334>
 80106c2:	4639      	mov	r1, r7
 80106c4:	4620      	mov	r0, r4
 80106c6:	f000 fe9d 	bl	8011404 <__any_on>
 80106ca:	4682      	mov	sl, r0
 80106cc:	117b      	asrs	r3, r7, #5
 80106ce:	2101      	movs	r1, #1
 80106d0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80106d4:	f007 071f 	and.w	r7, r7, #31
 80106d8:	fa01 f707 	lsl.w	r7, r1, r7
 80106dc:	421f      	tst	r7, r3
 80106de:	4629      	mov	r1, r5
 80106e0:	4620      	mov	r0, r4
 80106e2:	bf18      	it	ne
 80106e4:	f04a 0a02 	orrne.w	sl, sl, #2
 80106e8:	1b76      	subs	r6, r6, r5
 80106ea:	f7ff fdee 	bl	80102ca <rshift>
 80106ee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80106f2:	2702      	movs	r7, #2
 80106f4:	f1ba 0f00 	cmp.w	sl, #0
 80106f8:	d048      	beq.n	801078c <__gethex+0x3f4>
 80106fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106fe:	2b02      	cmp	r3, #2
 8010700:	d015      	beq.n	801072e <__gethex+0x396>
 8010702:	2b03      	cmp	r3, #3
 8010704:	d017      	beq.n	8010736 <__gethex+0x39e>
 8010706:	2b01      	cmp	r3, #1
 8010708:	d109      	bne.n	801071e <__gethex+0x386>
 801070a:	f01a 0f02 	tst.w	sl, #2
 801070e:	d006      	beq.n	801071e <__gethex+0x386>
 8010710:	f8d9 0000 	ldr.w	r0, [r9]
 8010714:	ea4a 0a00 	orr.w	sl, sl, r0
 8010718:	f01a 0f01 	tst.w	sl, #1
 801071c:	d10e      	bne.n	801073c <__gethex+0x3a4>
 801071e:	f047 0710 	orr.w	r7, r7, #16
 8010722:	e033      	b.n	801078c <__gethex+0x3f4>
 8010724:	f04f 0a01 	mov.w	sl, #1
 8010728:	e7d0      	b.n	80106cc <__gethex+0x334>
 801072a:	2701      	movs	r7, #1
 801072c:	e7e2      	b.n	80106f4 <__gethex+0x35c>
 801072e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010730:	f1c3 0301 	rsb	r3, r3, #1
 8010734:	9315      	str	r3, [sp, #84]	; 0x54
 8010736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010738:	2b00      	cmp	r3, #0
 801073a:	d0f0      	beq.n	801071e <__gethex+0x386>
 801073c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010740:	f104 0314 	add.w	r3, r4, #20
 8010744:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010748:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801074c:	f04f 0c00 	mov.w	ip, #0
 8010750:	4618      	mov	r0, r3
 8010752:	f853 2b04 	ldr.w	r2, [r3], #4
 8010756:	f1b2 3fff 	cmp.w	r2, #4294967295
 801075a:	d01c      	beq.n	8010796 <__gethex+0x3fe>
 801075c:	3201      	adds	r2, #1
 801075e:	6002      	str	r2, [r0, #0]
 8010760:	2f02      	cmp	r7, #2
 8010762:	f104 0314 	add.w	r3, r4, #20
 8010766:	d13f      	bne.n	80107e8 <__gethex+0x450>
 8010768:	f8d8 2000 	ldr.w	r2, [r8]
 801076c:	3a01      	subs	r2, #1
 801076e:	42b2      	cmp	r2, r6
 8010770:	d10a      	bne.n	8010788 <__gethex+0x3f0>
 8010772:	1171      	asrs	r1, r6, #5
 8010774:	2201      	movs	r2, #1
 8010776:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801077a:	f006 061f 	and.w	r6, r6, #31
 801077e:	fa02 f606 	lsl.w	r6, r2, r6
 8010782:	421e      	tst	r6, r3
 8010784:	bf18      	it	ne
 8010786:	4617      	movne	r7, r2
 8010788:	f047 0720 	orr.w	r7, r7, #32
 801078c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801078e:	601c      	str	r4, [r3, #0]
 8010790:	9b04      	ldr	r3, [sp, #16]
 8010792:	601d      	str	r5, [r3, #0]
 8010794:	e695      	b.n	80104c2 <__gethex+0x12a>
 8010796:	4299      	cmp	r1, r3
 8010798:	f843 cc04 	str.w	ip, [r3, #-4]
 801079c:	d8d8      	bhi.n	8010750 <__gethex+0x3b8>
 801079e:	68a3      	ldr	r3, [r4, #8]
 80107a0:	459b      	cmp	fp, r3
 80107a2:	db19      	blt.n	80107d8 <__gethex+0x440>
 80107a4:	6861      	ldr	r1, [r4, #4]
 80107a6:	ee18 0a10 	vmov	r0, s16
 80107aa:	3101      	adds	r1, #1
 80107ac:	f000 f98a 	bl	8010ac4 <_Balloc>
 80107b0:	4681      	mov	r9, r0
 80107b2:	b918      	cbnz	r0, 80107bc <__gethex+0x424>
 80107b4:	4b1a      	ldr	r3, [pc, #104]	; (8010820 <__gethex+0x488>)
 80107b6:	4602      	mov	r2, r0
 80107b8:	2184      	movs	r1, #132	; 0x84
 80107ba:	e6a8      	b.n	801050e <__gethex+0x176>
 80107bc:	6922      	ldr	r2, [r4, #16]
 80107be:	3202      	adds	r2, #2
 80107c0:	f104 010c 	add.w	r1, r4, #12
 80107c4:	0092      	lsls	r2, r2, #2
 80107c6:	300c      	adds	r0, #12
 80107c8:	f7fe f8ea 	bl	800e9a0 <memcpy>
 80107cc:	4621      	mov	r1, r4
 80107ce:	ee18 0a10 	vmov	r0, s16
 80107d2:	f000 f9b7 	bl	8010b44 <_Bfree>
 80107d6:	464c      	mov	r4, r9
 80107d8:	6923      	ldr	r3, [r4, #16]
 80107da:	1c5a      	adds	r2, r3, #1
 80107dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80107e0:	6122      	str	r2, [r4, #16]
 80107e2:	2201      	movs	r2, #1
 80107e4:	615a      	str	r2, [r3, #20]
 80107e6:	e7bb      	b.n	8010760 <__gethex+0x3c8>
 80107e8:	6922      	ldr	r2, [r4, #16]
 80107ea:	455a      	cmp	r2, fp
 80107ec:	dd0b      	ble.n	8010806 <__gethex+0x46e>
 80107ee:	2101      	movs	r1, #1
 80107f0:	4620      	mov	r0, r4
 80107f2:	f7ff fd6a 	bl	80102ca <rshift>
 80107f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107fa:	3501      	adds	r5, #1
 80107fc:	42ab      	cmp	r3, r5
 80107fe:	f6ff aed0 	blt.w	80105a2 <__gethex+0x20a>
 8010802:	2701      	movs	r7, #1
 8010804:	e7c0      	b.n	8010788 <__gethex+0x3f0>
 8010806:	f016 061f 	ands.w	r6, r6, #31
 801080a:	d0fa      	beq.n	8010802 <__gethex+0x46a>
 801080c:	4453      	add	r3, sl
 801080e:	f1c6 0620 	rsb	r6, r6, #32
 8010812:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010816:	f000 fa47 	bl	8010ca8 <__hi0bits>
 801081a:	42b0      	cmp	r0, r6
 801081c:	dbe7      	blt.n	80107ee <__gethex+0x456>
 801081e:	e7f0      	b.n	8010802 <__gethex+0x46a>
 8010820:	080125f4 	.word	0x080125f4

08010824 <L_shift>:
 8010824:	f1c2 0208 	rsb	r2, r2, #8
 8010828:	0092      	lsls	r2, r2, #2
 801082a:	b570      	push	{r4, r5, r6, lr}
 801082c:	f1c2 0620 	rsb	r6, r2, #32
 8010830:	6843      	ldr	r3, [r0, #4]
 8010832:	6804      	ldr	r4, [r0, #0]
 8010834:	fa03 f506 	lsl.w	r5, r3, r6
 8010838:	432c      	orrs	r4, r5
 801083a:	40d3      	lsrs	r3, r2
 801083c:	6004      	str	r4, [r0, #0]
 801083e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010842:	4288      	cmp	r0, r1
 8010844:	d3f4      	bcc.n	8010830 <L_shift+0xc>
 8010846:	bd70      	pop	{r4, r5, r6, pc}

08010848 <__match>:
 8010848:	b530      	push	{r4, r5, lr}
 801084a:	6803      	ldr	r3, [r0, #0]
 801084c:	3301      	adds	r3, #1
 801084e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010852:	b914      	cbnz	r4, 801085a <__match+0x12>
 8010854:	6003      	str	r3, [r0, #0]
 8010856:	2001      	movs	r0, #1
 8010858:	bd30      	pop	{r4, r5, pc}
 801085a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801085e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010862:	2d19      	cmp	r5, #25
 8010864:	bf98      	it	ls
 8010866:	3220      	addls	r2, #32
 8010868:	42a2      	cmp	r2, r4
 801086a:	d0f0      	beq.n	801084e <__match+0x6>
 801086c:	2000      	movs	r0, #0
 801086e:	e7f3      	b.n	8010858 <__match+0x10>

08010870 <__hexnan>:
 8010870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010874:	680b      	ldr	r3, [r1, #0]
 8010876:	115e      	asrs	r6, r3, #5
 8010878:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801087c:	f013 031f 	ands.w	r3, r3, #31
 8010880:	b087      	sub	sp, #28
 8010882:	bf18      	it	ne
 8010884:	3604      	addne	r6, #4
 8010886:	2500      	movs	r5, #0
 8010888:	1f37      	subs	r7, r6, #4
 801088a:	4690      	mov	r8, r2
 801088c:	6802      	ldr	r2, [r0, #0]
 801088e:	9301      	str	r3, [sp, #4]
 8010890:	4682      	mov	sl, r0
 8010892:	f846 5c04 	str.w	r5, [r6, #-4]
 8010896:	46b9      	mov	r9, r7
 8010898:	463c      	mov	r4, r7
 801089a:	9502      	str	r5, [sp, #8]
 801089c:	46ab      	mov	fp, r5
 801089e:	7851      	ldrb	r1, [r2, #1]
 80108a0:	1c53      	adds	r3, r2, #1
 80108a2:	9303      	str	r3, [sp, #12]
 80108a4:	b341      	cbz	r1, 80108f8 <__hexnan+0x88>
 80108a6:	4608      	mov	r0, r1
 80108a8:	9205      	str	r2, [sp, #20]
 80108aa:	9104      	str	r1, [sp, #16]
 80108ac:	f7ff fd5f 	bl	801036e <__hexdig_fun>
 80108b0:	2800      	cmp	r0, #0
 80108b2:	d14f      	bne.n	8010954 <__hexnan+0xe4>
 80108b4:	9904      	ldr	r1, [sp, #16]
 80108b6:	9a05      	ldr	r2, [sp, #20]
 80108b8:	2920      	cmp	r1, #32
 80108ba:	d818      	bhi.n	80108ee <__hexnan+0x7e>
 80108bc:	9b02      	ldr	r3, [sp, #8]
 80108be:	459b      	cmp	fp, r3
 80108c0:	dd13      	ble.n	80108ea <__hexnan+0x7a>
 80108c2:	454c      	cmp	r4, r9
 80108c4:	d206      	bcs.n	80108d4 <__hexnan+0x64>
 80108c6:	2d07      	cmp	r5, #7
 80108c8:	dc04      	bgt.n	80108d4 <__hexnan+0x64>
 80108ca:	462a      	mov	r2, r5
 80108cc:	4649      	mov	r1, r9
 80108ce:	4620      	mov	r0, r4
 80108d0:	f7ff ffa8 	bl	8010824 <L_shift>
 80108d4:	4544      	cmp	r4, r8
 80108d6:	d950      	bls.n	801097a <__hexnan+0x10a>
 80108d8:	2300      	movs	r3, #0
 80108da:	f1a4 0904 	sub.w	r9, r4, #4
 80108de:	f844 3c04 	str.w	r3, [r4, #-4]
 80108e2:	f8cd b008 	str.w	fp, [sp, #8]
 80108e6:	464c      	mov	r4, r9
 80108e8:	461d      	mov	r5, r3
 80108ea:	9a03      	ldr	r2, [sp, #12]
 80108ec:	e7d7      	b.n	801089e <__hexnan+0x2e>
 80108ee:	2929      	cmp	r1, #41	; 0x29
 80108f0:	d156      	bne.n	80109a0 <__hexnan+0x130>
 80108f2:	3202      	adds	r2, #2
 80108f4:	f8ca 2000 	str.w	r2, [sl]
 80108f8:	f1bb 0f00 	cmp.w	fp, #0
 80108fc:	d050      	beq.n	80109a0 <__hexnan+0x130>
 80108fe:	454c      	cmp	r4, r9
 8010900:	d206      	bcs.n	8010910 <__hexnan+0xa0>
 8010902:	2d07      	cmp	r5, #7
 8010904:	dc04      	bgt.n	8010910 <__hexnan+0xa0>
 8010906:	462a      	mov	r2, r5
 8010908:	4649      	mov	r1, r9
 801090a:	4620      	mov	r0, r4
 801090c:	f7ff ff8a 	bl	8010824 <L_shift>
 8010910:	4544      	cmp	r4, r8
 8010912:	d934      	bls.n	801097e <__hexnan+0x10e>
 8010914:	f1a8 0204 	sub.w	r2, r8, #4
 8010918:	4623      	mov	r3, r4
 801091a:	f853 1b04 	ldr.w	r1, [r3], #4
 801091e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010922:	429f      	cmp	r7, r3
 8010924:	d2f9      	bcs.n	801091a <__hexnan+0xaa>
 8010926:	1b3b      	subs	r3, r7, r4
 8010928:	f023 0303 	bic.w	r3, r3, #3
 801092c:	3304      	adds	r3, #4
 801092e:	3401      	adds	r4, #1
 8010930:	3e03      	subs	r6, #3
 8010932:	42b4      	cmp	r4, r6
 8010934:	bf88      	it	hi
 8010936:	2304      	movhi	r3, #4
 8010938:	4443      	add	r3, r8
 801093a:	2200      	movs	r2, #0
 801093c:	f843 2b04 	str.w	r2, [r3], #4
 8010940:	429f      	cmp	r7, r3
 8010942:	d2fb      	bcs.n	801093c <__hexnan+0xcc>
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	b91b      	cbnz	r3, 8010950 <__hexnan+0xe0>
 8010948:	4547      	cmp	r7, r8
 801094a:	d127      	bne.n	801099c <__hexnan+0x12c>
 801094c:	2301      	movs	r3, #1
 801094e:	603b      	str	r3, [r7, #0]
 8010950:	2005      	movs	r0, #5
 8010952:	e026      	b.n	80109a2 <__hexnan+0x132>
 8010954:	3501      	adds	r5, #1
 8010956:	2d08      	cmp	r5, #8
 8010958:	f10b 0b01 	add.w	fp, fp, #1
 801095c:	dd06      	ble.n	801096c <__hexnan+0xfc>
 801095e:	4544      	cmp	r4, r8
 8010960:	d9c3      	bls.n	80108ea <__hexnan+0x7a>
 8010962:	2300      	movs	r3, #0
 8010964:	f844 3c04 	str.w	r3, [r4, #-4]
 8010968:	2501      	movs	r5, #1
 801096a:	3c04      	subs	r4, #4
 801096c:	6822      	ldr	r2, [r4, #0]
 801096e:	f000 000f 	and.w	r0, r0, #15
 8010972:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010976:	6022      	str	r2, [r4, #0]
 8010978:	e7b7      	b.n	80108ea <__hexnan+0x7a>
 801097a:	2508      	movs	r5, #8
 801097c:	e7b5      	b.n	80108ea <__hexnan+0x7a>
 801097e:	9b01      	ldr	r3, [sp, #4]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d0df      	beq.n	8010944 <__hexnan+0xd4>
 8010984:	f04f 32ff 	mov.w	r2, #4294967295
 8010988:	f1c3 0320 	rsb	r3, r3, #32
 801098c:	fa22 f303 	lsr.w	r3, r2, r3
 8010990:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010994:	401a      	ands	r2, r3
 8010996:	f846 2c04 	str.w	r2, [r6, #-4]
 801099a:	e7d3      	b.n	8010944 <__hexnan+0xd4>
 801099c:	3f04      	subs	r7, #4
 801099e:	e7d1      	b.n	8010944 <__hexnan+0xd4>
 80109a0:	2004      	movs	r0, #4
 80109a2:	b007      	add	sp, #28
 80109a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080109a8 <__retarget_lock_init_recursive>:
 80109a8:	4770      	bx	lr

080109aa <__retarget_lock_acquire_recursive>:
 80109aa:	4770      	bx	lr

080109ac <__retarget_lock_release_recursive>:
 80109ac:	4770      	bx	lr
	...

080109b0 <_lseek_r>:
 80109b0:	b538      	push	{r3, r4, r5, lr}
 80109b2:	4d07      	ldr	r5, [pc, #28]	; (80109d0 <_lseek_r+0x20>)
 80109b4:	4604      	mov	r4, r0
 80109b6:	4608      	mov	r0, r1
 80109b8:	4611      	mov	r1, r2
 80109ba:	2200      	movs	r2, #0
 80109bc:	602a      	str	r2, [r5, #0]
 80109be:	461a      	mov	r2, r3
 80109c0:	f7f2 fe36 	bl	8003630 <_lseek>
 80109c4:	1c43      	adds	r3, r0, #1
 80109c6:	d102      	bne.n	80109ce <_lseek_r+0x1e>
 80109c8:	682b      	ldr	r3, [r5, #0]
 80109ca:	b103      	cbz	r3, 80109ce <_lseek_r+0x1e>
 80109cc:	6023      	str	r3, [r4, #0]
 80109ce:	bd38      	pop	{r3, r4, r5, pc}
 80109d0:	200028a4 	.word	0x200028a4

080109d4 <__swhatbuf_r>:
 80109d4:	b570      	push	{r4, r5, r6, lr}
 80109d6:	460e      	mov	r6, r1
 80109d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109dc:	2900      	cmp	r1, #0
 80109de:	b096      	sub	sp, #88	; 0x58
 80109e0:	4614      	mov	r4, r2
 80109e2:	461d      	mov	r5, r3
 80109e4:	da08      	bge.n	80109f8 <__swhatbuf_r+0x24>
 80109e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80109ea:	2200      	movs	r2, #0
 80109ec:	602a      	str	r2, [r5, #0]
 80109ee:	061a      	lsls	r2, r3, #24
 80109f0:	d410      	bmi.n	8010a14 <__swhatbuf_r+0x40>
 80109f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109f6:	e00e      	b.n	8010a16 <__swhatbuf_r+0x42>
 80109f8:	466a      	mov	r2, sp
 80109fa:	f001 f973 	bl	8011ce4 <_fstat_r>
 80109fe:	2800      	cmp	r0, #0
 8010a00:	dbf1      	blt.n	80109e6 <__swhatbuf_r+0x12>
 8010a02:	9a01      	ldr	r2, [sp, #4]
 8010a04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a0c:	425a      	negs	r2, r3
 8010a0e:	415a      	adcs	r2, r3
 8010a10:	602a      	str	r2, [r5, #0]
 8010a12:	e7ee      	b.n	80109f2 <__swhatbuf_r+0x1e>
 8010a14:	2340      	movs	r3, #64	; 0x40
 8010a16:	2000      	movs	r0, #0
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	b016      	add	sp, #88	; 0x58
 8010a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010a20 <__smakebuf_r>:
 8010a20:	898b      	ldrh	r3, [r1, #12]
 8010a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010a24:	079d      	lsls	r5, r3, #30
 8010a26:	4606      	mov	r6, r0
 8010a28:	460c      	mov	r4, r1
 8010a2a:	d507      	bpl.n	8010a3c <__smakebuf_r+0x1c>
 8010a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	6123      	str	r3, [r4, #16]
 8010a34:	2301      	movs	r3, #1
 8010a36:	6163      	str	r3, [r4, #20]
 8010a38:	b002      	add	sp, #8
 8010a3a:	bd70      	pop	{r4, r5, r6, pc}
 8010a3c:	ab01      	add	r3, sp, #4
 8010a3e:	466a      	mov	r2, sp
 8010a40:	f7ff ffc8 	bl	80109d4 <__swhatbuf_r>
 8010a44:	9900      	ldr	r1, [sp, #0]
 8010a46:	4605      	mov	r5, r0
 8010a48:	4630      	mov	r0, r6
 8010a4a:	f000 fd7f 	bl	801154c <_malloc_r>
 8010a4e:	b948      	cbnz	r0, 8010a64 <__smakebuf_r+0x44>
 8010a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a54:	059a      	lsls	r2, r3, #22
 8010a56:	d4ef      	bmi.n	8010a38 <__smakebuf_r+0x18>
 8010a58:	f023 0303 	bic.w	r3, r3, #3
 8010a5c:	f043 0302 	orr.w	r3, r3, #2
 8010a60:	81a3      	strh	r3, [r4, #12]
 8010a62:	e7e3      	b.n	8010a2c <__smakebuf_r+0xc>
 8010a64:	4b0d      	ldr	r3, [pc, #52]	; (8010a9c <__smakebuf_r+0x7c>)
 8010a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8010a68:	89a3      	ldrh	r3, [r4, #12]
 8010a6a:	6020      	str	r0, [r4, #0]
 8010a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a70:	81a3      	strh	r3, [r4, #12]
 8010a72:	9b00      	ldr	r3, [sp, #0]
 8010a74:	6163      	str	r3, [r4, #20]
 8010a76:	9b01      	ldr	r3, [sp, #4]
 8010a78:	6120      	str	r0, [r4, #16]
 8010a7a:	b15b      	cbz	r3, 8010a94 <__smakebuf_r+0x74>
 8010a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a80:	4630      	mov	r0, r6
 8010a82:	f001 f941 	bl	8011d08 <_isatty_r>
 8010a86:	b128      	cbz	r0, 8010a94 <__smakebuf_r+0x74>
 8010a88:	89a3      	ldrh	r3, [r4, #12]
 8010a8a:	f023 0303 	bic.w	r3, r3, #3
 8010a8e:	f043 0301 	orr.w	r3, r3, #1
 8010a92:	81a3      	strh	r3, [r4, #12]
 8010a94:	89a0      	ldrh	r0, [r4, #12]
 8010a96:	4305      	orrs	r5, r0
 8010a98:	81a5      	strh	r5, [r4, #12]
 8010a9a:	e7cd      	b.n	8010a38 <__smakebuf_r+0x18>
 8010a9c:	08010129 	.word	0x08010129

08010aa0 <__ascii_mbtowc>:
 8010aa0:	b082      	sub	sp, #8
 8010aa2:	b901      	cbnz	r1, 8010aa6 <__ascii_mbtowc+0x6>
 8010aa4:	a901      	add	r1, sp, #4
 8010aa6:	b142      	cbz	r2, 8010aba <__ascii_mbtowc+0x1a>
 8010aa8:	b14b      	cbz	r3, 8010abe <__ascii_mbtowc+0x1e>
 8010aaa:	7813      	ldrb	r3, [r2, #0]
 8010aac:	600b      	str	r3, [r1, #0]
 8010aae:	7812      	ldrb	r2, [r2, #0]
 8010ab0:	1e10      	subs	r0, r2, #0
 8010ab2:	bf18      	it	ne
 8010ab4:	2001      	movne	r0, #1
 8010ab6:	b002      	add	sp, #8
 8010ab8:	4770      	bx	lr
 8010aba:	4610      	mov	r0, r2
 8010abc:	e7fb      	b.n	8010ab6 <__ascii_mbtowc+0x16>
 8010abe:	f06f 0001 	mvn.w	r0, #1
 8010ac2:	e7f8      	b.n	8010ab6 <__ascii_mbtowc+0x16>

08010ac4 <_Balloc>:
 8010ac4:	b570      	push	{r4, r5, r6, lr}
 8010ac6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010ac8:	4604      	mov	r4, r0
 8010aca:	460d      	mov	r5, r1
 8010acc:	b976      	cbnz	r6, 8010aec <_Balloc+0x28>
 8010ace:	2010      	movs	r0, #16
 8010ad0:	f001 f92a 	bl	8011d28 <malloc>
 8010ad4:	4602      	mov	r2, r0
 8010ad6:	6260      	str	r0, [r4, #36]	; 0x24
 8010ad8:	b920      	cbnz	r0, 8010ae4 <_Balloc+0x20>
 8010ada:	4b18      	ldr	r3, [pc, #96]	; (8010b3c <_Balloc+0x78>)
 8010adc:	4818      	ldr	r0, [pc, #96]	; (8010b40 <_Balloc+0x7c>)
 8010ade:	2166      	movs	r1, #102	; 0x66
 8010ae0:	f001 f8d0 	bl	8011c84 <__assert_func>
 8010ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ae8:	6006      	str	r6, [r0, #0]
 8010aea:	60c6      	str	r6, [r0, #12]
 8010aec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010aee:	68f3      	ldr	r3, [r6, #12]
 8010af0:	b183      	cbz	r3, 8010b14 <_Balloc+0x50>
 8010af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010af4:	68db      	ldr	r3, [r3, #12]
 8010af6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010afa:	b9b8      	cbnz	r0, 8010b2c <_Balloc+0x68>
 8010afc:	2101      	movs	r1, #1
 8010afe:	fa01 f605 	lsl.w	r6, r1, r5
 8010b02:	1d72      	adds	r2, r6, #5
 8010b04:	0092      	lsls	r2, r2, #2
 8010b06:	4620      	mov	r0, r4
 8010b08:	f000 fc9d 	bl	8011446 <_calloc_r>
 8010b0c:	b160      	cbz	r0, 8010b28 <_Balloc+0x64>
 8010b0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010b12:	e00e      	b.n	8010b32 <_Balloc+0x6e>
 8010b14:	2221      	movs	r2, #33	; 0x21
 8010b16:	2104      	movs	r1, #4
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f000 fc94 	bl	8011446 <_calloc_r>
 8010b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b20:	60f0      	str	r0, [r6, #12]
 8010b22:	68db      	ldr	r3, [r3, #12]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1e4      	bne.n	8010af2 <_Balloc+0x2e>
 8010b28:	2000      	movs	r0, #0
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
 8010b2c:	6802      	ldr	r2, [r0, #0]
 8010b2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010b32:	2300      	movs	r3, #0
 8010b34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010b38:	e7f7      	b.n	8010b2a <_Balloc+0x66>
 8010b3a:	bf00      	nop
 8010b3c:	08012680 	.word	0x08012680
 8010b40:	08012697 	.word	0x08012697

08010b44 <_Bfree>:
 8010b44:	b570      	push	{r4, r5, r6, lr}
 8010b46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010b48:	4605      	mov	r5, r0
 8010b4a:	460c      	mov	r4, r1
 8010b4c:	b976      	cbnz	r6, 8010b6c <_Bfree+0x28>
 8010b4e:	2010      	movs	r0, #16
 8010b50:	f001 f8ea 	bl	8011d28 <malloc>
 8010b54:	4602      	mov	r2, r0
 8010b56:	6268      	str	r0, [r5, #36]	; 0x24
 8010b58:	b920      	cbnz	r0, 8010b64 <_Bfree+0x20>
 8010b5a:	4b09      	ldr	r3, [pc, #36]	; (8010b80 <_Bfree+0x3c>)
 8010b5c:	4809      	ldr	r0, [pc, #36]	; (8010b84 <_Bfree+0x40>)
 8010b5e:	218a      	movs	r1, #138	; 0x8a
 8010b60:	f001 f890 	bl	8011c84 <__assert_func>
 8010b64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010b68:	6006      	str	r6, [r0, #0]
 8010b6a:	60c6      	str	r6, [r0, #12]
 8010b6c:	b13c      	cbz	r4, 8010b7e <_Bfree+0x3a>
 8010b6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010b70:	6862      	ldr	r2, [r4, #4]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010b78:	6021      	str	r1, [r4, #0]
 8010b7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010b7e:	bd70      	pop	{r4, r5, r6, pc}
 8010b80:	08012680 	.word	0x08012680
 8010b84:	08012697 	.word	0x08012697

08010b88 <__multadd>:
 8010b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8c:	690d      	ldr	r5, [r1, #16]
 8010b8e:	4607      	mov	r7, r0
 8010b90:	460c      	mov	r4, r1
 8010b92:	461e      	mov	r6, r3
 8010b94:	f101 0c14 	add.w	ip, r1, #20
 8010b98:	2000      	movs	r0, #0
 8010b9a:	f8dc 3000 	ldr.w	r3, [ip]
 8010b9e:	b299      	uxth	r1, r3
 8010ba0:	fb02 6101 	mla	r1, r2, r1, r6
 8010ba4:	0c1e      	lsrs	r6, r3, #16
 8010ba6:	0c0b      	lsrs	r3, r1, #16
 8010ba8:	fb02 3306 	mla	r3, r2, r6, r3
 8010bac:	b289      	uxth	r1, r1
 8010bae:	3001      	adds	r0, #1
 8010bb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010bb4:	4285      	cmp	r5, r0
 8010bb6:	f84c 1b04 	str.w	r1, [ip], #4
 8010bba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010bbe:	dcec      	bgt.n	8010b9a <__multadd+0x12>
 8010bc0:	b30e      	cbz	r6, 8010c06 <__multadd+0x7e>
 8010bc2:	68a3      	ldr	r3, [r4, #8]
 8010bc4:	42ab      	cmp	r3, r5
 8010bc6:	dc19      	bgt.n	8010bfc <__multadd+0x74>
 8010bc8:	6861      	ldr	r1, [r4, #4]
 8010bca:	4638      	mov	r0, r7
 8010bcc:	3101      	adds	r1, #1
 8010bce:	f7ff ff79 	bl	8010ac4 <_Balloc>
 8010bd2:	4680      	mov	r8, r0
 8010bd4:	b928      	cbnz	r0, 8010be2 <__multadd+0x5a>
 8010bd6:	4602      	mov	r2, r0
 8010bd8:	4b0c      	ldr	r3, [pc, #48]	; (8010c0c <__multadd+0x84>)
 8010bda:	480d      	ldr	r0, [pc, #52]	; (8010c10 <__multadd+0x88>)
 8010bdc:	21b5      	movs	r1, #181	; 0xb5
 8010bde:	f001 f851 	bl	8011c84 <__assert_func>
 8010be2:	6922      	ldr	r2, [r4, #16]
 8010be4:	3202      	adds	r2, #2
 8010be6:	f104 010c 	add.w	r1, r4, #12
 8010bea:	0092      	lsls	r2, r2, #2
 8010bec:	300c      	adds	r0, #12
 8010bee:	f7fd fed7 	bl	800e9a0 <memcpy>
 8010bf2:	4621      	mov	r1, r4
 8010bf4:	4638      	mov	r0, r7
 8010bf6:	f7ff ffa5 	bl	8010b44 <_Bfree>
 8010bfa:	4644      	mov	r4, r8
 8010bfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010c00:	3501      	adds	r5, #1
 8010c02:	615e      	str	r6, [r3, #20]
 8010c04:	6125      	str	r5, [r4, #16]
 8010c06:	4620      	mov	r0, r4
 8010c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c0c:	080125f4 	.word	0x080125f4
 8010c10:	08012697 	.word	0x08012697

08010c14 <__s2b>:
 8010c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c18:	460c      	mov	r4, r1
 8010c1a:	4615      	mov	r5, r2
 8010c1c:	461f      	mov	r7, r3
 8010c1e:	2209      	movs	r2, #9
 8010c20:	3308      	adds	r3, #8
 8010c22:	4606      	mov	r6, r0
 8010c24:	fb93 f3f2 	sdiv	r3, r3, r2
 8010c28:	2100      	movs	r1, #0
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	db09      	blt.n	8010c44 <__s2b+0x30>
 8010c30:	4630      	mov	r0, r6
 8010c32:	f7ff ff47 	bl	8010ac4 <_Balloc>
 8010c36:	b940      	cbnz	r0, 8010c4a <__s2b+0x36>
 8010c38:	4602      	mov	r2, r0
 8010c3a:	4b19      	ldr	r3, [pc, #100]	; (8010ca0 <__s2b+0x8c>)
 8010c3c:	4819      	ldr	r0, [pc, #100]	; (8010ca4 <__s2b+0x90>)
 8010c3e:	21ce      	movs	r1, #206	; 0xce
 8010c40:	f001 f820 	bl	8011c84 <__assert_func>
 8010c44:	0052      	lsls	r2, r2, #1
 8010c46:	3101      	adds	r1, #1
 8010c48:	e7f0      	b.n	8010c2c <__s2b+0x18>
 8010c4a:	9b08      	ldr	r3, [sp, #32]
 8010c4c:	6143      	str	r3, [r0, #20]
 8010c4e:	2d09      	cmp	r5, #9
 8010c50:	f04f 0301 	mov.w	r3, #1
 8010c54:	6103      	str	r3, [r0, #16]
 8010c56:	dd16      	ble.n	8010c86 <__s2b+0x72>
 8010c58:	f104 0909 	add.w	r9, r4, #9
 8010c5c:	46c8      	mov	r8, r9
 8010c5e:	442c      	add	r4, r5
 8010c60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010c64:	4601      	mov	r1, r0
 8010c66:	3b30      	subs	r3, #48	; 0x30
 8010c68:	220a      	movs	r2, #10
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f7ff ff8c 	bl	8010b88 <__multadd>
 8010c70:	45a0      	cmp	r8, r4
 8010c72:	d1f5      	bne.n	8010c60 <__s2b+0x4c>
 8010c74:	f1a5 0408 	sub.w	r4, r5, #8
 8010c78:	444c      	add	r4, r9
 8010c7a:	1b2d      	subs	r5, r5, r4
 8010c7c:	1963      	adds	r3, r4, r5
 8010c7e:	42bb      	cmp	r3, r7
 8010c80:	db04      	blt.n	8010c8c <__s2b+0x78>
 8010c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c86:	340a      	adds	r4, #10
 8010c88:	2509      	movs	r5, #9
 8010c8a:	e7f6      	b.n	8010c7a <__s2b+0x66>
 8010c8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010c90:	4601      	mov	r1, r0
 8010c92:	3b30      	subs	r3, #48	; 0x30
 8010c94:	220a      	movs	r2, #10
 8010c96:	4630      	mov	r0, r6
 8010c98:	f7ff ff76 	bl	8010b88 <__multadd>
 8010c9c:	e7ee      	b.n	8010c7c <__s2b+0x68>
 8010c9e:	bf00      	nop
 8010ca0:	080125f4 	.word	0x080125f4
 8010ca4:	08012697 	.word	0x08012697

08010ca8 <__hi0bits>:
 8010ca8:	0c03      	lsrs	r3, r0, #16
 8010caa:	041b      	lsls	r3, r3, #16
 8010cac:	b9d3      	cbnz	r3, 8010ce4 <__hi0bits+0x3c>
 8010cae:	0400      	lsls	r0, r0, #16
 8010cb0:	2310      	movs	r3, #16
 8010cb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010cb6:	bf04      	itt	eq
 8010cb8:	0200      	lsleq	r0, r0, #8
 8010cba:	3308      	addeq	r3, #8
 8010cbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010cc0:	bf04      	itt	eq
 8010cc2:	0100      	lsleq	r0, r0, #4
 8010cc4:	3304      	addeq	r3, #4
 8010cc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010cca:	bf04      	itt	eq
 8010ccc:	0080      	lsleq	r0, r0, #2
 8010cce:	3302      	addeq	r3, #2
 8010cd0:	2800      	cmp	r0, #0
 8010cd2:	db05      	blt.n	8010ce0 <__hi0bits+0x38>
 8010cd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010cd8:	f103 0301 	add.w	r3, r3, #1
 8010cdc:	bf08      	it	eq
 8010cde:	2320      	moveq	r3, #32
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	4770      	bx	lr
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	e7e4      	b.n	8010cb2 <__hi0bits+0xa>

08010ce8 <__lo0bits>:
 8010ce8:	6803      	ldr	r3, [r0, #0]
 8010cea:	f013 0207 	ands.w	r2, r3, #7
 8010cee:	4601      	mov	r1, r0
 8010cf0:	d00b      	beq.n	8010d0a <__lo0bits+0x22>
 8010cf2:	07da      	lsls	r2, r3, #31
 8010cf4:	d423      	bmi.n	8010d3e <__lo0bits+0x56>
 8010cf6:	0798      	lsls	r0, r3, #30
 8010cf8:	bf49      	itett	mi
 8010cfa:	085b      	lsrmi	r3, r3, #1
 8010cfc:	089b      	lsrpl	r3, r3, #2
 8010cfe:	2001      	movmi	r0, #1
 8010d00:	600b      	strmi	r3, [r1, #0]
 8010d02:	bf5c      	itt	pl
 8010d04:	600b      	strpl	r3, [r1, #0]
 8010d06:	2002      	movpl	r0, #2
 8010d08:	4770      	bx	lr
 8010d0a:	b298      	uxth	r0, r3
 8010d0c:	b9a8      	cbnz	r0, 8010d3a <__lo0bits+0x52>
 8010d0e:	0c1b      	lsrs	r3, r3, #16
 8010d10:	2010      	movs	r0, #16
 8010d12:	b2da      	uxtb	r2, r3
 8010d14:	b90a      	cbnz	r2, 8010d1a <__lo0bits+0x32>
 8010d16:	3008      	adds	r0, #8
 8010d18:	0a1b      	lsrs	r3, r3, #8
 8010d1a:	071a      	lsls	r2, r3, #28
 8010d1c:	bf04      	itt	eq
 8010d1e:	091b      	lsreq	r3, r3, #4
 8010d20:	3004      	addeq	r0, #4
 8010d22:	079a      	lsls	r2, r3, #30
 8010d24:	bf04      	itt	eq
 8010d26:	089b      	lsreq	r3, r3, #2
 8010d28:	3002      	addeq	r0, #2
 8010d2a:	07da      	lsls	r2, r3, #31
 8010d2c:	d403      	bmi.n	8010d36 <__lo0bits+0x4e>
 8010d2e:	085b      	lsrs	r3, r3, #1
 8010d30:	f100 0001 	add.w	r0, r0, #1
 8010d34:	d005      	beq.n	8010d42 <__lo0bits+0x5a>
 8010d36:	600b      	str	r3, [r1, #0]
 8010d38:	4770      	bx	lr
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	e7e9      	b.n	8010d12 <__lo0bits+0x2a>
 8010d3e:	2000      	movs	r0, #0
 8010d40:	4770      	bx	lr
 8010d42:	2020      	movs	r0, #32
 8010d44:	4770      	bx	lr
	...

08010d48 <__i2b>:
 8010d48:	b510      	push	{r4, lr}
 8010d4a:	460c      	mov	r4, r1
 8010d4c:	2101      	movs	r1, #1
 8010d4e:	f7ff feb9 	bl	8010ac4 <_Balloc>
 8010d52:	4602      	mov	r2, r0
 8010d54:	b928      	cbnz	r0, 8010d62 <__i2b+0x1a>
 8010d56:	4b05      	ldr	r3, [pc, #20]	; (8010d6c <__i2b+0x24>)
 8010d58:	4805      	ldr	r0, [pc, #20]	; (8010d70 <__i2b+0x28>)
 8010d5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010d5e:	f000 ff91 	bl	8011c84 <__assert_func>
 8010d62:	2301      	movs	r3, #1
 8010d64:	6144      	str	r4, [r0, #20]
 8010d66:	6103      	str	r3, [r0, #16]
 8010d68:	bd10      	pop	{r4, pc}
 8010d6a:	bf00      	nop
 8010d6c:	080125f4 	.word	0x080125f4
 8010d70:	08012697 	.word	0x08012697

08010d74 <__multiply>:
 8010d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d78:	4691      	mov	r9, r2
 8010d7a:	690a      	ldr	r2, [r1, #16]
 8010d7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d80:	429a      	cmp	r2, r3
 8010d82:	bfb8      	it	lt
 8010d84:	460b      	movlt	r3, r1
 8010d86:	460c      	mov	r4, r1
 8010d88:	bfbc      	itt	lt
 8010d8a:	464c      	movlt	r4, r9
 8010d8c:	4699      	movlt	r9, r3
 8010d8e:	6927      	ldr	r7, [r4, #16]
 8010d90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010d94:	68a3      	ldr	r3, [r4, #8]
 8010d96:	6861      	ldr	r1, [r4, #4]
 8010d98:	eb07 060a 	add.w	r6, r7, sl
 8010d9c:	42b3      	cmp	r3, r6
 8010d9e:	b085      	sub	sp, #20
 8010da0:	bfb8      	it	lt
 8010da2:	3101      	addlt	r1, #1
 8010da4:	f7ff fe8e 	bl	8010ac4 <_Balloc>
 8010da8:	b930      	cbnz	r0, 8010db8 <__multiply+0x44>
 8010daa:	4602      	mov	r2, r0
 8010dac:	4b44      	ldr	r3, [pc, #272]	; (8010ec0 <__multiply+0x14c>)
 8010dae:	4845      	ldr	r0, [pc, #276]	; (8010ec4 <__multiply+0x150>)
 8010db0:	f240 115d 	movw	r1, #349	; 0x15d
 8010db4:	f000 ff66 	bl	8011c84 <__assert_func>
 8010db8:	f100 0514 	add.w	r5, r0, #20
 8010dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010dc0:	462b      	mov	r3, r5
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	4543      	cmp	r3, r8
 8010dc6:	d321      	bcc.n	8010e0c <__multiply+0x98>
 8010dc8:	f104 0314 	add.w	r3, r4, #20
 8010dcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010dd0:	f109 0314 	add.w	r3, r9, #20
 8010dd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010dd8:	9202      	str	r2, [sp, #8]
 8010dda:	1b3a      	subs	r2, r7, r4
 8010ddc:	3a15      	subs	r2, #21
 8010dde:	f022 0203 	bic.w	r2, r2, #3
 8010de2:	3204      	adds	r2, #4
 8010de4:	f104 0115 	add.w	r1, r4, #21
 8010de8:	428f      	cmp	r7, r1
 8010dea:	bf38      	it	cc
 8010dec:	2204      	movcc	r2, #4
 8010dee:	9201      	str	r2, [sp, #4]
 8010df0:	9a02      	ldr	r2, [sp, #8]
 8010df2:	9303      	str	r3, [sp, #12]
 8010df4:	429a      	cmp	r2, r3
 8010df6:	d80c      	bhi.n	8010e12 <__multiply+0x9e>
 8010df8:	2e00      	cmp	r6, #0
 8010dfa:	dd03      	ble.n	8010e04 <__multiply+0x90>
 8010dfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d05a      	beq.n	8010eba <__multiply+0x146>
 8010e04:	6106      	str	r6, [r0, #16]
 8010e06:	b005      	add	sp, #20
 8010e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e0c:	f843 2b04 	str.w	r2, [r3], #4
 8010e10:	e7d8      	b.n	8010dc4 <__multiply+0x50>
 8010e12:	f8b3 a000 	ldrh.w	sl, [r3]
 8010e16:	f1ba 0f00 	cmp.w	sl, #0
 8010e1a:	d024      	beq.n	8010e66 <__multiply+0xf2>
 8010e1c:	f104 0e14 	add.w	lr, r4, #20
 8010e20:	46a9      	mov	r9, r5
 8010e22:	f04f 0c00 	mov.w	ip, #0
 8010e26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010e2a:	f8d9 1000 	ldr.w	r1, [r9]
 8010e2e:	fa1f fb82 	uxth.w	fp, r2
 8010e32:	b289      	uxth	r1, r1
 8010e34:	fb0a 110b 	mla	r1, sl, fp, r1
 8010e38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8010e40:	4461      	add	r1, ip
 8010e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e46:	fb0a c20b 	mla	r2, sl, fp, ip
 8010e4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010e4e:	b289      	uxth	r1, r1
 8010e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010e54:	4577      	cmp	r7, lr
 8010e56:	f849 1b04 	str.w	r1, [r9], #4
 8010e5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010e5e:	d8e2      	bhi.n	8010e26 <__multiply+0xb2>
 8010e60:	9a01      	ldr	r2, [sp, #4]
 8010e62:	f845 c002 	str.w	ip, [r5, r2]
 8010e66:	9a03      	ldr	r2, [sp, #12]
 8010e68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010e6c:	3304      	adds	r3, #4
 8010e6e:	f1b9 0f00 	cmp.w	r9, #0
 8010e72:	d020      	beq.n	8010eb6 <__multiply+0x142>
 8010e74:	6829      	ldr	r1, [r5, #0]
 8010e76:	f104 0c14 	add.w	ip, r4, #20
 8010e7a:	46ae      	mov	lr, r5
 8010e7c:	f04f 0a00 	mov.w	sl, #0
 8010e80:	f8bc b000 	ldrh.w	fp, [ip]
 8010e84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010e88:	fb09 220b 	mla	r2, r9, fp, r2
 8010e8c:	4492      	add	sl, r2
 8010e8e:	b289      	uxth	r1, r1
 8010e90:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8010e94:	f84e 1b04 	str.w	r1, [lr], #4
 8010e98:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010e9c:	f8be 1000 	ldrh.w	r1, [lr]
 8010ea0:	0c12      	lsrs	r2, r2, #16
 8010ea2:	fb09 1102 	mla	r1, r9, r2, r1
 8010ea6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010eaa:	4567      	cmp	r7, ip
 8010eac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010eb0:	d8e6      	bhi.n	8010e80 <__multiply+0x10c>
 8010eb2:	9a01      	ldr	r2, [sp, #4]
 8010eb4:	50a9      	str	r1, [r5, r2]
 8010eb6:	3504      	adds	r5, #4
 8010eb8:	e79a      	b.n	8010df0 <__multiply+0x7c>
 8010eba:	3e01      	subs	r6, #1
 8010ebc:	e79c      	b.n	8010df8 <__multiply+0x84>
 8010ebe:	bf00      	nop
 8010ec0:	080125f4 	.word	0x080125f4
 8010ec4:	08012697 	.word	0x08012697

08010ec8 <__pow5mult>:
 8010ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ecc:	4615      	mov	r5, r2
 8010ece:	f012 0203 	ands.w	r2, r2, #3
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	460f      	mov	r7, r1
 8010ed6:	d007      	beq.n	8010ee8 <__pow5mult+0x20>
 8010ed8:	4c25      	ldr	r4, [pc, #148]	; (8010f70 <__pow5mult+0xa8>)
 8010eda:	3a01      	subs	r2, #1
 8010edc:	2300      	movs	r3, #0
 8010ede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010ee2:	f7ff fe51 	bl	8010b88 <__multadd>
 8010ee6:	4607      	mov	r7, r0
 8010ee8:	10ad      	asrs	r5, r5, #2
 8010eea:	d03d      	beq.n	8010f68 <__pow5mult+0xa0>
 8010eec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010eee:	b97c      	cbnz	r4, 8010f10 <__pow5mult+0x48>
 8010ef0:	2010      	movs	r0, #16
 8010ef2:	f000 ff19 	bl	8011d28 <malloc>
 8010ef6:	4602      	mov	r2, r0
 8010ef8:	6270      	str	r0, [r6, #36]	; 0x24
 8010efa:	b928      	cbnz	r0, 8010f08 <__pow5mult+0x40>
 8010efc:	4b1d      	ldr	r3, [pc, #116]	; (8010f74 <__pow5mult+0xac>)
 8010efe:	481e      	ldr	r0, [pc, #120]	; (8010f78 <__pow5mult+0xb0>)
 8010f00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8010f04:	f000 febe 	bl	8011c84 <__assert_func>
 8010f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f0c:	6004      	str	r4, [r0, #0]
 8010f0e:	60c4      	str	r4, [r0, #12]
 8010f10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f18:	b94c      	cbnz	r4, 8010f2e <__pow5mult+0x66>
 8010f1a:	f240 2171 	movw	r1, #625	; 0x271
 8010f1e:	4630      	mov	r0, r6
 8010f20:	f7ff ff12 	bl	8010d48 <__i2b>
 8010f24:	2300      	movs	r3, #0
 8010f26:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f2a:	4604      	mov	r4, r0
 8010f2c:	6003      	str	r3, [r0, #0]
 8010f2e:	f04f 0900 	mov.w	r9, #0
 8010f32:	07eb      	lsls	r3, r5, #31
 8010f34:	d50a      	bpl.n	8010f4c <__pow5mult+0x84>
 8010f36:	4639      	mov	r1, r7
 8010f38:	4622      	mov	r2, r4
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	f7ff ff1a 	bl	8010d74 <__multiply>
 8010f40:	4639      	mov	r1, r7
 8010f42:	4680      	mov	r8, r0
 8010f44:	4630      	mov	r0, r6
 8010f46:	f7ff fdfd 	bl	8010b44 <_Bfree>
 8010f4a:	4647      	mov	r7, r8
 8010f4c:	106d      	asrs	r5, r5, #1
 8010f4e:	d00b      	beq.n	8010f68 <__pow5mult+0xa0>
 8010f50:	6820      	ldr	r0, [r4, #0]
 8010f52:	b938      	cbnz	r0, 8010f64 <__pow5mult+0x9c>
 8010f54:	4622      	mov	r2, r4
 8010f56:	4621      	mov	r1, r4
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f7ff ff0b 	bl	8010d74 <__multiply>
 8010f5e:	6020      	str	r0, [r4, #0]
 8010f60:	f8c0 9000 	str.w	r9, [r0]
 8010f64:	4604      	mov	r4, r0
 8010f66:	e7e4      	b.n	8010f32 <__pow5mult+0x6a>
 8010f68:	4638      	mov	r0, r7
 8010f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f6e:	bf00      	nop
 8010f70:	080127e8 	.word	0x080127e8
 8010f74:	08012680 	.word	0x08012680
 8010f78:	08012697 	.word	0x08012697

08010f7c <__lshift>:
 8010f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f80:	460c      	mov	r4, r1
 8010f82:	6849      	ldr	r1, [r1, #4]
 8010f84:	6923      	ldr	r3, [r4, #16]
 8010f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010f8a:	68a3      	ldr	r3, [r4, #8]
 8010f8c:	4607      	mov	r7, r0
 8010f8e:	4691      	mov	r9, r2
 8010f90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010f94:	f108 0601 	add.w	r6, r8, #1
 8010f98:	42b3      	cmp	r3, r6
 8010f9a:	db0b      	blt.n	8010fb4 <__lshift+0x38>
 8010f9c:	4638      	mov	r0, r7
 8010f9e:	f7ff fd91 	bl	8010ac4 <_Balloc>
 8010fa2:	4605      	mov	r5, r0
 8010fa4:	b948      	cbnz	r0, 8010fba <__lshift+0x3e>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	4b2a      	ldr	r3, [pc, #168]	; (8011054 <__lshift+0xd8>)
 8010faa:	482b      	ldr	r0, [pc, #172]	; (8011058 <__lshift+0xdc>)
 8010fac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010fb0:	f000 fe68 	bl	8011c84 <__assert_func>
 8010fb4:	3101      	adds	r1, #1
 8010fb6:	005b      	lsls	r3, r3, #1
 8010fb8:	e7ee      	b.n	8010f98 <__lshift+0x1c>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f100 0114 	add.w	r1, r0, #20
 8010fc0:	f100 0210 	add.w	r2, r0, #16
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	4553      	cmp	r3, sl
 8010fc8:	db37      	blt.n	801103a <__lshift+0xbe>
 8010fca:	6920      	ldr	r0, [r4, #16]
 8010fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010fd0:	f104 0314 	add.w	r3, r4, #20
 8010fd4:	f019 091f 	ands.w	r9, r9, #31
 8010fd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010fdc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010fe0:	d02f      	beq.n	8011042 <__lshift+0xc6>
 8010fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8010fe6:	468a      	mov	sl, r1
 8010fe8:	f04f 0c00 	mov.w	ip, #0
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	fa02 f209 	lsl.w	r2, r2, r9
 8010ff2:	ea42 020c 	orr.w	r2, r2, ip
 8010ff6:	f84a 2b04 	str.w	r2, [sl], #4
 8010ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ffe:	4298      	cmp	r0, r3
 8011000:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011004:	d8f2      	bhi.n	8010fec <__lshift+0x70>
 8011006:	1b03      	subs	r3, r0, r4
 8011008:	3b15      	subs	r3, #21
 801100a:	f023 0303 	bic.w	r3, r3, #3
 801100e:	3304      	adds	r3, #4
 8011010:	f104 0215 	add.w	r2, r4, #21
 8011014:	4290      	cmp	r0, r2
 8011016:	bf38      	it	cc
 8011018:	2304      	movcc	r3, #4
 801101a:	f841 c003 	str.w	ip, [r1, r3]
 801101e:	f1bc 0f00 	cmp.w	ip, #0
 8011022:	d001      	beq.n	8011028 <__lshift+0xac>
 8011024:	f108 0602 	add.w	r6, r8, #2
 8011028:	3e01      	subs	r6, #1
 801102a:	4638      	mov	r0, r7
 801102c:	612e      	str	r6, [r5, #16]
 801102e:	4621      	mov	r1, r4
 8011030:	f7ff fd88 	bl	8010b44 <_Bfree>
 8011034:	4628      	mov	r0, r5
 8011036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801103a:	f842 0f04 	str.w	r0, [r2, #4]!
 801103e:	3301      	adds	r3, #1
 8011040:	e7c1      	b.n	8010fc6 <__lshift+0x4a>
 8011042:	3904      	subs	r1, #4
 8011044:	f853 2b04 	ldr.w	r2, [r3], #4
 8011048:	f841 2f04 	str.w	r2, [r1, #4]!
 801104c:	4298      	cmp	r0, r3
 801104e:	d8f9      	bhi.n	8011044 <__lshift+0xc8>
 8011050:	e7ea      	b.n	8011028 <__lshift+0xac>
 8011052:	bf00      	nop
 8011054:	080125f4 	.word	0x080125f4
 8011058:	08012697 	.word	0x08012697

0801105c <__mcmp>:
 801105c:	b530      	push	{r4, r5, lr}
 801105e:	6902      	ldr	r2, [r0, #16]
 8011060:	690c      	ldr	r4, [r1, #16]
 8011062:	1b12      	subs	r2, r2, r4
 8011064:	d10e      	bne.n	8011084 <__mcmp+0x28>
 8011066:	f100 0314 	add.w	r3, r0, #20
 801106a:	3114      	adds	r1, #20
 801106c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011070:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011074:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011078:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801107c:	42a5      	cmp	r5, r4
 801107e:	d003      	beq.n	8011088 <__mcmp+0x2c>
 8011080:	d305      	bcc.n	801108e <__mcmp+0x32>
 8011082:	2201      	movs	r2, #1
 8011084:	4610      	mov	r0, r2
 8011086:	bd30      	pop	{r4, r5, pc}
 8011088:	4283      	cmp	r3, r0
 801108a:	d3f3      	bcc.n	8011074 <__mcmp+0x18>
 801108c:	e7fa      	b.n	8011084 <__mcmp+0x28>
 801108e:	f04f 32ff 	mov.w	r2, #4294967295
 8011092:	e7f7      	b.n	8011084 <__mcmp+0x28>

08011094 <__mdiff>:
 8011094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011098:	460c      	mov	r4, r1
 801109a:	4606      	mov	r6, r0
 801109c:	4611      	mov	r1, r2
 801109e:	4620      	mov	r0, r4
 80110a0:	4690      	mov	r8, r2
 80110a2:	f7ff ffdb 	bl	801105c <__mcmp>
 80110a6:	1e05      	subs	r5, r0, #0
 80110a8:	d110      	bne.n	80110cc <__mdiff+0x38>
 80110aa:	4629      	mov	r1, r5
 80110ac:	4630      	mov	r0, r6
 80110ae:	f7ff fd09 	bl	8010ac4 <_Balloc>
 80110b2:	b930      	cbnz	r0, 80110c2 <__mdiff+0x2e>
 80110b4:	4b3a      	ldr	r3, [pc, #232]	; (80111a0 <__mdiff+0x10c>)
 80110b6:	4602      	mov	r2, r0
 80110b8:	f240 2132 	movw	r1, #562	; 0x232
 80110bc:	4839      	ldr	r0, [pc, #228]	; (80111a4 <__mdiff+0x110>)
 80110be:	f000 fde1 	bl	8011c84 <__assert_func>
 80110c2:	2301      	movs	r3, #1
 80110c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80110c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110cc:	bfa4      	itt	ge
 80110ce:	4643      	movge	r3, r8
 80110d0:	46a0      	movge	r8, r4
 80110d2:	4630      	mov	r0, r6
 80110d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80110d8:	bfa6      	itte	ge
 80110da:	461c      	movge	r4, r3
 80110dc:	2500      	movge	r5, #0
 80110de:	2501      	movlt	r5, #1
 80110e0:	f7ff fcf0 	bl	8010ac4 <_Balloc>
 80110e4:	b920      	cbnz	r0, 80110f0 <__mdiff+0x5c>
 80110e6:	4b2e      	ldr	r3, [pc, #184]	; (80111a0 <__mdiff+0x10c>)
 80110e8:	4602      	mov	r2, r0
 80110ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80110ee:	e7e5      	b.n	80110bc <__mdiff+0x28>
 80110f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80110f4:	6926      	ldr	r6, [r4, #16]
 80110f6:	60c5      	str	r5, [r0, #12]
 80110f8:	f104 0914 	add.w	r9, r4, #20
 80110fc:	f108 0514 	add.w	r5, r8, #20
 8011100:	f100 0e14 	add.w	lr, r0, #20
 8011104:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011108:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801110c:	f108 0210 	add.w	r2, r8, #16
 8011110:	46f2      	mov	sl, lr
 8011112:	2100      	movs	r1, #0
 8011114:	f859 3b04 	ldr.w	r3, [r9], #4
 8011118:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801111c:	fa1f f883 	uxth.w	r8, r3
 8011120:	fa11 f18b 	uxtah	r1, r1, fp
 8011124:	0c1b      	lsrs	r3, r3, #16
 8011126:	eba1 0808 	sub.w	r8, r1, r8
 801112a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801112e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011132:	fa1f f888 	uxth.w	r8, r8
 8011136:	1419      	asrs	r1, r3, #16
 8011138:	454e      	cmp	r6, r9
 801113a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801113e:	f84a 3b04 	str.w	r3, [sl], #4
 8011142:	d8e7      	bhi.n	8011114 <__mdiff+0x80>
 8011144:	1b33      	subs	r3, r6, r4
 8011146:	3b15      	subs	r3, #21
 8011148:	f023 0303 	bic.w	r3, r3, #3
 801114c:	3304      	adds	r3, #4
 801114e:	3415      	adds	r4, #21
 8011150:	42a6      	cmp	r6, r4
 8011152:	bf38      	it	cc
 8011154:	2304      	movcc	r3, #4
 8011156:	441d      	add	r5, r3
 8011158:	4473      	add	r3, lr
 801115a:	469e      	mov	lr, r3
 801115c:	462e      	mov	r6, r5
 801115e:	4566      	cmp	r6, ip
 8011160:	d30e      	bcc.n	8011180 <__mdiff+0xec>
 8011162:	f10c 0203 	add.w	r2, ip, #3
 8011166:	1b52      	subs	r2, r2, r5
 8011168:	f022 0203 	bic.w	r2, r2, #3
 801116c:	3d03      	subs	r5, #3
 801116e:	45ac      	cmp	ip, r5
 8011170:	bf38      	it	cc
 8011172:	2200      	movcc	r2, #0
 8011174:	441a      	add	r2, r3
 8011176:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801117a:	b17b      	cbz	r3, 801119c <__mdiff+0x108>
 801117c:	6107      	str	r7, [r0, #16]
 801117e:	e7a3      	b.n	80110c8 <__mdiff+0x34>
 8011180:	f856 8b04 	ldr.w	r8, [r6], #4
 8011184:	fa11 f288 	uxtah	r2, r1, r8
 8011188:	1414      	asrs	r4, r2, #16
 801118a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801118e:	b292      	uxth	r2, r2
 8011190:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011194:	f84e 2b04 	str.w	r2, [lr], #4
 8011198:	1421      	asrs	r1, r4, #16
 801119a:	e7e0      	b.n	801115e <__mdiff+0xca>
 801119c:	3f01      	subs	r7, #1
 801119e:	e7ea      	b.n	8011176 <__mdiff+0xe2>
 80111a0:	080125f4 	.word	0x080125f4
 80111a4:	08012697 	.word	0x08012697

080111a8 <__ulp>:
 80111a8:	b082      	sub	sp, #8
 80111aa:	ed8d 0b00 	vstr	d0, [sp]
 80111ae:	9b01      	ldr	r3, [sp, #4]
 80111b0:	4912      	ldr	r1, [pc, #72]	; (80111fc <__ulp+0x54>)
 80111b2:	4019      	ands	r1, r3
 80111b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80111b8:	2900      	cmp	r1, #0
 80111ba:	dd05      	ble.n	80111c8 <__ulp+0x20>
 80111bc:	2200      	movs	r2, #0
 80111be:	460b      	mov	r3, r1
 80111c0:	ec43 2b10 	vmov	d0, r2, r3
 80111c4:	b002      	add	sp, #8
 80111c6:	4770      	bx	lr
 80111c8:	4249      	negs	r1, r1
 80111ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80111ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 80111d2:	f04f 0200 	mov.w	r2, #0
 80111d6:	f04f 0300 	mov.w	r3, #0
 80111da:	da04      	bge.n	80111e6 <__ulp+0x3e>
 80111dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80111e0:	fa41 f300 	asr.w	r3, r1, r0
 80111e4:	e7ec      	b.n	80111c0 <__ulp+0x18>
 80111e6:	f1a0 0114 	sub.w	r1, r0, #20
 80111ea:	291e      	cmp	r1, #30
 80111ec:	bfda      	itte	le
 80111ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80111f2:	fa20 f101 	lsrle.w	r1, r0, r1
 80111f6:	2101      	movgt	r1, #1
 80111f8:	460a      	mov	r2, r1
 80111fa:	e7e1      	b.n	80111c0 <__ulp+0x18>
 80111fc:	7ff00000 	.word	0x7ff00000

08011200 <__b2d>:
 8011200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011202:	6905      	ldr	r5, [r0, #16]
 8011204:	f100 0714 	add.w	r7, r0, #20
 8011208:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801120c:	1f2e      	subs	r6, r5, #4
 801120e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011212:	4620      	mov	r0, r4
 8011214:	f7ff fd48 	bl	8010ca8 <__hi0bits>
 8011218:	f1c0 0320 	rsb	r3, r0, #32
 801121c:	280a      	cmp	r0, #10
 801121e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801129c <__b2d+0x9c>
 8011222:	600b      	str	r3, [r1, #0]
 8011224:	dc14      	bgt.n	8011250 <__b2d+0x50>
 8011226:	f1c0 0e0b 	rsb	lr, r0, #11
 801122a:	fa24 f10e 	lsr.w	r1, r4, lr
 801122e:	42b7      	cmp	r7, r6
 8011230:	ea41 030c 	orr.w	r3, r1, ip
 8011234:	bf34      	ite	cc
 8011236:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801123a:	2100      	movcs	r1, #0
 801123c:	3015      	adds	r0, #21
 801123e:	fa04 f000 	lsl.w	r0, r4, r0
 8011242:	fa21 f10e 	lsr.w	r1, r1, lr
 8011246:	ea40 0201 	orr.w	r2, r0, r1
 801124a:	ec43 2b10 	vmov	d0, r2, r3
 801124e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011250:	42b7      	cmp	r7, r6
 8011252:	bf3a      	itte	cc
 8011254:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011258:	f1a5 0608 	subcc.w	r6, r5, #8
 801125c:	2100      	movcs	r1, #0
 801125e:	380b      	subs	r0, #11
 8011260:	d017      	beq.n	8011292 <__b2d+0x92>
 8011262:	f1c0 0c20 	rsb	ip, r0, #32
 8011266:	fa04 f500 	lsl.w	r5, r4, r0
 801126a:	42be      	cmp	r6, r7
 801126c:	fa21 f40c 	lsr.w	r4, r1, ip
 8011270:	ea45 0504 	orr.w	r5, r5, r4
 8011274:	bf8c      	ite	hi
 8011276:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801127a:	2400      	movls	r4, #0
 801127c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011280:	fa01 f000 	lsl.w	r0, r1, r0
 8011284:	fa24 f40c 	lsr.w	r4, r4, ip
 8011288:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801128c:	ea40 0204 	orr.w	r2, r0, r4
 8011290:	e7db      	b.n	801124a <__b2d+0x4a>
 8011292:	ea44 030c 	orr.w	r3, r4, ip
 8011296:	460a      	mov	r2, r1
 8011298:	e7d7      	b.n	801124a <__b2d+0x4a>
 801129a:	bf00      	nop
 801129c:	3ff00000 	.word	0x3ff00000

080112a0 <__d2b>:
 80112a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80112a4:	4689      	mov	r9, r1
 80112a6:	2101      	movs	r1, #1
 80112a8:	ec57 6b10 	vmov	r6, r7, d0
 80112ac:	4690      	mov	r8, r2
 80112ae:	f7ff fc09 	bl	8010ac4 <_Balloc>
 80112b2:	4604      	mov	r4, r0
 80112b4:	b930      	cbnz	r0, 80112c4 <__d2b+0x24>
 80112b6:	4602      	mov	r2, r0
 80112b8:	4b25      	ldr	r3, [pc, #148]	; (8011350 <__d2b+0xb0>)
 80112ba:	4826      	ldr	r0, [pc, #152]	; (8011354 <__d2b+0xb4>)
 80112bc:	f240 310a 	movw	r1, #778	; 0x30a
 80112c0:	f000 fce0 	bl	8011c84 <__assert_func>
 80112c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80112c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80112cc:	bb35      	cbnz	r5, 801131c <__d2b+0x7c>
 80112ce:	2e00      	cmp	r6, #0
 80112d0:	9301      	str	r3, [sp, #4]
 80112d2:	d028      	beq.n	8011326 <__d2b+0x86>
 80112d4:	4668      	mov	r0, sp
 80112d6:	9600      	str	r6, [sp, #0]
 80112d8:	f7ff fd06 	bl	8010ce8 <__lo0bits>
 80112dc:	9900      	ldr	r1, [sp, #0]
 80112de:	b300      	cbz	r0, 8011322 <__d2b+0x82>
 80112e0:	9a01      	ldr	r2, [sp, #4]
 80112e2:	f1c0 0320 	rsb	r3, r0, #32
 80112e6:	fa02 f303 	lsl.w	r3, r2, r3
 80112ea:	430b      	orrs	r3, r1
 80112ec:	40c2      	lsrs	r2, r0
 80112ee:	6163      	str	r3, [r4, #20]
 80112f0:	9201      	str	r2, [sp, #4]
 80112f2:	9b01      	ldr	r3, [sp, #4]
 80112f4:	61a3      	str	r3, [r4, #24]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	bf14      	ite	ne
 80112fa:	2202      	movne	r2, #2
 80112fc:	2201      	moveq	r2, #1
 80112fe:	6122      	str	r2, [r4, #16]
 8011300:	b1d5      	cbz	r5, 8011338 <__d2b+0x98>
 8011302:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011306:	4405      	add	r5, r0
 8011308:	f8c9 5000 	str.w	r5, [r9]
 801130c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011310:	f8c8 0000 	str.w	r0, [r8]
 8011314:	4620      	mov	r0, r4
 8011316:	b003      	add	sp, #12
 8011318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801131c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011320:	e7d5      	b.n	80112ce <__d2b+0x2e>
 8011322:	6161      	str	r1, [r4, #20]
 8011324:	e7e5      	b.n	80112f2 <__d2b+0x52>
 8011326:	a801      	add	r0, sp, #4
 8011328:	f7ff fcde 	bl	8010ce8 <__lo0bits>
 801132c:	9b01      	ldr	r3, [sp, #4]
 801132e:	6163      	str	r3, [r4, #20]
 8011330:	2201      	movs	r2, #1
 8011332:	6122      	str	r2, [r4, #16]
 8011334:	3020      	adds	r0, #32
 8011336:	e7e3      	b.n	8011300 <__d2b+0x60>
 8011338:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801133c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011340:	f8c9 0000 	str.w	r0, [r9]
 8011344:	6918      	ldr	r0, [r3, #16]
 8011346:	f7ff fcaf 	bl	8010ca8 <__hi0bits>
 801134a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801134e:	e7df      	b.n	8011310 <__d2b+0x70>
 8011350:	080125f4 	.word	0x080125f4
 8011354:	08012697 	.word	0x08012697

08011358 <__ratio>:
 8011358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135c:	4688      	mov	r8, r1
 801135e:	4669      	mov	r1, sp
 8011360:	4681      	mov	r9, r0
 8011362:	f7ff ff4d 	bl	8011200 <__b2d>
 8011366:	a901      	add	r1, sp, #4
 8011368:	4640      	mov	r0, r8
 801136a:	ec55 4b10 	vmov	r4, r5, d0
 801136e:	f7ff ff47 	bl	8011200 <__b2d>
 8011372:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011376:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801137a:	eba3 0c02 	sub.w	ip, r3, r2
 801137e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011382:	1a9b      	subs	r3, r3, r2
 8011384:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011388:	ec51 0b10 	vmov	r0, r1, d0
 801138c:	2b00      	cmp	r3, #0
 801138e:	bfd6      	itet	le
 8011390:	460a      	movle	r2, r1
 8011392:	462a      	movgt	r2, r5
 8011394:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011398:	468b      	mov	fp, r1
 801139a:	462f      	mov	r7, r5
 801139c:	bfd4      	ite	le
 801139e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80113a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80113a6:	4620      	mov	r0, r4
 80113a8:	ee10 2a10 	vmov	r2, s0
 80113ac:	465b      	mov	r3, fp
 80113ae:	4639      	mov	r1, r7
 80113b0:	f7ef fa4c 	bl	800084c <__aeabi_ddiv>
 80113b4:	ec41 0b10 	vmov	d0, r0, r1
 80113b8:	b003      	add	sp, #12
 80113ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080113be <__copybits>:
 80113be:	3901      	subs	r1, #1
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	1149      	asrs	r1, r1, #5
 80113c4:	6914      	ldr	r4, [r2, #16]
 80113c6:	3101      	adds	r1, #1
 80113c8:	f102 0314 	add.w	r3, r2, #20
 80113cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80113d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80113d4:	1f05      	subs	r5, r0, #4
 80113d6:	42a3      	cmp	r3, r4
 80113d8:	d30c      	bcc.n	80113f4 <__copybits+0x36>
 80113da:	1aa3      	subs	r3, r4, r2
 80113dc:	3b11      	subs	r3, #17
 80113de:	f023 0303 	bic.w	r3, r3, #3
 80113e2:	3211      	adds	r2, #17
 80113e4:	42a2      	cmp	r2, r4
 80113e6:	bf88      	it	hi
 80113e8:	2300      	movhi	r3, #0
 80113ea:	4418      	add	r0, r3
 80113ec:	2300      	movs	r3, #0
 80113ee:	4288      	cmp	r0, r1
 80113f0:	d305      	bcc.n	80113fe <__copybits+0x40>
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80113f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80113fc:	e7eb      	b.n	80113d6 <__copybits+0x18>
 80113fe:	f840 3b04 	str.w	r3, [r0], #4
 8011402:	e7f4      	b.n	80113ee <__copybits+0x30>

08011404 <__any_on>:
 8011404:	f100 0214 	add.w	r2, r0, #20
 8011408:	6900      	ldr	r0, [r0, #16]
 801140a:	114b      	asrs	r3, r1, #5
 801140c:	4298      	cmp	r0, r3
 801140e:	b510      	push	{r4, lr}
 8011410:	db11      	blt.n	8011436 <__any_on+0x32>
 8011412:	dd0a      	ble.n	801142a <__any_on+0x26>
 8011414:	f011 011f 	ands.w	r1, r1, #31
 8011418:	d007      	beq.n	801142a <__any_on+0x26>
 801141a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801141e:	fa24 f001 	lsr.w	r0, r4, r1
 8011422:	fa00 f101 	lsl.w	r1, r0, r1
 8011426:	428c      	cmp	r4, r1
 8011428:	d10b      	bne.n	8011442 <__any_on+0x3e>
 801142a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801142e:	4293      	cmp	r3, r2
 8011430:	d803      	bhi.n	801143a <__any_on+0x36>
 8011432:	2000      	movs	r0, #0
 8011434:	bd10      	pop	{r4, pc}
 8011436:	4603      	mov	r3, r0
 8011438:	e7f7      	b.n	801142a <__any_on+0x26>
 801143a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801143e:	2900      	cmp	r1, #0
 8011440:	d0f5      	beq.n	801142e <__any_on+0x2a>
 8011442:	2001      	movs	r0, #1
 8011444:	e7f6      	b.n	8011434 <__any_on+0x30>

08011446 <_calloc_r>:
 8011446:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011448:	fba1 2402 	umull	r2, r4, r1, r2
 801144c:	b94c      	cbnz	r4, 8011462 <_calloc_r+0x1c>
 801144e:	4611      	mov	r1, r2
 8011450:	9201      	str	r2, [sp, #4]
 8011452:	f000 f87b 	bl	801154c <_malloc_r>
 8011456:	9a01      	ldr	r2, [sp, #4]
 8011458:	4605      	mov	r5, r0
 801145a:	b930      	cbnz	r0, 801146a <_calloc_r+0x24>
 801145c:	4628      	mov	r0, r5
 801145e:	b003      	add	sp, #12
 8011460:	bd30      	pop	{r4, r5, pc}
 8011462:	220c      	movs	r2, #12
 8011464:	6002      	str	r2, [r0, #0]
 8011466:	2500      	movs	r5, #0
 8011468:	e7f8      	b.n	801145c <_calloc_r+0x16>
 801146a:	4621      	mov	r1, r4
 801146c:	f7fd faa6 	bl	800e9bc <memset>
 8011470:	e7f4      	b.n	801145c <_calloc_r+0x16>
	...

08011474 <_free_r>:
 8011474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011476:	2900      	cmp	r1, #0
 8011478:	d044      	beq.n	8011504 <_free_r+0x90>
 801147a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801147e:	9001      	str	r0, [sp, #4]
 8011480:	2b00      	cmp	r3, #0
 8011482:	f1a1 0404 	sub.w	r4, r1, #4
 8011486:	bfb8      	it	lt
 8011488:	18e4      	addlt	r4, r4, r3
 801148a:	f000 fc6f 	bl	8011d6c <__malloc_lock>
 801148e:	4a1e      	ldr	r2, [pc, #120]	; (8011508 <_free_r+0x94>)
 8011490:	9801      	ldr	r0, [sp, #4]
 8011492:	6813      	ldr	r3, [r2, #0]
 8011494:	b933      	cbnz	r3, 80114a4 <_free_r+0x30>
 8011496:	6063      	str	r3, [r4, #4]
 8011498:	6014      	str	r4, [r2, #0]
 801149a:	b003      	add	sp, #12
 801149c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114a0:	f000 bc6a 	b.w	8011d78 <__malloc_unlock>
 80114a4:	42a3      	cmp	r3, r4
 80114a6:	d908      	bls.n	80114ba <_free_r+0x46>
 80114a8:	6825      	ldr	r5, [r4, #0]
 80114aa:	1961      	adds	r1, r4, r5
 80114ac:	428b      	cmp	r3, r1
 80114ae:	bf01      	itttt	eq
 80114b0:	6819      	ldreq	r1, [r3, #0]
 80114b2:	685b      	ldreq	r3, [r3, #4]
 80114b4:	1949      	addeq	r1, r1, r5
 80114b6:	6021      	streq	r1, [r4, #0]
 80114b8:	e7ed      	b.n	8011496 <_free_r+0x22>
 80114ba:	461a      	mov	r2, r3
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	b10b      	cbz	r3, 80114c4 <_free_r+0x50>
 80114c0:	42a3      	cmp	r3, r4
 80114c2:	d9fa      	bls.n	80114ba <_free_r+0x46>
 80114c4:	6811      	ldr	r1, [r2, #0]
 80114c6:	1855      	adds	r5, r2, r1
 80114c8:	42a5      	cmp	r5, r4
 80114ca:	d10b      	bne.n	80114e4 <_free_r+0x70>
 80114cc:	6824      	ldr	r4, [r4, #0]
 80114ce:	4421      	add	r1, r4
 80114d0:	1854      	adds	r4, r2, r1
 80114d2:	42a3      	cmp	r3, r4
 80114d4:	6011      	str	r1, [r2, #0]
 80114d6:	d1e0      	bne.n	801149a <_free_r+0x26>
 80114d8:	681c      	ldr	r4, [r3, #0]
 80114da:	685b      	ldr	r3, [r3, #4]
 80114dc:	6053      	str	r3, [r2, #4]
 80114de:	4421      	add	r1, r4
 80114e0:	6011      	str	r1, [r2, #0]
 80114e2:	e7da      	b.n	801149a <_free_r+0x26>
 80114e4:	d902      	bls.n	80114ec <_free_r+0x78>
 80114e6:	230c      	movs	r3, #12
 80114e8:	6003      	str	r3, [r0, #0]
 80114ea:	e7d6      	b.n	801149a <_free_r+0x26>
 80114ec:	6825      	ldr	r5, [r4, #0]
 80114ee:	1961      	adds	r1, r4, r5
 80114f0:	428b      	cmp	r3, r1
 80114f2:	bf04      	itt	eq
 80114f4:	6819      	ldreq	r1, [r3, #0]
 80114f6:	685b      	ldreq	r3, [r3, #4]
 80114f8:	6063      	str	r3, [r4, #4]
 80114fa:	bf04      	itt	eq
 80114fc:	1949      	addeq	r1, r1, r5
 80114fe:	6021      	streq	r1, [r4, #0]
 8011500:	6054      	str	r4, [r2, #4]
 8011502:	e7ca      	b.n	801149a <_free_r+0x26>
 8011504:	b003      	add	sp, #12
 8011506:	bd30      	pop	{r4, r5, pc}
 8011508:	2000289c 	.word	0x2000289c

0801150c <sbrk_aligned>:
 801150c:	b570      	push	{r4, r5, r6, lr}
 801150e:	4e0e      	ldr	r6, [pc, #56]	; (8011548 <sbrk_aligned+0x3c>)
 8011510:	460c      	mov	r4, r1
 8011512:	6831      	ldr	r1, [r6, #0]
 8011514:	4605      	mov	r5, r0
 8011516:	b911      	cbnz	r1, 801151e <sbrk_aligned+0x12>
 8011518:	f000 fb96 	bl	8011c48 <_sbrk_r>
 801151c:	6030      	str	r0, [r6, #0]
 801151e:	4621      	mov	r1, r4
 8011520:	4628      	mov	r0, r5
 8011522:	f000 fb91 	bl	8011c48 <_sbrk_r>
 8011526:	1c43      	adds	r3, r0, #1
 8011528:	d00a      	beq.n	8011540 <sbrk_aligned+0x34>
 801152a:	1cc4      	adds	r4, r0, #3
 801152c:	f024 0403 	bic.w	r4, r4, #3
 8011530:	42a0      	cmp	r0, r4
 8011532:	d007      	beq.n	8011544 <sbrk_aligned+0x38>
 8011534:	1a21      	subs	r1, r4, r0
 8011536:	4628      	mov	r0, r5
 8011538:	f000 fb86 	bl	8011c48 <_sbrk_r>
 801153c:	3001      	adds	r0, #1
 801153e:	d101      	bne.n	8011544 <sbrk_aligned+0x38>
 8011540:	f04f 34ff 	mov.w	r4, #4294967295
 8011544:	4620      	mov	r0, r4
 8011546:	bd70      	pop	{r4, r5, r6, pc}
 8011548:	200028a0 	.word	0x200028a0

0801154c <_malloc_r>:
 801154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011550:	1ccd      	adds	r5, r1, #3
 8011552:	f025 0503 	bic.w	r5, r5, #3
 8011556:	3508      	adds	r5, #8
 8011558:	2d0c      	cmp	r5, #12
 801155a:	bf38      	it	cc
 801155c:	250c      	movcc	r5, #12
 801155e:	2d00      	cmp	r5, #0
 8011560:	4607      	mov	r7, r0
 8011562:	db01      	blt.n	8011568 <_malloc_r+0x1c>
 8011564:	42a9      	cmp	r1, r5
 8011566:	d905      	bls.n	8011574 <_malloc_r+0x28>
 8011568:	230c      	movs	r3, #12
 801156a:	603b      	str	r3, [r7, #0]
 801156c:	2600      	movs	r6, #0
 801156e:	4630      	mov	r0, r6
 8011570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011574:	4e2e      	ldr	r6, [pc, #184]	; (8011630 <_malloc_r+0xe4>)
 8011576:	f000 fbf9 	bl	8011d6c <__malloc_lock>
 801157a:	6833      	ldr	r3, [r6, #0]
 801157c:	461c      	mov	r4, r3
 801157e:	bb34      	cbnz	r4, 80115ce <_malloc_r+0x82>
 8011580:	4629      	mov	r1, r5
 8011582:	4638      	mov	r0, r7
 8011584:	f7ff ffc2 	bl	801150c <sbrk_aligned>
 8011588:	1c43      	adds	r3, r0, #1
 801158a:	4604      	mov	r4, r0
 801158c:	d14d      	bne.n	801162a <_malloc_r+0xde>
 801158e:	6834      	ldr	r4, [r6, #0]
 8011590:	4626      	mov	r6, r4
 8011592:	2e00      	cmp	r6, #0
 8011594:	d140      	bne.n	8011618 <_malloc_r+0xcc>
 8011596:	6823      	ldr	r3, [r4, #0]
 8011598:	4631      	mov	r1, r6
 801159a:	4638      	mov	r0, r7
 801159c:	eb04 0803 	add.w	r8, r4, r3
 80115a0:	f000 fb52 	bl	8011c48 <_sbrk_r>
 80115a4:	4580      	cmp	r8, r0
 80115a6:	d13a      	bne.n	801161e <_malloc_r+0xd2>
 80115a8:	6821      	ldr	r1, [r4, #0]
 80115aa:	3503      	adds	r5, #3
 80115ac:	1a6d      	subs	r5, r5, r1
 80115ae:	f025 0503 	bic.w	r5, r5, #3
 80115b2:	3508      	adds	r5, #8
 80115b4:	2d0c      	cmp	r5, #12
 80115b6:	bf38      	it	cc
 80115b8:	250c      	movcc	r5, #12
 80115ba:	4629      	mov	r1, r5
 80115bc:	4638      	mov	r0, r7
 80115be:	f7ff ffa5 	bl	801150c <sbrk_aligned>
 80115c2:	3001      	adds	r0, #1
 80115c4:	d02b      	beq.n	801161e <_malloc_r+0xd2>
 80115c6:	6823      	ldr	r3, [r4, #0]
 80115c8:	442b      	add	r3, r5
 80115ca:	6023      	str	r3, [r4, #0]
 80115cc:	e00e      	b.n	80115ec <_malloc_r+0xa0>
 80115ce:	6822      	ldr	r2, [r4, #0]
 80115d0:	1b52      	subs	r2, r2, r5
 80115d2:	d41e      	bmi.n	8011612 <_malloc_r+0xc6>
 80115d4:	2a0b      	cmp	r2, #11
 80115d6:	d916      	bls.n	8011606 <_malloc_r+0xba>
 80115d8:	1961      	adds	r1, r4, r5
 80115da:	42a3      	cmp	r3, r4
 80115dc:	6025      	str	r5, [r4, #0]
 80115de:	bf18      	it	ne
 80115e0:	6059      	strne	r1, [r3, #4]
 80115e2:	6863      	ldr	r3, [r4, #4]
 80115e4:	bf08      	it	eq
 80115e6:	6031      	streq	r1, [r6, #0]
 80115e8:	5162      	str	r2, [r4, r5]
 80115ea:	604b      	str	r3, [r1, #4]
 80115ec:	4638      	mov	r0, r7
 80115ee:	f104 060b 	add.w	r6, r4, #11
 80115f2:	f000 fbc1 	bl	8011d78 <__malloc_unlock>
 80115f6:	f026 0607 	bic.w	r6, r6, #7
 80115fa:	1d23      	adds	r3, r4, #4
 80115fc:	1af2      	subs	r2, r6, r3
 80115fe:	d0b6      	beq.n	801156e <_malloc_r+0x22>
 8011600:	1b9b      	subs	r3, r3, r6
 8011602:	50a3      	str	r3, [r4, r2]
 8011604:	e7b3      	b.n	801156e <_malloc_r+0x22>
 8011606:	6862      	ldr	r2, [r4, #4]
 8011608:	42a3      	cmp	r3, r4
 801160a:	bf0c      	ite	eq
 801160c:	6032      	streq	r2, [r6, #0]
 801160e:	605a      	strne	r2, [r3, #4]
 8011610:	e7ec      	b.n	80115ec <_malloc_r+0xa0>
 8011612:	4623      	mov	r3, r4
 8011614:	6864      	ldr	r4, [r4, #4]
 8011616:	e7b2      	b.n	801157e <_malloc_r+0x32>
 8011618:	4634      	mov	r4, r6
 801161a:	6876      	ldr	r6, [r6, #4]
 801161c:	e7b9      	b.n	8011592 <_malloc_r+0x46>
 801161e:	230c      	movs	r3, #12
 8011620:	603b      	str	r3, [r7, #0]
 8011622:	4638      	mov	r0, r7
 8011624:	f000 fba8 	bl	8011d78 <__malloc_unlock>
 8011628:	e7a1      	b.n	801156e <_malloc_r+0x22>
 801162a:	6025      	str	r5, [r4, #0]
 801162c:	e7de      	b.n	80115ec <_malloc_r+0xa0>
 801162e:	bf00      	nop
 8011630:	2000289c 	.word	0x2000289c

08011634 <__ssputs_r>:
 8011634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011638:	688e      	ldr	r6, [r1, #8]
 801163a:	429e      	cmp	r6, r3
 801163c:	4682      	mov	sl, r0
 801163e:	460c      	mov	r4, r1
 8011640:	4690      	mov	r8, r2
 8011642:	461f      	mov	r7, r3
 8011644:	d838      	bhi.n	80116b8 <__ssputs_r+0x84>
 8011646:	898a      	ldrh	r2, [r1, #12]
 8011648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801164c:	d032      	beq.n	80116b4 <__ssputs_r+0x80>
 801164e:	6825      	ldr	r5, [r4, #0]
 8011650:	6909      	ldr	r1, [r1, #16]
 8011652:	eba5 0901 	sub.w	r9, r5, r1
 8011656:	6965      	ldr	r5, [r4, #20]
 8011658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801165c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011660:	3301      	adds	r3, #1
 8011662:	444b      	add	r3, r9
 8011664:	106d      	asrs	r5, r5, #1
 8011666:	429d      	cmp	r5, r3
 8011668:	bf38      	it	cc
 801166a:	461d      	movcc	r5, r3
 801166c:	0553      	lsls	r3, r2, #21
 801166e:	d531      	bpl.n	80116d4 <__ssputs_r+0xa0>
 8011670:	4629      	mov	r1, r5
 8011672:	f7ff ff6b 	bl	801154c <_malloc_r>
 8011676:	4606      	mov	r6, r0
 8011678:	b950      	cbnz	r0, 8011690 <__ssputs_r+0x5c>
 801167a:	230c      	movs	r3, #12
 801167c:	f8ca 3000 	str.w	r3, [sl]
 8011680:	89a3      	ldrh	r3, [r4, #12]
 8011682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011686:	81a3      	strh	r3, [r4, #12]
 8011688:	f04f 30ff 	mov.w	r0, #4294967295
 801168c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011690:	6921      	ldr	r1, [r4, #16]
 8011692:	464a      	mov	r2, r9
 8011694:	f7fd f984 	bl	800e9a0 <memcpy>
 8011698:	89a3      	ldrh	r3, [r4, #12]
 801169a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801169e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116a2:	81a3      	strh	r3, [r4, #12]
 80116a4:	6126      	str	r6, [r4, #16]
 80116a6:	6165      	str	r5, [r4, #20]
 80116a8:	444e      	add	r6, r9
 80116aa:	eba5 0509 	sub.w	r5, r5, r9
 80116ae:	6026      	str	r6, [r4, #0]
 80116b0:	60a5      	str	r5, [r4, #8]
 80116b2:	463e      	mov	r6, r7
 80116b4:	42be      	cmp	r6, r7
 80116b6:	d900      	bls.n	80116ba <__ssputs_r+0x86>
 80116b8:	463e      	mov	r6, r7
 80116ba:	6820      	ldr	r0, [r4, #0]
 80116bc:	4632      	mov	r2, r6
 80116be:	4641      	mov	r1, r8
 80116c0:	f000 fb3a 	bl	8011d38 <memmove>
 80116c4:	68a3      	ldr	r3, [r4, #8]
 80116c6:	1b9b      	subs	r3, r3, r6
 80116c8:	60a3      	str	r3, [r4, #8]
 80116ca:	6823      	ldr	r3, [r4, #0]
 80116cc:	4433      	add	r3, r6
 80116ce:	6023      	str	r3, [r4, #0]
 80116d0:	2000      	movs	r0, #0
 80116d2:	e7db      	b.n	801168c <__ssputs_r+0x58>
 80116d4:	462a      	mov	r2, r5
 80116d6:	f000 fb55 	bl	8011d84 <_realloc_r>
 80116da:	4606      	mov	r6, r0
 80116dc:	2800      	cmp	r0, #0
 80116de:	d1e1      	bne.n	80116a4 <__ssputs_r+0x70>
 80116e0:	6921      	ldr	r1, [r4, #16]
 80116e2:	4650      	mov	r0, sl
 80116e4:	f7ff fec6 	bl	8011474 <_free_r>
 80116e8:	e7c7      	b.n	801167a <__ssputs_r+0x46>
	...

080116ec <_svfiprintf_r>:
 80116ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116f0:	4698      	mov	r8, r3
 80116f2:	898b      	ldrh	r3, [r1, #12]
 80116f4:	061b      	lsls	r3, r3, #24
 80116f6:	b09d      	sub	sp, #116	; 0x74
 80116f8:	4607      	mov	r7, r0
 80116fa:	460d      	mov	r5, r1
 80116fc:	4614      	mov	r4, r2
 80116fe:	d50e      	bpl.n	801171e <_svfiprintf_r+0x32>
 8011700:	690b      	ldr	r3, [r1, #16]
 8011702:	b963      	cbnz	r3, 801171e <_svfiprintf_r+0x32>
 8011704:	2140      	movs	r1, #64	; 0x40
 8011706:	f7ff ff21 	bl	801154c <_malloc_r>
 801170a:	6028      	str	r0, [r5, #0]
 801170c:	6128      	str	r0, [r5, #16]
 801170e:	b920      	cbnz	r0, 801171a <_svfiprintf_r+0x2e>
 8011710:	230c      	movs	r3, #12
 8011712:	603b      	str	r3, [r7, #0]
 8011714:	f04f 30ff 	mov.w	r0, #4294967295
 8011718:	e0d1      	b.n	80118be <_svfiprintf_r+0x1d2>
 801171a:	2340      	movs	r3, #64	; 0x40
 801171c:	616b      	str	r3, [r5, #20]
 801171e:	2300      	movs	r3, #0
 8011720:	9309      	str	r3, [sp, #36]	; 0x24
 8011722:	2320      	movs	r3, #32
 8011724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011728:	f8cd 800c 	str.w	r8, [sp, #12]
 801172c:	2330      	movs	r3, #48	; 0x30
 801172e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80118d8 <_svfiprintf_r+0x1ec>
 8011732:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011736:	f04f 0901 	mov.w	r9, #1
 801173a:	4623      	mov	r3, r4
 801173c:	469a      	mov	sl, r3
 801173e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011742:	b10a      	cbz	r2, 8011748 <_svfiprintf_r+0x5c>
 8011744:	2a25      	cmp	r2, #37	; 0x25
 8011746:	d1f9      	bne.n	801173c <_svfiprintf_r+0x50>
 8011748:	ebba 0b04 	subs.w	fp, sl, r4
 801174c:	d00b      	beq.n	8011766 <_svfiprintf_r+0x7a>
 801174e:	465b      	mov	r3, fp
 8011750:	4622      	mov	r2, r4
 8011752:	4629      	mov	r1, r5
 8011754:	4638      	mov	r0, r7
 8011756:	f7ff ff6d 	bl	8011634 <__ssputs_r>
 801175a:	3001      	adds	r0, #1
 801175c:	f000 80aa 	beq.w	80118b4 <_svfiprintf_r+0x1c8>
 8011760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011762:	445a      	add	r2, fp
 8011764:	9209      	str	r2, [sp, #36]	; 0x24
 8011766:	f89a 3000 	ldrb.w	r3, [sl]
 801176a:	2b00      	cmp	r3, #0
 801176c:	f000 80a2 	beq.w	80118b4 <_svfiprintf_r+0x1c8>
 8011770:	2300      	movs	r3, #0
 8011772:	f04f 32ff 	mov.w	r2, #4294967295
 8011776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801177a:	f10a 0a01 	add.w	sl, sl, #1
 801177e:	9304      	str	r3, [sp, #16]
 8011780:	9307      	str	r3, [sp, #28]
 8011782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011786:	931a      	str	r3, [sp, #104]	; 0x68
 8011788:	4654      	mov	r4, sl
 801178a:	2205      	movs	r2, #5
 801178c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011790:	4851      	ldr	r0, [pc, #324]	; (80118d8 <_svfiprintf_r+0x1ec>)
 8011792:	f7ee fd25 	bl	80001e0 <memchr>
 8011796:	9a04      	ldr	r2, [sp, #16]
 8011798:	b9d8      	cbnz	r0, 80117d2 <_svfiprintf_r+0xe6>
 801179a:	06d0      	lsls	r0, r2, #27
 801179c:	bf44      	itt	mi
 801179e:	2320      	movmi	r3, #32
 80117a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117a4:	0711      	lsls	r1, r2, #28
 80117a6:	bf44      	itt	mi
 80117a8:	232b      	movmi	r3, #43	; 0x2b
 80117aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80117ae:	f89a 3000 	ldrb.w	r3, [sl]
 80117b2:	2b2a      	cmp	r3, #42	; 0x2a
 80117b4:	d015      	beq.n	80117e2 <_svfiprintf_r+0xf6>
 80117b6:	9a07      	ldr	r2, [sp, #28]
 80117b8:	4654      	mov	r4, sl
 80117ba:	2000      	movs	r0, #0
 80117bc:	f04f 0c0a 	mov.w	ip, #10
 80117c0:	4621      	mov	r1, r4
 80117c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117c6:	3b30      	subs	r3, #48	; 0x30
 80117c8:	2b09      	cmp	r3, #9
 80117ca:	d94e      	bls.n	801186a <_svfiprintf_r+0x17e>
 80117cc:	b1b0      	cbz	r0, 80117fc <_svfiprintf_r+0x110>
 80117ce:	9207      	str	r2, [sp, #28]
 80117d0:	e014      	b.n	80117fc <_svfiprintf_r+0x110>
 80117d2:	eba0 0308 	sub.w	r3, r0, r8
 80117d6:	fa09 f303 	lsl.w	r3, r9, r3
 80117da:	4313      	orrs	r3, r2
 80117dc:	9304      	str	r3, [sp, #16]
 80117de:	46a2      	mov	sl, r4
 80117e0:	e7d2      	b.n	8011788 <_svfiprintf_r+0x9c>
 80117e2:	9b03      	ldr	r3, [sp, #12]
 80117e4:	1d19      	adds	r1, r3, #4
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	9103      	str	r1, [sp, #12]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	bfbb      	ittet	lt
 80117ee:	425b      	neglt	r3, r3
 80117f0:	f042 0202 	orrlt.w	r2, r2, #2
 80117f4:	9307      	strge	r3, [sp, #28]
 80117f6:	9307      	strlt	r3, [sp, #28]
 80117f8:	bfb8      	it	lt
 80117fa:	9204      	strlt	r2, [sp, #16]
 80117fc:	7823      	ldrb	r3, [r4, #0]
 80117fe:	2b2e      	cmp	r3, #46	; 0x2e
 8011800:	d10c      	bne.n	801181c <_svfiprintf_r+0x130>
 8011802:	7863      	ldrb	r3, [r4, #1]
 8011804:	2b2a      	cmp	r3, #42	; 0x2a
 8011806:	d135      	bne.n	8011874 <_svfiprintf_r+0x188>
 8011808:	9b03      	ldr	r3, [sp, #12]
 801180a:	1d1a      	adds	r2, r3, #4
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	9203      	str	r2, [sp, #12]
 8011810:	2b00      	cmp	r3, #0
 8011812:	bfb8      	it	lt
 8011814:	f04f 33ff 	movlt.w	r3, #4294967295
 8011818:	3402      	adds	r4, #2
 801181a:	9305      	str	r3, [sp, #20]
 801181c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80118e8 <_svfiprintf_r+0x1fc>
 8011820:	7821      	ldrb	r1, [r4, #0]
 8011822:	2203      	movs	r2, #3
 8011824:	4650      	mov	r0, sl
 8011826:	f7ee fcdb 	bl	80001e0 <memchr>
 801182a:	b140      	cbz	r0, 801183e <_svfiprintf_r+0x152>
 801182c:	2340      	movs	r3, #64	; 0x40
 801182e:	eba0 000a 	sub.w	r0, r0, sl
 8011832:	fa03 f000 	lsl.w	r0, r3, r0
 8011836:	9b04      	ldr	r3, [sp, #16]
 8011838:	4303      	orrs	r3, r0
 801183a:	3401      	adds	r4, #1
 801183c:	9304      	str	r3, [sp, #16]
 801183e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011842:	4826      	ldr	r0, [pc, #152]	; (80118dc <_svfiprintf_r+0x1f0>)
 8011844:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011848:	2206      	movs	r2, #6
 801184a:	f7ee fcc9 	bl	80001e0 <memchr>
 801184e:	2800      	cmp	r0, #0
 8011850:	d038      	beq.n	80118c4 <_svfiprintf_r+0x1d8>
 8011852:	4b23      	ldr	r3, [pc, #140]	; (80118e0 <_svfiprintf_r+0x1f4>)
 8011854:	bb1b      	cbnz	r3, 801189e <_svfiprintf_r+0x1b2>
 8011856:	9b03      	ldr	r3, [sp, #12]
 8011858:	3307      	adds	r3, #7
 801185a:	f023 0307 	bic.w	r3, r3, #7
 801185e:	3308      	adds	r3, #8
 8011860:	9303      	str	r3, [sp, #12]
 8011862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011864:	4433      	add	r3, r6
 8011866:	9309      	str	r3, [sp, #36]	; 0x24
 8011868:	e767      	b.n	801173a <_svfiprintf_r+0x4e>
 801186a:	fb0c 3202 	mla	r2, ip, r2, r3
 801186e:	460c      	mov	r4, r1
 8011870:	2001      	movs	r0, #1
 8011872:	e7a5      	b.n	80117c0 <_svfiprintf_r+0xd4>
 8011874:	2300      	movs	r3, #0
 8011876:	3401      	adds	r4, #1
 8011878:	9305      	str	r3, [sp, #20]
 801187a:	4619      	mov	r1, r3
 801187c:	f04f 0c0a 	mov.w	ip, #10
 8011880:	4620      	mov	r0, r4
 8011882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011886:	3a30      	subs	r2, #48	; 0x30
 8011888:	2a09      	cmp	r2, #9
 801188a:	d903      	bls.n	8011894 <_svfiprintf_r+0x1a8>
 801188c:	2b00      	cmp	r3, #0
 801188e:	d0c5      	beq.n	801181c <_svfiprintf_r+0x130>
 8011890:	9105      	str	r1, [sp, #20]
 8011892:	e7c3      	b.n	801181c <_svfiprintf_r+0x130>
 8011894:	fb0c 2101 	mla	r1, ip, r1, r2
 8011898:	4604      	mov	r4, r0
 801189a:	2301      	movs	r3, #1
 801189c:	e7f0      	b.n	8011880 <_svfiprintf_r+0x194>
 801189e:	ab03      	add	r3, sp, #12
 80118a0:	9300      	str	r3, [sp, #0]
 80118a2:	462a      	mov	r2, r5
 80118a4:	4b0f      	ldr	r3, [pc, #60]	; (80118e4 <_svfiprintf_r+0x1f8>)
 80118a6:	a904      	add	r1, sp, #16
 80118a8:	4638      	mov	r0, r7
 80118aa:	f3af 8000 	nop.w
 80118ae:	1c42      	adds	r2, r0, #1
 80118b0:	4606      	mov	r6, r0
 80118b2:	d1d6      	bne.n	8011862 <_svfiprintf_r+0x176>
 80118b4:	89ab      	ldrh	r3, [r5, #12]
 80118b6:	065b      	lsls	r3, r3, #25
 80118b8:	f53f af2c 	bmi.w	8011714 <_svfiprintf_r+0x28>
 80118bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80118be:	b01d      	add	sp, #116	; 0x74
 80118c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118c4:	ab03      	add	r3, sp, #12
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	462a      	mov	r2, r5
 80118ca:	4b06      	ldr	r3, [pc, #24]	; (80118e4 <_svfiprintf_r+0x1f8>)
 80118cc:	a904      	add	r1, sp, #16
 80118ce:	4638      	mov	r0, r7
 80118d0:	f000 f87a 	bl	80119c8 <_printf_i>
 80118d4:	e7eb      	b.n	80118ae <_svfiprintf_r+0x1c2>
 80118d6:	bf00      	nop
 80118d8:	080127f4 	.word	0x080127f4
 80118dc:	080127fe 	.word	0x080127fe
 80118e0:	00000000 	.word	0x00000000
 80118e4:	08011635 	.word	0x08011635
 80118e8:	080127fa 	.word	0x080127fa

080118ec <_printf_common>:
 80118ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118f0:	4616      	mov	r6, r2
 80118f2:	4699      	mov	r9, r3
 80118f4:	688a      	ldr	r2, [r1, #8]
 80118f6:	690b      	ldr	r3, [r1, #16]
 80118f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80118fc:	4293      	cmp	r3, r2
 80118fe:	bfb8      	it	lt
 8011900:	4613      	movlt	r3, r2
 8011902:	6033      	str	r3, [r6, #0]
 8011904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011908:	4607      	mov	r7, r0
 801190a:	460c      	mov	r4, r1
 801190c:	b10a      	cbz	r2, 8011912 <_printf_common+0x26>
 801190e:	3301      	adds	r3, #1
 8011910:	6033      	str	r3, [r6, #0]
 8011912:	6823      	ldr	r3, [r4, #0]
 8011914:	0699      	lsls	r1, r3, #26
 8011916:	bf42      	ittt	mi
 8011918:	6833      	ldrmi	r3, [r6, #0]
 801191a:	3302      	addmi	r3, #2
 801191c:	6033      	strmi	r3, [r6, #0]
 801191e:	6825      	ldr	r5, [r4, #0]
 8011920:	f015 0506 	ands.w	r5, r5, #6
 8011924:	d106      	bne.n	8011934 <_printf_common+0x48>
 8011926:	f104 0a19 	add.w	sl, r4, #25
 801192a:	68e3      	ldr	r3, [r4, #12]
 801192c:	6832      	ldr	r2, [r6, #0]
 801192e:	1a9b      	subs	r3, r3, r2
 8011930:	42ab      	cmp	r3, r5
 8011932:	dc26      	bgt.n	8011982 <_printf_common+0x96>
 8011934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011938:	1e13      	subs	r3, r2, #0
 801193a:	6822      	ldr	r2, [r4, #0]
 801193c:	bf18      	it	ne
 801193e:	2301      	movne	r3, #1
 8011940:	0692      	lsls	r2, r2, #26
 8011942:	d42b      	bmi.n	801199c <_printf_common+0xb0>
 8011944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011948:	4649      	mov	r1, r9
 801194a:	4638      	mov	r0, r7
 801194c:	47c0      	blx	r8
 801194e:	3001      	adds	r0, #1
 8011950:	d01e      	beq.n	8011990 <_printf_common+0xa4>
 8011952:	6823      	ldr	r3, [r4, #0]
 8011954:	68e5      	ldr	r5, [r4, #12]
 8011956:	6832      	ldr	r2, [r6, #0]
 8011958:	f003 0306 	and.w	r3, r3, #6
 801195c:	2b04      	cmp	r3, #4
 801195e:	bf08      	it	eq
 8011960:	1aad      	subeq	r5, r5, r2
 8011962:	68a3      	ldr	r3, [r4, #8]
 8011964:	6922      	ldr	r2, [r4, #16]
 8011966:	bf0c      	ite	eq
 8011968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801196c:	2500      	movne	r5, #0
 801196e:	4293      	cmp	r3, r2
 8011970:	bfc4      	itt	gt
 8011972:	1a9b      	subgt	r3, r3, r2
 8011974:	18ed      	addgt	r5, r5, r3
 8011976:	2600      	movs	r6, #0
 8011978:	341a      	adds	r4, #26
 801197a:	42b5      	cmp	r5, r6
 801197c:	d11a      	bne.n	80119b4 <_printf_common+0xc8>
 801197e:	2000      	movs	r0, #0
 8011980:	e008      	b.n	8011994 <_printf_common+0xa8>
 8011982:	2301      	movs	r3, #1
 8011984:	4652      	mov	r2, sl
 8011986:	4649      	mov	r1, r9
 8011988:	4638      	mov	r0, r7
 801198a:	47c0      	blx	r8
 801198c:	3001      	adds	r0, #1
 801198e:	d103      	bne.n	8011998 <_printf_common+0xac>
 8011990:	f04f 30ff 	mov.w	r0, #4294967295
 8011994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011998:	3501      	adds	r5, #1
 801199a:	e7c6      	b.n	801192a <_printf_common+0x3e>
 801199c:	18e1      	adds	r1, r4, r3
 801199e:	1c5a      	adds	r2, r3, #1
 80119a0:	2030      	movs	r0, #48	; 0x30
 80119a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80119a6:	4422      	add	r2, r4
 80119a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80119ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80119b0:	3302      	adds	r3, #2
 80119b2:	e7c7      	b.n	8011944 <_printf_common+0x58>
 80119b4:	2301      	movs	r3, #1
 80119b6:	4622      	mov	r2, r4
 80119b8:	4649      	mov	r1, r9
 80119ba:	4638      	mov	r0, r7
 80119bc:	47c0      	blx	r8
 80119be:	3001      	adds	r0, #1
 80119c0:	d0e6      	beq.n	8011990 <_printf_common+0xa4>
 80119c2:	3601      	adds	r6, #1
 80119c4:	e7d9      	b.n	801197a <_printf_common+0x8e>
	...

080119c8 <_printf_i>:
 80119c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80119cc:	7e0f      	ldrb	r7, [r1, #24]
 80119ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80119d0:	2f78      	cmp	r7, #120	; 0x78
 80119d2:	4691      	mov	r9, r2
 80119d4:	4680      	mov	r8, r0
 80119d6:	460c      	mov	r4, r1
 80119d8:	469a      	mov	sl, r3
 80119da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80119de:	d807      	bhi.n	80119f0 <_printf_i+0x28>
 80119e0:	2f62      	cmp	r7, #98	; 0x62
 80119e2:	d80a      	bhi.n	80119fa <_printf_i+0x32>
 80119e4:	2f00      	cmp	r7, #0
 80119e6:	f000 80d8 	beq.w	8011b9a <_printf_i+0x1d2>
 80119ea:	2f58      	cmp	r7, #88	; 0x58
 80119ec:	f000 80a3 	beq.w	8011b36 <_printf_i+0x16e>
 80119f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80119f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80119f8:	e03a      	b.n	8011a70 <_printf_i+0xa8>
 80119fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80119fe:	2b15      	cmp	r3, #21
 8011a00:	d8f6      	bhi.n	80119f0 <_printf_i+0x28>
 8011a02:	a101      	add	r1, pc, #4	; (adr r1, 8011a08 <_printf_i+0x40>)
 8011a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011a08:	08011a61 	.word	0x08011a61
 8011a0c:	08011a75 	.word	0x08011a75
 8011a10:	080119f1 	.word	0x080119f1
 8011a14:	080119f1 	.word	0x080119f1
 8011a18:	080119f1 	.word	0x080119f1
 8011a1c:	080119f1 	.word	0x080119f1
 8011a20:	08011a75 	.word	0x08011a75
 8011a24:	080119f1 	.word	0x080119f1
 8011a28:	080119f1 	.word	0x080119f1
 8011a2c:	080119f1 	.word	0x080119f1
 8011a30:	080119f1 	.word	0x080119f1
 8011a34:	08011b81 	.word	0x08011b81
 8011a38:	08011aa5 	.word	0x08011aa5
 8011a3c:	08011b63 	.word	0x08011b63
 8011a40:	080119f1 	.word	0x080119f1
 8011a44:	080119f1 	.word	0x080119f1
 8011a48:	08011ba3 	.word	0x08011ba3
 8011a4c:	080119f1 	.word	0x080119f1
 8011a50:	08011aa5 	.word	0x08011aa5
 8011a54:	080119f1 	.word	0x080119f1
 8011a58:	080119f1 	.word	0x080119f1
 8011a5c:	08011b6b 	.word	0x08011b6b
 8011a60:	682b      	ldr	r3, [r5, #0]
 8011a62:	1d1a      	adds	r2, r3, #4
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	602a      	str	r2, [r5, #0]
 8011a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011a70:	2301      	movs	r3, #1
 8011a72:	e0a3      	b.n	8011bbc <_printf_i+0x1f4>
 8011a74:	6820      	ldr	r0, [r4, #0]
 8011a76:	6829      	ldr	r1, [r5, #0]
 8011a78:	0606      	lsls	r6, r0, #24
 8011a7a:	f101 0304 	add.w	r3, r1, #4
 8011a7e:	d50a      	bpl.n	8011a96 <_printf_i+0xce>
 8011a80:	680e      	ldr	r6, [r1, #0]
 8011a82:	602b      	str	r3, [r5, #0]
 8011a84:	2e00      	cmp	r6, #0
 8011a86:	da03      	bge.n	8011a90 <_printf_i+0xc8>
 8011a88:	232d      	movs	r3, #45	; 0x2d
 8011a8a:	4276      	negs	r6, r6
 8011a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a90:	485e      	ldr	r0, [pc, #376]	; (8011c0c <_printf_i+0x244>)
 8011a92:	230a      	movs	r3, #10
 8011a94:	e019      	b.n	8011aca <_printf_i+0x102>
 8011a96:	680e      	ldr	r6, [r1, #0]
 8011a98:	602b      	str	r3, [r5, #0]
 8011a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011a9e:	bf18      	it	ne
 8011aa0:	b236      	sxthne	r6, r6
 8011aa2:	e7ef      	b.n	8011a84 <_printf_i+0xbc>
 8011aa4:	682b      	ldr	r3, [r5, #0]
 8011aa6:	6820      	ldr	r0, [r4, #0]
 8011aa8:	1d19      	adds	r1, r3, #4
 8011aaa:	6029      	str	r1, [r5, #0]
 8011aac:	0601      	lsls	r1, r0, #24
 8011aae:	d501      	bpl.n	8011ab4 <_printf_i+0xec>
 8011ab0:	681e      	ldr	r6, [r3, #0]
 8011ab2:	e002      	b.n	8011aba <_printf_i+0xf2>
 8011ab4:	0646      	lsls	r6, r0, #25
 8011ab6:	d5fb      	bpl.n	8011ab0 <_printf_i+0xe8>
 8011ab8:	881e      	ldrh	r6, [r3, #0]
 8011aba:	4854      	ldr	r0, [pc, #336]	; (8011c0c <_printf_i+0x244>)
 8011abc:	2f6f      	cmp	r7, #111	; 0x6f
 8011abe:	bf0c      	ite	eq
 8011ac0:	2308      	moveq	r3, #8
 8011ac2:	230a      	movne	r3, #10
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011aca:	6865      	ldr	r5, [r4, #4]
 8011acc:	60a5      	str	r5, [r4, #8]
 8011ace:	2d00      	cmp	r5, #0
 8011ad0:	bfa2      	ittt	ge
 8011ad2:	6821      	ldrge	r1, [r4, #0]
 8011ad4:	f021 0104 	bicge.w	r1, r1, #4
 8011ad8:	6021      	strge	r1, [r4, #0]
 8011ada:	b90e      	cbnz	r6, 8011ae0 <_printf_i+0x118>
 8011adc:	2d00      	cmp	r5, #0
 8011ade:	d04d      	beq.n	8011b7c <_printf_i+0x1b4>
 8011ae0:	4615      	mov	r5, r2
 8011ae2:	fbb6 f1f3 	udiv	r1, r6, r3
 8011ae6:	fb03 6711 	mls	r7, r3, r1, r6
 8011aea:	5dc7      	ldrb	r7, [r0, r7]
 8011aec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011af0:	4637      	mov	r7, r6
 8011af2:	42bb      	cmp	r3, r7
 8011af4:	460e      	mov	r6, r1
 8011af6:	d9f4      	bls.n	8011ae2 <_printf_i+0x11a>
 8011af8:	2b08      	cmp	r3, #8
 8011afa:	d10b      	bne.n	8011b14 <_printf_i+0x14c>
 8011afc:	6823      	ldr	r3, [r4, #0]
 8011afe:	07de      	lsls	r6, r3, #31
 8011b00:	d508      	bpl.n	8011b14 <_printf_i+0x14c>
 8011b02:	6923      	ldr	r3, [r4, #16]
 8011b04:	6861      	ldr	r1, [r4, #4]
 8011b06:	4299      	cmp	r1, r3
 8011b08:	bfde      	ittt	le
 8011b0a:	2330      	movle	r3, #48	; 0x30
 8011b0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011b14:	1b52      	subs	r2, r2, r5
 8011b16:	6122      	str	r2, [r4, #16]
 8011b18:	f8cd a000 	str.w	sl, [sp]
 8011b1c:	464b      	mov	r3, r9
 8011b1e:	aa03      	add	r2, sp, #12
 8011b20:	4621      	mov	r1, r4
 8011b22:	4640      	mov	r0, r8
 8011b24:	f7ff fee2 	bl	80118ec <_printf_common>
 8011b28:	3001      	adds	r0, #1
 8011b2a:	d14c      	bne.n	8011bc6 <_printf_i+0x1fe>
 8011b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b30:	b004      	add	sp, #16
 8011b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b36:	4835      	ldr	r0, [pc, #212]	; (8011c0c <_printf_i+0x244>)
 8011b38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011b3c:	6829      	ldr	r1, [r5, #0]
 8011b3e:	6823      	ldr	r3, [r4, #0]
 8011b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8011b44:	6029      	str	r1, [r5, #0]
 8011b46:	061d      	lsls	r5, r3, #24
 8011b48:	d514      	bpl.n	8011b74 <_printf_i+0x1ac>
 8011b4a:	07df      	lsls	r7, r3, #31
 8011b4c:	bf44      	itt	mi
 8011b4e:	f043 0320 	orrmi.w	r3, r3, #32
 8011b52:	6023      	strmi	r3, [r4, #0]
 8011b54:	b91e      	cbnz	r6, 8011b5e <_printf_i+0x196>
 8011b56:	6823      	ldr	r3, [r4, #0]
 8011b58:	f023 0320 	bic.w	r3, r3, #32
 8011b5c:	6023      	str	r3, [r4, #0]
 8011b5e:	2310      	movs	r3, #16
 8011b60:	e7b0      	b.n	8011ac4 <_printf_i+0xfc>
 8011b62:	6823      	ldr	r3, [r4, #0]
 8011b64:	f043 0320 	orr.w	r3, r3, #32
 8011b68:	6023      	str	r3, [r4, #0]
 8011b6a:	2378      	movs	r3, #120	; 0x78
 8011b6c:	4828      	ldr	r0, [pc, #160]	; (8011c10 <_printf_i+0x248>)
 8011b6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011b72:	e7e3      	b.n	8011b3c <_printf_i+0x174>
 8011b74:	0659      	lsls	r1, r3, #25
 8011b76:	bf48      	it	mi
 8011b78:	b2b6      	uxthmi	r6, r6
 8011b7a:	e7e6      	b.n	8011b4a <_printf_i+0x182>
 8011b7c:	4615      	mov	r5, r2
 8011b7e:	e7bb      	b.n	8011af8 <_printf_i+0x130>
 8011b80:	682b      	ldr	r3, [r5, #0]
 8011b82:	6826      	ldr	r6, [r4, #0]
 8011b84:	6961      	ldr	r1, [r4, #20]
 8011b86:	1d18      	adds	r0, r3, #4
 8011b88:	6028      	str	r0, [r5, #0]
 8011b8a:	0635      	lsls	r5, r6, #24
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	d501      	bpl.n	8011b94 <_printf_i+0x1cc>
 8011b90:	6019      	str	r1, [r3, #0]
 8011b92:	e002      	b.n	8011b9a <_printf_i+0x1d2>
 8011b94:	0670      	lsls	r0, r6, #25
 8011b96:	d5fb      	bpl.n	8011b90 <_printf_i+0x1c8>
 8011b98:	8019      	strh	r1, [r3, #0]
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	6123      	str	r3, [r4, #16]
 8011b9e:	4615      	mov	r5, r2
 8011ba0:	e7ba      	b.n	8011b18 <_printf_i+0x150>
 8011ba2:	682b      	ldr	r3, [r5, #0]
 8011ba4:	1d1a      	adds	r2, r3, #4
 8011ba6:	602a      	str	r2, [r5, #0]
 8011ba8:	681d      	ldr	r5, [r3, #0]
 8011baa:	6862      	ldr	r2, [r4, #4]
 8011bac:	2100      	movs	r1, #0
 8011bae:	4628      	mov	r0, r5
 8011bb0:	f7ee fb16 	bl	80001e0 <memchr>
 8011bb4:	b108      	cbz	r0, 8011bba <_printf_i+0x1f2>
 8011bb6:	1b40      	subs	r0, r0, r5
 8011bb8:	6060      	str	r0, [r4, #4]
 8011bba:	6863      	ldr	r3, [r4, #4]
 8011bbc:	6123      	str	r3, [r4, #16]
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bc4:	e7a8      	b.n	8011b18 <_printf_i+0x150>
 8011bc6:	6923      	ldr	r3, [r4, #16]
 8011bc8:	462a      	mov	r2, r5
 8011bca:	4649      	mov	r1, r9
 8011bcc:	4640      	mov	r0, r8
 8011bce:	47d0      	blx	sl
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	d0ab      	beq.n	8011b2c <_printf_i+0x164>
 8011bd4:	6823      	ldr	r3, [r4, #0]
 8011bd6:	079b      	lsls	r3, r3, #30
 8011bd8:	d413      	bmi.n	8011c02 <_printf_i+0x23a>
 8011bda:	68e0      	ldr	r0, [r4, #12]
 8011bdc:	9b03      	ldr	r3, [sp, #12]
 8011bde:	4298      	cmp	r0, r3
 8011be0:	bfb8      	it	lt
 8011be2:	4618      	movlt	r0, r3
 8011be4:	e7a4      	b.n	8011b30 <_printf_i+0x168>
 8011be6:	2301      	movs	r3, #1
 8011be8:	4632      	mov	r2, r6
 8011bea:	4649      	mov	r1, r9
 8011bec:	4640      	mov	r0, r8
 8011bee:	47d0      	blx	sl
 8011bf0:	3001      	adds	r0, #1
 8011bf2:	d09b      	beq.n	8011b2c <_printf_i+0x164>
 8011bf4:	3501      	adds	r5, #1
 8011bf6:	68e3      	ldr	r3, [r4, #12]
 8011bf8:	9903      	ldr	r1, [sp, #12]
 8011bfa:	1a5b      	subs	r3, r3, r1
 8011bfc:	42ab      	cmp	r3, r5
 8011bfe:	dcf2      	bgt.n	8011be6 <_printf_i+0x21e>
 8011c00:	e7eb      	b.n	8011bda <_printf_i+0x212>
 8011c02:	2500      	movs	r5, #0
 8011c04:	f104 0619 	add.w	r6, r4, #25
 8011c08:	e7f5      	b.n	8011bf6 <_printf_i+0x22e>
 8011c0a:	bf00      	nop
 8011c0c:	08012805 	.word	0x08012805
 8011c10:	08012816 	.word	0x08012816

08011c14 <_read_r>:
 8011c14:	b538      	push	{r3, r4, r5, lr}
 8011c16:	4d07      	ldr	r5, [pc, #28]	; (8011c34 <_read_r+0x20>)
 8011c18:	4604      	mov	r4, r0
 8011c1a:	4608      	mov	r0, r1
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	2200      	movs	r2, #0
 8011c20:	602a      	str	r2, [r5, #0]
 8011c22:	461a      	mov	r2, r3
 8011c24:	f7f1 fca4 	bl	8003570 <_read>
 8011c28:	1c43      	adds	r3, r0, #1
 8011c2a:	d102      	bne.n	8011c32 <_read_r+0x1e>
 8011c2c:	682b      	ldr	r3, [r5, #0]
 8011c2e:	b103      	cbz	r3, 8011c32 <_read_r+0x1e>
 8011c30:	6023      	str	r3, [r4, #0]
 8011c32:	bd38      	pop	{r3, r4, r5, pc}
 8011c34:	200028a4 	.word	0x200028a4

08011c38 <nan>:
 8011c38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011c40 <nan+0x8>
 8011c3c:	4770      	bx	lr
 8011c3e:	bf00      	nop
 8011c40:	00000000 	.word	0x00000000
 8011c44:	7ff80000 	.word	0x7ff80000

08011c48 <_sbrk_r>:
 8011c48:	b538      	push	{r3, r4, r5, lr}
 8011c4a:	4d06      	ldr	r5, [pc, #24]	; (8011c64 <_sbrk_r+0x1c>)
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	4604      	mov	r4, r0
 8011c50:	4608      	mov	r0, r1
 8011c52:	602b      	str	r3, [r5, #0]
 8011c54:	f7f1 fcfa 	bl	800364c <_sbrk>
 8011c58:	1c43      	adds	r3, r0, #1
 8011c5a:	d102      	bne.n	8011c62 <_sbrk_r+0x1a>
 8011c5c:	682b      	ldr	r3, [r5, #0]
 8011c5e:	b103      	cbz	r3, 8011c62 <_sbrk_r+0x1a>
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	bd38      	pop	{r3, r4, r5, pc}
 8011c64:	200028a4 	.word	0x200028a4

08011c68 <__ascii_wctomb>:
 8011c68:	b149      	cbz	r1, 8011c7e <__ascii_wctomb+0x16>
 8011c6a:	2aff      	cmp	r2, #255	; 0xff
 8011c6c:	bf85      	ittet	hi
 8011c6e:	238a      	movhi	r3, #138	; 0x8a
 8011c70:	6003      	strhi	r3, [r0, #0]
 8011c72:	700a      	strbls	r2, [r1, #0]
 8011c74:	f04f 30ff 	movhi.w	r0, #4294967295
 8011c78:	bf98      	it	ls
 8011c7a:	2001      	movls	r0, #1
 8011c7c:	4770      	bx	lr
 8011c7e:	4608      	mov	r0, r1
 8011c80:	4770      	bx	lr
	...

08011c84 <__assert_func>:
 8011c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c86:	4614      	mov	r4, r2
 8011c88:	461a      	mov	r2, r3
 8011c8a:	4b09      	ldr	r3, [pc, #36]	; (8011cb0 <__assert_func+0x2c>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	4605      	mov	r5, r0
 8011c90:	68d8      	ldr	r0, [r3, #12]
 8011c92:	b14c      	cbz	r4, 8011ca8 <__assert_func+0x24>
 8011c94:	4b07      	ldr	r3, [pc, #28]	; (8011cb4 <__assert_func+0x30>)
 8011c96:	9100      	str	r1, [sp, #0]
 8011c98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011c9c:	4906      	ldr	r1, [pc, #24]	; (8011cb8 <__assert_func+0x34>)
 8011c9e:	462b      	mov	r3, r5
 8011ca0:	f000 f80e 	bl	8011cc0 <fiprintf>
 8011ca4:	f000 f9f6 	bl	8012094 <abort>
 8011ca8:	4b04      	ldr	r3, [pc, #16]	; (8011cbc <__assert_func+0x38>)
 8011caa:	461c      	mov	r4, r3
 8011cac:	e7f3      	b.n	8011c96 <__assert_func+0x12>
 8011cae:	bf00      	nop
 8011cb0:	20000010 	.word	0x20000010
 8011cb4:	08012827 	.word	0x08012827
 8011cb8:	08012834 	.word	0x08012834
 8011cbc:	08012862 	.word	0x08012862

08011cc0 <fiprintf>:
 8011cc0:	b40e      	push	{r1, r2, r3}
 8011cc2:	b503      	push	{r0, r1, lr}
 8011cc4:	4601      	mov	r1, r0
 8011cc6:	ab03      	add	r3, sp, #12
 8011cc8:	4805      	ldr	r0, [pc, #20]	; (8011ce0 <fiprintf+0x20>)
 8011cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cce:	6800      	ldr	r0, [r0, #0]
 8011cd0:	9301      	str	r3, [sp, #4]
 8011cd2:	f000 f8af 	bl	8011e34 <_vfiprintf_r>
 8011cd6:	b002      	add	sp, #8
 8011cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cdc:	b003      	add	sp, #12
 8011cde:	4770      	bx	lr
 8011ce0:	20000010 	.word	0x20000010

08011ce4 <_fstat_r>:
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	4d07      	ldr	r5, [pc, #28]	; (8011d04 <_fstat_r+0x20>)
 8011ce8:	2300      	movs	r3, #0
 8011cea:	4604      	mov	r4, r0
 8011cec:	4608      	mov	r0, r1
 8011cee:	4611      	mov	r1, r2
 8011cf0:	602b      	str	r3, [r5, #0]
 8011cf2:	f7f1 fc82 	bl	80035fa <_fstat>
 8011cf6:	1c43      	adds	r3, r0, #1
 8011cf8:	d102      	bne.n	8011d00 <_fstat_r+0x1c>
 8011cfa:	682b      	ldr	r3, [r5, #0]
 8011cfc:	b103      	cbz	r3, 8011d00 <_fstat_r+0x1c>
 8011cfe:	6023      	str	r3, [r4, #0]
 8011d00:	bd38      	pop	{r3, r4, r5, pc}
 8011d02:	bf00      	nop
 8011d04:	200028a4 	.word	0x200028a4

08011d08 <_isatty_r>:
 8011d08:	b538      	push	{r3, r4, r5, lr}
 8011d0a:	4d06      	ldr	r5, [pc, #24]	; (8011d24 <_isatty_r+0x1c>)
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	4604      	mov	r4, r0
 8011d10:	4608      	mov	r0, r1
 8011d12:	602b      	str	r3, [r5, #0]
 8011d14:	f7f1 fc81 	bl	800361a <_isatty>
 8011d18:	1c43      	adds	r3, r0, #1
 8011d1a:	d102      	bne.n	8011d22 <_isatty_r+0x1a>
 8011d1c:	682b      	ldr	r3, [r5, #0]
 8011d1e:	b103      	cbz	r3, 8011d22 <_isatty_r+0x1a>
 8011d20:	6023      	str	r3, [r4, #0]
 8011d22:	bd38      	pop	{r3, r4, r5, pc}
 8011d24:	200028a4 	.word	0x200028a4

08011d28 <malloc>:
 8011d28:	4b02      	ldr	r3, [pc, #8]	; (8011d34 <malloc+0xc>)
 8011d2a:	4601      	mov	r1, r0
 8011d2c:	6818      	ldr	r0, [r3, #0]
 8011d2e:	f7ff bc0d 	b.w	801154c <_malloc_r>
 8011d32:	bf00      	nop
 8011d34:	20000010 	.word	0x20000010

08011d38 <memmove>:
 8011d38:	4288      	cmp	r0, r1
 8011d3a:	b510      	push	{r4, lr}
 8011d3c:	eb01 0402 	add.w	r4, r1, r2
 8011d40:	d902      	bls.n	8011d48 <memmove+0x10>
 8011d42:	4284      	cmp	r4, r0
 8011d44:	4623      	mov	r3, r4
 8011d46:	d807      	bhi.n	8011d58 <memmove+0x20>
 8011d48:	1e43      	subs	r3, r0, #1
 8011d4a:	42a1      	cmp	r1, r4
 8011d4c:	d008      	beq.n	8011d60 <memmove+0x28>
 8011d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d56:	e7f8      	b.n	8011d4a <memmove+0x12>
 8011d58:	4402      	add	r2, r0
 8011d5a:	4601      	mov	r1, r0
 8011d5c:	428a      	cmp	r2, r1
 8011d5e:	d100      	bne.n	8011d62 <memmove+0x2a>
 8011d60:	bd10      	pop	{r4, pc}
 8011d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011d6a:	e7f7      	b.n	8011d5c <memmove+0x24>

08011d6c <__malloc_lock>:
 8011d6c:	4801      	ldr	r0, [pc, #4]	; (8011d74 <__malloc_lock+0x8>)
 8011d6e:	f7fe be1c 	b.w	80109aa <__retarget_lock_acquire_recursive>
 8011d72:	bf00      	nop
 8011d74:	20002898 	.word	0x20002898

08011d78 <__malloc_unlock>:
 8011d78:	4801      	ldr	r0, [pc, #4]	; (8011d80 <__malloc_unlock+0x8>)
 8011d7a:	f7fe be17 	b.w	80109ac <__retarget_lock_release_recursive>
 8011d7e:	bf00      	nop
 8011d80:	20002898 	.word	0x20002898

08011d84 <_realloc_r>:
 8011d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d88:	4680      	mov	r8, r0
 8011d8a:	4614      	mov	r4, r2
 8011d8c:	460e      	mov	r6, r1
 8011d8e:	b921      	cbnz	r1, 8011d9a <_realloc_r+0x16>
 8011d90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d94:	4611      	mov	r1, r2
 8011d96:	f7ff bbd9 	b.w	801154c <_malloc_r>
 8011d9a:	b92a      	cbnz	r2, 8011da8 <_realloc_r+0x24>
 8011d9c:	f7ff fb6a 	bl	8011474 <_free_r>
 8011da0:	4625      	mov	r5, r4
 8011da2:	4628      	mov	r0, r5
 8011da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da8:	f000 f97b 	bl	80120a2 <_malloc_usable_size_r>
 8011dac:	4284      	cmp	r4, r0
 8011dae:	4607      	mov	r7, r0
 8011db0:	d802      	bhi.n	8011db8 <_realloc_r+0x34>
 8011db2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011db6:	d812      	bhi.n	8011dde <_realloc_r+0x5a>
 8011db8:	4621      	mov	r1, r4
 8011dba:	4640      	mov	r0, r8
 8011dbc:	f7ff fbc6 	bl	801154c <_malloc_r>
 8011dc0:	4605      	mov	r5, r0
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d0ed      	beq.n	8011da2 <_realloc_r+0x1e>
 8011dc6:	42bc      	cmp	r4, r7
 8011dc8:	4622      	mov	r2, r4
 8011dca:	4631      	mov	r1, r6
 8011dcc:	bf28      	it	cs
 8011dce:	463a      	movcs	r2, r7
 8011dd0:	f7fc fde6 	bl	800e9a0 <memcpy>
 8011dd4:	4631      	mov	r1, r6
 8011dd6:	4640      	mov	r0, r8
 8011dd8:	f7ff fb4c 	bl	8011474 <_free_r>
 8011ddc:	e7e1      	b.n	8011da2 <_realloc_r+0x1e>
 8011dde:	4635      	mov	r5, r6
 8011de0:	e7df      	b.n	8011da2 <_realloc_r+0x1e>

08011de2 <__sfputc_r>:
 8011de2:	6893      	ldr	r3, [r2, #8]
 8011de4:	3b01      	subs	r3, #1
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	b410      	push	{r4}
 8011dea:	6093      	str	r3, [r2, #8]
 8011dec:	da08      	bge.n	8011e00 <__sfputc_r+0x1e>
 8011dee:	6994      	ldr	r4, [r2, #24]
 8011df0:	42a3      	cmp	r3, r4
 8011df2:	db01      	blt.n	8011df8 <__sfputc_r+0x16>
 8011df4:	290a      	cmp	r1, #10
 8011df6:	d103      	bne.n	8011e00 <__sfputc_r+0x1e>
 8011df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dfc:	f7fd bfcc 	b.w	800fd98 <__swbuf_r>
 8011e00:	6813      	ldr	r3, [r2, #0]
 8011e02:	1c58      	adds	r0, r3, #1
 8011e04:	6010      	str	r0, [r2, #0]
 8011e06:	7019      	strb	r1, [r3, #0]
 8011e08:	4608      	mov	r0, r1
 8011e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <__sfputs_r>:
 8011e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e12:	4606      	mov	r6, r0
 8011e14:	460f      	mov	r7, r1
 8011e16:	4614      	mov	r4, r2
 8011e18:	18d5      	adds	r5, r2, r3
 8011e1a:	42ac      	cmp	r4, r5
 8011e1c:	d101      	bne.n	8011e22 <__sfputs_r+0x12>
 8011e1e:	2000      	movs	r0, #0
 8011e20:	e007      	b.n	8011e32 <__sfputs_r+0x22>
 8011e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e26:	463a      	mov	r2, r7
 8011e28:	4630      	mov	r0, r6
 8011e2a:	f7ff ffda 	bl	8011de2 <__sfputc_r>
 8011e2e:	1c43      	adds	r3, r0, #1
 8011e30:	d1f3      	bne.n	8011e1a <__sfputs_r+0xa>
 8011e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011e34 <_vfiprintf_r>:
 8011e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e38:	460d      	mov	r5, r1
 8011e3a:	b09d      	sub	sp, #116	; 0x74
 8011e3c:	4614      	mov	r4, r2
 8011e3e:	4698      	mov	r8, r3
 8011e40:	4606      	mov	r6, r0
 8011e42:	b118      	cbz	r0, 8011e4c <_vfiprintf_r+0x18>
 8011e44:	6983      	ldr	r3, [r0, #24]
 8011e46:	b90b      	cbnz	r3, 8011e4c <_vfiprintf_r+0x18>
 8011e48:	f7fe f9a2 	bl	8010190 <__sinit>
 8011e4c:	4b89      	ldr	r3, [pc, #548]	; (8012074 <_vfiprintf_r+0x240>)
 8011e4e:	429d      	cmp	r5, r3
 8011e50:	d11b      	bne.n	8011e8a <_vfiprintf_r+0x56>
 8011e52:	6875      	ldr	r5, [r6, #4]
 8011e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e56:	07d9      	lsls	r1, r3, #31
 8011e58:	d405      	bmi.n	8011e66 <_vfiprintf_r+0x32>
 8011e5a:	89ab      	ldrh	r3, [r5, #12]
 8011e5c:	059a      	lsls	r2, r3, #22
 8011e5e:	d402      	bmi.n	8011e66 <_vfiprintf_r+0x32>
 8011e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e62:	f7fe fda2 	bl	80109aa <__retarget_lock_acquire_recursive>
 8011e66:	89ab      	ldrh	r3, [r5, #12]
 8011e68:	071b      	lsls	r3, r3, #28
 8011e6a:	d501      	bpl.n	8011e70 <_vfiprintf_r+0x3c>
 8011e6c:	692b      	ldr	r3, [r5, #16]
 8011e6e:	b9eb      	cbnz	r3, 8011eac <_vfiprintf_r+0x78>
 8011e70:	4629      	mov	r1, r5
 8011e72:	4630      	mov	r0, r6
 8011e74:	f7fd fff4 	bl	800fe60 <__swsetup_r>
 8011e78:	b1c0      	cbz	r0, 8011eac <_vfiprintf_r+0x78>
 8011e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e7c:	07dc      	lsls	r4, r3, #31
 8011e7e:	d50e      	bpl.n	8011e9e <_vfiprintf_r+0x6a>
 8011e80:	f04f 30ff 	mov.w	r0, #4294967295
 8011e84:	b01d      	add	sp, #116	; 0x74
 8011e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e8a:	4b7b      	ldr	r3, [pc, #492]	; (8012078 <_vfiprintf_r+0x244>)
 8011e8c:	429d      	cmp	r5, r3
 8011e8e:	d101      	bne.n	8011e94 <_vfiprintf_r+0x60>
 8011e90:	68b5      	ldr	r5, [r6, #8]
 8011e92:	e7df      	b.n	8011e54 <_vfiprintf_r+0x20>
 8011e94:	4b79      	ldr	r3, [pc, #484]	; (801207c <_vfiprintf_r+0x248>)
 8011e96:	429d      	cmp	r5, r3
 8011e98:	bf08      	it	eq
 8011e9a:	68f5      	ldreq	r5, [r6, #12]
 8011e9c:	e7da      	b.n	8011e54 <_vfiprintf_r+0x20>
 8011e9e:	89ab      	ldrh	r3, [r5, #12]
 8011ea0:	0598      	lsls	r0, r3, #22
 8011ea2:	d4ed      	bmi.n	8011e80 <_vfiprintf_r+0x4c>
 8011ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011ea6:	f7fe fd81 	bl	80109ac <__retarget_lock_release_recursive>
 8011eaa:	e7e9      	b.n	8011e80 <_vfiprintf_r+0x4c>
 8011eac:	2300      	movs	r3, #0
 8011eae:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb0:	2320      	movs	r3, #32
 8011eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011eba:	2330      	movs	r3, #48	; 0x30
 8011ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012080 <_vfiprintf_r+0x24c>
 8011ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ec4:	f04f 0901 	mov.w	r9, #1
 8011ec8:	4623      	mov	r3, r4
 8011eca:	469a      	mov	sl, r3
 8011ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ed0:	b10a      	cbz	r2, 8011ed6 <_vfiprintf_r+0xa2>
 8011ed2:	2a25      	cmp	r2, #37	; 0x25
 8011ed4:	d1f9      	bne.n	8011eca <_vfiprintf_r+0x96>
 8011ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8011eda:	d00b      	beq.n	8011ef4 <_vfiprintf_r+0xc0>
 8011edc:	465b      	mov	r3, fp
 8011ede:	4622      	mov	r2, r4
 8011ee0:	4629      	mov	r1, r5
 8011ee2:	4630      	mov	r0, r6
 8011ee4:	f7ff ff94 	bl	8011e10 <__sfputs_r>
 8011ee8:	3001      	adds	r0, #1
 8011eea:	f000 80aa 	beq.w	8012042 <_vfiprintf_r+0x20e>
 8011eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ef0:	445a      	add	r2, fp
 8011ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	f000 80a2 	beq.w	8012042 <_vfiprintf_r+0x20e>
 8011efe:	2300      	movs	r3, #0
 8011f00:	f04f 32ff 	mov.w	r2, #4294967295
 8011f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f08:	f10a 0a01 	add.w	sl, sl, #1
 8011f0c:	9304      	str	r3, [sp, #16]
 8011f0e:	9307      	str	r3, [sp, #28]
 8011f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011f14:	931a      	str	r3, [sp, #104]	; 0x68
 8011f16:	4654      	mov	r4, sl
 8011f18:	2205      	movs	r2, #5
 8011f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f1e:	4858      	ldr	r0, [pc, #352]	; (8012080 <_vfiprintf_r+0x24c>)
 8011f20:	f7ee f95e 	bl	80001e0 <memchr>
 8011f24:	9a04      	ldr	r2, [sp, #16]
 8011f26:	b9d8      	cbnz	r0, 8011f60 <_vfiprintf_r+0x12c>
 8011f28:	06d1      	lsls	r1, r2, #27
 8011f2a:	bf44      	itt	mi
 8011f2c:	2320      	movmi	r3, #32
 8011f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f32:	0713      	lsls	r3, r2, #28
 8011f34:	bf44      	itt	mi
 8011f36:	232b      	movmi	r3, #43	; 0x2b
 8011f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8011f40:	2b2a      	cmp	r3, #42	; 0x2a
 8011f42:	d015      	beq.n	8011f70 <_vfiprintf_r+0x13c>
 8011f44:	9a07      	ldr	r2, [sp, #28]
 8011f46:	4654      	mov	r4, sl
 8011f48:	2000      	movs	r0, #0
 8011f4a:	f04f 0c0a 	mov.w	ip, #10
 8011f4e:	4621      	mov	r1, r4
 8011f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f54:	3b30      	subs	r3, #48	; 0x30
 8011f56:	2b09      	cmp	r3, #9
 8011f58:	d94e      	bls.n	8011ff8 <_vfiprintf_r+0x1c4>
 8011f5a:	b1b0      	cbz	r0, 8011f8a <_vfiprintf_r+0x156>
 8011f5c:	9207      	str	r2, [sp, #28]
 8011f5e:	e014      	b.n	8011f8a <_vfiprintf_r+0x156>
 8011f60:	eba0 0308 	sub.w	r3, r0, r8
 8011f64:	fa09 f303 	lsl.w	r3, r9, r3
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	9304      	str	r3, [sp, #16]
 8011f6c:	46a2      	mov	sl, r4
 8011f6e:	e7d2      	b.n	8011f16 <_vfiprintf_r+0xe2>
 8011f70:	9b03      	ldr	r3, [sp, #12]
 8011f72:	1d19      	adds	r1, r3, #4
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	9103      	str	r1, [sp, #12]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	bfbb      	ittet	lt
 8011f7c:	425b      	neglt	r3, r3
 8011f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8011f82:	9307      	strge	r3, [sp, #28]
 8011f84:	9307      	strlt	r3, [sp, #28]
 8011f86:	bfb8      	it	lt
 8011f88:	9204      	strlt	r2, [sp, #16]
 8011f8a:	7823      	ldrb	r3, [r4, #0]
 8011f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8011f8e:	d10c      	bne.n	8011faa <_vfiprintf_r+0x176>
 8011f90:	7863      	ldrb	r3, [r4, #1]
 8011f92:	2b2a      	cmp	r3, #42	; 0x2a
 8011f94:	d135      	bne.n	8012002 <_vfiprintf_r+0x1ce>
 8011f96:	9b03      	ldr	r3, [sp, #12]
 8011f98:	1d1a      	adds	r2, r3, #4
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	9203      	str	r2, [sp, #12]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	bfb8      	it	lt
 8011fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8011fa6:	3402      	adds	r4, #2
 8011fa8:	9305      	str	r3, [sp, #20]
 8011faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012090 <_vfiprintf_r+0x25c>
 8011fae:	7821      	ldrb	r1, [r4, #0]
 8011fb0:	2203      	movs	r2, #3
 8011fb2:	4650      	mov	r0, sl
 8011fb4:	f7ee f914 	bl	80001e0 <memchr>
 8011fb8:	b140      	cbz	r0, 8011fcc <_vfiprintf_r+0x198>
 8011fba:	2340      	movs	r3, #64	; 0x40
 8011fbc:	eba0 000a 	sub.w	r0, r0, sl
 8011fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8011fc4:	9b04      	ldr	r3, [sp, #16]
 8011fc6:	4303      	orrs	r3, r0
 8011fc8:	3401      	adds	r4, #1
 8011fca:	9304      	str	r3, [sp, #16]
 8011fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fd0:	482c      	ldr	r0, [pc, #176]	; (8012084 <_vfiprintf_r+0x250>)
 8011fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011fd6:	2206      	movs	r2, #6
 8011fd8:	f7ee f902 	bl	80001e0 <memchr>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d03f      	beq.n	8012060 <_vfiprintf_r+0x22c>
 8011fe0:	4b29      	ldr	r3, [pc, #164]	; (8012088 <_vfiprintf_r+0x254>)
 8011fe2:	bb1b      	cbnz	r3, 801202c <_vfiprintf_r+0x1f8>
 8011fe4:	9b03      	ldr	r3, [sp, #12]
 8011fe6:	3307      	adds	r3, #7
 8011fe8:	f023 0307 	bic.w	r3, r3, #7
 8011fec:	3308      	adds	r3, #8
 8011fee:	9303      	str	r3, [sp, #12]
 8011ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ff2:	443b      	add	r3, r7
 8011ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ff6:	e767      	b.n	8011ec8 <_vfiprintf_r+0x94>
 8011ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ffc:	460c      	mov	r4, r1
 8011ffe:	2001      	movs	r0, #1
 8012000:	e7a5      	b.n	8011f4e <_vfiprintf_r+0x11a>
 8012002:	2300      	movs	r3, #0
 8012004:	3401      	adds	r4, #1
 8012006:	9305      	str	r3, [sp, #20]
 8012008:	4619      	mov	r1, r3
 801200a:	f04f 0c0a 	mov.w	ip, #10
 801200e:	4620      	mov	r0, r4
 8012010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012014:	3a30      	subs	r2, #48	; 0x30
 8012016:	2a09      	cmp	r2, #9
 8012018:	d903      	bls.n	8012022 <_vfiprintf_r+0x1ee>
 801201a:	2b00      	cmp	r3, #0
 801201c:	d0c5      	beq.n	8011faa <_vfiprintf_r+0x176>
 801201e:	9105      	str	r1, [sp, #20]
 8012020:	e7c3      	b.n	8011faa <_vfiprintf_r+0x176>
 8012022:	fb0c 2101 	mla	r1, ip, r1, r2
 8012026:	4604      	mov	r4, r0
 8012028:	2301      	movs	r3, #1
 801202a:	e7f0      	b.n	801200e <_vfiprintf_r+0x1da>
 801202c:	ab03      	add	r3, sp, #12
 801202e:	9300      	str	r3, [sp, #0]
 8012030:	462a      	mov	r2, r5
 8012032:	4b16      	ldr	r3, [pc, #88]	; (801208c <_vfiprintf_r+0x258>)
 8012034:	a904      	add	r1, sp, #16
 8012036:	4630      	mov	r0, r6
 8012038:	f3af 8000 	nop.w
 801203c:	4607      	mov	r7, r0
 801203e:	1c78      	adds	r0, r7, #1
 8012040:	d1d6      	bne.n	8011ff0 <_vfiprintf_r+0x1bc>
 8012042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012044:	07d9      	lsls	r1, r3, #31
 8012046:	d405      	bmi.n	8012054 <_vfiprintf_r+0x220>
 8012048:	89ab      	ldrh	r3, [r5, #12]
 801204a:	059a      	lsls	r2, r3, #22
 801204c:	d402      	bmi.n	8012054 <_vfiprintf_r+0x220>
 801204e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012050:	f7fe fcac 	bl	80109ac <__retarget_lock_release_recursive>
 8012054:	89ab      	ldrh	r3, [r5, #12]
 8012056:	065b      	lsls	r3, r3, #25
 8012058:	f53f af12 	bmi.w	8011e80 <_vfiprintf_r+0x4c>
 801205c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801205e:	e711      	b.n	8011e84 <_vfiprintf_r+0x50>
 8012060:	ab03      	add	r3, sp, #12
 8012062:	9300      	str	r3, [sp, #0]
 8012064:	462a      	mov	r2, r5
 8012066:	4b09      	ldr	r3, [pc, #36]	; (801208c <_vfiprintf_r+0x258>)
 8012068:	a904      	add	r1, sp, #16
 801206a:	4630      	mov	r0, r6
 801206c:	f7ff fcac 	bl	80119c8 <_printf_i>
 8012070:	e7e4      	b.n	801203c <_vfiprintf_r+0x208>
 8012072:	bf00      	nop
 8012074:	080125b4 	.word	0x080125b4
 8012078:	080125d4 	.word	0x080125d4
 801207c:	08012594 	.word	0x08012594
 8012080:	080127f4 	.word	0x080127f4
 8012084:	080127fe 	.word	0x080127fe
 8012088:	00000000 	.word	0x00000000
 801208c:	08011e11 	.word	0x08011e11
 8012090:	080127fa 	.word	0x080127fa

08012094 <abort>:
 8012094:	b508      	push	{r3, lr}
 8012096:	2006      	movs	r0, #6
 8012098:	f000 f834 	bl	8012104 <raise>
 801209c:	2001      	movs	r0, #1
 801209e:	f7f1 fa5d 	bl	800355c <_exit>

080120a2 <_malloc_usable_size_r>:
 80120a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120a6:	1f18      	subs	r0, r3, #4
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	bfbc      	itt	lt
 80120ac:	580b      	ldrlt	r3, [r1, r0]
 80120ae:	18c0      	addlt	r0, r0, r3
 80120b0:	4770      	bx	lr

080120b2 <_raise_r>:
 80120b2:	291f      	cmp	r1, #31
 80120b4:	b538      	push	{r3, r4, r5, lr}
 80120b6:	4604      	mov	r4, r0
 80120b8:	460d      	mov	r5, r1
 80120ba:	d904      	bls.n	80120c6 <_raise_r+0x14>
 80120bc:	2316      	movs	r3, #22
 80120be:	6003      	str	r3, [r0, #0]
 80120c0:	f04f 30ff 	mov.w	r0, #4294967295
 80120c4:	bd38      	pop	{r3, r4, r5, pc}
 80120c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80120c8:	b112      	cbz	r2, 80120d0 <_raise_r+0x1e>
 80120ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80120ce:	b94b      	cbnz	r3, 80120e4 <_raise_r+0x32>
 80120d0:	4620      	mov	r0, r4
 80120d2:	f000 f831 	bl	8012138 <_getpid_r>
 80120d6:	462a      	mov	r2, r5
 80120d8:	4601      	mov	r1, r0
 80120da:	4620      	mov	r0, r4
 80120dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80120e0:	f000 b818 	b.w	8012114 <_kill_r>
 80120e4:	2b01      	cmp	r3, #1
 80120e6:	d00a      	beq.n	80120fe <_raise_r+0x4c>
 80120e8:	1c59      	adds	r1, r3, #1
 80120ea:	d103      	bne.n	80120f4 <_raise_r+0x42>
 80120ec:	2316      	movs	r3, #22
 80120ee:	6003      	str	r3, [r0, #0]
 80120f0:	2001      	movs	r0, #1
 80120f2:	e7e7      	b.n	80120c4 <_raise_r+0x12>
 80120f4:	2400      	movs	r4, #0
 80120f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80120fa:	4628      	mov	r0, r5
 80120fc:	4798      	blx	r3
 80120fe:	2000      	movs	r0, #0
 8012100:	e7e0      	b.n	80120c4 <_raise_r+0x12>
	...

08012104 <raise>:
 8012104:	4b02      	ldr	r3, [pc, #8]	; (8012110 <raise+0xc>)
 8012106:	4601      	mov	r1, r0
 8012108:	6818      	ldr	r0, [r3, #0]
 801210a:	f7ff bfd2 	b.w	80120b2 <_raise_r>
 801210e:	bf00      	nop
 8012110:	20000010 	.word	0x20000010

08012114 <_kill_r>:
 8012114:	b538      	push	{r3, r4, r5, lr}
 8012116:	4d07      	ldr	r5, [pc, #28]	; (8012134 <_kill_r+0x20>)
 8012118:	2300      	movs	r3, #0
 801211a:	4604      	mov	r4, r0
 801211c:	4608      	mov	r0, r1
 801211e:	4611      	mov	r1, r2
 8012120:	602b      	str	r3, [r5, #0]
 8012122:	f7f1 fa0b 	bl	800353c <_kill>
 8012126:	1c43      	adds	r3, r0, #1
 8012128:	d102      	bne.n	8012130 <_kill_r+0x1c>
 801212a:	682b      	ldr	r3, [r5, #0]
 801212c:	b103      	cbz	r3, 8012130 <_kill_r+0x1c>
 801212e:	6023      	str	r3, [r4, #0]
 8012130:	bd38      	pop	{r3, r4, r5, pc}
 8012132:	bf00      	nop
 8012134:	200028a4 	.word	0x200028a4

08012138 <_getpid_r>:
 8012138:	f7f1 b9f8 	b.w	800352c <_getpid>

0801213c <_init>:
 801213c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801213e:	bf00      	nop
 8012140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012142:	bc08      	pop	{r3}
 8012144:	469e      	mov	lr, r3
 8012146:	4770      	bx	lr

08012148 <_fini>:
 8012148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801214a:	bf00      	nop
 801214c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801214e:	bc08      	pop	{r3}
 8012150:	469e      	mov	lr, r3
 8012152:	4770      	bx	lr
